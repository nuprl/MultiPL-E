name: HumanEval_12_longest
language: lua
prompt: "-- Out of table of strings, return the longest one. Return the first one\
  \ in case of multiple\n-- strings of the same length. Return None in case the input\
  \ table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b', 'c'})\n\
  -- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function longest(strings)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
  \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x', 'y',\
  \ 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www', 'kkkk',\
  \ 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local longest, longestLength, longestString = nil, 0, nil\n  for\
    \ _, string in ipairs(strings) do\n    if longestLength == nil then\n      longest\
    \ = string\n      longestLength = #string\n    elseif #string > longestLength\
    \ then\n      longest, longestLength, longestString = string, #string, string\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest, longestLength = nil, 0\n  for i = 1, #strings do\n\
    \    local length = #strings[i]\n    if length > longestLength then\n      longest,\
    \ longestLength = strings[i], length\n    end\n  end\n  return longest\nend",
  "    local longest, longestLen = nil, 0\n    for _, str in ipairs(strings) do\n\
    \        if str and str:len() > longestLen then\n            longest, longestLen\
    \ = str, str:len()\n        end\n    end\n    return longest or strings[1]\nend",
  "  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings) do\n \
    \   local length = #str\n    if length > longestLength then\n      longest, longestLength\
    \ = str, length\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n \
    \     return longest\n    end\n  end\n  return longest\nend", "  local longest\
    \ = nil\n  for _, str in ipairs(strings) do\n    if str and #str > #longest then\n\
    \      longest = str\n    end\n  end\n  return longest\nend", "  local longest,\
    \ longestLen = nil, 0\n  for _, str in ipairs(strings) do\n    if str == nil then\
    \ break end\n    longest, longestLen = str, #str\n  end\n  if longest == nil then\
    \ return end\n  for i = 1, longestLen do\n    if strings[longest:sub(1, i)] ==\
    \ nil then break end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n \
    \     return longest\n    end\n  end\n  return longest\nend", "    local longest,\
    \ longestLen = nil, 0\n    for _, str in pairs(strings) do\n        local len\
    \ = #str\n        if len > longestLen then\n            longest, longestLen =\
    \ str, len\n        end\n    end\n    return longest\nend", "  local longest,\
    \ longestLen = nil, 0\n  for _, str in ipairs(strings) do\n    if str == \"\"\
    \ then\n      break\n    end\n    local len = #str\n    if len > longestLen then\n\
    \      longest, longestLen = str, len\n    end\n  end\n  return longest\nend",
  "  local longest = nil\n  local longest_len = -1\n  for _, s in pairs(strings) do\n\
    \    local len = #s\n    if len > longest_len then\n      longest = s\n      longest_len\
    \ = len\n    end\n  end\n  return longest or strings[1]\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if #strings[i] == #longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\n  return longest\nend", "   \
    \ local longest, longestLength = nil, 0\n    for _, str in ipairs(strings) do\n\
    \        local length = #str\n        if length > longestLength then\n       \
    \     longest, longestLength = str, length\n        end\n    end\n    return longest\n\
    end", "  local longest = nil\n  local longest_len = -1\n  for _, str in ipairs(strings)\
    \ do\n    local len = #str\n    if len > longest_len then\n      longest, longest_len\
    \ = str, len\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n \
    \     return longest\n    end\n  end\n  return longest\nend", "  if #strings ==\
    \ 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings\
    \ do\n    if strings[i] == longest then\n      longest = strings[i]\n    else\n\
    \      return longest\n    end\n  end\n  return longest\nend", "    local longest,\
    \ longestLength = nil, 0\n    for _, str in pairs(strings) do\n        if str\
    \ == \"\" then break end\n        if str == longestLength then break end\n   \
    \     if str == nil then break end\n        if str > longestLength then\n    \
    \        longest, longestLength = str, str\n        end\n    end\n    return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] ~= longest then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] == longest then\n      longest = strings[i]\n    else\n   \
    \   return longest\n    end\n  end\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest_len = strings[1]:len()\n  for i = 2, #strings do\n\
    \    if strings[i]:len() > longest_len then\n      longest_len = strings[i]:len()\n\
    \    end\n  end\n  return strings[#strings]\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
