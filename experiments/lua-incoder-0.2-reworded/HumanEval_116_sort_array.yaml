name: HumanEval_116_sort_array
language: lua
prompt: "-- In this Kata, you have to sort a table of non-negative integers according\
  \ to\n-- number of ones in their binary representation in ascending order.\n-- For\
  \ similar number of ones, sort based on decimal value.\n-- It must be implemented\
  \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
  \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
  -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
  \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
  \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
  \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
  \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
  \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
  \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
  \ 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local function compare(left, right)\n    local l = 0\n    local r\
    \ = 0\n    while l < right do\n      local m = math.floor(left + r / 2)\n    \
    \  if arr[m - 1] == 0 then\n        r = r + 1\n      elseif arr[m - 1] == 1 then\n\
    \        l = m + 1\n      else\n        local t = arr[m - 1]\n        arr[m -\
    \ 1] = arr[m + 1]\n        arr[m + 1] = t\n        l = m + 1\n        r = r +\
    \ 1\n      end\n    end\n    return l\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend", "  local function compare(lhs, rhs)\n    if lhs < rhs then\n    \
    \  return -1\n    elseif lhs > rhs then\n      return 1\n    else\n      return\
    \ 0\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", "  local\
    \ function compare(lhs, rhs)\n    local lhs_ones = lhs:bitwise_and(1)\n    local\
    \ rhs_ones = rhs:bitwise_and(1)\n    local lhs_decimal = lhs:bitwise_and(0xF)\n\
    \    local rhs_decimal = rhs:bitwise_and(0xF)\n    if lhs_ones == 0 then\n   \
    \   return rhs_decimal\n    elseif rhs_ones == 0 then\n      return lhs_decimal\n\
    \    else\n      return lhs_decimal - rhs_decimal\n    end\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend", "  local function compare(lhs, rhs)\n    if lhs\
    \ < rhs then\n      return -1\n    elseif lhs > rhs then\n      return 1\n   \
    \ else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n  return arr\n\
    end", "  local function cmp_arr(x, y)\n    if x > y then\n      return 1\n   \
    \ elseif x < y then\n      return -1\n    else\n      return 0\n    end\n  end\n\
    \  table.sort(arr, cmp_arr)\n  return arr\nend", "  -- We use an auxiliary array\
    \ for counting number of ones in binary representation\n  local counts = {}\n\
    \  for i = 1, #arr do\n    local bin = bit.rshift(tostring(arr[i]), i)\n    counts[bin]\
    \ = counts[bin] or 0\n    counts[bin] = counts[bin] + 1\n  end\n  -- Sort based\
    \ on number of ones in binary representation\n  table.sort(counts, function(a,\
    \ b) return a < b end)\n  -- Sort based on decimal value\n  table.sort(arr, function(a,\
    \ b) return tonumber(string.format(\"%0.f\", a)) < tonumber(string.format(\"%0.f\"\
    , b)) end)\n  return arr\nend", "  local function compare(left, right)\n    if\
    \ left == 0 then\n      return right\n    end\n    if right == 0 then\n      return\
    \ left\n    end\n    return left < right and -1 or 1\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend", "  -- Write your code here\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend", "  local function compare(lhs, rhs)\n    if lhs < rhs then\n\
    \      return -1\n    elseif lhs > rhs then\n      return 1\n    else\n      return\
    \ 0\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", "  local\
    \ function compare(lhs, rhs)\n    local lhs_ones = lhs:bits():lshift(lhs:size()\
    \ - 1) -- number of ones in lhs\n    local rhs_ones = rhs:bits():lshift(rhs:size()\
    \ - 1) -- number of ones in rhs\n    if lhs_ones < rhs_ones then return -1 end\n\
    \    if lhs_ones > rhs_ones then return 1 end\n    -- lhs has same number of ones\
    \ as rhs\n    local lhs_decimal = lhs:bits():rshift(lhs:size() - 1) -- decimal\
    \ value of lhs\n    local rhs_decimal = rhs:bits():rshift(rhs:size() - 1) -- decimal\
    \ value of rhs\n    if lhs_decimal < rhs_decimal then return -1 end\n    if lhs_decimal\
    \ > rhs_decimal then return 1 end\n    -- lhs has same decimal value as rhs\n\
    \    return 0\n  end\n  table.sort(arr, compare)\n  return arr\nend", "  local\
    \ function compare(lhs, rhs)\n    local l = 0\n    local r = 0\n    while l <\
    \ lhs and r < rhs do\n      if lhs[l] == rhs[r] then\n        l = l + 1\n    \
    \    r = r + 1\n      elseif lhs[l] > rhs[r] then\n        return 1\n      else\n\
    \        return -1\n      end\n    end\n    if l == lhs then\n      return r -\
    \ l\n    else\n      return lhs - r\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend", "  local function compare(lhs, rhs)\n    if lhs < rhs then\
    \ return -1 end\n    if lhs > rhs then return 1 end\n    return 0\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend", "  local function compare(lhs, rhs)\n    if lhs\
    \ < rhs then\n      return -1\n    elseif lhs > rhs then\n      return 1\n   \
    \ else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n  return arr\n\
    end", "  -- Write your code here\n  -- return arr\nend", "  -- Sort the array\
    \ in ascending order based on number of ones\n  -- In binary representation, count\
    \ number of 1s\n  local ones = {}\n  for i = 1, #arr do\n    local bin = bit.rshift(arr[i],\
    \ 1)\n    local count = bit.band(bin, 2)\n    if count ~= 0 then\n      table.insert(ones,\
    \ count)\n    end\n  end\n  -- Sort the array in ascending order based on decimal\
    \ value\n  table.sort(ones)\n  -- Reverse the order of the ones\n  local reversed\
    \ = {}\n  for i = #ones, 1, -1 do\n    table.insert(reversed, ones[i])\n  end\n\
    \  -- Reverse the order of the sorted ones\n  table.sort(reversed)\n  -- Reverse\
    \ the order of the sorted array\n  table.sort(arr)\n  -- Reverse the order of\
    \ the sorted ones\n  for i = #reversed, 1, -1 do\n    table.insert(arr, ones[i])\n\
    \  end\n  return arr\nend", "  -- We use an auxiliary array for counting number\
    \ of ones in binary representation\n  -- of the numbers in arr. For example, for\
    \ arr = {1, 5, 2, 3, 4}, the auxiliary\n  -- array will be {1, 1, 2, 1, 2, 1}.\n\
    \  local aux\n  local function count_ones(x)\n    if aux == nil then\n      aux\
    \ = {}\n      for i = 1, #x do\n        aux[i] = 0\n      end\n    end\n    aux[x]\
    \ = aux[x] + 1\n  end\n  -- We sort arr based on number of ones in binary representation\
    \ of each number\n  -- in arr. For example, for arr = {1, 5, 2, 3, 4}, the sorted\
    \ array will be\n  -- arr = {1, 2, 3, 4, 5}.\n  for i = 1, #arr do\n    count_ones(arr[i])\n\
    \  end\n  -- We sort arr based on decimal value of each number in arr. For example,\
    \ for\n  -- arr = {-2, -3, -4, -5, -6}, the sorted array will be arr = {-6, -5,\
    \ -4, -3, -2}.\n  for i = 1, #arr do\n    arr[i] = math.floor(arr[i] + 0.5)\n\
    \  end\n  return arr\nend", "  local function helper(arr, i, j)\n    if i == j\
    \ then\n      return\n    end\n    if arr[i] > arr[j] then\n      arr[i], arr[j]\
    \ = arr[j], arr[i]\n    end\n    helper(arr, i + 1, j - 1)\n  end\n  helper(arr,\
    \ 1, #arr)\n  return arr\nend", "  local function compare(lhs, rhs)\n    if lhs\
    \ < rhs then\n      return -1\n    elseif lhs > rhs then\n      return 1\n   \
    \ else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n  return arr\n\
    end", "  local function compare(lhs, rhs)\n    if lhs == rhs then\n      return\
    \ 0\n    end\n    if lhs < rhs then\n      return -1\n    end\n    return 1\n\
    \  end\n  table.sort(arr, compare)\n  return arr\nend", "  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
