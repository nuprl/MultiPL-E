name: HumanEval_68_pluck
language: lua
prompt: "-- \"Given a table representing a branch of a tree that has non-negative\
  \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n-- The\
  \ plucked node should be the node with the smallest even value.\n-- If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n-- The plucked node should be returned in a table, [ smalest_value, its\
  \ index ],\n-- If there are no even values or the given table is empty, return [].\n\
  -- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n-- Example 2:\n-- >>> pluck({1, 2,\
  \ 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example 4:\n-- >>> pluck({5,\
  \ 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest value, but  there\
  \ are two zeros,\n-- so we will choose the first zero, which has the smallest index.\n\
  -- Constraints:\n-- * 1 <= nodes.length <= 10000\n-- * 0 <= node.value\nlocal function\
  \ pluck(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
  \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
  \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
  \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}), {0,\
  \ 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
  \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["  local smallest_value = nil\n  local smallest_index = nil\n  local\
    \ results = {}\n  for i = 1, #arr do\n    if smallest_value == nil then\n    \
    \  smallest_value = arr[i]\n      smallest_index = i\n    else\n      if arr[i]\
    \ < smallest_value then\n        smallest_value = arr[i]\n        smallest_index\
    \ = i\n      end\n    end\n  end\n  if smallest_value == nil then\n    return\
    \ {}\n  end\n  results[smallest_value] = smallest_index\n  return results\nend",
  "  -- Base case\n  if #arr == 0 then\n    return {}\n  end\n  -- Find the smallest\
    \ even value\n  local smalest_value = math.min(unpack(arr))\n  -- Find the index\
    \ of the smallest even value\n  local smallest_index = #arr\n  for i = 1, #arr\
    \ do\n    if arr[i] % 2 == 0 then\n      smalest_value = math.min(smalest_value,\
    \ arr[i])\n      smallest_index = i\n    end\n  end\n  -- Return the smallest\
    \ even value and its index\n  return { smalest_value, smallest_index }\nend",
  "    local smallest_value, smallest_index = nil, nil\n    local smallest_even_value\
    \ = nil\n    for _, node in ipairs(arr) do\n        if smallest_value == nil then\n\
    \            if node.value % 2 == 0 then\n                smallest_even_value\
    \ = node.value\n                smallest_value = node.value\n                smallest_index\
    \ = node.index\n            else\n                smallest_value = node.value\n\
    \                smallest_index = node.index\n            end\n        else\n\
    \            if node.value % 2 == 0 then\n                if smallest_even_value\
    \  < node.value then\n                    smallest_even_value = node.value\n \
    \                   smallest_value = node.value\n                    smallest_index\
    \ = node.index\n                end\n            else\n                if smallest_value\
    \ < node.value then\n                    smallest_value = node.value\n       \
    \             smallest_index = node.index\n                end\n            end\n\
    \        end\n    end\n    if smallest_even_value  == nil then\n        return\
    \ nil\n    end\n    return { smallest_value, smallest_index }\nend", "    local\
    \ smallest_value\n    local smallest_index\n    local smallest_even_value\n  \
    \  local smallest_even_index\n    local index\n    local value\n    for index,\
    \ value in ipairs(arr) do\n        if smallest_value == nil then\n           \
    \ smallest_value = value\n            smallest_index = index\n            smallest_even_value\
    \ = value\n            smallest_even_index = index\n        elseif smallest_value\
    \ == value then\n            if smallest_even_value == nil then\n            \
    \    smallest_even_value = value\n                smallest_even_index = index\n\
    \            elseif smallest_even_value == value then\n                if smallest_even_index\
    \ < index then\n                    smallest_even_value = value\n            \
    \        smallest_even_index = index\n                end\n            end\n \
    \       end\n    end\n    if smallest_even_value == nil then\n        return {}\n\
    \    end\n    return { smallest_value, smallest_even_index }\nend", "    local\
    \ smalest_value\n    local smalest_index\n    for i = 1, #arr do\n        if arr[i]\
    \ % 2 == 0 then\n            if smalest_value == nil then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            elseif smalest_value\
    \ < arr[i] then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            end\n        end\n    end\n    if smalest_value == nil then\n\
    \        return nil\n    end\n    local smalest_value_with_even_index = smalest_value\
    \ .. smalest_index\n    local smalest_value_with_even_index_in_table = {}\n  \
    \  local smalest_value_in_table = {}\n    for i = 1, #arr do\n        if arr[i]\
    \ % 2 == 0 then\n            smalest_value_with_even_index_in_table[i] = arr[i]\n\
    \        else\n            smalest_value_in_table[i] = arr[i]\n        end\n \
    \   end\n    local smalest_value_in_table_with_even_index = smalest_value_in_table[smalest_index]\n\
    \    local smalest_value_in_table_with_even_index_in_table = {}\n    for i = 1,\
    \ #smalest_value_in_table_with_even_index do\n        smalest_value_in_table_with_even_index_in_table[i]\
    \ = smalest_value_in_table_with_even_index[i]\n    end\n    if smalest_value_with_even_index_in_table\
    \ == smalest_value_in_table_with_even_index then\n        return smalest_value_with_even_index_in_table\n\
    \    else\n        return smalest_value_in_table_with_even_index_in_table\n  \
    \  end\nend", "  local smalest_value = nil\n  local smallest_index = nil\n  for\
    \ _, node in ipairs(arr) do\n    if node.value % 2 == 0 then\n      if smalest_value\
    \ == nil then\n        smalest_value = node.value\n        smallest_index = node.index\n\
    \      elseif node.value < smalest_value then\n        smalest_value = node.value\n\
    \        smallest_index = node.index\n      end\n    end\n  end\n  if smalest_value\
    \ == nil then\n    return {}\n  end\n  return { smalest_value, smallest_index\
    \ }\nend", "  local smallest, smallest_index, smallest_even_value = nil, nil,\
    \ nil\n  for i, v in ipairs(arr) do\n    if smallest_even_value == nil then\n\
    \      smallest_even_value = v\n      smallest_index = i\n    elseif smallest_even_value\
    \ < v then\n      smallest_even_value = v\n      smallest_index = i\n    end\n\
    \  end\n  if smallest_even_value == nil then\n    return nil\n  end\n  return\
    \ smallest_even_value\nend", "    local smallest, smallest_index, smallest_even_value\
    \ = nil, nil, nil\n    for _, v in ipairs(arr) do\n        if smallest_even_value\
    \ == nil then\n            smallest_even_value = v\n            smallest_index\
    \ = v\n        elseif smallest_even_value < v then\n            smallest_even_value\
    \ = v\n            smallest_index = v\n        end\n    end\n    if smallest_even_value\
    \ == nil then\n        return nil\n    end\n    local smallest_value = smallest_even_value\n\
    \    local smallest_index = smallest_index\n    for _, v in ipairs(arr) do\n \
    \       if v == smallest_value then\n            smallest_index = smallest_index\
    \ + 1\n        end\n    end\n    return { smallest_value, smallest_index }\nend",
  "  -- Base case\n  if #arr == 0 then\n    return {}\n  end", "    local smalest_value\n\
    \    local smalest_index\n    local smalest_index_value\n    local smalest_index_value_index\n\
    \    local smalest_index_value_index2\n    local smalest_index_value_index3\n\
    \    local smalest_index_value_index4\n    local smalest_index_value_index5\n\
    \    local smalest_index_value_index6\n    local smalest_index_value_index7\n\
    \    local smalest_index_value_index8\n    local smalest_index_value_index9\n\
    \    local smalest_index_value_index10\n    local smalest_index_value_index11\n\
    \    local smalest_index_value_index12\n    local smalest_index_value_index13\n\
    \    local smalest_index_value_index14\n    local smalest_index_value_index15\n\
    \    local smalest_index_value_index16\n    local smalest_index_value_index17\n\
    \    local smalest_index_value_index18\n    local smalest_index_value_index19\n\
    \    local smalest_index_value_index20\n    local smalest_index_value_index21\n\
    \    local smalest_index_value_index22\n    local smalest_index_value_index23\n\
    \    local smalest_index_value_index24\n    local smalest_index_value_index25\n\
    \    local smalest_index_value_index26\n    local smalest_index_value_index27\n\
    \    local smalest_index_value_index28\n    local smalest_index_value_index29\n\
    \    local smalest_index_value_index30\n    local smalest_index_value_index31\n\
    \    local smalest_index_value_index32\n    local smalest_index_value_index33\n\
    \    local smalest_index_value_index34\n    local smalest_index_value_index35\n\
    \    local smalest_index_value_index36\n    local smalest_index_value_index37\n\
    \    local smalest_index_value_index38\n    local smalest_index_value_index39\n\
    \    local smalest_index_value_index40\n    local smalest_index_value_index41\n\
    \    local smalest_index_value_index42\n    local smalest_index_value_index43\n\
    \    local smalest_index_value_index44\n    local smalest_index_value_index45\n\
    \    local smalest_index_value_index46\n    local smalest_index_value_index47\n\
    \    local smalest_index_value_index48\n    local smalest_index_value_index49\n\
    \    ", "  local smallest_value_index = nil\n  local smallest_value = nil\n  local\
    \ smallest_value_index = 1\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n\
    \      if smallest_value == nil then\n        smallest_value = arr[i]\n      \
    \  smallest_value_index = i\n      elseif smallest_value < arr[i] then\n     \
    \   smallest_value = arr[i]\n        smallest_value_index = i\n      end\n   \
    \ end\n  end\n  if smallest_value == nil then\n    return {}\n  end\n  local new_arr\
    \ = {}\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n      new_arr[i] =\
    \ arr[i]\n    end\n  end\n  new_arr[smallest_value_index] = smallest_value\n \
    \ return new_arr\nend", "  -- Base case\n  if #arr == 0 then\n    return {}\n\
    \  end", "    local smalest_value = nil\n    local smallest_index = nil\n    for\
    \ _, v in ipairs(arr) do\n        if smallest_index == nil then\n            smallest_index\
    \ = v\n            smalest_value = v\n        elseif smallest_index > v then\n\
    \            smallest_index = v\n            smalest_value = v\n        end\n\
    \    end\n    if smallest_index == nil then\n        return nil\n    end\n   \
    \ local index = nil\n    for _, v in ipairs(arr) do\n        if v == smalest_value\
    \ then\n            index = v\n        end\n    end\n    return { smalest_value,\
    \ index }\nend", "    local smalest_value\n    local smalest_index\n    for _,\
    \ v in ipairs(arr) do\n        if smalest_value == nil then\n            smalest_value\
    \ = v\n            smalest_index = 1\n        elseif smalest_value < v then\n\
    \            smalest_value = v\n            smalest_index = smalest_index + 1\n\
    \        end\n    end\n    if smalest_value == nil then\n        return {}\n \
    \   end\n    local smalest_value_index = nil\n    for _, v in ipairs(arr) do\n\
    \        if smalest_value == v then\n            smalest_value_index = smalest_value_index\
    \ + 1\n        end\n    end\n    if smalest_value_index == nil then\n        return\
    \ {}\n    end\n    local smalest_value_index = smalest_value_index - 1\n    local\
    \ smalest_value_index = smalest_value_index - 1\n    local smalest_value_index\
    \ = smalest_value_index - 1\n    local smalest_value_index = smalest_value_index\
    \ - 1\n    local smalest_value_index = smalest_value_index - 1\n    local smalest_value_index\
    \ = smalest_value_index - 1\n    local smalest_value_index = smalest_value_index\
    \ - 1\n    local smalest_value_index = smalest_value_index - 1\n    local smalest_value_index\
    \ = smalest_value_index - 1\n    local smalest_value_index = smalest_value_index\
    \ - 1\n    local smalest_value_index = smalest_value_index - 1\n    local smalest_value_index\
    \ = smalest_value_index - 1\n    local smalest_value_index = smalest_value_index\
    \ - 1\n    local smalest_value_index = smalest_value_index - 1\n    local smalest_value_index\
    \ = smalest_value_index - 1\n    local smalest_value_index = smalest_value_index\
    \ - 1\n    local smalest_value_index = smalest_value_index - 1\n    local smalest_value_index\
    \ = smalest_value_index - 1\n    local smalest_value_index = smalest_value_index\
    \ - 1\n    local smalest_value_index = smalest_value_index - 1\n    local smalest_value_index\
    \ = smalest_value_index - 1\n    local smalest_value_index = smalest_value_index\
    \ - 1\n    local smalest_value_index = smalest_value_index - 1\n    local smalest_value_index\
    \ = smalest_value_index - 1\n    local smalest_value_index = smalest_value_index\
    \ - 1\n    local smalest_value_index = smalest_", "  -- Base case\n  if #arr ==\
    \ 0 then\n    return {}\n  end", "  -- Base case\n  if #arr == 0 then\n    return\
    \ {}\n  end", "    local smalest_value, smalest_index = nil, nil\n    local smallest_value\
    \ = math.min(unpack(arr))\n    for _, node in ipairs(arr) do\n        if smallest_value\
    \ == math.floor(smallest_value) then\n            if smallest_value == 0 then\n\
    \                smalest_value, smalest_index = smallest_value, 1\n          \
    \  else\n                if smalest_value == 0 then\n                    smalest_value,\
    \ smalest_index = smallest_value, 1\n                else\n                  \
    \  if smalest_value < smallest_value then\n                        smalest_value,\
    \ smalest_index = smallest_value, 1\n                    else\n              \
    \          if smalest_value == smallest_value then\n                         \
    \   smalest_index = smalest_index + 1\n                        end\n         \
    \           end\n                end\n            end\n        end\n    end\n\
    \    if smalest_value == nil then\n        return {}\n    end\n    return { smalest_value,\
    \ smalest_index }\nend", "    local smalest_value, smalest_index = nil, nil\n\
    \    local smalest_even_value = nil\n    local smalest_even_index = nil\n    for\
    \ _, node in ipairs(arr) do\n        if node.value % 2 == 0 then\n           \
    \ if smalest_value == nil then\n                smalest_value = node.value\n \
    \               smalest_index = node.index\n            elseif smalest_value <\
    \ node.value then\n                smalest_value = node.value\n              \
    \  smalest_index = node.index\n            end\n            if smalest_even_value\
    \ == nil then\n                smalest_even_value = node.value\n             \
    \   smalest_even_index = node.index\n            elseif smalest_even_value < node.value\
    \ then\n                smalest_even_value = node.value\n                smalest_even_index\
    \ = node.index\n            end\n        end\n    end\n    if smalest_value ==\
    \ nil then\n        return nil\n    end\n    if smalest_even_index == nil then\n\
    \        return smalest_value, smalest_index\n    end\n    return smalest_value,\
    \ smalest_index, smalest_even_index, smalest_even_value\nend", "  -- Base case\n\
    \  if #arr == 0 then\n    return {}\n  end", "    local smallest_value, smallest_index\
    \ = nil, -1\n    local smalest_value, smalest_index = nil, -1\n    for _, node\
    \ in ipairs(arr) do\n        if smallest_value == nil then\n            smallest_value\
    \ = node.value\n            smallest_index = node.index\n        elseif smallest_value\
    \ < node.value then\n            smallest_value = node.value\n            smallest_index\
    \ = node.index\n        end\n        if node.value % 2 == 0 then\n           \
    \ if smalest_value == nil then\n                smalest_value = node.value\n \
    \               smalest_index = node.index\n            elseif smalest_value <\
    \ node.value then\n                smalest_value = node.value\n              \
    \  smalest_index = node.index\n            end\n        end\n    end\n    if smallest_value\
    \ == nil then\n        return nil\n    end\n    if smalest_value == nil then\n\
    \        return { smallest_value, smallest_index }\n    end\n    if smallest_value\
    \ < smalest_value then\n        return { smallest_value, smallest_index }\n  \
    \  end\n    return { smalest_value, smalest_index }\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
