language: lua
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Write\
    \ your code here.\n  local result = {}\n  local max = 0\n  for i = 1, k do\n \
    \   if arr[i] > max then\n      max = arr[i]\n    end\n  end\n  for i = 1, k do\n\
    \    if arr[i] > max then\n      result[i] = arr[i]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvgf606b.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpuvgf606b.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the maximum element\
    \ in the given array\n  local max_element = arr[1]\n  for i = 2, #arr do\n   \
    \ if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n \
    \ \n  -- Sort the array in descending order and return the k largest elements\n\
    \  local sorted_arr = table.sort(arr, function(a, b) return b - a; end)\n  \n\
    \  return sorted_arr:sub(1, k)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpouub05lk.lua:33:\
    \ attempt to index local 'sorted_arr' (a nil value)\nstack traceback:\n\t/tmp/tmpouub05lk.lua:33:\
    \ in function 'candidate'\n\t/tmp/tmpouub05lk.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be greater than 0 and less than or equal to length\
    \ of arr')\n  \n  local result = {}\n  local max = 0\n  local index = 1\n  \n\
    \  repeat\n    local element = arr[index]\n    if element > max then\n      max\
    \ = element\n    end\n    \n    if index == k then\n      table.insert(result,\
    \ max)\n      break\n    end\n    \n    index = index + 1\n  until index == k\n\
    \  \n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv2r5ybdy.lua:43:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpv2r5ybdy.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    local m = math.max(1, n)\n    local t = {}\n    local i = 1\n\
    \    while i <= m do\n        local j = 1\n        while j <= n and arr[j] < arr[i]\
    \ do\n            j = j + 1\n        end\n        if j > n then\n            table.insert(t,\
    \ arr[i])\n            i = i + 1\n        else\n            table.insert(t, arr[j])\n\
    \            i = i + 1\n            j = j + 1\n        end\n    end\n    if k\
    \ > n then\n        return t\n    else\n        return table.sort(t)\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpayrj5wdf.lua:45:\
    \ expected: {-4, -3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmpayrj5wdf.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq0k3v5wh.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local t\
    \ = {}\n  local len = #arr\n  local m = math.min(k, len)\n  for i = 1, m do\n\
    \    local v = arr[i]\n    if v > t[#t] then\n      t[#t] = v\n    end\n  end\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpedqol4m0.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpedqol4m0.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpedqol4m0.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local n = #arr\n  assert(n >= k, 'k must be less than or equal to n')\n\
    \  assert(k > 0, 'k must be positive')\n  assert(n >= k, 'k must be less than\
    \ or equal to n')\n  \n  -- Sort the array in descending order.\n  for i = n -\
    \ 1, -1, -1 do\n    local element = arr[i]\n    if element > result[k] then\n\
    \      result[k] = element\n    end\n  end\n  \n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaoej9t4j.lua:26:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpaoej9t4j.lua:26:\
    \ in function 'candidate'\n\t/tmp/tmpaoej9t4j.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to the\
    \ length of the array\")\n  local result = {}\n  local max = 0\n  for i = 1, k\
    \ do\n    if arr[i] > max then\n      max = arr[i]\n    end\n  end\n  for i =\
    \ 1, k do\n    if arr[i] > max then\n      result[i] = arr[i]\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwc94p45d.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpwc94p45d.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    local m = math.min(k, n)\n    local t = {}\n    for i = 1, m do\n\
    \        local max_val = arr[i]\n        for j = 1, n do\n            if arr[j]\
    \ > max_val then\n                max_val = arr[j]\n            end\n        end\n\
    \        t[#t + 1] = max_val\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo98l9q8b.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpo98l9q8b.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Write\
    \ your code here.\n  local max = {}\n  local i = 0\n  local j = 0\n  local maxlen\
    \ = 0\n  while i < #arr do\n    if j > k then\n      max[#max+1] = arr[i]\n  \
    \    maxlen = #max\n    else\n      if arr[i] > arr[j] then\n        max[#max+1]\
    \ = arr[i]\n        i = i + 1\n      else\n        max[#max+1] = arr[j]\n    \
    \    j = j + 1\n      end\n    end\n  end\n  if maxlen > k then\n    for i = k+1,\
    \ maxlen do\n      max[#max+1] = arr[i]\n    end\n  end\n  return max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9mvvxqv0.lua:27:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp9mvvxqv0.lua:27:\
    \ in function 'candidate'\n\t/tmp/tmp9mvvxqv0.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  assert(k > 0 and k < n)\n  local m = math.max(k, n)\n  local t = {}\n\
    \  for i = 1, m do\n    local v = arr[i]\n    for j = 1, n do\n      if j == i\
    \ then\n        t[j] = v\n      elseif v > t[j] then\n        t[j] = v\n     \
    \ end\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwirnd51v.lua:18:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmpwirnd51v.lua:18: in function\
    \ 'candidate'\n\t/tmp/tmpwirnd51v.lua:37: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  local m = math.max(k, n)\n  local t = {}\n  for i = 1, m do\n    table.insert(t,\
    \ arr[i])\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ofyny4x.lua:29:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp9ofyny4x.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  local m = math.min(k, n)\n  local max = arr[1]\n  for i = 2, m do\n\
    \    if arr[i] > max then\n      max = arr[i]\n    end\n  end\n  return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_c0p94p.lua:31:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmpq_c0p94p.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to #arr\"\
    )\n  local result = {}\n  local maxVal = -math.inf\n  local maxIdx = 0\n  for\
    \ i = 1, k do\n    local curVal = arr[i]\n    if curVal > maxVal then\n      maxVal\
    \ = curVal\n      maxIdx = i\n    end\n  end\n  result[maxIdx] = maxVal\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0y4k1ghi.lua:19:\
    \ attempt to perform arithmetic on field 'inf' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp0y4k1ghi.lua:19: in function 'candidate'\n\t/tmp/tmp0y4k1ghi.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Write\
    \ your code here.\n  local table = {}\n  local max = 0\n  for i = 1, k do\n  \
    \  if arr[i] > max then\n      max = arr[i]\n    end\n  end\n  for i = 1, k do\n\
    \    if arr[i] > max then\n      table[i] = arr[i]\n    end\n  end\n  return table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpunw8jww2.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpunw8jww2.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq0k3v5wh.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq0k3v5wh.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr)\n  local result = {}\n  local pos = 1\n  local max_val =\
    \ arr[pos]\n  for i = 1, k do\n    if arr[i] > max_val then\n      max_val = arr[i]\n\
    \    end\n    result[i] = max_val\n    pos = pos + 1\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpijouwt8r.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {-3, -3, 5}\nstack traceback:\n\t/tmp/tmpijouwt8r.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  assert(n >= 0 and k <= n)\n  local t = {}\n  local m = math.max(1,\
    \ math.floor(n/2))\n  for i = 1, m do\n    local x = arr[i]\n    if x > t[#t]\
    \ then\n      t[#t] = x\n    end\n  end\n  if k > #t then\n    return t\n  end\n\
    \  local i = k\n  local j = n - k\n  while i <= j do\n    local x = arr[i]\n \
    \   i = i + 1\n    if x > t[#t] then\n      t[#t] = x\n    end\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcqk3iu11.lua:23:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpcqk3iu11.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmpcqk3iu11.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be greater than 0 and less than or equal to length\
    \ of arr')\n  local result = {}\n  for i = 1, k do\n    local max_value = -math.inf\n\
    \    for j = 1, #arr do\n      if arr[j] > max_value then\n        max_value =\
    \ arr[j]\n      end\n    end\n    result[i] = max_value\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvo6kc77_.lua:20:\
    \ attempt to perform arithmetic on field 'inf' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpvo6kc77_.lua:20: in function 'candidate'\n\t/tmp/tmpvo6kc77_.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Write\
    \ your code here.\n  local n = #arr\n  local m = math.max(1, math.min(k, n))\n\
    \  local t = {}\n  for i = 1, m do\n    local max_idx = i\n    for j = 1, n do\n\
    \      if arr[j] > arr[max_idx] then\n        max_idx = j\n      end\n    end\n\
    \    t[i] = arr[max_idx]\n  end\n  return t\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdn43r4mw.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpdn43r4mw.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  local m = math.max(k, n)\n  local t = {}\n  for i = 1, m do\n    t[i]\
    \ = arr[i]\n  end\n  for i = 1, n do\n    if t[i] > t[i - 1] then\n      t[i -\
    \ 1], t[i] = t[i], t[i - 1]\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr3z5hph0.lua:24:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpr3z5hph0.lua:24:\
    \ in function 'candidate'\n\t/tmp/tmpr3z5hph0.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be greater than 0 and less than or equal to #arr')\n\
    \  local result = {}\n  for i = 1, k do\n    local max = arr[i]\n    for j = 1,\
    \ #arr do\n      if arr[j] > max then\n        max = arr[j]\n      end\n    end\n\
    \    result[i] = max\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkrbhoa5v.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpkrbhoa5v.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq0k3v5wh.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr)\n  local result = {}\n  local pos = 1\n  local max = -math.inf\n\
    \  for i = 1, k do\n    if arr[i] > max then\n      max = arr[i]\n    end\n  end\n\
    \  while pos < k do\n    if arr[pos] > max then\n      max = arr[pos]\n    end\n\
    \    pos = pos + 1\n  end\n  for i = 1, k do\n    result[i] = max\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvpuh226k.lua:20:\
    \ attempt to perform arithmetic on field 'inf' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpvpuh226k.lua:20: in function 'candidate'\n\t/tmp/tmpvpuh226k.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be greater than 0 and less than or equal to #arr')\n\
    \  local result = {}\n  local max = 0\n  for i = 1, k do\n    if arr[i] > max\
    \ then\n      max = arr[i]\n    end\n  end\n  for i = 1, k do\n    if arr[i] >\
    \ max then\n      result[i] = arr[i]\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0d_brg6p.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmp0d_brg6p.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Write\
    \ your code here.\n  local result = {}\n  local max = 0\n  for i = 1, k do\n \
    \   if arr[i] > max then\n      max = arr[i]\n    end\n  end\n  for i = 1, k do\n\
    \    if arr[i] > max then\n      result[i] = arr[i]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvgf606b.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpuvgf606b.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the maximum number\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Sort the remaining elements and return them\n  local sorted_arr = {}\n\
    \  for i = 2, k do\n    if arr[i] > max_element then\n      table.insert(sorted_arr,\
    \ arr[i])\n    end\n  end\n  return sorted_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpisppkx11.lua:43:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpisppkx11.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ arr_size = #arr\n    local max_arr_size = k\n    local max_arr = {}\n    local\
    \ max_arr_i = 0\n    local max_arr_j = 0\n    local max_arr_val = 0\n    local\
    \ max_arr_val_i = 0\n    local max_arr_val_j = 0\n    local max_arr_val_count\
    \ = 0\n    local max_arr_val_count_i = 0\n    local max_arr_val_count_j = 0\n\
    \    local max_arr_val_count_k = 0\n    local max_arr_val_count_k_i = 0\n    local\
    \ max_arr_val_count_k_j = 0\n    local max_arr_val_count_k_k = 0\n    local max_arr_val_count_k_k_i\
    \ = 0\n    local max_arr_val_count_k_k_j = 0\n    local max_arr_val_count_k_k_k\
    \ = 0\n    local max_arr_val_count_k_k_k_i = 0\n    local max_arr_val_count_k_k_k_j\
    \ = 0\n    local max_arr_val_count_k_k_k_k = 0\n    local max_arr_val_count_k_k_k_i\
    \ = 0\n    local max_arr_val_count_k_k_k_j = 0\n    local max_arr_val_count_k_k_k_k\
    \ = 0\n    local max_arr_val_count_k_k_k_i = 0\n    local max_arr_val_count_k_k_k_j\
    \ = 0\n    local max_arr_val_count_k_k_k_k = 0\n    local max_arr_val_count_k_k_k_i\
    \ = 0\n    local max_arr_val_count_k_k_k_j = 0\n    local max_arr_val_count_k_k_k_k\
    \ = 0\n    local max_arr_val_count_k_k_k_i = 0\n    local max_arr_val_count_k_k_k_j\
    \ = 0\n    local max_arr_val_count_k_k_k_k = 0\n    local max_arr_val_count_k_k_k_i\
    \ = 0\n    local max_arr_val_count_k_k_k_j = 0\n    local max_arr_val_count_k_k_k_k\
    \ = 0\n    local max_arr_val_count_k_k_k_i = 0\n    local max_arr_val_count_k_k_k_j\
    \ = 0\n    local max_arr_val_count_k_k_k_k = 0\n    local max_arr_val_count_k_k_k_i\
    \ = 0\n    local max_arr_val_count_k_k_k_j = 0\n    local max_arr_val_count_k_k_k_k\
    \ = 0\n    local max_arr_val_count_k_k_k_i = 0\n    local max_arr_val_count_k_k_k_j\
    \ = 0\n    local max_arr_val_count_k_k_k_k = 0\n    local max_arr_val_count_k_k_k_i\
    \ = 0\n    local max_arr_val_count_k_k_k_j = 0\n    local max_arr_val_count_k_k_k_k\
    \ = 0\n    local max_arr_val_count_k_k_k_i = 0\n    local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz3g7xwr9.lua:84: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the maximum element\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Find the maximum element in the remaining elements\n  local max_element_rest\
    \ = arr[k]\n  for i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n\
    \      max_element_rest = arr[i]\n    end\n  end\n  \n  -- Return the maximum\
    \ element and the remaining elements\n  return max_element, {max_element_rest}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp38ayrqc2.lua:45:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmp38ayrqc2.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local max_arr\
    \ = {}\n  local max_len = -1\n  local max_idx = -1\n  for i = 1, k do\n    max_idx\
    \ = i\n    for j = 1, k do\n      if arr[i] > arr[j] then\n        max_idx = j\n\
    \      end\n    end\n    max_arr[max_idx] = arr[i]\n    max_len = j\n  end\n \
    \ return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjf0c88a7.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {2=5}\nstack traceback:\n\t/tmp/tmpjf0c88a7.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local i = 1\n  while i <= k do\n    local max = -1000\n    for j = 1,\
    \ i do\n      if arr[j] > max then\n        max = arr[j]\n      end\n    end\n\
    \    result[i] = max\n    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcb7q0qmf.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {-3, -3, 5}\nstack traceback:\n\t/tmp/tmpcb7q0qmf.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be greater than 0 and less than or equal to the\
    \ length of the array')\n  local result = {}\n  local max = 0\n  for i = 1, k\
    \ do\n    local element = arr[i]\n    if element > max then\n      max = element\n\
    \    end\n  end\n  for i = 1, k do\n    table.insert(result, max)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_pb21h7m.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp_pb21h7m.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq0k3v5wh.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local pos = 0\n  local len = #arr\n  \n  -- If k is less than or equal\
    \ to zero, return an empty table.\n  if k < 1 then return result end\n  \n  --\
    \ If k is greater than or equal to the length of arr, return an empty table.\n\
    \  if k >= len then return result end\n  \n  -- If k is equal to the length of\
    \ arr, return arr itself.\n  if k == len then return arr end\n  \n  -- Find the\
    \ maximum element in the first k elements of arr.\n  local maxElem = arr[pos]\n\
    \  pos = pos + 1\n  \n  -- Find the maximum element in the remaining elements\
    \ of arr.\n  for i = pos, len-1 do\n    if arr[i] > maxElem then\n      maxElem\
    \ = arr[i]\n    end\n  end\n  \n  -- Add the maximum element to the result table.\n\
    \  table.insert(result, maxElem)\n  \n  -- Find the maximum element in the next\
    \ k elements of arr.\n  for i = pos+1, len-k+1 do\n    if arr[i] > maxElem then\n\
    \      maxElem = arr[i]\n    end\n  end\n  \n  -- Add the maximum element to the\
    \ result table.\n  table.insert(result, maxElem)\n  \n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp01mvmfyj.lua:60:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmp01mvmfyj.lua:60:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return {arr[1]}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvkdel6rv.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the max number\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Find the max number in the remaining elements\n  local max_element_rest\
    \ = arr[k]\n  for i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n\
    \      max_element_rest = arr[i]\n    end\n  end\n  \n  -- Return the max number\
    \ in the first k elements and the max number in the remaining elements\n  return\
    \ arr[1], max_element_rest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsh72i9cx.lua:45:\
    \ expected: {-4, -3, 5}\nactual: -3\nstack traceback:\n\t/tmp/tmpsh72i9cx.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ result = {}\n    local max = 0\n    for i = 1, k do\n        if arr[i] > max\
    \ then\n            max = arr[i]\n        end\n    end\n    for i = 1, k do\n\
    \        if arr[i] > max then\n            result[i] = arr[i]\n        end\n \
    \   end\n    for i = k + 1, #arr do\n        if arr[i] > max then\n          \
    \  result[i] = max\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwqx42eqb.lua:40:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpwqx42eqb.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  local m = math.min(k, n)\n  local t = {}\n  for i = 1, m do\n    t[i]\
    \ = arr[i]\n  end\n  for i = m + 1, n do\n    t[i] = arr[i]\n  end\n  return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1cfj5pwt.lua:32:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp1cfj5pwt.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and k should be less than or\
    \ equal to #arr\")\n  local result = {}\n  local max = 0\n  local pos = 1\n  local\
    \ i = 1\n  while i <= k do\n    if arr[i] > max then\n      max = arr[i]\n   \
    \ end\n    i = i + 1\n  end\n  while i <= k do\n    if arr[i] > max then\n   \
    \   max = arr[i]\n    end\n    result[pos] = max\n    pos = pos + 1\n    i = i\
    \ + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ykkr2j.lua:42:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmp57ykkr2j.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  assert(n >= k, \"k must be greater than or equal to 1\")\n  assert(n\
    \ >= 1, \"arr must contain at least one element\")\n  assert(k > 0, \"k must be\
    \ greater than 0\")\n  \n  local result = {}\n  local max = 0\n  local i = 1\n\
    \  \n  while i <= n do\n    local curr = arr[i]\n    if curr > max then\n    \
    \  max = curr\n    end\n    i = i + 1\n  end\n  \n  local j = 1\n  while j <=\
    \ k do\n    local curr = max\n    local i = 1\n    while i <= n do\n      local\
    \ elem = arr[i]\n      if elem > curr then\n        curr = elem\n      end\n \
    \     i = i + 1\n    end\n    result[j] = curr\n    j = j + 1\n  end\n  \n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgb4zdfh.lua:55:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmprgb4zdfh.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return {arr[1]}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvkdel6rv.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq0k3v5wh.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return arr\n  end\n  \n  -- Find the max element\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Find the max element in the remaining elements\n  local max_element_rest\
    \ = arr[k]\n  for i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n\
    \      max_element_rest = arr[i]\n    end\n  end\n  \n  -- Return the max element\
    \ and the max element rest\n  return {max_element, max_element_rest}\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqqyx6pbc.lua:45:\
    \ expected: {-4, -3, 5}\nactual: {5, 5}\nstack traceback:\n\t/tmp/tmpqqyx6pbc.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  local m = math.min(k, n)\n  local t = {}\n  for i = 1, m do\n    table.insert(t,\
    \ arr[i])\n  end\n  for i = 1, n do\n    if arr[i] > t[#t] then\n      t[#t] =\
    \ arr[i]\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ld0aolb.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp7ld0aolb.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be greater than 0 and less than or equal to #arr')\n\
    \  local result = {}\n  local maxVal = -math.inf\n  local maxIdx = 0\n  for i\
    \ = 1, k do\n    if arr[i] > maxVal then\n      maxVal = arr[i]\n      maxIdx\
    \ = i\n    end\n  end\n  result[maxIdx] = maxVal\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr4zdgn2r.lua:19:\
    \ attempt to perform arithmetic on field 'inf' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpr4zdgn2r.lua:19: in function 'candidate'\n\t/tmp/tmpr4zdgn2r.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq0k3v5wh.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be greater than 0 and less than or equal to #arr')\n\
    \  local result = {}\n  local pos = 1\n  local max = arr[1]\n  for i = 2, #arr\
    \ do\n    if arr[i] > max then\n      max = arr[i]\n    end\n  end\n  for i =\
    \ 1, k do\n    if arr[i] > max then\n      max = arr[i]\n    end\n    result[pos]\
    \ = max\n    pos = pos + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprig1xg8w.lua:39:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmprig1xg8w.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  assert(k > 0 and k <= n)\n  \n  local max = {}\n  local i = 1\n  while\
    \ i <= n do\n    local j = i\n    while j <= n and arr[j] < arr[i] do\n      j\
    \ = j + 1\n    end\n    \n    if j > i then\n      table.insert(max, arr[i])\n\
    \      i = j\n    else\n      i = i + 1\n    end\n  end\n  \n  if k == 1 then\n\
    \    return max\n  end\n  \n  local m = math.ceil(n / k)\n  local t = {}\n  for\
    \ i = 1, m do\n    table.insert(t, max[i])\n  end\n  \n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gmumyw7.lua:52:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmp2gmumyw7.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local len = #arr\n  assert(k > 0 and k <= len, \"k should be greater\
    \ than 0 and less than or equal to length of arr\")\n  assert(k == 0 or k == 1,\
    \ \"k should be either 0 or 1\")\n  \n  if k == 1 then\n    for i = 1, len do\n\
    \      result[i] = arr[i]\n    end\n    return result\n  end\n  \n  local max_idx\
    \ = 1\n  local max_val = arr[max_idx]\n  \n  for i = 1, len do\n    if arr[i]\
    \ > max_val then\n      max_idx = i\n      max_val = arr[i]\n    end\n  end\n\
    \  \n  for i = 1, k do\n    result[i] = arr[max_idx]\n    max_idx = max_idx +\
    \ 1\n    max_val = arr[max_idx]\n  end\n  \n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpms3ou76p.lua:20:\
    \ k should be either 0 or 1\nstack traceback:\n\t/tmp/tmpms3ou76p.lua:20: in function\
    \ 'candidate'\n\t/tmp/tmpms3ou76p.lua:51: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  -- Find the maximum element\
    \ in the given array\n  local max_element = arr[1]\n  for i = 2, #arr do\n   \
    \ if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n \
    \ -- Sort the array and return the k largest elements\n  table.sort(arr)\n  return\
    \ arr:sub(1, k)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu6mlpa1t.lua:30:\
    \ attempt to call method 'sub' (a nil value)\nstack traceback:\n\t/tmp/tmpu6mlpa1t.lua:30:\
    \ in function 'candidate'\n\t/tmp/tmpu6mlpa1t.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Write\
    \ your code here.\n  local arr2 = {}\n  for i = 1, k do\n    arr2[i] = arr[i]\n\
    \  end\n  local max = 0\n  local maxIndex = 0\n  for i = 1, k do\n    if arr[i]\
    \ > max then\n      max = arr[i]\n      maxIndex = i\n    end\n  end\n  local\
    \ max2 = arr2[maxIndex]\n  for i = 1, k do\n    arr2[i] = arr2[i] + max2\n  end\n\
    \  return arr2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps7_klymq.lua:40:\
    \ expected: {-4, -3, 5}\nactual: {2, 1, 10}\nstack traceback:\n\t/tmp/tmps7_klymq.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq0k3v5wh.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq0k3v5wh.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local t\
    \ = {}\n  local m = math.min(k, #arr)\n  for i = 1, m do\n    local v = arr[i]\n\
    \    if v > t[#t] then\n      t[#t] = v\n    end\n  end\n  return t\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu98ml5aa.lua:21:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpu98ml5aa.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpu98ml5aa.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be greater than 0 and less than or equal to the\
    \ length of arr')\n  local max_arr = {}\n  local max_idx = {}\n  local max_val\
    \ = -math.inf\n  for i = 1, k do\n    local max_idx = i\n    local max_val = arr[i]\n\
    \    for j = i + 1, k do\n      if arr[j] > max_val then\n        max_val = arr[j]\n\
    \        max_idx = j\n      end\n    end\n    max_arr[i] = max_val\n    max_idx[i]\
    \ = max_idx\n  end\n  return max_arr, max_idx\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe53uj921.lua:20:\
    \ attempt to perform arithmetic on field 'inf' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpe53uj921.lua:20: in function 'candidate'\n\t/tmp/tmpe53uj921.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq0k3v5wh.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  assert(k > 0 and k < n)\n  local max = {}\n  local i = 1\n  while\
    \ i <= n do\n    local m = math.max(arr[i])\n    if m > max[i] then\n      max[i]\
    \ = m\n    end\n    i = i + 1\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0sko7wr1.lua:18:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmp0sko7wr1.lua:18: in function\
    \ 'candidate'\n\t/tmp/tmp0sko7wr1.lua:34: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be greater than 0 and less than or equal to #arr')\n\
    \  local result = {}\n  local pos = 0\n  local max = 0\n  for i = 1, k do\n  \
    \  local elem = arr[i]\n    if elem > max then\n      max = elem\n      pos =\
    \ i\n    end\n  end\n  result[pos] = max\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprh8b5isq.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {3=5}\nstack traceback:\n\t/tmp/tmprh8b5isq.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr)\n  local result = {}\n  local pos = 1\n  local max = arr[1]\n\
    \  for i = 2, k do\n    if arr[i] > max then\n      max = arr[i]\n      pos =\
    \ i\n    end\n  end\n  result[pos] = max\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpomdajv8k.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {3=5}\nstack traceback:\n\t/tmp/tmpomdajv8k.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    local m = math.max(1, math.min(k, n))\n    local t = {}\n    for\
    \ i = 1, m do\n        local max = arr[i]\n        for j = 1, n do\n         \
    \   if arr[j] > max then\n                max = arr[j]\n            end\n    \
    \    end\n        t[#t + 1] = max\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbeon07ay.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpbeon07ay.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the maximum element\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Find the maximum element in the remaining elements\n  local max_element_rest\
    \ = arr[k]\n  for i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n\
    \      max_element_rest = arr[i]\n    end\n  end\n  \n  -- Return the maximum\
    \ element in the first k elements\n  return arr .. {max_element} .. {max_element_rest}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnvws5yl6.lua:39:\
    \ attempt to concatenate a table value\nstack traceback:\n\t/tmp/tmpnvws5yl6.lua:39:\
    \ in function 'candidate'\n\t/tmp/tmpnvws5yl6.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq0k3v5wh.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq0k3v5wh.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxt9d1vwl.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  assert(k > 0 and k > n)\n  assert(k == 0 or k == n)\n  local max =\
    \ {}\n  for i = 1, n do\n    local m = i\n    for j = 1, k do\n      m = m > arr[j]\
    \ and arr[j] or m\n    end\n    max[i] = m\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpplvf6w6v.lua:18:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmpplvf6w6v.lua:18: in function\
    \ 'candidate'\n\t/tmp/tmpplvf6w6v.lua:34: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  local m = math.min(k, n)\n  local t = {}\n  for i = 1, m do\n    local\
    \ max = arr[i]\n    for j = 1, n do\n      if arr[j] > max then\n        max =\
    \ arr[j]\n      end\n    end\n    t[#t + 1] = max\n  end\n  return t\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96snr37v.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp96snr37v.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  local m = math.min(k, n)\n  local t = {}\n  for i = 1, m do\n    local\
    \ max = -math.inf\n    for j = 1, n do\n      if arr[j] > max then\n        max\
    \ = arr[j]\n      end\n    end\n    t[#t + 1] = max\n  end\n  return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprslu5ctf.lua:21:\
    \ attempt to perform arithmetic on field 'inf' (a nil value)\nstack traceback:\n\
    \t/tmp/tmprslu5ctf.lua:21: in function 'candidate'\n\t/tmp/tmprslu5ctf.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Write\
    \ your code here.\n  local table = {}\n  for i = 1, k do\n    table.insert(table,\
    \ arr[i])\n  end\n  table.sort(function(a, b) return a > b end)\n  return table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpltd9_1n9.lua:20:\
    \ attempt to call field 'insert' (a nil value)\nstack traceback:\n\t/tmp/tmpltd9_1n9.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpltd9_1n9.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the max element\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Sort the remaining elements and return the result\n  local sorted_arr\
    \ = arr:sublist(2, k)\n  table.sort(sorted_arr)\n  return sorted_arr\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf52yu9xz.lua:31:\
    \ attempt to call method 'sublist' (a nil value)\nstack traceback:\n\t/tmp/tmpf52yu9xz.lua:31:\
    \ in function 'candidate'\n\t/tmp/tmpf52yu9xz.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Write\
    \ your code here.\n  local max = {}\n  local i = 1\n  while i <= k do\n    local\
    \ max = arr[i]\n    for j = i + 1, k do\n      if arr[j] > max then\n        max\
    \ = arr[j]\n      end\n    end\n    i = i + 1\n  end\n  return max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7akism7u.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmp7akism7u.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less or equal than length\
    \ of arr\")\n  local result = {}\n  local maxNum = arr[1]\n  for i = 2, k do\n\
    \    if arr[i] > maxNum then\n      maxNum = arr[i]\n    end\n  end\n  for i =\
    \ 1, k do\n    result[i] = maxNum\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0x7688s.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmps0x7688s.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  local m = math.min(k, n)\n  local t = {}\n  for i = 1, m do\n    local\
    \ max = -math.inf\n    for j = 1, n do\n      if arr[j] > max then\n        max\
    \ = arr[j]\n      end\n    end\n    t[#t + 1] = max\n  end\n  return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprslu5ctf.lua:21:\
    \ attempt to perform arithmetic on field 'inf' (a nil value)\nstack traceback:\n\
    \t/tmp/tmprslu5ctf.lua:21: in function 'candidate'\n\t/tmp/tmprslu5ctf.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to #arr\"\
    )\n  local result = {}\n  local pos = 1\n  local max_val = arr[pos]\n  while pos\
    \ < k do\n    if arr[pos] > max_val then\n      max_val = arr[pos]\n    end\n\
    \    pos = pos + 1\n  end\n  table.insert(result, max_val)\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfk23qs42.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {-3}\nstack traceback:\n\t/tmp/tmpfk23qs42.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  local m = math.min(k, n)\n  local t = {}\n  local i = 1\n  while i\
    \ <= m do\n    local m = math.min(n - i, m)\n    for j = 1, m do\n      if arr[i]\
    \ > arr[j] then\n        t[i] = arr[i]\n        arr[i] = arr[j]\n        arr[j]\
    \ = t[i]\n      end\n    end\n    i = i + 1\n  end\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpja2xpla5.lua:38:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpja2xpla5.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be greater than 0 and less than or equal to the\
    \ length of the array')\n  local result = {}\n  local max = 0\n  for i = 1, k\
    \ do\n    local value = arr[i]\n    if value > max then\n      max = value\n \
    \   end\n  end\n  for i = 1, k do\n    local value = arr[i]\n    if value > max\
    \ then\n      max = value\n    end\n    result[i] = value\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8y48dvb5.lua:39:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp8y48dvb5.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and k should be less than or\
    \ equal to #arr\")\n  local result = {}\n  local maxVal = -math.inf\n  local maxIdx\
    \ = 0\n  for i = 1, k do\n    if arr[i] > maxVal then\n      maxVal = arr[i]\n\
    \      maxIdx = i\n    end\n  end\n  table.insert(result, arr[maxIdx])\n  for\
    \ i = k + 1, #arr do\n    if arr[i] > maxVal then\n      table.insert(result,\
    \ arr[i])\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpctyj7biw.lua:19:\
    \ attempt to perform arithmetic on field 'inf' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpctyj7biw.lua:19: in function 'candidate'\n\t/tmp/tmpctyj7biw.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  local m = math.min(k, n)\n  local t = {}\n  for i = 1, m do\n    t[i]\
    \ = arr[i]\n  end\n  for i = m + 1, n do\n    t[i] = arr[i]\n  end\n  return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1cfj5pwt.lua:32:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp1cfj5pwt.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Write\
    \ your code here.\n  local n = #arr\n  local m = math.min(k, n)\n  local max =\
    \ arr[1]\n  local i = 1\n  while i <= m do\n    if arr[i] > max then\n      max\
    \ = arr[i]\n    end\n    i = i + 1\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6514b8hh.lua:34:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmp6514b8hh.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local len = #arr\n  local max_count = 0\n  local max_val = -math.inf\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2lknzsg6.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the max element\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Find the max element in the remaining elements\n  local max_element_rest\
    \ = arr[k]\n  for i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n\
    \      max_element_rest = arr[i]\n    end\n  end\n  \n  -- Return the max element\
    \ and the max element rest\n  return max_element, {max_element, max_element_rest}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl1uj9fot.lua:45:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmpl1uj9fot.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local n = #arr\n  local m = math.min(k, n)\n  for i = 1, m do\n    local\
    \ max = arr[i]\n    for j = 1, n do\n      if arr[j] > max then\n        max =\
    \ arr[j]\n      end\n    end\n    result[i] = max\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnjp_25d3.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpnjp_25d3.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ max = {}\n    for i = 1, k do\n        local maxElement = arr[1]\n        for\
    \ j = 2, #arr do\n            if arr[j] > maxElement then\n                maxElement\
    \ = arr[j]\n            end\n        end\n        max[i] = maxElement\n    end\n\
    \    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_7etvj4.lua:33:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpo_7etvj4.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return arr\n  end\n  \n  -- Find the maximum number\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Find the maximum number in the remaining elements\n  local max_element_rest\
    \ = arr[k]\n  for i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n\
    \      max_element_rest = arr[i]\n    end\n  end\n  \n  -- Return the maximum\
    \ number in the first k elements\n  return arr[1] < max_element and arr[1] or\
    \ max_element\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3ij0z93.lua:45:\
    \ expected: {-4, -3, 5}\nactual: -3\nstack traceback:\n\t/tmp/tmpb3ij0z93.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the maximum number\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Find the maximum number in the remaining elements\n  local max_element_rest\
    \ = arr[k]\n  for i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n\
    \      max_element_rest = arr[i]\n    end\n  end\n  \n  -- Return the maximum\
    \ number in the first k elements\n  return arr .. {max_element}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4yd6canc.lua:39:\
    \ attempt to concatenate local 'arr' (a table value)\nstack traceback:\n\t/tmp/tmp4yd6canc.lua:39:\
    \ in function 'candidate'\n\t/tmp/tmp4yd6canc.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr)\n  local result = {}\n  local pos = 1\n  local max = 0\n\
    \  local i = 1\n  while i <= k do\n    if arr[i] > max then\n      max = arr[i]\n\
    \    end\n    if i == k then\n      result[pos] = max\n      pos = pos + 1\n \
    \     max = 0\n      i = i + 1\n    else\n      i = i + 1\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ns2s7pl.lua:41:\
    \ expected: {-4, -3, 5}\nactual: {5}\nstack traceback:\n\t/tmp/tmp7ns2s7pl.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to the\
    \ length of arr\")\n  local result = {}\n  local max = 0\n  local index = 1\n\
    \  while index <= k do\n    if arr[index] > max then\n      max = arr[index]\n\
    \    end\n    index = index + 1\n  end\n  table.insert(result, max)\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_6o7xo9.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {5}\nstack traceback:\n\t/tmp/tmpo_6o7xo9.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  local m = math.min(k, n)\n  local t = {}\n  for i = 1, m do\n    local\
    \ m = math.max(arr[i], arr[i + 1])\n    if m > t[i] then\n      t[i] = m\n   \
    \ end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp80lokum6.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp80lokum6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp80lokum6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ result = {}\n    local max = 0\n    for i = 1, k do\n        local element =\
    \ arr[i]\n        if element > max then\n            max = element\n        end\n\
    \    end\n    for i = 1, k do\n        local element = arr[i]\n        if element\
    \ == max then\n            result[i] = element\n        else\n            result[i]\
    \ = max\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplsq_hg_d.lua:39:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmplsq_hg_d.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and k should be less than or\
    \ equal to #arr\")\n  local result = {}\n  local maxNum = arr[1]\n  for i = 2,\
    \ k do\n    if arr[i] > maxNum then\n      maxNum = arr[i]\n    end\n  end\n \
    \ for i = 1, k do\n    result[i] = maxNum\n  end\n  for i = k + 1, #arr do\n \
    \   if arr[i] > maxNum then\n      maxNum = arr[i]\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe4_g81_j.lua:39:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpe4_g81_j.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the maximum element\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Find the maximum element in the remaining elements\n  local max_element_rest\
    \ = arr[k]\n  for i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n\
    \      max_element_rest = arr[i]\n    end\n  end\n  \n  -- Return the maximum\
    \ element and the remaining elements\n  return max_element, {max_element_rest}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp38ayrqc2.lua:45:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmp38ayrqc2.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Write\
    \ your code here.\n  local max_table = {}\n  local max_count = 0\n  for i = 1,\
    \ k do\n    local max_val = -1000\n    for j = 1, #arr do\n      if arr[j] > max_val\
    \ then\n        max_val = arr[j]\n      end\n    end\n    max_count = max_count\
    \ + 1\n    max_table[i] = max_val\n  end\n  return max_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4hnn7gf.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpz4hnn7gf.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  local m = math.min(k, n)\n  local t = {}\n  for i = 1, m do\n    table.insert(t,\
    \ arr[i])\n  end\n  table.sort(t)\n  return t\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2o4p0y3o.lua:31:\
    \ expected: {4, 4}\nactual: {-4, 4}\nstack traceback:\n\t/tmp/tmp2o4p0y3o.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ t = {}\n    local n = #arr\n    if k > n then return t end\n    for i = 1, k\
    \ do\n        table.insert(t, arr[i])\n    end\n    table.sort(t)\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd0xthk_2.lua:31:\
    \ expected: {4, 4}\nactual: {-4, 4}\nstack traceback:\n\t/tmp/tmpd0xthk_2.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local pos = 1\n  local len = #arr\n  while pos < len do\n    local max_val\
    \ = arr[pos]\n    local max_idx = pos\n    for i = pos, len-1 do\n      if arr[i]\
    \ > max_val then\n        max_val = arr[i]\n        max_idx = i\n      end\n \
    \   end\n    result[max_idx] = max_val\n    pos = pos + 1\n  end\n  if k > #result\
    \ then\n    return nil\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdz89n2g7.lua:41:\
    \ expected: {-4, -3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmpdz89n2g7.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to #arr\"\
    )\n  local result = {}\n  local max = 0\n  local i = 1\n  while i <= k do\n  \
    \  if arr[i] > max then\n      max = arr[i]\n    end\n    i = i + 1\n  end\n \
    \ local j = 1\n  while j <= k do\n    if arr[j] > max then\n      max = arr[j]\n\
    \    end\n    j = j + 1\n  end\n  local i = 1\n  while i <= k do\n    if arr[i]\
    \ < max then\n      result[i] = arr[i]\n    end\n    i = i + 1\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcab8eowb.lua:47:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4}\nstack traceback:\n\t/tmp/tmpcab8eowb.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return {arr[1]}\n  end\n  \n  -- Find the maximum\
    \ element in the first k elements\n  local max_element = arr[1]\n  for i = 2,\
    \ k do\n    if arr[i] > max_element then\n      max_element = arr[i]\n    end\n\
    \  end\n  \n  -- Find the maximum element in the remaining elements\n  local max_element_rest\
    \ = arr[k]\n  for i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n\
    \      max_element_rest = arr[i]\n    end\n  end\n  \n  -- Return the maximum\
    \ element and the remaining elements\n  return {max_element, {max_element_rest}}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8me0kzls.lua:45:\
    \ expected: {-4, -3, 5}\nactual: {5, {5}}\nstack traceback:\n\t/tmp/tmp8me0kzls.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be greater than 0 and less than or equal to the\
    \ length of the array')\n  \n  local result = {}\n  local max = 0\n  \n  for i\
    \ = 1, k do\n    local element = arr[i]\n    if element > max then\n      max\
    \ = element\n    end\n  end\n  \n  for i = 1, k do\n    local element = arr[i]\n\
    \    if element == max then\n      result[i] = element\n    end\n  end\n  \n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvn3qe0c.lua:42:\
    \ expected: {-4, -3, 5}\nactual: {3=5}\nstack traceback:\n\t/tmp/tmpdvn3qe0c.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Write\
    \ your code here.\n  local result = {}\n  local max_count = 0\n  local max_element\
    \ = nil\n  for i = 1, k do\n    local element = arr[i]\n    if max_count < element\
    \ then\n      max_count = element\n      max_element = element\n    end\n  end\n\
    \  table.insert(result, max_element)\n  for i = k + 1, #arr do\n    local element\
    \ = arr[i]\n    if max_count < element then\n      table.insert(result, element)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb6rqfwa0.lua:41:\
    \ expected: {-4, -3, 5}\nactual: {5}\nstack traceback:\n\t/tmp/tmpb6rqfwa0.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  local m = math.max(1, math.min(k, n))\n  local t = {}\n  for i = 1,\
    \ m do\n    local max = -math.inf\n    for j = 1, n do\n      if arr[j] > max\
    \ then\n        max = arr[j]\n      end\n    end\n    t[i] = max\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwregcowv.lua:21:\
    \ attempt to perform arithmetic on field 'inf' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpwregcowv.lua:21: in function 'candidate'\n\t/tmp/tmpwregcowv.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    local m = math.max(k, n)\n    local t = {}\n    for i = 1, m do\n\
    \        local max = -math.inf\n        for j = 1, n do\n            if arr[j]\
    \ > max then\n                max = arr[j]\n            end\n        end\n   \
    \     t[#t + 1] = max\n    end\n    return t\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp6ybw4gh.lua:21:\
    \ attempt to perform arithmetic on field 'inf' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpp6ybw4gh.lua:21: in function 'candidate'\n\t/tmp/tmpp6ybw4gh.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq0k3v5wh.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less or equal than length\
    \ of arr\")\n  local result = {}\n  local max = 0\n  for i = 1, k do\n    if arr[i]\
    \ > max then\n      max = arr[i]\n    end\n  end\n  for i = 1, k do\n    if arr[i]\
    \ > max then\n      result[i] = arr[i]\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprfa2j0o_.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmprfa2j0o_.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  local m = math.min(k, n)\n  local max = arr[1]\n  for i = 2, m do\n\
    \    if arr[i] > max then\n      max = arr[i]\n    end\n  end\n  return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_c0p94p.lua:31:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmpq_c0p94p.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return {arr[1]}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_9us34wd.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Write\
    \ your code here.\n  local result = {}\n  local max = 0\n  for i = 1, k do\n \
    \   if arr[i] > max then\n      max = arr[i]\n    end\n  end\n  for i = 1, k do\n\
    \    if arr[i] > max then\n      result[i] = arr[i]\n    end\n  end\n  for i =\
    \ k + 1, #arr do\n    if arr[i] > max then\n      result[i] = arr[i]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86hwkpt5.lua:41:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmp86hwkpt5.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be greater than 0 and less than or equal to the\
    \ length of the array')\n  local result = {}\n  local maxVal = arr[1]\n  local\
    \ maxIndex = 1 -- index of maximum value\n  local i = 1\n  while i <= k do\n \
    \   if arr[i] > maxVal then\n      maxVal = arr[i]\n      maxIndex = i\n    end\n\
    \    i = i + 1\n  end\n  table.insert(result, maxVal)\n  table.insert(result,\
    \ arr[maxIndex])\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppwswp3rz.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {5, 5}\nstack traceback:\n\t/tmp/tmppwswp3rz.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be in range [0, #arr)')\n  local result = {}\n\
    \  local pos = 1\n  local max = -math.inf\n  for i = 1, k do\n    local elem =\
    \ arr[i]\n    if elem > max then\n      max = elem\n      pos = i\n    end\n \
    \ end\n  result[pos] = max\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxnie3pb8.lua:20:\
    \ attempt to perform arithmetic on field 'inf' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpxnie3pb8.lua:20: in function 'candidate'\n\t/tmp/tmpxnie3pb8.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local max_arr\
    \ = {}\n  local max_len = -1\n  local max_k = 0\n  local i = 1\n  while i <= k\
    \ do\n    if arr[i] > arr[max_k] then\n      max_arr[max_k] = arr[i]\n      max_k\
    \ = max_k + 1\n    end\n    i = i + 1\n  end\n  if max_k > 0 then\n    max_arr[max_k]\
    \ = arr[max_k]\n    max_k = max_k + 1\n  end\n  while i <= k do\n    if arr[i]\
    \ > arr[max_k] then\n      max_arr[max_k] = arr[i]\n      max_k = max_k + 1\n\
    \    end\n    i = i + 1\n  end\n  if max_k > 0 then\n    max_arr[max_k] = arr[max_k]\n\
    \    max_k = max_k + 1\n  end\n  if k > 0 then\n    max_arr[1] = arr[max_k]\n\
    \  end\n  return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnu_t8evp.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpnu_t8evp.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpnu_t8evp.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return {arr[1]}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_9us34wd.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  local m = math.max(1, n)\n  local t = {}\n  local i = 1\n  while i\
    \ <= m do\n    local j = math.min(n, i + k)\n    if j > i then\n      table.insert(t,\
    \ arr[i])\n      i = j\n    else\n      break\n    end\n  end\n  return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36a7k9nt.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {-3}\nstack traceback:\n\t/tmp/tmp36a7k9nt.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local max_arr\
    \ = {}\n  local max_len = -1\n  local max_k = 0\n  for i = 1, k do\n    local\
    \ cur_len = #arr\n    if cur_len > max_len then\n      max_len = cur_len\n   \
    \   max_arr = {}\n    end\n    max_arr[i] = arr[i]\n  end\n  for i = 1, k do\n\
    \    if max_arr[i] > max_arr[i + 1] then\n      max_arr[i + 1] = max_arr[i]\n\
    \    end\n  end\n  for i = 1, k do\n    arr[i] = max_arr[i]\n  end\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsyxbma0k.lua:29:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpsyxbma0k.lua:29:\
    \ in function 'candidate'\n\t/tmp/tmpsyxbma0k.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  local m = math.min(k, n)\n  local t = {}\n  for i = 1, m do\n    table.insert(t,\
    \ arr[i])\n  end\n  table.sort(t)\n  return t\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2o4p0y3o.lua:31:\
    \ expected: {4, 4}\nactual: {-4, 4}\nstack traceback:\n\t/tmp/tmp2o4p0y3o.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr)\n  local result = {}\n  local max = 0\n  for i = 1, k do\n\
    \    local value = arr[i]\n    if value > max then\n      max = value\n    end\n\
    \  end\n  for i = 1, k do\n    local value = arr[i]\n    if value > max then\n\
    \      max = value\n    end\n    result[i] = max\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxq3dc1x1.lua:39:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpxq3dc1x1.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local n = #arr\n  \n  if k > n then return result end\n  \n  for i =\
    \ 1, k do\n    local max_val = -math.inf\n    \n    for j = 1, n do\n      if\
    \ arr[j] > max_val then\n        max_val = arr[j]\n      end\n    end\n    \n\
    \    result[i] = max_val\n  end\n  \n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc1vylfz0.lua:23:\
    \ attempt to perform arithmetic on field 'inf' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpc1vylfz0.lua:23: in function 'candidate'\n\t/tmp/tmpc1vylfz0.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local n = #arr\n  local m = math.min(k, n)\n  for i = 1, m do\n    local\
    \ tmp = arr[i]\n    for j = 1, n do\n      if tmp > arr[j] then\n        tmp =\
    \ arr[j]\n      end\n    end\n    result[i] = tmp\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqgebtiav.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {-4, -4, -4}\nstack traceback:\n\t/tmp/tmpqgebtiav.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the max element\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Sort the remaining elements and return them\n  local new_arr = {}\n\
    \  for i = 2, k do\n    if arr[i] > max_element then\n      new_arr[i] = arr[i]\n\
    \    else\n      new_arr[i] = max_element\n    end\n  end\n  return new_arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2bfc3wv.lua:45:\
    \ expected: {-4, -3, 5}\nactual: {2=5, 3=5}\nstack traceback:\n\t/tmp/tmpt2bfc3wv.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local len = #arr\n  assert(k > 0 and k <= len, \"k should be greater\
    \ than 0 and less or equal than length of arr\")\n  \n  -- Sort the array in descending\
    \ order\n  table.sort(arr, function(a, b) return b - a  end)\n  \n  -- Add the\
    \ first k elements to the result table\n  for i = 1, k do\n    result[#result\
    \ + 1] = arr[i]\n  end\n  \n  -- Add the remaining elements to the result table\n\
    \  for i = k, len do\n    result[#result + 1] = arr[i]\n  end\n  \n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0lpkqoll.lua:40:\
    \ expected: {-4, -3, 5}\nactual: {-4, 5, -3, -3}\nstack traceback:\n\t/tmp/tmp0lpkqoll.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  local m = math.min(k, n)\n  local t = {}\n  for i = 1, m do\n    local\
    \ m = math.max(arr[i], arr[i + 1])\n    if m > t[#t] then\n      t[#t] = m\n \
    \   end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxbh6lul8.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpxbh6lul8.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpxbh6lul8.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the maximum number\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Find the maximum number in the remaining elements\n  local max_element_rest\
    \ = arr[k]\n  for i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n\
    \      max_element_rest = arr[i]\n    end\n  end\n  \n  -- Return the maximum\
    \ number in the first k elements\n  return arr .. {max_element}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4yd6canc.lua:39:\
    \ attempt to concatenate local 'arr' (a table value)\nstack traceback:\n\t/tmp/tmp4yd6canc.lua:39:\
    \ in function 'candidate'\n\t/tmp/tmp4yd6canc.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr)\n  local result = {}\n  local max = 0\n  for i = 1, k do\n\
    \    if arr[i] > max then\n      max = arr[i]\n    end\n  end\n  for i = 1, k\
    \ do\n    if arr[i] > max then\n      result[i] = arr[i]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpky6zmq5l.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpky6zmq5l.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr)\n  local result = {}\n  local max = 0\n  local pos = 1\n\
    \  local i = 1\n  while i <= k do\n    if arr[i] > max then\n      max = arr[i]\n\
    \      pos = i\n    end\n    i = i + 1\n  end\n  result[pos] = max\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplxgmyg_3.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {3=5}\nstack traceback:\n\t/tmp/tmplxgmyg_3.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local pos = 0\n  local len = #arr\n  local max = 0\n  while pos < len\
    \ do\n    local elem = arr[pos]\n    if elem > max then\n      max = elem\n  \
    \  end\n    if k > 0 then\n      if k == pos then\n        result[pos] = max\n\
    \      else\n        local count = 0\n        for i = pos, pos + k - 1 do\n  \
    \        if arr[i] > max then\n            max = arr[i]\n            count = count\
    \ + 1\n          end\n        end\n        if count == k then\n          result[pos]\
    \ = max\n        end\n      end\n    end\n    pos = pos + 1\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx67zlfzb.lua:23:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpx67zlfzb.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmpx67zlfzb.lua:50: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Write\
    \ your code here.\n  local n = #arr\n  local m = math.min(n, k)\n  local max_arr\
    \ = {}\n  for i = 1, m do\n    max_arr[i] = arr[i]\n  end\n  for i = 1, n do\n\
    \    if arr[i] > max_arr[i] then\n      max_arr[i] = arr[i]\n    end\n  end\n\
    \  return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwu6bt3jv.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpwu6bt3jv.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to #arr\"\
    )\n  local result = {}\n  local max = 0\n  for i = 1, k do\n    if arr[i] > max\
    \ then\n      max = arr[i]\n    end\n  end\n  for i = 1, k do\n    if arr[i] >\
    \ max then\n      result[i] = arr[i]\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxkytu4td.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpxkytu4td.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr)\n  local result = {}\n  local max = 0\n  for i = 1, k do\n\
    \    if arr[i] > max then\n      max = arr[i]\n    end\n  end\n  for i = 1, k\
    \ do\n    if arr[i] > max then\n      result[i] = arr[i]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpky6zmq5l.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpky6zmq5l.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq0k3v5wh.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    if k > n then return end\n    local m = math.min(k, n)\n    local\
    \ t = {}\n    for i = 1, m do\n        local v = arr[i]\n        if v > t[#t]\
    \ then\n            t[#t] = v\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsjev3mb3.lua:23:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpsjev3mb3.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmpsjev3mb3.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr)\n  local result = {}\n  local pos = 0\n  local max = 0\n\
    \  for i = 1, k do\n    if pos == #arr then\n      break\n    end\n    local elem\
    \ = arr[pos]\n    if elem > max then\n      max = elem\n    end\n    pos = pos\
    \ + 1\n  end\n  for i = 1, k do\n    if pos == #arr then\n      break\n    end\n\
    \    local elem = arr[pos]\n    if elem > max then\n      max = elem\n    end\n\
    \    result[i] = elem\n    pos = pos + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7zy1gvud.lua:26:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp7zy1gvud.lua:26:\
    \ in function 'candidate'\n\t/tmp/tmp7zy1gvud.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to #arr\"\
    )\n  local result = {}\n  local max = 0\n  local i = 1\n  while i <= k do\n  \
    \  if arr[i] > max then\n      max = arr[i]\n    end\n    i = i + 1\n  end\n \
    \ local j = 1\n  while j <= k do\n    if arr[j] > max then\n      max = arr[j]\n\
    \    end\n    j = j + 1\n  end\n  assert(max > 0, \"max should be positive\")\n\
    \  i = k\n  while i <= k do\n    result[i] = max\n    i = i + 1\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7nxypin.lua:46:\
    \ expected: {-4, -3, 5}\nactual: {3=5}\nstack traceback:\n\t/tmp/tmpu7nxypin.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the maximum number\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Find the maximum number in the remaining elements\n  local max_element_rest\
    \ = arr[k]\n  for i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n\
    \      max_element_rest = arr[i]\n    end\n  end\n  \n  -- Return the maximum\
    \ number in the first k elements\n  return arr .. {max_element} .. {max_element_rest}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb9ii7av1.lua:39:\
    \ attempt to concatenate a table value\nstack traceback:\n\t/tmp/tmpb9ii7av1.lua:39:\
    \ in function 'candidate'\n\t/tmp/tmpb9ii7av1.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be greater than 0 and less than or equal to #arr')\n\
    \  local result = {}\n  local pos = 0\n  local max_val = -math.inf\n  for i =\
    \ 1, k do\n    local elem = arr[i]\n    if elem > max_val then\n      max_val\
    \ = elem\n      pos = i\n    end\n  end\n  result[pos] = max_val\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn4bomfzg.lua:20:\
    \ attempt to perform arithmetic on field 'inf' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpn4bomfzg.lua:20: in function 'candidate'\n\t/tmp/tmpn4bomfzg.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  assert(k > 0 and k <= n)\n  local result = {}\n  for i = 1, k do\n\
    \    local max_idx = i\n    for j = 1, n do\n      if arr[j] > arr[max_idx] then\n\
    \        max_idx = j\n      end\n    end\n    result[i] = arr[max_idx]\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum7scfjs.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpum7scfjs.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to the\
    \ length of arr\")\n  local result = {}\n  local maxVal = -math.inf\n  for i =\
    \ 1, k do\n    if arr[i] > maxVal then\n      maxVal = arr[i]\n    end\n  end\n\
    \  for i = 1, k do\n    if arr[i] > maxVal then\n      table.insert(result, maxVal)\n\
    \      maxVal = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph97s3ijo.lua:19:\
    \ attempt to perform arithmetic on field 'inf' (a nil value)\nstack traceback:\n\
    \t/tmp/tmph97s3ijo.lua:19: in function 'candidate'\n\t/tmp/tmph97s3ijo.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to #arr\"\
    )\n  local result = {}\n  local max = 0\n  for i = 1, k do\n    local element\
    \ = arr[i]\n    if element > max then\n      max = element\n    end\n  end\n \
    \ for i = 1, k do\n    local element = arr[i]\n    if element == max then\n  \
    \    table.insert(result, element)\n    end\n  end\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv302rj0m.lua:38:\
    \ expected: {-4, -3, 5}\nactual: {5}\nstack traceback:\n\t/tmp/tmpv302rj0m.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Write\
    \ your code here.\n  local max_arr = {}\n  local max_count = 0\n  for i = 1, k\
    \ do\n    max_count = max_count + 1\n    if max_count == 1 then\n      max_arr[i]\
    \ = arr[i]\n    else\n      if arr[i] > max_arr[i] then\n        max_arr[i] =\
    \ arr[i]\n      end\n    end\n  end\n  return max_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprnzeux_j.lua:25:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmprnzeux_j.lua:25:\
    \ in function 'candidate'\n\t/tmp/tmprnzeux_j.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr)\n  local result = {}\n  local max = 0\n  for i = 1, k do\n\
    \    local element = arr[i]\n    if element > max then\n      max = element\n\
    \    end\n  end\n  for i = 1, k do\n    local element = arr[i]\n    if element\
    \ == max then\n      result[i] = element\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5k59d7u.lua:38:\
    \ expected: {-4, -3, 5}\nactual: {3=5}\nstack traceback:\n\t/tmp/tmph5k59d7u.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local n = #arr\n  local m = math.min(k, n)\n  for i = 1, m do\n    local\
    \ max_element = arr[i]\n    for j = 1, n do\n      if arr[j] > max_element then\n\
    \        max_element = arr[j]\n      end\n    end\n    result[#result + 1] = max_element\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplbyrxvj0.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmplbyrxvj0.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local len = #arr\n  assert(k > 0 and k <= len, \"k should be greater\
    \ than 0 and less than or equal to len\")\n  \n  -- Sort the array in descending\
    \ order.\n  table.sort(arr, function(a, b) return b - a  end)\n  \n  -- Add the\
    \ first k elements to the result.\n  for i = 1, k do\n    result[#result + 1]\
    \ = arr[i]\n  end\n  \n  -- Add the remaining elements to the result.\n  for i\
    \ = k, len do\n    result[#result + 1] = arr[i]\n  end\n  \n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf0ys7ccz.lua:40:\
    \ expected: {-4, -3, 5}\nactual: {-4, 5, -3, -3}\nstack traceback:\n\t/tmp/tmpf0ys7ccz.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Write\
    \ your code here.\n  local result = {}\n  for i = 1, k do\n    local max = 0\n\
    \    for j = 1, #arr do\n      if arr[j] > max then\n        max = arr[j]\n  \
    \    end\n    end\n    result[i] = max\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp222rn5pv.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp222rn5pv.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  assert(n >= 0 and k <= n)\n  local t = {}\n  for i = 1, k do\n   \
    \ local m = -1\n    for j = 1, n do\n      if arr[j] > m then\n        m = arr[j]\n\
    \      end\n    end\n    t[i] = m\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4u3m4pw.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpd4u3m4pw.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local n = #arr\n  local m = math.min(k, n)\n  for i = 1, m do\n    local\
    \ max = -math.inf\n    for j = 1, n do\n      if arr[j] > max then\n        max\
    \ = arr[j]\n      end\n    end\n    result[i] = max\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwllcehb_.lua:21:\
    \ attempt to perform arithmetic on field 'inf' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpwllcehb_.lua:21: in function 'candidate'\n\t/tmp/tmpwllcehb_.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return {arr[1]}\n  end\n  \n  -- Find the maximum\
    \ element in the first k elements\n  local max_element = arr[1]\n  for i = 2,\
    \ k do\n    if arr[i] > max_element then\n      max_element = arr[i]\n    end\n\
    \  end\n  \n  -- Find the maximum element in the remaining elements\n  local max_element_rest\
    \ = arr[k]\n  for i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n\
    \      max_element_rest = arr[i]\n    end\n  end\n  \n  -- Return the maximum\
    \ element and the remaining elements\n  return {max_element, {max_element_rest}}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzx2c83et.lua:45:\
    \ expected: {-4, -3, 5}\nactual: {5, {5}}\nstack traceback:\n\t/tmp/tmpzx2c83et.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq0k3v5wh.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  local m = math.min(k, n)\n  local t = {}\n  for i = 1, m do\n    local\
    \ v = arr[i]\n    if v > t[#t] then\n      t[#t] = v\n    end\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplbh06jed.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmplbh06jed.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmplbh06jed.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be in range [0, #arr)')\n  local result = {}\n\
    \  local pos = 1\n  local max = -math.inf\n  for i = 1, k do\n    local elem =\
    \ arr[i]\n    if elem > max then\n      max = elem\n    end\n    if elem > result[pos]\
    \ then\n      result[pos] = elem\n    end\n    pos = pos + 1\n  end\n  if pos\
    \ < k then\n    for i = pos, k do\n      result[i] = arr[i]\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeiuc7zya.lua:20:\
    \ attempt to perform arithmetic on field 'inf' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpeiuc7zya.lua:20: in function 'candidate'\n\t/tmp/tmpeiuc7zya.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the maximum element\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Find the maximum element in the remaining elements\n  local max_element_rest\
    \ = arr[k]\n  for i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n\
    \      max_element_rest = arr[i]\n    end\n  end\n  \n  -- Return the maximum\
    \ element in the first k elements\n  return arr .. {max_element} .. {max_element_rest}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnvws5yl6.lua:39:\
    \ attempt to concatenate a table value\nstack traceback:\n\t/tmp/tmpnvws5yl6.lua:39:\
    \ in function 'candidate'\n\t/tmp/tmpnvws5yl6.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k must be greater than 0 and less than or equal to #arr\"\
    )\n  local result = {}\n  local maxVal = -math.inf\n  local maxIdx = -1\n  for\
    \ i = 1, k do\n    local curVal = arr[i]\n    if curVal > maxVal then\n      maxVal\
    \ = curVal\n      maxIdx = i\n    end\n  end\n  result[maxIdx] = maxVal\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjcisj2ah.lua:19:\
    \ attempt to perform arithmetic on field 'inf' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpjcisj2ah.lua:19: in function 'candidate'\n\t/tmp/tmpjcisj2ah.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq0k3v5wh.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less or equal than length\
    \ of arr\")\n  local result = {}\n  local max = 0\n  for i = 1, k do\n    local\
    \ element = arr[i]\n    if element > max then\n      max = element\n    end\n\
    \  end\n  for i = 1, k do\n    local element = arr[i]\n    if element == max then\n\
    \      result[i] = element\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_k5ani59.lua:38:\
    \ expected: {-4, -3, 5}\nactual: {3=5}\nstack traceback:\n\t/tmp/tmp_k5ani59.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return arr\n  end\n  \n  -- Find the maximum number\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Find the maximum number in the remaining elements\n  local max_element_rest\
    \ = arr[k]\n  for i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n\
    \      max_element_rest = arr[i]\n    end\n  end\n  \n  -- Return the maximum\
    \ number in the first k elements\n  return arr .. {max_element} .. {max_element_rest}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp62xgi769.lua:39:\
    \ attempt to concatenate a table value\nstack traceback:\n\t/tmp/tmp62xgi769.lua:39:\
    \ in function 'candidate'\n\t/tmp/tmp62xgi769.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr)\n  local result = {}\n  local pos = 0\n  local max = -math.inf\n\
    \  for i = 1, k do\n    local elem = arr[i]\n    if elem > max then\n      max\
    \ = elem\n      pos = i\n    end\n  end\n  table.insert(result, arr[pos])\n  for\
    \ i = pos+1, k do\n    local elem = arr[i]\n    if elem > max then\n      max\
    \ = elem\n    else\n      arr[i] = max\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p2c3wnx.lua:20:\
    \ attempt to perform arithmetic on field 'inf' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp_p2c3wnx.lua:20: in function 'candidate'\n\t/tmp/tmp_p2c3wnx.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq0k3v5wh.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local pos = 1\n  local max = -math.inf\n  local max_pos = -1\n  for\
    \ i = 1, k do\n    local elem = arr[i]\n    if elem > max then\n      max = elem\n\
    \      max_pos = pos\n    end\n    pos = pos + 1\n  end\n  result[max_pos] = max\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfe7egmlr.lua:19:\
    \ attempt to perform arithmetic on field 'inf' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpfe7egmlr.lua:19: in function 'candidate'\n\t/tmp/tmpfe7egmlr.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be greater than 0 and less than or equal to #arr')\n\
    \  local result = {}\n  local maxVal = arr[1]\n  for i = 2, k do\n    if arr[i]\
    \ > maxVal then\n      maxVal = arr[i]\n    end\n  end\n  for i = 1, k do\n  \
    \  result[i] = maxVal\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphraqxtp7.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmphraqxtp7.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the maximum number\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Find the maximum number in the remaining elements\n  local max_element_rest\
    \ = arr[k]\n  for i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n\
    \      max_element_rest = arr[i]\n    end\n  end\n  \n  -- Return the maximum\
    \ number in the first k elements\n  return arr[1] < max_element and arr[1] or\
    \ max_element_rest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5arrchui.lua:45:\
    \ expected: {-4, -3, 5}\nactual: -3\nstack traceback:\n\t/tmp/tmp5arrchui.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Write\
    \ your code here.\n  local max = {}\n  local i = 1\n  while i <= k do\n    if\
    \ arr[i] > max[i] then\n      max[i] = arr[i]\n    end\n    i = i + 1\n  end\n\
    \  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpks45e849.lua:21:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpks45e849.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpks45e849.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr)\n  local result = {}\n  local max = 0\n  for i = 1, k do\n\
    \    if arr[i] > max then\n      max = arr[i]\n    end\n  end\n  for i = 1, k\
    \ do\n    if arr[i] > max then\n      result[i] = arr[i]\n    end\n  end\n  for\
    \ i = k + 1, #arr do\n    if arr[i] > max then\n      result[i] = arr[i]\n   \
    \ end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpow7e8gwn.lua:41:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpow7e8gwn.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the maximum element\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Find the maximum element in the remaining elements\n  local max_element_rest\
    \ = arr[k]\n  for i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n\
    \      max_element_rest = arr[i]\n    end\n  end\n  \n  -- Return the maximum\
    \ element and the remaining elements\n  return max_element, {max_element_rest}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp38ayrqc2.lua:45:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmp38ayrqc2.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr)\n  local result = {}\n  local pos = 1\n  local max = -math.inf\n\
    \  for i = 1, k do\n    if arr[i] > max then\n      max = arr[i]\n      pos =\
    \ i\n    end\n  end\n  table.insert(result, max)\n  for i = pos + 1, k do\n  \
    \  if arr[i] > max then\n      table.insert(result, arr[i])\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpebfyn2r4.lua:20:\
    \ attempt to perform arithmetic on field 'inf' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpebfyn2r4.lua:20: in function 'candidate'\n\t/tmp/tmpebfyn2r4.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the maximum number\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Sort the remaining elements and return them\n  local sorted_arr = {}\n\
    \  for i = 2, k do\n    if arr[i] > max_element then\n      table.insert(sorted_arr,\
    \ arr[i])\n    end\n  end\n  return sorted_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpisppkx11.lua:43:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpisppkx11.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to #arr\"\
    )\n  local result = {}\n  local max = 0\n  for i = 1, k do\n    local element\
    \ = arr[i]\n    if element > max then\n      max = element\n    end\n  end\n \
    \ for i = 1, k do\n    local element = arr[i]\n    if element == max then\n  \
    \    table.insert(result, element)\n    end\n  end\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv302rj0m.lua:38:\
    \ expected: {-4, -3, 5}\nactual: {5}\nstack traceback:\n\t/tmp/tmpv302rj0m.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr)\n  local max_arr = {}\n  local max_idx = 1\n  for i = 1,\
    \ k do\n    local max_val = arr[max_idx]\n    for j = 1, #arr do\n      if arr[j]\
    \ > max_val then\n        max_val = arr[j]\n      end\n    end\n    max_arr[i]\
    \ = max_val\n    max_idx = max_idx + 1\n  end\n  return max_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuc_stjq5.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpuc_stjq5.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Write\
    \ your code here.\n  local n = #arr\n  local m = math.max(1, math.min(k, n))\n\
    \  local t = {}\n  for i = 1, m do\n    local max_val = arr[i]\n    for j = 1,\
    \ n do\n      if arr[j] > max_val then\n        max_val = arr[j]\n      end\n\
    \    end\n    t[i] = max_val\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf086akxg.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpf086akxg.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return arr\n  end\n  \n  -- Find the max number\
    \ in the first k elements\n  local max_num = arr[1]\n  for i = 2, k do\n    if\
    \ arr[i] > max_num then\n      max_num = arr[i]\n    end\n  end\n  \n  -- Find\
    \ the max number in the remaining elements\n  local max_num_rest = arr[k]\n  for\
    \ i = k + 1, #arr do\n    if arr[i] > max_num_rest then\n      max_num_rest =\
    \ arr[i]\n    end\n  end\n  \n  -- Return the max number in the first k elements\n\
    \  return arr .. {max_num}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuu9or_ho.lua:39:\
    \ attempt to concatenate local 'arr' (a table value)\nstack traceback:\n\t/tmp/tmpuu9or_ho.lua:39:\
    \ in function 'candidate'\n\t/tmp/tmpuu9or_ho.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to #arr\"\
    )\n  local result = {}\n  local max = 0\n  for i = 1, k do\n    local element\
    \ = arr[i]\n    if element > max then\n      max = element\n    end\n  end\n \
    \ for i = 1, k do\n    table.insert(result, max)\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqqmv3eg5.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpqqmv3eg5.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the maximum element\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Find the maximum element in the remaining elements\n  local max_element_rest\
    \ = arr[k]\n  for i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n\
    \      max_element_rest = arr[i]\n    end\n  end\n  \n  -- Return the result table\n\
    \  return arr .. {max_element}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxgyhrtfj.lua:39:\
    \ attempt to concatenate local 'arr' (a table value)\nstack traceback:\n\t/tmp/tmpxgyhrtfj.lua:39:\
    \ in function 'candidate'\n\t/tmp/tmpxgyhrtfj.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    local m = math.min(n, k)\n    local t = {}\n    for i = 1, m do\n\
    \        local max_idx = -1\n        local max_val = arr[max_idx]\n        for\
    \ j = 1, n do\n            if arr[j] > max_val then\n                max_val =\
    \ arr[j]\n                max_idx = j\n            end\n        end\n        t[max_idx]\
    \ = arr[max_idx]\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdfwxsqh9.lua:24:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpdfwxsqh9.lua:24:\
    \ in function 'candidate'\n\t/tmp/tmpdfwxsqh9.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and k should be less than or\
    \ equal to the length of the array\")\n  local result = {}\n  local max = 0\n\
    \  local index = 1\n  while index <= k do\n    if arr[index] > max then\n    \
    \  max = arr[index]\n    end\n    index = index + 1\n  end\n  assert(index ==\
    \ k, \"k should be less than or equal to the length of the array\")\n  \n  local\
    \ index = 1\n  while index <= k do\n    if arr[index] > max then\n      max =\
    \ arr[index]\n    end\n    index = index + 1\n  end\n  \n  local index = 1\n \
    \ while index <= k do\n    if arr[index] > max then\n      max = arr[index]\n\
    \    end\n    index = index + 1\n  end\n  \n  while index <= k do\n    result[index]\
    \ = arr[index]\n    index = index + 1\n  end\n  \n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwcg7clsh.lua:27:\
    \ k should be less than or equal to the length of the array\nstack traceback:\n\
    \t/tmp/tmpwcg7clsh.lua:27: in function 'candidate'\n\t/tmp/tmpwcg7clsh.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to #arr\"\
    )\n  local result = {}\n  local max = 0\n  for i = 1, k do\n    local element\
    \ = arr[i]\n    if element > max then\n      max = element\n    end\n  end\n \
    \ for i = 1, k do\n    local element = arr[i]\n    if element == max then\n  \
    \    table.insert(result, element)\n    end\n  end\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv302rj0m.lua:38:\
    \ expected: {-4, -3, 5}\nactual: {5}\nstack traceback:\n\t/tmp/tmpv302rj0m.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  assert(n >= k, \"k must be less than or equal to n\")\n  local result\
    \ = {}\n  local max_so_far = arr[1]\n  for i = 2, n do\n    if arr[i] > max_so_far\
    \ then\n      max_so_far = arr[i]\n    end\n  end\n  for i = 1, k do\n    result[i]\
    \ = max_so_far\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdna3tme.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpkdna3tme.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ result = {}\n    local max = 0\n    for i = 1, k do\n        if arr[i] > max\
    \ then\n            max = arr[i]\n        end\n    end\n    for i = 1, k do\n\
    \        if arr[i] > max then\n            result[i] = arr[i]\n        end\n \
    \   end\n    for i = k + 1, #arr do\n        if arr[i] > max then\n          \
    \  result[i] = arr[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr2es9knc.lua:40:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpr2es9knc.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to #arr\"\
    )\n  local result = {}\n  local max = 0\n  local i = 1\n  while i <= k do\n  \
    \  if arr[i] > max then\n      max = arr[i]\n    end\n    i = i + 1\n  end\n \
    \ local j = 1\n  while j <= k do\n    if arr[j] > max then\n      max = arr[j]\n\
    \    end\n    j = j + 1\n  end\n  for i = 1, k do\n    result[i] = max\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbozulro0.lua:43:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpbozulro0.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the maximum element\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Sort the remaining elements and return the first k elements\n  local\
    \ sorted_arr = table.sort(arr, function(x)\n    return x > max_element\n  end)\n\
    \  return sorted_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4s0hi4z.lua:40:\
    \ expected: {-4, -3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmpt4s0hi4z.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local max = 0\n  local i = 1\n  while i <= k do\n    local curr = arr[i]\n\
    \    if curr > max then\n      max = curr\n    end\n    i = i + 1\n  end\n  local\
    \ j = 1\n  while j <= k do\n    local curr = arr[j]\n    if curr > max then\n\
    \      max = curr\n    end\n    j = j + 1\n  end\n  local i = 1\n  while i <=\
    \ k do\n    local curr = arr[i]\n    if curr > max then\n      max = curr\n  \
    \  end\n    i = i + 1\n  end\n  while i <= k do\n    local curr = arr[i]\n   \
    \ if curr > max then\n      max = curr\n    end\n    i = i + 1\n  end\n  while\
    \ i <= k do\n    local curr = arr[i]\n    if curr > max then\n      max = curr\n\
    \    end\n    i = i + 1\n  end\n  while i <= k do\n    local curr = arr[i]\n \
    \   if curr > max then\n      max = curr\n    end\n    i = i + 1\n  end\n  while\
    \ i <= k do\n    local curr = arr[i]\n    if curr > max then\n      max = curr\n\
    \    end\n    i = i + 1\n  end\n  while i <= k do\n    local curr = arr[i]\n \
    \   if curr > max then\n      max = curr\n    end\n    i = i + 1\n  end\n  while\
    \ i <= k do\n    local curr = arr[i]\n    if curr > max then\n      max = curr\n\
    \    end\n    i = i + 1\n  end\n  while i <= k do\n    local curr = arr[i]\n \
    \   if curr > max then\n      max = curr\n    end\n    i = i + 1\n  end\n  while\
    \ i <= k do\n    local curr = arr[i]\n    if curr > max then\n      max = curr\n\
    \    end\n    i = i + 1\n  end\n  while i <= k do\n    local curr = arr[i]\n \
    \   if curr > max then\n      max = curr\n    end\n    i = i + 1\n  end\n  while\
    \ i <= k do\n    local curr = arr[i]\n    if curr > max then\n      max = curr\n\
    \    end\n    i = i + 1\n  end\n  while i <= k do\n    local curr = arr[i]\n \
    \   if curr > max then\n      max = curr\n    end\n    i = i + 1\n  end\n  while\
    \ i <= k do\n    local curr = arr[i]\n    if curr > max then\n      max = curr\n\
    \    end\n    i = i + 1\n  end\n  while i <= k do\n    local curr = arr[i]\n \
    \   if curr > max then\n      \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw0uam0c2.lua:148: ''end'' expected (to close ''if'' at line
    129) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr)\n  local result = {}\n  local max = 0\n  for i = 1, k do\n\
    \    if arr[i] > max then\n      max = arr[i]\n    end\n  end\n  for i = 1, k\
    \ do\n    if arr[i] > max then\n      result[i] = arr[i]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpky6zmq5l.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpky6zmq5l.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be greater than 0 and less than or equal to #arr')\n\
    \  local result = {}\n  local max = 0\n  local i = 1\n  while i <= k do\n    if\
    \ arr[i] > max then\n      max = arr[i]\n    end\n    i = i + 1\n  end\n  i =\
    \ k\n  while i <= #arr do\n    if arr[i] > max then\n      max = arr[i]\n    end\n\
    \    i = i + 1\n  end\n  assert(i <= #arr, 'k should be less than or equal to\
    \ #arr')\n  assert(max <= 1000, 'max should be less than or equal to 1000')\n\
    \  local j = 1\n  while j <= k do\n    result[j] = max\n    j = j + 1\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0cwemicw.lua:34:\
    \ k should be less than or equal to #arr\nstack traceback:\n\t/tmp/tmp0cwemicw.lua:34:\
    \ in function 'candidate'\n\t/tmp/tmp0cwemicw.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxt9d1vwl.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  local m = math.max(k, n)\n  local t = {}\n  local i = 1\n  while i\
    \ <= m do\n    if arr[i] > arr[i-1] then\n      table.insert(t, arr[i])\n    end\n\
    \    i = i + 1\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9o5sgfei.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp9o5sgfei.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9o5sgfei.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr)\n  local result = {}\n  local max = 0\n  for i = 1, k do\n\
    \    local element = arr[i]\n    if element > max then\n      max = element\n\
    \    end\n  end\n  for i = 1, k do\n    local element = arr[i]\n    if element\
    \ == max then\n      result[i] = element\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5k59d7u.lua:38:\
    \ expected: {-4, -3, 5}\nactual: {3=5}\nstack traceback:\n\t/tmp/tmph5k59d7u.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  local m = math.max(1, math.min(k, n))\n  local t = {}\n  for i = 1,\
    \ m do\n    table.insert(t, arr[i])\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppeqrhlyl.lua:29:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmppeqrhlyl.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    local m = math.max(1, math.min(k, n))\n    local t = {}\n    for\
    \ i = 1, m do\n        local m = math.max(1, math.min(k, n - i))\n        for\
    \ j = 1, m do\n            t[j] = arr[j]\n        end\n    end\n    return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0ezlle4.lua:32:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4}\nstack traceback:\n\t/tmp/tmps0ezlle4.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local n = #arr\n  local m = math.min(k, n)\n  for i = 1, m do\n    local\
    \ tmp = arr[i]\n    for j = 1, n do\n      if tmp > arr[j] then\n        tmp =\
    \ arr[j]\n      end\n    end\n    result[#result + 1] = tmp\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpth1h5p2_.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {-4, -4, -4}\nstack traceback:\n\t/tmp/tmpth1h5p2_.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  local m = math.min(k, n)\n  local t = {}\n  for i = 1, m do\n    local\
    \ max = -math.inf\n    for j = 1, n do\n      if arr[j] > max then\n        max\
    \ = arr[j]\n      end\n    end\n    t[i] = max\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzek8ufd4.lua:21:\
    \ attempt to perform arithmetic on field 'inf' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpzek8ufd4.lua:21: in function 'candidate'\n\t/tmp/tmpzek8ufd4.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local max = 0\n  for i = 1, k do\n    if arr[i] > max then\n      max\
    \ = arr[i]\n    end\n  end\n  for i = 1, k do\n    if arr[i] > max then\n    \
    \  result[i] = arr[i]\n    end\n  end\n  for i = 1, k do\n    if arr[i] > max\
    \ then\n      result[i] = arr[i]\n    end\n  end\n  for i = 1, k do\n    if arr[i]\
    \ > max then\n      result[i] = arr[i]\n    end\n  end\n  for i = 1, k do\n  \
    \  if arr[i] > max then\n      result[i] = arr[i]\n    end\n  end\n  for i = 1,\
    \ k do\n    if arr[i] > max then\n      result[i] = arr[i]\n    end\n  end\n \
    \ for i = 1, k do\n    if arr[i] > max then\n      result[i] = arr[i]\n    end\n\
    \  end\n  for i = 1, k do\n    if arr[i] > max then\n      result[i] = arr[i]\n\
    \    end\n  end\n  for i = 1, k do\n    if arr[i] > max then\n      result[i]\
    \ = arr[i]\n    end\n  end\n  for i = 1, k do\n    if arr[i] > max then\n    \
    \  result[i] = arr[i]\n    end\n  end\n  for i = 1, k do\n    if arr[i] > max\
    \ then\n      result[i] = arr[i]\n    end\n  end\n  for i = 1, k do\n    if arr[i]\
    \ > max then\n      result[i] = arr[i]\n    end\n  end\n  for i = 1, k do\n  \
    \  if arr[i] > max then\n      result[i] = arr[i]\n    end\n  end\n  for i = 1,\
    \ k do\n    if arr[i] > max then\n      result[i] = arr[i]\n    end\n  end\n \
    \ for i = 1, k do\n    if arr[i] > max then\n      result[i] = arr[i]\n    end\n\
    \  end\n  for i = 1, k do\n    if arr[i] > max then\n      result[i] = arr[i]\n\
    \    end\n  end\n  for i = 1, k do\n    if arr[i] > max then\n      result[i]\
    \ = arr[i]\n    end\n  end\n  for i = 1, k do\n    if arr[i] > max then\n    \
    \  result[i] = arr[i]\n    end\n  end\n  for i = 1, k do\n    if arr[i] > max\
    \ then\n      result[i] = arr[i]\n    end\n  end\n  for i = 1, k do\n    if arr[i]\
    \ > max then\n      result[i] = arr[i]\n    end\n  end\n  for i = 1, k do\n  \
    \  if arr[i] > max then\n      result[i] = arr[i]\n    end\n  end\n  for i = 1,\
    \ k do\n    if arr[i] > max then\n      result[i] = arr[i]\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3y6ds_lo.lua:145: ''end'' expected (to close ''for'' at line
    124) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr)\n  local result = {}\n  local max = 0\n  for i = 1, k do\n\
    \    if arr[i] > max then\n      max = arr[i]\n    end\n  end\n  for i = 1, k\
    \ do\n    if arr[i] > max then\n      result[i] = arr[i]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpky6zmq5l.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpky6zmq5l.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return arr\n  end\n  \n  -- Find the maximum element\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Find the maximum element in the remaining elements\n  local max_element_rest\
    \ = arr[k]\n  for i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n\
    \      max_element_rest = arr[i]\n    end\n  end\n  \n  -- Return the maximum\
    \ element and the remaining elements\n  return {max_element, {max_element_rest}}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvx5r6qqo.lua:45:\
    \ expected: {-4, -3, 5}\nactual: {5, {5}}\nstack traceback:\n\t/tmp/tmpvx5r6qqo.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Write\
    \ your code here.\n  local n = #arr\n  local m = math.max(1, n)\n  local max =\
    \ {}\n  local i = 1\n  while i <= m do\n    if arr[i] > arr[i - 1] then\n    \
    \  table.insert(max, arr[i])\n    end\n    i = i + 1\n  end\n  if k > n then\n\
    \    return max\n  else\n    local j = 1\n    while j <= k do\n      table.insert(max,\
    \ max[j])\n      j = j + 1\n    end\n    return max\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpee7msawi.lua:23:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpee7msawi.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmpee7msawi.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq0k3v5wh.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Write\
    \ your code here.\n  local result = {}\n  local max_count = 0\n  local max_element\
    \ = nil\n  for i = 1, #arr do\n    if arr[i] > max_count then\n      max_count\
    \ = arr[i]\n      max_element = i\n    end\n  end\n  for i = 1, k do\n    if arr[i]\
    \ > max_count then\n      max_count = arr[i]\n      max_element = i\n    end\n\
    \  end\n  result[max_element] = max_count\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp53w4qpk9.lua:40:\
    \ expected: {-4, -3, 5}\nactual: {3=5}\nstack traceback:\n\t/tmp/tmp53w4qpk9.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  assert(n >= k, \"k must be greater than or equal to 1\")\n  assert(k\
    \ <= n, \"k must be less than or equal to n\")\n  local arr2 = {}\n  local max\
    \ = 0\n  for i = 1, n do\n    if arr[i] > max then\n      max = arr[i]\n    end\n\
    \  end\n  for i = 1, k do\n    arr2[i] = max\n  end\n  return arr2\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6rw8s6gj.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp6rw8s6gj.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ n = #arr\n    local m = math.max(k, n)\n    local t = {}\n    for i = 1, m do\n\
    \        local max_idx = -1\n        local max_val = arr[max_idx]\n        for\
    \ j = 1, n do\n            if arr[j] > max_val then\n                max_val =\
    \ arr[j]\n                max_idx = j\n            end\n        end\n        t[max_idx]\
    \ = arr[max_idx]\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6gcb0q89.lua:24:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp6gcb0q89.lua:24:\
    \ in function 'candidate'\n\t/tmp/tmp6gcb0q89.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Write\
    \ your code here.\n  local max_arr = {}\n  local max_len = -1\n  for i = 1, k\
    \ do\n    local max_val = arr[1]\n    for j = 2, #arr do\n      if arr[j] > max_val\
    \ then\n        max_val = arr[j]\n      end\n    end\n    max_arr[i] = max_val\n\
    \    if max_len < #max_arr then\n      max_len = #max_arr\n    end\n  end\n  return\
    \ max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2wwdtcgt.lua:38:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp2wwdtcgt.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Write\
    \ your code here.\n  local n = #arr\n  local m = math.max(n, k)\n  local table\
    \ = {}\n  for i = 1, m do\n    table[i] = arr[i]\n  end\n  for i = 1, n do\n \
    \   if table[i] > table[i + 1] then\n      table[i], table[i + 1] = table[i +\
    \ 1], table[i]\n    end\n  end\n  return table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxyrl3j32.lua:25:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpxyrl3j32.lua:25:\
    \ in function 'candidate'\n\t/tmp/tmpxyrl3j32.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  assert(k > 0 and k <= n)\n  local max = {}\n  local i = 1\n  while\
    \ i <= n do\n    local m = i\n    while m > 0 and arr[m] < arr[m - 1] do\n   \
    \   m = m - 1\n    end\n    if m > i then\n      table.insert(max, arr[i])\n \
    \     i = i + 1\n    else\n      table.insert(max, arr[m])\n      i = m + 1\n\
    \    end\n  end\n  table.sort(max)\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx2zhgbkj.lua:23:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpx2zhgbkj.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmpx2zhgbkj.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr)\n  local result = {}\n  local pos = 0\n  for i = 1, k do\n\
    \    local max_val = arr[pos]\n    for j = 1, #arr do\n      if arr[j] > max_val\
    \ then\n        max_val = arr[j]\n      end\n    end\n    result[i] = max_val\n\
    \    pos = pos + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdgg9trmy.lua:23:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpdgg9trmy.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmpdgg9trmy.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  local m = math.min(n, k)\n  local t = {}\n  for i = 1, m do\n    local\
    \ v = arr[i]\n    if v > t[#t] then\n      t[#t] = v\n    end\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpru8kvfbb.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpru8kvfbb.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpru8kvfbb.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local max = 0\n  local index = 0\n  for i = 1, k do\n    if arr[i] >\
    \ max then\n      max = arr[i]\n      index = i\n    end\n  end\n  table.insert(result,\
    \ max)\n  for i = k + 1, #arr do\n    if arr[i] > max then\n      max = arr[i]\n\
    \      index = i\n    end\n  end\n  table.insert(result, max)\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6hrkcx73.lua:40:\
    \ expected: {-4, -3, 5}\nactual: {5, 5}\nstack traceback:\n\t/tmp/tmp6hrkcx73.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local n\
    \ = #arr\n  local m = math.min(k, n)\n  local t = {}\n  for i = 1, m do\n    t[i]\
    \ = arr[i]\n  end\n  for i = m + 1, n do\n    t[i] = arr[i]\n  end\n  return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1cfj5pwt.lua:32:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp1cfj5pwt.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750270
- exit_code: 1
  program: "-- Given a table arr of integers and a positive integer k, return a sorted\
    \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the table will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the table will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local m = math.min(k, #arr)\n  for i = 1, m do\n    local v = arr[i]\n\
    \    if v > result[#result] then\n      result[#result] = v\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc9xghkqr.lua:21:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpc9xghkqr.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpc9xghkqr.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750270
