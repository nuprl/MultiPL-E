language: lua
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local paren_count = 0\n  local paren_level = 0\n  local\
    \ paren_stack = { }\n  local paren_stack_size = -1\n  local paren_stack_index\
    \ = 0\n  local paren_stack_top = #paren_stack\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptml13dur.lua:23: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptefnwbwi.lua:69: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_level_count = {}\n  local paren_level_count_stack = {}\n\
    \  local paren_level_stack = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_counts = {}\n  local paren_level_stacks = {}\n  local paren_level_stacks_count\
    \ = {}\n  local paren_level_stacks_counts = {}\n  local paren_level_stacks_max\
    \ = {}\n  local paren_level_stacks_max_count = {}\n  local paren_level_stacks_max_counts\
    \ = {}\n  local paren_level_stacks_max_max = {}\n  local paren_level_stacks_max_max_count\
    \ = {}\n  local paren_level_stacks_max_max_counts = {}\n  local paren_level_stacks_max_max_max\
    \ = {}\n  local paren_level_stacks_max_max_max_count = {}\n  local paren_level_stacks_max_max_max_counts\
    \ = {}\n  local paren_level_stacks_max_max_max_max = {}\n  local paren_level_stacks_max_max_max_max_count\
    \ = {}\n  local paren_level_stacks_max_max_max_max_counts = {}\n  local paren_level_stacks_max_max_max_max_max\
    \ = {}\n  local paren_level_stacks_max_max_max_max_max_count = {}\n  local paren_level_stacks_max_max_max_max_max_counts\
    \ = {}\n  local paren_level_stacks_max_max_max_max_max_max = {}\n  local paren_level_stacks_max_max_max_max_max_max_count\
    \ = {}\n  local paren_level_stacks_max_max_max_max_max_max_counts = {}\n  local\
    \ paren_level_stacks_max_max_max_max_max_max_max = {}\n  local paren_level_stacks_max_max_max_max_max_max_max_count\
    \ = {}\n  local paren_level_stacks_max_max_max_max_max_max_max_counts = {}\n \
    \ local paren_level_stacks_max_max_max_max_max_max_max_max = {}\n  local paren_level_stacks_max_max_max_max_max_max_max_max_count\
    \ = {}\n  local paren_level_stacks_max_max_max_max_max_max_max_max_counts = {}\n\
    \  local paren_level_stacks_max_max_max_max_max_max_max_max_max = {}\n  local\
    \ paren_level_stacks_max_max_max_max_max_max_max_max_max_count = {}\n  local paren_level_stacks_max_max_max_max_max_max_max_max_max_counts\
    \ = {}\n  local paren_level_stacks_max_max_max_max_max_max_max_max_max_max = {}\n\
    \  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpia7tovho.lua:57: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = { 0 }\n  local paren_level = 0\n  local paren_groups =\
    \ {}\n  local paren_group_index = 0\n  local paren_group_size = 0\n  local paren_group_level\
    \ = 0\n  local paren_group_start = 0\n  local paren_group_end = 0\n  local paren_group_content\
    \ = {}\n  local paren_group_content_index = 0\n  local paren_group_content_size\
    \ = 0\n  local paren_group_content_level = 0\n  local paren_group_content_start\
    \ = 0\n  local paren_group_content_end = 0\n  local paren_group_content_string\
    \ = ''\n  local paren_group_content_string_index = 0\n  local paren_group_content_string_size\
    \ = 0\n  local paren_group_content_string_level = 0\n  local paren_group_content_string_start\
    \ = 0\n  local paren_group_content_string_end = 0\n  local paren_group_content_string\
    \ = ''\n  local paren_group_content_string_index = 0\n  local paren_group_content_string_size\
    \ = 0\n  local paren_group_content_string_level = 0\n  local paren_group_content_string_start\
    \ = 0\n  local paren_group_content_string_end = 0\n  local paren_group_content_string\
    \ = ''\n  local paren_group_content_string_index = 0\n  local paren_group_content_string_size\
    \ = 0\n  local paren_group_content_string_level = 0\n  local paren_group_content_string_start\
    \ = 0\n  local paren_group_content_string_end = 0\n  local paren_group_content_string\
    \ = ''\n  local paren_group_content_string_index = 0\n  local paren_group_content_string_size\
    \ = 0\n  local paren_group_content_string_level = 0\n  local paren_group_content_string_start\
    \ = 0\n  local paren_group_content_string_end = 0\n  local paren_group_content_string\
    \ = ''\n  local paren_group_content_string_index = 0\n  local paren_group_content_string_size\
    \ = 0\n  local paren_group_content_string_level = 0\n  local paren_group_content_string_start\
    \ = 0\n  local paren_group_content_string_end = 0\n  local paren_group_content_string\
    \ = ''\n  local paren_group_content_string_index = 0\n  local paren_group_content_string_size\
    \ = 0\n  local paren_group_content_string_level = 0\n  local paren_group_content_string_start\
    \ = 0\n  local paren_group_content_string_end = 0\n  local paren_group_content_string\
    \ = ''\n  local paren_group_content_string_index = 0\n  local paren_group_content_string_size\
    \ = 0\n  local paren_group_content_string_level = 0\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfzhdw27l.lua:71: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_nesting = 0\n\
    \  local paren_groups = {}\n  local paren_group_index = 1\n  local paren_group_string\
    \ = ''\n  local paren_group_nesting = 0\n  local paren_group_level = 0\n  local\
    \ paren_group_nesting_level = 0\n  local paren_group_levels = {}\n  local paren_group_level_index\
    \ = 1\n  local paren_group_level_nesting = 0\n  local paren_group_level_nesting_level\
    \ = 0\n  local paren_group_level_nesting_levels = {}\n  local paren_group_level_nesting_level_index\
    \ = 1\n  local paren_group_level_nesting_level_nesting = 0\n  local paren_group_level_nesting_level_nesting_level\
    \ = 0\n  local paren_group_level_nesting_level_nesting_levels = {}\n  local paren_group_level_nesting_level_nesting_level_index\
    \ = 1\n  local paren_group_level_nesting_level_nesting_level_nesting = 0\n  local\
    \ paren_group_level_nesting_level_nesting_level_nesting_levels = {}\n  local paren_group_level_nesting_level_nesting_level_index\
    \ = 1\n  local paren_group_level_nesting_level_nesting_level_nesting_level = 0\n\
    \  local paren_group_level_nesting_level_nesting_level_nesting_levels = {}\n \
    \ local paren_group_level_nesting_level_nesting_level_index = 1\n  local paren_group_level_nesting_level_nesting_level_nesting_level_nesting\
    \ = 0\n  local paren_group_level_nesting_level_nesting_level_nesting_level_nesting_levels\
    \ = {}\n  local paren_group_level_nesting_level_nesting_level_index = 1\n  local\
    \ paren_group_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting\
    \ = 0\n  local paren_group_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting_levels\
    \ = {}\n  local paren_group_level_nesting_level_nesting_level_index = 1\n  local\
    \ paren_group_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting\
    \ = 0\n  local paren_group_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting_levels\
    \ = {}\n  local paren_group_level_nesting_level_nesting_level_index = 1\n  local\
    \ paren_group_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting\
    \ = 0\n  local paren_group_level_nesting_level_nesting_level_nesting_level_nesting_level_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8_aj1mxo.lua:52: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_nesting = 0\n\
    \  local paren_groups = {}\n  local paren_group_index = 1\n  local paren_group_nesting\
    \ = 1\n  local paren_group_level = 1\n  local paren_group_nesting_level = 1\n\
    \  local paren_group_level_string = ''\n  local paren_group_nesting_level_string\
    \ = ''\n  local paren_group_level_char = ''\n  local paren_group_nesting_level_char\
    \ = ''\n  local paren_group_level_char_index = 1\n  local paren_group_nesting_level_char_index\
    \ = 1\n  local paren_group_level_char_index = 1\n  local paren_group_nesting_level_char_index\
    \ = 1\n  local paren_group_level_char_index = 1\n  local paren_group_nesting_level_char_index\
    \ = 1\n  local paren_group_level_char_index = 1\n  local paren_group_nesting_level_char_index\
    \ = 1\n  local paren_group_level_char_index = 1\n  local paren_group_nesting_level_char_index\
    \ = 1\n  local paren_group_level_char_index = 1\n  local paren_group_nesting_level_char_index\
    \ = 1\n  local paren_group_level_char_index = 1\n  local paren_group_nesting_level_char_index\
    \ = 1\n  local paren_group_level_char_index = 1\n  local paren_group_nesting_level_char_index\
    \ = 1\n  local paren_group_level_char_index = 1\n  local paren_group_nesting_level_char_index\
    \ = 1\n  local paren_group_level_char_index = 1\n  local paren_group_nesting_level_char_index\
    \ = 1\n  local paren_group_level_char_index = 1\n  local paren_group_nesting_level_char_index\
    \ = 1\n  local paren_group_level_char_index = 1\n  local paren_group_nesting_level_char_index\
    \ = 1\n  local paren_group_level_char_index = 1\n  local paren_group_nesting_level_char_index\
    \ = 1\n  local paren_group_level_char_index = 1\n  local paren_group_nesting_level_char_index\
    \ = 1\n  local paren_group_level_char_index = 1\n  local paren_group_nesting_level_char_index\
    \ = 1\n  local paren_group_level_char_index = 1\n  local paren_group_nesting_level_char_index\
    \ = 1\n  local paren_group_level_char_index = 1\n  local paren_group_nesting_level_char_index\
    \ = 1\n  local paren_group_level_char_index = 1\n  local paren_group_nesting_level_char_index\
    \ = 1\n  local paren_group_level_char_index = 1\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptm7dig2l.lua:66: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local paren_levels = {}\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a+)%]') do\n    local paren_level = #paren\n    local paren_level_string\
    \ = paren\n    for i = 1, #paren_level_string do\n      paren_level_string = paren_level_string:sub(1,\
    \ i - 1)\n    end\n    paren_level_string = paren_level_string:gsub('%[(%a+)%]',\
    \ '')\n    paren_level_string = paren_level_string:gsub('%[%a]', '')\n    paren_level_string\
    \ = paren_level_string:gsub('%[%a%]', '')\n    paren_level_string = paren_level_string:gsub('%[%a%]',\
    \ '')\n    paren_level_string = paren_level_string:gsub('%[%a%]', '')\n    paren_level_string\
    \ = paren_level_string:gsub('%[%a%]', '')\n    paren_level_string = paren_level_string:gsub('%[%a%]',\
    \ '')\n    paren_level_string = paren_level_string:gsub('%[%a%]', '')\n    paren_level_string\
    \ = paren_level_string:gsub('%[%a%]', '')\n    paren_level_string = paren_level_string:gsub('%[%a%]',\
    \ '')\n    paren_level_string = paren_level_string:gsub('%[%a%]', '')\n    paren_level_string\
    \ = paren_level_string:gsub('%[%a%]', '')\n    paren_level_string = paren_level_string:gsub('%[%a%]',\
    \ '')\n    paren_level_string = paren_level_string:gsub('%[%a%]', '')\n    paren_level_string\
    \ = paren_level_string:gsub('%[%a%]', '')\n    paren_level_string = paren_level_string:gsub('%[%a%]',\
    \ '')\n    paren_level_string = paren_level_string:gsub('%[%a%]', '')\n    paren_level_string\
    \ = paren_level_string:gsub('%[%a%]', '')\n    paren_level_string = paren_level_string:gsub('%[%a%]',\
    \ '')\n    paren_level_string = paren_level_string:gsub('%[%\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphv1uuf98.lua:34: unfinished string near ''''%[%''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_stack_size = #paren_string\n  local paren_level_size = #paren_level\n\
    \  local paren_stack_index = 1\n  local paren_level_index = 1\n  local paren_stack_string\
    \ = paren_string\n  local paren_level_string = paren_string\n  local paren_stack_string_index\
    \ = 1\n  local paren_level_string_index = 1\n  local paren_stack_last_index =\
    \ paren_stack_index\n  local paren_level_last_index = paren_level_index\n  local\
    \ paren_stack_last_string = paren_stack_string\n  local paren_level_last_string\
    \ = paren_level_string\n  local paren_stack_last_string_index = paren_stack_string_index\n\
    \  local paren_level_last_string_index = paren_level_string_index\n  local paren_stack_last_last_index\
    \ = paren_stack_last_index\n  local paren_level_last_last_index = paren_level_last_index\n\
    \  local paren_stack_last_last_string = paren_stack_last_string\n  local paren_level_last_last_string\
    \ = paren_level_last_string\n  local paren_stack_last_last_string_index = paren_stack_last_string_index\n\
    \  local paren_level_last_last_string_index = paren_level_last_string_index\n\
    \  local paren_stack_last_last_last_index = paren_stack_last_last_index\n  local\
    \ paren_level_last_last_last_index = paren_level_last_last_index\n  local paren_stack_last_last_last_string\
    \ = paren_stack_last_last_string\n  local paren_level_last_last_last_string =\
    \ paren_level_last_last_string\n  local paren_stack_last_last_last_string_index\
    \ = paren_stack_last_last_string_index\n  local paren_level_last_last_last_string_index\
    \ = paren_level_last_last_string_index\n  local paren_stack_last_last_last_last_index\
    \ = paren_stack_last_last_last_index\n  local paren_level_last_last_last_last_index\
    \ = paren_level_last_last_last_index\n  local paren_stack_last_last_last_last_string\
    \ = paren_stack_last_last_last_string\n  local paren_level_last_last_last_last_string\
    \ = paren_level_last_last_last_string\n  local paren_stack_last_last_last_last_string_index\
    \ = paren_stack_last_last_last_string_index\n  local paren_level_last_last_last_last_string_index\
    \ = paren_level_last_last_last_string_index\n  local paren_stack_last_last_last_last_last_index\
    \ = paren_stack_last_last_last_last_index\n  local paren_level_last_last_last_last_last_index\
    \ = paren_level_last_last_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf0xe38lg.lua:54: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_max_level = 0\n  local paren_max_level_stack = {}\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a*)%]') do\n    local paren_level = #paren_stack\n    local paren_level_stack\
    \ = paren_max_level_stack\n    paren_level_stack[paren_level] = paren_level\n\
    \    local paren_max_level = #paren_level_stack\n    if paren_level > level then\n\
    \      level = paren_level\n      paren_stack = {}\n      paren_levels = {}\n\
    \    end\n    table.insert(paren_stack, paren)\n    table.insert(paren_levels,\
    \ paren_level)\n    if paren_level > paren_max_level then\n      paren_max_level\
    \ = paren_level\n      paren_max_level_stack = paren_level_stack\n    end\n  end\n\
    \  local max_level = #paren_max_level_stack\n  local max_level_stack = paren_max_level_stack\n\
    \  local max_level_stack_len = #max_level_stack\n  for i = 1, max_level do\n \
    \   local paren_level = max_level_stack[i]\n    local paren_level_stack = max_level_stack_len\n\
    \    local paren_level_stack_len = #paren_level_stack\n    local paren_level_stack_top\
    \ = paren_level_stack[paren_level_stack_len]\n    local paren_level_stack_bottom\
    \ = paren_level_stack[paren_level_stack_len - 1]\n    local paren_level_stack_top\
    \ = paren_level_stack_top\n    if paren_level_stack_bottom < paren_level then\n\
    \      paren_level_stack_top = paren_level_stack_bottom\n    end\n    if paren_level_stack_top\
    \ > 0 then\n      local paren_level_stack_bottom = paren_level_stack[paren_level_stack_len\
    \ - 1]\n      if paren_level_stack_bottom < paren_level then\n        paren_level_stack_bottom\
    \ = paren_level\n      end\n      local paren_level_stack_top = paren_level_stack_top\n\
    \      local paren_level_stack_bottom = paren_level_stack_bottom\n      if paren_level_stack_bottom\
    \ < paren_level then\n        paren_level_stack_bottom = paren_level\n      end\n\
    \      local paren_level_stack_top = paren_level_stack_top\n      local paren_level_stack_bottom\
    \ = paren_level_stack_bottom\n      if paren_level_stack_bottom < paren_level\
    \ then\n        paren_level_stack_bottom = paren_level\n      end\n      local\
    \ paren_level_stack_top = paren\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl3rjlnkb.lua:67: ''end'' expected (to close ''if'' at line
    42) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local level = 0\n  local paren_level = 0\n  local\
    \ paren_nesting = 0\n  local paren_levels = {}\n  local paren_levels_string =\
    \ ''\n  local paren_levels_string_index = 0\n  local paren_levels_string_length\
    \ = 0\n  local paren_levels_string_length_index = 0\n  local paren_levels_string_length2_index\
    \ = 0\n  local paren_levels_string_length3_index = 0\n  local paren_levels_string_length4_index\
    \ = 0\n  local paren_levels_string_length5_index = 0\n  local paren_levels_string_length6_index\
    \ = 0\n  local paren_levels_string_length7_index = 0\n  local paren_levels_string_length8_index\
    \ = 0\n  local paren_levels_string_length9_index = 0\n  local paren_levels_string_length10_index\
    \ = 0\n  local paren_levels_string_length11_index = 0\n  local paren_levels_string_length12_index\
    \ = 0\n  local paren_levels_string_length13_index = 0\n  local paren_levels_string_length14_index\
    \ = 0\n  local paren_levels_string_length15_index = 0\n  local paren_levels_string_length16_index\
    \ = 0\n  local paren_levels_string_length17_index = 0\n  local paren_levels_string_length18_index\
    \ = 0\n  local paren_levels_string_length19_index = 0\n  local paren_levels_string_length20_index\
    \ = 0\n  local paren_levels_string_length21_index = 0\n  local paren_levels_string_length22_index\
    \ = 0\n  local paren_levels_string_length23_index = 0\n  local paren_levels_string_length24_index\
    \ = 0\n  local paren_levels_string_length25_index = 0\n  local paren_levels_string_length26_index\
    \ = 0\n  local paren_levels_string_length27_index = 0\n  local paren_levels_string_length28_index\
    \ = 0\n  local paren_levels_string_length29_index = 0\n  local paren_levels_string_length30_index\
    \ = 0\n  local paren_levels_string_length31_index = 0\n  local paren_levels_string_length32_index\
    \ = 0\n  local paren_levels_string_length33_index = 0\n  local paren_levels_string_length34_index\
    \ = 0\n  local paren_levels_string_length35_index = 0\n  local paren_levels_string_length36_index\
    \ = 0\n  local paren_levels_string_length37_index = 0\n  local paren_levels_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfw3akt_8.lua:62: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = {}\n  local paren_group_count = {}\n  local paren_group_max_level\
    \ = {}\n  local paren_group_max_level_stack = {}\n  local paren_group_max_level_stack_index\
    \ = {}\n  local paren_group_max_level_stack_count = {}\n  local paren_group_max_level_stack_index\
    \ = {}\n  local paren_group_max_level_stack_count = {}\n  local paren_group_max_level_stack_index\
    \ = {}\n  local paren_group_max_level_stack_count = {}\n  local paren_group_max_level_stack_index\
    \ = {}\n  local paren_group_max_level_stack_count = {}\n  local paren_group_max_level_stack_index\
    \ = {}\n  local paren_group_max_level_stack_count = {}\n  local paren_group_max_level_stack_index\
    \ = {}\n  local paren_group_max_level_stack_count = {}\n  local paren_group_max_level_stack_index\
    \ = {}\n  local paren_group_max_level_stack_count = {}\n  local paren_group_max_level_stack_index\
    \ = {}\n  local paren_group_max_level_stack_count = {}\n  local paren_group_max_level_stack_index\
    \ = {}\n  local paren_group_max_level_stack_count = {}\n  local paren_group_max_level_stack_index\
    \ = {}\n  local paren_group_max_level_stack_count = {}\n  local paren_group_max_level_stack_index\
    \ = {}\n  local paren_group_max_level_stack_count = {}\n  local paren_group_max_level_stack_index\
    \ = {}\n  local paren_group_max_level_stack_count = {}\n  local paren_group_max_level_stack_index\
    \ = {}\n  local paren_group_max_level_stack_count = {}\n  local paren_group_max_level_stack_index\
    \ = {}\n  local paren_group_max_level_stack_count = {}\n  local paren_group_max_level_stack_index\
    \ = {}\n  local paren_group_max_level_stack_count = {}\n  local paren_group_max_level_stack_index\
    \ = {}\n  local paren_group_max_level_stack_count = {}\n  local paren_group_max_level_stack_index\
    \ = {}\n  local paren_group_max_level_stack_count = {}\n  local paren_group_max_level_stack_index\
    \ = {}\n  local paren_group_max_level_stack_count = {}\n  local paren_group_max_level_stack_index\
    \ = {}\n  local paren_group_max_level_stack_count = {}\n  local paren_group_max_level_stack_index\
    \ = {}\n  local paren_group_max_level_stack_count = {}\n  local paren_group_max_level_stack_index\
    \ = {}\n  local paren_group_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp15yq5gmx.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_levels = {}\n  local paren_level = 0\n\
    \  local paren_nesting = 0\n  local paren_nesting_level = 0\n  local paren_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_level = 0\n  local paren_nesting_nesting\
    \ = 0\n  local paren_nesting_level = 0\n  local paren_nesting = 0\n  local paren_level\
    \ = 0\n  local paren_nesting_level = 0\n  local paren_nesting_nesting_level =\
    \ 0\n  local paren_nesting_nesting_level = 0\n  local paren_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_level\
    \ = 0\n  local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpolh3v6c3.lua:58: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n\
    \  local paren_levels_stack_index2 = 0\n  local paren_levels_stack_index3 = 0\n\
    \  local paren_levels_stack_index4 = 0\n  local paren_levels_stack_index5 = 0\n\
    \  local paren_levels_stack_index6 = 0\n  local paren_levels_stack_index7 = 0\n\
    \  local paren_levels_stack_index8 = 0\n  local paren_levels_stack_index9 = 0\n\
    \  local paren_levels_stack_index10 = 0\n  local paren_levels_stack_index11 =\
    \ 0\n  local paren_levels_stack_index12 = 0\n  local paren_levels_stack_index13\
    \ = 0\n  local paren_levels_stack_index14 = 0\n  local paren_levels_stack_index15\
    \ = 0\n  local paren_levels_stack_index16 = 0\n  local paren_levels_stack_index17\
    \ = 0\n  local paren_levels_stack_index18 = 0\n  local paren_levels_stack_index19\
    \ = 0\n  local paren_levels_stack_index20 = 0\n  local paren_levels_stack_index21\
    \ = 0\n  local paren_levels_stack_index22 = 0\n  local paren_levels_stack_index23\
    \ = 0\n  local paren_levels_stack_index24 = 0\n  local paren_levels_stack_index25\
    \ = 0\n  local paren_levels_stack_index26 = 0\n  local paren_levels_stack_index27\
    \ = 0\n  local paren_levels_stack_index28 = 0\n  local paren_levels_stack_index29\
    \ = 0\n  local paren_levels_stack_index30 = 0\n  local paren_levels_stack_index31\
    \ = 0\n  local paren_levels_stack_index32 = 0\n  local paren_levels_stack_index33\
    \ = 0\n  local paren_levels_stack_index34 = 0\n  local paren_levels_stack_index35\
    \ = 0\n  local paren_levels_stack_index36 = 0\n  local paren_levels_stack_index37\
    \ = 0\n  local paren_levels_stack_index38 = 0\n  local paren_levels_stack_index39\
    \ = 0\n  local paren_levels_stack_index40 = 0\n  local paren_levels_stack_index41\
    \ = 0\n  local paren_levels_stack_index42 = 0\n  local paren_levels_stack_index43\
    \ = 0\n  local paren_levels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzfi1y745.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local max_level_paren_string = ''\n  for paren_group\
    \ in string.gmatch(paren_string, '%[(%a+)%]') do\n    local level_of_nesting =\
    \ #paren_group\n    if level_of_nesting > max_level then\n      max_level = level_of_nesting\n\
    \      max_level_paren_string = paren_group\n    end\n  end\n  return max_level,\
    \ max_level_paren_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvah9uyh.lua:22:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpfvah9uyh.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  for paren\
    \ in string.gmatch(paren_string, '%[(%a)]+') do\n    local paren_level = level\n\
    \    level = level + 1\n    local paren_stack_size = #paren_stack\n    table.insert(paren_stack,\
    \ paren)\n    if paren_stack_size > max_level then\n      max_level = paren_stack_size\n\
    \    end\n  end\n  table.sort(paren_stack)\n  return max_level, level\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk476derx.lua:26:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpk476derx.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n  local paren_levels_stack_size\
    \ = 0\n  local paren_levels_stack_index2 = 0\n  local paren_levels_stack_size2\
    \ = 0\n  local paren_levels_stack_index3 = 0\n  local paren_levels_stack_size3\
    \ = 0\n  local paren_levels_stack_index4 = 0\n  local paren_levels_stack_size4\
    \ = 0\n  local paren_levels_stack_index5 = 0\n  local paren_levels_stack_size5\
    \ = 0\n  local paren_levels_stack_index6 = 0\n  local paren_levels_stack_size6\
    \ = 0\n  local paren_levels_stack_index7 = 0\n  local paren_levels_stack_size7\
    \ = 0\n  local paren_levels_stack_index8 = 0\n  local paren_levels_stack_size8\
    \ = 0\n  local paren_levels_stack_index9 = 0\n  local paren_levels_stack_size9\
    \ = 0\n  local paren_levels_stack_index10 = 0\n  local paren_levels_stack_size10\
    \ = 0\n  local paren_levels_stack_index11 = 0\n  local paren_levels_stack_size11\
    \ = 0\n  local paren_levels_stack_index12 = 0\n  local paren_levels_stack_size12\
    \ = 0\n  local paren_levels_stack_index13 = 0\n  local paren_levels_stack_size13\
    \ = 0\n  local paren_levels_stack_index14 = 0\n  local paren_levels_stack_size14\
    \ = 0\n  local paren_levels_stack_index15 = 0\n  local paren_levels_stack_size15\
    \ = 0\n  local paren_levels_stack_index16 = 0\n  local paren_levels_stack_size16\
    \ = 0\n  local paren_levels_stack_index17 = 0\n  local paren_levels_stack_size17\
    \ = 0\n  local paren_levels_stack_index18 = 0\n  local paren_levels_stack_size18\
    \ = 0\n  local paren_levels_stack_index19 = 0\n  local paren_levels_stack_size19\
    \ = 0\n  local paren_levels_stack_index20 = 0\n  local paren_levels_stack_size20\
    \ = 0\n  local paren_levels_stack_index21 = 0\n  local paren_levels_stack_size21\
    \ = 0\n  local paren_levels_stack_index22 = 0\n  local paren_levels_stack_size22\
    \ = 0\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppipanivm.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_index = {}\n  local paren_levels_index_size = {}\n\
    \  local paren_levels_index_size[1] = 1\n  local paren_levels_index_size[2] =\
    \ 2\n  local paren_levels_index_size[3] = 3\n  local paren_levels_index_size[4]\
    \ = 4\n  local paren_levels_index_size[5] = 5\n  local paren_levels_index_size[6]\
    \ = 6\n  local paren_levels_index_size[7] = 7\n  local paren_levels_index_size[8]\
    \ = 8\n  local paren_levels_index_size[9] = 9\n  local paren_levels_index_size[10]\
    \ = 10\n  local paren_levels_index_size[11] = 11\n  local paren_levels_index_size[12]\
    \ = 12\n  local paren_levels_index_size[13] = 13\n  local paren_levels_index_size[14]\
    \ = 14\n  local paren_levels_index_size[15] = 15\n  local paren_levels_index_size[16]\
    \ = 16\n  local paren_levels_index_size[17] = 17\n  local paren_levels_index_size[18]\
    \ = 18\n  local paren_levels_index_size[19] = 19\n  local paren_levels_index_size[20]\
    \ = 20\n  local paren_levels_index_size[21] = 21\n  local paren_levels_index_size[22]\
    \ = 22\n  local paren_levels_index_size[23] = 23\n  local paren_levels_index_size[24]\
    \ = 24\n  local paren_levels_index_size[25] = 25\n  local paren_levels_index_size[26]\
    \ = 26\n  local paren_levels_index_size[27] = 27\n  local paren_levels_index_size[28]\
    \ = 28\n  local paren_levels_index_size[29] = 29\n  local paren_levels_index_size[30]\
    \ = 30\n  local paren_levels_index_size[31] = 31\n  local paren_levels_index_size[32]\
    \ = 32\n  local paren_levels_index_size[33] = 33\n  local paren_levels_index_size[34]\
    \ = 34\n  local paren_levels_index_size[35] = 35\n  local paren_levels_index_size[36]\
    \ = 36\n  local paren_levels_index_size[37] = 37\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4lun0b3c.lua:13: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  for paren in string.gmatch(paren_string, '%[(%a*)%]') do\n    local paren_group\
    \ = paren_stack[paren_level]\n    if paren_group == nil then\n      paren_group\
    \ = {paren}\n      paren_stack[paren_level] = paren_group\n    else\n      paren_group[#paren_group\
    \ + 1] = paren\n    end\n    paren_level = paren_level + 1\n  end\n  local max_level\
    \ = 0\n  for _, paren_group in ipairs(paren_stack) do\n    local level = #paren_group\n\
    \    if level > max_level then\n      max_level = level\n    end\n  end\n  local\
    \ max_level_groups = {}\n  for _, paren_group in ipairs(paren_stack) do\n    local\
    \ level = #paren_group\n    if level > max_level then\n      max_level = level\n\
    \    end\n    local level_groups = {}\n    for i = 1, level do\n      level_groups[#level_groups\
    \ + 1] = paren_group[i]\n    end\n    max_level_groups[#max_level_groups + 1]\
    \ = level_groups\n  end\n  return max_level_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppv5zwxrj.lua:45:\
    \ expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmppv5zwxrj.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local max_level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_map = {}\n  local paren_levels_map_size = 0\n  local\
    \ paren_levels_map_count = 0\n  local paren_levels_map_max_count = 0\n  local\
    \ paren_levels_map_max_size = 0\n  local paren_levels_map_max_count = 0\n  local\
    \ paren_levels_map_max_size = 0\n  local paren_levels_map_max_count = 0\n  local\
    \ paren_levels_map_max_size = 0\n  local paren_levels_map_max_count = 0\n  local\
    \ paren_levels_map_max_size = 0\n  local paren_levels_map_max_count = 0\n  local\
    \ paren_levels_map_max_size = 0\n  local paren_levels_map_max_count = 0\n  local\
    \ paren_levels_map_max_size = 0\n  local paren_levels_map_max_count = 0\n  local\
    \ paren_levels_map_max_size = 0\n  local paren_levels_map_max_count = 0\n  local\
    \ paren_levels_map_max_size = 0\n  local paren_levels_map_max_count = 0\n  local\
    \ paren_levels_map_max_size = 0\n  local paren_levels_map_max_count = 0\n  local\
    \ paren_levels_map_max_size = 0\n  local paren_levels_map_max_count = 0\n  local\
    \ paren_levels_map_max_size = 0\n  local paren_levels_map_max_count = 0\n  local\
    \ paren_levels_map_max_size = 0\n  local paren_levels_map_max_count = 0\n  local\
    \ paren_levels_map_max_size = 0\n  local paren_levels_map_max_count = 0\n  local\
    \ paren_levels_map_max_size = 0\n  local paren_levels_map_max_count = 0\n  local\
    \ paren_levels_map_max_size = 0\n  local paren_levels_map_max_count = 0\n  local\
    \ paren_levels_map_max_size = 0\n  local paren_levels_map_max_count = 0\n  local\
    \ paren_levels_map_max_size = 0\n  local paren_levels_map_max_count = 0\n  local\
    \ paren_levels_map_max_size = 0\n  local paren_levels_map_max_count = 0\n  local\
    \ paren_levels_map_max_size = 0\n  local paren_levels_map_max_count = 0\n  local\
    \ paren_levels_map_max_size = 0\n  local paren_levels_map_max_count = 0\n  local\
    \ paren_levels_map_max_size = 0\n  local paren_levels_map_max_count = 0\n  local\
    \ paren_levels_map_max_size\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpeoc3ry3e.lua:67: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_levels = {}\n  local paren_level = 0\n\
    \  local paren_groups = {}\n  local paren_group = 0\n  local paren_group_level\
    \ = 0\n  local paren_group_groups = {}\n  local paren_group_group = 0\n  local\
    \ paren_group_group_level = 0\n  local paren_group_group_groups = {}\n  local\
    \ paren_group_group_group = 0\n  local paren_group_group_group_level = 0\n  local\
    \ paren_group_group_group_groups = {}\n  local paren_group_group_group_group =\
    \ 0\n  local paren_group_group_group_group_level = 0\n  local paren_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_groups = {}\n  local paren_group_group_group_group_group_group\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_group = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_groups = {}\n  local paren_group_group_group_group_group_group\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_group = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_groups = {}\n  local paren_group_group_group_group_group_group\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_group = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_groups = {}\n  local paren_group_group_group_group_group_group\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_group = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_groups = {}\n  local paren_group_group_group_group_group_group\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_group = 0\n  local paren\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6w62iq5m.lua:64: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local paren_count = 0\n  local paren_level = 0\n  local\
    \ paren_groups = { }\n  local paren_group_index = 1\n  local paren_group_count\
    \ = 0\n  local paren_group_level = 0\n  local paren_group_start = 0\n  local paren_group_end\
    \ = 0\n  local paren_group_char = ''\n  local paren_group_char_count = 0\n  local\
    \ paren_group_char_index = 1\n  local paren_group_char_length = 0\n  local paren_group_char_length_index\
    \ = 1\n  local paren_group_char_length_count = 0\n  local paren_group_char_length_index\
    \ = 1\n  local paren_group_char_length_count = 0\n  local paren_group_char_length_index\
    \ = 1\n  local paren_group_char_length_count = 0\n  local paren_group_char_length_index\
    \ = 1\n  local paren_group_char_length_count = 0\n  local paren_group_char_length_index\
    \ = 1\n  local paren_group_char_length_count = 0\n  local paren_group_char_length_index\
    \ = 1\n  local paren_group_char_length_count = 0\n  local paren_group_char_length_index\
    \ = 1\n  local paren_group_char_length_count = 0\n  local paren_group_char_length_index\
    \ = 1\n  local paren_group_char_length_count = 0\n  local paren_group_char_length_index\
    \ = 1\n  local paren_group_char_length_count = 0\n  local paren_group_char_length_index\
    \ = 1\n  local paren_group_char_length_count = 0\n  local paren_group_char_length_index\
    \ = 1\n  local paren_group_char_length_count = 0\n  local paren_group_char_length_index\
    \ = 1\n  local paren_group_char_length_count = 0\n  local paren_group_char_length_index\
    \ = 1\n  local paren_group_char_length_count = 0\n  local paren_group_char_length_index\
    \ = 1\n  local paren_group_char_length_count = 0\n  local paren_group_char_length_index\
    \ = 1\n  local paren_group_char_length_count = 0\n  local paren_group_char_length_index\
    \ = 1\n  local paren_group_char_length_count = 0\n  local paren_group_char_length_index\
    \ = 1\n  local paren_group_char_length_count = 0\n  local paren_group_char_length_index\
    \ = 1\n  local paren_group_char_length_count = 0\n  local paren_group_char_length_index\
    \ = 1\n  local paren_group_char_length_count = 0\n  local paren_group_char_length_index\
    \ = 1\n  local paren_group_char_length_count = 0\n  local paren_group_char_length_index\
    \ = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp62aan_5e.lua:70: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_groups = {}\n  local paren_group_index = 1\n  local paren_group_start\
    \ = 0\n  local paren_group_end = 0\n  local paren_group_level = 1\n  local paren_group_nesting\
    \ = 1\n  local paren_group_nesting_level = 1\n  local paren_group_nesting_start\
    \ = 0\n  local paren_group_nesting_end = 0\n  local paren_group_nesting_level_start\
    \ = 0\n  local paren_group_nesting_level_end = 0\n  local paren_group_nesting_level_diff\
    \ = 0\n  local paren_group_nesting_level_diff_start = 0\n  local paren_group_nesting_level_diff_end\
    \ = 0\n  local paren_group_nesting_level_diff_start2 = 0\n  local paren_group_nesting_level_diff_end2\
    \ = 0\n  local paren_group_nesting_level_diff_start3 = 0\n  local paren_group_nesting_level_diff_end3\
    \ = 0\n  local paren_group_nesting_level_diff_start4 = 0\n  local paren_group_nesting_level_diff_end4\
    \ = 0\n  local paren_group_nesting_level_diff_start5 = 0\n  local paren_group_nesting_level_diff_end5\
    \ = 0\n  local paren_group_nesting_level_diff_start6 = 0\n  local paren_group_nesting_level_diff_end6\
    \ = 0\n  local paren_group_nesting_level_diff_start7 = 0\n  local paren_group_nesting_level_diff_end7\
    \ = 0\n  local paren_group_nesting_level_diff_start8 = 0\n  local paren_group_nesting_level_diff_end8\
    \ = 0\n  local paren_group_nesting_level_diff_start9 = 0\n  local paren_group_nesting_level_diff_end9\
    \ = 0\n  local paren_group_nesting_level_diff_start10 = 0\n  local paren_group_nesting_level_diff_end10\
    \ = 0\n  local paren_group_nesting_level_diff_start11 = 0\n  local paren_group_nesting_level_diff_end11\
    \ = 0\n  local paren_group_nesting_level_diff_start12 = 0\n  local paren_group_nesting_level_diff_end12\
    \ = 0\n  local paren_group_nesting_level_diff_start13 = 0\n  local paren_group_nesting_level_diff_end13\
    \ = 0\n  local paren_group_nesting_level_diff_start14 = 0\n  local paren_group_nesting_level_diff_end14\
    \ = 0\n  local paren_group_nesting_level_diff_start15 = 0\n  \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd9l7rpzi.lua:62: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_stack_count = {}\n  local paren_level_count = {}\n  local\
    \ paren_stack_string = {}\n  local paren_level_string = {}\n  local paren_stack_string_count\
    \ = {}\n  local paren_level_string_count = {}\n  local paren_stack_string_counts\
    \ = {}\n  local paren_level_string_counts = {}\n  local paren_stack_string_counts_size\
    \ = {}\n  local paren_level_string_counts_size = {}\n  local paren_stack_string_counts_sizes\
    \ = {}\n  local paren_level_string_counts_sizes = {}\n  local paren_stack_string_counts_sizes_size\
    \ = {}\n  local paren_level_string_counts_sizes_size = {}\n  local paren_stack_string_counts_sizes_sizes\
    \ = {}\n  local paren_level_string_counts_sizes_sizes = {}\n  local paren_stack_string_counts_sizes_sizes_size\
    \ = {}\n  local paren_level_string_counts_sizes_sizes_size = {}\n  local paren_stack_string_counts_sizes_sizes_sizes\
    \ = {}\n  local paren_level_string_counts_sizes_sizes_sizes = {}\n  local paren_stack_string_counts_sizes_sizes_sizes_size\
    \ = {}\n  local paren_level_string_counts_sizes_sizes_sizes_size = {}\n  local\
    \ paren_stack_string_counts_sizes_sizes_sizes_sizes = {}\n  local paren_level_string_counts_sizes_sizes_sizes_sizes\
    \ = {}\n  local paren_stack_string_counts_sizes_sizes_sizes_sizes_size = {}\n\
    \  local paren_level_string_counts_sizes_sizes_sizes_sizes_size = {}\n  local\
    \ paren_stack_string_counts_sizes_sizes_sizes_sizes_sizes = {}\n  local paren_level_string_counts_sizes_sizes_sizes_sizes_sizes\
    \ = {}\n  local paren_stack_string_counts_sizes_sizes_sizes_sizes_sizes_size =\
    \ {}\n  local paren_level_string_counts_sizes_sizes_sizes_sizes_sizes_size = {}\n\
    \  local paren_stack_string_counts_sizes_sizes_sizes_sizes_sizes_sizes = {}\n\
    \  local paren_level_string_counts_sizes_sizes_sizes_sizes_sizes_sizes = {}\n\
    \  local paren_stack_string_counts_sizes_sizes_sizes_sizes_sizes_sizes_size =\
    \ {}\n  local paren_level_string_counts_sizes_sizes_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpoj2vxxa9.lua:54: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_max_level =\
    \ 0\n  local paren_max_level_stack = {}\n  local paren_max_level_stack_index =\
    \ 0\n  local paren_max_level_stack_index2 = 0\n  local paren_max_level_stack_index3\
    \ = 0\n  local paren_max_level_stack_index4 = 0\n  local paren_max_level_stack_index5\
    \ = 0\n  local paren_max_level_stack_index6 = 0\n  local paren_max_level_stack_index7\
    \ = 0\n  local paren_max_level_stack_index8 = 0\n  local paren_max_level_stack_index9\
    \ = 0\n  local paren_max_level_stack_index10 = 0\n  local paren_max_level_stack_index11\
    \ = 0\n  local paren_max_level_stack_index12 = 0\n  local paren_max_level_stack_index13\
    \ = 0\n  local paren_max_level_stack_index14 = 0\n  local paren_max_level_stack_index15\
    \ = 0\n  local paren_max_level_stack_index16 = 0\n  local paren_max_level_stack_index17\
    \ = 0\n  local paren_max_level_stack_index18 = 0\n  local paren_max_level_stack_index19\
    \ = 0\n  local paren_max_level_stack_index20 = 0\n  local paren_max_level_stack_index21\
    \ = 0\n  local paren_max_level_stack_index22 = 0\n  local paren_max_level_stack_index23\
    \ = 0\n  local paren_max_level_stack_index24 = 0\n  local paren_max_level_stack_index25\
    \ = 0\n  local paren_max_level_stack_index26 = 0\n  local paren_max_level_stack_index27\
    \ = 0\n  local paren_max_level_stack_index28 = 0\n  local paren_max_level_stack_index29\
    \ = 0\n  local paren_max_level_stack_index30 = 0\n  local paren_max_level_stack_index31\
    \ = 0\n  local paren_max_level_stack_index32 = 0\n  local paren_max_level_stack_index33\
    \ = 0\n  local paren_max_level_stack_index34 = 0\n  local paren_max_level_stack_index35\
    \ = 0\n  local paren_max_level_stack_index36 = 0\n  local paren_max_level_stack_index37\
    \ = 0\n  local paren_max_level_stack_index38 = 0\n  local paren_max_level_stack_index39\
    \ = 0\n  local paren_max_level_stack_index40 = 0\n  local paren_max_level_stack_index41\
    \ = 0\n  local paren_max_level_stack_index42 = 0\n  local paren_max_level_stack_index43\
    \ = 0\n  local paren_max_level_stack_index44\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnbwmpps3.lua:64: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_string = ''\n  local paren_levels_index = 0\n  local\
    \ paren_levels_index2 = 0\n  local paren_levels_index3 = 0\n  local paren_levels_index4\
    \ = 0\n  local paren_levels_index5 = 0\n  local paren_levels_index6 = 0\n  local\
    \ paren_levels_index7 = 0\n  local paren_levels_index8 = 0\n  local paren_levels_index9\
    \ = 0\n  local paren_levels_index10 = 0\n  local paren_levels_index11 = 0\n  local\
    \ paren_levels_index12 = 0\n  local paren_levels_index13 = 0\n  local paren_levels_index14\
    \ = 0\n  local paren_levels_index15 = 0\n  local paren_levels_index16 = 0\n  local\
    \ paren_levels_index17 = 0\n  local paren_levels_index18 = 0\n  local paren_levels_index19\
    \ = 0\n  local paren_levels_index20 = 0\n  local paren_levels_index21 = 0\n  local\
    \ paren_levels_index22 = 0\n  local paren_levels_index23 = 0\n  local paren_levels_index24\
    \ = 0\n  local paren_levels_index25 = 0\n  local paren_levels_index26 = 0\n  local\
    \ paren_levels_index27 = 0\n  local paren_levels_index28 = 0\n  local paren_levels_index29\
    \ = 0\n  local paren_levels_index30 = 0\n  local paren_levels_index31 = 0\n  local\
    \ paren_levels_index32 = 0\n  local paren_levels_index33 = 0\n  local paren_levels_index34\
    \ = 0\n  local paren_levels_index35 = 0\n  local paren_levels_index36 = 0\n  local\
    \ paren_levels_index37 = 0\n  local paren_levels_index38 = 0\n  local paren_levels_index39\
    \ = 0\n  local paren_levels_index40 = 0\n  local paren_levels_index41 = 0\n  local\
    \ paren_levels_index42 = 0\n  local paren_levels_index43 = 0\n  local paren_levels_index44\
    \ = 0\n  local paren_levels_index45 = 0\n  local paren_levels_index46 = 0\n  local\
    \ paren_levels_index47 = 0\n  local paren_levels_index48 = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3yzm1y2i.lua:69: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_stack_size = #paren_string\n  local paren_level_size = 0\n\
    \  local paren_stack_index = 1\n  local paren_level_index = 1\n  local paren_stack_pointer\
    \ = 1\n  local paren_level_pointer = 1\n  local paren_stack_pointer_pointer =\
    \ 1\n  local paren_level_pointer_pointer = 1\n  local paren_stack_pointer_pointer_pointer\
    \ = 1\n  local paren_level_pointer_pointer_pointer = 1\n  local paren_stack_pointer_pointer_pointer_pointer\
    \ = 1\n  local paren_level_pointer_pointer_pointer_pointer = 1\n  local paren_stack_pointer_pointer_pointer_pointer_pointer\
    \ = 1\n  local paren_level_pointer_pointer_pointer_pointer_pointer = 1\n  local\
    \ paren_stack_pointer_pointer_pointer_pointer_pointer_pointer = 1\n  local paren_level_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 1\n  local paren_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 1\n  local paren_level_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 1\n  local paren_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 1\n  local paren_level_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 1\n  local paren_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 1\n  local paren_level_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 1\n  local paren_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 1\n  local paren_level_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 1\n  local paren_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 1\n  local paren_level_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 1\n  local paren_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 1\n  local paren_level_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpofy8tbzm.lua:48: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n\
    \  local paren_levels_stack_index2 = 0\n  local paren_levels_stack_index3 = 0\n\
    \  local paren_levels_stack_index4 = 0\n  local paren_levels_stack_index5 = 0\n\
    \  local paren_levels_stack_index6 = 0\n  local paren_levels_stack_index7 = 0\n\
    \  local paren_levels_stack_index8 = 0\n  local paren_levels_stack_index9 = 0\n\
    \  local paren_levels_stack_index10 = 0\n  local paren_levels_stack_index11 =\
    \ 0\n  local paren_levels_stack_index12 = 0\n  local paren_levels_stack_index13\
    \ = 0\n  local paren_levels_stack_index14 = 0\n  local paren_levels_stack_index15\
    \ = 0\n  local paren_levels_stack_index16 = 0\n  local paren_levels_stack_index17\
    \ = 0\n  local paren_levels_stack_index18 = 0\n  local paren_levels_stack_index19\
    \ = 0\n  local paren_levels_stack_index20 = 0\n  local paren_levels_stack_index21\
    \ = 0\n  local paren_levels_stack_index22 = 0\n  local paren_levels_stack_index23\
    \ = 0\n  local paren_levels_stack_index24 = 0\n  local paren_levels_stack_index25\
    \ = 0\n  local paren_levels_stack_index26 = 0\n  local paren_levels_stack_index27\
    \ = 0\n  local paren_levels_stack_index28 = 0\n  local paren_levels_stack_index29\
    \ = 0\n  local paren_levels_stack_index30 = 0\n  local paren_levels_stack_index31\
    \ = 0\n  local paren_levels_stack_index32 = 0\n  local paren_levels_stack_index33\
    \ = 0\n  local paren_levels_stack_index34 = 0\n  local paren_levels_stack_index35\
    \ = 0\n  local paren_levels_stack_index36 = 0\n  local paren_levels_stack_index37\
    \ = 0\n  local paren_levels_stack_index38 = 0\n  local paren_levels_stack_index39\
    \ = 0\n  local paren_levels_stack_index40 = 0\n  local paren_levels_stack_index41\
    \ = 0\n  local paren_levels_stack_index42 = 0\n  local paren_levels_stack_index43\
    \ = 0\n  local paren_levels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzfi1y745.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_max_level =\
    \ 0\n  local paren_max_level_stack = {}\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a)(%a)]+') do\n    local paren_level = paren_level + 1\n    local paren_max_level\
    \ = paren_max_level + 1\n    paren_stack[paren_level] = paren\n    paren_max_level_stack[paren_max_level]\
    \ = paren_level\n  end\n  local paren_max_level_stack_size = #paren_max_level_stack\n\
    \  local paren_max_level_stack_index = 1\n  local paren_max_level_stack_value\
    \ = paren_max_level_stack[1]\n  local paren_max_level_stack_value_level = 1\n\
    \  while paren_max_level_stack_index < paren_max_level_stack_size do\n    local\
    \ paren_max_level_stack_value = paren_max_level_stack_value\n    local paren_max_level_stack_value_level\
    \ = paren_max_level_stack_value_level + 1\n    local paren_max_level_stack_index_new\
    \ = paren_max_level_stack_index + 1\n    local paren_max_level_stack_value_new\
    \ = paren_max_level_stack[paren_max_level_stack_index_new]\n    while paren_max_level_stack_value_level\
    \ > paren_max_level_stack_value_new do\n      paren_max_level_stack_value = paren_max_level_stack_value\n\
    \      paren_max_level_stack_value_level = paren_max_level_stack_value_level -\
    \ 1\n      paren_max_level_stack_index_new = paren_max_level_stack_index_new -\
    \ 1\n      paren_max_level_stack_value_new = paren_max_level_stack[paren_max_level_stack_index_new]\n\
    \    end\n    paren_max_level_stack[paren_max_level_stack_index] = paren_max_level_stack_value\n\
    \    paren_max_level_stack_index = paren_max_level_stack_index_new\n  end\n  local\
    \ paren_max_level_stack_value = paren_max_level_stack[1]\n  local paren_max_level_stack_value_level\
    \ = 1\n  while paren_max_level_stack_value_level > 1 do\n    local paren_max_level_stack_value\
    \ = paren_max_level_stack_value\n    local paren_max_level_stack_value_level =\
    \ paren_max_level_stack_value_level - 1\n  end\n  local paren_max_level_stack_value\
    \ = paren_max_level_stack[1]\n  local paren_max_level_stack_value_level = 1\n\
    \  while paren_max_level_stack_value_level > 1 do\n    local paren_max_level_stack_value\
    \ = paren_max_level_stack_value\n    local paren_max_level_stack_value_level =\
    \ paren\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppoz8dsfd.lua:55: ''end'' expected (to close ''while'' at line
    43) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 0\n  local paren_group_size = 0\n  local paren_group_max\
    \ = 0\n  local paren_group_max_index = 0\n  local paren_group_max_size = 0\n \
    \ local paren_group_max_max_size = 0\n  local paren_group_max_max_index = 0\n\
    \  local paren_group_max_max_index = 0\n  local paren_group_max_max_index = 0\n\
    \  local paren_group_max_max_index = 0\n  local paren_group_max_max_index = 0\n\
    \  local paren_group_max_max_index = 0\n  local paren_group_max_max_index = 0\n\
    \  local paren_group_max_max_index = 0\n  local paren_group_max_max_index = 0\n\
    \  local paren_group_max_max_index = 0\n  local paren_group_max_max_index = 0\n\
    \  local paren_group_max_max_index = 0\n  local paren_group_max_max_index = 0\n\
    \  local paren_group_max_max_index = 0\n  local paren_group_max_max_index = 0\n\
    \  local paren_group_max_max_index = 0\n  local paren_group_max_max_index = 0\n\
    \  local paren_group_max_max_index = 0\n  local paren_group_max_max_index = 0\n\
    \  local paren_group_max_max_index = 0\n  local paren_group_max_max_index = 0\n\
    \  local paren_group_max_max_index = 0\n  local paren_group_max_max_index = 0\n\
    \  local paren_group_max_max_index = 0\n  local paren_group_max_max_index = 0\n\
    \  local paren_group_max_max_index = 0\n  local paren_group_max_max_index = 0\n\
    \  local paren_group_max_max_index = 0\n  local paren_group_max_max_index = 0\n\
    \  local paren_group_max_max_index = 0\n  local paren_group_max_max_index = 0\n\
    \  local paren_group_max_max_index = 0\n  local paren_group_max_max_index = 0\n\
    \  local paren_group_max_max_index = 0\n  local paren_group_max_max_index = 0\n\
    \  local paren_group_max_max_index = 0\n  local paren_group_max_max_index = 0\n\
    \  local paren_group_max_max_index = 0\n  local paren_group_max_max_index = 0\n\
    \  local paren_group_max_max_index = 0\n  local paren_group_max_max_index = 0\n\
    \  local paren_group_max_max_index = 0\n  local paren_group_max_max_index = 0\n\
    \  local paren_group_max_max_index = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg4y2bd5e.lua:69: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n\
    \  local paren_levels_stack_index2 = 0\n  local paren_levels_stack_index3 = 0\n\
    \  local paren_levels_stack_index4 = 0\n  local paren_levels_stack_index5 = 0\n\
    \  local paren_levels_stack_index6 = 0\n  local paren_levels_stack_index7 = 0\n\
    \  local paren_levels_stack_index8 = 0\n  local paren_levels_stack_index9 = 0\n\
    \  local paren_levels_stack_index10 = 0\n  local paren_levels_stack_index11 =\
    \ 0\n  local paren_levels_stack_index12 = 0\n  local paren_levels_stack_index13\
    \ = 0\n  local paren_levels_stack_index14 = 0\n  local paren_levels_stack_index15\
    \ = 0\n  local paren_levels_stack_index16 = 0\n  local paren_levels_stack_index17\
    \ = 0\n  local paren_levels_stack_index18 = 0\n  local paren_levels_stack_index19\
    \ = 0\n  local paren_levels_stack_index20 = 0\n  local paren_levels_stack_index21\
    \ = 0\n  local paren_levels_stack_index22 = 0\n  local paren_levels_stack_index23\
    \ = 0\n  local paren_levels_stack_index24 = 0\n  local paren_levels_stack_index25\
    \ = 0\n  local paren_levels_stack_index26 = 0\n  local paren_levels_stack_index27\
    \ = 0\n  local paren_levels_stack_index28 = 0\n  local paren_levels_stack_index29\
    \ = 0\n  local paren_levels_stack_index30 = 0\n  local paren_levels_stack_index31\
    \ = 0\n  local paren_levels_stack_index32 = 0\n  local paren_levels_stack_index33\
    \ = 0\n  local paren_levels_stack_index34 = 0\n  local paren_levels_stack_index35\
    \ = 0\n  local paren_levels_stack_index36 = 0\n  local paren_levels_stack_index37\
    \ = 0\n  local paren_levels_stack_index38 = 0\n  local paren_levels_stack_index39\
    \ = 0\n  local paren_levels_stack_index40 = 0\n  local paren_levels_stack_index41\
    \ = 0\n  local paren_levels_stack_index42 = 0\n  local paren_levels_stack_index43\
    \ = 0\n  local paren_levels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzfi1y745.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group = {}\n  local paren_group_level\
    \ = 0\n  local paren_group_start = 0\n  local paren_group_end = 0\n  local paren_group_length\
    \ = 0\n  local paren_group_char = ''\n  local paren_group_char_index = 0\n  local\
    \ paren_group_char_length = 0\n  local paren_group_char_length_index = 0\n  local\
    \ paren_group_char_length_count = 0\n  local paren_group_char_count = 0\n  local\
    \ paren_group_char_count_index = 0\n  local paren_group_char_count = 0\n  local\
    \ paren_group_char = ''\n  local paren_group_char_length = 0\n  local paren_group_char_length_index\
    \ = 0\n  local paren_group_char_length_count = 0\n  local paren_group_char_count\
    \ = 0\n  local paren_group_char_count_index = 0\n  local paren_group_char_count\
    \ = 0\n  local paren_group_char = ''\n  local paren_group_char_length = 0\n  local\
    \ paren_group_char_length_index = 0\n  local paren_group_char_length_count = 0\n\
    \  local paren_group_char_count = 0\n  local paren_group_char_count_index = 0\n\
    \  local paren_group_char_count = 0\n  local paren_group_char_count_index = 0\n\
    \  local paren_group_char_count = 0\n  local paren_group_char_count_index = 0\n\
    \  local paren_group_char_count = 0\n  local paren_group_char_count_index = 0\n\
    \  local paren_group_char_count = 0\n  local paren_group_char_count_index = 0\n\
    \  local paren_group_char_count = 0\n  local paren_group_char_count_index = 0\n\
    \  local paren_group_char_count = 0\n  local paren_group_char_count_index = 0\n\
    \  local paren_group_char_count = 0\n  local paren_group_char_count_index = 0\n\
    \  local paren_group_char_count = 0\n  local paren_group_char_count_index = 0\n\
    \  local paren_group_char_count = 0\n  local paren_group_char_count_index = 0\n\
    \  local paren_group_char_count = 0\n  local paren_group_char_count_index = 0\n\
    \  local paren_group_char_count = 0\n  local paren_group_char_count_index = 0\n\
    \  local paren_group_char_count = 0\n  local paren_group_char_count_index = 0\n\
    \  local paren_group_char_count = 0\n  local paren_group_char_count_index = 0\n\
    \  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvpgw2q67.lua:73: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  for paren in string.gmatch(paren_string, '%[()%]') do\n    local paren_level\
    \ = paren_stack[#paren_stack]\n    if paren_level == nil then\n      paren_level\
    \ = level\n    end\n    paren_stack[#paren_stack] = level\n    level = level +\
    \ 1\n    if paren == '(' then\n      paren_levels[level] = paren_level\n    elseif\
    \ paren == ')' then\n      level = paren_level\n    end\n  end\n  local max_level_with_paren\
    \ = #paren_levels\n  if max_level_with_paren > max_level then\n    max_level =\
    \ max_level_with_paren\n  end\n  return max_level\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw4uvbu96.lua:34:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpw4uvbu96.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group_level = 0\n  local paren_group_start\
    \ = 0\n  local paren_group_end = 0\n  local paren_group_length = 0\n  local paren_group_char\n\
    \  local paren_group_char_index\n  local paren_group_char_length\n  local paren_group_char_start\n\
    \  local paren_group_char_end\n  local paren_group_char_value\n  local paren_group_char_value_index\n\
    \  local paren_group_char_value_index\n  local paren_group_char_value\n  local\
    \ paren_group_char_value_index\n  local paren_group_char_value\n  local paren_group_char_value_index\n\
    \  local paren_group_char_value\n  local paren_group_char_value_index\n  local\
    \ paren_group_char_value\n  local paren_group_char_value_index\n  local paren_group_char_value\n\
    \  local paren_group_char_value_index\n  local paren_group_char_value\n  local\
    \ paren_group_char_value_index\n  local paren_group_char_value\n  local paren_group_char_value_index\n\
    \  local paren_group_char_value\n  local paren_group_char_value_index\n  local\
    \ paren_group_char_value\n  local paren_group_char_value_index\n  local paren_group_char_value\n\
    \  local paren_group_char_value_index\n  local paren_group_char_value\n  local\
    \ paren_group_char_value_index\n  local paren_group_char_value\n  local paren_group_char_value_index\n\
    \  local paren_group_char_value\n  local paren_group_char_value_index\n  local\
    \ paren_group_char_value\n  local paren_group_char_value_index\n  local paren_group_char_value\n\
    \  local paren_group_char_value_index\n  local paren_group_char_value\n  local\
    \ paren_group_char_value_index\n  local paren_group_char_value\n  local paren_group_char_value_index\n\
    \  local paren_group_char_value\n  local paren_group_char_value_index\n  local\
    \ paren_group_char_value\n  local paren_group_char_value_index\n  local paren_group_char_value\n\
    \  local paren_group_char_value_index\n  local paren_group_char_value\n  local\
    \ paren_group_char_value_index\n  local paren_group_char_value\n  local paren_group_char_value_index\n\
    \  local paren_group_char_value\n  local paren_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq3l5co2e.lua:78: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_level_count = {}\n  local paren_level_stack = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_index = {}\n  local\
    \ paren_level_stack_index2 = {}\n  local paren_level_stack_index3 = {}\n  local\
    \ paren_level_stack_index4 = {}\n  local paren_level_stack_index5 = {}\n  local\
    \ paren_level_stack_index6 = {}\n  local paren_level_stack_index7 = {}\n  local\
    \ paren_level_stack_index8 = {}\n  local paren_level_stack_index9 = {}\n  local\
    \ paren_level_stack_index10 = {}\n  local paren_level_stack_index11 = {}\n  local\
    \ paren_level_stack_index12 = {}\n  local paren_level_stack_index13 = {}\n  local\
    \ paren_level_stack_index14 = {}\n  local paren_level_stack_index15 = {}\n  local\
    \ paren_level_stack_index16 = {}\n  local paren_level_stack_index17 = {}\n  local\
    \ paren_level_stack_index18 = {}\n  local paren_level_stack_index19 = {}\n  local\
    \ paren_level_stack_index20 = {}\n  local paren_level_stack_index21 = {}\n  local\
    \ paren_level_stack_index22 = {}\n  local paren_level_stack_index23 = {}\n  local\
    \ paren_level_stack_index24 = {}\n  local paren_level_stack_index25 = {}\n  local\
    \ paren_level_stack_index26 = {}\n  local paren_level_stack_index27 = {}\n  local\
    \ paren_level_stack_index28 = {}\n  local paren_level_stack_index29 = {}\n  local\
    \ paren_level_stack_index30 = {}\n  local paren_level_stack_index31 = {}\n  local\
    \ paren_level_stack_index32 = {}\n  local paren_level_stack_index33 = {}\n  local\
    \ paren_level_stack_index34 = {}\n  local paren_level_stack_index35 = {}\n  local\
    \ paren_level_stack_index36 = {}\n  local paren_level_stack_index37 = {}\n  local\
    \ paren_level_stack_index38 = {}\n  local paren_level_stack_index39 = {}\n  local\
    \ paren_level_stack_index40 = {}\n  local paren_level_stack_index41 = {}\n  local\
    \ paren_level_stack_index42 = {}\n  local paren_level_stack_index43 = {}\n  local\
    \ paren_level_stack_index44 = {}\n  local paren_level_stack_index45 = {}\n  local\
    \ paren_level_stack_index4\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphoafpgnc.lua:69: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_nesting = 0\n\
    \  local paren_groups = {}\n  local paren_group_levels = {}\n  local paren_group_nestings\
    \ = {}\n  local paren_group_starts = {}\n  local paren_group_ends = {}\n  local\
    \ paren_group_counts = {}\n  local paren_group_counts_max = 0\n  local paren_group_counts_max_index\
    \ = 0\n  local paren_group_counts_max_index2 = 0\n  local paren_group_counts_max_index3\
    \ = 0\n  local paren_group_counts_max_index4 = 0\n  local paren_group_counts_max_index5\
    \ = 0\n  local paren_group_counts_max_index6 = 0\n  local paren_group_counts_max_index7\
    \ = 0\n  local paren_group_counts_max_index8 = 0\n  local paren_group_counts_max_index9\
    \ = 0\n  local paren_group_counts_max_index10 = 0\n  local paren_group_counts_max_index11\
    \ = 0\n  local paren_group_counts_max_index12 = 0\n  local paren_group_counts_max_index13\
    \ = 0\n  local paren_group_counts_max_index14 = 0\n  local paren_group_counts_max_index15\
    \ = 0\n  local paren_group_counts_max_index16 = 0\n  local paren_group_counts_max_index17\
    \ = 0\n  local paren_group_counts_max_index18 = 0\n  local paren_group_counts_max_index19\
    \ = 0\n  local paren_group_counts_max_index20 = 0\n  local paren_group_counts_max_index21\
    \ = 0\n  local paren_group_counts_max_index22 = 0\n  local paren_group_counts_max_index23\
    \ = 0\n  local paren_group_counts_max_index24 = 0\n  local paren_group_counts_max_index25\
    \ = 0\n  local paren_group_counts_max_index26 = 0\n  local paren_group_counts_max_index27\
    \ = 0\n  local paren_group_counts_max_index28 = 0\n  local paren_group_counts_max_index29\
    \ = 0\n  local paren_group_counts_max_index30 = 0\n  local paren_group_counts_max_index31\
    \ = 0\n  local paren_group_counts_max_index32 = 0\n  local paren_group_counts_max_index33\
    \ = 0\n  local paren_group_counts_max_index34 = 0\n  local paren_group_counts_max_index35\
    \ = 0\n  local paren_group_counts_max_index36 = 0\n  \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyq50qjle.lua:63: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n\
    \  local paren_level = 0\n  local paren_groups = {}\n  local paren_group = 0\n\
    \  local paren_group_size = 0\n  local paren_group_level = 0\n  local paren_group_levels\
    \ = {}\n  local paren_group_level = 0\n  local paren_group_level_size = 0\n  local\
    \ paren_group_level_num = 0\n  local paren_group_level_nums = {}\n  local paren_group_level_num\
    \ = 0\n  local paren_group_level_num_size = 0\n  local paren_group_level_num_num\
    \ = 0\n  local paren_group_level_num_nums = {}\n  local paren_group_level_num_num\
    \ = 0\n  local paren_group_level_num_num_size = 0\n  local paren_group_level_num_num_num\
    \ = 0\n  local paren_group_level_num_num_nums = {}\n  local paren_group_level_num_num_num\
    \ = 0\n  local paren_group_level_num_num_num_size = 0\n  local paren_group_level_num_num_num_num\
    \ = 0\n  local paren_group_level_num_num_num_nums = {}\n  local paren_group_level_num_num_num_num\
    \ = 0\n  local paren_group_level_num_num_num_num_size = 0\n  local paren_group_level_num_num_num_num_num\
    \ = 0\n  local paren_group_level_num_num_num_num_nums = {}\n  local paren_group_level_num_num_num_num_num\
    \ = 0\n  local paren_group_level_num_num_num_num_nums = {}\n  local paren_group_level_num_num_num_num_num\
    \ = 0\n  local paren_group_level_num_num_num_num_nums = {}\n  local paren_group_level_num_num_num_num_num\
    \ = 0\n  local paren_group_level_num_num_num_num_nums = {}\n  local paren_group_level_num_num_num_num_num\
    \ = 0\n  local paren_group_level_num_num_num_num_nums = {}\n  local paren_group_level_num_num_num_num_num\
    \ = 0\n  local paren_group_level_num_num_num_num_nums = {}\n  local paren_group_level_num_num_num_num_num\
    \ = 0\n  local paren_group_level_num_num_num_num_nums = {}\n  local paren_group_level_num_num_num_num_num\
    \ = 0\n  local paren_group_level_num_num_num_num_nums = {}\n  local paren_group_level_num_num_num_num_num\
    \ = 0\n  local paren_group_level_num_num_num_num_nums = {}\n  local paren_group_level_num_num_num_num_num\
    \ = 0\n  local paren_group_level_num_num_num_num_num\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp0ram395.lua:63: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local paren_stack = {}\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a)]+') do\n    local level = #paren_stack\n    if level > max_level then\n\
    \      max_level = level\n    end\n    table.insert(paren_stack, paren)\n  end\n\
    \  return max_level\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi6zgclpg.lua:22:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpi6zgclpg.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_groups = {}\n  local paren_group_index = 0\n  local paren_group_count\
    \ = 0\n  local paren_group_level = 0\n  local paren_group_paren_level = 0\n  local\
    \ paren_group_paren_group_index = 0\n  local paren_group_paren_group_count = 0\n\
    \  local paren_group_paren_group_level = 0\n  local paren_group_paren_group_paren_level\
    \ = 0\n  local paren_group_paren_group_paren_group_index = 0\n  local paren_group_paren_group_paren_group_count\
    \ = 0\n  local paren_group_paren_group_paren_group_level = 0\n  local paren_group_paren_group_paren_group_paren_level\
    \ = 0\n  local paren_group_paren_group_paren_group_paren_group_index = 0\n  local\
    \ paren_group_paren_group_paren_group_paren_group_count = 0\n  local paren_group_paren_group_paren_group_paren_group_level\
    \ = 0\n  local paren_group_paren_group_paren_group_paren_group_paren_group_index\
    \ = 0\n  local paren_group_paren_group_paren_group_paren_group_paren_group_count\
    \ = 0\n  local paren_group_paren_group_paren_group_paren_group_paren_group_level\
    \ = 0\n  local paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_index\
    \ = 0\n  local paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_count\
    \ = 0\n  local paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_level\
    \ = 0\n  local paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_index\
    \ = 0\n  local paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_count\
    \ = 0\n  local paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_level\
    \ = 0\n  local paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_index\
    \ = 0\n  local paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_count\
    \ = 0\n  local paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_paren_group_level\
    \ = 0\n  local paren_group_paren_group_paren_group_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdedeg1bl.lua:48: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local paren_count = 0\n  local paren_level = 0\n  local\
    \ paren_stack = { }\n  local paren_stack_len = #paren_stack\n  local paren_stack_pos\
    \ = 0\n  local paren_stack_reversed = false\n  local paren_stack_last_pos = 0\n\
    \  local paren_stack_last_reversed = false\n  local paren_stack_last_len = #paren_stack\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpye8nq7uz.lua:26: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group_count = 1\n  local paren_group_max_level\
    \ = 0\n  local paren_group_max_level_stack = {}\n  local paren_group_max_level_stack_index\
    \ = 1\n  local paren_group_max_level_stack_count = 1\n  local paren_group_max_level_stack_index2\
    \ = 0\n  local paren_group_max_level_stack_count2 = 0\n  local paren_group_max_level_stack_index3\
    \ = 0\n  local paren_group_max_level_stack_count3 = 0\n  local paren_group_max_level_stack_index4\
    \ = 0\n  local paren_group_max_level_stack_count4 = 0\n  local paren_group_max_level_stack_index5\
    \ = 0\n  local paren_group_max_level_stack_count5 = 0\n  local paren_group_max_level_stack_index6\
    \ = 0\n  local paren_group_max_level_stack_count6 = 0\n  local paren_group_max_level_stack_index7\
    \ = 0\n  local paren_group_max_level_stack_count7 = 0\n  local paren_group_max_level_stack_index8\
    \ = 0\n  local paren_group_max_level_stack_count8 = 0\n  local paren_group_max_level_stack_index9\
    \ = 0\n  local paren_group_max_level_stack_count9 = 0\n  local paren_group_max_level_stack_index10\
    \ = 0\n  local paren_group_max_level_stack_count10 = 0\n  local paren_group_max_level_stack_index11\
    \ = 0\n  local paren_group_max_level_stack_count11 = 0\n  local paren_group_max_level_stack_index12\
    \ = 0\n  local paren_group_max_level_stack_count12 = 0\n  local paren_group_max_level_stack_index13\
    \ = 0\n  local paren_group_max_level_stack_count13 = 0\n  local paren_group_max_level_stack_index14\
    \ = 0\n  local paren_group_max_level_stack_count14 = 0\n  local paren_group_max_level_stack_index15\
    \ = 0\n  local paren_group_max_level_stack_count15 = 0\n  local paren_group_max_level_stack_index16\
    \ = 0\n  local paren_group_max_level_stack_count16 = 0\n  local paren_group_max_level_stack_index17\
    \ = 0\n  local paren_group_max_level_stack_count17 = 0\n  local paren_group_max_level_stack_index18\
    \ = 0\n  local paren_group_max_level_stack_count18 = 0\n  local paren_group_max_level_stack_index19\
    \ = 0\n  local paren_group_max_level_stack_count19 = 0\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8kw_3rwk.lua:62: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local max_level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_groups = {}\n  local paren_group_index = {}\n  local paren_group_levels\
    \ = {}\n  local paren_group_count = {}\n  local paren_group_level = 0\n  local\
    \ paren_group_level_count = 0\n  local paren_group_level_max = 0\n  local paren_group_level_max_index\
    \ = 0\n  local paren_group_level_max_count = 0\n  local paren_group_level_max_index\
    \ = 0\n  local paren_group_level_max_count = 1\n  local paren_group_level_max_index\
    \ = 1\n  local paren_group_level_max_count = 2\n  local paren_group_level_max_index\
    \ = 2\n  local paren_group_level_max_count = 3\n  local paren_group_level_max_index\
    \ = 3\n  local paren_group_level_max_count = 4\n  local paren_group_level_max_index\
    \ = 4\n  local paren_group_level_max_count = 5\n  local paren_group_level_max_index\
    \ = 5\n  local paren_group_level_max_count = 6\n  local paren_group_level_max_index\
    \ = 6\n  local paren_group_level_max_count = 7\n  local paren_group_level_max_index\
    \ = 7\n  local paren_group_level_max_count = 8\n  local paren_group_level_max_index\
    \ = 8\n  local paren_group_level_max_count = 9\n  local paren_group_level_max_index\
    \ = 9\n  local paren_group_level_max_count = 10\n  local paren_group_level_max_index\
    \ = 10\n  local paren_group_level_max_count = 11\n  local paren_group_level_max_index\
    \ = 11\n  local paren_group_level_max_count = 12\n  local paren_group_level_max_index\
    \ = 12\n  local paren_group_level_max_count = 13\n  local paren_group_level_max_index\
    \ = 13\n  local paren_group_level_max_count = 14\n  local paren_group_level_max_index\
    \ = 14\n  local paren_group_level_max_count = 15\n  local paren_group_level_max_index\
    \ = 15\n  local paren_group_level_max_count = 16\n  local paren_group_level_max_index\
    \ = 16\n  local paren_group_level_max_count = 17\n  local paren_group_level_max_index\
    \ = 17\n  local paren_group_level_max_count = 18\n  local paren_group_level_max_index\
    \ = 18\n  local paren_group_level_max_count = 19\n  local paren_group_level_max_index\
    \ = 19\n  local paren_group_level_max_count = 20\n  local paren_group_level_max_index\
    \ = 20\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8kxagqr5.lua:71: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  for paren\
    \ in string.gmatch(paren_string, '%[(%a)]') do\n    local paren_level = level\n\
    \    level = level + 1\n    paren_stack[#paren_stack + 1] = paren\n    if paren\
    \ == '(' and level > max_level then\n      max_level = level\n    end\n    if\
    \ paren == ')' and level == paren_level then\n      level = level - 1\n    end\n\
    \  end\n  local result = {}\n  for i = 1, #paren_stack do\n    local paren = paren_stack[i]\n\
    \    if paren == '(' and level > max_level then\n      max_level = level\n   \
    \ end\n    if paren == ')' and level == paren_level then\n      level = level\
    \ - 1\n    end\n    result[#result + 1] = max_level\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1d2ek1l1.lua:38:\
    \ expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmp1d2ek1l1.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group_count = 1\n  local paren_group_max_level\
    \ = 0\n  local paren_group_max_level_stack = {}\n  local paren_group_max_level_stack_index\
    \ = 1\n  local paren_group_max_level_stack_count = 1\n  local paren_group_max_level_stack_index\
    \ = 1\n  local paren_group_max_level_stack_count = 1\n  local paren_group_max_level_stack_index\
    \ = 1\n  local paren_group_max_level_stack_count = 1\n  local paren_group_max_level_stack_index\
    \ = 1\n  local paren_group_max_level_stack_count = 1\n  local paren_group_max_level_stack_index\
    \ = 1\n  local paren_group_max_level_stack_count = 1\n  local paren_group_max_level_stack_index\
    \ = 1\n  local paren_group_max_level_stack_count = 1\n  local paren_group_max_level_stack_index\
    \ = 1\n  local paren_group_max_level_stack_count = 1\n  local paren_group_max_level_stack_index\
    \ = 1\n  local paren_group_max_level_stack_count = 1\n  local paren_group_max_level_stack_index\
    \ = 1\n  local paren_group_max_level_stack_count = 1\n  local paren_group_max_level_stack_index\
    \ = 1\n  local paren_group_max_level_stack_count = 1\n  local paren_group_max_level_stack_index\
    \ = 1\n  local paren_group_max_level_stack_count = 1\n  local paren_group_max_level_stack_index\
    \ = 1\n  local paren_group_max_level_stack_count = 1\n  local paren_group_max_level_stack_index\
    \ = 1\n  local paren_group_max_level_stack_count = 1\n  local paren_group_max_level_stack_index\
    \ = 1\n  local paren_group_max_level_stack_count = 1\n  local paren_group_max_level_stack_index\
    \ = 1\n  local paren_group_max_level_stack_count = 1\n  local paren_group_max_level_stack_index\
    \ = 1\n  local paren_group_max_level_stack_count = 1\n  local paren_group_max_level_stack_index\
    \ = 1\n  local paren_group_max_level_stack_count = 1\n  local paren_group_max_level_stack_index\
    \ = 1\n  local paren_group_max_level_stack_count = 1\n  local paren_group_max_level_stack_index\
    \ = 1\n  local paren_group_max_level_stack_count = 1\n  local paren_group_max_level_stack_index\
    \ = 1\n  local paren_group_max_level_stack_count = 1\n  local paren_group_max_level_stack_index\
    \ = 1\n  local paren_group_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjd0n3yyl.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_stack_size = #paren_string\n  local paren_level_size = #paren_level\n\
    \  local paren_stack_index = 1\n  local paren_level_index = 1\n  local paren_stack_top\
    \ = paren_stack_index\n  local paren_level_top = paren_level_index\n  local paren_stack_string\
    \ = paren_string\n  local paren_level_string = paren_string\n  local paren_stack_top\
    \ = paren_stack_index\n  local paren_level_top = paren_level_index\n  local paren_stack_string\
    \ = paren_string\n  local paren_level_string = paren_string\n  local paren_stack_top\
    \ = paren_stack_index\n  local paren_level_top = paren_level_index\n  local paren_stack_string\
    \ = paren_string\n  local paren_level_string = paren_string\n  local paren_stack_top\
    \ = paren_stack_index\n  local paren_level_top = paren_level_index\n  local paren_stack_string\
    \ = paren_string\n  local paren_level_string = paren_string\n  local paren_stack_top\
    \ = paren_stack_index\n  local paren_level_top = paren_level_index\n  local paren_stack_string\
    \ = paren_string\n  local paren_level_string = paren_string\n  local paren_stack_top\
    \ = paren_stack_index\n  local paren_level_top = paren_level_index\n  local paren_stack_string\
    \ = paren_string\n  local paren_level_string = paren_string\n  local paren_stack_top\
    \ = paren_stack_index\n  local paren_level_top = paren_level_index\n  local paren_stack_string\
    \ = paren_string\n  local paren_level_string = paren_string\n  local paren_stack_top\
    \ = paren_stack_index\n  local paren_level_top = paren_level_index\n  local paren_stack_string\
    \ = paren_string\n  local paren_level_string = paren_string\n  local paren_stack_top\
    \ = paren_stack_index\n  local paren_level_top = paren_level_index\n  local paren_stack_string\
    \ = paren_string\n  local paren_level_string = paren_string\n  local paren_stack_top\
    \ = paren_stack_index\n  local paren_level_top = paren_level_index\n  local paren_stack_string\
    \ = paren_string\n  local paren_level_string = paren_string\n  local paren_stack_top\
    \ = paren_stack_index\n  local paren_level_top = paren_level_index\n  local paren_stack_string\
    \ = paren\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8ovd9a5c.lua:67: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_stack_string\
    \ = ''\n  local paren_stack_strings = {}\n  local paren_stack_strings_len = 0\n\
    \  local paren_stack_strings_lens = {}\n  local paren_stack_strings_lens_len =\
    \ 0\n  local paren_stack_strings_lens_lens = {}\n  local paren_stack_strings_lens_lens_len\
    \ = 0\n  local paren_stack_strings_lens_lens_lens = {}\n  local paren_stack_strings_lens_lens_lens_len\
    \ = 0\n  local paren_stack_strings_lens_lens_lens_lens = {}\n  local paren_stack_strings_lens_lens_lens_lens_len\
    \ = 0\n  local paren_stack_strings_lens_lens_lens_lens_lens = {}\n  local paren_stack_strings_lens_lens_lens_lens_lens_len\
    \ = 0\n  local paren_stack_strings_lens_lens_lens_lens_lens_lens = {}\n  local\
    \ paren_stack_strings_lens_lens_lens_lens_lens_lens_len = 0\n  local paren_stack_strings_lens_lens_lens_lens_lens_lens_lens\
    \ = {}\n  local paren_stack_strings_lens_lens_lens_lens_lens_lens_lens_len = 0\n\
    \  local paren_stack_strings_lens_lens_lens_lens_lens_lens_lens_lens = {}\n  local\
    \ paren_stack_strings_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n  local\
    \ paren_stack_strings_lens_lens_lens_lens_lens_lens_lens_lens_lens = {}\n  local\
    \ paren_stack_strings_lens_lens_lens_lens_lens_lens_lens_lens_lens_len = 0\n \
    \ local paren_stack_strings_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = {}\n  local paren_stack_strings_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n  local paren_stack_strings_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = {}\n  local paren_stack_strings_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = 0\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8o35lp99.lua:45: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n\
    \  local paren_levels_stack_size = 0\n  local paren_levels_stack_index2 = 0\n\
    \  local paren_levels_stack_size2 = 0\n  local paren_levels_stack_index3 = 0\n\
    \  local paren_levels_stack_size3 = 0\n  local paren_levels_stack_index4 = 0\n\
    \  local paren_levels_stack_size4 = 0\n  local paren_levels_stack_index5 = 0\n\
    \  local paren_levels_stack_size5 = 0\n  local paren_levels_stack_index6 = 0\n\
    \  local paren_levels_stack_size6 = 0\n  local paren_levels_stack_index7 = 0\n\
    \  local paren_levels_stack_size7 = 0\n  local paren_levels_stack_index8 = 0\n\
    \  local paren_levels_stack_size8 = 0\n  local paren_levels_stack_index9 = 0\n\
    \  local paren_levels_stack_size9 = 0\n  local paren_levels_stack_index10 = 0\n\
    \  local paren_levels_stack_size10 = 0\n  local paren_levels_stack_index11 = 0\n\
    \  local paren_levels_stack_size11 = 0\n  local paren_levels_stack_index12 = 0\n\
    \  local paren_levels_stack_size12 = 0\n  local paren_levels_stack_index13 = 0\n\
    \  local paren_levels_stack_size13 = 0\n  local paren_levels_stack_index14 = 0\n\
    \  local paren_levels_stack_size14 = 0\n  local paren_levels_stack_index15 = 0\n\
    \  local paren_levels_stack_size15 = 0\n  local paren_levels_stack_index16 = 0\n\
    \  local paren_levels_stack_size16 = 0\n  local paren_levels_stack_index17 = 0\n\
    \  local paren_levels_stack_size17 = 0\n  local paren_levels_stack_index18 = 0\n\
    \  local paren_levels_stack_size18 = 0\n  local paren_levels_stack_index19 = 0\n\
    \  local paren_levels_stack_size19 = 0\n  local paren_levels_stack_index20 = 0\n\
    \  local paren_levels_stack_size20 = 0\n  local paren_levels_stack_index21 = 0\n\
    \  local paren_levels_stack_size21 = 0\n  local paren_levels_stack_index22 = 0\n\
    \  local paren_levels_stack\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkw1tblib.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local max_level = 0\n  local paren_stack = {}\n  local paren_stack_index\
    \ = {}\n  local paren_stack_max_index = {}\n  local paren_stack_max_index_level\
    \ = {}\n  local paren_stack_max_index_level_stack = {}\n  local paren_stack_max_index_level_stack_index\
    \ = {}\n  local paren_stack_max_index_level_stack_index2 = {}\n  local paren_stack_max_index_level_stack_index3\
    \ = {}\n  local paren_stack_max_index_level_stack_index4 = {}\n  local paren_stack_max_index_level_stack_index5\
    \ = {}\n  local paren_stack_max_index_level_stack_index6 = {}\n  local paren_stack_max_index_level_stack_index7\
    \ = {}\n  local paren_stack_max_index_level_stack_index8 = {}\n  local paren_stack_max_index_level_stack_index9\
    \ = {}\n  local paren_stack_max_index_level_stack_index10 = {}\n  local paren_stack_max_index_level_stack_index11\
    \ = {}\n  local paren_stack_max_index_level_stack_index12 = {}\n  local paren_stack_max_index_level_stack_index13\
    \ = {}\n  local paren_stack_max_index_level_stack_index14 = {}\n  local paren_stack_max_index_level_stack_index15\
    \ = {}\n  local paren_stack_max_index_level_stack_index16 = {}\n  local paren_stack_max_index_level_stack_index17\
    \ = {}\n  local paren_stack_max_index_level_stack_index18 = {}\n  local paren_stack_max_index_level_stack_index19\
    \ = {}\n  local paren_stack_max_index_level_stack_index20 = {}\n  local paren_stack_max_index_level_stack_index21\
    \ = {}\n  local paren_stack_max_index_level_stack_index22 = {}\n  local paren_stack_max_index_level_stack_index23\
    \ = {}\n  local paren_stack_max_index_level_stack_index24 = {}\n  local paren_stack_max_index_level_stack_index25\
    \ = {}\n  local paren_stack_max_index_level_stack_index26 = {}\n  local paren_stack_max_index_level_stack_index27\
    \ = {}\n  local paren_stack_max_index_level_stack_index28 = {}\n  local paren_stack_max_index_level_stack_index29\
    \ = {}\n  local paren_stack_max_index_level_stack_index30 = {}\n  local paren_stack_max_index_level_stack_index31\
    \ = {}\n  local paren_stack_max_index_level_stack_index32 = {}\n  local paren_stack_max_index_level_stack_index33\
    \ = {}\n  local paren_stack_max_index_level_stack_index34 = {}\n  local paren_stack_max_index_level_stack_index35\
    \ = {}\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmy3c27e6.lua:59: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { 0 }\n  local paren_count = 0\n  local paren_level = 0\n  local\
    \ paren_nesting = 0\n  local paren_nesting_level = 0\n  local paren_nesting_count\
    \ = 0\n  local paren_nesting_count_max = 0\n  local paren_nesting_count_max_index\
    \ = 0\n  local paren_nesting_count_max_index2 = 0\n  local paren_nesting_count_max_index3\
    \ = 0\n  local paren_nesting_count_max_index4 = 0\n  local paren_nesting_count_max_index5\
    \ = 0\n  local paren_nesting_count_max_index6 = 0\n  local paren_nesting_count_max_index7\
    \ = 0\n  local paren_nesting_count_max_index8 = 0\n  local paren_nesting_count_max_index9\
    \ = 0\n  local paren_nesting_count_max_index10 = 0\n  local paren_nesting_count_max_index11\
    \ = 0\n  local paren_nesting_count_max_index12 = 0\n  local paren_nesting_count_max_index13\
    \ = 0\n  local paren_nesting_count_max_index14 = 0\n  local paren_nesting_count_max_index15\
    \ = 0\n  local paren_nesting_count_max_index16 = 0\n  local paren_nesting_count_max_index17\
    \ = 0\n  local paren_nesting_count_max_index18 = 0\n  local paren_nesting_count_max_index19\
    \ = 0\n  local paren_nesting_count_max_index20 = 0\n  local paren_nesting_count_max_index21\
    \ = 0\n  local paren_nesting_count_max_index22 = 0\n  local paren_nesting_count_max_index23\
    \ = 0\n  local paren_nesting_count_max_index24 = 0\n  local paren_nesting_count_max_index25\
    \ = 0\n  local paren_nesting_count_max_index26 = 0\n  local paren_nesting_count_max_index27\
    \ = 0\n  local paren_nesting_count_max_index28 = 0\n  local paren_nesting_count_max_index29\
    \ = 0\n  local paren_nesting_count_max_index30 = 0\n  local paren_nesting_count_max_index31\
    \ = 0\n  local paren_nesting_count_max_index32 = 0\n  local paren_nesting_count_max_index33\
    \ = 0\n  local paren_nesting_count_max_index34 = 0\n  local paren_nesting_count_max_index35\
    \ = 0\n  local paren_nesting_count_max_index36 = 0\n  local paren_nesting_count_max_index37\
    \ = 0\n  local paren_nesting_count_max_index38 = 0\n  \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpytnujrlt.lua:62: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group_start = 0\n  local paren_group_end\
    \ = 0\n  local paren_group_length = 0\n  local paren_group_nesting = 0\n  local\
    \ paren_group_nesting_level = 0\n  local paren_group_nesting_levels = {}\n  local\
    \ paren_group_nesting_levels_index = 1\n  local paren_group_nesting_levels_start\
    \ = 0\n  local paren_group_nesting_levels_end = 0\n  local paren_group_nesting_levels_length\
    \ = 0\n  local paren_group_nesting_levels_nesting = 0\n  local paren_group_nesting_levels_nesting_level\
    \ = 0\n  local paren_group_nesting_levels_nesting_levels = {}\n  local paren_group_nesting_levels_nesting_levels_index\
    \ = 1\n  local paren_group_nesting_levels_nesting_levels_start = 0\n  local paren_group_nesting_levels_nesting_levels_end\
    \ = 0\n  local paren_group_nesting_levels_nesting_levels_length = 0\n  local paren_group_nesting_levels_nesting_levels_nesting\
    \ = 0\n  local paren_group_nesting_levels_nesting_levels_nesting_level = 0\n \
    \ local paren_group_nesting_levels_nesting_levels_nesting_levels = {}\n  local\
    \ paren_group_nesting_levels_nesting_levels_nesting_levels_index = 1\n  local\
    \ paren_group_nesting_levels_nesting_levels_nesting_levels_start = 0\n  local\
    \ paren_group_nesting_levels_nesting_levels_nesting_levels_end = 0\n  local paren_group_nesting_levels_nesting_levels_nesting_levels_length\
    \ = 0\n  local paren_group_nesting_levels_nesting_levels_nesting_levels_nesting\
    \ = 0\n  local paren_group_nesting_levels_nesting_levels_nesting_levels_nesting_level\
    \ = 0\n  local paren_group_nesting_levels_nesting_levels_nesting_levels_nesting_levels\
    \ = {}\n  local paren_group_nesting_levels_nesting_levels_nesting_levels_nesting_levels_index\
    \ = 1\n  local paren_group_nesting_levels_nesting_levels_nesting_levels_nesting_levels_start\
    \ = 0\n  local paren_group_nesting_levels_nesting_levels_nesting_levels_nesting_levels_end\
    \ = 0\n  local paren_group_nesting_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpepju8eoe.lua:51: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_count = 0\n  local paren_level = 0\n\
    \  local paren_max_level = 0\n  local paren_max_level_stack = {}\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_index2 = 0\n  local paren_max_level_stack_index3\
    \ = 0\n  local paren_max_level_stack_index4 = 0\n  local paren_max_level_stack_index5\
    \ = 0\n  local paren_max_level_stack_index6 = 0\n  local paren_max_level_stack_index7\
    \ = 0\n  local paren_max_level_stack_index8 = 0\n  local paren_max_level_stack_index9\
    \ = 0\n  local paren_max_level_stack_index10 = 0\n  local paren_max_level_stack_index11\
    \ = 0\n  local paren_max_level_stack_index12 = 0\n  local paren_max_level_stack_index13\
    \ = 0\n  local paren_max_level_stack_index14 = 0\n  local paren_max_level_stack_index15\
    \ = 0\n  local paren_max_level_stack_index16 = 0\n  local paren_max_level_stack_index17\
    \ = 0\n  local paren_max_level_stack_index18 = 0\n  local paren_max_level_stack_index19\
    \ = 0\n  local paren_max_level_stack_index20 = 0\n  local paren_max_level_stack_index21\
    \ = 0\n  local paren_max_level_stack_index22 = 0\n  local paren_max_level_stack_index23\
    \ = 0\n  local paren_max_level_stack_index24 = 0\n  local paren_max_level_stack_index25\
    \ = 0\n  local paren_max_level_stack_index26 = 0\n  local paren_max_level_stack_index27\
    \ = 0\n  local paren_max_level_stack_index28 = 0\n  local paren_max_level_stack_index29\
    \ = 0\n  local paren_max_level_stack_index30 = 0\n  local paren_max_level_stack_index31\
    \ = 0\n  local paren_max_level_stack_index32 = 0\n  local paren_max_level_stack_index33\
    \ = 0\n  local paren_max_level_stack_index34 = 0\n  local paren_max_level_stack_index35\
    \ = 0\n  local paren_max_level_stack_index36 = 0\n  local paren_max_level_stack_index37\
    \ = 0\n  local paren_max_level_stack_index38 = 0\n  local paren_max_level_stack_index39\
    \ = 0\n  local paren_max_level_stack_index40 = 0\n  local paren_max_level_stack_index41\
    \ = 0\n  local paren_max_level_stack_index42 = 0\n  local paren_max_level_stack_index43\
    \ = 0\n  local paren\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsgwlpl7m.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 1\n  local paren_count = 0\n  local paren_groups\
    \ = {}\n  local paren_group = {}\n  local paren_group_stack = {}\n  local paren_group_stack_index\
    \ = 0\n  local paren_group_stack_index2 = 0\n  local paren_group_stack_index3\
    \ = 0\n  local paren_group_stack_index4 = 0\n  local paren_group_stack_index5\
    \ = 0\n  local paren_group_stack_index6 = 0\n  local paren_group_stack_index7\
    \ = 0\n  local paren_group_stack_index8 = 0\n  local paren_group_stack_index9\
    \ = 0\n  local paren_group_stack_index10 = 0\n  local paren_group_stack_index11\
    \ = 0\n  local paren_group_stack_index12 = 0\n  local paren_group_stack_index13\
    \ = 0\n  local paren_group_stack_index14 = 0\n  local paren_group_stack_index15\
    \ = 0\n  local paren_group_stack_index16 = 0\n  local paren_group_stack_index17\
    \ = 0\n  local paren_group_stack_index18 = 0\n  local paren_group_stack_index19\
    \ = 0\n  local paren_group_stack_index20 = 0\n  local paren_group_stack_index21\
    \ = 0\n  local paren_group_stack_index22 = 0\n  local paren_group_stack_index23\
    \ = 0\n  local paren_group_stack_index24 = 0\n  local paren_group_stack_index25\
    \ = 0\n  local paren_group_stack_index26 = 0\n  local paren_group_stack_index27\
    \ = 0\n  local paren_group_stack_index28 = 0\n  local paren_group_stack_index29\
    \ = 0\n  local paren_group_stack_index30 = 0\n  local paren_group_stack_index31\
    \ = 0\n  local paren_group_stack_index32 = 0\n  local paren_group_stack_index33\
    \ = 0\n  local paren_group_stack_index34 = 0\n  local paren_group_stack_index35\
    \ = 0\n  local paren_group_stack_index36 = 0\n  local paren_group_stack_index37\
    \ = 0\n  local paren_group_stack_index38 = 0\n  local paren_group_stack_index39\
    \ = 0\n  local paren_group_stack_index40 = 0\n  local paren_group_stack_index41\
    \ = 0\n  local paren_group_stack_index42 = 0\n  local paren_group_stack_index43\
    \ = 0\n  local paren_group_stack_index44 = 0\n  local paren_group_stack_index45\
    \ = 0\n  local paren_group_stack_index46 = 0\n  local paren_group_stack_index47\
    \ = 0\n  local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmreuhhij.lua:70: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local max_level = 0\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a)]+') do\n    local level = 1\n    local paren_level = paren_stack:len()\n\
    \    while paren_level > 0 do\n      paren_level = paren_level - 1\n      level\
    \ = level * paren_stack[paren_level]\n    end\n    level = level + 1\n    if level\
    \ > max_level then\n      max_level = level\n    end\n    table.insert(paren_stack,\
    \ level)\n  end\n  return max_level\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe9eh85p4.lua:28:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpe9eh85p4.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local parsed_parens = {}\n  local paren_level = 1\n  local paren_nesting =\
    \ 0\n  local paren_groups = {}\n  local paren_group_level = 1\n  local paren_group_nesting\
    \ = 0\n  local paren_group_start = 0\n  local paren_group_end = 0\n  local paren_group_string\
    \ = ''\n  local paren_group_char = ''\n  local paren_group_char_length = 0\n \
    \ local paren_group_char_length2 = 0\n  local paren_group_char_length3 = 0\n \
    \ local paren_group_char_length4 = 0\n  local paren_group_char_length5 = 0\n \
    \ local paren_group_char_length6 = 0\n  local paren_group_char_length7 = 0\n \
    \ local paren_group_char_length8 = 0\n  local paren_group_char_length9 = 0\n \
    \ local paren_group_char_length10 = 0\n  local paren_group_char_length11 = 0\n\
    \  local paren_group_char_length12 = 0\n  local paren_group_char_length13 = 0\n\
    \  local paren_group_char_length14 = 0\n  local paren_group_char_length15 = 0\n\
    \  local paren_group_char_length16 = 0\n  local paren_group_char_length17 = 0\n\
    \  local paren_group_char_length18 = 0\n  local paren_group_char_length19 = 0\n\
    \  local paren_group_char_length20 = 0\n  local paren_group_char_length21 = 0\n\
    \  local paren_group_char_length22 = 0\n  local paren_group_char_length23 = 0\n\
    \  local paren_group_char_length24 = 0\n  local paren_group_char_length25 = 0\n\
    \  local paren_group_char_length26 = 0\n  local paren_group_char_length27 = 0\n\
    \  local paren_group_char_length28 = 0\n  local paren_group_char_length29 = 0\n\
    \  local paren_group_char_length30 = 0\n  local paren_group_char_length31 = 0\n\
    \  local paren_group_char_length32 = 0\n  local paren_group_char_length33 = 0\n\
    \  local paren_group_char_length34 = 0\n  local paren_group_char_length35 = 0\n\
    \  local paren_group_char_length36 = 0\n  local paren_group_char_length37 = 0\n\
    \  local paren_group_char_length38 = 0\n  local paren_group_char_length39 = 0\n\
    \  local paren_group_char_length40 = 0\n  local paren_group_char_length41 = 0\n\
    \  local paren_group_char_length42 = 0\n  local paren_group_char_length43 = 0\n\
    \  local paren_group_char_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpusvhkswa.lua:70: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local parsed_parens = {}\n  local level = 0\n  local paren_count = 0\n  local\
    \ opening_paren = 0\n  local opening_paren_level = 0\n  local opening_paren_char\
    \ = ''\n  local opening_paren_char_level = 0\n  local opening_paren_char_length\
    \ = 0\n  local opening_paren_char_length_index = 0\n  local opening_paren_char_length_count\
    \ = 0\n  local opening_paren_char_length_max = 0\n  local opening_paren_char_length_max_index\
    \ = 0\n  local opening_paren_char_length_max_count = 0\n  local opening_paren_char_length_max_char\
    \ = ''\n  local opening_paren_char_length_max_char_level = 0\n  local opening_paren_char_length_max_char_length\
    \ = 0\n  local opening_paren_char_length_max_char_length_index = 0\n  local opening_paren_char_length_max_char_length_count\
    \ = 0\n  local opening_paren_char_length_max_char_length_max = 0\n  local opening_paren_char_length_max_char_length_max_index\
    \ = 0\n  local opening_paren_char_length_max_char_length_max_count = 0\n  local\
    \ opening_paren_char_length_max_char_length_max_char = ''\n  local opening_paren_char_length_max_char_length_max_char_level\
    \ = 0\n  local opening_paren_char_length_max_char_length_max_char_length = 0\n\
    \  local opening_paren_char_length_max_char_length_max_char_length_index = 0\n\
    \  local opening_paren_char_length_max_char_length_max_char_length_count = 0\n\
    \  local opening_paren_char_length_max_char_length_max_char_length_max = 0\n \
    \ local opening_paren_char_length_max_char_length_max_char_length_max_index =\
    \ 0\n  local opening_paren_char_length_max_char_length_max_char_length_max_count\
    \ = 0\n  local opening_paren_char_length_max_char_length_max_char_length_max_char\
    \ = ''\n  local opening_paren_char_length_max_char_length_max_char_length_max_char_level\
    \ = 0\n  local opening_paren_char_length_max_char_length_max_char_length_max_char_length\
    \ = 0\n  local opening_paren_char_length_max_char_length_max_char_length_max_char_length_index\
    \ = 0\n  local opening_paren_char_length_max_char_length_max_char_length_max_char_length_count\
    \ = 0\n  local opening_paren_char_length_max_char_length_max_char_length_max_char_length_max\
    \ = 0\n  local opening_paren_char_length_max_char_length_max_char_length_max_char_length_max_index\
    \ = 0\n  local opening_paren_char_length_max_char_length_max_char_length_max_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiv8o0lhz.lua:53: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_nesting = 0\n\
    \  local paren_levels = {}\n  local paren_nestings = {}\n  local paren_levels_string\
    \ = ''\n  local paren_nestings_string = ''\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a)]+') do\n    if paren == '(' or paren == '[' then\n      paren_stack[#paren_stack\
    \ + 1] = paren\n      paren_level = #paren_stack\n      paren_nesting = paren_nesting\
    \ + 1\n      paren_levels[#paren_levels + 1] = paren\n      paren_nestings[#paren_nestings\
    \ + 1] = paren_nesting\n      paren_levels_string = table.concat(paren_levels,\
    \ ', ') .. ')'\n      paren_nestings_string = table.concat(paren_nestings, ',\
    \ ') .. ')'\n    elseif paren == ')' then\n      local paren_level = #paren_stack\n\
    \      local paren_nesting = paren_nesting - 1\n      local paren_level = paren_levels[paren_level]\n\
    \      local paren_nesting = paren_nestings[paren_nesting]\n      if paren_nesting\
    \ > 0 then\n        paren_levels[paren_level] = paren\n        paren_nestings[paren_nesting]\
    \ = paren_nesting\n        paren_levels_string = table.concat(paren_levels, ',\
    \ ') .. ')'\n        paren_nestings_string = table.concat(paren_nestings, ', ')\
    \ .. ')'\n      else\n        paren_levels[paren_level] = paren\n        paren_nestings[paren_nesting]\
    \ = paren_nesting\n        paren_levels_string = table.concat(paren_levels, ',\
    \ ') .. ')'\n        paren_nestings_string = table.concat(paren_nestings, ', ')\
    \ .. ')'\n      end\n      paren_stack[paren_level] = nil\n    elseif paren ==\
    \ ']' then\n      local paren_level = #paren_stack\n      local paren_nesting\
    \ = paren_nesting - 1\n      local paren_level = paren_levels[paren_level]\n \
    \     local paren_nesting = paren_nestings[paren_nesting]\n      if paren_nesting\
    \ > 0 then\n        paren_levels[paren_level] = paren\n        paren_nestings[paren_nesting]\
    \ = paren_nesting\n        paren_levels_string = table.concat(paren_level\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg1s9o6cc.lua:49: '')'' expected (to close ''('' at line 48)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n\
    \  local paren_levels_stack_index2 = 0\n  local paren_levels_stack_index3 = 0\n\
    \  local paren_levels_stack_index4 = 0\n  local paren_levels_stack_index5 = 0\n\
    \  local paren_levels_stack_index6 = 0\n  local paren_levels_stack_index7 = 0\n\
    \  local paren_levels_stack_index8 = 0\n  local paren_levels_stack_index9 = 0\n\
    \  local paren_levels_stack_index10 = 0\n  local paren_levels_stack_index11 =\
    \ 0\n  local paren_levels_stack_index12 = 0\n  local paren_levels_stack_index13\
    \ = 0\n  local paren_levels_stack_index14 = 0\n  local paren_levels_stack_index15\
    \ = 0\n  local paren_levels_stack_index16 = 0\n  local paren_levels_stack_index17\
    \ = 0\n  local paren_levels_stack_index18 = 0\n  local paren_levels_stack_index19\
    \ = 0\n  local paren_levels_stack_index20 = 0\n  local paren_levels_stack_index21\
    \ = 0\n  local paren_levels_stack_index22 = 0\n  local paren_levels_stack_index23\
    \ = 0\n  local paren_levels_stack_index24 = 0\n  local paren_levels_stack_index25\
    \ = 0\n  local paren_levels_stack_index26 = 0\n  local paren_levels_stack_index27\
    \ = 0\n  local paren_levels_stack_index28 = 0\n  local paren_levels_stack_index29\
    \ = 0\n  local paren_levels_stack_index30 = 0\n  local paren_levels_stack_index31\
    \ = 0\n  local paren_levels_stack_index32 = 0\n  local paren_levels_stack_index33\
    \ = 0\n  local paren_levels_stack_index34 = 0\n  local paren_levels_stack_index35\
    \ = 0\n  local paren_levels_stack_index36 = 0\n  local paren_levels_stack_index37\
    \ = 0\n  local paren_levels_stack_index38 = 0\n  local paren_levels_stack_index39\
    \ = 0\n  local paren_levels_stack_index40 = 0\n  local paren_levels_stack_index41\
    \ = 0\n  local paren_levels_stack_index42 = 0\n  local paren_levels_stack_index43\
    \ = 0\n  local paren_levels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzfi1y745.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group_start = 1\n  local paren_group_end\
    \ = 1\n  local paren_group_length = 1\n  local paren_group_nesting_level = 1\n\
    \  local paren_group_nesting_level_count = 1\n  local paren_group_nesting_level_max\
    \ = 1\n  local paren_group_nesting_level_max_count = 0\n  local paren_group_nesting_level_max_index\
    \ = 1\n  local paren_group_nesting_level_max_start = 1\n  local paren_group_nesting_level_max_end\
    \ = 1\n  local paren_group_nesting_level_max_length = 1\n  local paren_group_nesting_level_max_nesting_level\
    \ = 1\n  local paren_group_nesting_level_max_nesting_level_count = 1\n  local\
    \ paren_group_nesting_level_max_nesting_level_max = 1\n  local paren_group_nesting_level_max_nesting_level_max_count\
    \ = 0\n  local paren_group_nesting_level_max_nesting_level_max_index = 1\n  local\
    \ paren_group_nesting_level_max_nesting_level_max_start = 1\n  local paren_group_nesting_level_max_nesting_level_max_end\
    \ = 1\n  local paren_group_nesting_level_max_nesting_level_max_length = 1\n  local\
    \ paren_group_nesting_level_max_nesting_level_max_nesting_level = 1\n  local paren_group_nesting_level_max_nesting_level_max_nesting_level_count\
    \ = 1\n  local paren_group_nesting_level_max_nesting_level_max_nesting_level_max\
    \ = 1\n  local paren_group_nesting_level_max_nesting_level_max_nesting_level_max_count\
    \ = 0\n  local paren_group_nesting_level_max_nesting_level_max_nesting_level_max_index\
    \ = 1\n  local paren_group_nesting_level_max_nesting_level_max_nesting_level_max_start\
    \ = 1\n  local paren_group_nesting_level_max_nesting_level_max_nesting_level_max_end\
    \ = 1\n  local paren_group_nesting_level_max_nesting_level_max_nesting_level_max_length\
    \ = 1\n  local paren_group_nesting_level_max_nesting_level_max_nesting_level_max_nesting_level\
    \ = 1\n  local paren_group_nesting_level_max_nesting_level_max_nesting_level_max_nesting_level_count\
    \ = 1\n  local paren_group_nesting_level_max_nesting_level_max_nesting_level_max_nesting_level_max\
    \ = 1\n  local paren_group_nesting_level_max_nesting_level_max_nesting_level_max_nesting_level_max_count\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzzjh2tyd.lua:51: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local max_level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_level = 0\n  local paren_level_string = ''\n  local paren_level_string_count\
    \ = 0\n  local paren_level_last_char = ''\n  local paren_level_last_char_level\
    \ = 0\n  local paren_level_last_char_level_string = ''\n  local paren_level_last_char_level_string_count\
    \ = 0\n  local paren_level_last_char_level_last_char = ''\n  local paren_level_last_char_level_last_char_level\
    \ = 0\n  local paren_level_last_char_level_last_char_level_string = ''\n  local\
    \ paren_level_last_char_level_last_char_level_string_count = 0\n  local paren_level_last_char_level_last_char_level_last_char\
    \ = ''\n  local paren_level_last_char_level_last_char_level_last_char_level =\
    \ 0\n  local paren_level_last_char_level_last_char_level_last_char_level_string\
    \ = ''\n  local paren_level_last_char_level_last_char_level_last_char_level_string_count\
    \ = 0\n  local paren_level_last_char_level_last_char_level_last_char_level_last_char\
    \ = ''\n  local paren_level_last_char_level_last_char_level_last_char_level_last_char_level\
    \ = 0\n  local paren_level_last_char_level_last_char_level_last_char_level_last_char_level_string\
    \ = ''\n  local paren_level_last_char_level_last_char_level_last_char_level_last_char_level_string_count\
    \ = 0\n  local paren_level_last_char_level_last_char_level_last_char_level_last_char_level_last_char\
    \ = ''\n  local paren_level_last_char_level_last_char_level_last_char_level_last_char_level_last_char_level\
    \ = 0\n  local paren_level_last_char_level_last_char_level_last_char_level_last_char_level_last_char_level_string\
    \ = ''\n  local paren_level_last_char_level_last_char_level_last_char_level_last_char_level_last_char_level_string_count\
    \ = 0\n  local paren_level_last_char_level_last_char_level_last_char_level_last_char_level_last_char_level_last_char\
    \ = ''\n  local paren_level_last_char_level_last_char_level_last_char_level_last_char_level_last_char_level_last_char_level\
    \ = 0\n  local paren_level_last_char_level_last_char_level_last_char_level_last_char_level_last_char_level_last_char_level_string\
    \ = ''\n  local paren_level_last_char_level_last_char_level_last_char_level_last_char_level_last_char_level_last_char_level_string_count\
    \ = 0\n  local paren_level_last_char_level_last_char_level_last_char_level_last_char_level_last_char_level_last_char_level_last_char\
    \ = ''\n  local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk2pqig1m.lua:49: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local max_level = 0\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a)]+') do\n    local level_of_paren = #paren_stack\n    paren_stack[level_of_paren]\
    \ = paren\n    if level_of_paren > max_level then\n      max_level = level_of_paren\n\
    \    end\n  end\n  return max_level\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdfe0lo_2.lua:22:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpdfe0lo_2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local max_level = 0\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a)]+') do\n    local level = #paren_stack\n    paren_stack[level] = paren\n\
    \    if level > max_level then\n      max_level = level\n    end\n  end\n  return\
    \ max_level\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi4b7c7dl.lua:22:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpi4b7c7dl.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_levels_stack = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdfzfd4x4.lua:69: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 0\n  local paren_group_count = 1\n  local paren_group_max_level\
    \ = 0\n  local paren_group_max_level_char = ''\n  local paren_group_max_level_char_index\
    \ = 0\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_is_open\
    \ = false\n  local paren_group_max_level_char_is_close = false\n  local paren_group_max_level_char_is_opening_paren\
    \ = false\n  local paren_group_max_level_char_is_closing_paren = false\n  local\
    \ paren_group_max_level_char_is_opening_paren_or_closing = false\n  local paren_group_max_level_char_is_closing_paren_or_opening\
    \ = false\n  local paren_group_max_level_char_is_opening_paren_or_closing_or_opening\
    \ = false\n  local paren_group_max_level_char_is_closing_paren_or_opening_or_closing\
    \ = false\n  local paren_group_max_level_char_is_opening_paren_or_closing_or_opening_or_closing\
    \ = false\n  local paren_group_max_level_char_is_opening_paren_or_closing_or_opening_or_closing_or_opening\
    \ = false\n  local paren_group_max_level_char_is_closing_paren_or_opening_or_closing_or_opening_or_closing\
    \ = false\n  local paren_group_max_level_char_is_opening_paren_or_closing_or_opening_or_closing_or_opening_or_closing\
    \ = false\n  local paren_group_max_level_char_is_opening_paren_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening\
    \ = false\n  local paren_group_max_level_char_is_closing_paren_or_opening_or_closing_or_opening_or_closing_or_opening_or_closing\
    \ = false\n  local paren_group_max_level_char_is_opening_paren_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening_or_closing\
    \ = false\n  local paren_group_max_level_char_is_opening_paren_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening\
    \ = false\n  local paren_group_max_level_char_is_closing_paren_or_opening_or_closing_or_opening_or_closing_or_opening_or_closing_or_opening_or_closing\
    \ = false\n  local paren_group_max_level_char_is_opening_paren_or_closing_or_opening_or_closing_or_open\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1kmpjgka.lua:43: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n\
    \  local paren_levels_stack_index2 = 0\n  local paren_levels_stack_index3 = 0\n\
    \  local paren_levels_stack_index4 = 0\n  local paren_levels_stack_index5 = 0\n\
    \  local paren_levels_stack_index6 = 0\n  local paren_levels_stack_index7 = 0\n\
    \  local paren_levels_stack_index8 = 0\n  local paren_levels_stack_index9 = 0\n\
    \  local paren_levels_stack_index10 = 0\n  local paren_levels_stack_index11 =\
    \ 0\n  local paren_levels_stack_index12 = 0\n  local paren_levels_stack_index13\
    \ = 0\n  local paren_levels_stack_index14 = 0\n  local paren_levels_stack_index15\
    \ = 0\n  local paren_levels_stack_index16 = 0\n  local paren_levels_stack_index17\
    \ = 0\n  local paren_levels_stack_index18 = 0\n  local paren_levels_stack_index19\
    \ = 0\n  local paren_levels_stack_index20 = 0\n  local paren_levels_stack_index21\
    \ = 0\n  local paren_levels_stack_index22 = 0\n  local paren_levels_stack_index23\
    \ = 0\n  local paren_levels_stack_index24 = 0\n  local paren_levels_stack_index25\
    \ = 0\n  local paren_levels_stack_index26 = 0\n  local paren_levels_stack_index27\
    \ = 0\n  local paren_levels_stack_index28 = 0\n  local paren_levels_stack_index29\
    \ = 0\n  local paren_levels_stack_index30 = 0\n  local paren_levels_stack_index31\
    \ = 0\n  local paren_levels_stack_index32 = 0\n  local paren_levels_stack_index33\
    \ = 0\n  local paren_levels_stack_index34 = 0\n  local paren_levels_stack_index35\
    \ = 0\n  local paren_levels_stack_index36 = 0\n  local paren_levels_stack_index37\
    \ = 0\n  local paren_levels_stack_index38 = 0\n  local paren_levels_stack_index39\
    \ = 0\n  local paren_levels_stack_index40 = 0\n  local paren_levels_stack_index41\
    \ = 0\n  local paren_levels_stack_index42 = 0\n  local paren_levels_stack_index43\
    \ = 0\n  local paren_levels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzfi1y745.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_count = 0\n  local paren_level = 0\n\
    \  local paren_groups = {}\n  for paren in string.gmatch(paren_string, \"%[(%a)]\"\
    ) do\n    if paren == \"(\" then\n      paren_stack[paren_level] = paren_stack[paren_level]\
    \ or 1\n      paren_count = paren_stack[paren_level]\n      paren_level = paren_level\
    \ + 1\n    elseif paren == \")\" then\n      paren_count = paren_count - 1\n \
    \     if paren_count < 0 then\n        table.insert(paren_groups, paren_level)\n\
    \      end\n      paren_level = paren_level - 1\n    end\n  end\n  return paren_groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptrys4tfb.lua:30:\
    \ expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmptrys4tfb.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_levels_index = {}\n  local paren_levels_index_stack = {}\n  local paren_levels_index_stack_index\
    \ = 0\n  local paren_levels_index_stack_size = 0\n  local paren_levels_index_stack_size_max\
    \ = 0\n  local paren_levels_index_stack_size_min = 0\n  local paren_levels_index_stack_size_cur\
    \ = 0\n  local paren_levels_index_stack_size_cur_index = 0\n  local paren_levels_index_stack_size_cur_max\
    \ = 0\n  local paren_levels_index_stack_size_cur_min = 0\n  local paren_levels_index_stack_size_cur_cur\
    \ = 0\n  local paren_levels_index_stack_size_cur_cur_index = 0\n  local paren_levels_index_stack_size_cur_cur_max\
    \ = 0\n  local paren_levels_index_stack_size_cur_cur_min = 0\n  local paren_levels_index_stack_size_cur_cur_cur\
    \ = 0\n  local paren_levels_index_stack_size_cur_cur_cur_index = 0\n  local paren_levels_index_stack_size_cur_cur_cur_max\
    \ = 0\n  local paren_levels_index_stack_size_cur_cur_cur_min = 0\n  local paren_levels_index_stack_size_cur_cur_cur_cur\
    \ = 0\n  local paren_levels_index_stack_size_cur_cur_cur_cur_index = 0\n  local\
    \ paren_levels_index_stack_size_cur_cur_cur_cur_max = 0\n  local paren_levels_index_stack_size_cur_cur_cur_min\
    \ = 0\n  local paren_levels_index_stack_size_cur_cur_cur_cur = 0\n  local paren_levels_index_stack_size_cur_cur_cur_cur_index\
    \ = 0\n  local paren_levels_index_stack_size_cur_cur_cur_cur_max = 0\n  local\
    \ paren_levels_index_stack_size_cur_cur_cur_min = 0\n  local paren_levels_index_stack_size_cur_cur_cur_cur\
    \ = 0\n  local paren_levels_index_stack_size_cur_cur_cur_cur_index = 0\n  local\
    \ paren_levels_index_stack_size_cur_cur_cur_cur_max = 0\n  local paren_levels_index_stack_size_cur_cur_cur_min\
    \ = 0\n  local paren_levels_index_stack_size_cur_cur_cur_cur = 0\n  local paren_levels_index_stack_size_cur_cur_cur_cur_index\
    \ = 0\n  local paren_levels_index_stack_size_cur_cur_cur_cur_max = 0\n  local\
    \ paren_levels_index_stack_size_cur_cur_cur_min = 0\n  local paren_levels_index_stack_size_cur_cur_cur_cur\
    \ = 0\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1bwfvxm8.lua:55: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_count = 0\n  local paren_level = 0\n\
    \  local paren_max_level = 0\n  for paren in string.gmatch(paren_string, '%[(%a)]+')\
    \ do\n    paren_stack[paren_level] = paren\n    paren_count = paren_count + 1\n\
    \    paren_level = paren_level + 1\n    if paren_level > paren_max_level then\n\
    \      paren_max_level = paren_level\n    end\n  end\n  local max_level = 0\n\
    \  for i = 1, paren_count do\n    local paren = paren_stack[i]\n    local level\
    \ = 0\n    while string.find(paren, '%[(%a)]') do\n      paren = string.gsub(paren,\
    \ '%[(%a)]', '')\n      level = level + 1\n    end\n    if level > max_level then\n\
    \      max_level = level\n    end\n  end\n  return max_level\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp02v_ms_h.lua:37:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmp02v_ms_h.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group_count = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_string\
    \ = ''\n  local paren_group_level_string = ''\n  local paren_group_start_string\
    \ = ''\n  local paren_group_end_string = ''\n  local paren_group_start_level_string\
    \ = ''\n  local paren_group_end_level_string = ''\n  local paren_group_start_string\
    \ = ''\n  local paren_group_end_string = ''\n  local paren_group_start_level_string\
    \ = ''\n  local paren_group_end_level_string = ''\n  local paren_group_start_level\
    \ = 0\n  local paren_group_end_level = 0\n  local paren_group_start = 0\n  local\
    \ paren_group_end = 0\n  local paren_group_string = ''\n  local paren_group_level_string\
    \ = ''\n  local paren_group_start_string = ''\n  local paren_group_end_string\
    \ = ''\n  local paren_group_start_level_string = ''\n  local paren_group_end_level_string\
    \ = ''\n  local paren_group_start_level = 0\n  local paren_group_end_level = 0\n\
    \  local paren_group_start = 0\n  local paren_group_end = 0\n  local paren_group_string\
    \ = ''\n  local paren_group_level_string = ''\n  local paren_group_start_string\
    \ = ''\n  local paren_group_end_string = ''\n  local paren_group_start_level_string\
    \ = ''\n  local paren_group_end_level_string = ''\n  local paren_group_start_level\
    \ = 0\n  local paren_group_end_level = 0\n  local paren_group_start = 0\n  local\
    \ paren_group_end = 0\n  local paren_group_string = ''\n  local paren_group_level_string\
    \ = ''\n  local paren_group_start_string = ''\n  local paren_group_end_string\
    \ = ''\n  local paren_group_start_level_string = ''\n  local paren_group_end_level_string\
    \ = ''\n  local paren_group_start_level = 0\n  local paren_group_end_level = 0\n\
    \  local paren_group_start = 0\n  local paren_group_end = 0\n  local paren_group_string\
    \ = ''\n  local paren_group_level_string = ''\n  local paren_group_start_string\
    \ = ''\n  local paren_group_end_string = ''\n  local paren_group_start_level_string\
    \ = ''\n  local paren_group_end_level_string = ''\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9_2ndsmg.lua:75: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_nesting = 0\n\
    \  local paren_groups = {}\n  local paren_group_index = 1\n  local paren_group_nesting\
    \ = 1\n  local paren_group_level = 1\n  local paren_group_nesting_level = 1\n\
    \  local paren_group_levels = {}\n  local paren_group_nesting_levels = {}\n  local\
    \ paren_group_levels_index = 1\n  local paren_group_nesting_levels_index = 1\n\
    \  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv4ipwrnx.lua:66: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_max_level =\
    \ 0\n  local paren_max_level_stack = {}\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a)]') do\n    local paren_level = paren_level + 1\n    local paren_max_level\
    \ = math.max(paren_max_level, paren_level)\n    paren_max_level_stack[paren_level]\
    \ = paren_max_level\n    paren_stack[paren_level] = paren\n  end\n  local paren_max_level_stack_size\
    \ = #paren_max_level_stack\n  local paren_max_level_stack_index = 1\n  local paren_max_level_stack_value\
    \ = paren_max_level_stack[1]\n  while paren_max_level_stack_size > 1 do\n    local\
    \ paren_max_level_stack_value = paren_max_level_stack_value\n    local paren_max_level_stack_index\
    \ = paren_max_level_stack_index + 1\n    local paren_max_level_stack_size = paren_max_level_stack_size\
    \ - 1\n    local paren_max_level_stack_value = paren_max_level_stack_value\n \
    \   for i = paren_max_level_stack_index, 1, -1 do\n      local paren_max_level_stack_value\
    \ = paren_max_level_stack_value\n      local paren_max_level_stack_index = paren_max_level_stack_index\
    \ - 1\n      local paren_max_level_stack_size = paren_max_level_stack_size + 1\n\
    \      local paren_max_level_stack_value = paren_max_level_stack_value\n    end\n\
    \  end\n  local paren_max_level_stack_value = paren_max_level_stack_value\n  local\
    \ paren_max_level_stack_index = paren_max_level_stack_index - 1\n  local paren_max_level_stack_size\
    \ = paren_max_level_stack_size - 1\n  local paren_max_level_stack_value = paren_max_level_stack_value\n\
    \  local paren_max_level_stack_index = paren_max_level_stack_index - 1\n  local\
    \ paren_max_level_stack_size = paren_max_level_stack_size - 1\n  local paren_max_level_stack_value\
    \ = paren_max_level_stack_value\n  local paren_max_level_stack_index = paren_max_level_stack_index\
    \ - 1\n  local paren_max_level_stack_size = paren_max_level_stack_size - 1\n \
    \ local paren_max_level_stack_value = paren_max_level_stack_value\n  local paren_max_level_stack_index\
    \ = paren_max_level_stack_index - 1\n  local paren_max_level_stack_size = paren_max_level_stack_size\
    \ - 1\n  local paren_max_level_stack_value = paren_max_level_stack_value\n  local\
    \ paren_max_level_stack_index = paren_max_level_stack_index - 1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpso435wp9.lua:55: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_levels_stack = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdfzfd4x4.lua:69: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_stack_size = #paren_string\n  local paren_level_size = 0\n\
    \  local paren_level_index = 1\n  local paren_stack_index = 1\n  local paren_stack_string\
    \ = ''\n  local paren_level_string = ''\n  local paren_stack_string_index = 1\n\
    \  local paren_level_string_index = 1\n  local paren_stack_string_index = 1\n\
    \  local paren_level_string_index = 1\n  local paren_stack_string_index = 1\n\
    \  local paren_level_string_index = 1\n  local paren_stack_string_index = 1\n\
    \  local paren_level_string_index = 1\n  local paren_stack_string_index = 1\n\
    \  local paren_level_string_index = 1\n  local paren_stack_string_index = 1\n\
    \  local paren_level_string_index = 1\n  local paren_stack_string_index = 1\n\
    \  local paren_level_string_index = 1\n  local paren_stack_string_index = 1\n\
    \  local paren_level_string_index = 1\n  local paren_stack_string_index = 1\n\
    \  local paren_level_string_index = 1\n  local paren_stack_string_index = 1\n\
    \  local paren_level_string_index = 1\n  local paren_stack_string_index = 1\n\
    \  local paren_level_string_index = 1\n  local paren_stack_string_index = 1\n\
    \  local paren_level_string_index = 1\n  local paren_stack_string_index = 1\n\
    \  local paren_level_string_index = 1\n  local paren_stack_string_index = 1\n\
    \  local paren_level_string_index = 1\n  local paren_stack_string_index = 1\n\
    \  local paren_level_string_index = 1\n  local paren_stack_string_index = 1\n\
    \  local paren_level_string_index = 1\n  local paren_stack_string_index = 1\n\
    \  local paren_level_string_index = 1\n  local paren_stack_string_index = 1\n\
    \  local paren_level_string_index = 1\n  local paren_stack_string_index = 1\n\
    \  local paren_level_string_index = 1\n  local paren_stack_string_index = 1\n\
    \  local paren_level_string_index = 1\n  local paren_stack_string_index = 1\n\
    \  local paren_level_string_index = 1\n  local paren_stack_string_index = 1\n\
    \  local paren_level_string_index = 1\n  local paren_stack_string_index = 1\n\
    \  local paren_level_string_index = 1\n  local paren_stack_string_index = 1\n\
    \  local paren_level_string_index = 1\n  local paren_stack\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbyvpv1gl.lua:75: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  for paren in string.gmatch(paren_string, '%[(%a)]+') do\n    paren_stack[#paren_stack\
    \ + 1] = paren\n    paren_levels[paren] = level\n    level = level + 1\n    if\
    \ level > max_level then\n      max_level = level\n    end\n  end\n  local results\
    \ = {}\n  for i = 1, max_level do\n    local paren = paren_stack[i]\n    local\
    \ level = paren_levels[paren]\n    if level > 0 then\n      local paren_str =\
    \ table.concat(paren_stack, '()')\n      table.insert(results, level)\n      table.insert(results,\
    \ paren_str)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5k94jiar.lua:35:\
    \ expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmp5k94jiar.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_count = 0\n  local paren_level = 0\n\
    \  local paren_groups = {}\n  local paren_group_index = 0\n  local paren_group_count\
    \ = 1\n  local paren_group_level = 1\n  local paren_group_stack = {}\n  local\
    \ paren_group_stack_index = 0\n  local paren_group_level_index = 0\n  local paren_group_level_stack\
    \ = {}\n  local paren_group_level_stack_index = 0\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_index = 0\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_index = 0\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_index = 0\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_index = 0\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_index = 0\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_index = 0\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_index = 0\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_index = 0\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_index = 0\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_index = 0\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_index = 0\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_index = 0\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_index = 0\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_index = 0\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_index = 0\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_index = 0\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_index = 0\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_index = 0\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_index = 0\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_index = 0\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwweq0ptu.lua:70: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptefnwbwi.lua:69: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_nesting = 0\n\
    \  local paren_groups = {}\n  local paren_group_level = {}\n  local paren_group_nesting\
    \ = {}\n  local paren_group_level_count = {}\n  local paren_group_nesting_count\
    \ = {}\n  local paren_group_level_max_count = 0\n  local paren_group_nesting_max_count\
    \ = 0\n  local paren_group_level_max_nesting = 0\n  local paren_group_nesting_max_nesting\
    \ = 0\n  local paren_group_level_max_nesting_count = 0\n  local paren_group_nesting_max_nesting_count\
    \ = 0\n  local paren_group_level_max_nesting_count_max = 0\n  local paren_group_nesting_max_nesting_count_max\
    \ = 0\n  local paren_group_level_max_nesting_count_max_max = 0\n  local paren_group_nesting_max_nesting_count_max_max\
    \ = 0\n  local paren_group_level_max_nesting_count_max_max_max = 0\n  local paren_group_nesting_max_nesting_count_max_max_max\
    \ = 0\n  local paren_group_level_max_nesting_count_max_max_max_max = 0\n  local\
    \ paren_group_nesting_max_nesting_count_max_max_max_max = 0\n  local paren_group_level_max_nesting_count_max_max_max_max_max\
    \ = 0\n  local paren_group_nesting_max_nesting_count_max_max_max_max_max = 0\n\
    \  local paren_group_level_max_nesting_count_max_max_max_max_max_max = 0\n  local\
    \ paren_group_nesting_max_nesting_count_max_max_max_max_max_max = 0\n  local paren_group_level_max_nesting_count_max_max_max_max_max_max_max\
    \ = 0\n  local paren_group_nesting_max_nesting_count_max_max_max_max_max_max_max\
    \ = 0\n  local paren_group_level_max_nesting_count_max_max_max_max_max_max_max_max\
    \ = 0\n  local paren_group_nesting_max_nesting_count_max_max_max_max_max_max_max_max\
    \ = 0\n  local paren_group_level_max_nesting_count_max_max_max_max_max_max_max_max\
    \ = 0\n  local paren_group_nesting_max_nesting_count_max_max_max_max_max_max_max_max\
    \ = 0\n  local paren_group_level_max_nesting_count_max_max_max_max_max_max_max_max_max\
    \ = 0\n  local paren_group_nesting_max_nesting_count_max_max_max_max_max_max_max_max_max\
    \ = 0\n  local paren_group_level_max_nesting_count_max_max_max_max_max_max_max_max_max_max\
    \ = 0\n  local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn184xliy.lua:52: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptefnwbwi.lua:69: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_level_count = {}\n  local paren_level_max_count = {}\n \
    \ local paren_level_max_count_index = {}\n  local paren_level_max_count_index\
    \ = {}\n  local paren_level_max_count_index = {}\n  local paren_level_max_count_index\
    \ = {}\n  local paren_level_max_count_index = {}\n  local paren_level_max_count_index\
    \ = {}\n  local paren_level_max_count_index = {}\n  local paren_level_max_count_index\
    \ = {}\n  local paren_level_max_count_index = {}\n  local paren_level_max_count_index\
    \ = {}\n  local paren_level_max_count_index = {}\n  local paren_level_max_count_index\
    \ = {}\n  local paren_level_max_count_index = {}\n  local paren_level_max_count_index\
    \ = {}\n  local paren_level_max_count_index = {}\n  local paren_level_max_count_index\
    \ = {}\n  local paren_level_max_count_index = {}\n  local paren_level_max_count_index\
    \ = {}\n  local paren_level_max_count_index = {}\n  local paren_level_max_count_index\
    \ = {}\n  local paren_level_max_count_index = {}\n  local paren_level_max_count_index\
    \ = {}\n  local paren_level_max_count_index = {}\n  local paren_level_max_count_index\
    \ = {}\n  local paren_level_max_count_index = {}\n  local paren_level_max_count_index\
    \ = {}\n  local paren_level_max_count_index = {}\n  local paren_level_max_count_index\
    \ = {}\n  local paren_level_max_count_index = {}\n  local paren_level_max_count_index\
    \ = {}\n  local paren_level_max_count_index = {}\n  local paren_level_max_count_index\
    \ = {}\n  local paren_level_max_count_index = {}\n  local paren_level_max_count_index\
    \ = {}\n  local paren_level_max_count_index = {}\n  local paren_level_max_count_index\
    \ = {}\n  local paren_level_max_count_index = {}\n  local paren_level_max_count_index\
    \ = {}\n  local paren_level_max_count_index = {}\n  local paren_level_max_count_index\
    \ = {}\n  local paren_level_max_count_index = {}\n  local paren_level_max_count_index\
    \ = {}\n  local paren_level_max_count_index = {}\n  local paren_level_max_count_index\
    \ = {}\n  local paren_level_max_count_index = {}\n  local paren_level_max_count_index\
    \ = {}\n  local paren_level_max_count_index = {}\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwonuzxvb.lua:70: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_max_level =\
    \ 0\n  local paren_max_level_stack = {}\n  local paren_max_level_stack_index =\
    \ 0\n  local paren_max_level_stack_index2 = 0\n  local paren_max_level_stack_index3\
    \ = 0\n  local paren_max_level_stack_index4 = 0\n  local paren_max_level_stack_index5\
    \ = 0\n  local paren_max_level_stack_index6 = 0\n  local paren_max_level_stack_index7\
    \ = 0\n  local paren_max_level_stack_index8 = 0\n  local paren_max_level_stack_index9\
    \ = 0\n  local paren_max_level_stack_index10 = 0\n  local paren_max_level_stack_index11\
    \ = 0\n  local paren_max_level_stack_index12 = 0\n  local paren_max_level_stack_index13\
    \ = 0\n  local paren_max_level_stack_index14 = 0\n  local paren_max_level_stack_index15\
    \ = 0\n  local paren_max_level_stack_index16 = 0\n  local paren_max_level_stack_index17\
    \ = 0\n  local paren_max_level_stack_index18 = 0\n  local paren_max_level_stack_index19\
    \ = 0\n  local paren_max_level_stack_index20 = 0\n  local paren_max_level_stack_index21\
    \ = 0\n  local paren_max_level_stack_index22 = 0\n  local paren_max_level_stack_index23\
    \ = 0\n  local paren_max_level_stack_index24 = 0\n  local paren_max_level_stack_index25\
    \ = 0\n  local paren_max_level_stack_index26 = 0\n  local paren_max_level_stack_index27\
    \ = 0\n  local paren_max_level_stack_index28 = 0\n  local paren_max_level_stack_index29\
    \ = 0\n  local paren_max_level_stack_index30 = 0\n  local paren_max_level_stack_index31\
    \ = 0\n  local paren_max_level_stack_index32 = 0\n  local paren_max_level_stack_index33\
    \ = 0\n  local paren_max_level_stack_index34 = 0\n  local paren_max_level_stack_index35\
    \ = 0\n  local paren_max_level_stack_index36 = 0\n  local paren_max_level_stack_index37\
    \ = 0\n  local paren_max_level_stack_index38 = 0\n  local paren_max_level_stack_index39\
    \ = 0\n  local paren_max_level_stack_index40 = 0\n  local paren_max_level_stack_index41\
    \ = 0\n  local paren_max_level_stack_index42 = 0\n  local paren_max_level_stack_index43\
    \ = 0\n  local paren_max_level_stack_index44\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnbwmpps3.lua:64: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_levels = {}\n  local paren_level = 0\n\
    \  local paren_nesting = 0\n  local paren_level_count = 0\n  local paren_level_max_count\
    \ = 0\n  local paren_level_max_count_index\n  local paren_level_max_count_index2\n\
    \  local paren_level_max_count_index3\n  local paren_level_max_count_index4\n\
    \  local paren_level_max_count_index5\n  local paren_level_max_count_index6\n\
    \  local paren_level_max_count_index7\n  local paren_level_max_count_index8\n\
    \  local paren_level_max_count_index9\n  local paren_level_max_count_index10\n\
    \  local paren_level_max_count_index11\n  local paren_level_max_count_index12\n\
    \  local paren_level_max_count_index13\n  local paren_level_max_count_index14\n\
    \  local paren_level_max_count_index15\n  local paren_level_max_count_index16\n\
    \  local paren_level_max_count_index17\n  local paren_level_max_count_index18\n\
    \  local paren_level_max_count_index19\n  local paren_level_max_count_index20\n\
    \  local paren_level_max_count_index21\n  local paren_level_max_count_index22\n\
    \  local paren_level_max_count_index23\n  local paren_level_max_count_index24\n\
    \  local paren_level_max_count_index25\n  local paren_level_max_count_index26\n\
    \  local paren_level_max_count_index27\n  local paren_level_max_count_index28\n\
    \  local paren_level_max_count_index29\n  local paren_level_max_count_index30\n\
    \  local paren_level_max_count_index31\n  local paren_level_max_count_index32\n\
    \  local paren_level_max_count_index33\n  local paren_level_max_count_index34\n\
    \  local paren_level_max_count_index35\n  local paren_level_max_count_index36\n\
    \  local paren_level_max_count_index37\n  local paren_level_max_count_index38\n\
    \  local paren_level_max_count_index39\n  local paren_level_max_count_index40\n\
    \  local paren_level_max_count_index41\n  local paren_level_max_count_index42\n\
    \  local paren_level_max_count_index43\n  local paren_level_max_count_index44\n\
    \  local paren_level_max_count_index45\n  local paren_level_max_count_index46\n\
    \  local paren_level_max_count_index\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmple5fds0b.lua:69: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 1\n  local paren_stack = {}\n  local paren_stack_index\
    \ = 0\n  local paren_stack_string = ''\n  local paren_stack_string_index = 0\n\
    \  local paren_stack_string_index2 = 0\n  local paren_stack_string_index3 = 0\n\
    \  local paren_stack_string_index4 = 0\n  local paren_stack_string_index5 = 0\n\
    \  local paren_stack_string_index6 = 0\n  local paren_stack_string_index7 = 0\n\
    \  local paren_stack_string_index8 = 0\n  local paren_stack_string_index9 = 0\n\
    \  local paren_stack_string_index10 = 0\n  local paren_stack_string_index11 =\
    \ 0\n  local paren_stack_string_index12 = 0\n  local paren_stack_string_index13\
    \ = 0\n  local paren_stack_string_index14 = 0\n  local paren_stack_string_index15\
    \ = 0\n  local paren_stack_string_index16 = 0\n  local paren_stack_string_index17\
    \ = 0\n  local paren_stack_string_index18 = 0\n  local paren_stack_string_index19\
    \ = 0\n  local paren_stack_string_index20 = 0\n  local paren_stack_string_index21\
    \ = 0\n  local paren_stack_string_index22 = 0\n  local paren_stack_string_index23\
    \ = 0\n  local paren_stack_string_index24 = 0\n  local paren_stack_string_index25\
    \ = 0\n  local paren_stack_string_index26 = 0\n  local paren_stack_string_index27\
    \ = 0\n  local paren_stack_string_index28 = 0\n  local paren_stack_string_index29\
    \ = 0\n  local paren_stack_string_index30 = 0\n  local paren_stack_string_index31\
    \ = 0\n  local paren_stack_string_index32 = 0\n  local paren_stack_string_index33\
    \ = 0\n  local paren_stack_string_index34 = 0\n  local paren_stack_string_index35\
    \ = 0\n  local paren_stack_string_index36 = 0\n  local paren_stack_string_index37\
    \ = 0\n  local paren_stack_string_index38 = 0\n  local paren_stack_string_index39\
    \ = 0\n  local paren_stack_string_index40 = 0\n  local paren_stack_string_index41\
    \ = 0\n  local paren_stack_string_index42 = 0\n  local paren_stack_string_index43\
    \ = 0\n  local paren_stack_string_index44 = 0\n  local paren_stack_string_index45\
    \ = 0\n  local paren_stack_string_index46 = 0\n  local paren_stack_string_index47\
    \ = 0\n  local paren_stack_string_index48 = 0\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0cjmo05x.lua:69: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  for paren\
    \ in string.gmatch(paren_string, '%[()%]') do\n    paren_stack[#paren_stack +\
    \ 1] = paren\n    level = level + 1\n    if paren == '(' and level > max_level\
    \ then\n      max_level = level\n    end\n  end\n  local result = {}\n  for i\
    \ = 1, max_level do\n    table.insert(result, #paren_stack)\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwwby7rax.lua:27:\
    \ expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpwwby7rax.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = paren_string:gsub('(%[(%)%])', function(x)\n    return\
    \ x:gsub('(%[(%)%])', function(y)\n      return y:gsub('(%[(%)%])', function(z)\n\
    \        return z:gsub('(%[(%)%])', function(w)\n          return w:gsub('(%[(%)%])',\
    \ function(x)\n            return x:gsub('(%[(%)%])', function(y)\n          \
    \    return y:gsub('(%[(%)%])', function(z)\n                return z:gsub('(%[(%)%])',\
    \ function(w)\n                  return w:gsub('(%[(%)%])', function(x)\n    \
    \                return x:gsub('(%[(%)%])', function(y)\n                    \
    \  return y:gsub('(%[(%)%])', function(z)\n                        return z:gsub('(%[(%)%])',\
    \ function(w)\n                          return w:gsub('(%[(%)%])', function(x)\n\
    \                            return x:gsub('(%[(%)%])', function(y)\n        \
    \                      return y:gsub('(%[(%)%])', function(z)\n              \
    \                  return z:gsub('(%[(%)%])', function(w)\n                  \
    \                return w:gsub('(%[(%)%])', function(x)\n                    \
    \                return x:gsub('(%[(%)%])', function(y)\n                    \
    \                  return y:gsub('(%[(%)%])', function(z)\n                  \
    \                      return z:gsub('(%[(%)%])', function(w)\n              \
    \                            return w:gsub('(%[(%)%])', function(x)\n        \
    \                                return x:gsub('(%[(%)%])', function(y)\n    \
    \                                                      return y:gsub('(%[(%)%])',\
    \ function(z)\n                                                            return\
    \ z:gsub('(%[(%)%])', function(w)\n                                          \
    \                    return w:gsub('(%[(%)%])', function(x)\n                \
    \                                                return x:gsub('(%[(%)%])', function(y)\n\
    \                                                                  return y:gsub('(%[(%)%])',\
    \ function(z)\n                                                              \
    \      return z:gsub('(%[(%)%])', function(w)\n                              \
    \                                        return w:gsub('(%[(%)%])', function(x)\n\
    \                                                                        return\
    \ x\n                                                                  })\n  \
    \                                                            })\n            \
    \                                                end)\n                      \
    \                                    end)\n                                  \
    \                      end)\n                                                \
    \      end)\n                                                    end)\n      \
    \                                            end)\n                          \
    \                      end)\n                                              end)\n\
    \                                            end)\n                          \
    \                end)\n                                        end)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8lnpkfh2.lua:37: ''end'' expected (to close ''function'' at
    line 35) near ''}''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group_levels = {}\n  local paren_group_level_index\
    \ = 1\n  local paren_group_stack = {}\n  local paren_group_stack_index = 1\n \
    \ local paren_group_level = 0\n  local paren_group_level_index = 1\n  local paren_group_level_stack\
    \ = {}\n  local paren_group_level_stack_index = 1\n  local paren_group_level_stack_index\
    \ = 1\n  local paren_group_level_stack_index = 1\n  local paren_group_level_stack_index\
    \ = 1\n  local paren_group_level_stack_index = 1\n  local paren_group_level_stack_index\
    \ = 1\n  local paren_group_level_stack_index = 1\n  local paren_group_level_stack_index\
    \ = 1\n  local paren_group_level_stack_index = 1\n  local paren_group_level_stack_index\
    \ = 1\n  local paren_group_level_stack_index = 1\n  local paren_group_level_stack_index\
    \ = 1\n  local paren_group_level_stack_index = 1\n  local paren_group_level_stack_index\
    \ = 1\n  local paren_group_level_stack_index = 1\n  local paren_group_level_stack_index\
    \ = 1\n  local paren_group_level_stack_index = 1\n  local paren_group_level_stack_index\
    \ = 1\n  local paren_group_level_stack_index = 1\n  local paren_group_level_stack_index\
    \ = 1\n  local paren_group_level_stack_index = 1\n  local paren_group_level_stack_index\
    \ = 1\n  local paren_group_level_stack_index = 1\n  local paren_group_level_stack_index\
    \ = 1\n  local paren_group_level_stack_index = 1\n  local paren_group_level_stack_index\
    \ = 1\n  local paren_group_level_stack_index = 1\n  local paren_group_level_stack_index\
    \ = 1\n  local paren_group_level_stack_index = 1\n  local paren_group_level_stack_index\
    \ = 1\n  local paren_group_level_stack_index = 1\n  local paren_group_level_stack_index\
    \ = 1\n  local paren_group_level_stack_index = 1\n  local paren_group_level_stack_index\
    \ = 1\n  local paren_group_level_stack_index = 1\n  local paren_group_level_stack_index\
    \ = 1\n  local paren_group_level_stack_index = 1\n  local paren_group_level_stack_index\
    \ = 1\n  local paren_group_level_stack_index = 1\n  local paren_group_level_stack_index\
    \ = 1\n  local paren_group_level_stack_index = 1\n  local paren_group_level_stack_index\
    \ = 1\n  local paren\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbpvbc9p_.lua:70: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_nesting = 0\n\
    \  local paren_groups = {}\n  local paren_group_index = 1\n  local paren_group_nesting\
    \ = 1\n  local paren_group_level = 1\n  local paren_group_nesting_level = 1\n\
    \  local paren_group_nesting_level_count = 0\n  local paren_group_nesting_level_max\
    \ = 0\n  local paren_group_nesting_level_max_count = 0\n  local paren_group_nesting_level_max_index\
    \ = 0\n  local paren_group_nesting_level_max_count = 0\n  local paren_group_nesting_level_max_index\
    \ = 0\n  local paren_group_nesting_level_max_count = 0\n  local paren_group_nesting_level_max_index\
    \ = 0\n  local paren_group_nesting_level_max_count = 0\n  local paren_group_nesting_level_max_index\
    \ = 0\n  local paren_group_nesting_level_max_count = 0\n  local paren_group_nesting_level_max_index\
    \ = 0\n  local paren_group_nesting_level_max_count = 0\n  local paren_group_nesting_level_max_index\
    \ = 0\n  local paren_group_nesting_level_max_count = 0\n  local paren_group_nesting_level_max_index\
    \ = 0\n  local paren_group_nesting_level_max_count = 0\n  local paren_group_nesting_level_max_index\
    \ = 0\n  local paren_group_nesting_level_max_count = 0\n  local paren_group_nesting_level_max_index\
    \ = 0\n  local paren_group_nesting_level_max_count = 0\n  local paren_group_nesting_level_max_index\
    \ = 0\n  local paren_group_nesting_level_max_count = 0\n  local paren_group_nesting_level_max_index\
    \ = 0\n  local paren_group_nesting_level_max_count = 0\n  local paren_group_nesting_level_max_index\
    \ = 0\n  local paren_group_nesting_level_max_count = 0\n  local paren_group_nesting_level_max_index\
    \ = 0\n  local paren_group_nesting_level_max_count = 0\n  local paren_group_nesting_level_max_index\
    \ = 0\n  local paren_group_nesting_level_max_count = 0\n  local paren_group_nesting_level_max_index\
    \ = 0\n  local paren_group_nesting_level_max_count = 0\n  local paren_group_nesting_level_max_index\
    \ = 0\n  local paren_group_nesting_level_max_count = 0\n  local paren_group_nesting_level_max_index\
    \ = 0\n  local paren_group_nesting_level_max_count = 0\n  local paren_group_nesting_level_max_index\
    \ = 0\n  local paren_group_nesting_level_max_count = 0\n  \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpimvppb9y.lua:64: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  for paren\
    \ in string.gmatch(paren_string, '%[(%a+)%]') do\n    paren_stack[#paren_stack\
    \ + 1] = paren\n    level = level + 1\n    if paren == '(' and level > max_level\
    \ then\n      max_level = level\n    end\n  end\n  local result = {max_level}\n\
    \  for i = 1, #paren_stack do\n    local paren = paren_stack[i]\n    local level\
    \ = paren_stack[i + 1] - paren\n    if level > result[#result] then\n      result[#result]\
    \ = level\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp94389g8d.lua:31:\
    \ expected: {2, 3, 1, 3}\nactual: {0}\nstack traceback:\n\t/tmp/tmp94389g8d.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local level = 0\n  local paren_count = 0\n  for paren\
    \ in string.gmatch(paren_string, '%[(%a*)%]') do\n    paren_count = paren_count\
    \ + 1\n    levels[paren_count] = level\n    level = level + 1\n  end\n  levels[#levels\
    \ + 1] = level\n  return levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpram00xhb.lua:22:\
    \ expected: {2, 3, 1, 3}\nactual: {0}\nstack traceback:\n\t/tmp/tmpram00xhb.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  for paren in string.gmatch(paren_string, '%[()]+') do\n    paren_stack[paren_level]\
    \ = paren\n    paren_level = paren_level + 1\n  end\n  for paren in paren_stack\
    \ do\n    paren_groups[paren] = paren_groups[paren] or 0\n    paren_groups[paren]\
    \ = paren_groups[paren] + 1\n  end\n  local max_level = 0\n  local max_group =\
    \ 0\n  for paren in pairs(paren_groups) do\n    if paren_groups[paren] > max_group\
    \ then\n      max_level = paren\n      max_group = paren_groups[paren]\n    end\n\
    \  end\n  return max_level, max_group\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg4qnavua.lua:14:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpg4qnavua.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpg4qnavua.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_levels = {}\n  local paren_level = 0\n\
    \  local paren_nesting = 0\n  local paren_level_string = ''\n  local paren_nesting_string\
    \ = ''\n  local paren_nesting_level = 0\n  local paren_level_string_count = 0\n\
    \  local paren_nesting_level_count = 0\n  local paren_level_max_count = 0\n  local\
    \ paren_nesting_level_max_count = 0\n  local paren_level_max_count_string = ''\n\
    \  local paren_nesting_level_max_count_string = ''\n  local paren_level_max_count_string_count\
    \ = 0\n  local paren_nesting_level_max_count_string_count = 0\n  local paren_level_max_count_string_count_string\
    \ = ''\n  local paren_nesting_level_max_count_string_count_string = ''\n  local\
    \ paren_level_max_count_string_count_string_count = 0\n  local paren_nesting_level_max_count_string_count_string_count\
    \ = 0\n  local paren_level_max_count_string_count_string_count = 0\n  local paren_level_max_count_string_count_string_count\
    \ = 0\n  local paren_level_max_count_string_count = 0\n  local paren_nesting_level_max_count_string_count\
    \ = 0\n  local paren_level_max_count_string_count = 0\n  local paren_nesting_level_max_count_string_count\
    \ = 0\n  local paren_level_max_count_string_count = 0\n  local paren_nesting_level_max_count_string_count\
    \ = 0\n  local paren_level_max_count_string_count = 0\n  local paren_nesting_level_max_count_string_count\
    \ = 0\n  local paren_level_max_count_string_count = 0\n  local paren_nesting_level_max_count_string_count\
    \ = 0\n  local paren_level_max_count_string_count = 0\n  local paren_nesting_level_max_count_string_count\
    \ = 0\n  local paren_level_max_count_string_count = 0\n  local paren_nesting_level_max_count_string_count\
    \ = 0\n  local paren_level_max_count_string_count = 0\n  local paren_nesting_level_max_count_string_count\
    \ = 0\n  local paren_level_max_count_string_count = 0\n  local paren_nesting_level_max_count_string_count\
    \ = 0\n  local paren_level_max_count_string_count = 0\n  local paren_nesting_level_max_count_string_count\
    \ = 0\n  local paren_level_max_count_string_count = 0\n  local paren_nesting_level_max_count_string_count\
    \ = 0\n  local paren_level_max_count_string_count = 0\n  local paren_nesting_level_max_count_string_count\
    \ = 0\n  local paren_level_max_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj60x4mhw.lua:62: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_count = 0\n  local paren_level = 0\n\
    \  local paren_groups = {}\n  local paren_group_count = {}\n  local paren_group_level\
    \ = {}\n  local paren_group_stack = {}\n  local paren_group_level_count = {}\n\
    \  local paren_group_level_stack = {}\n  local paren_group_level_stack_count =\
    \ {}\n  local paren_group_level_stack_count_max = {}\n  local paren_group_level_stack_count_max_index\
    \ = {}\n  local paren_group_level_stack_count_max_index = {}\n  local paren_group_level_stack_count_max_index\
    \ = {}\n  local paren_group_level_stack_count_max_index = {}\n  local paren_group_level_stack_count_max_index\
    \ = {}\n  local paren_group_level_stack_count_max_index = {}\n  local paren_group_level_stack_count_max_index\
    \ = {}\n  local paren_group_level_stack_count_max_index = {}\n  local paren_group_level_stack_count_max_index\
    \ = {}\n  local paren_group_level_stack_count_max_index = {}\n  local paren_group_level_stack_count_max_index\
    \ = {}\n  local paren_group_level_stack_count_max_index = {}\n  local paren_group_level_stack_count_max_index\
    \ = {}\n  local paren_group_level_stack_count_max_index = {}\n  local paren_group_level_stack_count_max_index\
    \ = {}\n  local paren_group_level_stack_count_max_index = {}\n  local paren_group_level_stack_count_max_index\
    \ = {}\n  local paren_group_level_stack_count_max_index = {}\n  local paren_group_level_stack_count_max_index\
    \ = {}\n  local paren_group_level_stack_count_max_index = {}\n  local paren_group_level_stack_count_max_index\
    \ = {}\n  local paren_group_level_stack_count_max_index = {}\n  local paren_group_level_stack_count_max_index\
    \ = {}\n  local paren_group_level_stack_count_max_index = {}\n  local paren_group_level_stack_count_max_index\
    \ = {}\n  local paren_group_level_stack_count_max_index = {}\n  local paren_group_level_stack_count_max_index\
    \ = {}\n  local paren_group_level_stack_count_max_index = {}\n  local paren_group_level_stack_count_max_index\
    \ = {}\n  local paren_group_level_stack_count_max_index = {}\n  local paren_group_level_stack_count_max_index\
    \ = {}\n  local paren_group_level_stack_count_max_index = {}\n  local paren_group_level_stack_count_max_index\
    \ = {}\n  local paren_group_level_stack_count_max_index = {}\n  local paren_group_level_stack_count_max_index\
    \ = {}\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkysvrgrg.lua:63: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_groups = {}\n  local paren_group_index = 1\n  local paren_group_stack\
    \ = {}\n  local paren_group_levels = {}\n  local paren_group_groups = {}\n  local\
    \ paren_group_group_index = 1\n  local paren_group_group_stack = {}\n  local paren_group_group_levels\
    \ = {}\n  local paren_group_group_groups = {}\n  local paren_group_group_group_index\
    \ = 1\n  local paren_group_group_group_stack = {}\n  local paren_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_groups = {}\n  local paren_group_group_group_group_index\
    \ = 1\n  local paren_group_group_group_group_stack = {}\n  local paren_group_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_group_groups = {}\n  local paren_group_group_group_group_group_index\
    \ = 1\n  local paren_group_group_group_group_group_stack = {}\n  local paren_group_group_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_group_group_groups = {}\n  local paren_group_group_group_group_group_group_index\
    \ = 1\n  local paren_group_group_group_group_group_group_stack = {}\n  local paren_group_group_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_group_group_groups = {}\n  local paren_group_group_group_group_group_group_index\
    \ = 1\n  local paren_group_group_group_group_group_group_stack = {}\n  local paren_group_group_group_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_group_group_group_groups = {}\n  local\
    \ paren_group_group_group_group_group_group_group_index = 1\n  local paren_group_group_group_group_group_group_group_stack\
    \ = {}\n  local paren_group_group_group_group_group_group_group_levels = {}\n\
    \  local paren_group_group_group_group_group_group_group_groups = {}\n  local\
    \ paren_group_group_group_group_group_group_group_group_index = 1\n  local paren_group_group_group_group_group_group_group_group_stack\
    \ = {}\n  local paren_group_group_group_group_group_group_group_group_levels =\
    \ {}\n  local paren_group_group_group_group_group_group_group_group_groups = {}\n\
    \  local paren_group_group_group_group_group_group_group_group_group_index = 1\n\
    \  local paren_group_group_group_group_group_group_group_group_group_group_stack\
    \ = {}\n  local paren_group_group_group_group_group_group_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_group_group_group_group_group_group_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd0axmrn4.lua:61: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_max_level =\
    \ 0\n  for paren in string.gmatch(paren_string, '%[(%a)]+') do\n    local paren_level\
    \ = paren_level + 1\n    local paren_max_level = math.max(paren_max_level, paren_level)\n\
    \    paren_stack[paren_level] = paren\n  end\n  local max_level = paren_max_level\n\
    \  local max_level_paren = nil\n  for paren_level, _ in pairs(paren_stack) do\n\
    \    local paren = paren_stack[paren_level]\n    if paren == '(' or paren == ')'\
    \ then\n      local level_diff = paren_level - max_level\n      if level_diff\
    \ > 0 then\n        max_level = paren_level\n        max_level_paren = paren\n\
    \      end\n    end\n  end\n  return max_level_paren\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb501w_08.lua:33:\
    \ expected: {2, 3, 1, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmpb501w_08.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local max_level_paren_string = ''\n  for paren_group\
    \ in string.gmatch(paren_string, '%w+') do\n    local level_of_nesting = #paren_group\n\
    \    if level_of_nesting > max_level then\n      max_level = level_of_nesting\n\
    \      max_level_paren_string = paren_group\n    end\n  end\n  return max_level,\
    \ max_level_paren_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp662jnkqc.lua:22:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmp662jnkqc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group_count = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_stack = {}\n  local paren_group_levels = {}\n  local\
    \ paren_group_levels_index = 1\n  local paren_group_levels_count = 1\n  local\
    \ paren_group_levels_stack = {}\n  local paren_group_levels_level = 1\n  local\
    \ paren_group_levels_levels = {}\n  local paren_group_levels_levels_index = 1\n\
    \  local paren_group_levels_levels_count = 1\n  local paren_group_levels_levels_stack\
    \ = {}\n  local paren_group_levels_levels_level = 1\n  local paren_group_levels_levels_levels\
    \ = {}\n  local paren_group_levels_levels_levels_index = 1\n  local paren_group_levels_levels_levels_count\
    \ = 1\n  local paren_group_levels_levels_levels_stack = {}\n  local paren_group_levels_levels_levels_level\
    \ = 1\n  local paren_group_levels_levels_levels_levels = {}\n  local paren_group_levels_levels_levels_levels_index\
    \ = 1\n  local paren_group_levels_levels_levels_levels_count = 1\n  local paren_group_levels_levels_levels_levels_stack\
    \ = {}\n  local paren_group_levels_levels_levels_levels_level = 1\n  local paren_group_levels_levels_levels_levels_levels\
    \ = {}\n  local paren_group_levels_levels_levels_levels_levels_index = 1\n  local\
    \ paren_group_levels_levels_levels_levels_levels_count = 1\n  local paren_group_levels_levels_levels_levels_levels_stack\
    \ = {}\n  local paren_group_levels_levels_levels_levels_levels_level = 1\n  local\
    \ paren_group_levels_levels_levels_levels_levels_levels = {}\n  local paren_group_levels_levels_levels_levels_levels_levels_index\
    \ = 1\n  local paren_group_levels_levels_levels_levels_levels_levels_count = 1\n\
    \  local paren_group_levels_levels_levels_levels_levels_levels_stack = {}\n  local\
    \ paren_group_levels_levels_levels_levels_levels_levels_level = 1\n  local paren_group_levels_levels_levels_levels_levels_levels_levels\
    \ = {}\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpopzpk_zp.lua:55: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local max_level = 0\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a+)%]') do\n    local level = #paren_stack\n    if level > max_level then\n\
    \      max_level = level\n    end\n    table.insert(paren_stack, paren)\n  end\n\
    \  return max_level\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuutmoc8_.lua:22:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpuutmoc8_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local paren_stack = { }\n  local paren_level = 1\n  local\
    \ paren_open = 1\n  local paren_close = 1\n  local paren_level_count = 0\n  local\
    \ paren_open_count = 0\n  local paren_close_count = 0\n  local paren_level_string\
    \ = ''\n  local paren_open_string = ''\n  local paren_close_string = ''\n  local\
    \ paren_level_string_count = 0\n  local paren_open_string_count = 0\n  local paren_close_string_count\
    \ = 0\n  local paren_level_string_count = 0\n  local paren_open_string_count =\
    \ 0\n  local paren_close_string_count = 0\n  local paren_level_string = ''\n \
    \ local paren_open_string = ''\n  local paren_close_string = ''\n  local paren_level_string_count\
    \ = 0\n  local paren_open_string_count = 0\n  local paren_close_string_count =\
    \ 0\n  local paren_level_string_count = 0\n  local paren_open_string_count = 0\n\
    \  local paren_close_string_count = 0\n  local paren_level_string = ''\n  local\
    \ paren_open_string = ''\n  local paren_close_string = ''\n  local paren_level_string_count\
    \ = 0\n  local paren_open_string_count = 0\n  local paren_close_string_count =\
    \ 0\n  local paren_level_string_count = 0\n  local paren_open_string_count = 0\n\
    \  local paren_close_string_count = 0\n  local paren_level_string = ''\n  local\
    \ paren_open_string = ''\n  local paren_close_string = ''\n  local paren_level_string_count\
    \ = 0\n  local paren_open_string_count = 0\n  local paren_close_string_count =\
    \ 0\n  local paren_level_string_count = 0\n  local paren_open_string_count = 0\n\
    \  local paren_close_string_count = 0\n  local paren_level_string = ''\n  local\
    \ paren_open_string = ''\n  local paren_close_string = ''\n  local paren_level_string_count\
    \ = 0\n  local paren_open_string_count = 0\n  local paren_close_string_count =\
    \ 0\n  local paren_level_string_count = 0\n  local paren_open_string_count = 0\n\
    \  local paren_close_string_count = 0\n  local paren_level_string = ''\n  local\
    \ paren_open_string = ''\n  local paren_close_string = ''\n  local paren_level_string_count\
    \ = 0\n  local paren_open_string_count = 0\n  local paren_close_string_count =\
    \ 0\n  local paren_level_string_count = 0\n  \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcct6h8yb.lua:77: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local max_level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_level = 0\n  local paren_level_stack = {}\n  local paren_level_stack_index\
    \ = 0\n  local paren_level_stack_index2 = 0\n  local paren_level_stack_index3\
    \ = 0\n  local paren_level_stack_index4 = 0\n  local paren_level_stack_index5\
    \ = 0\n  local paren_level_stack_index6 = 0\n  local paren_level_stack_index7\
    \ = 0\n  local paren_level_stack_index8 = 0\n  local paren_level_stack_index9\
    \ = 0\n  local paren_level_stack_index10 = 0\n  local paren_level_stack_index11\
    \ = 0\n  local paren_level_stack_index12 = 0\n  local paren_level_stack_index13\
    \ = 0\n  local paren_level_stack_index14 = 0\n  local paren_level_stack_index15\
    \ = 0\n  local paren_level_stack_index16 = 0\n  local paren_level_stack_index17\
    \ = 0\n  local paren_level_stack_index18 = 0\n  local paren_level_stack_index19\
    \ = 0\n  local paren_level_stack_index20 = 0\n  local paren_level_stack_index21\
    \ = 0\n  local paren_level_stack_index22 = 0\n  local paren_level_stack_index23\
    \ = 0\n  local paren_level_stack_index24 = 0\n  local paren_level_stack_index25\
    \ = 0\n  local paren_level_stack_index26 = 0\n  local paren_level_stack_index27\
    \ = 0\n  local paren_level_stack_index28 = 0\n  local paren_level_stack_index29\
    \ = 0\n  local paren_level_stack_index30 = 0\n  local paren_level_stack_index31\
    \ = 0\n  local paren_level_stack_index32 = 0\n  local paren_level_stack_index33\
    \ = 0\n  local paren_level_stack_index34 = 0\n  local paren_level_stack_index35\
    \ = 0\n  local paren_level_stack_index36 = 0\n  local paren_level_stack_index37\
    \ = 0\n  local paren_level_stack_index38 = 0\n  local paren_level_stack_index39\
    \ = 0\n  local paren_level_stack_index40 = 0\n  local paren_level_stack_index41\
    \ = 0\n  local paren_level_stack_index42 = 0\n  local paren_level_stack_index43\
    \ = 0\n  local paren_level_stack_index44 = 0\n  local paren_level_stack_index45\
    \ = 0\n  local paren_level_stack_index46 = 0\n  local paren_level_stack_index47\
    \ = 0\n  local paren\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm6ss928d.lua:70: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group_count = 1\n  local paren_group_level\
    \ = 0\n  local paren_group_stack = {}\n  local paren_group_levels = {}\n  local\
    \ paren_group_levels_index = 1\n  local paren_group_levels_count = 1\n  local\
    \ paren_group_levels_index = 1\n  local paren_group_levels_count = 1\n  local\
    \ paren_group_levels_index = 1\n  local paren_group_levels_count = 1\n  local\
    \ paren_group_levels_index = 1\n  local paren_group_levels_count = 1\n  local\
    \ paren_group_levels_index = 1\n  local paren_group_levels_count = 1\n  local\
    \ paren_group_levels_index = 1\n  local paren_group_levels_count = 1\n  local\
    \ paren_group_levels_index = 1\n  local paren_group_levels_count = 1\n  local\
    \ paren_group_levels_index = 1\n  local paren_group_levels_count = 1\n  local\
    \ paren_group_levels_index = 1\n  local paren_group_levels_count = 1\n  local\
    \ paren_group_levels_index = 1\n  local paren_group_levels_count = 1\n  local\
    \ paren_group_levels_index = 1\n  local paren_group_levels_count = 1\n  local\
    \ paren_group_levels_index = 1\n  local paren_group_levels_count = 1\n  local\
    \ paren_group_levels_index = 1\n  local paren_group_levels_count = 1\n  local\
    \ paren_group_levels_index = 1\n  local paren_group_levels_count = 1\n  local\
    \ paren_group_levels_index = 1\n  local paren_group_levels_count = 1\n  local\
    \ paren_group_levels_index = 1\n  local paren_group_levels_count = 1\n  local\
    \ paren_group_levels_index = 1\n  local paren_group_levels_count = 1\n  local\
    \ paren_group_levels_index = 1\n  local paren_group_levels_count = 1\n  local\
    \ paren_group_levels_index = 1\n  local paren_group_levels_count = 1\n  local\
    \ paren_group_levels_index = 1\n  local paren_group_levels_count = 1\n  local\
    \ paren_group_levels_index = 1\n  local paren_group_levels_count = 1\n  local\
    \ paren_group_levels_index = 1\n  local paren_group_levels_count = 1\n  local\
    \ paren_group_levels_index = 1\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvrlwimuf.lua:70: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local level = 0\n  local paren_level = 0\n  local\
    \ paren_nesting = 0\n  local paren_levels = {}\n  local paren_levels_string =\
    \ ''\n  local paren_level_stack = {}\n  local paren_level_stack_string = ''\n\
    \  local paren_level_stack_count = 0\n  local paren_level_stack_string_count =\
    \ 0\n  local paren_level_stack_string = ''\n  local paren_level_stack_string_count\
    \ = 0\n  local paren_level_stack_string_count = 0\n  local paren_level_stack_string_count\
    \ = 0\n  local paren_level_stack_string_count = 0\n  local paren_level_stack_string_count\
    \ = 0\n  local paren_level_stack_string_count = 0\n  local paren_level_stack_string_count\
    \ = 0\n  local paren_level_stack_string_count = 0\n  local paren_level_stack_string_count\
    \ = 0\n  local paren_level_stack_string_count = 0\n  local paren_level_stack_string_count\
    \ = 0\n  local paren_level_stack_string_count = 0\n  local paren_level_stack_string_count\
    \ = 0\n  local paren_level_stack_string_count = 0\n  local paren_level_stack_string_count\
    \ = 0\n  local paren_level_stack_string_count = 0\n  local paren_level_stack_string_count\
    \ = 0\n  local paren_level_stack_string_count = 0\n  local paren_level_stack_string_count\
    \ = 0\n  local paren_level_stack_string_count = 0\n  local paren_level_stack_string_count\
    \ = 0\n  local paren_level_stack_string_count = 0\n  local paren_level_stack_string_count\
    \ = 0\n  local paren_level_stack_string_count = 0\n  local paren_level_stack_string_count\
    \ = 0\n  local paren_level_stack_string_count = 0\n  local paren_level_stack_string_count\
    \ = 0\n  local paren_level_stack_string_count = 0\n  local paren_level_stack_string_count\
    \ = 0\n  local paren_level_stack_string_count = 0\n  local paren_level_stack_string_count\
    \ = 0\n  local paren_level_stack_string_count = 0\n  local paren_level_stack_string_count\
    \ = 0\n  local paren_level_stack_string_count = 0\n  local paren_level_stack_string_count\
    \ = 0\n  local paren_level_stack_string_count = 0\n  local paren_level_stack_string_count\
    \ = 0\n  local paren_level_stack_string_count = 0\n  local paren_level_stack_string_count\
    \ = 0\n  local paren_level_stack_string_count = 0\n  local paren_level_stack_string_count\
    \ = 0\n  local paren_level_stack_string_count = 0\n  local paren_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpka0_523w.lua:70: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_stack_size\
    \ = #paren_string\n  local paren_stack_index = 1\n  local paren_stack_max_index\
    \ = 1\n  local paren_stack_max_index_size = #paren_stack\n  local paren_stack_max_index_level\
    \ = 0\n  local paren_stack_max_index_level_stack = {}\n  local paren_stack_max_index_level_stack_size\
    \ = #paren_stack_max_index_level\n  local paren_stack_max_index_level_stack_index\
    \ = 1\n  local paren_stack_max_index_level_stack_index_size = #paren_stack_max_index_level_stack\n\
    \  local paren_stack_max_index_level_stack_index_level = 0\n  local paren_stack_max_index_level_stack_index_level_stack\
    \ = {}\n  local paren_stack_max_index_level_stack_index_level_stack_size = #paren_stack_max_index_level_stack_index_level\n\
    \  local paren_stack_max_index_level_stack_index_level_stack_index = 1\n  local\
    \ paren_stack_max_index_level_stack_index_level_stack_index_size = #paren_stack_max_index_level_stack_index_level_stack\n\
    \  local paren_stack_max_index_level_stack_index_level_stack_index_level = 0\n\
    \  local paren_stack_max_index_level_stack_index_level_stack_index_level_stack\
    \ = {}\n  local paren_stack_max_index_level_stack_index_level_stack_index_level_stack_size\
    \ = #paren_stack_max_index_level_stack_index_level_stack_index_level\n  local\
    \ paren_stack_max_index_level_stack_index_level_stack_index_level_stack_index\
    \ = 1\n  local paren_stack_max_index_level_stack_index_level_stack_index_level_stack_index_size\
    \ = #paren_stack_max_index_level_stack_index_level_stack_index_level_stack\n \
    \ local paren_stack_max_index_level_stack_index_level_stack_index_level_stack_index_level\
    \ = 0\n  local paren_stack_max_index_level_stack_index_level_stack_index_level_stack_index_level_stack\
    \ = {}\n  local paren_stack_max_index_level_stack_index_level_stack_index_level_stack_index_level_stack_size\
    \ = #paren_stack_max_index_level_stack_index_level_stack_index_level_stack_index_level_stack\n\
    \  local paren_stack_max_index_level_stack_index_level_stack_index_level_stack_index_level_stack_index\
    \ = 1\n  local paren_stack_max_index_level_stack_index_level_stack_index_level_stack_index_level_stack_index_size\
    \ = #paren_stack_max_index_level_stack_index_level_stack_index_level_stack_index_level_stack_index_level_stack\n\
    \  local paren_stack_max_index_level_stack_index_level_stack_index_level_stack_index_level_stack_index_level\
    \ = 0\n  local paren_stack_max_index_level_stack_index_level_stack_index_level_stack_index_level_stack\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpi3r4072o.lua:45: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_max_level = 0\n  local paren_max_level_stack = {}\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_index2 = 0\n  local paren_max_level_stack_index3\
    \ = 0\n  local paren_max_level_stack_index4 = 0\n  local paren_max_level_stack_index5\
    \ = 0\n  local paren_max_level_stack_index6 = 0\n  local paren_max_level_stack_index7\
    \ = 0\n  local paren_max_level_stack_index8 = 0\n  local paren_max_level_stack_index9\
    \ = 0\n  local paren_max_level_stack_index10 = 0\n  local paren_max_level_stack_index11\
    \ = 0\n  local paren_max_level_stack_index12 = 0\n  local paren_max_level_stack_index13\
    \ = 0\n  local paren_max_level_stack_index14 = 0\n  local paren_max_level_stack_index15\
    \ = 0\n  local paren_max_level_stack_index16 = 0\n  local paren_max_level_stack_index17\
    \ = 0\n  local paren_max_level_stack_index18 = 0\n  local paren_max_level_stack_index19\
    \ = 0\n  local paren_max_level_stack_index20 = 0\n  local paren_max_level_stack_index21\
    \ = 0\n  local paren_max_level_stack_index22 = 0\n  local paren_max_level_stack_index23\
    \ = 0\n  local paren_max_level_stack_index24 = 0\n  local paren_max_level_stack_index25\
    \ = 0\n  local paren_max_level_stack_index26 = 0\n  local paren_max_level_stack_index27\
    \ = 0\n  local paren_max_level_stack_index28 = 0\n  local paren_max_level_stack_index29\
    \ = 0\n  local paren_max_level_stack_index30 = 0\n  local paren_max_level_stack_index31\
    \ = 0\n  local paren_max_level_stack_index32 = 0\n  local paren_max_level_stack_index33\
    \ = 0\n  local paren_max_level_stack_index34 = 0\n  local paren_max_level_stack_index35\
    \ = 0\n  local paren_max_level_stack_index36 = 0\n  local paren_max_level_stack_index37\
    \ = 0\n  local paren_max_level_stack_index38 = 0\n  local paren_max_level_stack_index39\
    \ = 0\n  local paren_max_level_stack_index40 = 0\n  local paren_max_level_stack_index41\
    \ = 0\n  local paren_max_level_stack_index42 = 0\n  local paren_max_level_stack_index43\
    \ = 0\n  local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf9gx19ae.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_max_level =\
    \ 0\n  local paren_max_level_stack = {}\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a)]+') do\n    if paren == '(' or paren == ')' then\n      paren_level\
    \ = paren_level + 1\n      paren_max_level = math.max(paren_max_level, paren_level)\n\
    \      paren_max_level_stack[paren_level] = paren_max_level\n    elseif paren\
    \ == ')' then\n      paren_level = paren_level - 1\n      if paren_level == 0\
    \ then\n        paren_max_level = paren_max_level_stack[paren_level]\n      end\n\
    \    end\n    table.insert(paren_stack, paren)\n  end\n  return paren_max_level\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1_lzv0h.lua:30:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpw1_lzv0h.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_groups = {}\n  local paren_group_levels = {}\n  local paren_group_groups\
    \ = {}\n  local paren_group_group_levels = {}\n  local paren_group_group_groups\
    \ = {}\n  local paren_group_group_group_levels = {}\n  local paren_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_levels = {}\n  local paren_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_levels = {}\n  local paren_group_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_levels = {}\n  local paren_group_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_levels = {}\n  local paren_group_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_levels = {}\n  local paren_group_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_levels = {}\n  local paren_group_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_levels = {}\n  local paren_group_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_levels = {}\n  local paren_group_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_levels = {}\n  local paren_group_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_levels = {}\n  local paren_group_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_levels = {}\n  local paren_group_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_levels = {}\n  local paren_group_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_levels = {}\n  local paren_group_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_levels = {}\n  local paren_group_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_levels = {}\n  local paren_group_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_levels = {}\n  local paren_group_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_levels = {}\n  local paren_group_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_levels = {}\n  local paren_group_group_group_group_group_groups\
    \ = {}\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0hqxjopi.lua:63: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = {}\n  local paren_level_count\
    \ = {}\n  local paren_level_index = {}\n  local paren_level_max_index = {}\n \
    \ local paren_level_max_index = {}\n  local paren_level_max_index = {}\n  local\
    \ paren_level_max_index = {}\n  local paren_level_max_index = {}\n  local paren_level_max_index\
    \ = {}\n  local paren_level_max_index = {}\n  local paren_level_max_index = {}\n\
    \  local paren_level_max_index = {}\n  local paren_level_max_index = {}\n  local\
    \ paren_level_max_index = {}\n  local paren_level_max_index = {}\n  local paren_level_max_index\
    \ = {}\n  local paren_level_max_index = {}\n  local paren_level_max_index = {}\n\
    \  local paren_level_max_index = {}\n  local paren_level_max_index = {}\n  local\
    \ paren_level_max_index = {}\n  local paren_level_max_index = {}\n  local paren_level_max_index\
    \ = {}\n  local paren_level_max_index = {}\n  local paren_level_max_index = {}\n\
    \  local paren_level_max_index = {}\n  local paren_level_max_index = {}\n  local\
    \ paren_level_max_index = {}\n  local paren_level_max_index = {}\n  local paren_level_max_index\
    \ = {}\n  local paren_level_max_index = {}\n  local paren_level_max_index = {}\n\
    \  local paren_level_max_index = {}\n  local paren_level_max_index = {}\n  local\
    \ paren_level_max_index = {}\n  local paren_level_max_index = {}\n  local paren_level_max_index\
    \ = {}\n  local paren_level_max_index = {}\n  local paren_level_max_index = {}\n\
    \  local paren_level_max_index = {}\n  local paren_level_max_index = {}\n  local\
    \ paren_level_max_index = {}\n  local paren_level_max_index = {}\n  local paren_level_max_index\
    \ = {}\n  local paren_level_max_index = {}\n  local paren_level_max_index = {}\n\
    \  local paren_level_max_index = {}\n  local paren_level_max_index = {}\n  local\
    \ paren_level_max_index = {}\n  local paren_level_max_index = {}\n  local paren_level_max_index\
    \ = {}\n  local paren_level_max_index = {}\n  local paren_level_max_index = {}\n\
    \  local paren_level_max_index = {}\n  local paren_level_max_index = {}\n  local\
    \ paren_level_max_index = {}\n  local paren_level_\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8k00ds1y.lua:74: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = { 0 }\n  local paren_level = 0\n  local paren_groups =\
    \ {}\n  local paren_group_index = 1\n  local paren_group_count = 1\n  local paren_group_max_level\
    \ = 0\n  local paren_group_max_level_char = ''\n  local paren_group_max_level_char_index\
    \ = 0\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_counts\
    \ = {}\n  local paren_group_max_level_char_counts_index = 0\n  local paren_group_max_level_char_counts_count\
    \ = 0\n  local paren_group_max_level_char_counts_index = 0\n  local paren_group_max_level_char_counts_count\
    \ = 0\n  local paren_group_max_level_char_counts_index = 0\n  local paren_group_max_level_char_counts_count\
    \ = 0\n  local paren_group_max_level_char_counts_index = 0\n  local paren_group_max_level_char_counts_count\
    \ = 0\n  local paren_group_max_level_char_counts_index = 0\n  local paren_group_max_level_char_counts_count\
    \ = 0\n  local paren_group_max_level_char_counts_index = 0\n  local paren_group_max_level_char_counts_count\
    \ = 0\n  local paren_group_max_level_char_counts_index = 0\n  local paren_group_max_level_char_counts_count\
    \ = 0\n  local paren_group_max_level_char_counts_index = 0\n  local paren_group_max_level_char_counts_count\
    \ = 0\n  local paren_group_max_level_char_counts_index = 0\n  local paren_group_max_level_char_counts_count\
    \ = 0\n  local paren_group_max_level_char_counts_index = 0\n  local paren_group_max_level_char_counts_count\
    \ = 0\n  local paren_group_max_level_char_counts_index = 0\n  local paren_group_max_level_char_counts_count\
    \ = 0\n  local paren_group_max_level_char_counts_index = 0\n  local paren_group_max_level_char_counts_count\
    \ = 0\n  local paren_group_max_level_char_counts_index = 0\n  local paren_group_max_level_char_counts_count\
    \ = 0\n  local paren_group_max_level_char_counts_index = 0\n  local paren_group_max_level_char_counts_count\
    \ = 0\n  local paren_group_max_level_char_counts_index = 0\n  local paren_group_max_level_char_counts_count\
    \ = 0\n  local paren_group_max_level_char_counts_index = 0\n  local paren_group_max_level_char_counts_count\
    \ = 0\n  local paren_group_max_level_char_counts_index = 0\n  local paren_group_max_level_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwh_5kguw.lua:60: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  for paren in string.gmatch(paren_string, '%[(%a)]+') do\n    local paren_level\
    \ = paren_level + 1\n    local paren_group = paren_groups[paren_level]\n    if\
    \ not paren_group then\n      paren_group = paren_groups[paren_level] = {}\n \
    \   end\n    paren_group[#paren_group + 1] = paren\n  end\n  local max_level =\
    \ 0\n  for _, paren_group in pairs(paren_groups) do\n    local max_level = math.max(max_level,\
    \ #paren_group)\n  end\n  local max_level_groups = paren_groups[max_level]\n \
    \ local max_level_group_index = 0\n  for _, paren_group in pairs(paren_groups)\
    \ do\n    local max_level_group_index = math.max(max_level_group_index, #paren_group)\n\
    \  end\n  local max_level_group_count = 1\n  for i = 1, max_level do\n    max_level_group_count\
    \ = math.max(max_level_group_count, #paren_groups[i])\n  end\n  local max_level_group_count_index\
    \ = 0\n  for i = 1, max_level do\n    max_level_group_count_index = math.max(max_level_group_count_index,\
    \ #paren_groups[i])\n  end\n  local max_level_group_count_index\n  local max_level_group_count\n\
    \  local max_level_group_count_index\n  local max_level_group_count_index\n  local\
    \ max_level_group_count_index\n  local max_level_group_count_index\n  local max_level_group_count_index\n\
    \  local max_level_group_count_index\n  local max_level_group_count_index\n  local\
    \ max_level_group_count_index\n  local max_level_group_count_index\n  local max_level_group_count_index\n\
    \  local max_level_group_count_index\n  local max_level_group_count_index\n  local\
    \ max_level_group_count_index\n  local max_level_group_count_index\n  local max_level_group_count_index\n\
    \  local max_level_group_count_index\n  local max_level_group_count_index\n  local\
    \ max_level_group_count_index\n  local max_level_group_count_index\n  local max_level_group_count_index\n\
    \  local max_level_group_count_index\n  local max_level_group_count_index\n  local\
    \ max_level_group_count_index\n  local max_level_group_count_index\n  local max_level_group_count_index\n\
    \  local max_level_group_count_index\n  local max_level_group_count_index\n  local\
    \ max_level_group_count_index\n  local max_level_group_count_index\n  local max_level_group_count_index\n\
    \  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8f60k3yk.lua:14: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group_count = 1\n  local paren_group_max_level\
    \ = 0\n  local paren_group_max_level_length = 0\n  local paren_group_max_level_char\
    \ = ''\n  local paren_group_max_level_char_length = 0\n  local paren_group_max_level_char_index\
    \ = 0\n  local paren_group_max_level_char_length = 0\n  local paren_group_max_level_char_count\
    \ = 0\n  local paren_group_max_level_char_count_index = 0\n  local paren_group_max_level_char_count_length\
    \ = 0\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_count_index\
    \ = 0\n  local paren_group_max_level_char_count_length = 0\n  local paren_group_max_level_char_count\
    \ = 0\n  local paren_group_max_level_char_count_index = 0\n  local paren_group_max_level_char_count_length\
    \ = 0\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_count_index\
    \ = 0\n  local paren_group_max_level_char_count_length = 0\n  local paren_group_max_level_char_count\
    \ = 0\n  local paren_group_max_level_char_count_index = 0\n  local paren_group_max_level_char_count_length\
    \ = 0\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_count_index\
    \ = 0\n  local paren_group_max_level_char_count_length = 0\n  local paren_group_max_level_char_count\
    \ = 0\n  local paren_group_max_level_char_count_index = 0\n  local paren_group_max_level_char_count_length\
    \ = 0\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_count_index\
    \ = 0\n  local paren_group_max_level_char_count_length = 0\n  local paren_group_max_level_char_count\
    \ = 0\n  local paren_group_max_level_char_count_index = 0\n  local paren_group_max_level_char_count_length\
    \ = 0\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_count_index\
    \ = 0\n  local paren_group_max_level_char_count_length = 0\n  local paren_group_max_level_char_count\
    \ = 0\n  local paren_group_max_level_char_count_index = 0\n  local paren_group_max_level_char_count_length\
    \ = 0\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_count_index\
    \ = 0\n  local paren_group_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_hyqzhhq.lua:63: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local max_level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  for paren in string.gmatch(paren_string, \"%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppan_qjgo.lua:11: unfinished string near ''"%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_groups = {}\n  local paren_group_index = 1\n  local paren_group_index2\
    \ = 0\n  local paren_group_index3 = 0\n  local paren_group_index4 = 0\n  local\
    \ paren_group_index5 = 0\n  local paren_group_index6 = 0\n  local paren_group_index7\
    \ = 0\n  local paren_group_index8 = 0\n  local paren_group_index9 = 0\n  local\
    \ paren_group_index10 = 0\n  local paren_group_index11 = 0\n  local paren_group_index12\
    \ = 0\n  local paren_group_index13 = 0\n  local paren_group_index14 = 0\n  local\
    \ paren_group_index15 = 0\n  local paren_group_index16 = 0\n  local paren_group_index17\
    \ = 0\n  local paren_group_index18 = 0\n  local paren_group_index19 = 0\n  local\
    \ paren_group_index20 = 0\n  local paren_group_index21 = 0\n  local paren_group_index22\
    \ = 0\n  local paren_group_index23 = 0\n  local paren_group_index24 = 0\n  local\
    \ paren_group_index25 = 0\n  local paren_group_index26 = 0\n  local paren_group_index27\
    \ = 0\n  local paren_group_index28 = 0\n  local paren_group_index29 = 0\n  local\
    \ paren_group_index30 = 0\n  local paren_group_index31 = 0\n  local paren_group_index32\
    \ = 0\n  local paren_group_index33 = 0\n  local paren_group_index34 = 0\n  local\
    \ paren_group_index35 = 0\n  local paren_group_index36 = 0\n  local paren_group_index37\
    \ = 0\n  local paren_group_index38 = 0\n  local paren_group_index39 = 0\n  local\
    \ paren_group_index40 = 0\n  local paren_group_index41 = 0\n  local paren_group_index42\
    \ = 0\n  local paren_group_index43 = 0\n  local paren_group_index44 = 0\n  local\
    \ paren_group_index45 = 0\n  local paren_group_index46 = 0\n  local paren_group_index47\
    \ = 0\n  local paren_group_index48 = 0\n  local paren_group_index49 = 0\n  local\
    \ paren_group_index50 = 0\n  local paren_group_index51 = 0\n  local paren_group_index52\
    \ = 0\n  local paren_group_index53 = 0\n  local paren_group_index54 = 0\n  \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnioc4pil.lua:75: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local max_level = 0\n  for paren in string.gmatch(paren_string,\
    \ '%w+') do\n    local level = 1\n    while paren_stack[level] ~= nil do\n   \
    \   level = level + 1\n    end\n    paren_stack[level] = paren\n    max_level\
    \ = level\n  end\n  return max_level\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxgr95qzy.lua:23:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpxgr95qzy.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group_count = 0\n  local paren_group_level\
    \ = 0\n  local paren_group_start = 0\n  local paren_group_end = 0\n  local paren_group_nesting\
    \ = 0\n  local paren_group_nesting_level = 0\n  local paren_group_nesting_start\
    \ = 0\n  local paren_group_nesting_end = 0\n  local paren_group_nesting_nesting\
    \ = 0\n  local paren_group_nesting_nesting_level = 0\n  local paren_group_nesting_nesting_start\
    \ = 0\n  local paren_group_nesting_nesting_end = 0\n  local paren_group_nesting_nesting_nesting\
    \ = 0\n  local paren_group_nesting_nesting_level = 0\n  local paren_group_nesting_nesting_start\
    \ = 0\n  local paren_group_nesting_nesting_end = 0\n  local paren_group_nesting_nesting_nesting\
    \ = 0\n  local paren_group_nesting_nesting_level = 0\n  local paren_group_nesting_nesting_start\
    \ = 0\n  local paren_group_nesting_nesting_end = 0\n  local paren_group_nesting_nesting_nesting\
    \ = 0\n  local paren_group_nesting_nesting_level = 0\n  local paren_group_nesting_nesting_start\
    \ = 0\n  local paren_group_nesting_nesting_end = 0\n  local paren_group_nesting_nesting_nesting\
    \ = 0\n  local paren_group_nesting_nesting_level = 0\n  local paren_group_nesting_nesting_start\
    \ = 0\n  local paren_group_nesting_nesting_end = 0\n  local paren_group_nesting_nesting_nesting\
    \ = 0\n  local paren_group_nesting_nesting_level = 0\n  local paren_group_nesting_nesting_start\
    \ = 0\n  local paren_group_nesting_nesting_end = 0\n  local paren_group_nesting_nesting_nesting\
    \ = 0\n  local paren_group_nesting_nesting_level = 0\n  local paren_group_nesting_nesting_start\
    \ = 0\n  local paren_group_nesting_nesting_end = 0\n  local paren_group_nesting_nesting_nesting\
    \ = 0\n  local paren_group_nesting_nesting_level = 0\n  local paren_group_nesting_nesting_start\
    \ = 0\n  local paren_group_nesting_nesting_end = 0\n  local paren_group_nesting_nesting_nesting\
    \ = 0\n  local paren_group_nesting_nesting_level\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6w07j73v.lua:62: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n\
    \  local paren_levels_stack_index2 = 0\n  local paren_levels_stack_index3 = 0\n\
    \  local paren_levels_stack_index4 = 0\n  local paren_levels_stack_index5 = 0\n\
    \  local paren_levels_stack_index6 = 0\n  local paren_levels_stack_index7 = 0\n\
    \  local paren_levels_stack_index8 = 0\n  local paren_levels_stack_index9 = 0\n\
    \  local paren_levels_stack_index10 = 0\n  local paren_levels_stack_index11 =\
    \ 0\n  local paren_levels_stack_index12 = 0\n  local paren_levels_stack_index13\
    \ = 0\n  local paren_levels_stack_index14 = 0\n  local paren_levels_stack_index15\
    \ = 0\n  local paren_levels_stack_index16 = 0\n  local paren_levels_stack_index17\
    \ = 0\n  local paren_levels_stack_index18 = 0\n  local paren_levels_stack_index19\
    \ = 0\n  local paren_levels_stack_index20 = 0\n  local paren_levels_stack_index21\
    \ = 0\n  local paren_levels_stack_index22 = 0\n  local paren_levels_stack_index23\
    \ = 0\n  local paren_levels_stack_index24 = 0\n  local paren_levels_stack_index25\
    \ = 0\n  local paren_levels_stack_index26 = 0\n  local paren_levels_stack_index27\
    \ = 0\n  local paren_levels_stack_index28 = 0\n  local paren_levels_stack_index29\
    \ = 0\n  local paren_levels_stack_index30 = 0\n  local paren_levels_stack_index31\
    \ = 0\n  local paren_levels_stack_index32 = 0\n  local paren_levels_stack_index33\
    \ = 0\n  local paren_levels_stack_index34 = 0\n  local paren_levels_stack_index35\
    \ = 0\n  local paren_levels_stack_index36 = 0\n  local paren_levels_stack_index37\
    \ = 0\n  local paren_levels_stack_index38 = 0\n  local paren_levels_stack_index39\
    \ = 0\n  local paren_levels_stack_index40 = 0\n  local paren_levels_stack_index41\
    \ = 0\n  local paren_levels_stack_index42 = 0\n  local paren_levels_stack_index43\
    \ = 0\n  local paren_levels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzfi1y745.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  local paren_level = 0\n  local paren_nesting = 0\n\
    \  for paren in string.gmatch(paren_string, '%[(%a)]+') do\n    local paren_level\
    \ = paren_level + 1\n    local paren_nesting = paren_nesting + 1\n    if paren_nesting\
    \ > max_nesting_level then\n      paren_nesting = max_nesting_level\n    end\n\
    \    table.insert(paren_groups, paren_level)\n  end\n  return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwn_xzyku.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpwn_xzyku.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_levels = {}\n  local paren_level = 0\n\
    \  local paren_nesting = 0\n  for paren in string.gmatch(paren_string, '%[(%a)]+')\
    \ do\n    local paren_level = paren_level + 1\n    paren_stack[paren_level] =\
    \ paren\n    paren_levels[paren] = paren_level\n    paren_nesting = paren_nesting\
    \ + 1\n  end\n  local max_nesting = #paren_stack\n  local max_level = 0\n  for\
    \ i = 1, max_nesting do\n    local level = paren_levels[paren_stack[i]]\n    if\
    \ level > max_level then\n      max_level = level\n    end\n  end\n  return max_level\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_94kfb4.lua:31:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpf_94kfb4.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_levels = {}\n  local paren_level = 0\n\
    \  local paren_nesting = 0\n  local paren_level_string = ''\n  local paren_nesting_string\
    \ = ''\n  local paren_level_string_count = 0\n  local paren_nesting_string_count\
    \ = 0\n  local paren_level_char_count = 0\n  local paren_nesting_char_count =\
    \ 0\n  local paren_level_char = ''\n  local paren_nesting_char = ''\n  local paren_level_char\
    \ = ''\n  local paren_nesting_char = ''\n  local paren_level_char = ''\n  local\
    \ paren_nesting_char = ''\n  local paren_level_char = ''\n  local paren_nesting_char\
    \ = ''\n  local paren_level_char = ''\n  local paren_nesting_char = ''\n  local\
    \ paren_level_char = ''\n  local paren_nesting_char = ''\n  local paren_level_char\
    \ = ''\n  local paren_nesting_char = ''\n  local paren_level_char = ''\n  local\
    \ paren_nesting_char = ''\n  local paren_level_char = ''\n  local paren_nesting_char\
    \ = ''\n  local paren_level_char = ''\n  local paren_nesting_char = ''\n  local\
    \ paren_level_char = ''\n  local paren_nesting_char = ''\n  local paren_level_char\
    \ = ''\n  local paren_nesting_char = ''\n  local paren_level_char = ''\n  local\
    \ paren_nesting_char = ''\n  local paren_level_char = ''\n  local paren_nesting_char\
    \ = ''\n  local paren_level_char = ''\n  local paren_nesting_char = ''\n  local\
    \ paren_level_char = ''\n  local paren_nesting_char = ''\n  local paren_level_char\
    \ = ''\n  local paren_nesting_char = ''\n  local paren_level_char = ''\n  local\
    \ paren_nesting_char = ''\n  local paren_level_char = ''\n  local paren_nesting_char\
    \ = ''\n  local paren_level_char = ''\n  local paren_nesting_char = ''\n  local\
    \ paren_level_char = ''\n  local paren_nesting_char = ''\n  local paren_level_char\
    \ = ''\n  local paren_nesting_char = ''\n  local paren_level_char = ''\n  local\
    \ paren_nesting_char = ''\n  local paren_level_char = ''\n  local paren_nesting_char\
    \ = ''\n  local paren_level_char = ''\n  local paren_nesting_char = ''\n  local\
    \ paren\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv3u1ldtm.lua:77: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  for paren in string.gmatch(paren_string, '%[(%a)]+') do\n    local paren_level\
    \ = paren_level + 1\n    local paren_group = paren_groups[paren_level]\n    if\
    \ not paren_group then\n      paren_group = paren_groups[paren_level] = {}\n \
    \   end\n    paren_group[paren] = true\n    table.insert(paren_stack, paren)\n\
    \  end\n  local max_level = 0\n  for paren in paren_stack do\n    max_level =\
    \ max_level + 1\n  end\n  local max_level_groups = {}\n  for i = 1, max_level\
    \ do\n    local paren_group = paren_groups[i]\n    local max_level_paren_group\
    \ = 0\n    for paren in pairs(paren_group) do\n      max_level_paren_group = max_level_paren_group\
    \ + 1\n    end\n    if max_level_paren_group > max_level then\n      max_level\
    \ = max_level_paren_group\n      max_level_groups = paren_group\n    end\n  end\n\
    \  return max_level_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2ptc7xs5.lua:14: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_groups = {}\n  local paren_group_index = {}\n  local paren_group_levels\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack = {}\n\
    \  local paren_group_stack_index = {}\n  local paren_group_level\n  local paren_group_level_index\n\
    \  local paren_group_stack_index\n  local paren_group\n  local paren_group_index\n\
    \  local paren_group_level\n  local paren_group_level_index\n  local paren_group_stack_index\n\
    \  local paren_group\n  local paren_group_index\n  local paren_group_level\n \
    \ local paren_group_level_index\n  local paren_group_stack_index\n  local paren_group\n\
    \  local paren_group_index\n  local paren_group_level\n  local paren_group_level_index\n\
    \  local paren_group_stack_index\n  local paren_group\n  local paren_group_index\n\
    \  local paren_group_level\n  local paren_group_level_index\n  local paren_group_stack_index\n\
    \  local paren_group\n  local paren_group_index\n  local paren_group_level\n \
    \ local paren_group_level_index\n  local paren_group_stack_index\n  local paren_group\n\
    \  local paren_group_index\n  local paren_group_level\n  local paren_group_level_index\n\
    \  local paren_group_stack_index\n  local paren_group\n  local paren_group_index\n\
    \  local paren_group_level\n  local paren_group_level_index\n  local paren_group_stack_index\n\
    \  local paren_group\n  local paren_group_index\n  local paren_group_level\n \
    \ local paren_group_level_index\n  local paren_group_stack_index\n  local paren_group\n\
    \  local paren_group_index\n  local paren_group_level\n  local paren_group_level_index\n\
    \  local paren_group_stack_index\n  local paren_group\n  local paren_group_index\n\
    \  local paren_group_level\n  local paren_group_level_index\n  local paren_group_stack_index\n\
    \  local paren_group\n  local paren_group_index\n  local paren_group_level\n \
    \ local paren_group_level_index\n  local paren_group_stack_index\n  local paren_group\n\
    \  local paren_group_index\n  local paren_group_level\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpty20dona.lua:87: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group_count = 1\n  local paren_group_max_level\
    \ = 0\n  local paren_group_max_level_index = 1\n  local paren_group_max_level_char\
    \ = '('\n  local paren_group_max_level_char_len = #paren_group_max_level_char\n\
    \  local paren_group_max_level_len = #paren_group_max_level_char\n  local paren_group_max_level_char_index\
    \ = 1\n  local paren_group_max_level_len_index = 1\n  local paren_group_max_level_char_reversed\
    \ = false\n  local paren_group_max_level_len_reversed = false\n  local paren_group_max_level_char_reversed_index\
    \ = 1\n  local paren_group_max_level_len_reversed_index = 1\n  local paren_group_max_level_char_reversed_len\
    \ = #paren_group_max_level_char_reversed\n  local paren_group_max_level_len_reversed_len\
    \ = #paren_group_max_level_len_reversed\n  local paren_group_max_level_char_reversed_reversed\
    \ = false\n  local paren_group_max_level_len_reversed_reversed = false\n  local\
    \ paren_group_max_level_char_reversed_reversed_index = 1\n  local paren_group_max_level_len_reversed_reversed_index\
    \ = 1\n  local paren_group_max_level_char_reversed_reversed_len = #paren_group_max_level_char_reversed_reversed\n\
    \  local paren_group_max_level_len_reversed_reversed_len = #paren_group_max_level_len_reversed_reversed\n\
    \  local paren_group_max_level_char_reversed_reversed_reversed_index = 1\n  local\
    \ paren_group_max_level_len_reversed_reversed_index = 1\n  local paren_group_max_level_char_reversed_reversed_reversed_len\
    \ = #paren_group_max_level_char_reversed_reversed_reversed\n  local paren_group_max_level_len_reversed_reversed_reversed_len\
    \ = #paren_group_max_level_len_reversed_reversed_reversed\n  local paren_group_max_level_char_reversed_reversed_reversed_reversed_index\
    \ = 1\n  local paren_group_max_level_len_reversed_reversed_reversed_index = 1\n\
    \  local paren_group_max_level_char_reversed_reversed_reversed_reversed_len =\
    \ #paren_group_max_level_char_reversed_reversed_reversed_reversed\n  local paren_group_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwm57e45g.lua:48: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local current_level = 1\n  local paren_count = 0\n  local\
    \ opening_paren_count = 0\n  local opening_paren_level = 0\n  local paren_level\
    \ = 0\n  local paren_nesting = 0\n  local paren_nesting_level = 0\n  local paren_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_nesting_level = 0\n  local\
    \ paren_nesting_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_nesting_level = 0\n  local\
    \ paren_nesting_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_nesting_level = 0\n  local\
    \ paren_nesting_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_nesting_level = 0\n  local\
    \ paren_nesting_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_nesting_level = 0\n  local\
    \ paren_nesting_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_nesting_level = 0\n  local\
    \ paren_nesting_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_nesting_level = 0\n  local\
    \ paren_nesting_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpejwoj0rx.lua:53: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_groups = {}\n  local paren_group_index = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_start = 0\n  local paren_group_end = 0\n  local paren_group_len\
    \ = 0\n  local paren_group_len_index = 1\n  local paren_group_len_value = 0\n\
    \  local paren_group_len_value_prev = 0\n  local paren_group_len_value_next =\
    \ 0\n  local paren_group_len_value_next_prev = 0\n  local paren_group_len_value_next_next\
    \ = 0\n  local paren_group_len_value_next_next_prev = 0\n  local paren_group_len_value_next_next_next\
    \ = 0\n  local paren_group_len_value_next_next_next_prev = 0\n  local paren_group_len_value_next_next_next_next\
    \ = 0\n  local paren_group_len_value_next_next_next_next_prev = 0\n  local paren_group_len_value_next_next_next_next_next\
    \ = 0\n  local paren_group_len_value_next_next_next_next_next_prev = 0\n  local\
    \ paren_group_len_value_next_next_next_next_next_next = 0\n  local paren_group_len_value_next_next_next_next_next_next_prev\
    \ = 0\n  local paren_group_len_value_next_next_next_next_next_next_next = 0\n\
    \  local paren_group_len_value_next_next_next_next_next_next_next_prev = 0\n \
    \ local paren_group_len_value_next_next_next_next_next_next_next_next = 0\n  local\
    \ paren_group_len_value_next_next_next_next_next_next_next_prev = 0\n  local paren_group_len_value_next_next_next_next_next_next_next_next\
    \ = 0\n  local paren_group_len_value_next_next_next_next_next_next_next_next_prev\
    \ = 0\n  local paren_group_len_value_next_next_next_next_next_next_next_next_next\
    \ = 0\n  local paren_group_len_value_next_next_next_next_next_next_next_next_next_prev\
    \ = 0\n  local paren_group_len_value_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n  local paren_group_len_value_next_next_next_next_next_next_next_next_next_prev\
    \ = 0\n  local paren_group_len_value_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n  local paren_group_len_value_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0\n  local paren_group_len_value_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n  local paren_group_len_value_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvmln5d_1.lua:56: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_levels = {}\n  local paren_level = 0\n\
    \  local paren_nesting = 0\n  local paren_nesting_level = 0\n  local paren_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_level = 0\n  local paren_nesting_nesting\
    \ = 0\n  local paren_nesting_level = 0\n  local paren_nesting = 0\n  local paren_level\
    \ = 0\n  local paren_nesting = 0\n  local paren_nesting_level = 0\n  local paren_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyqlltywf.lua:58: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n\
    \  local paren_levels_stack_index2 = 0\n  local paren_levels_stack_index3 = 0\n\
    \  local paren_levels_stack_index4 = 0\n  local paren_levels_stack_index5 = 0\n\
    \  local paren_levels_stack_index6 = 0\n  local paren_levels_stack_index7 = 0\n\
    \  local paren_levels_stack_index8 = 0\n  local paren_levels_stack_index9 = 0\n\
    \  local paren_levels_stack_index10 = 0\n  local paren_levels_stack_index11 =\
    \ 0\n  local paren_levels_stack_index12 = 0\n  local paren_levels_stack_index13\
    \ = 0\n  local paren_levels_stack_index14 = 0\n  local paren_levels_stack_index15\
    \ = 0\n  local paren_levels_stack_index16 = 0\n  local paren_levels_stack_index17\
    \ = 0\n  local paren_levels_stack_index18 = 0\n  local paren_levels_stack_index19\
    \ = 0\n  local paren_levels_stack_index20 = 0\n  local paren_levels_stack_index21\
    \ = 0\n  local paren_levels_stack_index22 = 0\n  local paren_levels_stack_index23\
    \ = 0\n  local paren_levels_stack_index24 = 0\n  local paren_levels_stack_index25\
    \ = 0\n  local paren_levels_stack_index26 = 0\n  local paren_levels_stack_index27\
    \ = 0\n  local paren_levels_stack_index28 = 0\n  local paren_levels_stack_index29\
    \ = 0\n  local paren_levels_stack_index30 = 0\n  local paren_levels_stack_index31\
    \ = 0\n  local paren_levels_stack_index32 = 0\n  local paren_levels_stack_index33\
    \ = 0\n  local paren_levels_stack_index34 = 0\n  local paren_levels_stack_index35\
    \ = 0\n  local paren_levels_stack_index36 = 0\n  local paren_levels_stack_index37\
    \ = 0\n  local paren_levels_stack_index38 = 0\n  local paren_levels_stack_index39\
    \ = 0\n  local paren_levels_stack_index40 = 0\n  local paren_levels_stack_index41\
    \ = 0\n  local paren_levels_stack_index42 = 0\n  local paren_levels_stack_index43\
    \ = 0\n  local paren_levels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzfi1y745.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group_size = 1\n  local paren_group_max_size\
    \ = 1\n  local paren_group_max_level = 1\n  local paren_group_max_level_index\
    \ = 1\n  local paren_group_max_level_length = 1\n  local paren_group_max_level_length_index\
    \ = 1\n  local paren_group_max_level_length_index = 1\n  local paren_group_max_level_length_index\
    \ = 1\n  local paren_group_max_level_length_index = 1\n  local paren_group_max_level_length_index\
    \ = 1\n  local paren_group_max_level_length_index = 1\n  local paren_group_max_level_length_index\
    \ = 1\n  local paren_group_max_level_length_index = 1\n  local paren_group_max_level_length_index\
    \ = 1\n  local paren_group_max_level_length_index = 1\n  local paren_group_max_level_length_index\
    \ = 1\n  local paren_group_max_level_length_index = 1\n  local paren_group_max_level_length_index\
    \ = 1\n  local paren_group_max_level_length_index = 1\n  local paren_group_max_level_length_index\
    \ = 1\n  local paren_group_max_level_length_index = 1\n  local paren_group_max_level_length_index\
    \ = 1\n  local paren_group_max_level_length_index = 1\n  local paren_group_max_level_length_index\
    \ = 1\n  local paren_group_max_level_length_index = 1\n  local paren_group_max_level_length_index\
    \ = 1\n  local paren_group_max_level_length_index = 1\n  local paren_group_max_level_length_index\
    \ = 1\n  local paren_group_max_level_length_index = 1\n  local paren_group_max_level_length_index\
    \ = 1\n  local paren_group_max_level_length_index = 1\n  local paren_group_max_level_length_index\
    \ = 1\n  local paren_group_max_level_length_index = 1\n  local paren_group_max_level_length_index\
    \ = 1\n  local paren_group_max_level_length_index = 1\n  local paren_group_max_level_length_index\
    \ = 1\n  local paren_group_max_level_length_index = 1\n  local paren_group_max_level_length_index\
    \ = 1\n  local paren_group_max_level_length_index = 1\n  local paren_group_max_level_length_index\
    \ = 1\n  local paren_group_max_level_length_index = 1\n  local paren_group_max_level_length_index\
    \ = 1\n  local paren_group_max_level_length_index = 1\n  local paren_group_max_level_length_index\
    \ = 1\n  local paren_group_max_level_length\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf2pk7m8a.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local max_level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_groups = {}\n  local paren_group_index = {}\n  local paren_group_index2\
    \ = {}\n  local paren_group_index3 = {}\n  local paren_group_index4 = {}\n  local\
    \ paren_group_index5 = {}\n  local paren_group_index6 = {}\n  local paren_group_index7\
    \ = {}\n  local paren_group_index8 = {}\n  local paren_group_index9 = {}\n  local\
    \ paren_group_index10 = {}\n  local paren_group_index11 = {}\n  local paren_group_index12\
    \ = {}\n  local paren_group_index13 = {}\n  local paren_group_index14 = {}\n \
    \ local paren_group_index15 = {}\n  local paren_group_index16 = {}\n  local paren_group_index17\
    \ = {}\n  local paren_group_index18 = {}\n  local paren_group_index19 = {}\n \
    \ local paren_group_index20 = {}\n  local paren_group_index21 = {}\n  local paren_group_index22\
    \ = {}\n  local paren_group_index23 = {}\n  local paren_group_index24 = {}\n \
    \ local paren_group_index25 = {}\n  local paren_group_index26 = {}\n  local paren_group_index27\
    \ = {}\n  local paren_group_index28 = {}\n  local paren_group_index29 = {}\n \
    \ local paren_group_index30 = {}\n  local paren_group_index31 = {}\n  local paren_group_index32\
    \ = {}\n  local paren_group_index33 = {}\n  local paren_group_index34 = {}\n \
    \ local paren_group_index35 = {}\n  local paren_group_index36 = {}\n  local paren_group_index37\
    \ = {}\n  local paren_group_index38 = {}\n  local paren_group_index39 = {}\n \
    \ local paren_group_index40 = {}\n  local paren_group_index41 = {}\n  local paren_group_index42\
    \ = {}\n  local paren_group_index43 = {}\n  local paren_group_index44 = {}\n \
    \ local paren_group_index45 = {}\n  local paren_group_index46 = {}\n  local paren_group_index47\
    \ = {}\n  local paren_group_index48 = {}\n  local paren_group_index49 = {}\n \
    \ local paren_group_index50 = {}\n  local paren_group_index51 = {}\n  local paren_group_index52\
    \ = {}\n  local paren_group\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpetvld86q.lua:74: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local level = 0\n  local paren_count = 0\n  local\
    \ paren_groups = {}\n  for paren in string.gmatch(paren_string, \"%[(%a)]\") do\n\
    \    paren_count = paren_count + 1\n    local paren_level = paren_stack[#paren_stack]\n\
    \    if paren == \"(\" then\n      paren_stack[#paren_stack] = paren_level + 1\n\
    \    elseif paren == \")\" then\n      paren_stack[#paren_stack] = paren_level\
    \ - 1\n      if paren_level == 0 then\n        level = level + 1\n      end\n\
    \    end\n    paren_groups[paren_count] = paren_level\n  end\n  return level\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpred_7tn7.lua:30:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpred_7tn7.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_level = 0\n  local paren_level_string = ''\n  local paren_level_counter\
    \ = 0\n  local paren_level_counters = {}\n  local paren_level_counters_string\
    \ = ''\n  local paren_level_counters_counter = 0\n  local paren_level_counters_counters\
    \ = {}\n  local paren_level_counters_counters_string = ''\n  local paren_level_counters_counters_counter\
    \ = 0\n  local paren_level_counters_counters_counters = {}\n  local paren_level_counters_counters_counters_string\
    \ = ''\n  local paren_level_counters_counters_counters_counter = 0\n  local paren_level_counters_counters_counters_counters\
    \ = {}\n  local paren_level_counters_counters_counters_counters_string = ''\n\
    \  local paren_level_counters_counters_counters_counters_counter = 0\n  local\
    \ paren_level_counters_counters_counters_counters_counters = {}\n  local paren_level_counters_counters_counters_counters_counters_string\
    \ = ''\n  local paren_level_counters_counters_counters_counters_counters_counter\
    \ = 0\n  local paren_level_counters_counters_counters_counters_counters_counters\
    \ = {}\n  local paren_level_counters_counters_counters_counters_counters_counters_string\
    \ = ''\n  local paren_level_counters_counters_counters_counters_counters_counters_counter\
    \ = 0\n  local paren_level_counters_counters_counters_counters_counters_counters_counters\
    \ = {}\n  local paren_level_counters_counters_counters_counters_counters_counters_counters_string\
    \ = ''\n  local paren_level_counters_counters_counters_counters_counters_counters_counters_counter\
    \ = 0\n  local paren_level_counters_counters_counters_counters_counters_counters_counters_counters\
    \ = {}\n  local paren_level_counters_counters_counters_counters_counters_counters_counters_counters_string\
    \ = ''\n  local paren_level_counters_counters_counters_counters_counters_counters_counters_counters_counter\
    \ = 0\n  local paren_level_counters_counters_counters_counters_counters_counters_counters_counters_counters\
    \ = {}\n  local paren_level_counters_counters_counters_counters_counters_counters_counters_counters_counters_string\
    \ = ''\n  local paren_level_counters_counters_counters_counters_counters_counters_counters_counters_counters_counter\
    \ = 0\n  local paren_level_counters_counters_counters_counter\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_1zdj1hg.lua:50: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_nesting = 0\n\
    \  for paren in string.gmatch(paren_string, '%[()]+') do\n    if paren == '('\
    \ or paren == '{' or paren == '[' then\n      paren_stack[#paren_stack + 1] =\
    \ paren\n      paren_level = #paren_stack\n      paren_nesting = paren_nesting\
    \ + 1\n    elseif paren == ')' or paren == ']' or paren == '}' then\n      local\
    \ paren_level = paren_level - 1\n      if paren_level == 0 then\n        paren_nesting\
    \ = paren_nesting - 1\n      elseif paren_nesting > 0 then\n        paren_nesting\
    \ = paren_nesting - 1\n      end\n      paren_stack[paren_level] = paren\n   \
    \ end\n  end\n  return paren_nesting\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgedtesg.lua:31:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmptgedtesg.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_nesting = 0\n\
    \  local paren_groups = {}\n  local paren_group_index = 1\n  local paren_group_nesting\
    \ = 1\n  local paren_group_level = 1\n  local paren_group_nesting_level = 1\n\
    \  local paren_group_level_string = ''\n  local paren_group_nesting_level_string\
    \ = ''\n  local paren_group_level_length = 0\n  local paren_group_nesting_level_length\
    \ = 0\n  local paren_group_level_length_string = ''\n  local paren_group_nesting_level_length_string\
    \ = ''\n  local paren_group_level_length_string_index = 0\n  local paren_group_nesting_level_length_string_index\
    \ = 0\n  local paren_group_level_length_string_length = 0\n  local paren_group_nesting_level_length_string_length\
    \ = 0\n  local paren_group_level_length_string_length_index = 0\n  local paren_group_nesting_level_length_string_length_index\
    \ = 0\n  local paren_group_level_length_string_length_index = 0\n  local paren_group_level_length_string_length_index\
    \ = 0\n  local paren_group_level_length_string_length_index = 0\n  local paren_group_level_length_string_length_index\
    \ = 0\n  local paren_group_level_length_string_length_index = 0\n  local paren_group_level_length_string_length_index\
    \ = 0\n  local paren_group_level_length_string_length_index = 0\n  local paren_group_level_length_string_length_index\
    \ = 0\n  local paren_group_level_length_string_length_index = 0\n  local paren_group_level_length_string_length_index\
    \ = 0\n  local paren_group_level_length_string_length_index = 0\n  local paren_group_level_length_string_length_index\
    \ = 0\n  local paren_group_level_length_string_length_index = 0\n  local paren_group_level_length_string_length_index\
    \ = 0\n  local paren_group_level_length_string_length_index = 0\n  local paren_group_level_length_string_length_index\
    \ = 0\n  local paren_group_level_length_string_length_index = 0\n  local paren_group_level_length_string_length_index\
    \ = 0\n  local paren_group_level_length_string_length_index = 0\n  local paren_group_level_length_string_length_index\
    \ = 0\n  local paren_group_level_length_string_length_index = 0\n  local paren_group_level_length_string_length_index\
    \ = 0\n  local paren_group_level_length_string_length_index = 0\n  local paren_group_level_length_string_length_index\
    \ = 0\n  local paren_group_level_length_string_length_index = 0\n  local paren_group_level_length_string_length_index\
    \ = 0\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjdjy3dl1.lua:63: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local max_level = 0\n  for paren in string.gmatch(paren_string,\
    \ '%w+') do\n    local level = #paren_stack\n    if paren == '(' or paren == '{'\
    \ then\n      paren_stack[level] = paren\n    elseif paren == ')' or paren ==\
    \ '}' then\n      local popped = paren_stack[level]\n      assert(popped ~= '('\
    \ and popped ~= '{', 'Invalid parentheses nesting')\n      paren_stack[level]\
    \ = nil\n      if level > max_level then\n        max_level = level\n      end\n\
    \    end\n  end\n  return max_level\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk4xt12o2.lua:28:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpk4xt12o2.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_level = {}\n  local\
    \ paren_stack_size = #paren_string\n  local paren_level_size = 0\n  local paren_stack_index\
    \ = 1\n  local paren_level_index = 1\n  local paren_stack_string = paren_string\n\
    \  local paren_level_string = paren_string\n  local paren_stack_string = paren_string\n\
    \  local paren_level_string = paren_string\n  local paren_stack_string = paren_string\n\
    \  local paren_level_string = paren_string\n  local paren_stack_string = paren_string\n\
    \  local paren_level_string = paren_string\n  local paren_stack_string = paren_string\n\
    \  local paren_level_string = paren_string\n  local paren_stack_string = paren_string\n\
    \  local paren_level_string = paren_string\n  local paren_stack_string = paren_string\n\
    \  local paren_level_string = paren_string\n  local paren_stack_string = paren_string\n\
    \  local paren_level_string = paren_string\n  local paren_stack_string = paren_string\n\
    \  local paren_level_string = paren_string\n  local paren_stack_string = paren_string\n\
    \  local paren_level_string = paren_string\n  local paren_stack_string = paren_string\n\
    \  local paren_level_string = paren_string\n  local paren_stack_string = paren_string\n\
    \  local paren_level_string = paren_string\n  local paren_stack_string = paren_string\n\
    \  local paren_level_string = paren_string\n  local paren_stack_string = paren_string\n\
    \  local paren_level_string = paren_string\n  local paren_stack_string = paren_string\n\
    \  local paren_level_string = paren_string\n  local paren_stack_string = paren_string\n\
    \  local paren_level_string = paren_string\n  local paren_stack_string = paren_string\n\
    \  local paren_level_string = paren_string\n  local paren_stack_string = paren_string\n\
    \  local paren_level_string = paren_string\n  local paren_stack_string = paren_string\n\
    \  local paren_level_string = paren_string\n  local paren_stack_string = paren_string\n\
    \  local paren_level_string = paren_string\n  local paren_stack_string = paren_string\n\
    \  local paren_level_string = paren_string\n  local paren_stack_string = paren_string\n\
    \  local paren_level_string = paren_string\n  local paren_stack_string = paren_string\n\
    \  local paren_level_string = paren_string\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6pkjkkjz.lua:69: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group_count = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_nesting_level = 1\n  local paren_group_nesting_depth\
    \ = 1\n  local paren_group_nesting_count = 0\n  local paren_group_nesting_count_max\
    \ = 0\n  local paren_group_nesting_count_max_index = 0\n  local paren_group_nesting_count_max_count\
    \ = 0\n  local paren_group_nesting_count_max_count_index = 0\n  local paren_group_nesting_count_max_count_count\
    \ = 0\n  local paren_group_nesting_count_max_count_count_index = 0\n  local paren_group_nesting_count_max_count_count_count\
    \ = 0\n  local paren_group_nesting_count_max_count_count_count_index = 0\n  local\
    \ paren_group_nesting_count_max_count_count_count_count = 0\n  local paren_group_nesting_count_max_count_count_count_index\
    \ = 0\n  local paren_group_nesting_count_max_count_count_count_count_count = 0\n\
    \  local paren_group_nesting_count_max_count_count_count_count_index = 0\n  local\
    \ paren_group_nesting_count_max_count_count_count_count_count = 0\n  local paren_group_nesting_count_max_count_count_count_count_index\
    \ = 0\n  local paren_group_nesting_count_max_count_count_count_count_count_count\
    \ = 0\n  local paren_group_nesting_count_max_count_count_count_count_count_index\
    \ = 0\n  local paren_group_nesting_count_max_count_count_count_count_count_count_count\
    \ = 0\n  local paren_group_nesting_count_max_count_count_count_count_count_index\
    \ = 0\n  local paren_group_nesting_count_max_count_count_count_count_count_count_count_count\
    \ = 0\n  local paren_group_nesting_count_max_count_count_count_count_count_count_index\
    \ = 0\n  local paren_group_nesting_count_max_count_count_count_count_count_count_count_count\
    \ = 0\n  local paren_group_nesting_count_max_count_count_count_count_count_count_count_index\
    \ = 0\n  local paren_group_nesting_count_max_count_count_count_count_count_count_count_count_count\
    \ = 0\n  local paren_group_nesting_count_max_count_count_count_count_count_count_count_index\
    \ = 0\n  local paren_group_nesting_count_max_count_count_count_count_count_count_count_count_count\
    \ = 0\n  local paren_group_nesting_count_max_count_count_count_count_count_count_count_count_index\
    \ = 0\n  local paren_group_nesting_count_max_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n  local paren_group_nesting_count_max_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2g17g7o1.lua:53: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_groups = {}\n  local paren_group_index = 0\n  local paren_group_count\
    \ = 0\n  local paren_group_level = 0\n  local paren_group_start = 0\n  local paren_group_end\
    \ = 0\n  local paren_group_string = ''\n  local paren_group_parens = 0\n  local\
    \ paren_group_parens_count = 0\n  local paren_group_parens_level = 0\n  local\
    \ paren_group_parens_start = 0\n  local paren_group_parens_end = 0\n  local paren_group_parens_string\
    \ = ''\n  local paren_group_parens_parens = 0\n  local paren_group_parens_parens_count\
    \ = 0\n  local paren_group_parens_parens_level = 0\n  local paren_group_parens_parens_start\
    \ = 0\n  local paren_group_parens_parens_end = 0\n  local paren_group_parens_parens_string\
    \ = ''\n  local paren_group_parens_parens_parens = 0\n  local paren_group_parens_parens_parens_count\
    \ = 0\n  local paren_group_parens_parens_parens_level = 0\n  local paren_group_parens_parens_parens_start\
    \ = 0\n  local paren_group_parens_parens_parens_end = 0\n  local paren_group_parens_parens_parens_string\
    \ = ''\n  local paren_group_parens_parens_parens_parens = 0\n  local paren_group_parens_parens_parens_parens_count\
    \ = 0\n  local paren_group_parens_parens_parens_parens_level = 0\n  local paren_group_parens_parens_parens_parens_start\
    \ = 0\n  local paren_group_parens_parens_parens_parens_end = 0\n  local paren_group_parens_parens_parens_parens_string\
    \ = ''\n  local paren_group_parens_parens_parens_parens_parens = 0\n  local paren_group_parens_parens_parens_parens_parens_count\
    \ = 0\n  local paren_group_parens_parens_parens_parens_parens_level = 0\n  local\
    \ paren_group_parens_parens_parens_parens_parens_start = 0\n  local paren_group_parens_parens_parens_parens_parens_end\
    \ = 0\n  local paren_group_parens_parens_parens_parens_parens_string = ''\n  local\
    \ paren_group_parens_parens_parens_parens_parens_parens = 0\n  local paren_group_parens_parens_parens_parens_parens_paren\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfmx_91pi.lua:58: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local max_level = 0\n  for paren in string.gmatch(paren_string,\
    \ \"%[(%a)]\") do\n    local level = #paren_stack\n    if level > max_level then\n\
    \      max_level = level\n    end\n    table.insert(paren_stack, paren)\n  end\n\
    \  return max_level\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_8p2e3a.lua:22:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpb_8p2e3a.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_groups = {}\n  local paren_group_index = 0\n  local paren_group_start\
    \ = 0\n  local paren_group_end = 0\n  local paren_group_length = 0\n  local paren_group_level\
    \ = 0\n  local paren_group_starts = {}\n  local paren_group_ends = {}\n  local\
    \ paren_group_lengths = {}\n  local paren_group_levels = {}\n  local paren_group_starts_index\
    \ = 0\n  local paren_group_ends_index = 0\n  local paren_group_lengths_index =\
    \ 0\n  local paren_group_levels_index = 0\n  local paren_group_starts_index =\
    \ 0\n  local paren_group_ends_index = 0\n  local paren_group_lengths_index = 0\n\
    \  local paren_group_levels_index = 0\n  local paren_group_starts_index = 0\n\
    \  local paren_group_ends_index = 0\n  local paren_group_lengths_index = 0\n \
    \ local paren_group_levels_index = 0\n  local paren_group_starts_index = 0\n \
    \ local paren_group_ends_index = 0\n  local paren_group_lengths_index = 0\n  local\
    \ paren_group_levels_index = 0\n  local paren_group_starts_index = 0\n  local\
    \ paren_group_ends_index = 0\n  local paren_group_lengths_index = 0\n  local paren_group_levels_index\
    \ = 0\n  local paren_group_starts_index = 0\n  local paren_group_ends_index =\
    \ 0\n  local paren_group_lengths_index = 0\n  local paren_group_levels_index =\
    \ 0\n  local paren_group_starts_index = 0\n  local paren_group_ends_index = 0\n\
    \  local paren_group_lengths_index = 0\n  local paren_group_levels_index = 0\n\
    \  local paren_group_starts_index = 0\n  local paren_group_ends_index = 0\n  local\
    \ paren_group_lengths_index = 0\n  local paren_group_levels_index = 0\n  local\
    \ paren_group_starts_index = 0\n  local paren_group_ends_index = 0\n  local paren_group_lengths_index\
    \ = 0\n  local paren_group_levels_index = 0\n  local paren_group_starts_index\
    \ = 0\n  local paren_group_ends_index = 0\n  local paren_group_lengths_index =\
    \ 0\n  local paren_group_levels_index = 0\n  local paren_group_starts_index\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3azct5ax.lua:71: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local max_level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_groups = {}\n  local paren_group_level = {}\n  local paren_group_stack\
    \ = {}\n  local paren_group_stack_index = 0\n  local paren_group_level_index =\
    \ 0\n  local paren_group_stack_string = ''\n  local paren_group_level_string =\
    \ ''\n  local paren_group_level_stack_string = ''\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack = {}\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_string = ''\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_string = ''\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_string = ''\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_string = ''\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_string = ''\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_string = ''\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_string = ''\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_string = ''\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_string = ''\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_string = ''\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_string = ''\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_string = ''\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_string = ''\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_string = ''\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_string = ''\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_string = ''\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_string = ''\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_string = ''\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_string = ''\n  local paren_group_level_stack_index\
    \ = 0\n  local paren_group_level_stack_string = ''\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbw2cl_uc.lua:70: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local paren_count = 0\n  local paren_level = 0\n  for\
    \ paren_char in paren_string:gmatch('%[(%a%)]') do\n    local new_level = levels[paren_level\
    \ + 1]\n    levels[paren_level + 1] = paren_count + 1\n    paren_count = paren_count\
    \ + 1\n    if paren_char == '(' then\n      paren_level = paren_level + 1\n  \
    \  elseif paren_char == ')' then\n      paren_level = paren_level - 1\n    end\n\
    \    if new_level > levels[paren_level] then\n      levels[paren_level] = new_level\n\
    \    end\n  end\n  return levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5f_99ig.lua:29:\
    \ expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpw5f_99ig.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n\
    \  local paren_levels_stack_index2 = 0\n  local paren_levels_stack_index3 = 0\n\
    \  local paren_levels_stack_index4 = 0\n  local paren_levels_stack_index5 = 0\n\
    \  local paren_levels_stack_index6 = 0\n  local paren_levels_stack_index7 = 0\n\
    \  local paren_levels_stack_index8 = 0\n  local paren_levels_stack_index9 = 0\n\
    \  local paren_levels_stack_index10 = 0\n  local paren_levels_stack_index11 =\
    \ 0\n  local paren_levels_stack_index12 = 0\n  local paren_levels_stack_index13\
    \ = 0\n  local paren_levels_stack_index14 = 0\n  local paren_levels_stack_index15\
    \ = 0\n  local paren_levels_stack_index16 = 0\n  local paren_levels_stack_index17\
    \ = 0\n  local paren_levels_stack_index18 = 0\n  local paren_levels_stack_index19\
    \ = 0\n  local paren_levels_stack_index20 = 0\n  local paren_levels_stack_index21\
    \ = 0\n  local paren_levels_stack_index22 = 0\n  local paren_levels_stack_index23\
    \ = 0\n  local paren_levels_stack_index24 = 0\n  local paren_levels_stack_index25\
    \ = 0\n  local paren_levels_stack_index26 = 0\n  local paren_levels_stack_index27\
    \ = 0\n  local paren_levels_stack_index28 = 0\n  local paren_levels_stack_index29\
    \ = 0\n  local paren_levels_stack_index30 = 0\n  local paren_levels_stack_index31\
    \ = 0\n  local paren_levels_stack_index32 = 0\n  local paren_levels_stack_index33\
    \ = 0\n  local paren_levels_stack_index34 = 0\n  local paren_levels_stack_index35\
    \ = 0\n  local paren_levels_stack_index36 = 0\n  local paren_levels_stack_index37\
    \ = 0\n  local paren_levels_stack_index38 = 0\n  local paren_levels_stack_index39\
    \ = 0\n  local paren_levels_stack_index40 = 0\n  local paren_levels_stack_index41\
    \ = 0\n  local paren_levels_stack_index42 = 0\n  local paren_levels_stack_index43\
    \ = 0\n  local paren_levels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzfi1y745.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local level = 0\n  local max_level = 0\n  local paren_levels\
    \ = {}\n  local paren_levels_size = {}\n  local paren_levels_index = {}\n  local\
    \ paren_levels_index_size = {}\n  local paren_levels_index_index = {}\n  local\
    \ paren_levels_index_index_size = {}\n  local paren_levels_index_index_index =\
    \ {}\n  local paren_levels_index_index_index_size = {}\n  local paren_levels_index_index_index_index\
    \ = {}\n  local paren_levels_index_index_index_index_size = {}\n  local paren_levels_index_index_index_index_index\
    \ = {}\n  local paren_levels_index_index_index_index_size = {}\n  local paren_levels_index_index_index_index_index\
    \ = {}\n  local paren_levels_index_index_index_index_size = {}\n  local paren_levels_index_index_index_index_index\
    \ = {}\n  local paren_levels_index_index_index_index_size = {}\n  local paren_levels_index_index_index_index_index\
    \ = {}\n  local paren_levels_index_index_index_index_index_size = {}\n  local\
    \ paren_levels_index_index_index_index_index_index = {}\n  local paren_levels_index_index_index_index_index_size\
    \ = {}\n  local paren_levels_index_index_index_index_index_index = {}\n  local\
    \ paren_levels_index_index_index_index_index_size = {}\n  local paren_levels_index_index_index_index_index_index\
    \ = {}\n  local paren_levels_index_index_index_index_index_size = {}\n  local\
    \ paren_levels_index_index_index_index_index_index = {}\n  local paren_levels_index_index_index_index_index_size\
    \ = {}\n  local paren_levels_index_index_index_index_index_index = {}\n  local\
    \ paren_levels_index_index_index_index_index_size = {}\n  local paren_levels_index_index_index_index_index_index\
    \ = {}\n  local paren_levels_index_index_index_index_index_size = {}\n  local\
    \ paren_levels_index_index_index_index_index_index = {}\n  local paren_levels_index_index_index_index_index_size\
    \ = {}\n  local paren_levels_index_index_index_index_index_index = {}\n  local\
    \ paren_levels_index_index_index_index_index_size = {}\n  local paren_levels_index_index_index_index_index_index\
    \ = {}\n  local paren_levels_index_index_index_index_index_size = {}\n  local\
    \ paren_levels_index_index_index_index_index_index = {}\n  local paren_levels_index_index_index_index_index_size\
    \ = {}\n  local paren_level\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9bllxllj.lua:58: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_levels = {}\n  local paren_level = 0\n\
    \  local paren_nesting = 0\n  local paren_level_string = ''\n  local paren_nesting_string\
    \ = ''\n  local paren_level_string_count = 0\n  local paren_nesting_string_count\
    \ = 0\n  local paren_level_string = ''\n  local paren_nesting_string = ''\n  local\
    \ paren_level_string_count = 0\n  local paren_nesting_string_count = 0\n  local\
    \ paren_level_string = ''\n  local paren_nesting_string = ''\n  local paren_level_string_count\
    \ = 0\n  local paren_nesting_string_count = 0\n  local paren_level_string = ''\n\
    \  local paren_nesting_string = ''\n  local paren_level_string_count = 0\n  local\
    \ paren_nesting_string_count = 0\n  local paren_level_string = ''\n  local paren_nesting_string\
    \ = ''\n  local paren_level_string_count = 0\n  local paren_nesting_string_count\
    \ = 0\n  local paren_level_string = ''\n  local paren_nesting_string = ''\n  local\
    \ paren_level_string_count = 0\n  local paren_nesting_string_count = 0\n  local\
    \ paren_level_string = ''\n  local paren_nesting_string = ''\n  local paren_level_string_count\
    \ = 0\n  local paren_nesting_string_count = 0\n  local paren_level_string = ''\n\
    \  local paren_nesting_string = ''\n  local paren_level_string_count = 0\n  local\
    \ paren_nesting_string_count = 0\n  local paren_level_string = ''\n  local paren_nesting_string\
    \ = ''\n  local paren_level_string_count = 0\n  local paren_nesting_string_count\
    \ = 0\n  local paren_level_string = ''\n  local paren_nesting_string = ''\n  local\
    \ paren_level_string_count = 0\n  local paren_nesting_string_count = 0\n  local\
    \ paren_level_string = ''\n  local paren_nesting_string = ''\n  local paren_level_string_count\
    \ = 0\n  local paren_nesting_string_count = 0\n  local paren_level_string = ''\n\
    \  local paren_nesting_string = ''\n  local paren_level_string_count = 0\n  local\
    \ paren_nesting_string_count = 0\n  local paren_level_string = ''\n  local paren_nesting_string\
    \ = ''\n  local paren_level_string_count = 0\n  local paren_nesting_string_count\
    \ = 0\n  local paren_level_string = ''\n  local paren_nesting_string\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwfrxpzmv.lua:74: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_nesting = 0\n\
    \  for paren in string.gmatch(paren_string, '%[(%a)]+') do\n    local paren_level\
    \ = paren_level + 1\n    local paren_nesting = paren_nesting + 1\n    local paren_stack[paren_level]\
    \ = paren\n  end\n  local max_level = 0\n  for i = 1, #paren_stack do\n    local\
    \ level = paren_stack[i]\n    if level == '(' and paren_nesting > 0 then\n   \
    \   max_level = max_level + 1\n    end\n    if level == ')' and paren_nesting\
    \ > 0 then\n      max_level = max_level - 1\n    end\n  end\n  return max_level\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp21k7bf_o.lua:13: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_stack_size = #paren_string\n  local paren_level_size = #paren_level\n\
    \  local paren_stack_index = 1\n  local paren_level_index = 1\n  local paren_stack_pointer\
    \ = 1\n  local paren_level_pointer = 1\n  local paren_stack_pointer_pointer =\
    \ 1\n  local paren_level_pointer_pointer = 1\n  local paren_stack_pointer_pointer_pointer\
    \ = 1\n  local paren_level_pointer_pointer_pointer = 1\n  local paren_stack_pointer_pointer_pointer_pointer\
    \ = 1\n  local paren_level_pointer_pointer_pointer_pointer = 1\n  local paren_stack_pointer_pointer_pointer_pointer_pointer\
    \ = 1\n  local paren_level_pointer_pointer_pointer_pointer_pointer = 1\n  local\
    \ paren_stack_pointer_pointer_pointer_pointer_pointer_pointer = 1\n  local paren_level_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 1\n  local paren_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 1\n  local paren_level_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 1\n  local paren_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 1\n  local paren_level_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 1\n  local paren_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 1\n  local paren_level_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 1\n  local paren_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 1\n  local paren_level_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 1\n  local paren_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 1\n  local paren_level_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 1\n  local paren_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpduxmk9kz.lua:47: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_levels = {}\n  local paren_level = 1\n\
    \  local paren_nesting = 1\n  local paren_groups = {}\n  local paren_group = 1\n\
    \  local paren_group_nesting = 1\n  local paren_group_level = 1\n  local paren_group_levels\
    \ = {}\n  local paren_group_nesting_level = 1\n  local paren_group_nesting_levels\
    \ = {}\n  local paren_group_level_string = ''\n  local paren_group_nesting_level_string\
    \ = ''\n  local paren_group_level_number = 0\n  local paren_group_nesting_level_number\
    \ = 0\n  local paren_group_level_char = ''\n  local paren_group_nesting_level_char\
    \ = ''\n  local paren_group_level_chars = {}\n  local paren_group_nesting_level_chars\
    \ = {}\n  local paren_group_level_char_index = 0\n  local paren_group_nesting_level_char_index\
    \ = 0\n  local paren_group_level_char_indexes = {}\n  local paren_group_nesting_level_char_indexes\
    \ = {}\n  local paren_group_level_char_indexes_index = 0\n  local paren_group_nesting_level_char_indexes_index\
    \ = 0\n  local paren_group_level_char_indexes_index = 0\n  local paren_group_level_char_indexes_index\
    \ = 0\n  local paren_group_level_char_indexes_index = 0\n  local paren_group_level_char_indexes_index\
    \ = 0\n  local paren_group_level_char_indexes_index = 0\n  local paren_group_level_char_indexes_index\
    \ = 0\n  local paren_group_level_char_indexes_index = 0\n  local paren_group_level_char_indexes_index\
    \ = 0\n  local paren_group_level_char_indexes_index = 0\n  local paren_group_level_char_indexes_index\
    \ = 0\n  local paren_group_level_char_indexes_index = 0\n  local paren_group_level_char_indexes_index\
    \ = 0\n  local paren_group_level_char_indexes_index = 0\n  local paren_group_level_char_indexes_index\
    \ = 0\n  local paren_group_level_char_indexes_index = 0\n  local paren_group_level_char_indexes_index\
    \ = 0\n  local paren_group_level_char_indexes_index = 0\n  local paren_group_level_char_indexes_index\
    \ = 0\n  local paren_group_level_char_indexes_index = 0\n  local paren_group_level_char_indexes_index\
    \ = 0\n  local paren_group_level_char_indexes_index = 0\n  local paren_group_level_char_indexes_index\
    \ = 0\n  local paren_group_level_char_index\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf2kguw2z.lua:64: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n  local paren_levels_stack_index2\
    \ = 0\n  local paren_levels_stack_index3 = 0\n  local paren_levels_stack_index4\
    \ = 0\n  local paren_levels_stack_index5 = 0\n  local paren_levels_stack_index6\
    \ = 0\n  local paren_levels_stack_index7 = 0\n  local paren_levels_stack_index8\
    \ = 0\n  local paren_levels_stack_index9 = 0\n  local paren_levels_stack_index10\
    \ = 0\n  local paren_levels_stack_index11 = 0\n  local paren_levels_stack_index12\
    \ = 0\n  local paren_levels_stack_index13 = 0\n  local paren_levels_stack_index14\
    \ = 0\n  local paren_levels_stack_index15 = 0\n  local paren_levels_stack_index16\
    \ = 0\n  local paren_levels_stack_index17 = 0\n  local paren_levels_stack_index18\
    \ = 0\n  local paren_levels_stack_index19 = 0\n  local paren_levels_stack_index20\
    \ = 0\n  local paren_levels_stack_index21 = 0\n  local paren_levels_stack_index22\
    \ = 0\n  local paren_levels_stack_index23 = 0\n  local paren_levels_stack_index24\
    \ = 0\n  local paren_levels_stack_index25 = 0\n  local paren_levels_stack_index26\
    \ = 0\n  local paren_levels_stack_index27 = 0\n  local paren_levels_stack_index28\
    \ = 0\n  local paren_levels_stack_index29 = 0\n  local paren_levels_stack_index30\
    \ = 0\n  local paren_levels_stack_index31 = 0\n  local paren_levels_stack_index32\
    \ = 0\n  local paren_levels_stack_index33 = 0\n  local paren_levels_stack_index34\
    \ = 0\n  local paren_levels_stack_index35 = 0\n  local paren_levels_stack_index36\
    \ = 0\n  local paren_levels_stack_index37 = 0\n  local paren_levels_stack_index38\
    \ = 0\n  local paren_levels_stack_index39 = 0\n  local paren_levels_stack_index40\
    \ = 0\n  local paren_levels_stack_index41 = 0\n  local paren_levels_stack_index42\
    \ = 0\n  local paren_levels_stack_index43 = 0\n  local paren_levels_stack_index44\
    \ = 0\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3jf_4nzn.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_nesting = 0\n\
    \  local paren_levels = {}\n  local paren_nesting_levels = {}\n  local paren_levels_string\
    \ = ''\n  local paren_nesting_levels_string = ''\n  local paren_levels_string_index\
    \ = 0\n  local paren_nesting_levels_string_index = 0\n  local paren_levels_index\
    \ = 0\n  local paren_nesting_levels_index = 0\n  local paren_levels_index2 = 0\n\
    \  local paren_nesting_levels_index2 = 0\n  local paren_levels_index3 = 0\n  local\
    \ paren_nesting_levels_index3 = 0\n  local paren_levels_index4 = 0\n  local paren_nesting_levels_index4\
    \ = 0\n  local paren_levels_index5 = 0\n  local paren_nesting_levels_index5 =\
    \ 0\n  local paren_levels_index6 = 0\n  local paren_nesting_levels_index6 = 0\n\
    \  local paren_levels_index7 = 0\n  local paren_nesting_levels_index7 = 0\n  local\
    \ paren_levels_index8 = 0\n  local paren_nesting_levels_index8 = 0\n  local paren_levels_index9\
    \ = 0\n  local paren_nesting_levels_index9 = 0\n  local paren_levels_index10 =\
    \ 0\n  local paren_nesting_levels_index10 = 0\n  local paren_levels_index11 =\
    \ 0\n  local paren_nesting_levels_index11 = 0\n  local paren_levels_index12 =\
    \ 0\n  local paren_nesting_levels_index12 = 0\n  local paren_levels_index13 =\
    \ 0\n  local paren_nesting_levels_index13 = 0\n  local paren_levels_index14 =\
    \ 0\n  local paren_nesting_levels_index14 = 0\n  local paren_levels_index15 =\
    \ 0\n  local paren_nesting_levels_index15 = 0\n  local paren_levels_index16 =\
    \ 0\n  local paren_nesting_levels_index16 = 0\n  local paren_levels_index17 =\
    \ 0\n  local paren_nesting_levels_index17 = 0\n  local paren_levels_index18 =\
    \ 0\n  local paren_nesting_levels_index18 = 0\n  local paren_levels_index19 =\
    \ 0\n  local paren_nesting_levels_index19 = 0\n  local paren_levels_index20 =\
    \ 0\n  local paren_nesting_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk9o33xkm.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_nesting = 0\n\
    \  local paren_groups = {}\n  local paren_group_level = {}\n  local paren_group_nesting\
    \ = {}\n  local paren_group_level_count = {}\n  local paren_group_nesting_count\
    \ = {}\n  local paren_group_level_max_count = {}\n  local paren_group_nesting_max_count\
    \ = {}\n  local paren_group_level_max_count_index = {}\n  local paren_group_nesting_max_count_index\
    \ = {}\n  local paren_group_level_max_count_index = {}\n  local paren_group_nesting_max_count_index\
    \ = {}\n  local paren_group_level_max_count_index = {}\n  local paren_group_nesting_max_count_index\
    \ = {}\n  local paren_group_level_max_count_index = {}\n  local paren_group_nesting_max_count_index\
    \ = {}\n  local paren_group_level_max_count_index = {}\n  local paren_group_nesting_max_count_index\
    \ = {}\n  local paren_group_level_max_count_index = {}\n  local paren_group_nesting_max_count_index\
    \ = {}\n  local paren_group_level_max_count_index = {}\n  local paren_group_nesting_max_count_index\
    \ = {}\n  local paren_group_level_max_count_index = {}\n  local paren_group_nesting_max_count_index\
    \ = {}\n  local paren_group_level_max_count_index = {}\n  local paren_group_nesting_max_count_index\
    \ = {}\n  local paren_group_level_max_count_index = {}\n  local paren_group_nesting_max_count_index\
    \ = {}\n  local paren_group_level_max_count_index = {}\n  local paren_group_nesting_max_count_index\
    \ = {}\n  local paren_group_level_max_count_index = {}\n  local paren_group_nesting_max_count_index\
    \ = {}\n  local paren_group_level_max_count_index = {}\n  local paren_group_nesting_max_count_index\
    \ = {}\n  local paren_group_level_max_count_index = {}\n  local paren_group_nesting_max_count_index\
    \ = {}\n  local paren_group_level_max_count_index = {}\n  local paren_group_nesting_max_count_index\
    \ = {}\n  local paren_group_level_max_count_index = {}\n  local paren_group_nesting_max_count_index\
    \ = {}\n  local paren_group_level_max_count_index = {}\n  local paren_group_nesting_max_count_index\
    \ = {}\n  local paren_group_level_max_count_index = {}\n  local paren_group_nesting_max_count_index\
    \ = {}\n  local paren_group_level_max_count_index = {}\n  \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpatn95io_.lua:64: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local paren_count = 0\n  local paren_level = 0\n  local\
    \ paren_stack = { }\n  local paren_stack_len = #paren_stack\n  local paren_stack_reversed\
    \ = false\n  local paren_stack_len = 0\n  local paren_stack_reversed = false\n\
    \  local paren_stack_len = 0\n  local paren_stack_reversed = false\n  local paren_stack_len\
    \ = 0\n  local paren_stack_reversed = false\n  local paren_stack_len = 0\n  local\
    \ paren_stack_reversed = false\n  local paren_stack_len = 0\n  local paren_stack_reversed\
    \ = false\n  local paren_stack_len = 0\n  local paren_stack_reversed = false\n\
    \  local paren_stack_len = 0\n  local paren_stack_reversed = false\n  local paren_stack_len\
    \ = 0\n  local paren_stack_reversed = false\n  local paren_stack_len = 0\n  local\
    \ paren_stack_reversed = false\n  local paren_stack_len = 0\n  local paren_stack_reversed\
    \ = false\n  local paren_stack_len = 0\n  local paren_stack_reversed = false\n\
    \  local paren_stack_len = 0\n  local paren_stack_reversed = false\n  local paren_stack_len\
    \ = 0\n  local paren_stack_reversed = false\n  local paren_stack_len = 0\n  local\
    \ paren_stack_reversed = false\n  local paren_stack_len = 0\n  local paren_stack_reversed\
    \ = false\n  local paren_stack_len = 0\n  local paren_stack_reversed = false\n\
    \  local paren_stack_len = 0\n  local paren_stack_reversed = false\n  local paren_stack_len\
    \ = 0\n  local paren_stack_reversed = false\n  local paren_stack_len = 0\n  local\
    \ paren_stack_reversed = false\n  local paren_stack_len = 0\n  local paren_stack_reversed\
    \ = false\n  local paren_stack_len = 0\n  local paren_stack_reversed = false\n\
    \  local paren_stack_len = 0\n  local paren_stack_reversed = false\n  local paren_stack_len\
    \ = 0\n  local paren_stack_reversed = false\n  local paren_stack_len = 0\n  local\
    \ paren_stack_reversed = false\n  local paren_stack_len = 0\n  local paren_stack_reversed\
    \ = false\n  local paren_stack_len = 0\n  local paren_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqf40nl58.lua:74: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  for paren in string.gmatch(paren_string, \"%[(%a)]\") do\n    paren_stack[#paren_stack\
    \ + 1] = paren\n    paren_level[paren] = level\n    level = level + 1\n    if\
    \ level > max_level then\n      max_level = level\n    end\n  end\n  local max_level_stack\
    \ = #paren_stack\n  local max_level_stack_index = 0\n  local max_level_stack_value\
    \ = nil\n  for i = 1, max_level_stack do\n    if paren_level[paren_stack[i]] >\
    \ max_level_stack_value then\n      max_level_stack_value = paren_level[paren_stack[i]]\n\
    \      max_level_stack_index = i\n    end\n  end\n  local max_level_stack_value\
    \ = max_level_stack_value\n  local max_level_stack_index = max_level_stack_index\n\
    \  local paren_stack = paren_stack\n  local paren_level = paren_level\n  local\
    \ paren_stack_index = 1\n  local paren_stack_value = nil\n  local paren_stack_value\
    \ = nil\n  local paren_stack_value = nil\n  local paren_stack_value = nil\n  local\
    \ paren_stack_value = nil\n  local paren_stack_value = nil\n  local paren_stack_value\
    \ = nil\n  local paren_stack_value = nil\n  local paren_stack_value = nil\n  local\
    \ paren_stack_value = nil\n  local paren_stack_value = nil\n  local paren_stack_value\
    \ = nil\n  local paren_stack_value = nil\n  local paren_stack_value = nil\n  local\
    \ paren_stack_value = nil\n  local paren_stack_value = nil\n  local paren_stack_value\
    \ = nil\n  local paren_stack_value = nil\n  local paren_stack_value = nil\n  local\
    \ paren_stack_value = nil\n  local paren_stack_value = nil\n  local paren_stack_value\
    \ = nil\n  local paren_stack_value = nil\n  local paren_stack_value = nil\n  local\
    \ paren_stack_value = nil\n  local paren_stack_value = nil\n  local paren_stack_value\
    \ = nil\n  local paren_stack_value = nil\n  local paren_stack_value = nil\n  local\
    \ paren_stack_value = nil\n  local paren_stack_value = nil\n  local paren_stack_value\
    \ = nil\n  local paren_stack_value = nil\n  local paren_stack_value = nil\n  local\
    \ paren_stack_value = nil\n  local paren_stack_value = nil\n  local paren_stack_value\
    \ = nil\n  local paren_stack\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsskel1nn.lua:80: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = { 0 }\n  local paren_level = 0\n  local paren_nesting =\
    \ 0\n  local paren_levels = {}\n  local paren_nestings = {}\n  local paren_levels_string\
    \ = ''\n  local paren_nestings_string = ''\n  local paren_levels_strings = {}\n\
    \  local paren_nestings_strings = {}\n  local paren_levels_string = ''\n  local\
    \ paren_nestings_string = ''\n  local paren_levels_strings = {}\n  local paren_nestings_strings\
    \ = {}\n  local paren_levels_string = ''\n  local paren_nestings_string = ''\n\
    \  local paren_levels_strings = {}\n  local paren_nestings_strings = {}\n  local\
    \ paren_levels_string = ''\n  local paren_nestings_string = ''\n  local paren_levels_strings\
    \ = {}\n  local paren_nestings_strings = {}\n  local paren_levels_string = ''\n\
    \  local paren_nestings_string = ''\n  local paren_levels_strings = {}\n  local\
    \ paren_nestings_strings = {}\n  local paren_levels_string = ''\n  local paren_nestings_string\
    \ = ''\n  local paren_levels_strings = {}\n  local paren_nestings_strings = {}\n\
    \  local paren_levels_string = ''\n  local paren_nestings_string = ''\n  local\
    \ paren_levels_strings = {}\n  local paren_nestings_strings = {}\n  local paren_levels_string\
    \ = ''\n  local paren_nestings_string = ''\n  local paren_levels_strings = {}\n\
    \  local paren_nestings_strings = {}\n  local paren_levels_string = ''\n  local\
    \ paren_nestings_string = ''\n  local paren_levels_strings = {}\n  local paren_nestings_strings\
    \ = {}\n  local paren_levels_string = ''\n  local paren_nestings_string = ''\n\
    \  local paren_levels_strings = {}\n  local paren_nestings_strings = {}\n  local\
    \ paren_levels_string = ''\n  local paren_nestings_string = ''\n  local paren_levels_strings\
    \ = {}\n  local paren_nestings_strings = {}\n  local paren_levels_string = ''\n\
    \  local paren_nestings_string = ''\n  local paren_levels_strings = {}\n  local\
    \ paren_nestings_strings = {}\n  local paren_levels_string = ''\n  local paren_nestings_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpva05v731.lua:71: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_index = {}\n  local paren_levels_index[1] = 1\n \
    \ local paren_levels_index[2] = 2\n  local paren_levels_index[3] = 3\n  local\
    \ paren_levels_index[4] = 4\n  local paren_levels_index[5] = 5\n  local paren_levels_index[6]\
    \ = 6\n  local paren_levels_index[7] = 7\n  local paren_levels_index[8] = 8\n\
    \  local paren_levels_index[9] = 9\n  local paren_levels_index[10] = 10\n  local\
    \ paren_levels_index[11] = 11\n  local paren_levels_index[12] = 12\n  local paren_levels_index[13]\
    \ = 13\n  local paren_levels_index[14] = 14\n  local paren_levels_index[15] =\
    \ 15\n  local paren_levels_index[16] = 16\n  local paren_levels_index[17] = 17\n\
    \  local paren_levels_index[18] = 18\n  local paren_levels_index[19] = 19\n  local\
    \ paren_levels_index[20] = 20\n  local paren_levels_index[21] = 21\n  local paren_levels_index[22]\
    \ = 22\n  local paren_levels_index[23] = 23\n  local paren_levels_index[24] =\
    \ 24\n  local paren_levels_index[25] = 25\n  local paren_levels_index[26] = 26\n\
    \  local paren_levels_index[27] = 27\n  local paren_levels_index[28] = 28\n  local\
    \ paren_levels_index[29] = 29\n  local paren_levels_index[30] = 30\n  local paren_levels_index[31]\
    \ = 31\n  local paren_levels_index[32] = 32\n  local paren_levels_index[33] =\
    \ 33\n  local paren_levels_index[34] = 34\n  local paren_levels_index[35] = 35\n\
    \  local paren_levels_index[36] = 36\n  local paren_levels_index[37] = 37\n  local\
    \ paren_levels_index[38] = 38\n  local paren_levels_index[39] = 39\n  local paren_levels_index[40]\
    \ = 40\n  local paren_levels_index[41] = 41\n  \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxvys32wu.lua:12: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_stack_count\
    \ = {}\n  local paren_stack_index = {}\n  local paren_stack_max = {}\n  local\
    \ paren_stack_max_index = {}\n  local paren_stack_max_index = {}\n  local paren_stack_max_index\
    \ = {}\n  local paren_stack_max_index = {}\n  local paren_stack_max_index = {}\n\
    \  local paren_stack_max_index = {}\n  local paren_stack_max_index = {}\n  local\
    \ paren_stack_max_index = {}\n  local paren_stack_max_index = {}\n  local paren_stack_max_index\
    \ = {}\n  local paren_stack_max_index = {}\n  local paren_stack_max_index = {}\n\
    \  local paren_stack_max_index = {}\n  local paren_stack_max_index = {}\n  local\
    \ paren_stack_max_index = {}\n  local paren_stack_max_index = {}\n  local paren_stack_max_index\
    \ = {}\n  local paren_stack_max_index = {}\n  local paren_stack_max_index = {}\n\
    \  local paren_stack_max_index = {}\n  local paren_stack_max_index = {}\n  local\
    \ paren_stack_max_index = {}\n  local paren_stack_max_index = {}\n  local paren_stack_max_index\
    \ = {}\n  local paren_stack_max_index = {}\n  local paren_stack_max_index = {}\n\
    \  local paren_stack_max_index = {}\n  local paren_stack_max_index = {}\n  local\
    \ paren_stack_max_index = {}\n  local paren_stack_max_index = {}\n  local paren_stack_max_index\
    \ = {}\n  local paren_stack_max_index = {}\n  local paren_stack_max_index = {}\n\
    \  local paren_stack_max_index = {}\n  local paren_stack_max_index = {}\n  local\
    \ paren_stack_max_index = {}\n  local paren_stack_max_index = {}\n  local paren_stack_max_index\
    \ = {}\n  local paren_stack_max_index = {}\n  local paren_stack_max_index = {}\n\
    \  local paren_stack_max_index = {}\n  local paren_stack_max_index = {}\n  local\
    \ paren_stack_max_index = {}\n  local paren_stack_max_index = {}\n  local paren_stack_max_index\
    \ = {}\n  local paren_stack_max_index = {}\n  local paren_stack_max_index = {}\n\
    \  local paren_stack_max_index = {}\n  local paren_stack_max_index = {}\n  local\
    \ paren_stack_max_index = {}\n  local paren_stack_max_index = {}\n  local paren_stack_max_index\
    \ = {}\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7thwr8bo.lua:75: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local max_level = 0\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a+)%]') do\n    local level = #paren_stack\n    if level > max_level then\n\
    \      max_level = level\n    end\n    table.insert(paren_stack, paren)\n  end\n\
    \  return max_level\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuutmoc8_.lua:22:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpuutmoc8_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n\
    \  local paren_levels_stack_size = #paren_levels_stack\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = false\n  local paren_levels_stack_is_full_index\
    \ = 0\n  local paren_levels_stack_is_full_size = 0\n  local paren_levels_stack_is_full_is_empty\
    \ = true\n  local paren_levels_stack_is_full_is_empty_index = 0\n  local paren_levels_stack_is_full_is_empty_size\
    \ = 0\n  local paren_levels_stack_is_full_is_empty_is_full = true\n  local paren_levels_stack_is_full_is_empty_is_full_index\
    \ = 0\n  local paren_levels_stack_is_full_is_empty_is_full_size = 0\n  local paren_levels_stack_is_full_is_empty_is_full_is_empty\
    \ = true\n  local paren_levels_stack_is_full_is_empty_is_full_is_empty_index =\
    \ 0\n  local paren_levels_stack_is_full_is_empty_is_full_is_empty_size = 0\n \
    \ local paren_levels_stack_is_full_is_empty_is_full_is_empty_is_full = true\n\
    \  local paren_levels_stack_is_full_is_empty_is_full_is_empty_is_full_index =\
    \ 0\n  local paren_levels_stack_is_full_is_empty_is_full_is_empty_is_full_size\
    \ = 0\n  local paren_levels_stack_is_full_is_empty_is_full_is_empty_is_full_is_empty\
    \ = true\n  local paren_levels_stack_is_full_is_empty_is_full_is_empty_is_full_is_empty_index\
    \ = 0\n  local paren_levels_stack_is_full_is_empty_is_full_is_empty_is_full_is_empty_size\
    \ = 0\n  local paren_levels_stack_is_full_is_empty_is_full_is_empty_is_full_is_empty_is_full\
    \ = true\n  local paren_levels_stack_is_full_is_empty_is_full_is_empty_is_full_is_empty_is_full_index\
    \ = 0\n  local paren_levels_stack_is_full_is_empty_is_full_is_empty_is_full_is_empty_is_full_size\
    \ = 0\n  local paren_levels_stack_is_full_is_empty_is_full_is_empty_is_full_is_empty_is_full_is_empty_is_full\
    \ = true\n  local paren_levels_stack_is_full_is_empty_is_full_is_empty_is_full_is_empty_is_full_is_empty_is_full_index\
    \ = 0\n  local paren_levels_stack_is_full_is_empty_is_full_is_empty_is_\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzppnyzk6.lua:48: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { 0 }\n  local paren_stack = { 0 }\n  local paren_level = 0\n\
    \  local paren_nesting = 0\n  local paren_levels = { 0 }\n  local paren_levels_string\
    \ = paren_string\n  local paren_levels_string = paren_levels_string:gsub('(%S+)',\
    \ '%d+')\n  local paren_levels_string = paren_levels_string:gsub('(%S+)', '%d+')\n\
    \  local paren_levels_string = paren_levels_string:gsub('(%S+)', '%d+')\n  local\
    \ paren_levels_string = paren_levels_string:gsub('(%S+)', '%d+')\n  local paren_levels_string\
    \ = paren_levels_string:gsub('(%S+)', '%d+')\n  local paren_levels_string = paren_levels_string:gsub('(%S+)',\
    \ '%d+')\n  local paren_levels_string = paren_levels_string:gsub('(%S+)', '%d+')\n\
    \  local paren_levels_string = paren_levels_string:gsub('(%S+)', '%d+')\n  local\
    \ paren_levels_string = paren_levels_string:gsub('(%S+)', '%d+')\n  local paren_levels_string\
    \ = paren_levels_string:gsub('(%S+)', '%d+')\n  local paren_levels_string = paren_levels_string:gsub('(%S+)',\
    \ '%d+')\n  local paren_levels_string = paren_levels_string:gsub('(%S+)', '%d+')\n\
    \  local paren_levels_string = paren_levels_string:gsub('(%S+)', '%d+')\n  local\
    \ paren_levels_string = paren_levels_string:gsub('(%S+)', '%d+')\n  local paren_levels_string\
    \ = paren_levels_string:gsub('(%S+)', '%d+')\n  local paren_levels_string = paren_levels_string:gsub('(%S+)',\
    \ '%d+')\n  local paren_levels_string = paren_levels_string:gsub('(%S+)', '%d+')\n\
    \  local paren_levels_string = paren_levels_string:gsub('(%S+)', '%d+')\n  local\
    \ paren_levels_string = paren_levels_string:gsub('(%S+)', '%d+')\n  local paren\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqdmsm_d3.lua:42: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_count = 0\n  local paren_level = 0\n\
    \  local paren_max_level = 0\n  local paren_max_level_stack = {}\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_index2 = 0\n  local paren_max_level_stack_index3\
    \ = 0\n  local paren_max_level_stack_index4 = 0\n  local paren_max_level_stack_index5\
    \ = 0\n  local paren_max_level_stack_index6 = 0\n  local paren_max_level_stack_index7\
    \ = 0\n  local paren_max_level_stack_index8 = 0\n  local paren_max_level_stack_index9\
    \ = 0\n  local paren_max_level_stack_index10 = 0\n  local paren_max_level_stack_index11\
    \ = 0\n  local paren_max_level_stack_index12 = 0\n  local paren_max_level_stack_index13\
    \ = 0\n  local paren_max_level_stack_index14 = 0\n  local paren_max_level_stack_index15\
    \ = 0\n  local paren_max_level_stack_index16 = 0\n  local paren_max_level_stack_index17\
    \ = 0\n  local paren_max_level_stack_index18 = 0\n  local paren_max_level_stack_index19\
    \ = 0\n  local paren_max_level_stack_index20 = 0\n  local paren_max_level_stack_index21\
    \ = 0\n  local paren_max_level_stack_index22 = 0\n  local paren_max_level_stack_index23\
    \ = 0\n  local paren_max_level_stack_index24 = 0\n  local paren_max_level_stack_index25\
    \ = 0\n  local paren_max_level_stack_index26 = 0\n  local paren_max_level_stack_index27\
    \ = 0\n  local paren_max_level_stack_index28 = 0\n  local paren_max_level_stack_index29\
    \ = 0\n  local paren_max_level_stack_index30 = 0\n  local paren_max_level_stack_index31\
    \ = 0\n  local paren_max_level_stack_index32 = 0\n  local paren_max_level_stack_index33\
    \ = 0\n  local paren_max_level_stack_index34 = 0\n  local paren_max_level_stack_index35\
    \ = 0\n  local paren_max_level_stack_index36 = 0\n  local paren_max_level_stack_index37\
    \ = 0\n  local paren_max_level_stack_index38 = 0\n  local paren_max_level_stack_index39\
    \ = 0\n  local paren_max_level_stack_index40 = 0\n  local paren_max_level_stack_index41\
    \ = 0\n  local paren_max_level_stack_index42 = 0\n  local paren_max_level_stack_index43\
    \ = 0\n  local paren\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsgwlpl7m.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_level = 0\n  local paren_level_string = ''\n  local paren_level_char =\
    \ ''\n  local paren_level_char_count = 0\n  local paren_level_char_index = 0\n\
    \  local paren_level_char_length = 0\n  local paren_level_char_length_index =\
    \ 0\n  local paren_level_char_length_count = 0\n  local paren_level_char_length_index_count\
    \ = 0\n  local paren_level_char_length_count = 0\n  local paren_level_char_length_index_count_max\
    \ = 0\n  local paren_level_char_length_index_count_min = 0\n  local paren_level_char_length_index_count_index\
    \ = 0\n  local paren_level_char_length_index_count_index = 0\n  local paren_level_char_length_index_count_index\
    \ = 0\n  local paren_level_char_length_index_count_index = 0\n  local paren_level_char_length_index_count_index\
    \ = 0\n  local paren_level_char_length_index_count_index = 0\n  local paren_level_char_length_index_count_index\
    \ = 0\n  local paren_level_char_length_index_count_index = 0\n  local paren_level_char_length_index_count_index\
    \ = 0\n  local paren_level_char_length_index_count_index = 0\n  local paren_level_char_length_index_count_index\
    \ = 0\n  local paren_level_char_length_index_count_index = 0\n  local paren_level_char_length_index_count_index\
    \ = 0\n  local paren_level_char_length_index_count_index = 0\n  local paren_level_char_length_index_count_index\
    \ = 0\n  local paren_level_char_length_index_count_index = 0\n  local paren_level_char_length_index_count_index\
    \ = 0\n  local paren_level_char_length_index_count_index = 0\n  local paren_level_char_length_index_count_index\
    \ = 0\n  local paren_level_char_length_index_count_index = 0\n  local paren_level_char_length_index_count_index\
    \ = 0\n  local paren_level_char_length_index_count_index = 0\n  local paren_level_char_length_index_count_index\
    \ = 0\n  local paren_level_char_length_index_count_index = 0\n  local paren_level_char_length_index_count_index\
    \ = 0\n  local paren_level_char_length_index_count_index = 0\n  local paren_level_char_length_index_count_index\
    \ = 0\n  local paren_level_char_length_index_count_index = 0\n  local paren_level_char_length_index_count_index\
    \ = 0\n  local paren_level_char_length_index_count_index = 0\n  local paren_level_char_length_index_count_index\
    \ = 0\n  local paren_level_char_length\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpraa_d8rc.lua:63: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_nesting = 0\n\
    \  local paren_levels = {}\n  local paren_nestings = {}\n  local paren_levels_string\
    \ = ''\n  local paren_nestings_string = ''\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a)]+') do\n    local paren_level = paren_level + 1\n    paren_levels[paren_level]\
    \ = paren\n    paren_levels_string = paren_levels_string .. paren\n    paren_nestings[paren_level]\
    \ = paren_nesting\n    paren_nestings_string = paren_nestings_string .. paren_nesting\n\
    \  end\n  local function count_parens(paren_string)\n    local paren_stack = {}\n\
    \    local paren_level = 0\n    local paren_nesting = 0\n    local paren_levels\
    \ = {}\n    local paren_nestings = {}\n    local paren_levels_string = ''\n  \
    \  local paren_nestings_string = ''\n    for paren in string.gmatch(paren_string,\
    \ '%[(%a)]+') do\n      local paren_level = paren_level + 1\n      paren_levels[paren_level]\
    \ = paren\n      paren_levels_string = paren_levels_string .. paren\n      paren_nestings[paren_level]\
    \ = paren_nesting\n      paren_nestings_string = paren_nestings_string .. paren_nesting\n\
    \    end\n    local function count_parens(paren_string)\n      local paren_stack\
    \ = {}\n      local paren_level = 0\n      local paren_nesting = 0\n      local\
    \ paren_levels = {}\n      local paren_nestings = {}\n      local paren_levels_string\
    \ = ''\n      local paren_nestings_string = ''\n      for paren in string.gmatch(paren_string,\
    \ '%[(%a)]+') do\n        local paren_level = paren_level + 1\n        paren_levels[paren_level]\
    \ = paren\n        paren_levels_string = paren_levels_string .. paren\n      \
    \  paren_nestings[paren_level] = paren_nesting\n        paren_nestings_string\
    \ = paren_nestings_string .. paren_nesting\n      end\n      local function count_parens(paren_string)\n\
    \        local paren_stack = {}\n        local paren_level = 0\n        local\
    \ paren_nesting = 0\n        local paren_levels = {}\n        local paren_nestings\
    \ = {}\n        local paren_levels_string = ''\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsr8e80c9.lua:68: ''end'' expected (to close ''function'' at
    line 51) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  for paren\
    \ in string.gmatch(paren_string, '%[(%a)]+') do\n    level = level + 1\n    paren_stack[#paren_stack\
    \ + 1] = paren\n  end\n  local stack_size = #paren_stack\n  while stack_size >\
    \ 0 do\n    local paren = paren_stack[stack_size]\n    stack_size = stack_size\
    \ - 1\n    if paren == '(' or paren == '[' then\n      max_level = max_level +\
    \ 1\n    end\n    if paren == ')' or paren == ']' then\n      max_level = max_level\
    \ - 1\n    end\n    if max_level < 0 then\n      return nil\n    end\n  end\n\
    \  return max_level\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyfwdrz7s.lua:34:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpyfwdrz7s.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_stack_size\
    \ = #paren_string\n  local paren_stack_pos = 0\n  local paren_stack_last_pos =\
    \ 0\n  local paren_stack_last_level = 0\n  local paren_stack_last_group = nil\n\
    \  local paren_stack_last_group_pos = 0\n  local paren_stack_last_group_level\
    \ = 0\n  local paren_stack_last_group_char = nil\n  local paren_stack_last_group_char_pos\
    \ = 0\n  local paren_stack_last_group_char_level = 0\n  local paren_stack_last_group_char_len\
    \ = nil\n  local paren_stack_last_group_char_len = #paren_stack_last_group\n \
    \ local paren_stack_last_group_char_index = nil\n  local paren_stack_last_group_char_index_pos\
    \ = 0\n  local paren_stack_last_group_char_index_level = 0\n  local paren_stack_last_group_char_index_len\
    \ = nil\n  local paren_stack_last_group_char_index_len = #paren_stack_last_group_char_index\n\
    \  local paren_stack_last_group_char_index_index = nil\n  local paren_stack_last_group_char_index_index_pos\
    \ = 0\n  local paren_stack_last_group_char_index_index_level = 0\n  local paren_stack_last_group_char_index_index_len\
    \ = nil\n  local paren_stack_last_group_char_index_index_len = #paren_stack_last_group_char_index_index\n\
    \  local paren_stack_last_group_char_index_index = nil\n  local paren_stack_last_group_char_index_index_pos\
    \ = 0\n  local paren_stack_last_group_char_index_index_level = 0\n  local paren_stack_last_group_char_index_index_len\
    \ = nil\n  local paren_stack_last_group_char_index_index_len = #paren_stack_last_group_char_index_index\n\
    \  local paren_stack_last_group_char_index_index = nil\n  local paren_stack_last_group_char_index_index_pos\
    \ = 0\n  local paren_stack_last_group_char_index_index_level = 0\n  local paren_stack_last_group_char_index_index_len\
    \ = nil\n  local paren_stack_last_group_char_index_index_len = #paren_stack_last_group_char_index_index\n\
    \  local paren_stack_last_group_char_index_index = nil\n  local paren_stack_last_group_char_index_index_pos\
    \ = 0\n  local paren_stack_last_group_char_index_index_level = 0\n  local paren_stack_last_group_char_index_index_len\
    \ = nil\n  local paren_stack_last_group_char_index_index_len = #paren_stack_last_group_char_index_index\n\
    \  local paren_stack_last_group_char_index_index = nil\n  local paren_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0f4jofaa.lua:58: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n\
    \  local paren_levels_stack_index2 = 0\n  local paren_levels_stack_index3 = 0\n\
    \  local paren_levels_stack_index4 = 0\n  local paren_levels_stack_index5 = 0\n\
    \  local paren_levels_stack_index6 = 0\n  local paren_levels_stack_index7 = 0\n\
    \  local paren_levels_stack_index8 = 0\n  local paren_levels_stack_index9 = 0\n\
    \  local paren_levels_stack_index10 = 0\n  local paren_levels_stack_index11 =\
    \ 0\n  local paren_levels_stack_index12 = 0\n  local paren_levels_stack_index13\
    \ = 0\n  local paren_levels_stack_index14 = 0\n  local paren_levels_stack_index15\
    \ = 0\n  local paren_levels_stack_index16 = 0\n  local paren_levels_stack_index17\
    \ = 0\n  local paren_levels_stack_index18 = 0\n  local paren_levels_stack_index19\
    \ = 0\n  local paren_levels_stack_index20 = 0\n  local paren_levels_stack_index21\
    \ = 0\n  local paren_levels_stack_index22 = 0\n  local paren_levels_stack_index23\
    \ = 0\n  local paren_levels_stack_index24 = 0\n  local paren_levels_stack_index25\
    \ = 0\n  local paren_levels_stack_index26 = 0\n  local paren_levels_stack_index27\
    \ = 0\n  local paren_levels_stack_index28 = 0\n  local paren_levels_stack_index29\
    \ = 0\n  local paren_levels_stack_index30 = 0\n  local paren_levels_stack_index31\
    \ = 0\n  local paren_levels_stack_index32 = 0\n  local paren_levels_stack_index33\
    \ = 0\n  local paren_levels_stack_index34 = 0\n  local paren_levels_stack_index35\
    \ = 0\n  local paren_levels_stack_index36 = 0\n  local paren_levels_stack_index37\
    \ = 0\n  local paren_levels_stack_index38 = 0\n  local paren_levels_stack_index39\
    \ = 0\n  local paren_levels_stack_index40 = 0\n  local paren_levels_stack_index41\
    \ = 0\n  local paren_levels_stack_index42 = 0\n  local paren_levels_stack_index43\
    \ = 0\n  local paren_levels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzfi1y745.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_levels = {}\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a+)%]') do\n    local paren_level = #paren_stack\n    table.insert(paren_stack,\
    \ paren)\n    table.insert(paren_levels, paren_level)\n  end\n  local max_levels\
    \ = #paren_levels\n  local max_level = 0\n  for i = 1, max_levels do\n    if paren_levels[i]\
    \ > max_level then\n      max_level = paren_levels[i]\n    end\n  end\n  local\
    \ max_level_paren_stack = {}\n  for i = 1, max_level do\n    table.insert(max_level_paren_stack,\
    \ paren_stack[i])\n  end\n  local max_level_paren_levels = #max_level_paren_stack\n\
    \  local max_level_paren_level = 0\n  for i = 1, max_level_paren_levels do\n \
    \   if max_level_paren_stack[i] > max_level_paren_level then\n      max_level_paren_level\
    \ = max_level_paren_stack[i]\n    end\n  end\n  return max_level_paren_level\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_kvpsqn.lua:38:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpg_kvpsqn.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_groups = {}\n  local paren_group_index = {}\n  local paren_group_count\
    \ = {}\n  local paren_group_levels = {}\n  local paren_group_level_index = {}\n\
    \  local paren_group_level_count = {}\n  local paren_group_level_lengths = {}\n\
    \  local paren_group_level_length_index = {}\n  local paren_group_level_length_count\
    \ = {}\n  local paren_group_level_length_index_count = {}\n  local paren_group_level_length_index_count_index\
    \ = {}\n  local paren_group_level_length_index_count_index_index = {}\n  local\
    \ paren_group_level_length_index_count_index_index = {}\n  local paren_group_level_length_index_count_index_index_index\
    \ = {}\n  local paren_group_level_length_index_count_index_index_index = {}\n\
    \  local paren_group_level_length_index_count_index_index_index_index = {}\n \
    \ local paren_group_level_length_index_count_index_index_index_index = {}\n  local\
    \ paren_group_level_length_index_count_index_index_index_index_index = {}\n  local\
    \ paren_group_level_length_index_count_index_index_index_index_index = {}\n  local\
    \ paren_group_level_length_index_count_index_index_index_index_index = {}\n  local\
    \ paren_group_level_length_index_count_index_index_index_index_index_index = {}\n\
    \  local paren_group_level_length_index_count_index_index_index_index_index_index\
    \ = {}\n  local paren_group_level_length_index_count_index_index_index_index_index_index\
    \ = {}\n  local paren_group_level_length_index_count_index_index_index_index_index_index\
    \ = {}\n  local paren_group_level_length_index_count_index_index_index_index_index_index_index\
    \ = {}\n  local paren_group_level_length_index_count_index_index_index_index_index_index_index\
    \ = {}\n  local paren_group_level_length_index_count_index_index_index_index_index_index_index_index\
    \ = {}\n  local paren_group_level_length_index_count_index_index_index_index_index_index_index_index\
    \ = {}\n  local paren_group_level_length_index_count_index_index_index_index_index_index_index_index\
    \ = {}\n  local paren_group_level_length_index_count_index_index_index_index_index_index_index_index\
    \ = {}\n  local paren_group_level_length_index_count_index_index_index_index_index_index_index_index_index\
    \ = {}\n  local paren_group_level_length_index_count_index_index_index_index_index_index_index_index_index_index\
    \ = {}\n  local paren_group_level_length_index_count_index_index_index_index_index_index_index_index_index_index\
    \ = {}\n  local paren_group_level_length_index_count_index_index_index_index_index_index_index_index_index_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw6ibq2im.lua:53: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group_count = 1\n  local paren_group_max_level\
    \ = 0\n  local paren_group_max_level_length = 0\n  local paren_group_max_level_char\
    \ = ''\n  local paren_group_max_level_char_length = 0\n  local paren_group_max_level_char_position\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp236_tsiy.lua:62: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_levels = {}\n\
    \  local paren_levels_size = 0\n  local paren_levels_max = 0\n  local paren_levels_max_size\
    \ = 0\n  local paren_levels_max_count = 0\n  local paren_levels_max_count_size\
    \ = 0\n  local paren_levels_max_count_count = 0\n  local paren_levels_max_count_count_size\
    \ = 0\n  local paren_levels_max_count_count_count = 0\n  local paren_levels_max_count_count_count_size\
    \ = 0\n  local paren_levels_max_count_count_count_count = 0\n  local paren_levels_max_count_count_count_size\
    \ = 0\n  local paren_levels_max_count_count_count_count = 0\n  local paren_levels_max_count_count_count_size\
    \ = 0\n  local paren_levels_max_count_count_count_count_count = 0\n  local paren_levels_max_count_count_count_size\
    \ = 0\n  local paren_levels_max_count_count_count_count_count = 0\n  local paren_levels_max_count_count_count_size\
    \ = 0\n  local paren_levels_max_count_count_count_count_count = 0\n  local paren_levels_max_count_count_count_size\
    \ = 0\n  local paren_levels_max_count_count_count_count_count = 0\n  local paren_levels_max_count_count_count_size\
    \ = 0\n  local paren_levels_max_count_count_count_count_count = 0\n  local paren_levels_max_count_count_count_size\
    \ = 0\n  local paren_levels_max_count_count_count_count_count = 0\n  local paren_levels_max_count_count_count_size\
    \ = 0\n  local paren_levels_max_count_count_count_count_count = 0\n  local paren_levels_max_count_count_count_size\
    \ = 0\n  local paren_levels_max_count_count_count_count_count = 0\n  local paren_levels_max_count_count_count_size\
    \ = 0\n  local paren_levels_max_count_count_count_count_count = 0\n  local paren_levels_max_count_count_count_size\
    \ = 0\n  local paren_levels_max_count_count_count_count_count = 0\n  local paren_levels_max_count_count_count_size\
    \ = 0\n  local paren_levels_max_count_count_count_count_count = 0\n  local paren_levels_max_count_count_count_size\
    \ = 0\n  local paren_levels_max_count_count_count_count_count = 0\n  local paren_levels_max_count_count_count_size\
    \ = 0\n  local paren_levels_max_count_count_count_count_count = 0\n  local paren_levels_max_count_count_count_size\
    \ = 0\n  local paren_levels_max_count_count_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdrvdnxtf.lua:59: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = {}\n  local paren_level_count\
    \ = {}\n  local paren_level_max_count = {}\n  local paren_level_max_count_index\
    \ = {}\n  local paren_level_max_count_index2 = {}\n  local paren_level_max_count_index3\
    \ = {}\n  local paren_level_max_count_index4 = {}\n  local paren_level_max_count_index5\
    \ = {}\n  local paren_level_max_count_index6 = {}\n  local paren_level_max_count_index7\
    \ = {}\n  local paren_level_max_count_index8 = {}\n  local paren_level_max_count_index9\
    \ = {}\n  local paren_level_max_count_index10 = {}\n  local paren_level_max_count_index11\
    \ = {}\n  local paren_level_max_count_index12 = {}\n  local paren_level_max_count_index13\
    \ = {}\n  local paren_level_max_count_index14 = {}\n  local paren_level_max_count_index15\
    \ = {}\n  local paren_level_max_count_index16 = {}\n  local paren_level_max_count_index17\
    \ = {}\n  local paren_level_max_count_index18 = {}\n  local paren_level_max_count_index19\
    \ = {}\n  local paren_level_max_count_index20 = {}\n  local paren_level_max_count_index21\
    \ = {}\n  local paren_level_max_count_index22 = {}\n  local paren_level_max_count_index23\
    \ = {}\n  local paren_level_max_count_index24 = {}\n  local paren_level_max_count_index25\
    \ = {}\n  local paren_level_max_count_index26 = {}\n  local paren_level_max_count_index27\
    \ = {}\n  local paren_level_max_count_index28 = {}\n  local paren_level_max_count_index29\
    \ = {}\n  local paren_level_max_count_index30 = {}\n  local paren_level_max_count_index31\
    \ = {}\n  local paren_level_max_count_index32 = {}\n  local paren_level_max_count_index33\
    \ = {}\n  local paren_level_max_count_index34 = {}\n  local paren_level_max_count_index35\
    \ = {}\n  local paren_level_max_count_index36 = {}\n  local paren_level_max_count_index37\
    \ = {}\n  local paren_level_max_count_index38 = {}\n  local paren_level_max_count_index39\
    \ = {}\n  local paren_level_max_count_index40 = {}\n  local paren_level_max_count_index41\
    \ = {}\n  local paren_level_max_count_index42 = {}\n  local paren_level_max_count_index43\
    \ = {}\n  local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpudu5petl.lua:64: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_nesting = 0\n\
    \  local paren_groups = {}\n  local paren_group_level = {}\n  local paren_group_nesting\
    \ = {}\n  local paren_group_level_count = {}\n  local paren_group_nesting_count\
    \ = {}\n  local paren_group_level_max_count = 0\n  local paren_group_nesting_max_count\
    \ = 0\n  local paren_group_level_max_nesting = 0\n  local paren_group_nesting_max_nesting\
    \ = 0\n  local paren_group_level_max_nesting_count = 0\n  local paren_group_nesting_max_nesting_count\
    \ = 0\n  local paren_group_level_max_nesting_count_max = 0\n  local paren_group_nesting_max_nesting_count_max\
    \ = 0\n  local paren_group_level_max_nesting_count_max_max = 0\n  local paren_group_nesting_max_nesting_count_max_max\
    \ = 0\n  local paren_group_level_max_nesting_count_max_max_max = 0\n  local paren_group_nesting_max_nesting_count_max_max_max\
    \ = 0\n  local paren_group_level_max_nesting_count_max_max_max_max = 0\n  local\
    \ paren_group_nesting_max_nesting_count_max_max_max_max = 0\n  local paren_group_level_max_nesting_count_max_max_max_max_max\
    \ = 0\n  local paren_group_nesting_max_nesting_count_max_max_max_max_max = 0\n\
    \  local paren_group_level_max_nesting_count_max_max_max_max_max_max = 0\n  local\
    \ paren_group_nesting_max_nesting_count_max_max_max_max_max_max = 0\n  local paren_group_level_max_nesting_count_max_max_max_max_max_max_max\
    \ = 0\n  local paren_group_nesting_max_nesting_count_max_max_max_max_max_max_max\
    \ = 0\n  local paren_group_level_max_nesting_count_max_max_max_max_max_max_max_max\
    \ = 0\n  local paren_group_nesting_max_nesting_count_max_max_max_max_max_max_max_max\
    \ = 0\n  local paren_group_level_max_nesting_count_max_max_max_max_max_max_max_max\
    \ = 0\n  local paren_group_nesting_max_nesting_count_max_max_max_max_max_max_max_max\
    \ = 0\n  local paren_group_level_max_nesting_count_max_max_max_max_max_max_max_max_max\
    \ = 0\n  local paren_group_nesting_max_nesting_count_max_max_max_max_max_max_max_max_max\
    \ = 0\n  local paren_group_level_max_nesting_count_max_max_max_max_max_max_max_max_max_max\
    \ = 0\n  local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn184xliy.lua:52: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_level = 0\n  local paren_nesting = 0\n  local paren_nesting_level = 0\n\
    \  local paren_nesting_nesting = 0\n  local paren_nesting_nesting_level = 0\n\
    \  local paren_nesting_nesting_nesting = 0\n  local paren_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwuoc76ie.lua:55: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_level_count = {}\n  local paren_level_stack = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9thawwij.lua:75: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_level = {}\n  local\
    \ paren_level_count = {}\n  local paren_level_max = {}\n  local paren_level_max_count\
    \ = 0\n  local paren_level_max_index = {}\n  local paren_level_max_index_count\
    \ = 0\n  local paren_level_max_index_index = {}\n  local paren_level_max_index_index_count\
    \ = 0\n  local paren_level_max_index_index_index = {}\n  local paren_level_max_index_index_index_count\
    \ = 0\n  local paren_level_max_index_index_index_index = {}\n  local paren_level_max_index_index_index_index_count\
    \ = 0\n  local paren_level_max_index_index_index_index = {}\n  local paren_level_max_index_index_index_index_count\
    \ = 0\n  local paren_level_max_index_index_index_index = {}\n  local paren_level_max_index_index_index_index_count\
    \ = 0\n  local paren_level_max_index_index_index_index = {}\n  local paren_level_max_index_index_index_index_count\
    \ = 0\n  local paren_level_max_index_index_index_index = {}\n  local paren_level_max_index_index_index_index_count\
    \ = 0\n  local paren_level_max_index_index_index_index = {}\n  local paren_level_max_index_index_index_index_count\
    \ = 0\n  local paren_level_max_index_index_index_index = {}\n  local paren_level_max_index_index_index_index_count\
    \ = 0\n  local paren_level_max_index_index_index_index = {}\n  local paren_level_max_index_index_index_index_count\
    \ = 0\n  local paren_level_max_index_index_index_index = {}\n  local paren_level_max_index_index_index_index_count\
    \ = 0\n  local paren_level_max_index_index_index_index = {}\n  local paren_level_max_index_index_index_index_count\
    \ = 0\n  local paren_level_max_index_index_index_index = {}\n  local paren_level_max_index_index_index_index_count\
    \ = 0\n  local paren_level_max_index_index_index_index = {}\n  local paren_level_max_index_index_index_index_count\
    \ = 0\n  local paren_level_max_index_index_index_index = {}\n  local paren_level_max_index_index_index_index_count\
    \ = 0\n  local paren_level_max_index_index_index_index = {}\n  local paren_level_max_index_index_index_index_count\
    \ = 0\n  local paren_level_max_index_index_index_index = {}\n  local paren_level_max_index_index_index_index_count\
    \ = 0\n  local paren_level_max_index_index_index_index = {}\n  local paren_level_max_index_index_index_index_count\
    \ = 0\n  local paren_level_max_index_index_index_index = {}\n  local paren_level_max_index_index_index_index_count\
    \ = 0\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpi5izaokn.lua:63: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_levels = {}\n  for paren in string.gmatch(paren_string, '%[(%a)]+')\
    \ do\n    local paren_level = paren_level + 1\n    local paren_group = paren\n\
    \    if paren_level > 1 then\n      paren_group = paren_group:gsub('%[(%a)]+',\
    \ '()')\n    end\n    table.insert(paren_stack, 1, paren_group)\n    table.insert(paren_groups,\
    \ paren_group)\n    table.insert(paren_group_levels, 1, paren_level)\n  end\n\
    \  local max_level = table.max(paren_group_levels)\n  local max_level_groups =\
    \ table.filter(paren_groups, function(group) return paren_group_levels[group]\
    \ == max_level end)\n  local max_level_group_string = table.concat(max_level_groups,\
    \ '')\n  local max_level_group_count = max_level_groups:len()\n  local max_level_group_index\
    \ = max_level_groups:len()\n  local max_level_group_paren_groups = table.filter(paren_groups,\
    \ function(group) return paren_group_levels[group] == max_level end)\n  local\
    \ max_level_group_paren_group_string = table.concat(max_level_group_paren_groups,\
    \ '')\n  local max_level_group_paren_group_count = max_level_group_paren_groups:len()\n\
    \  local max_level_group_paren_group_index = max_level_group_paren_groups:len()\n\
    \  local max_level_group_paren_group_paren_groups = table.filter(paren_groups,\
    \ function(group) return paren_group_levels[group] == max_level end)\n  local\
    \ max_level_group_paren_group_paren_group_string = table.concat(max_level_group_paren_group_paren_groups,\
    \ '')\n  local max_level_group_paren_group_paren_group_count = max_level_group_paren_group_paren_groups:len()\n\
    \  local max_level_group_paren_group_paren_group_index = max_level_group_paren_group_paren_groups:len()\n\
    \  local max_level_group_paren_group_paren_group_paren_groups = table.filter(paren_groups,\
    \ function(group) return paren_group_levels[group] == max_level end)\n  local\
    \ max_level_group_paren_group_paren_group_paren_group_string = table.concat(max_level_group_paren_group_paren_group_paren_groups,\
    \ '')\n  local max_level_group_paren_group_paren_group_paren_group_count = max_level_group_paren_group_paren_group_paren_groups:len()\n\
    \  local max_level_group_paren_group_paren_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbpcjsf45.lua:47: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local max_level = 0\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a)]+') do\n    local level = #paren_stack\n    if paren == '(' and level\
    \ == 0 then\n      paren_stack[#paren_stack + 1] = 1\n    elseif paren == ')'\
    \ and level > 0 then\n      local popped_level = paren_stack[level]\n      assert(popped_level\
    \ > 0)\n      paren_stack[level] = popped_level - 1\n    elseif paren == '(' and\
    \ level > 0 then\n      paren_stack[level] = paren_stack[level] + 1\n    end\n\
    \    if level > max_level then\n      max_level = level\n    end\n  end\n  return\
    \ max_level\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86jj6yvq.lua:30:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmp86jj6yvq.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n\
    \  local paren_levels_stack_index2 = 0\n  local paren_levels_stack_index3 = 0\n\
    \  local paren_levels_stack_index4 = 0\n  local paren_levels_stack_index5 = 0\n\
    \  local paren_levels_stack_index6 = 0\n  local paren_levels_stack_index7 = 0\n\
    \  local paren_levels_stack_index8 = 0\n  local paren_levels_stack_index9 = 0\n\
    \  local paren_levels_stack_index10 = 0\n  local paren_levels_stack_index11 =\
    \ 0\n  local paren_levels_stack_index12 = 0\n  local paren_levels_stack_index13\
    \ = 0\n  local paren_levels_stack_index14 = 0\n  local paren_levels_stack_index15\
    \ = 0\n  local paren_levels_stack_index16 = 0\n  local paren_levels_stack_index17\
    \ = 0\n  local paren_levels_stack_index18 = 0\n  local paren_levels_stack_index19\
    \ = 0\n  local paren_levels_stack_index20 = 0\n  local paren_levels_stack_index21\
    \ = 0\n  local paren_levels_stack_index22 = 0\n  local paren_levels_stack_index23\
    \ = 0\n  local paren_levels_stack_index24 = 0\n  local paren_levels_stack_index25\
    \ = 0\n  local paren_levels_stack_index26 = 0\n  local paren_levels_stack_index27\
    \ = 0\n  local paren_levels_stack_index28 = 0\n  local paren_levels_stack_index29\
    \ = 0\n  local paren_levels_stack_index30 = 0\n  local paren_levels_stack_index31\
    \ = 0\n  local paren_levels_stack_index32 = 0\n  local paren_levels_stack_index33\
    \ = 0\n  local paren_levels_stack_index34 = 0\n  local paren_levels_stack_index35\
    \ = 0\n  local paren_levels_stack_index36 = 0\n  local paren_levels_stack_index37\
    \ = 0\n  local paren_levels_stack_index38 = 0\n  local paren_levels_stack_index39\
    \ = 0\n  local paren_levels_stack_index40 = 0\n  local paren_levels_stack_index41\
    \ = 0\n  local paren_levels_stack_index42 = 0\n  local paren_levels_stack_index43\
    \ = 0\n  local paren_levels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzfi1y745.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group_count = 1\n  local paren_group_max_level\
    \ = 0\n  local paren_group_max_level_char = ''\n  local paren_group_max_level_char_index\
    \ = 0\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_index\
    \ = 0\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_index\
    \ = 0\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_index\
    \ = 0\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_index\
    \ = 0\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_index\
    \ = 0\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_index\
    \ = 0\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_index\
    \ = 0\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_index\
    \ = 0\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_index\
    \ = 0\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_index\
    \ = 0\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_index\
    \ = 0\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_index\
    \ = 0\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_index\
    \ = 0\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_index\
    \ = 0\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_index\
    \ = 0\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_index\
    \ = 0\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_index\
    \ = 0\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_index\
    \ = 0\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_index\
    \ = 0\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_index\
    \ = 0\n  local paren_group_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu2lmxdhu.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group_count = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_start = 0\n  local paren_group_end = 0\n  local paren_group_length\
    \ = 0\n  local paren_group_char\n  local paren_group_char_length\n  local paren_group_char_offset\n\
    \  local paren_group_char_offset_end\n  local paren_group_char_offset_start\n\
    \  local paren_group_char_offset_end\n  local paren_group_char_offset_start\n\
    \  local paren_group_char_offset_end\n  local paren_group_char_offset_start\n\
    \  local paren_group_char_offset_end\n  local paren_group_char_offset_start\n\
    \  local paren_group_char_offset_end\n  local paren_group_char_offset_start\n\
    \  local paren_group_char_offset_end\n  local paren_group_char_offset_start\n\
    \  local paren_group_char_offset_end\n  local paren_group_char_offset_start\n\
    \  local paren_group_char_offset_end\n  local paren_group_char_offset_start\n\
    \  local paren_group_char_offset_end\n  local paren_group_char_offset_start\n\
    \  local paren_group_char_offset_end\n  local paren_group_char_offset_start\n\
    \  local paren_group_char_offset_end\n  local paren_group_char_offset_start\n\
    \  local paren_group_char_offset_end\n  local paren_group_char_offset_start\n\
    \  local paren_group_char_offset_end\n  local paren_group_char_offset_start\n\
    \  local paren_group_char_offset_end\n  local paren_group_char_offset_start\n\
    \  local paren_group_char_offset_end\n  local paren_group_char_offset_start\n\
    \  local paren_group_char_offset_end\n  local paren_group_char_offset_start\n\
    \  local paren_group_char_offset_end\n  local paren_group_char_offset_start\n\
    \  local paren_group_char_offset_end\n  local paren_group_char_offset_start\n\
    \  local paren_group_char_offset_end\n  local paren_group_char_offset_start\n\
    \  local paren_group_char_offset_end\n  local paren_group_char_offset_start\n\
    \  local paren_group_char_offset_end\n  local paren_group_char_offset_start\n\
    \  local paren_group_char_offset_end\n  local paren_group_char_offset_start\n\
    \  local paren_group_char_offset_end\n  local paren_group_char_offset_start\n\
    \  local paren_group_char_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprpvn8gw1.lua:75: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_level = 0\n  local paren_level_count = 0\n  local paren_level_string =\
    \ ''\n  local paren_level_string_count = 0\n  local paren_level_char = ''\n  local\
    \ paren_level_char_count = 0\n  local paren_level_char_count_in_paren_level =\
    \ 0\n  local paren_level_char_count_in_paren_level_string = 0\n  local paren_level_char_string\
    \ = ''\n  local paren_level_char_string_count = 0\n  local paren_level_char_string_counts\
    \ = {}\n  local paren_level_char_string_counts_index = {}\n  local paren_level_char_string_counts_index_count\
    \ = 0\n  local paren_level_char_string_counts_index_count_in_paren_level = 0\n\
    \  local paren_level_char_string_counts_index_count_in_paren_level_string = 0\n\
    \  local paren_level_char_string_counts_index_count_in_paren_level_strings = {}\n\
    \  local paren_level_char_string_counts_index_count_in_paren_level_strings_count\
    \ = 0\n  local paren_level_char_string_counts_index_count_in_paren_level_strings_count_in_paren_level\
    \ = 0\n  local paren_level_char_string_counts_index_count_in_paren_level_strings_count_in_paren_level_string\
    \ = 0\n  local paren_level_char_string_counts_index_count_in_paren_level_strings_count_in_paren_level_strings\
    \ = {}\n  local paren_level_char_string_counts_index_count_in_paren_level_strings_count_in_paren_level_strings_count\
    \ = 0\n  local paren_level_char_string_counts_index_count_in_paren_level_strings_count_in_paren_level_strings_count_in_paren_level\
    \ = 0\n  local paren_level_char_string_counts_index_count_in_paren_level_strings_count_in_paren_level_strings_count_in_paren_level_string\
    \ = 0\n  local paren_level_char_string_counts_index_count_in_paren_level_strings_count_in_paren_level_strings_count_in_paren_level_strings\
    \ = {}\n  local paren_level_char_string_counts_index_count_in_paren_level_strings_count_in_paren_level_strings_count_in_paren_level_strings_count\
    \ = 0\n  local paren_level_char_string_counts_index_count_in_paren_level_strings_count_in_paren_level_strings_count_in_paren_level_strings_count_in_paren_level\
    \ = 0\n  local paren_level_char_string_counts_index_count_in_paren_level_strings_count_in_paren_level_strings_count_in_paren\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzy7mmp38.lua:46: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local paren_count = 0\n  local paren_level = 0\n  local\
    \ paren_nesting = 0\n  for paren_char in paren_string:gmatch('%[(%a%)]') do\n\
    \    local paren_level = levels[paren_level + 1]\n    local paren_count = levels[paren_level]\
    \ + 1\n    if paren_char == '(' and paren_count > paren_level then\n      levels[paren_level]\
    \ = paren_count\n      paren_nesting = paren_nesting + 1\n    elseif paren_char\
    \ == ')' and paren_nesting > 0 then\n      levels[paren_level] = paren_count\n\
    \      paren_nesting = paren_nesting - 1\n    end\n  end\n  return levels\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjbo0ndzr.lua:28:\
    \ expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpjbo0ndzr.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local current_level = 1\n  local paren_count = 0\n  local\
    \ paren_level = 0\n  local paren_stack = { }\n  local paren_stack_count = 0\n\
    \  local paren_stack_level = 0\n  local paren_stack_string = ''\n  local paren_stack_string_count\
    \ = 0\n  local paren_stack_string_index = 0\n  local paren_stack_string_count\
    \ = 0\n  local paren_stack_string = ''\n  local paren_stack_string_count = 0\n\
    \  local paren_stack_string_index = 0\n  local paren_stack_string_count = 0\n\
    \  local paren_stack_string = ''\n  local paren_stack_string_count = 0\n  local\
    \ paren_stack_string_index = 0\n  local paren_stack_string_count = 0\n  local\
    \ paren_stack_string = ''\n  local paren_stack_string_count = 0\n  local paren_stack_string_index\
    \ = 0\n  local paren_stack_string_count = 0\n  local paren_stack_string = ''\n\
    \  local paren_stack_string_count = 0\n  local paren_stack_string_index = 0\n\
    \  local paren_stack_string_count = 0\n  local paren_stack_string = ''\n  local\
    \ paren_stack_string_count = 0\n  local paren_stack_string_index = 0\n  local\
    \ paren_stack_string_count = 0\n  local paren_stack_string = ''\n  local paren_stack_string_count\
    \ = 0\n  local paren_stack_string_index = 0\n  local paren_stack_string_count\
    \ = 0\n  local paren_stack_string = ''\n  local paren_stack_string_count = 0\n\
    \  local paren_stack_string_index = 0\n  local paren_stack_string_count = 0\n\
    \  local paren_stack_string = ''\n  local paren_stack_string_count = 0\n  local\
    \ paren_stack_string_index = 0\n  local paren_stack_string_count = 0\n  local\
    \ paren_stack_string = ''\n  local paren_stack_string_count = 0\n  local paren_stack_string_index\
    \ = 0\n  local paren_stack_string_count = 0\n  local paren_stack_string = ''\n\
    \  local paren_stack_string_count = 0\n  local paren_stack_string_index = 0\n\
    \  local paren_stack_string_count = 0\n  local paren_stack_string = ''\n  local\
    \ paren_stack_string_count = 0\n  local paren_stack_string_index = 0\n  local\
    \ paren_stack_string_count = 0\n  local paren_stack_string = ''\n  local paren_stack_string_count\
    \ = 0\n  local paren_stack_string_index = 0\n  local paren_stack_string_count\
    \ = 0\n  local paren_stack_string\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_g6ke1wc.lua:76: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n\
    \  local paren_levels_stack_index2 = 0\n  local paren_levels_stack_index3 = 0\n\
    \  local paren_levels_stack_index4 = 0\n  local paren_levels_stack_index5 = 0\n\
    \  local paren_levels_stack_index6 = 0\n  local paren_levels_stack_index7 = 0\n\
    \  local paren_levels_stack_index8 = 0\n  local paren_levels_stack_index9 = 0\n\
    \  local paren_levels_stack_index10 = 0\n  local paren_levels_stack_index11 =\
    \ 0\n  local paren_levels_stack_index12 = 0\n  local paren_levels_stack_index13\
    \ = 0\n  local paren_levels_stack_index14 = 0\n  local paren_levels_stack_index15\
    \ = 0\n  local paren_levels_stack_index16 = 0\n  local paren_levels_stack_index17\
    \ = 0\n  local paren_levels_stack_index18 = 0\n  local paren_levels_stack_index19\
    \ = 0\n  local paren_levels_stack_index20 = 0\n  local paren_levels_stack_index21\
    \ = 0\n  local paren_levels_stack_index22 = 0\n  local paren_levels_stack_index23\
    \ = 0\n  local paren_levels_stack_index24 = 0\n  local paren_levels_stack_index25\
    \ = 0\n  local paren_levels_stack_index26 = 0\n  local paren_levels_stack_index27\
    \ = 0\n  local paren_levels_stack_index28 = 0\n  local paren_levels_stack_index29\
    \ = 0\n  local paren_levels_stack_index30 = 0\n  local paren_levels_stack_index31\
    \ = 0\n  local paren_levels_stack_index32 = 0\n  local paren_levels_stack_index33\
    \ = 0\n  local paren_levels_stack_index34 = 0\n  local paren_levels_stack_index35\
    \ = 0\n  local paren_levels_stack_index36 = 0\n  local paren_levels_stack_index37\
    \ = 0\n  local paren_levels_stack_index38 = 0\n  local paren_levels_stack_index39\
    \ = 0\n  local paren_levels_stack_index40 = 0\n  local paren_levels_stack_index41\
    \ = 0\n  local paren_levels_stack_index42 = 0\n  local paren_levels_stack_index43\
    \ = 0\n  local paren_levels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzfi1y745.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { 0 }\n  local paren_stack = { 0 }\n  local paren_level = 0\n\
    \  local paren_nesting = 0\n  local paren_levels = { 0 }\n  local paren_nesting_level\
    \ = 0\n  local paren_nesting_levels = { 0 }\n  local paren_levels_string = paren_string\n\
    \  local paren_nesting_levels_string = paren_string\n  local paren_levels_string\
    \ = paren_string\n  local paren_nesting_levels_string = paren_string\n  local\
    \ paren_levels_string = paren_string\n  local paren_nesting_levels_string = paren_string\n\
    \  local paren_levels_string = paren_string\n  local paren_nesting_levels_string\
    \ = paren_string\n  local paren_levels_string = paren_string\n  local paren_nesting_levels_string\
    \ = paren_string\n  local paren_levels_string = paren_string\n  local paren_nesting_levels_string\
    \ = paren_string\n  local paren_levels_string = paren_string\n  local paren_nesting_levels_string\
    \ = paren_string\n  local paren_levels_string = paren_string\n  local paren_nesting_levels_string\
    \ = paren_string\n  local paren_levels_string = paren_string\n  local paren_nesting_levels_string\
    \ = paren_string\n  local paren_levels_string = paren_string\n  local paren_nesting_levels_string\
    \ = paren_string\n  local paren_levels_string = paren_string\n  local paren_nesting_levels_string\
    \ = paren_string\n  local paren_levels_string = paren_string\n  local paren_nesting_levels_string\
    \ = paren_string\n  local paren_levels_string = paren_string\n  local paren_nesting_levels_string\
    \ = paren_string\n  local paren_levels_string = paren_string\n  local paren_nesting_levels_string\
    \ = paren_string\n  local paren_levels_string = paren_string\n  local paren_nesting_levels_string\
    \ = paren_string\n  local paren_levels_string = paren_string\n  local paren_nesting_levels_string\
    \ = paren_string\n  local paren_levels_string = paren_string\n  local paren_nesting_levels_string\
    \ = paren_string\n  local paren_levels_string = paren_string\n  local paren_nesting_levels_string\
    \ = paren_string\n  local paren_levels_string = paren_string\n  local paren_nesting_levels_string\
    \ = paren_string\n  local paren_levels_string = paren_string\n  local paren_nesting_levels_string\
    \ = paren_string\n  local paren_levels_string = paren\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphfyzj437.lua:64: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_groups = {}\n  local paren_group_index = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_level = 1\n  local paren_group_nesting\
    \ = 1\n  local paren_group_nesting_level = 1\n  local paren_group_nesting_end\
    \ = 1\n  local paren_group_nesting_start = 1\n  local paren_group_nesting_level_count\
    \ = 1\n  local paren_group_nesting_level_count_end = 1\n  local paren_group_nesting_level_count_start\
    \ = 1\n  local paren_group_nesting_level_count_level = 1\n  local paren_group_nesting_level_count_nesting\
    \ = 1\n  local paren_group_nesting_level_count_nesting_end = 1\n  local paren_group_nesting_level_count_nesting_start\
    \ = 1\n  local paren_group_nesting_level_count_nesting_level = 1\n  local paren_group_nesting_level_count_nesting_level_count\
    \ = 1\n  local paren_group_nesting_level_count_nesting_level_count_end = 1\n \
    \ local paren_group_nesting_level_count_nesting_level_count_start = 1\n  local\
    \ paren_group_nesting_level_count_nesting_level_count_level = 1\n  local paren_group_nesting_level_count_nesting_level_count_nesting\
    \ = 1\n  local paren_group_nesting_level_count_nesting_level_count_nesting_end\
    \ = 1\n  local paren_group_nesting_level_count_nesting_level_count_nesting_start\
    \ = 1\n  local paren_group_nesting_level_count_nesting_level_count_nesting_level\
    \ = 1\n  local paren_group_nesting_level_count_nesting_level_count_nesting_level_count\
    \ = 1\n  local paren_group_nesting_level_count_nesting_level_count_nesting_level_count_end\
    \ = 1\n  local paren_group_nesting_level_count_nesting_level_count_nesting_level_count_start\
    \ = 1\n  local paren_group_nesting_level_count_nesting_level_count_nesting_level_count_level\
    \ = 1\n  local paren_group_nesting_level_count_nesting_level_count_nesting_level_count_nesting\
    \ = 1\n  local paren_group_nesting_level_count_nesting_level_count_nesting_level_count_nesting_end\
    \ = 1\n  local paren_group_nesting_level_count_nesting_level_count_nesting_level_count_nesting_start\
    \ = 1\n  local paren_group_nesting_level_count_nesting_level_count_nesting_level_count_nesting_level\
    \ = 1\n  local paren_group_nesting_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd91nkumb.lua:54: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group_count = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_stack = {}\n  local paren_group_level_count = 1\n \
    \ local paren_group_level_stack = {}\n  local paren_group_level_stack_index =\
    \ 1\n  local paren_group_level_stack_index2 = 0\n  local paren_group_level_stack_index3\
    \ = 1\n  local paren_group_level_stack_index4 = 1\n  local paren_group_level_stack_index5\
    \ = 1\n  local paren_group_level_stack_index6 = 1\n  local paren_group_level_stack_index7\
    \ = 1\n  local paren_group_level_stack_index8 = 1\n  local paren_group_level_stack_index9\
    \ = 1\n  local paren_group_level_stack_index10 = 1\n  local paren_group_level_stack_index11\
    \ = 1\n  local paren_group_level_stack_index12 = 1\n  local paren_group_level_stack_index13\
    \ = 1\n  local paren_group_level_stack_index14 = 1\n  local paren_group_level_stack_index15\
    \ = 1\n  local paren_group_level_stack_index16 = 1\n  local paren_group_level_stack_index17\
    \ = 1\n  local paren_group_level_stack_index18 = 1\n  local paren_group_level_stack_index19\
    \ = 1\n  local paren_group_level_stack_index20 = 1\n  local paren_group_level_stack_index21\
    \ = 1\n  local paren_group_level_stack_index22 = 1\n  local paren_group_level_stack_index23\
    \ = 1\n  local paren_group_level_stack_index24 = 1\n  local paren_group_level_stack_index25\
    \ = 1\n  local paren_group_level_stack_index26 = 1\n  local paren_group_level_stack_index27\
    \ = 1\n  local paren_group_level_stack_index28 = 1\n  local paren_group_level_stack_index29\
    \ = 1\n  local paren_group_level_stack_index30 = 1\n  local paren_group_level_stack_index31\
    \ = 1\n  local paren_group_level_stack_index32 = 1\n  local paren_group_level_stack_index33\
    \ = 1\n  local paren_group_level_stack_index34 = 1\n  local paren_group_level_stack_index35\
    \ = 1\n  local paren_group_level_stack_index36 = 1\n  local paren_group_level_stack_index37\
    \ = 1\n  local paren_group_level_stack_index38 = 1\n  local paren_group_level_stack_index39\
    \ = 1\n  local paren_group_level_stack_index40 = 1\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgfgvr_fw.lua:66: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_levels = {}\n\
    \  local paren_groups = {}\n  local paren_group_index = 1\n  local paren_group_indexs\
    \ = {}\n  local paren_group_count = 0\n  local paren_group_counts = {}\n  local\
    \ paren_group_level = 0\n  local paren_group_levels = {}\n  local paren_group_levels_index\
    \ = 1\n  local paren_group_levels_indexs = {}\n  local paren_group_levels_count\
    \ = 0\n  local paren_group_levels_counts = {}\n  local paren_group_levels_level\
    \ = 1\n  local paren_group_levels_levels = {}\n  local paren_group_levels_levels_index\
    \ = 1\n  local paren_group_levels_levels_indexs = {}\n  local paren_group_levels_levels_count\
    \ = 0\n  local paren_group_levels_levels_counts = {}\n  local paren_group_levels_levels_level\
    \ = 1\n  local paren_group_levels_levels_levels = {}\n  local paren_group_levels_levels_levels_index\
    \ = 1\n  local paren_group_levels_levels_levels_indexs = {}\n  local paren_group_levels_levels_levels_count\
    \ = 0\n  local paren_group_levels_levels_levels_counts = {}\n  local paren_group_levels_levels_levels_level\
    \ = 1\n  local paren_group_levels_levels_levels_levels = {}\n  local paren_group_levels_levels_levels_levels_index\
    \ = 1\n  local paren_group_levels_levels_levels_levels_indexs = {}\n  local paren_group_levels_levels_levels_levels_count\
    \ = 0\n  local paren_group_levels_levels_levels_levels_counts = {}\n  local paren_group_levels_levels_levels_levels_level\
    \ = 1\n  local paren_group_levels_levels_levels_levels_levels = {}\n  local paren_group_levels_levels_levels_levels_levels_index\
    \ = 1\n  local paren_group_levels_levels_levels_levels_levels_indexs = {}\n  local\
    \ paren_group_levels_levels_levels_levels_levels_count = 0\n  local paren_group_levels_levels_levels_levels_levels_counts\
    \ = {}\n  local paren_group_levels_levels_levels_levels_levels_level = 1\n  local\
    \ paren_group_levels_levels_levels_levels_levels_levels = {}\n  local paren_group_levels_levels_levels_levels_levels_levels_index\
    \ = 1\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8xrbxuwq.lua:58: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local level = 0\n  local max_level = 0\n  for paren\
    \ in string.gmatch(paren_string, '%[(%a)]+') do\n    local paren_level = paren_stack[#paren_stack]\n\
    \    if paren_level == nil then\n      paren_stack[#paren_stack] = level\n   \
    \   level = level + 1\n    elseif paren_level > level then\n      level = paren_level\n\
    \    end\n    level = level + 1\n    max_level = math.max(max_level, level)\n\
    \  end\n  local result = {}\n  for i = 1, max_level do\n    result[#result + 1]\
    \ = i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5cqppqnh.lua:31:\
    \ expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmp5cqppqnh.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_levels = {}\n\
    \  local paren_levels_len = {}\n  local paren_levels_lens = {}\n  local paren_levels_lens_len\
    \ = {}\n  local paren_levels_lens_lens = {}\n  local paren_levels_lens_lens_len\
    \ = {}\n  local paren_levels_lens_lens_lens = {}\n  local paren_levels_lens_lens_lens_len\
    \ = {}\n  local paren_levels_lens_lens_lens_lens = {}\n  local paren_levels_lens_lens_lens_lens_len\
    \ = {}\n  local paren_levels_lens_lens_lens_lens_lens = {}\n  local paren_levels_lens_lens_lens_lens_lens_len\
    \ = {}\n  local paren_levels_lens_lens_lens_lens_lens_lens = {}\n  local paren_levels_lens_lens_lens_lens_lens_lens_len\
    \ = {}\n  local paren_levels_lens_lens_lens_lens_lens_lens_lens = {}\n  local\
    \ paren_levels_lens_lens_lens_lens_lens_lens_lens_len = {}\n  local paren_levels_lens_lens_lens_lens_lens_lens_lens_lens\
    \ = {}\n  local paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_len = {}\n\
    \  local paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_len = {}\n\
    \  local paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens = {}\n\
    \  local paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len =\
    \ {}\n  local paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = {}\n  local paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = {}\n  local paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_len\
    \ = {}\n  local paren_levels_lens_lens_lens_lens_lens_lens_lens_lens_lens_lens_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpommfkc34.lua:43: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_level_stack = {}\n  local paren_level_stack_index = {}\n\
    \  local paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n\
    \  local paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n\
    \  local paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n\
    \  local paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n\
    \  local paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n\
    \  local paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n\
    \  local paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n\
    \  local paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n\
    \  local paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n\
    \  local paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n\
    \  local paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n\
    \  local paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n\
    \  local paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n\
    \  local paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n\
    \  local paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n\
    \  local paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n\
    \  local paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n\
    \  local paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n\
    \  local paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n\
    \  local paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n\
    \  local paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n\
    \  local paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n\
    \  local paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n\
    \  local paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n\
    \  local paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n\
    \  local paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n\
    \  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr4anq9g5.lua:75: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local max_level_string = ''\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a+)%]') do\n    local level_of_nesting = #paren\n    if level_of_nesting\
    \ > max_level then\n      max_level = level_of_nesting\n      max_level_string\
    \ = paren\n    end\n  end\n  return max_level, max_level_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputa4ddsl.lua:22:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmputa4ddsl.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_nesting = 0\n\
    \  local paren_levels = {}\n  local paren_levels_len = {}\n  local paren_nesting_len\
    \ = {}\n  local paren_levels_string = ''\n  local paren_nesting_string = ''\n\
    \  local paren_levels_len_string = ''\n  local paren_nesting_len_string = ''\n\
    \  for paren_level in string.gmatch(paren_string, '()()') do\n    paren_stack[paren_level]\
    \ = true\n    paren_levels[paren_level] = paren_level + 1\n    paren_levels_len[paren_level]\
    \ = #paren_levels_string\n    paren_levels_string = paren_levels_string .. paren_level\n\
    \    paren_nesting_len = #paren_nesting_string\n    paren_nesting_string = paren_nesting_string\
    \ .. paren_level\n    paren_nesting_len_string = paren_nesting_len_string .. paren_nesting_len\n\
    \  end\n  local max_nesting = #paren_stack\n  local max_nesting_len = #paren_nesting_len\n\
    \  local max_nesting_string = #paren_nesting_string\n  local max_nesting_len_string\
    \ = #paren_nesting_len_string\n  local max_nesting_len = max_nesting_len + max_nesting_len_string\n\
    \  local max_nesting_string = max_nesting_string .. max_nesting_len_string\n \
    \ local max_nesting_len_string = #max_nesting_len_string\n  local max_nesting_len\
    \ = max_nesting_len + max_nesting_len_string\n  local max_nesting_string = max_nesting_string\
    \ .. max_nesting_len_string\n  local max_nesting_len_string = #max_nesting_len_string\n\
    \  local max_nesting_len = max_nesting_len + max_nesting_len_string\n  local max_nesting_string\
    \ = max_nesting_string .. max_nesting_len_string\n  local max_nesting_len_string\
    \ = #max_nesting_len_string\n  local max_nesting_len = max_nesting_len + max_nesting_len_string\n\
    \  local max_nesting_string = max_nesting_string .. max_nesting_len_string\n \
    \ local max_nesting_len_string = #max_nesting_len_string\n  local max_nesting_len\
    \ = max_nesting_len + max_nesting_len_string\n  local max_nesting_string = max_nesting_string\
    \ .. max_nesting_len_string\n  local max_nesting_len_string = #max_nesting_len_string\n\
    \  local max_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9g8h0wzp.lua:55: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = {}\n  local paren_group_level = {}\n  local paren_group_count\
    \ = {}\n  local paren_group_max_level = {}\n  local paren_group_max_level_index\
    \ = {}\n  local paren_group_max_level_count = {}\n  local paren_group_max_level_max_index\
    \ = {}\n  local paren_group_max_level_max_index_count = {}\n  local paren_group_max_level_max_index_count_index\
    \ = {}\n  local paren_group_max_level_max_index_count_index_count = {}\n  local\
    \ paren_group_max_level_max_index_count_index_count_index = {}\n  local paren_group_max_level_max_index_count_index_count_index_count\
    \ = {}\n  local paren_group_max_level_max_index_count_index_count_index_count_index\
    \ = {}\n  local paren_group_max_level_max_index_count_index_count_index_count_index_count\
    \ = {}\n  local paren_group_max_level_max_index_count_index_count_index_count_index_count_index\
    \ = {}\n  local paren_group_max_level_max_index_count_index_count_index_count_index_count_index_count\
    \ = {}\n  local paren_group_max_level_max_index_count_index_count_index_count_index_count_index_count\
    \ = {}\n  local paren_group_max_level_max_index_count_index_count_index_count_index_count_index_count_index\
    \ = {}\n  local paren_group_max_level_max_index_count_index_count_index_count_index_count_index_count_index\
    \ = {}\n  local paren_group_max_level_max_index_count_index_count_index_count_index_count_index_count_index\
    \ = {}\n  local paren_group_max_level_max_index_count_index_count_index_count_index_count_index_count_index\
    \ = {}\n  local paren_group_max_level_max_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = {}\n  local paren_group_max_level_max_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = {}\n  local paren_group_max_level_max_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = {}\n  local paren_group_max_level_max_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = {}\n  local paren_group_max_level_max_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = {}\n  local paren_group_max_level_max_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = {}\n  local paren_group_max_level_max_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = {}\n  local paren_group_max_level_max_index_count_index_count_index_count_index_count_index_count_index_count_index\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7l_ieoff.lua:48: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local level = 0\n  local paren_count = 0\n  for paren\
    \ in string.gmatch(paren_string, '%[(%a)]') do\n    local paren_level = paren_stack[#paren_stack]\n\
    \    if paren_level == nil then\n      paren_stack[#paren_stack] = level\n   \
    \   paren_count = 1\n    else\n      paren_count = paren_count + 1\n    end\n\
    \    level = level + 1\n  end\n  local max_level = level\n  local max_paren_count\
    \ = paren_count\n  for i = #paren_stack, 1, -1 do\n    local paren_level = paren_stack[i]\n\
    \    if paren_level > level then\n      level = paren_level\n      max_level =\
    \ level\n      max_paren_count = paren_count\n    end\n  end\n  return max_level,\
    \ max_paren_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshv1tris.lua:36:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpshv1tris.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  for paren\
    \ in string.gmatch(paren_string, '%[(%a*)%]') do\n    local paren_level = #paren\n\
    \    if paren_level > max_level then\n      max_level = paren_level\n    end\n\
    \    paren_stack[#paren_stack + 1] = paren\n    level = level + 1\n  end\n  local\
    \ max_level_length = max_level + 1\n  local paren_stack_string = table.concat(paren_stack,\
    \ '()')\n  local paren_stack_string = paren_stack_string:sub(1, max_level_length)\n\
    \  local paren_stack_string = paren_stack_string:gsub('%a{2,}', '%s')\n  local\
    \ paren_stack_string = paren_stack_string:gsub('%a}', '%s')\n  local paren_stack_string\
    \ = paren_stack_string:gsub('%a}', '%s')\n  local paren_stack_string = paren_stack_string:gsub('%a{2,}',\
    \ '%s')\n  local paren_stack_string = paren_stack_string:gsub('%a}', '%s')\n \
    \ local paren_stack_string = paren_stack_string:gsub('%a{2,}', '%s')\n  local\
    \ paren_stack_string = paren_stack_string:gsub('%a}', '%s')\n  local paren_stack_string\
    \ = paren_stack_string:gsub('%a{2,}', '%s')\n  local paren_stack_string = paren_stack_string:gsub('%a}',\
    \ '%s')\n  local paren_stack_string = paren_stack_string:gsub('%a{2,}', '%s')\n\
    \  local paren_stack_string = paren_stack_string:gsub('%a}', '%s')\n  local paren_stack_string\
    \ = paren_stack_string:gsub('%a{2,}', '%s')\n  local paren_stack_string = paren_stack_string:gsub('%a}',\
    \ '%s')\n  local paren_stack_string = paren_stack_string:gsub('%a{2,}', '%s')\n\
    \  local paren_stack_string = paren_stack_string:gsub('%a}', '%s')\n  local paren_stack_string\
    \ = paren_stack_string:gsub('%a{2,}', '%s')\n  local paren_stack_string = paren_stack_string:gsub('%a}\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4b7trl11.lua:37: unfinished string near ''''%a}''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_groups = {}\n  local paren_group_index = {}\n  local paren_group_count\
    \ = {}\n  local paren_group_level = {}\n  local paren_group_level_count = {}\n\
    \  local paren_group_level_index = {}\n  local paren_group_level_count = {}\n\
    \  local paren_group_level_count_index = {}\n  local paren_group_level_count_index\
    \ = {}\n  local paren_group_level_count_index_count = 0\n  local paren_group_level_count_index_count\
    \ = 0\n  local paren_group_level_count_index_count_index = {}\n  local paren_group_level_count_index_count_index\
    \ = {}\n  local paren_group_level_count_index_count_index_count = 0\n  local paren_group_level_count_index_count_index_count\
    \ = 0\n  local paren_group_level_count_index_count_index_count_index = {}\n  local\
    \ paren_group_level_count_index_count_index_count_index = {}\n  local paren_group_level_count_index_count_index_count_index_count\
    \ = 0\n  local paren_group_level_count_index_count_index_count_index_count = 0\n\
    \  local paren_group_level_count_index_count_index_count_index_count_index = {}\n\
    \  local paren_group_level_count_index_count_index_count_index_count_index = {}\n\
    \  local paren_group_level_count_index_count_index_count_index_count_index_count\
    \ = 0\n  local paren_group_level_count_index_count_index_count_index_count_index_count\
    \ = 0\n  local paren_group_level_count_index_count_index_count_index_count_index_count_index\
    \ = {}\n  local paren_group_level_count_index_count_index_count_index_count_index_count_index\
    \ = {}\n  local paren_group_level_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n  local paren_group_level_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n  local paren_group_level_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = {}\n  local paren_group_level_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = {}\n  local paren_group_level_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n  local paren_group_level_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n  local paren_group_level_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = {}\n  local paren_group_level_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = {}\n  local paren_group_level_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n  local paren_group_level_count_index_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkwvcpcid.lua:54: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local parsed_string = {}\n  local level = 0\n  local paren_level = 0\n  for\
    \ paren in string.gmatch(paren_string, '%[(%a)]+') do\n    if paren == '(' or\
    \ paren == ')' then\n      level = level + 1\n      paren_level = paren_level\
    \ + 1\n    elseif paren == ')' then\n      level = level - 1\n      paren_level\
    \ = paren_level - 1\n    end\n    table.insert(parsed_string, level)\n  end\n\
    \  return parsed_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0wnxi5d.lua:26:\
    \ expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpz0wnxi5d.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n  local paren_levels_stack_index2\
    \ = 0\n  local paren_levels_stack_index3 = 0\n  local paren_levels_stack_index4\
    \ = 0\n  local paren_levels_stack_index5 = 0\n  local paren_levels_stack_index6\
    \ = 0\n  local paren_levels_stack_index7 = 0\n  local paren_levels_stack_index8\
    \ = 0\n  local paren_levels_stack_index9 = 0\n  local paren_levels_stack_index10\
    \ = 0\n  local paren_levels_stack_index11 = 0\n  local paren_levels_stack_index12\
    \ = 0\n  local paren_levels_stack_index13 = 0\n  local paren_levels_stack_index14\
    \ = 0\n  local paren_levels_stack_index15 = 0\n  local paren_levels_stack_index16\
    \ = 0\n  local paren_levels_stack_index17 = 0\n  local paren_levels_stack_index18\
    \ = 0\n  local paren_levels_stack_index19 = 0\n  local paren_levels_stack_index20\
    \ = 0\n  local paren_levels_stack_index21 = 0\n  local paren_levels_stack_index22\
    \ = 0\n  local paren_levels_stack_index23 = 0\n  local paren_levels_stack_index24\
    \ = 0\n  local paren_levels_stack_index25 = 0\n  local paren_levels_stack_index26\
    \ = 0\n  local paren_levels_stack_index27 = 0\n  local paren_levels_stack_index28\
    \ = 0\n  local paren_levels_stack_index29 = 0\n  local paren_levels_stack_index30\
    \ = 0\n  local paren_levels_stack_index31 = 0\n  local paren_levels_stack_index32\
    \ = 0\n  local paren_levels_stack_index33 = 0\n  local paren_levels_stack_index34\
    \ = 0\n  local paren_levels_stack_index35 = 0\n  local paren_levels_stack_index36\
    \ = 0\n  local paren_levels_stack_index37 = 0\n  local paren_levels_stack_index38\
    \ = 0\n  local paren_levels_stack_index39 = 0\n  local paren_levels_stack_index40\
    \ = 0\n  local paren_levels_stack_index41 = 0\n  local paren_levels_stack_index42\
    \ = 0\n  local paren_levels_stack_index43 = 0\n  local paren_levels_stack_index44\
    \ = 0\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3jf_4nzn.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local parsed_string = {}\n  local level = 0\n  local paren_level = 0\n  for\
    \ paren in string.gmatch(paren_string, '%[(%a*)%]') do\n    paren_level = level\n\
    \    level = level + 1\n    parsed_string[#parsed_string + 1] = paren_level\n\
    \  end\n  return parsed_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp15rrq4fi.lua:21:\
    \ expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmp15rrq4fi.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_level = {}\n  for paren in string.gmatch(paren_string, '%[(%a)]+')\
    \ do\n    if paren == '(' or paren == '[' then\n      paren_stack[#paren_stack\
    \ + 1] = paren\n      paren_level = #paren_stack\n    elseif paren == ')' or paren\
    \ == ']' then\n      local paren_group = paren_stack[paren_level]\n      paren_stack[paren_level]\
    \ = nil\n      local current_level = paren_level - 1\n      while current_level\
    \ >= 0 do\n        local paren_group_level = paren_group_level[current_level]\n\
    \        if paren_group == paren_group_level then\n          paren_group_level[current_level]\
    \ = nil\n        else\n          paren_group_level[current_level + 1] = paren_group_level[current_level]\n\
    \        end\n        current_level = current_level - 1\n      end\n      paren_groups[#paren_groups\
    \ + 1] = paren_group\n      paren_group_level[#paren_group_level + 1] = paren_group\n\
    \      paren_level = #paren_stack\n    end\n  end\n  return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1v5vlgy2.lua:39:\
    \ expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmp1v5vlgy2.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_levels_stack = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdfzfd4x4.lua:69: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_levels = {}\n\
    \  local paren_levels_count = 0\n  local paren_levels_max = 0\n  local paren_levels_max_count\
    \ = 0\n  local paren_levels_max_index = 0\n  local paren_levels_max_index2 = 0\n\
    \  local paren_levels_max_index3 = 0\n  local paren_levels_max_index4 = 0\n  local\
    \ paren_levels_max_index5 = 0\n  local paren_levels_max_index6 = 0\n  local paren_levels_max_index7\
    \ = 0\n  local paren_levels_max_index8 = 0\n  local paren_levels_max_index9 =\
    \ 0\n  local paren_levels_max_index10 = 0\n  local paren_levels_max_index11 =\
    \ 0\n  local paren_levels_max_index12 = 0\n  local paren_levels_max_index13 =\
    \ 0\n  local paren_levels_max_index14 = 0\n  local paren_levels_max_index15 =\
    \ 0\n  local paren_levels_max_index16 = 0\n  local paren_levels_max_index17 =\
    \ 0\n  local paren_levels_max_index18 = 0\n  local paren_levels_max_index19 =\
    \ 0\n  local paren_levels_max_index20 = 0\n  local paren_levels_max_index21 =\
    \ 0\n  local paren_levels_max_index22 = 0\n  local paren_levels_max_index23 =\
    \ 0\n  local paren_levels_max_index24 = 0\n  local paren_levels_max_index25 =\
    \ 0\n  local paren_levels_max_index26 = 0\n  local paren_levels_max_index27 =\
    \ 0\n  local paren_levels_max_index28 = 0\n  local paren_levels_max_index29 =\
    \ 0\n  local paren_levels_max_index30 = 0\n  local paren_levels_max_index31 =\
    \ 0\n  local paren_levels_max_index32 = 0\n  local paren_levels_max_index33 =\
    \ 0\n  local paren_levels_max_index34 = 0\n  local paren_levels_max_index35 =\
    \ 0\n  local paren_levels_max_index36 = 0\n  local paren_levels_max_index37 =\
    \ 0\n  local paren_levels_max_index38 = 0\n  local paren_levels_max_index39 =\
    \ 0\n  local paren_levels_max_index40 = 0\n  local paren_levels_max_index41 =\
    \ 0\n  local paren_levels_max_index42 = 0\n  local paren_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzjicxggw.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_stack_count\
    \ = {}\n  local paren_stack_index = {}\n  local paren_stack_level = {}\n  local\
    \ paren_stack_level_count = {}\n  local paren_stack_level_stack = {}\n  local\
    \ paren_stack_level_stack_count = {}\n  local paren_stack_level_stack_index =\
    \ {}\n  local paren_stack_level_stack_index = {}\n  local paren_stack_level_stack_index\
    \ = {}\n  local paren_stack_level_stack_index = {}\n  local paren_stack_level_stack_index\
    \ = {}\n  local paren_stack_level_stack_index = {}\n  local paren_stack_level_stack_index\
    \ = {}\n  local paren_stack_level_stack_index = {}\n  local paren_stack_level_stack_index\
    \ = {}\n  local paren_stack_level_stack_index = {}\n  local paren_stack_level_stack_index\
    \ = {}\n  local paren_stack_level_stack_index = {}\n  local paren_stack_level_stack_index\
    \ = {}\n  local paren_stack_level_stack_index = {}\n  local paren_stack_level_stack_index\
    \ = {}\n  local paren_stack_level_stack_index = {}\n  local paren_stack_level_stack_index\
    \ = {}\n  local paren_stack_level_stack_index = {}\n  local paren_stack_level_stack_index\
    \ = {}\n  local paren_stack_level_stack_index = {}\n  local paren_stack_level_stack_index\
    \ = {}\n  local paren_stack_level_stack_index = {}\n  local paren_stack_level_stack_index\
    \ = {}\n  local paren_stack_level_stack_index = {}\n  local paren_stack_level_stack_index\
    \ = {}\n  local paren_stack_level_stack_index = {}\n  local paren_stack_level_stack_index\
    \ = {}\n  local paren_stack_level_stack_index = {}\n  local paren_stack_level_stack_index\
    \ = {}\n  local paren_stack_level_stack_index = {}\n  local paren_stack_level_stack_index\
    \ = {}\n  local paren_stack_level_stack_index = {}\n  local paren_stack_level_stack_index\
    \ = {}\n  local paren_stack_level_stack_index = {}\n  local paren_stack_level_stack_index\
    \ = {}\n  local paren_stack_level_stack_index = {}\n  local paren_stack_level_stack_index\
    \ = {}\n  local paren_stack_level_stack_index = {}\n  local paren_stack_level_stack_index\
    \ = {}\n  local paren_stack_level_stack_index = {}\n  local paren_stack_level_stack_index\
    \ = {}\n  local paren_stack_level_stack_index = {}\n  local paren_stack_level_stack_index\
    \ = {}\n  local paren_stack_level_stack_index = {}\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr7g1ji2b.lua:70: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_level_count = {}\n  local paren_level_max_count = {}\n \
    \ local paren_level_max_count_index = {}\n  local paren_level_max_count_index2\
    \ = {}\n  local paren_level_max_count_index3 = {}\n  local paren_level_max_count_index4\
    \ = {}\n  local paren_level_max_count_index5 = {}\n  local paren_level_max_count_index6\
    \ = {}\n  local paren_level_max_count_index7 = {}\n  local paren_level_max_count_index8\
    \ = {}\n  local paren_level_max_count_index9 = {}\n  local paren_level_max_count_index10\
    \ = {}\n  local paren_level_max_count_index11 = {}\n  local paren_level_max_count_index12\
    \ = {}\n  local paren_level_max_count_index13 = {}\n  local paren_level_max_count_index14\
    \ = {}\n  local paren_level_max_count_index15 = {}\n  local paren_level_max_count_index16\
    \ = {}\n  local paren_level_max_count_index17 = {}\n  local paren_level_max_count_index18\
    \ = {}\n  local paren_level_max_count_index19 = {}\n  local paren_level_max_count_index20\
    \ = {}\n  local paren_level_max_count_index21 = {}\n  local paren_level_max_count_index22\
    \ = {}\n  local paren_level_max_count_index23 = {}\n  local paren_level_max_count_index24\
    \ = {}\n  local paren_level_max_count_index25 = {}\n  local paren_level_max_count_index26\
    \ = {}\n  local paren_level_max_count_index27 = {}\n  local paren_level_max_count_index28\
    \ = {}\n  local paren_level_max_count_index29 = {}\n  local paren_level_max_count_index30\
    \ = {}\n  local paren_level_max_count_index31 = {}\n  local paren_level_max_count_index32\
    \ = {}\n  local paren_level_max_count_index33 = {}\n  local paren_level_max_count_index34\
    \ = {}\n  local paren_level_max_count_index35 = {}\n  local paren_level_max_count_index36\
    \ = {}\n  local paren_level_max_count_index37 = {}\n  local paren_level_max_count_index38\
    \ = {}\n  local paren_level_max_count_index39 = {}\n  local paren_level_max_count_index40\
    \ = {}\n  local paren_level_max_count_index41 = {}\n  local paren_level_max_count_index42\
    \ = {}\n  local paren_level_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpadkqiyay.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local paren_levels = {}\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a)]+') do\n    local paren_level = #paren\n    paren_levels[paren] = paren_level\n\
    \    if paren_level > max_level then\n      max_level = paren_level\n    end\n\
    \  end\n  local levels = max_level + 1\n  local paren_levels_sorted = {}\n  for\
    \ paren, paren_level in pairs(paren_levels) do\n    paren_levels_sorted[paren_level]\
    \ = paren\n  end\n  local paren_levels_sorted = table.sort(paren_levels_sorted)\n\
    \  local paren_levels_sorted = {}\n  for i = 1, levels do\n    paren_levels_sorted[i]\
    \ = paren_levels_sorted[i + 1]\n  end\n  return paren_levels_sorted\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukghnb4r.lua:32:\
    \ expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpukghnb4r.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local max_level = 0\n  for paren in string.gmatch(paren_string,\
    \ \"%[(%a)]\") do\n    local level = #paren_stack\n    if level > max_level then\n\
    \      max_level = level\n    end\n    table.insert(paren_stack, paren)\n  end\n\
    \  return max_level\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_8p2e3a.lua:22:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpb_8p2e3a.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750373
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local max_level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n\
    \  local paren_levels_stack_size = 0\n  local paren_levels_stack_index2 = 0\n\
    \  local paren_levels_stack_size2 = 0\n  local paren_levels_stack_index3 = 0\n\
    \  local paren_levels_stack_size3 = 0\n  local paren_levels_stack_index4 = 0\n\
    \  local paren_levels_stack_size4 = 0\n  local paren_levels_stack_index5 = 0\n\
    \  local paren_levels_stack_size5 = 0\n  local paren_levels_stack_index6 = 0\n\
    \  local paren_levels_stack_size6 = 0\n  local paren_levels_stack_index7 = 0\n\
    \  local paren_levels_stack_size7 = 0\n  local paren_levels_stack_index8 = 0\n\
    \  local paren_levels_stack_size8 = 0\n  local paren_levels_stack_index9 = 0\n\
    \  local paren_levels_stack_size9 = 0\n  local paren_levels_stack_index10 = 0\n\
    \  local paren_levels_stack_size10 = 0\n  local paren_levels_stack_index11 = 0\n\
    \  local paren_levels_stack_size11 = 0\n  local paren_levels_stack_index12 = 0\n\
    \  local paren_levels_stack_size12 = 0\n  local paren_levels_stack_index13 = 0\n\
    \  local paren_levels_stack_size13 = 0\n  local paren_levels_stack_index14 = 0\n\
    \  local paren_levels_stack_size14 = 0\n  local paren_levels_stack_index15 = 0\n\
    \  local paren_levels_stack_size15 = 0\n  local paren_levels_stack_index16 = 0\n\
    \  local paren_levels_stack_size16 = 0\n  local paren_levels_stack_index17 = 0\n\
    \  local paren_levels_stack_size17 = 0\n  local paren_levels_stack_index18 = 0\n\
    \  local paren_levels_stack_size18 = 0\n  local paren_levels_stack_index19 = 0\n\
    \  local paren_levels_stack_size19 = 0\n  local paren_levels_stack_index20 = 0\n\
    \  local paren_levels_stack_size20 = 0\n  local paren_levels_stack_index21 = 0\n\
    \  local paren_levels_stack_size21 = 0\n  local paren_levels_stack_index22 = 0\n\
    \  local paren_levels_stack\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxkhot9o5.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750373
