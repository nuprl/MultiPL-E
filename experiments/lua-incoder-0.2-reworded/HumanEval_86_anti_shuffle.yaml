name: HumanEval_86_anti_shuffle
language: lua
prompt: "-- Write a function that takes a string and returns an ordered version of\
  \ it.\n-- Ordered version of string, is a string where all words (separated by space)\n\
  -- are replaced by a new word where all the characters arranged in\n-- ascending\
  \ order based on ascii value.\n-- Note: You should keep the order of words and blank\
  \ spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n-- 'Hi'\n\
  -- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello World!!!')\n\
  -- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
  \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
  \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
  \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My name\
  \ is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local words = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for\
    \ i = 1, #words do\n    local word = words[i]\n    local new_word = ''\n    for\
    \ j = 1, #word do\n      local ascii = string.byte(word[j])\n      local new_ascii\
    \ = ascii\n      if ascii < 32 then\n        new_ascii = ascii + 32\n      elseif\
    \ ascii < 127 then\n        new_ascii = ascii - 32\n      else\n        new_ascii\
    \ = ascii - 128\n      end\n      new_word = new_word .. string.char(new_ascii)\n\
    \    end\n    new_words[i] = new_word\n  end\n  return table.concat(new_words)\n\
    end", "  local words = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for _, word\
    \ in pairs(words) do\n    local new_word = word\n    for i = 1, #word do\n   \
    \   new_word = new_word .. string.char(string.byte(word[i]) + 64)\n    end\n \
    \   new_words[#new_words + 1] = new_word\n  end\n  return table.concat(new_words,\
    \ ' ')\nend", "  -- Write your solution here\n  -- return s\nend", "  -- Write\
    \ your solution here\n  -- Hint: Use string.gsub to replace all spaces with an\
    \ underscore\n  -- Hint: Use string.gsub to replace all words with an underscore\n\
    \  -- Hint: Use string.gsub to replace all non-alphanumeric characters with an\
    \ underscore\n  -- Hint: Use string.gsub to replace all non-alphanumeric characters\
    \ with an underscore\n  -- Hint: Use string.gsub to replace all non-alphanumeric\
    \ characters with an underscore\n  -- Hint: Use string.gsub to replace all non-alphanumeric\
    \ characters with an underscore\n  -- Hint: Use string.gsub to replace all non-alphanumeric\
    \ characters with an underscore\n  -- Hint: Use string.gsub to replace all non-alphanumeric\
    \ characters with an underscore\n  -- Hint: Use string.gsub to replace all non-alphanumeric\
    \ characters with an underscore\n  -- Hint: Use string.gsub to replace all non-alphanumeric\
    \ characters with an underscore\n  -- Hint: Use string.gsub to replace all non-alphanumeric\
    \ characters with an underscore\n  -- Hint: Use string.gsub to replace all non-alphanumeric\
    \ characters with an underscore\n  -- Hint: Use string.gsub to replace all non-alphanumeric\
    \ characters with an underscore\n  -- Hint: Use string.gsub to replace all non-alphanumeric\
    \ characters with an underscore\n  -- Hint: Use string.gsub to replace all non-alphanumeric\
    \ characters with an underscore\n  -- Hint: Use string.gsub to replace all non-alphanumeric\
    \ characters with an underscore\n  -- Hint: Use string.gsub to replace all non-alphanumeric\
    \ characters with an underscore\n  -- Hint: Use string.gsub to replace all non-alphanumeric\
    \ characters with an underscore\n  -- Hint: Use string.gsub to replace all non-alphanumeric\
    \ characters with an underscore\n  -- Hint: Use string.gsub to replace all non-alphanumeric\
    \ characters with an underscore\n  -- Hint: Use string.gsub to replace all non-alphanumeric\
    \ characters with an underscore\n  -- Hint: Use string.gsub to replace all non-alphanumeric\
    \ characters with an underscore\n  -- Hint: Use string.gsub to replace all non-alphanumeric\
    \ characters with an underscore\n  -- Hint: Use string.gsub to replace all non-alphanumeric\
    \ characters with an underscore\n  -- Hint: Use string.gsub to ", "  local words\
    \ = s:gmatch(\"[%w\\s]+\") -- Split string into words.\n  local new_words = {}\n\
    \  local new_word = \"\"\n  for i = 1, #words do\n    local word = words[i]\n\
    \    local ascii = string.byte(word)\n    if ascii < 32 then\n      new_word =\
    \ new_word .. word\n    else\n      new_words[#new_words+1] = word\n    end\n\
    \  end\n  return table.concat(new_words, \"_\")\nend", "  -- Write your code here\n\
    \  local words = string.gmatch(s, '%w+') -- Get all words in the sentence\n  local\
    \ sorted_words = {}\n  for i = 1, #words do\n    sorted_words[#sorted_words +\
    \ 1] = words[i] -- Add each word to the sorted words list\n  end\n  table.sort(sorted_words)\
    \ -- Sort the words in ascending order\n  -- Write your code here\n  return table.concat(sorted_words,\
    \ ' ') -- Join the words with spaces\nend", "  local words = s:gsub(' ', ' ')\n\
    \  local new_words = {}\n  for i = 1, #words do\n    local char = string.char(string.byte(words[i]))\n\
    \    local new_char = string.char(string.byte(char) + 1)\n    new_words[i] = new_char\n\
    \  end\n  return table.concat(new_words)\nend", "  -- Write your solution here\n\
    \  local new_s = ''\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n\
    \    local ascii = string.byte(char) -- ascii value of char\n    if ascii > 127\
    \ then\n      new_s = new_s .. string.sub(s,i,i-1) .. string.sub(s,i+1,i+1)\n\
    \    else\n      new_s = new_s .. char\n    end\n  end\n  return new_s\nend",
  "  local words = s:gmatch('([^ ]+)')\n  local result = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(result, word)\n  end\n  table.sort(result)\n  return table.concat(result)\n\
    end", "  local words = string.gmatch(s, '%w+') -- Split string into words\n  local\
    \ sorted_words = {}\n  local new_word = ''\n  for i = 1, #words do\n    sorted_words[i]\
    \ = words[i] -- Store words in ascending order\n  end\n  for i = 1, #words do\n\
    \    new_word = new_word .. sorted_words[i] .. ' ' -- Add space between words\n\
    \  end\n  return new_word\nend", "  local words = string.gmatch(s, '([^ ]+)')\n\
    \  local new_words = {}\n  for _, word in pairs(words) do\n    table.insert(new_words,\
    \ word)\n  end\n  table.sort(new_words, function(a, b) return string.byte(a) <\
    \ string.byte(b) end)\n  return table.concat(new_words, ' ')\nend", "  -- Write\
    \ your code here.\n  local new_s = ''\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n\
    \    local ascii = string.byte(char) -- ascii value of char\n    if ascii > 127\
    \ then\n      new_s = new_s .. string.sub(s,i,i)\n    else\n      new_s = new_s\
    \ .. string.char(ascii)\n    end\n  end\n  return new_s\nend", "  -- Write your\
    \ solution here\n  -- return s\nend", "  local words = string.gmatch(s, '%w+')\n\
    \  local new_s = ''\n  for i = 1, #words do\n    local word = words[i]\n    local\
    \ new_word = word\n    local j = 1\n    while true do\n      local c = string.byte(new_word)\n\
    \      local new_word = string.sub(anti_shuffle(string.sub(anti_shuffle(new_word),\
    \ 1, j)), 1, j-1)\n      if not c then\n        break\n      end\n      j = j\
    \ + 1\n    end\n    new_s = new_s .. new_word\n  end\n  return new_s\nend", " \
    \ local words = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for _, word in\
    \ pairs(words) do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words)\n\
    \  return table.concat(new_words, ' ')\nend", "  local words = s:gmatch('([^ ]+)')\n\
    \  local new_words = {}\n  for i = 1, #words do\n    local word = words[i]\n \
    \   local new_word = ''\n    for j = 1, #word do\n      local c = word[j]\n  \
    \    local ascii = string.byte(c)\n      local new_c = string.char(ascii - 1)\n\
    \      new_word = new_word .. new_c\n    end\n    new_words[i] = new_word\n  end\n\
    \  return table.concat(new_words)\nend", "  local words = string.gmatch(s, '%w+')\n\
    \  local new_words = {}\n  local new_s = ''\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = word\n    local j = 1\n    while true\
    \ do\n      local c = string.byte(new_word)\n      local new_c = c\n      if c\
    \ > 127 then\n        new_c = string.byte(new_word) + 1\n      elseif c < 32 then\n\
    \        new_c = string.byte(new_word) + 32\n      end\n      if new_c > 127 then\n\
    \        new_c = string.byte(new_word) + 1\n      elseif new_c < 32 then\n   \
    \     new_c = string.byte(new_word) + 32\n      end\n      if new_c > 127 then\n\
    \        new_c = string.byte(new_word) + 1\n      elseif new_c < 32 then\n   \
    \     new_c = string.byte(new_word) + 32\n      end\n      if new_c > 127 then\n\
    \        new_c = string.byte(new_word) + 1\n      elseif new_c < 32 then\n   \
    \     new_c = string.byte(new_word) + 32\n      end\n      if new_c > 127 then\n\
    \        new_c = string.byte(new_word) + 1\n      elseif new_c < 32 then\n   \
    \     new_c = string.byte(new_word) + 32\n      end\n      if new_c > 127 then\n\
    \        new_c = string.byte(new_word) + 1\n      elseif new_c < 32 then\n   \
    \     new_c = string.byte(new_word) + 32\n      end\n      if new_c > 127 then\n\
    \        new_c = string.byte(new_word) + 1\n      elseif new_c < 32 then\n   \
    \     new_c = string.byte(new_word) + 32\n      end\n      if new_c > 127 then\n\
    \        new_c = string.byte(new_word) + 1\n      elseif new_c < 32 then\n   \
    \     new_c = string.byte(new_word) + 32\n      end\n      if new_c > 127 then\n\
    \        new_c = string.byte(new_word) + 1\n      elseif new_c < 32 then\n   \
    \     new_c = string.byte(new_word) + 32\n      end\n      if new_c > 127 then\n\
    \        new_c = string.byte(new_word) + 1\n      elseif new_c < 32 then\n   \
    \     new_c = string.byte(new_word) + 32\n      end\n      if new_c > 127 then\n\
    \        new_c = string.byte(new_word) + 1\n      elseif new_c < 32 then\n   \
    \     new_c = string.byte(new_word) + 32\n      end\n      if new_c > 127 then\n\
    \        new_c = string.byte(new_word) + 1\n      elseif new_c < 32 then\n   \
    \     new_c = string.byte(new_word) + 32\n      end\n      if new_c > 12", " \
    \ local words = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for _, word in\
    \ ipairs(words) do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words,\
    \ function(a, b) return string.byte(a) < string.byte(b) end)\n  return table.concat(new_words,\
    \ ' ')\nend", "  local words = string.gmatch(s, '([^ ]+)')\n  local new_s = ''\n\
    \  for _, word in pairs(words) do\n    local new_word = word\n    local i = 0\n\
    \    while i < #word do\n      local c = string.byte(word[i])\n      local j =\
    \ i + 1\n      while j < #word and string.byte(word[j]) > c do\n        j = j\
    \ + 1\n      end\n      new_word = new_word .. string.sub(word, 1, j) .. string.sub(word,\
    \ j + 1)\n      i = j + 1\n    end\n    new_s = new_s .. new_word\n  end\n  return\
    \ new_s\nend", "  local words = string.gmatch(s, '[^ ]+')\n  local new_words =\
    \ {}\n  for _, word in pairs(words) do\n    table.insert(new_words, word)\n  end\n\
    \  table.sort(new_words, function(a, b) return string.byte(a) < string.byte(b)\
    \ end)\n  return table.concat(new_words, ' ')\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
