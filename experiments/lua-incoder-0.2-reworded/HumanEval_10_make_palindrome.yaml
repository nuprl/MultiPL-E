name: HumanEval_10_make_palindrome
language: lua
prompt: "-- Find the shortest palindrome that begins with a supplied string.\n-- Algorithm\
  \ idea is simple:\n-- - Find the longest postfix of supplied string that is a palindrome.\n\
  -- - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n-- >>> make_palindrome('')\n-- ''\n-- >>> make_palindrome('cat')\n\
  -- 'catac'\n-- >>> make_palindrome('cata')\n-- 'catac'\nlocal function make_palindrome(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
  \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
  \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- If string is empty, return empty string.\n  if string == '' then\n\
    \    return ''\n  end", "  local palindrome = string\n  local palindrome_length\
    \ = #string\n  local palindrome_postfix = string\n  local palindrome_postfix_length\
    \ = #string\n  local palindrome_postfix_reverse = ''\n  local palindrome_postfix_reverse_length\
    \ = #palindrome_postfix_reverse\n  while palindrome_postfix_length > 1 do\n  \
    \  local postfix_length = palindrome_length - palindrome_postfix_length\n    local\
    \ postfix_reverse = palindrome_postfix_reverse\n    local postfix_reverse_length\
    \ = #postfix_reverse\n    local postfix_reverse_suffix = ''\n    local postfix_reverse_suffix_length\
    \ = #postfix_reverse_suffix\n    while postfix_reverse_suffix_length > 1 do\n\
    \      local postfix_reverse_suffix = postfix_reverse .. postfix_reverse_suffix\n\
    \      local postfix_reverse_suffix_length = #postfix_reverse_suffix\n      local\
    \ postfix_reverse_suffix_reverse = postfix_reverse_suffix\n      local postfix_reverse_suffix_reverse_length\
    \ = #postfix_reverse_suffix_reverse\n      while postfix_reverse_suffix_reverse_length\
    \ > 1 do\n        local postfix_reverse_suffix_reverse = postfix_reverse_suffix_reverse\
    \ .. postfix_reverse_suffix_reverse\n        local postfix_reverse_suffix_reverse_length\
    \ = #postfix_reverse_suffix_reverse\n        local postfix_reverse_suffix_reverse_suffix\
    \ = postfix_reverse_suffix_reverse\n        local postfix_reverse_suffix_reverse_suffix_length\
    \ = #postfix_reverse_suffix_reverse_suffix\n        while postfix_reverse_suffix_reverse_suffix_length\
    \ > 1 do\n          local postfix_reverse_suffix_reverse_suffix = postfix_reverse_suffix_reverse_suffix\
    \ .. postfix_reverse_suffix_reverse_suffix\n          local postfix_reverse_suffix_reverse_suffix_length\
    \ = #postfix_reverse_suffix_reverse_suffix\n          local postfix_reverse_suffix_reverse_suffix_reverse\
    \ = postfix_reverse_suffix_reverse_suffix\n          local postfix_reverse_suffix_reverse_suffix_reverse_length\
    \ = #postfix_reverse_suffix_reverse_suffix_reverse\n          while postfix_reverse_suffix_reverse_suffix_reverse_length\
    \ > 1 do\n            local postfix_reverse_suffix_reverse_suffix_reverse = postfix_reverse_suffix_reverse_suffix_reverse\
    \ .. postfix_reverse_suffix_reverse_suffix_reverse\n            local postfix_reverse_suffix_reverse_suffix_reverse_length\
    \ = #postfix_reverse_suffix_reverse_suffix_reverse\n            local postfix_reverse_suffix_reverse_suffix_reverse_suffix\
    \ = postfix_reverse_suffix_reverse_suffix_reverse\n            local postfix_reverse_suffix_reverse_suffix_reverse_suffix_",
  "  local longest, longestPrefix, longestSuffix, longestPostfix = longestPalindrome(string)\n\
    \  if longest == nil then return string end\n  local reverse = string.gsub(longestPostfix,\
    \ \"^\", longestPrefix)\n  return reverse..string\nend", "  local reversed_string\
    \ = string\n  local longest_postfix_length = 1\n  local longest_postfix_index\
    \ = 1\n  local longest_postfix_string = ''\n  while true do\n    local postfix_length\
    \ = #reversed_string - longest_postfix_index - 1\n    if postfix_length == 0 then\n\
    \      break\n    end\n    local postfix_string = reversed_string:sub(longest_postfix_index,\
    \ longest_postfix_index + postfix_length)\n    if postfix_string == postfix_string:reverse()\
    \ then\n      longest_postfix_index = longest_postfix_index + postfix_length\n\
    \      longest_postfix_string = postfix_string\n      longest_postfix_length =\
    \ postfix_length\n    end\n  end\n  return longest_postfix_string .. reversed_string:sub(longest_postfix_index\
    \ + longest_postfix_length)\nend", "    local postfix = string\n    local reverse\
    \ = ''\n    local longest = 0\n    while true do\n        longest = longest +\
    \ 1\n        local postfix = string\n        reverse = reverse .. string\n   \
    \     local postfix = string.sub(string,1,longest)\n        local reverse = string.sub(reverse,1,longest)\n\
    \        if string.sub(postfix,1,longest) == reverse then\n            return\
    \ string\n        end\n    end\nend", "  -- Find longest palindrome that begins\
    \ with string.\n  local longest_palindrome = string\n  local longest_palindrome_length\
    \ = #string\n  while longest_palindrome_length > 1 do\n    local longest_palindrome_prefix\
    \ = string\n    local longest_palindrome_prefix_length = #longest_palindrome_prefix\n\
    \    local longest_palindrome_suffix = string\n    local longest_palindrome_suffix_length\
    \ = #longest_palindrome_suffix\n    local longest_palindrome_prefix_reversed =\
    \ string\n    local longest_palindrome_suffix_reversed = string\n    local longest_palindrome_prefix_reversed_length\
    \ = #longest_palindrome_prefix_reversed\n    local longest_palindrome_suffix_reversed_length\
    \ = #longest_palindrome_suffix_reversed\n    local longest_palindrome_prefix_reversed_reversed\
    \ = string\n    local longest_palindrome_suffix_reversed_reversed = string\n \
    \   local longest_palindrome_prefix_reversed_reversed_length = #longest_palindrome_prefix_reversed_reversed\n\
    \    local longest_palindrome_suffix_reversed_reversed_length = #longest_palindrome_suffix_reversed_reversed\n\
    \    local longest_palindrome_prefix_reversed_reversed_reversed_length = #longest_palindrome_prefix_reversed_reversed_reversed\n\
    \    local longest_palindrome_suffix_reversed_reversed_reversed_length = #longest_palindrome_suffix_reversed_reversed_reversed\n\
    \    local longest_palindrome_prefix_reversed_reversed_reversed_reversed_length\
    \ = #longest_palindrome_prefix_reversed_reversed_reversed_reversed\n    local\
    \ longest_palindrome_suffix_reversed_reversed_reversed_reversed_length = #longest_palindrome_suffix_reversed_reversed_reversed_reversed\n\
    \    local longest_palindrome_prefix_reversed_reversed_reversed_reversed_reversed_length\
    \ = #longest_palindrome_prefix_reversed_reversed_reversed_reversed_reversed\n\
    \    local longest_palindrome_suffix_reversed_reversed_reversed_reversed_reversed_length\
    \ = #longest_palindrome_suffix_reversed_reversed_reversed_reversed_reversed\n\
    \    local longest_palindrome_prefix_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = #lon", "  local palindrome = string\n  local longest_postfix = string\n  local\
    \ longest_postfix_length = string\n  local longest_postfix_length_index = 0\n\
    \  local longest_postfix_length_reversed = string\n  local longest_postfix_reversed_length\
    \ = string\n  local longest_postfix_reversed_length_index = 0\n  local longest_postfix_reversed_length_reversed\
    \ = string\n  local longest_postfix_reversed_length_reversed_index = 0\n  local\
    \ longest_postfix_reversed_length_reversed_reversed = string\n  local longest_postfix_reversed_length_reversed_reversed_index\
    \ = 0\n  local longest_postfix_reversed_length_reversed_reversed_reversed = string\n\
    \  local longest_postfix_reversed_length_reversed_reversed_reversed_index = 0\n\
    \  local longest_postfix_reversed_length_reversed_reversed_reversed_reversed =\
    \ string\n  local longest_postfix_reversed_length_reversed_reversed_reversed_reversed\
    \ = string\n  local longest_postfix_reversed_length_reversed_reversed_reversed_reversed_index\
    \ = 0\n  local longest_postfix_reversed_length_reversed_reversed_reversed_reversed_reversed\
    \ = string\n  local longest_postfix_reversed_length_reversed_reversed_reversed_reversed_reversed_index\
    \ = 0\n  local longest_postfix_reversed_length_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string\n  local longest_postfix_reversed_length_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string\n  local longest_postfix_reversed_length_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string\n  local longest_postfix_reversed_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string\n  local longest_postfix_reversed_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string\n  local longest_postfix_reversed_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string\n  local longest_postfix_reversed_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string\n  local longest_postfix_reversed_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string\n  local longest_postfix_reversed_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string", "  local reversed_string = ''\n  local longest_postfix_length = 0\n\
    \  local longest_postfix_index = 0\n  for i = 1, #string do\n    local postfix_length\
    \ = string:sub(i, i):len()\n    if longest_postfix_length < postfix_length then\n\
    \      longest_postfix_length = postfix_length\n      longest_postfix_index =\
    \ i\n    end\n  end\n  local postfix_length = string:sub(longest_postfix_index,\
    \ longest_postfix_index):len()\n  local postfix_reversed_string = string\n  local\
    \ postfix_reversed_length = postfix_length\n  for i = longest_postfix_index +\
    \ 1, #string do\n    local postfix_reversed_length = postfix_reversed_length -\
    \ 1\n    local postfix_reversed_string = string\n    for j = 1, postfix_length\
    \ do\n      postfix_reversed_string = postfix_reversed_string .. string:sub(i,\
    \ i + j)\n    end\n    if postfix_reversed_string == string\n    then\n      return\
    \ postfix_reversed_string\n    end\n  end\nend", "  -- Find the longest postfix\
    \ of supplied string that is a palindrome.\n  local postfix = string\n  local\
    \ longest = 0\n  while true do\n    longest = longest + 1\n    local postfix_reverse\
    \ = string.gsub(postfix, \"(.)\", function (c)\n      return string.rep(c:reverse(),\
    \ 1)\n    end)\n    if postfix_reverse == postfix then\n      break\n    end\n\
    \    postfix = postfix_reverse\n  end\n  -- Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n  local palindrome\
    \ = string\n  local i = longest - 1\n  while i >= 1 do\n    palindrome = palindrome\
    \ .. string.rep(\"a\", i)\n    i = i - 1\n  end\n  return palindrome\nend", " \
    \ local palindrome = string\n  local prefix_length = 1\n  while string.sub(palindrome,\
    \ prefix_length, prefix_length + 1) ~= string then\n    prefix_length = prefix_length\
    \ + 1\n  end\n  local suffix_length = string.len(palindrome) - prefix_length\n\
    \  local reversed_suffix = string.reverse(string.sub(palindrome, prefix_length,\
    \ prefix_length + suffix_length))\n  local reversed_prefix = string.sub(palindrome,\
    \ prefix_length, reversed_suffix)\n  return reversed_prefix .. reversed_suffix\n\
    end", "  -- Find longest postfix of string that is a palindrome.\n  local postfix\
    \ = string\n  local i = #string\n  while i do\n    i = i - 1\n    postfix = string.sub(string,\
    \ 1, i) + postfix + string.sub(string, 1, i)\n  end\n  -- Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \  postfix = string.sub(postfix, 1, #string) + string.sub(postfix, 1, #string)\
    \ .. postfix\n  return postfix\nend", "  local palindrome = string\n  local suffix\
    \ = ''\n  local longest_postfix_length = 0\n  local longest_postfix_index = 0\n\
    \  local longest_postfix_string = ''\n  local longest_postfix_string_index = 0\n\
    \  local longest_postfix_string_length = 0\n  local longest_postfix_string_length_index\
    \ = 0\n  local longest_postfix_string_length2_index = 0\n  local longest_postfix_string_length2_index2\
    \ = 0\n  local longest_postfix_string_length2_index3 = 0\n  local longest_postfix_string_length2_index4\
    \ = 0\n  local longest_postfix_string_length2_index5 = 0\n  local longest_postfix_string_length2_index6\
    \ = 0\n  local longest_postfix_string_length2_index7 = 0\n  local longest_postfix_string_length2_index8\
    \ = 0\n  local longest_postfix_string_length2_index9 = 0\n  local longest_postfix_string_length2_index10\
    \ = 0\n  local longest_postfix_string_length2_index11 = 0\n  local longest_postfix_string_length2_index12\
    \ = 0\n  local longest_postfix_string_length2_index13 = 0\n  local longest_postfix_string_length2_index14\
    \ = 0\n  local longest_postfix_string_length2_index15 = 0\n  local longest_postfix_string_length2_index16\
    \ = 0\n  local longest_postfix_string_length2_index17 = 0\n  local longest_postfix_string_length2_index18\
    \ = 0\n  local longest_postfix_string_length2_index19 = 0\n  local longest_postfix_string_length2_index20\
    \ = 0\n  local longest_postfix_string_length2_index21 = 0\n  local longest_postfix_string_length2_index22\
    \ = 0\n  local longest_postfix_string_length2_index23 = 0\n  local longest_postfix_string_length2_index24\
    \ = 0\n  local longest_postfix_string_length2_index25 = 0\n  local longest_postfix_string_length2_index26\
    \ = 0\n  local longest_postfix_string_length2_index27 = 0\n  local longest_postfix_string_length2_index28\
    \ = 0\n  local longest_postfix_string_length2_index29 = 0\n  local longest_postfix_string_length2_index30\
    \ = 0\n  local longest_postfix_string_length2_index31 = 0\n  local longest_postfix_string_length2_index32\
    \ = 0\n  local longest_postfix_string_length2_index33 = 0\n  local longest_postfix_string_length2_index34\
    \ = 0", "    local palindrome = string\n    local suffix = ''\n    local length\
    \ = 0\n    while palindrome ~= '' do\n        length = length + 1\n        local\
    \ postfix = string\n        for i = 1, length do\n            postfix = postfix\
    \ .. string[i]\n        end\n        if palindrome == postfix then\n         \
    \   palindrome = string\n        end\n        suffix = suffix .. string[length]\n\
    \    end\n    return palindrome .. suffix\nend", "  local postfix = string\n \
    \ local palindrome = string\n  while true do\n    local reverse = reverse(string)\n\
    \    if reverse == string then\n      break\n    end\n    postfix = string\n \
    \   string = string..reverse\n  end\n  local prefix = string\n  while true do\n\
    \    local reverse = reverse(string)\n    if reverse == string then\n      break\n\
    \    end\n    prefix = string\n    string = string..reverse\n  end\n  local palindrome\
    \ = string\n  while true do\n    local reverse = reverse(string)\n    if reverse\
    \ == string then\n      break\n    end\n    palindrome = string..reverse\n  end\n\
    \  return prefix..palindrome\nend", "  local palindrome = string\n  local palindrome_length\
    \ = #string\n  local palindrome_postfix = string\n  local palindrome_postfix_length\
    \ = #string\n  local palindrome_postfix_reverse = string\n  local palindrome_postfix_reverse_length\
    \ = #string\n  local palindrome_postfix_reverse_index = 0\n  local palindrome_postfix_reverse_length\
    \ = #string\n  local palindrome_postfix_reverse_start = palindrome_postfix_length\n\
    \  local palindrome_postfix_reverse_end = palindrome_postfix_length\n  local palindrome_postfix_reverse_start_index\
    \ = 0\n  local palindrome_postfix_reverse_end_index = 0\n  local palindrome_postfix_reverse_start_index\
    \ = 0\n  local palindrome_postfix_reverse_end_index = 0\n  local palindrome_postfix_reverse_start_index\
    \ = 0\n  local palindrome_postfix_reverse_end_index = 0\n  local palindrome_postfix_reverse_start_index\
    \ = 0\n  local palindrome_postfix_reverse_end_index = 0\n  local palindrome_postfix_reverse_start_index\
    \ = 0\n  local palindrome_postfix_reverse_end_index = 0\n  local palindrome_postfix_reverse_start_index\
    \ = 0\n  local palindrome_postfix_reverse_end_index = 0\n  local palindrome_postfix_reverse_start_index\
    \ = 0\n  local palindrome_postfix_reverse_end_index = 0\n  local palindrome_postfix_reverse_start_index\
    \ = 0\n  local palindrome_postfix_reverse_end_index = 0\n  local palindrome_postfix_reverse_start_index\
    \ = 0\n  local palindrome_postfix_reverse_end_index = 0\n  local palindrome_postfix_reverse_start_index\
    \ = 0\n  local palindrome_postfix_reverse_end_index = 0\n  local palindrome_postfix_reverse_start_index\
    \ = 0\n  local palindrome_postfix_reverse_end_index = 0\n  local palindrome_postfix_reverse_start_index\
    \ = 0\n  local palindrome_postfix_reverse_end_index = 0\n  local palindrome_postfix_reverse_start_index\
    \ = 0\n  local palindrome_postfix_reverse_end_index = 0\n  local palindrome_postfix_reverse_start_index\
    \ = 0\n  local palindrome_postfix_reverse_end_index = 0\n  local palindrome_postfix_reverse_start_index\
    \ = 0\n  local palindrome_post", "  -- If the string is empty, return an empty\
    \ string.\n  if string == '' then\n    return ''\n  end", "  -- If no string given,\
    \ return empty string.\n  if not string then\n    return ''\n  end", "    local\
    \ palindrome = string\n    local palindrome_length = #string\n    local palindrome_prefix\
    \ = string\n    local palindrome_suffix = string\n    local palindrome_prefix_length\
    \ = #string\n    local palindrome_suffix_length = #string\n    local palindrome_prefix_reverse\
    \ = string\n    local palindrome_suffix_reverse = string\n    local palindrome_prefix_reverse_index\
    \ = 0\n    local palindrome_suffix_reverse_index = 0\n    while palindrome_length\
    \ > 1 do\n        -- Find the longest postfix of supplied string that is a palindrome.\n\
    \        local palindrome_prefix_length = #palindrome_prefix\n        local palindrome_suffix_length\
    \ = #palindrome_suffix\n        local palindrome_prefix_reverse_index = palindrome_prefix_length\n\
    \        local palindrome_suffix_reverse_index = palindrome_suffix_length\n  \
    \      while palindrome_prefix_reverse_index > 0 do\n            -- Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n            palindrome_prefix_reverse = palindrome_prefix:sub(1, palindrome_prefix_reverse_index\
    \ - 1) .. palindrome_prefix_reverse\n            palindrome_suffix_reverse = palindrome_suffix:sub(palindrome_suffix_reverse_index)\
    \ .. palindrome_suffix_reverse\n            palindrome_prefix_reverse_index =\
    \ palindrome_prefix_reverse_index - 1\n            palindrome_suffix_reverse_index\
    \ = palindrome_suffix_reverse_index - 1\n        end\n        palindrome = palindrome\
    \ .. palindrome_prefix_reverse .. palindrome_suffix\n        palindrome_length\
    \ = palindrome_length - 1\n    end\n    return palindrome\nend", "    local reversed_string\
    \ = string\n    local longest_postfix_length = 1\n    local longest_postfix_index\
    \ = 1\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    while true do\n        local\
    \ postfix_length = string.len(reversed_string) - longest_postfix_index\n     \
    \   if postfix_length == 0 then\n            break\n        end\n        local\
    \ postfix_string = reversed_string:sub(longest_postfix_index, longest_postfix_index\
    \ + postfix_length)\n        if postfix_string == postfix_string:reverse() then\n\
    \            longest_postfix_index = longest_postfix_index + postfix_length\n\
    \            longest_postfix_string = postfix_string\n        else\n         \
    \   longest_postfix_length = postfix_length\n            longest_postfix_index\
    \ = longest_postfix_index + 1\n        end\n    end\n    return longest_postfix_string\
    \ .. reversed_string:sub(longest_postfix_index + 1, string.len(reversed_string))\n\
    end", "  local palindrome = string\n  local longest_postfix_length = 1\n  local\
    \ longest_postfix_index = 1\n  local longest_postfix_string = ''\n  while longest_postfix_index\
    \ <= #string do\n    local postfix_length = #string - longest_postfix_index\n\
    \    local postfix_string = string\n    local postfix_string_reverse = ''\n  \
    \  for i = 1, postfix_length do\n      postfix_string_reverse = postfix_string_reverse\
    \ .. string[i + longest_postfix_index]\n    end\n    if postfix_string == postfix_string_reverse\
    \ then\n      longest_postfix_length = postfix_length\n      longest_postfix_index\
    \ = longest_postfix_index + 1\n      longest_postfix_string = postfix_string\n\
    \    end\n  end\n  local postfix_length = #string - longest_postfix_index\n  local\
    \ postfix_string = string\n  local postfix_string_reverse = ''\n  for i = 1, postfix_length\
    \ do\n    postfix_string_reverse = postfix_string_reverse .. string[i + longest_postfix_index]\n\
    \  end\n  if postfix_string == postfix_string_reverse then\n    palindrome = string\n\
    \  end\n  return palindrome\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
