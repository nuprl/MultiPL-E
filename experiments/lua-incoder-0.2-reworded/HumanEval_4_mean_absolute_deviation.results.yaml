language: lua
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, value in pairs(numbers) do\n    sum\
    \ = sum + math.abs(value - math.mean(numbers))\n    count = count + 1\n  end\n\
    \  return sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmer6sguf.lua:12:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpmer6sguf.lua:12:\
    \ in function 'candidate'\n\t/tmp/tmpmer6sguf.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + math.abs(x -\
    \ math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplquxw3kp.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmplquxw3kp.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmplquxw3kp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + math.abs(x -\
    \ math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplquxw3kp.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmplquxw3kp.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmplquxw3kp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in ipairs(numbers) do\n    sum = sum + math.abs(x\
    \ - math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwl83s7b0.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpwl83s7b0.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpwl83s7b0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = 0\n  for _, x in ipairs(numbers) do\n    local x_mean = math.abs(x\
    \ - mean)\n    mean = mean + x_mean\n  end\n  return mean\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2tv3xv7.lua:20:\
    \ expected: 0.5, actual: 2\nstack traceback:\n\t/tmp/tmpm2tv3xv7.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in ipairs(numbers) do\n    sum = sum + math.abs(x\
    \ - math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwl83s7b0.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpwl83s7b0.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpwl83s7b0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, value in pairs(numbers) do\n    sum\
    \ = sum + math.abs(value - math.mean(numbers))\n    count = count + 1\n  end\n\
    \  return sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmer6sguf.lua:12:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpmer6sguf.lua:12:\
    \ in function 'candidate'\n\t/tmp/tmpmer6sguf.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, value in pairs(numbers) do\n    sum\
    \ = sum + value\n    count = count + 1\n  end\n  return math.abs(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpef1ho6yr.lua:21:\
    \ expected: 0.5, actual: 1.5\nstack traceback:\n\t/tmp/tmpef1ho6yr.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(value))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcswnion.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmphcswnion.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmphcswnion.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = 0\n  local deviation = 0\n  for _, value in pairs(numbers) do\n\
    \    local diff = value - mean\n    deviation = deviation + diff * diff\n    mean\
    \ = mean + value\n  end\n  return deviation / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpganvnolv.lua:22:\
    \ expected: 0.5, actual: 1\nstack traceback:\n\t/tmp/tmpganvnolv.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9agu0k70.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmp9agu0k70.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp9agu0k70.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp42hdwzuy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp42hdwzuy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp42hdwzuy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9agu0k70.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmp9agu0k70.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp9agu0k70.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean\n  if #numbers == 0 then\n    return 0\n  else\n    local sum = 0\n\
    \    for _, value in ipairs(numbers) do\n      sum = sum + value\n    end\n  \
    \  mean = sum / #numbers\n  end\n  local deviation = 0\n  for _, value in ipairs(numbers)\
    \ do\n    deviation = deviation + (value - mean)^2\n  end\n  return deviation\
    \ / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}),\
    \ 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsnsy6qy9.lua:29:\
    \ expected: 0.5, actual: 0.25\nstack traceback:\n\t/tmp/tmpsnsy6qy9.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = 0\n  local deviation = 0\n  for _, value in pairs(numbers) do\n\
    \    local diff = value - mean\n    deviation = deviation + diff * diff\n    mean\
    \ = mean + value\n  end\n  return deviation / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpganvnolv.lua:22:\
    \ expected: 0.5, actual: 1\nstack traceback:\n\t/tmp/tmpganvnolv.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9agu0k70.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmp9agu0k70.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp9agu0k70.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9agu0k70.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmp9agu0k70.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp9agu0k70.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp42hdwzuy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp42hdwzuy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp42hdwzuy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean\n  if #numbers == 0 then\n    return 0\n  else\n    local sum = 0\n\
    \    for _, v in ipairs(numbers) do\n      sum = sum + v\n    end\n    mean =\
    \ sum / #numbers\n  end\n  local deviation = 0\n  for _, v in ipairs(numbers)\
    \ do\n    deviation = deviation + (v - mean) * (v - mean)\n  end\n  return deviation\
    \ / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}),\
    \ 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp404wgp5n.lua:29:\
    \ expected: 0.5, actual: 0.25\nstack traceback:\n\t/tmp/tmp404wgp5n.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in ipairs(numbers) do\n    sum = sum + math.abs(x\
    \ - math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwl83s7b0.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpwl83s7b0.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpwl83s7b0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, value in ipairs(numbers) do\n   \
    \ sum = sum + math.abs(value - mean)\n    count = count + 1\n  end\n  return sum\
    \ / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7b9d72f_.lua:12:\
    \ attempt to perform arithmetic on global 'mean' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp7b9d72f_.lua:12: in function 'candidate'\n\t/tmp/tmp7b9d72f_.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9agu0k70.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmp9agu0k70.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp9agu0k70.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 0
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean\n  if #numbers == 0 then\n    return 0\n  end\n  mean = numbers[1]\n\
    \  for i = 2, #numbers do\n    mean = mean + numbers[i]\n  end\n  mean = mean\
    \ / #numbers\n  local sum = 0\n  for i = 1, #numbers do\n    sum = sum + math.abs(numbers[i]\
    \ - mean)\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean\n  if #numbers == 0 then\n    return 0\n  end\n  mean = numbers[1]\n\
    \  for i = 2, #numbers do\n    local delta = numbers[i] - mean\n    mean = mean\
    \ + delta / i\n  end\n  return mean\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8oj08qrz.lua:24:\
    \ expected: 0.5, actual: 1.5\nstack traceback:\n\t/tmp/tmp8oj08qrz.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + math.abs(x -\
    \ math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplquxw3kp.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmplquxw3kp.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmplquxw3kp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, value in pairs(numbers) do\n    sum\
    \ = sum + value\n    count = count + 1\n  end\n  if count == 0 then\n    return\
    \ 0\n  end\n  return math.abs(sum / count)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6ic3erv.lua:24:\
    \ expected: 0.5, actual: 1.5\nstack traceback:\n\t/tmp/tmpn6ic3erv.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9agu0k70.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmp9agu0k70.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp9agu0k70.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi54hz741.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmpi54hz741.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpi54hz741.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, value in pairs(numbers) do\n    sum\
    \ = sum + value\n    count = count + 1\n  end\n  if count == 0 then\n    return\
    \ 0\n  end\n  return math.abs(sum / count)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6ic3erv.lua:24:\
    \ expected: 0.5, actual: 1.5\nstack traceback:\n\t/tmp/tmpn6ic3erv.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + math.abs(x -\
    \ math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplquxw3kp.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmplquxw3kp.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmplquxw3kp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9agu0k70.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmp9agu0k70.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp9agu0k70.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(value))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcswnion.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmphcswnion.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmphcswnion.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in ipairs(numbers) do\n    sum = sum + math.abs(x\
    \ - math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwl83s7b0.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpwl83s7b0.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpwl83s7b0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in ipairs(numbers) do\n    sum = sum + math.abs(x\
    \ - math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwl83s7b0.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpwl83s7b0.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpwl83s7b0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + math.abs(x -\
    \ math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplquxw3kp.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmplquxw3kp.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmplquxw3kp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, value in pairs(numbers) do\n    sum\
    \ = sum + value\n    count = count + 1\n  end\n  return math.abs(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpef1ho6yr.lua:21:\
    \ expected: 0.5, actual: 1.5\nstack traceback:\n\t/tmp/tmpef1ho6yr.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp42hdwzuy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp42hdwzuy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp42hdwzuy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, value in ipairs(numbers) do\n   \
    \ sum = sum + value\n    count = count + 1\n  end\n  if count == 0 then\n    return\
    \ 0\n  end\n  return sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_10e9mw.lua:24:\
    \ expected: 0.5, actual: 1.5\nstack traceback:\n\t/tmp/tmp5_10e9mw.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, value in pairs(numbers) do\n    sum\
    \ = sum + value\n    count = count + 1\n  end\n  if count == 0 then\n    return\
    \ 0\n  end\n  return math.abs(sum / count)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6ic3erv.lua:24:\
    \ expected: 0.5, actual: 1.5\nstack traceback:\n\t/tmp/tmpn6ic3erv.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean\n  if #numbers == 0 then\n    return 0\n  elseif #numbers == 1 then\n\
    \    return numbers[1]\n  else\n    local sum = 0\n    for i = 1, #numbers do\n\
    \      sum = sum + numbers[i]\n    end\n    mean = sum / #numbers\n  end\n  local\
    \ deviation = 0\n  for i = 1, #numbers do\n    deviation = deviation + (numbers[i]\
    \ - mean)^2\n  end\n  return deviation / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6rjgk4hx.lua:31:\
    \ expected: 0.5, actual: 0.25\nstack traceback:\n\t/tmp/tmp6rjgk4hx.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp42hdwzuy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp42hdwzuy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp42hdwzuy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + math.abs(x -\
    \ math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplquxw3kp.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmplquxw3kp.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmplquxw3kp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + math.abs(x -\
    \ math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplquxw3kp.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmplquxw3kp.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmplquxw3kp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9agu0k70.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmp9agu0k70.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp9agu0k70.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi54hz741.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmpi54hz741.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpi54hz741.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = 0\n  for _, value in pairs(numbers) do\n    local diff = value\
    \ - mean\n    mean = mean + diff\n  end\n  return mean / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpghoue1ht.lua:20:\
    \ expected: 0.5, actual: 1\nstack traceback:\n\t/tmp/tmpghoue1ht.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = 0\n  for _, x in pairs(numbers) do\n    local x_mean = mean or\
    \ x\n    mean = mean + x - x_mean\n  end\n  return mean / #numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1pichb0.lua:20:\
    \ expected: 0.5, actual: 1\nstack traceback:\n\t/tmp/tmpw1pichb0.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in ipairs(numbers) do\n    sum = sum + math.abs(x\
    \ - math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwl83s7b0.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpwl83s7b0.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpwl83s7b0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + math.abs(x -\
    \ math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplquxw3kp.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmplquxw3kp.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmplquxw3kp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in ipairs(numbers) do\n    sum = sum + math.abs(x\
    \ - math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwl83s7b0.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpwl83s7b0.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpwl83s7b0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean\n  if #numbers == 0 then\n    return 0\n  end\n  mean = numbers[1]\n\
    \  local sum = 0\n  for i = 2, #numbers do\n    sum = sum + math.abs(numbers[i]\
    \ - mean)\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp096ajawl.lua:25:\
    \ expected: 1, actual: 1.5\nstack traceback:\n\t/tmp/tmp096ajawl.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + math.abs(x -\
    \ math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplquxw3kp.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmplquxw3kp.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmplquxw3kp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 0
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean\n  if #numbers == 0 then\n    return 0\n  elseif #numbers == 1 then\n\
    \    return numbers[1]\n  else\n    local sum = 0\n    for _, v in ipairs(numbers)\
    \ do\n      sum = sum + v\n    end\n    mean = sum / #numbers\n  end\n  local\
    \ sum = 0\n  for _, v in ipairs(numbers) do\n    sum = sum + math.abs(v - mean)\n\
    \  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = 0\n  for _, x in ipairs(numbers) do\n    local x_mean = mean or\
    \ x\n    mean = mean + (x - x_mean)\n  end\n  return mean / #numbers\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp848smp6w.lua:20:\
    \ expected: 0.5, actual: 1\nstack traceback:\n\t/tmp/tmp848smp6w.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in ipairs(numbers) do\n    sum = sum + math.abs(x\
    \ - math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwl83s7b0.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpwl83s7b0.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpwl83s7b0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = 0\n  local deviation = 0\n  for _, value in ipairs(numbers) do\n\
    \    local diff = value - mean\n    deviation = deviation + diff * diff\n    mean\
    \ = mean + value\n  end\n  return deviation / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp535so4f_.lua:22:\
    \ expected: 0.5, actual: 1\nstack traceback:\n\t/tmp/tmp535so4f_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = 0\n  local deviation = 0\n  for _, value in ipairs(numbers) do\n\
    \    local diff = value - mean\n    deviation = deviation + diff * diff\n    mean\
    \ = mean + value\n  end\n  return deviation / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp535so4f_.lua:22:\
    \ expected: 0.5, actual: 1\nstack traceback:\n\t/tmp/tmp535so4f_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi54hz741.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmpi54hz741.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpi54hz741.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean\n  if #numbers == 0 then\n    return 0\n  end\n  mean = numbers[1]\n\
    \  for i = 2, #numbers do\n    local diff = numbers[i] - mean\n    if diff ~=\
    \ 0 then\n      mean = mean + diff / i\n    end\n  end\n  return mean\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrf12hdk.lua:26:\
    \ expected: 0.5, actual: 1.5\nstack traceback:\n\t/tmp/tmpzrf12hdk.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(value))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppmtmt29s.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmppmtmt29s.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmppmtmt29s.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp42hdwzuy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp42hdwzuy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp42hdwzuy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + math.abs(x -\
    \ math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplquxw3kp.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmplquxw3kp.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmplquxw3kp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9agu0k70.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmp9agu0k70.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp9agu0k70.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9agu0k70.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmp9agu0k70.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp9agu0k70.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean\n  if #numbers == 0 then\n    return 0\n  end\n  mean = numbers[1]\n\
    \  for i = 2, #numbers do\n    local diff = numbers[i] - mean\n    mean = mean\
    \ + diff / i\n  end\n  return mean\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb7j7tmh.lua:24:\
    \ expected: 0.5, actual: 1.5\nstack traceback:\n\t/tmp/tmpsb7j7tmh.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9agu0k70.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmp9agu0k70.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp9agu0k70.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in ipairs(numbers) do\n    sum = sum + math.abs(x\
    \ - math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwl83s7b0.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpwl83s7b0.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpwl83s7b0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, value in ipairs(numbers) do\n   \
    \ sum = sum + math.abs(value - math.fmean(numbers))\n    count = count + 1\n \
    \ end\n  return sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp58ksj6yx.lua:12:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmp58ksj6yx.lua:12:\
    \ in function 'candidate'\n\t/tmp/tmp58ksj6yx.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in ipairs(numbers) do\n    sum = sum + math.abs(x\
    \ - math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwl83s7b0.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpwl83s7b0.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpwl83s7b0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in ipairs(numbers) do\n    sum = sum + math.abs(x\
    \ - math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwl83s7b0.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpwl83s7b0.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpwl83s7b0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi54hz741.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmpi54hz741.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpi54hz741.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9agu0k70.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmp9agu0k70.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp9agu0k70.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + math.abs(x -\
    \ math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplquxw3kp.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmplquxw3kp.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmplquxw3kp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = 0\n  for _, x in pairs(numbers) do\n    local x_mean = mean or\
    \ x\n    mean = mean + (x - x_mean)\n  end\n  return mean / #numbers\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ibs50ra.lua:20:\
    \ expected: 0.5, actual: 1\nstack traceback:\n\t/tmp/tmp3ibs50ra.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, value in pairs(numbers) do\n    sum\
    \ = sum + value\n    count = count + 1\n  end\n  if count == 0 then\n    return\
    \ 0\n  end\n  return math.abs(sum / count)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6ic3erv.lua:24:\
    \ expected: 0.5, actual: 1.5\nstack traceback:\n\t/tmp/tmpn6ic3erv.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9agu0k70.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmp9agu0k70.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp9agu0k70.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + math.abs(x -\
    \ math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplquxw3kp.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmplquxw3kp.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmplquxw3kp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean\n  if #numbers == 0 then\n    return 0\n  else\n    local sum = 0\n\
    \    for _, value in pairs(numbers) do\n      sum = sum + value\n    end\n   \
    \ mean = sum / #numbers\n  end\n  local deviation = 0\n  for _, value in pairs(numbers)\
    \ do\n    deviation = deviation + (value - mean)^2\n  end\n  return deviation\
    \ / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}),\
    \ 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpro4yc__6.lua:29:\
    \ expected: 0.5, actual: 0.25\nstack traceback:\n\t/tmp/tmpro4yc__6.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9agu0k70.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmp9agu0k70.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp9agu0k70.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + math.abs(x -\
    \ math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplquxw3kp.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmplquxw3kp.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmplquxw3kp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in ipairs(numbers) do\n    sum = sum + math.abs(x\
    \ - math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwl83s7b0.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpwl83s7b0.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpwl83s7b0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9agu0k70.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmp9agu0k70.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp9agu0k70.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp42hdwzuy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp42hdwzuy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp42hdwzuy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp42hdwzuy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp42hdwzuy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp42hdwzuy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + math.abs(x -\
    \ math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplquxw3kp.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmplquxw3kp.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmplquxw3kp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + math.abs(x -\
    \ math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplquxw3kp.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmplquxw3kp.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmplquxw3kp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = 0\n  local deviation = 0\n  for _, value in ipairs(numbers) do\n\
    \    local diff = value - mean\n    deviation = deviation + diff*diff\n    mean\
    \ = mean + value\n  end\n  return deviation / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmcisci__.lua:22:\
    \ expected: 0.5, actual: 1\nstack traceback:\n\t/tmp/tmpmcisci__.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + math.abs(x -\
    \ math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplquxw3kp.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmplquxw3kp.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmplquxw3kp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9agu0k70.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmp9agu0k70.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp9agu0k70.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + math.abs(x -\
    \ math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplquxw3kp.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmplquxw3kp.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmplquxw3kp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, value in pairs(numbers) do\n    sum\
    \ = sum + value\n    count = count + 1\n  end\n  if count == 0 then\n    return\
    \ 0\n  end\n  return math.abs(sum / count)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6ic3erv.lua:24:\
    \ expected: 0.5, actual: 1.5\nstack traceback:\n\t/tmp/tmpn6ic3erv.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 0
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean\n  if #numbers == 0 then\n    return 0\n  elseif #numbers == 1 then\n\
    \    return numbers[1]\n  else\n    local sum = 0\n    for _, v in ipairs(numbers)\
    \ do\n      sum = sum + v\n    end\n    mean = sum / #numbers\n  end\n  local\
    \ sum = 0\n  for _, v in ipairs(numbers) do\n    sum = sum + math.abs(v - mean)\n\
    \  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean\n  if #numbers == 0 then\n    return 0\n  else\n    local sum = 0\n\
    \    for _, v in ipairs(numbers) do\n      sum = sum + v\n    end\n    mean =\
    \ sum / #numbers\n  end\n  local sum = 0\n  for _, v in ipairs(numbers) do\n \
    \   sum = sum + (v - mean) * (v - mean)\n  end\n  return math.sqrt(sum / #numbers)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgfx47_ie.lua:30:\
    \ expected: 1, actual: 1.1180339887499\nstack traceback:\n\t/tmp/tmpgfx47_ie.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + math.abs(x -\
    \ math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplquxw3kp.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmplquxw3kp.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmplquxw3kp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in ipairs(numbers) do\n    sum = sum + math.abs(x\
    \ - math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwl83s7b0.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpwl83s7b0.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpwl83s7b0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 0
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean\n  if #numbers == 0 then\n    return 0\n  else\n    mean = numbers[1]\n\
    \    for i = 2, #numbers do\n      mean = mean + numbers[i]\n    end\n    mean\
    \ = mean / #numbers\n  end\n  local sum = 0\n  for i = 1, #numbers do\n    sum\
    \ = sum + math.abs(numbers[i] - mean)\n  end\n  return sum / #numbers\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp42hdwzuy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp42hdwzuy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp42hdwzuy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(value))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcswnion.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmphcswnion.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmphcswnion.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi54hz741.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmpi54hz741.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpi54hz741.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, value in pairs(numbers) do\n    sum\
    \ = sum + value\n    count = count + 1\n  end\n  return sum / count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2uikrwt.lua:21:\
    \ expected: 0.5, actual: 1.5\nstack traceback:\n\t/tmp/tmpf2uikrwt.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + math.abs(x -\
    \ math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplquxw3kp.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmplquxw3kp.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmplquxw3kp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in ipairs(numbers) do\n    sum = sum + math.abs(x\
    \ - math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwl83s7b0.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpwl83s7b0.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpwl83s7b0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = 0\n  local deviation = 0\n  for _, value in pairs(numbers) do\n\
    \    local diff = value - mean\n    deviation = deviation + diff * diff\n    mean\
    \ = mean + value\n  end\n  return deviation / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpganvnolv.lua:22:\
    \ expected: 0.5, actual: 1\nstack traceback:\n\t/tmp/tmpganvnolv.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, value in pairs(numbers) do\n    sum\
    \ = sum + math.abs(value - math.mean(numbers))\n    count = count + 1\n  end\n\
    \  return sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmer6sguf.lua:12:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpmer6sguf.lua:12:\
    \ in function 'candidate'\n\t/tmp/tmpmer6sguf.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = 0\n  for _, value in pairs(numbers) do\n    local diff = value\
    \ - mean\n    mean = mean + diff\n  end\n  return mean / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpghoue1ht.lua:20:\
    \ expected: 0.5, actual: 1\nstack traceback:\n\t/tmp/tmpghoue1ht.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp42hdwzuy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp42hdwzuy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp42hdwzuy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in ipairs(numbers) do\n    sum = sum + math.abs(x\
    \ - math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwl83s7b0.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpwl83s7b0.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpwl83s7b0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + x\n  end\n \
    \ return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp819t41o3.lua:19:\
    \ expected: 0.5, actual: 1.5\nstack traceback:\n\t/tmp/tmp819t41o3.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, value in pairs(numbers) do\n    sum\
    \ = sum + value\n    count = count + 1\n  end\n  if count == 0 then\n    return\
    \ 0\n  end\n  return sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigbqrhvw.lua:24:\
    \ expected: 0.5, actual: 1.5\nstack traceback:\n\t/tmp/tmpigbqrhvw.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = 0\n  for _, x in pairs(numbers) do\n    local x_mean = math.mean(x)\n\
    \    local diff = x - x_mean\n    local mad = diff / x_mean\n    mean = mean +\
    \ mad * x_mean\n  end\n  return mean / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpete5j84x.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpete5j84x.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpete5j84x.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in ipairs(numbers) do\n    sum = sum + math.abs(x\
    \ - math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwl83s7b0.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpwl83s7b0.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpwl83s7b0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + math.abs(x -\
    \ math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplquxw3kp.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmplquxw3kp.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmplquxw3kp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, value in ipairs(numbers) do\n   \
    \ sum = sum + value\n    count = count + 1\n  end\n  return math.abs(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpabh_cbvh.lua:21:\
    \ expected: 0.5, actual: 1.5\nstack traceback:\n\t/tmp/tmpabh_cbvh.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi54hz741.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmpi54hz741.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpi54hz741.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, value in pairs(numbers) do\n    sum\
    \ = sum + value\n    count = count + 1\n  end\n  if count == 0 then\n    return\
    \ 0\n  end\n  return math.abs(sum / count)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6ic3erv.lua:24:\
    \ expected: 0.5, actual: 1.5\nstack traceback:\n\t/tmp/tmpn6ic3erv.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9agu0k70.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmp9agu0k70.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp9agu0k70.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9agu0k70.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmp9agu0k70.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp9agu0k70.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, value in pairs(numbers) do\n    sum\
    \ = sum + math.abs(value - math.mean(numbers))\n    count = count + 1\n  end\n\
    \  return sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmer6sguf.lua:12:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpmer6sguf.lua:12:\
    \ in function 'candidate'\n\t/tmp/tmpmer6sguf.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in ipairs(numbers) do\n    sum = sum + math.abs(x\
    \ - math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwl83s7b0.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpwl83s7b0.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpwl83s7b0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean\n  if #numbers == 0 then\n    return 0\n  elseif #numbers == 1 then\n\
    \    mean = numbers[1]\n  else\n    local sum = 0\n    for _, value in ipairs(numbers)\
    \ do\n      sum = sum + value\n    end\n    mean = sum / #numbers\n  end\n  local\
    \ deviation = 0\n  for _, value in ipairs(numbers) do\n    deviation = deviation\
    \ + (value - mean)\n  end\n  return deviation / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0fto0p69.lua:31:\
    \ expected: 0.5, actual: 0\nstack traceback:\n\t/tmp/tmp0fto0p69.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + math.abs(x -\
    \ math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplquxw3kp.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmplquxw3kp.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmplquxw3kp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + math.abs(x -\
    \ math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplquxw3kp.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmplquxw3kp.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmplquxw3kp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean\n  if #numbers == 0 then\n    return 0\n  elseif #numbers == 1 then\n\
    \    return numbers[1] - numbers[1]\n  else\n    local sum = 0\n    for _, v in\
    \ ipairs(numbers) do\n      sum = sum + v\n    end\n    mean = sum / #numbers\n\
    \    return #numbers - 1 -- subtract 1 since we already counted the mean\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21sn5_v9.lua:27:\
    \ expected: 0.5, actual: 1\nstack traceback:\n\t/tmp/tmp21sn5_v9.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9agu0k70.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmp9agu0k70.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp9agu0k70.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + math.abs(x -\
    \ math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplquxw3kp.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmplquxw3kp.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmplquxw3kp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, x in ipairs(numbers) do\n    sum\
    \ = sum + x\n    count = count + 1\n  end\n  return math.abs(sum / count)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk03d1ioi.lua:21:\
    \ expected: 0.5, actual: 1.5\nstack traceback:\n\t/tmp/tmpk03d1ioi.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + math.abs(x -\
    \ math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplquxw3kp.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmplquxw3kp.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmplquxw3kp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi54hz741.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmpi54hz741.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpi54hz741.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in ipairs(numbers) do\n    sum = sum + math.abs(x\
    \ - math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwl83s7b0.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpwl83s7b0.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpwl83s7b0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + math.abs(x -\
    \ math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplquxw3kp.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmplquxw3kp.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmplquxw3kp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9agu0k70.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmp9agu0k70.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp9agu0k70.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in ipairs(numbers) do\n    sum = sum + math.abs(x\
    \ - math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwl83s7b0.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpwl83s7b0.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpwl83s7b0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + math.abs(x -\
    \ math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplquxw3kp.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmplquxw3kp.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmplquxw3kp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(value))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppmtmt29s.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmppmtmt29s.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmppmtmt29s.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in ipairs(numbers) do\n    sum = sum + math.abs(x\
    \ - math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwl83s7b0.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpwl83s7b0.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpwl83s7b0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, value in pairs(numbers) do\n    sum\
    \ = sum + value\n    count = count + 1\n  end\n  return sum / count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2uikrwt.lua:21:\
    \ expected: 0.5, actual: 1.5\nstack traceback:\n\t/tmp/tmpf2uikrwt.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in ipairs(numbers) do\n    sum = sum + math.abs(x\
    \ - math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwl83s7b0.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpwl83s7b0.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpwl83s7b0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, x in pairs(numbers) do\n    sum = sum + math.abs(x -\
    \ math.mean(x))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplquxw3kp.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmplquxw3kp.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmplquxw3kp.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9agu0k70.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmp9agu0k70.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp9agu0k70.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_uppiy.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp_g_uppiy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp_g_uppiy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750369
- exit_code: 1
  program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = 0\n  local deviation = 0\n  for _, value in ipairs(numbers) do\n\
    \    local diff = value - mean\n    deviation = deviation + diff * diff\n    mean\
    \ = mean + value\n  end\n  return deviation / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp535so4f_.lua:22:\
    \ expected: 0.5, actual: 1\nstack traceback:\n\t/tmp/tmp535so4f_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750369
