name: HumanEval_2_truncate_number
language: lua
prompt: "-- Given a positive floating point number, it can be decomposed into\n--\
  \ and integer part (largest integer smaller than given number) and decimals\n--\
  \ (leftover part always smaller than 1).\n-- Return the decimal part of the number.\n\
  -- >>> truncate_number(3.5)\n-- 0.5\nlocal function truncate_number(number)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = truncate_number\n\
  \    lu.assertEquals(candidate(3.5), 0.5)\n    lu.assertEquals(candidate(1.25),\
  \ 0.25)\n    lu.assertEquals(candidate(123.0), 0.0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local decimals = math.floor(math.log10(number))\n  local integer_part\
    \ = math.trunc(number)\n  local decimal_part = number - integer_part\n  return\
    \ decimal_part / 10^decimals, integer_part, decimals\nend", "  local integer_part,\
    \ decimals = math.modf(number)\n  return integer_part * math.pow(10, math.floor(decimals))\n\
    end", "  local decimals = math.floor(math.log(number, 10) + 1)\n  local integer_part\
    \ = math.trunc(number)\n  return integer_part / 10^decimals, integer_part % 10^decimals\n\
    end", "  local decimals = math.floor(math.log(number, 10) + 1)\n  return math.modf(number\
    \ * 10^decimals)[1]\nend", "  local decimals = math.floor(math.log(number, 10)\
    \ + 1)\n  return math.floor(number / 10^decimals) / 10^decimals\nend", "  local\
    \ decimals = math.floor(math.log(number, 10))\n  local integer_part = math.trunc(number)\n\
    \  return integer_part / 10^decimals, integer_part % 10^decimals\nend", "  local\
    \ decimals = math.floor(math.log(number, 10) + 1)\n  return math.floor(number\
    \ / 10^decimals) / 10^decimals\nend", "  local decimal_part = math.floor(number)\n\
    \  local integer_part = math.trunc(number)\n  local remainder = number - integer_part\n\
    \  return decimal_part + remainder\nend", "  local integer_part = math.floor(number)\n\
    \  local decimal_part = math.modf(number - integer_part)[1]\n  return integer_part\
    \ + decimal_part\nend", "  if number < 0 then\n    return nil\n  end\n  local\
    \ decimals = math.floor(math.log(number) / math.log(10) + 1)\n  return math.floor(number\
    \ * 10^decimals) / 10^decimals\nend", "  local decimal_part = math.floor(number)\n\
    \  local integer_part = math.trunc(number)\n  return decimal_part + (integer_part\
    \ - decimal_part) / math.pow(10, math.floor(math.log(number, 10)))\nend", "  local\
    \ integer_part, decimal_part = math.modf(number)\n  return decimal_part * 100\n\
    end", "  if number < 1 then\n    return 0\n  end\n  local factor = 1\n  local\
    \ decimal_part = 1\n  local integer_part = 1\n  local decimal_part_remainder\n\
    \  local integer_part_remainder\n  while number > 1 do\n    decimal_part_remainder\
    \ = math.modf(number)\n    integer_part_remainder = math.modf(integer_part)\n\
    \    factor = math.floor(decimal_part_remainder[1])\n    decimal_part = decimal_part_remainder[2]\n\
    \    integer_part = integer_part_remainder[1]\n    number = number * factor\n\
    \  end\n  return decimal_part\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  local integer_part = math.trunc(number)\n  local fraction = number\
    \ - integer_part\n  return integer_part, decimals, fraction\nend", "  local integer_part,\
    \ decimals = math.modf(number)\n  return integer_part * math.pow(10, math.floor(decimals))\n\
    end", "  local decimal_part = math.floor(number)\n  local integer_part = math.trunc(number)\n\
    \  return decimal_part + (integer_part - decimal_part) / math.pow(10, math.floor(math.log(number,\
    \ 10)))\nend", "    local decimals = math.floor(math.log(number, 10) + 1)\n  \
    \  return math.floor(number / 10^decimals) / 10^decimals\nend", "  local sign\
    \ = math.sign( number )\n  local integer = math.floor( number )\n  local decimals\
    \ = math.abs( number - integer )\n  local fraction = decimal / 10\n  local remainder\
    \ = decimal % 10\n  return sign * integer + fraction + remainder\nend", "  if\
    \ number < 0 then\n    return 0\n  end\n  local integer_part = math.floor(number)\n\
    \  local decimal_part = math.modf(number - integer_part)[1]\n  return integer_part\
    \ + decimal_part\nend", "  local decimals = math.floor(math.log10(number))\n \
    \ local integer_part = math.pow(10, decimals)\n  local trunc_part = number - integer_part\n\
    \  return trunc_part / integer_part\nend", "  if number < 1 then\n    return number\n\
    \  end\n  local integer_part = math.floor(number)\n  local decimal_part = math.modf(number\
    \ - integer_part)[1]\n  return integer_part + decimal_part\nend", "  local decimals\
    \ = math.floor(math.log10(number))\n  local integer_part = math.pow(10, decimals)\n\
    \  local trunc_part = number - integer_part\n  return trunc_part / integer_part\n\
    end", "  local decimals = math.floor(math.log(number, 10))\n  local integer_part\
    \ = math.trunc(number)\n  local truncate_part = number - integer_part\n  local\
    \ result = integer_part\n  if decimals > 0 then\n    result = result + truncate_part\
    \ / 10^decimals\n  end\n  return result\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.floor(number / 10^decimals) / 10^decimals\nend", " \
    \ local sign = math.sign(number)\n  local int_part = math.floor(number)\n  local\
    \ decimal_part = math.modf(number - int_part)[1]\n  if decimal_part == 0 then\n\
    \    return int_part\n  else\n    return int_part + decimal_part * math.pow(10,\
    \ math.ceil(math.log(decimal_part) / math.log(10)))\n  end\nend", "  local decimals\
    \ = math.floor(math.log(number, 10))\n  local integer_part = math.trunc(number)\n\
    \  local fraction = number - integer_part\n  return integer_part + (fraction /\
    \ 10^decimals)\nend", "  local decimals = math.floor(math.log(number, 10) + 1)\n\
    \  return math.floor(number * 10^decimals) / 10^decimals\nend", "    local integer_part,\
    \ decimals = math.modf(number)\n    return integer_part * math.pow(10, decimals)\n\
    end", "  local decimals = math.floor(math.log(number, 10) + 1)\n  return math.floor(number\
    \ / 10^decimals) / 10^decimals\nend", "  local decimal_part = math.floor(number)\n\
    \  local integer_part = math.trunc(number)\n  return decimal_part + (integer_part\
    \ - decimal_part) / math.pow(10, math.floor(math.log(number, 10)))\nend", "  local\
    \ decimal_part = math.floor(number)\n  local integer_part = math.trunc(number)\n\
    \  local remainder = number - integer_part\n  if remainder < 1 then\n    return\
    \ decimal_part\n  else\n    return decimal_part + remainder\n  end\nend", "  if\
    \ number < 1 then\n    return 0\n  end\n  local decimals = math.floor(math.log(number)\
    \ / math.log(10))\n  return math.floor(number * 10^decimals) / 10^decimals\nend",
  "  local decimals = math.floor(math.log(number, 10) + 1)\n  return math.floor(number\
    \ / 10^decimals) / 10^decimals\nend", "  local factor = 1\n  local decimals =\
    \ 0\n  while number >= factor do\n    factor = factor * 10\n    decimals = decimals\
    \ + 1\n  end\n  return math.floor(number / factor), decimals\nend", "  local integer_part,\
    \ decimals = math.modf(number)\n  return integer_part * math.pow(10, math.floor(decimals))\n\
    end", "  local integer_part, decimal_part = math.modf(number)\n  return decimal_part\
    \ * 100\nend", "  local decimal_part = math.floor(number)\n  local integer_part\
    \ = math.trunc(number)\n  return decimal_part + (integer_part - decimal_part)\
    \ / math.pow(10, math.floor(math.log(number, 10)))\nend", "  if number < 1 then\n\
    \    return number\n  end\n  local integer_part = math.floor(number)\n  local\
    \ decimal_part = math.modf(number - integer_part)[1]\n  return integer_part +\
    \ decimal_part\nend", "  local decimal_part = math.floor(number)\n  local integer_part\
    \ = math.trunc(number)\n  return decimal_part + (integer_part - decimal_part)\
    \ / math.pow(10, math.floor(math.log(number, 10)))\nend", "  local decimals =\
    \ math.floor(math.log(number, 10) + 1)\n  return math.floor(number / 10^decimals)\
    \ / 10^decimals\nend", "  local decimals = math.floor(math.log10(number))\n  local\
    \ integer_part = math.trunc(number)\n  local fraction = number - integer_part\n\
    \  return integer_part + (fraction / 10^decimals)\nend", "  local decimals = math.floor(math.log(number)\
    \ / math.log(10) + 1)\n  return math.floor(number / 10^decimals) / 10^decimals\n\
    end", "  local decimals = math.floor(math.log(number, 10) + 1)\n  local integer_part\
    \ = math.trunc(number)\n  return integer_part / 10^decimals, integer_part % 10^decimals\n\
    end", "  local decimal_part = math.floor(number)\n  local integer_part = math.trunc(number)\n\
    \  return decimal_part + (integer_part - decimal_part) / math.pow(10, math.floor(math.log(number,\
    \ 10)))\nend", "  local decimals = math.floor(math.log(number, 10) + 1)\n  local\
    \ integer_part = math.trunc(number)\n  local decimal_part = number - integer_part\n\
    \  return decimal_part / 10^decimals\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.floor(number / 10^decimals) / 10^decimals\nend", " \
    \ local integer_part, decimal_part = math.modf(number)\n  return decimal_part\
    \ * 100\nend", "  local decimals = math.floor(math.log(number, 10) + 1)\n  local\
    \ integer_part = math.trunc(number)\n  return integer_part / 10^decimals, integer_part\
    \ % 10^decimals\nend", "  local decimals = math.floor(math.log(number, 10))\n\
    \  local integer_part = math.trunc(number)\n  return integer_part / 10^decimals,\
    \ decimals\nend", "  local decimals = math.floor(math.log(number, 10) + 1)\n \
    \ return math.floor(number / 10^decimals) / 10^decimals\nend", "  local decimal_part\
    \ = math.floor(number)\n  local integer_part = math.trunc(number)\n  local remainder\
    \ = number - integer_part\n  return decimal_part + (remainder / 10)\nend", " \
    \ local decimals = math.floor(math.log(number, 10) + 1)\n  return math.floor(number\
    \ * 10^decimals) / 10^decimals\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  local integer_part = math.trunc(number)\n  return integer_part /\
    \ 10^decimals, integer_part % 10^decimals\nend", "  local integer_part, decimals\
    \ = math.modf(number)\n  return integer_part * 10^decimals\nend", "  local decimal_part\
    \ = math.floor(number)\n  local integer_part = math.floor(number - decimal_part)\n\
    \  if integer_part == 0 then\n    return decimal_part\n  else\n    return decimal_part\
    \ + integer_part\n  end\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  local integer_part = math.trunc(number)\n  return integer_part /\
    \ 10^decimals, integer_part % 10^decimals\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.floor(number / 10^decimals) / 10^decimals\nend", " \
    \ local factor = 1\n  local decimal_part = number\n  while decimal_part > 1 do\n\
    \    decimal_part = math.floor(decimal_part / 10)\n    factor = factor * 10\n\
    \  end\n  return decimal_part / factor\nend", "    local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n    local integer_part = math.trunc(number)\n    return integer_part\
    \ / 10^decimals, integer_part % 10^decimals\nend", "  local sign = math.sign(number)\n\
    \  local factor = 1\n  local decimals = 0\n  while number >= 1 do\n    number\
    \ = math.floor(number / 10)\n    factor = factor * 10\n    decimals = decimals\
    \ + 1\n  end\n  return sign * factor * (10^decimals)\nend", "  local decimals\
    \ = math.floor(math.log(number, 10) + 1)\n  return math.floor(number / 10^decimals)\
    \ / 10^decimals\nend", "  local decimals = math.floor(math.log10(number))\n  local\
    \ integer_part = math.pow(10, decimals)\n  local trunc_number = number * integer_part\n\
    \  return trunc_number / integer_part\nend", "  local decimals = math.floor(math.log10(number))\n\
    \  local integer = math.trunc(number)\n  return integer / 10^decimals\nend", " \
    \ local decimals = math.floor(math.log10(number))\n  local integer_part = math.pow(10,\
    \ decimals)\n  local trunc_part = math.floor(number / integer_part) * integer_part\n\
    \  return trunc_part / integer_part\nend", "  local integer_part, decimal_part\
    \ = math.modf(number)\n  return decimal_part * math.pow(10, math.floor(math.log(decimal_part)\
    \ / math.log(10)))\nend", "  local factor = 1\n  local decimals = 0\n  while number\
    \ >= factor do\n    number = number / factor\n    factor = factor * 10\n    decimals\
    \ = decimals + 1\n  end\n  return number, decimals\nend", "    local integer_part,\
    \ decimals = math.modf(number)\n    return integer_part * math.pow(10, decimals)\n\
    end", "  local decimals = math.floor(math.log(number, 10) + 1)\n  return math.modf(number\
    \ * 10^decimals)[1]\nend", "  local factor = 1\n  local decimal_part = number\n\
    \  while decimal_part > 1 do\n    decimal_part = decimal_part / factor\n    factor\
    \ = factor * 10\n  end\n  return decimal_part\nend", "  local decimals = math.floor(math.log10(number))\n\
    \  local integer_part = math.trunc(number)\n  local remainder = number - integer_part\n\
    \  return integer_part + remainder * 10^decimals\nend", "  local decimals = math.floor(math.log10(number))\n\
    \  local integer_part = math.pow(10, decimals)\n  return math.floor(number / integer_part)\
    \ * integer_part\nend", "  local sign = math.sign(number)\n  local decimals =\
    \ math.floor(math.log(abs(number), 10))\n  local integer = math.trunc(number)\n\
    \  local result = sign * integer\n  if decimals > 0 then\n    result = result\
    \ + decimals - 1\n  end\n  return result\nend", "  local decimal_part = math.floor(number)\n\
    \  local integer_part = math.trunc(number)\n  local remainder = number - integer_part\n\
    \  return decimal_part + remainder\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  local integer_part = math.trunc(number)\n  return integer_part /\
    \ 10^decimals, integer_part % 10^decimals\nend", "  local decimals = math.floor(math.log(number)\
    \ / math.log(10))\n  return math.pow(10, decimals)\nend", "  local decimals =\
    \ math.floor(math.log(number, 10) + 1)\n  local integer_part = math.trunc(number)\n\
    \  local fraction = number - integer_part\n  return integer_part, decimals, fraction\n\
    end", "  local decimal_part = math.floor(number)\n  local integer_part = math.trunc(number)\n\
    \  local result = integer_part\n  if decimal_part > 0 then\n    result = result\
    \ + decimal_part - 1\n  end\n  return result\nend", "  local integer_part, decimals\
    \ = math.modf(number)\n  return integer_part * tonumber(string.format(\"%.1f\"\
    , decimals))\nend", "  local decimals = math.floor(math.log(number, 10))\n  local\
    \ integer_part = math.trunc(number)\n  local fraction = number - integer_part\n\
    \  return integer_part, decimals, fraction\nend", "  local integer_part, decimals\
    \ = math.modf(number)\n  return integer_part * math.pow(10, math.floor(decimals))\n\
    end", "  local decimals = math.floor(math.log(number, 10) + 1)\n  return math.modf(number\
    \ * 10^decimals)[1]\nend", "  if number < 0 then\n    error(\"number must be positive\"\
    )\n  end\n  local integer_part, decimal_part = math.modf(number)\n  if decimal_part\
    \ < 1 then\n    error(\"decimal part must be positive\")\n  end\n  return decimal_part\n\
    end", "  local integer_part = math.floor(number)\n  local fractional_part = math.modf(number\
    \ - integer_part)[1]\n  if fractional_part == 0 then\n    return integer_part\n\
    \  else\n    return integer_part + fractional_part\n  end\nend", "  local decimals\
    \ = math.floor(math.log(number) / math.log(10))\n  return math.floor(number *\
    \ 10^decimals) / 10^decimals\nend", "  local integer_part, decimal_part = math.modf(number)\n\
    \  return decimal_part * math.pow(10, math.floor(math.log(decimal_part) / math.log(10)))\n\
    end", "  local decimals = math.floor(math.log(number, 10) + 1)\n  return math.floor(number\
    \ * 10^decimals) / 10^decimals\nend", "  local decimal_part = math.floor(number)\n\
    \  local integer_part = math.trunc(number)\n  local remainder = number - integer_part\n\
    \  if remainder < 1 then\n    return decimal_part\n  else\n    return decimal_part\
    \ + math.modf(remainder)[1]\n  end\nend", "  if number < 1 then\n    return number\n\
    \  end\n  local decimals = math.floor(math.log(number) / math.log(10))\n  local\
    \ integer_part = math.trunc(number)\n  return integer_part * 10^decimals\nend",
  "  local decimals = math.floor(math.log10(number))\n  local integer_part = math.pow(10,\
    \ decimals)\n  local fractional_part = number - integer_part\n  return integer_part,\
    \ fractional_part\nend", "  local decimals = math.floor(math.log(number, 10) +\
    \ 1)\n  return math.floor(number * 10^decimals) / 10^decimals\nend", "  local\
    \ decimals = math.floor(math.log(number, 10) + 1)\n  return math.floor(number\
    \ / 10^decimals) / 10^decimals\nend", "  local decimals = math.floor(math.log(number,\
    \ 10))\n  local integer_part = math.trunc(number)\n  return integer_part / 10^decimals,\
    \ integer_part % 10^decimals\nend", "  if number < 1 then\n    return 0\n  end\n\
    \  local integer_part = math.floor(number)\n  local decimal_part = number - integer_part\n\
    \  local decimal_part_is_negative = decimal_part < 0\n  local decimal_part_is_zero\
    \ = decimal_part == 0\n  local decimal_part_is_positive = decimal_part > 0\n \
    \ local decimal_part_is_integer = decimal_part_is_positive or decimal_part_is_negative\n\
    \  local decimal_part_is_fractional = decimal_part_is_integer and decimal_part_is_zero\n\
    \  if decimal_part_is_fractional then\n    return 0\n  end\n  local decimal_part_is_negative\
    \ = decimal_part_is_negative or decimal_part_is_fractional\n  local decimal_part_is_zero\
    \ = decimal_part_is_zero or decimal_part_is_negative\n  local decimal_part_is_positive\
    \ = decimal_part_is_positive or decimal_part_is_fractional\n  local decimal_part_is_integer\
    \ = decimal_part_is_integer or decimal_part_is_negative\n  local decimal_part_is_fractional\
    \ = decimal_part_is_fractional or decimal_part_is_zero\n  if decimal_part_is_negative\
    \ then\n    return integer_part - math.abs(decimal_part)\n  end\n  if decimal_part_is_zero\
    \ then\n    return integer_part\n  end\n  if decimal_part_is_positive then\n \
    \   return integer_part + math.abs(decimal_part)\n  end\n  if decimal_part_is_integer\
    \ then\n    return integer_part\n  end\n  if decimal_part_is_fractional then\n\
    \    return integer_part + math.floor(decimal_part * 10 / math.pow(10, math.floor(math.log(decimal_part)\
    \ / math.log(10))))\n  end\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.floor(number / 10^decimals) / 10^decimals\nend", " \
    \ local decimals = math.floor(math.log(number, 10) + 1)\n  return math.floor(number\
    \ / 10^decimals) / 10^decimals\nend", "  local decimals = math.floor(math.log(number,\
    \ 10))\n  local integer_part = math.trunc(number)\n  return integer_part / 10^decimals,\
    \ decimals\nend", "  local factor = 1\n  local decimal_part = 1\n  local integer_part\
    \ = 1\n  local remainder = 1\n  while number > 0 do\n    factor = factor * 10\n\
    \    decimal_part = decimal_part + 1\n    number = number / factor\n    integer_part\
    \ = integer_part * 10 + factor\n    remainder = number\n  end\n  return decimal_part\
    \ + remainder\nend", "    local decimal_part = math.modf(number)[1]\n    local\
    \ integer_part = math.floor(number)\n    return integer_part + decimal_part\n\
    end", "  local decimal_part = math.floor(number)\n  local integer_part = math.trunc(number)\n\
    \  local remainder = number - integer_part\n  return decimal_part + remainder\n\
    end", "  local integer_part, decimal_part = math.modf(number)\n  return decimal_part\
    \ * tonumber(integer_part)\nend", "    local decimals = math.floor(math.log(number,\
    \ 10))\n    local integer_part = math.trunc(number)\n    local trunc_part = number\
    \ - integer_part\n    local decimal_part = math.trunc(trunc_part * 10^decimals)\n\
    \    return decimal_part\nend", "  local decimals = math.floor(math.log(number,\
    \ 10))\n  local integer_part = math.trunc(number)\n  local decimal_part = number\
    \ - integer_part\n  return decimal_part / 10^decimals, integer_part, decimals\n\
    end", "  local factor = 1\n  local decimal_part = number\n  local decimal_part_is_negative\
    \ = false\n  while decimal_part_is_negative == false do\n    factor = factor *\
    \ 10\n    decimal_part = decimal_part / factor\n    decimal_part_is_negative =\
    \ decimal_part < 0\n  end\n  return decimal_part\nend", "  if number < 1 then\n\
    \    return number\n  end\n  local integer_part = math.floor(number)\n  local\
    \ decimal_part = math.modf(number - integer_part)[1]\n  return integer_part +\
    \ decimal_part\nend", "  local decimals = math.floor(math.log(number, 10))\n \
    \ local integer_part = math.trunc(number)\n  return integer_part + (decimals -\
    \ math.floor(decimals))\nend", "  local decimals = math.floor(math.log10(number))\n\
    \  return math.pow(10, decimals - 1) * (number / math.pow(10, decimals))\nend",
  "  local decimals = math.floor(math.log(number, 10) + 1)\n  return math.floor(number\
    \ / 10^decimals) / 10^decimals\nend", "  local decimals = math.floor(math.log10(number))\n\
    \  local integer_part = math.pow(10, decimals)\n  return math.floor(number / integer_part)\
    \ * integer_part\nend", "  local decimals = math.floor(math.log10(number))\n \
    \ return math.pow(10, -decimals)\nend", "  local decimals = math.floor(math.log10(number))\n\
    \  local integer_part = math.trunc(number)\n  return integer_part * 10^decimals\n\
    end", "  local decimals = math.floor(math.log(number, 10) + 1)\n  return math.floor(number\
    \ * 10^decimals) / 10^decimals\nend", "    local factor = 1\n    local decimal_part\
    \ = 1\n    while number >= factor do\n        factor = factor * 10\n        decimal_part\
    \ = decimal_part + 1\n    end\n    return number / factor, decimal_part\nend",
  "  local decimals = math.floor(math.log(number) / math.log(10))\n  local integer_part\
    \ = math.trunc(number)\n  local fraction = number - integer_part\n  return integer_part,\
    \ decimals, fraction\nend", "  if number < 1 then\n    return 0\n  end\n  local\
    \ integer_part = math.floor(number)\n  local decimal_part = math.modf(number -\
    \ integer_part)[1]\n  return integer_part + decimal_part\nend", "  local decimals\
    \ = math.floor(math.log(number) / math.log(10))\n  return math.floor(number *\
    \ 10^decimals) / 10^decimals\nend", "  if number < 1 then\n    return 1\n  end\n\
    \  local _, decimals = math.modf(number)\n  return decimals\nend", "  local decimals\
    \ = math.floor(math.log(number, 10))\n  local integer_part = math.trunc(number)\n\
    \  local decimal_part = number - integer_part\n  return decimal_part / 10^decimals\n\
    end", "  local integer_part, decimals = math.modf(number)\n  return integer_part\
    \ * 10^decimals\nend", "  local integer_part, decimal_part = math.modf(number)\n\
    \  return decimal_part * math.pow(10, math.floor(math.log(decimal_part)))\nend",
  "  local factor = 1\n  local decimal_part = 1\n  local integer_part = math.floor(number)\n\
    \  while integer_part % factor ~= 0 do\n    factor = factor * 10\n    decimal_part\
    \ = decimal_part + 1\n  end\n  return math.floor(number / factor) / factor * decimal_part\n\
    end", "  local decimals = math.floor(math.log(number, 10))\n  local integer_part\
    \ = math.trunc(number)\n  return integer_part * 10^decimals\nend", "  local decimals\
    \ = math.floor(math.log(number, 10) + 1)\n  return math.floor(number / 10^decimals)\
    \ / 10^decimals\nend", "  local decimals = math.floor(math.log(number) / math.log(10))\n\
    \  local integer_part = math.trunc(number)\n  return integer_part * 10^decimals\n\
    end", "  local integer_part, decimal_part = math.modf(number)\n  return decimal_part\
    \ * 100\nend", "  local decimal_part = math.floor(number)\n  local integer_part\
    \ = math.trunc(number)\n  local remainder = number - integer_part\n  return decimal_part\
    \ + (remainder / 10)\nend", "  if number < 1 then\n    return number\n  end\n\
    \  local _, decimals = math.modf(number)\n  return math.floor(number):reverse():sub(1,\
    \ decimals)\nend", "  if number < 1 then\n    return 0\n  end\n  local integer_part,\
    \ decimals = math.modf(number)\n  return integer_part * 10^decimals\nend", " \
    \ local decimals = math.floor(math.log10(number))\n  local integer_part = math.pow(10,\
    \ decimals)\n  local fractional_part = number - integer_part\n  return integer_part,\
    \ fractional_part\nend", "  local decimals = math.floor(math.log(number, 10))\n\
    \  local integer_part = math.trunc(number)\n  local fraction = number - integer_part\n\
    \  return integer_part, decimals, fraction\nend", "  local integer_part, decimals\
    \ = math.modf(number)\n  return integer_part * math.pow(10, math.floor(decimals))\n\
    end", "  local decimals = math.floor(math.log(number, 10) + 1)\n  return math.modf(number\
    \ * 10^decimals)[1]\nend", "  local decimals = math.floor(math.log(number, 10)\
    \ + 1)\n  return math.floor(number * 10^decimals) / 10^decimals\nend", "  local\
    \ decimal_part = math.floor(number)\n  local integer_part = math.trunc(number)\n\
    \  if integer_part == number then\n    return decimal_part\n  else\n    return\
    \ number - decimal_part + 1\n  end\nend", "  local integer_part, decimal_part\
    \ = math.modf(number)\n  return decimal_part * tonumber(integer_part)\nend", " \
    \ local decimals = math.floor(math.log(number, 10) + 1)\n  return math.floor(number\
    \ / 10^decimals) / 10^decimals\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.floor(number / 10^decimals) / 10^decimals\nend", " \
    \ local decimal_part = math.floor(number)\n  local integer_part = math.trunc(number)\n\
    \  return decimal_part + (integer_part - decimal_part) / math.pow(10, math.floor(math.log(number,\
    \ 10)))\nend", "  local decimals = math.floor(math.log(number, 10) + 1)\n  return\
    \ math.floor(number / 10^decimals) / 10^decimals\nend", "  local integer_part\
    \ = math.floor(number)\n  local fractional_part = number - integer_part\n  local\
    \ decimal_part = math.trunc(fractional_part)\n  return decimal_part\nend", " \
    \ local decimals = math.floor(math.log(number, 10))\n  return math.floor(number\
    \ * 10^decimals) / 10^decimals\nend", "  local decimal_part = math.floor(number)\n\
    \  local integer_part = math.trunc(number)\n  return decimal_part + (integer_part\
    \ - decimal_part) / math.pow(10, math.floor(math.log(number, 10)))\nend", "  local\
    \ decimals = math.floor(math.log(number) / math.log(10))\n  return math.pow(10,\
    \ decimals)\nend", "  local decimals = math.floor(math.log10(number))\n  local\
    \ integer_part = math.pow(10, decimals)\n  local fractional_part = number - integer_part\n\
    \  return integer_part, fractional_part\nend", "  local decimal_part = math.floor(number)\n\
    \  local integer_part = math.trunc(number)\n  local remainder = number - integer_part\n\
    \  return decimal_part + remainder\nend", "  local decimals = math.floor(math.log10(number))\n\
    \  local integer_part = math.pow(10, decimals)\n  local trunc_part = number -\
    \ integer_part\n  return trunc_part / integer_part\nend", "  local decimal_part\
    \ = math.floor(number)\n  local integer_part = math.floor(number - decimal_part)\n\
    \  local fraction = number - decimal_part + integer_part\n  return decimal_part,\
    \ integer_part, fraction\nend", "    local integer_part, decimal_part = math.modf(number)\n\
    \    return decimal_part * 100\nend", "  local decimals = math.floor(math.log(number)\
    \ / math.log(10))\n  return math.pow(10, decimals)\nend", "  local decimals =\
    \ math.floor(math.log10(number))\n  return math.pow(10, decimals - 1) * (number\
    \ / math.pow(10, decimals - 1))\nend", "    local decimals = math.floor(math.log10(number))\n\
    \    local integer_part = math.trunc(number)\n    local trunc_part = number -\
    \ integer_part\n    return trunc_part / 10^decimals\nend", "  local decimals =\
    \ math.floor(math.log(number, 10))\n  local integer_part = math.trunc(number)\n\
    \  return integer_part * 10^decimals\nend", "  if number < 1 then\n    return\
    \ number\n  end\n  local integer_part, decimals = math.modf(number)\n  return\
    \ integer_part * math.pow(10, decimals)\nend", "  local decimal_part = math.floor(number)\n\
    \  local integer_part = math.trunc(number)\n  local remainder = number - integer_part\n\
    \  return decimal_part + remainder\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.floor(number * 10^decimals) / 10^decimals\nend", " \
    \ local integer_part, decimals = math.modf(number)\n  return integer_part * tonumber(string.format(\"\
    %.1f\", decimals))\nend", "  local factor = 1\n  local decimals = 0\n  local factor_is_integer\
    \ = false\n  local factor_is_fractional = false\n  local factor_is_negative =\
    \ false\n  local factor_is_zero = false\n  local factor_is_positive = false\n\
    \  local factor_is_negative = false\n  local factor_is_zero = false\n  local factor_is_positive\
    \ = false\n  local factor_is_negative = false\n  local factor_is_zero = false\n\
    \  local factor_is_positive = false\n  local factor_is_negative = false\n  local\
    \ factor_is_zero = false\n  local factor_is_positive = false\n  local factor_is_negative\
    \ = false\n  local factor_is_zero = false\n  local factor_is_positive = false\n\
    \  local factor_is_negative = false\n  local factor_is_zero = false\n  local factor_is_positive\
    \ = false\n  local factor_is_negative = false\n  local factor_is_zero = false\n\
    \  local factor_is_positive = false\n  local factor_is_negative = false\n  local\
    \ factor_is_zero = false\n  local factor_is_positive = false\n  local factor_is_negative\
    \ = false\n  local factor_is_zero = false\n  local factor_is_positive = false\n\
    \  local factor_is_negative = false\n  local factor_is_zero = false\n  local factor_is_positive\
    \ = false\n  local factor_is_negative = false\n  local factor_is_zero = false\n\
    \  local factor_is_positive = false\n  local factor_is_negative = false\n  local\
    \ factor_is_zero = false\n  local factor_is_positive = false\n  local factor_is_negative\
    \ = false\n  local factor_is_zero = false\n  local factor_is_positive = false\n\
    \  local factor_is_negative = false\n  local factor_is_zero = false\n  local factor_is_positive\
    \ = false\n  local factor_is_negative = false\n  local factor_is_zero = false\n\
    \  local factor_is_positive = false\n  local factor_is_negative = false\n  local\
    \ factor_is_zero = false\n  local factor_is_positive = false\n  local factor_is_negative\
    \ = false\n  local factor_is_zero = false\n  local factor_is_positive = false\n\
    \  local factor_is_negative = false\n  local factor_is_zero = false\n  local factor_is_positive\
    \ = false\n  local factor_is_negative = false\n  local factor_is_zero = false\n\
    \  local factor_is_positive = false\n  local factor_is_negative = false\n  local\
    \ factor_is_zero = false\n  local factor_is_positive = false\n  local factor_is_negative\
    \ = false\n  local factor_is_zero = false\n  local factor_is_positive = false\n\
    \  local factor_is_negative = false\n  local factor_is_zero = false\n  local factor_is_positive\
    \ = false\n  local factor_is_negative = false\n  local factor_is_zero = false\n\
    \  local factor_is_positive = false\n  local factor", "  local decimals = math.floor(math.log10(number))\n\
    \  local integer_part = math.pow(10, decimals)\n  local decimal_part = number\
    \ - integer_part\n  return decimal_part\nend", "  local decimal_part = math.floor(number)\n\
    \  local integer_part = math.trunc(number)\n  local result = integer_part\n  if\
    \ decimal_part > 0 then\n    result = result + decimal_part / 10\n  end\n  return\
    \ result\nend", "  if number < 1 then\n    return number\n  end\n  local decimals\
    \ = math.floor(math.log(number) / math.log(10) + 1)\n  return math.floor(number\
    \ / 10^decimals) / 10^decimals\nend", "  if number < 1 then\n    return number\n\
    \  end\n  local integer_part = math.floor(number)\n  local decimal_part = math.modf(number\
    \ - integer_part)[1]\n  return integer_part + decimal_part\nend", "  local decimals\
    \ = math.floor(math.log(number, 10) + 1)\n  local integer_part = math.trunc(number)\n\
    \  local trunc_part = number - integer_part\n  return integer_part, trunc_part,\
    \ decimals\nend", "  local decimal_part = math.floor(number)\n  local integer_part\
    \ = math.trunc(number)\n  local remainder = number - integer_part\n  return decimal_part\
    \ + remainder\nend", "  local decimals = math.floor(math.log(number, 10) + 1)\n\
    \  local integer_part = math.trunc(number)\n  local fraction = number - integer_part\n\
    \  return integer_part + (fraction / 10^decimals)\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.floor(number / 10^decimals) / 10^decimals\nend", " \
    \ local decimals = math.floor(math.log(number, 10))\n  local integer_part = math.trunc(number)\n\
    \  local fractional_part = number - integer_part\n  return integer_part, fractional_part,\
    \ decimals\nend", "  local integer_part, decimal_part = math.modf(number)\n  return\
    \ decimal_part * 100\nend", "    local factor = 1\n    local decimals = 0\n  \
    \  while number >= factor do\n        number = number / factor\n        decimals\
    \ = decimals + 1\n    end\n    return number, decimals\nend", "  local decimal_part\
    \ = math.modf(number)[1]\n  local integer_part = math.floor(number)\n  if integer_part\
    \ == number then\n    return integer_part\n  else\n    return integer_part + decimal_part\n\
    \  end\nend", "  if number < 1 then\n    return number\n  end\n  local _, decimals\
    \ = math.modf(number)\n  return math.floor(number):reverse():sub(1, decimals)\n\
    end", "  local decimals = math.floor(math.log(number, 10))\n  local integer_part\
    \ = math.trunc(number)\n  return integer_part * 10^decimals\nend", "  local decimal_part\
    \ = math.floor(number)\n  local integer_part = math.floor(number - decimal_part)\n\
    \  local leftover_part = number - decimal_part + integer_part\n  return decimal_part,\
    \ integer_part, leftover_part\nend", "  local decimals = math.floor(math.log(number)\
    \ / math.log(10))\n  return math.floor(number * 10^decimals) / 10^decimals\nend",
  "  local decimal_part = math.floor(number)\n  local integer_part = math.trunc(number)\n\
    \  local remainder = number - integer_part\n  return decimal_part + remainder\n\
    end", "  local decimal_part = math.floor(number)\n  local integer_part = math.trunc(number)\n\
    \  local remainder = number - integer_part\n  return decimal_part + remainder\n\
    end", "  if number < 1 then\n    return number\n  end\n  local integer_part =\
    \ math.floor(number)\n  local decimal_part = math.modf(number - integer_part)[1]\n\
    \  return integer_part + decimal_part\nend", "    local integer_part = math.floor(number)\n\
    \    local fraction = number - integer_part\n    local decimal_part = math.floor(fraction\
    \ * 10)\n    return decimal_part / 10\nend", "  local decimal_part = math.floor(number)\n\
    \  local integer_part = math.trunc(number)\n  return decimal_part + (integer_part\
    \ - decimal_part) / math.pow(10, math.floor(math.log(number, 10)))\nend", "  local\
    \ decimals = math.floor(math.log10(number))\n  local integer_part = math.pow(10,\
    \ decimals)\n  local trunc_part = number - integer_part\n  return trunc_part /\
    \ integer_part\nend", "  local decimal_part = math.floor(number)\n  local integer_part\
    \ = math.trunc(number)\n  if integer_part == number then\n    return decimal_part\n\
    \  else\n    return integer_part .. '.' .. decimal_part\n  end\nend", "  local\
    \ decimals = math.floor(math.log(number, 10) + 1)\n  local integer_part = math.trunc(number)\n\
    \  return integer_part / 10^decimals, integer_part % 10^decimals\nend", "  local\
    \ decimals = math.floor(math.log(number, 10))\n  local integer_part = math.trunc(number)\n\
    \  return integer_part * 10^decimals\nend", "  local decimals = math.floor(math.log(number)\
    \ / math.log(10) + 1)\n  return math.floor(number * 10^decimals) / 10^decimals\n\
    end", "  local decimals = math.floor(math.log(number, 10))\n  return math.pow(10,\
    \ decimals - 1) * (number / math.pow(10, decimals))\nend", "  local factor = 1\n\
    \  local decimal_part = number\n  while decimal_part > 1 do\n    decimal_part\
    \ = math.floor(decimal_part / 10)\n    factor = factor * 10\n  end\n  return decimal_part\
    \ / factor\nend", "  local decimals = math.floor(math.log(number, 10) + 1)\n \
    \ local integer_part = math.trunc(number)\n  return integer_part * 10^decimals\
    \ - 10^decimals\nend", "  local decimals = math.floor(math.log(number, 10) + 1)\n\
    \  return math.floor(number / 10^decimals) / 10^decimals\nend", "  local decimals\
    \ = math.floor(math.log10(number))\n  local integer_part = math.trunc(number)\n\
    \  local trunc_part = number - integer_part\n  local result = {}\n  result.integer\
    \ = integer_part\n  result.decimals = decimals\n  result.trunc_part = trunc_part\n\
    \  return result\nend", "  local decimals = math.floor(math.log10(number))\n \
    \ local integer_part = math.trunc(number)\n  return integer_part * 10^decimals\n\
    end", "  local decimals = math.floor(math.log(number, 10) + 1)\n  return math.floor(number\
    \ * 10^decimals) / 10^decimals\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.floor(number / 10^decimals) / 10^decimals\nend", " \
    \ local integer_part, decimals = math.modf(number)\n  return integer_part * 10^decimals\n\
    end", "  local decimal_part = math.floor(number)\n  local integer_part = math.trunc(number)\n\
    \  local leftover_part = number - integer_part\n  return decimal_part + leftover_part\n\
    end", "  local factor = 1\n  local decimal_part = number\n  local integer_part\
    \ = number\n  while integer_part > 1 do\n    factor = factor * 10\n    decimal_part\
    \ = decimal_part / factor\n    integer_part = integer_part / factor\n  end\n \
    \ return decimal_part\nend", "  if number < 1 then\n    return number\n  end\n\
    \  local integer_part = math.floor(number)\n  local decimal_part = math.modf(number\
    \ - integer_part)[1]\n  return integer_part + decimal_part\nend", "  local decimal_part\
    \ = math.floor(number)\n  local integer_part = math.trunc(number)\n  return decimal_part\
    \ + (integer_part - decimal_part) / math.pow(10, math.floor(math.log(number, 10)))\n\
    end", "  local decimals = math.floor(math.log(number) / math.log(10) + 1)\n  return\
    \ math.floor(number / 10^decimals) / 10^decimals\nend", "    local decimal_part\
    \ = math.floor(number)\n    local integer_part = math.trunc(number)\n    local\
    \ remainder = number - integer_part\n    return decimal_part + remainder\nend",
  "  local decimals = math.floor(math.log(number, 10) + 1)\n  return math.floor(number\
    \ / 10^decimals) / 10^decimals\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.floor(number / 10^decimals) / 10^decimals\nend", " \
    \ local factor = 1\n  local decimals = 0\n  while number >= factor do\n    number\
    \ = number / factor\n    factor = factor * 10\n    decimals = decimals + 1\n \
    \ end\n  return number, decimals\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
