name: HumanEval_39_prime_fib
language: lua
prompt: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
  -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
  \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n  \
  \  lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n   \
  \ lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n  \
  \  lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
  \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10), 433494437)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n\
    \ == 3 then return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n \
    \ local i = 3\n  while i <= n do\n    local p = prime_fib(i - 1)\n    if p * p\
    \ > i then return i end\n    i = i + 2\n  end\n  return i\nend", "  local fib\
    \ = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4, n do\n    fib[i] = fib[i - 1]\
    \ + fib[i - 2]\n  end\n  return fib[n]\nend", "  local function f(n)\n    if n\
    \ == 1 then\n      return 1\n    end\n    if n == 2 then\n      return 2\n   \
    \ end\n    if n % 2 == 0 then\n      return f(n - 1) + f(n - 2)\n    end\n   \
    \ return f(n - 1) + f(n - 3)\n  end\n  return f(n)\nend", "  local fibs = {\n\
    \    [1] = 1,\n    [2] = 1,\n  }\n  for i = 2, n do\n    fibs[i] = fibs[i-1] +\
    \ fibs[i-2]\n  end\n  return fibs[n]\nend", "  local a = {}\n  local b = {}\n\
    \  local c = 0\n  local i = 1\n  while i <= n do\n    table.insert(a, i)\n   \
    \ table.insert(b, i)\n    i = i + 2\n  end\n  local j = 1\n  while j <= n do\n\
    \    if a[j] == b[j] then\n      c = c + a[j]\n      j = j + 1\n    else\n   \
    \   if a[j] > b[j] then\n        local k = a[j]\n        a[j] = b[j]\n       \
    \ b[j] = k\n      else\n        local k = b[j]\n        a[j] = b[j]\n        b[j]\
    \ = k\n      end\n    end\n  end\n  return c\nend", "  if n < 2 then return 1\
    \ end\n  if n == 2 then return 2 end\n  if n == 3 then return 3 end\n  if n %\
    \ 2 == 0 then return prime_fib(n / 2) end\n  local m = math.floor(math.sqrt(n))\n\
    \  if m == 1 then return n end\n  if m == 2 then return prime_fib(n - 1) + prime_fib(n\
    \ - 2) end\n  local a = prime_fib(n - 1)\n  local b = prime_fib(n - 2)\n  return\
    \ prime_fib(n + 1) + prime_fib(n + 2) + a * b\nend", "  if n < 2 then\n    return\
    \ 1\n  end\n  if n == 2 then\n    return 2\n  end\n  if n % 2 == 0 then\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2)\n  end\n  local i = 3\n  while i * i <=\
    \ n do\n    if n % i == 0 then\n      return prime_fib(n / i) + prime_fib(n /\
    \ i + 1)\n    end\n    i = i + 2\n  end\n  return n\nend", "  if n < 2 then return\
    \ 1 end\n  if n == 2 then return 1 end\n  if n == 3 then return 2 end\n  if n\
    \ % 2 == 0 then return prime_fib(n / 2) end\n  local a = prime_fib(n / 2)\n  local\
    \ b = prime_fib(n / 2)\n  local c = prime_fib(n / 2)\n  local d = prime_fib(n\
    \ / 2)\n  local e = 1\n  while e < n do\n    local f = prime_fib(n / 2)\n    a\
    \ = a + b\n    b = c + d\n    c = f + e\n    d = e + f\n    e = a + b\n  end\n\
    \  return a\nend", "  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4,\
    \ n do\n    fib[i] = fib[i - 1] + fib[i - 2]\n  end\n  return fib[n]\nend", " \
    \ if n < 2 then return n end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  if n % 3 ==\
    \ 0 then return prime_fib(n / 3) end\n  return prime_fib(3 * n + 2)\nend", " \
    \ if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n\
    \ / 2)\n  local fibs_4 = prime_fib(n / 2)\n  local fibs_5 = prime_fib(n / 2)\n\
    \  local fibs_6 = prime_fib(n / 2)\n  local fibs_7 = prime_fib(n / 2)\n  local\
    \ fibs_8 = prime_fib(n / 2)\n  local fibs_9 = prime_fib(n / 2)\n  local fibs_10\
    \ = prime_fib(n / 2)\n  local fibs_11 = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n\
    \ / 2)\n  local fibs_13 = prime_fib(n / 2)\n  local fibs_14 = prime_fib(n / 2)\n\
    \  local fibs_15 = prime_fib(n / 2)\n  local fibs_16 = prime_fib(n / 2)\n  local\
    \ fibs_17 = prime_fib(n / 2)\n  local fibs_18 = prime_fib(n / 2)\n  local fibs_19\
    \ = prime_fib(n / 2)\n  local fibs_20 = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n\
    \ / 2)\n  local fibs_22 = prime_fib(n / 2)\n  local fibs_23 = prime_fib(n / 2)\n\
    \  local fibs_24 = prime_fib(n / 2)\n  local fibs_25 = prime_fib(n / 2)\n  local\
    \ fibs_26 = prime_fib(n / 2)\n  local fibs_27 = prime_fib(n / 2)\n  local fibs_28\
    \ = prime_fib(n / 2)\n  local fibs_29 = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n\
    \ / 2)\n  local fibs_31 = prime_fib(n / 2)\n  local fibs_32 = prime_fib(n / 2)\n\
    \  local fibs_33 = prime_fib(n / 2)\n  local fibs_34 = prime_fib(n / 2)\n  local\
    \ fibs_35 = prime_fib(", "  if n < 2 then return n end\n  if n == 1 then return\
    \ 2 end\n  if n == 2 then return 3 end\n  if n % 2 == 0 then return prime_fib(n\
    \ / 2) end\n  local a = prime_fib(n / 2)\n  local b = prime_fib(n / 2)\n  local\
    \ c = prime_fib(n / 2)\n  local d = prime_fib(n / 2)\n  while d <= n do\n    local\
    \ tmp = a + b\n    a = b\n    b = tmp + c\n    c = d\n    d = tmp\n  end\n  return\
    \ d\nend", "  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4, n do\n\
    \    fib[i] = fib[i - 1] + fib[i - 2]\n  end\n  return fib[n]\nend", "  if n <\
    \ 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then return\
    \ 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local a = prime_fib(n\
    \ / 2)\n  local b = prime_fib(n / 2)\n  local c = prime_fib(n / 2)\n  local d\
    \ = prime_fib(n / 2)\n  local m = a\n  while m <= b do\n    if m % 2 == 0 then\n\
    \      m = m + 1\n    else\n      if m > c then\n        m = m + 1\n      else\n\
    \        if m > d then\n          m = m + 1\n        else\n          m = m + 2\n\
    \        end\n      end\n    end\n  end\n  return m\nend", "  if n < 2 then\n\
    \    return 1\n  elseif n < 3 then\n    return 2\n  elseif n % 2 == 0 then\n \
    \   return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 3)\n  end\nend", "  if n < 2 then\n    return 1\n  elseif\
    \ n < 3 then\n    return 2\n  elseif n % 2 == 0 then\n    return prime_fib(n -\
    \ 1) + prime_fib(n - 2)\n  else\n    return prime_fib(n - 1) + prime_fib(n - 3)\n\
    \  end\nend", "  -- base case\n  if n < 2 then\n    return 1\n  end", "  -- base\
    \ case\n  if n < 2 then\n    return 1\n  end", "  if n < 2 then return 1 end\n\
    \  if n == 2 then return 2 end\n  if n == 3 then return 3 end\n  if n % 2 == 0\
    \ then return prime_fib(n / 2) end\n  if n % 3 == 0 then return prime_fib(n /\
    \ 3) end\n  local fib_n = prime_fib(n / 2)\n  return fib_n + prime_fib(n / 3)\n\
    end", "  -- Base case\n  if n < 2 then return n end\n  -- Recursive case\n  if\
    \ n == 1 then return 2 end\n  -- Recursive case\n  if n == 2 then return 3 end\n\
    \  -- Recursive case\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  -- Recursive\
    \ case\n  return prime_fib(3 * n + 1) - 1 -- n is odd\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
