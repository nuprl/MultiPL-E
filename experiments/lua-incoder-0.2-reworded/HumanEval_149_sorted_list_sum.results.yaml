language: lua
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key_count =\
    \ 0\n  for i = 1, #lst do\n    local key = lst[i]\n    sorted_keys[#sorted_keys\
    \ + 1] = key\n    sorted_key_count = #sorted_keys\n  end\n  table.sort(sorted_keys,\
    \ function(a, b) return #a == #b end)\n  for i = 1, #sorted_keys do\n    sorted_lst[#sorted_lst\
    \ + 1] = sorted_keys[i]\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzq_3q4jh.lua:35:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpzq_3q4jh.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key\n  local\
    \ sorted_value\n  for _, value in ipairs(lst) do\n    sorted_key = value\n   \
    \ sorted_value = sorted_keys[sorted_key]\n    if sorted_value == nil then\n  \
    \    sorted_keys[sorted_key] = value\n    else\n      sorted_keys[sorted_key]\
    \ = sorted_value .. value\n    end\n  end\n  for sorted_key, sorted_value in pairs(sorted_keys)\
    \ do\n    table.insert(sorted_lst, sorted_value)\n  end\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ftfprbj.lua:39:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp2ftfprbj.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_vals = {}\n\
    \  for i = 1, #lst do\n    sorted_keys[#sorted_keys + 1] = lst[i]\n    sorted_vals[#sorted_vals\
    \ + 1] = lst[i]\n  end\n  table.sort(sorted_keys, function(a, b) return #a < #b\
    \ end)\n  table.sort(sorted_vals, function(a, b) return #a < #b end)\n  for i\
    \ = 1, #sorted_keys do\n    sorted_lst[#sorted_lst + 1] = sorted_keys[i]\n   \
    \ sorted_lst[#sorted_lst + 1] = sorted_vals[i]\n  end\n  return sorted_lst\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp54v138v4.lua:36:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"a\", \"aa\", \"aa\", \"aaa\", \"aaa\"\
    }\nstack traceback:\n\t/tmp/tmp54v138v4.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key_index =\
    \ 1\n  for i = 1, #lst do\n    local key = lst[i]\n    sorted_keys[sorted_key_index]\
    \ = key\n    sorted_lst[sorted_key_index] = key\n    sorted_key_index = sorted_key_index\
    \ + 1\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n \
    \ table.sort(sorted_keys, function(a, b) return #a < #b end)\n  for i = 1, #sorted_lst\
    \ do\n    sorted_lst[i] = sorted_keys[i - 1]\n  end\n  return sorted_lst\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ejvqp25.lua:37:\
    \ expected: {\"aa\"}\nactual: {2=\"a\", 3=\"aa\"}\nstack traceback:\n\t/tmp/tmp1ejvqp25.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_vals = {}\n\
    \  for _, v in pairs(lst) do\n    sorted_keys[#sorted_keys + 1] = v\n    sorted_vals[#sorted_vals\
    \ + 1] = v\n  end\n  table.sort(sorted_vals, function(a, b) return #a < #b end)\n\
    \  for _, v in pairs(sorted_vals) do\n    sorted_lst[#sorted_lst + 1] = sorted_keys[#sorted_keys\
    \ + 1]\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqdw5bt5.lua:34:\
    \ expected: {\"aa\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpeqdw5bt5.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst)\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmbcc0ku1.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpmbcc0ku1.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key = 0\n  for\
    \ i = 1, #lst do\n    local key = tostring(lst[i])\n    if sorted_keys[key] ~=\
    \ nil then\n      sorted_keys[#sorted_keys + 1] = key\n    else\n      sorted_keys[key]\
    \ = 1\n      sorted_lst[#sorted_lst + 1] = key\n    end\n  end\n  table.sort(sorted_lst,\
    \ function(a, b) return #a < #b end)\n  for i = 1, #sorted_lst do\n    sorted_keys[sorted_lst[i]]\
    \ = nil\n  end\n  return sorted_keys\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbp7kb9qj.lua:39:\
    \ expected: {\"aa\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpbp7kb9qj.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key = 0\n  local\
    \ i = 0\n  for k, v in pairs(lst) do\n    if sorted_keys[#sorted_keys + 1] ==\
    \ k then\n      sorted_keys[#sorted_keys + 1] = sorted_key + 1\n      sorted_lst[#sorted_lst\
    \ + 1] = v\n    else\n      sorted_keys[#sorted_keys + 1] = k\n      sorted_lst[#sorted_lst\
    \ + 1] = v\n      sorted_key = sorted_key + 1\n    end\n    i = i + 1\n  end\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6wba0ah.lua:38:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpg6wba0ah.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  for i = 1, #lst do\n    sorted_keys[#sorted_keys\
    \ + 1] = i\n  end\n  table.sort(sorted_keys, function(a, b) return string.len(lst[a])\
    \ < string.len(lst[b]) end)\n  for i = 1, #sorted_keys do\n    sorted_lst[sorted_keys[i]]\
    \ = lst[sorted_keys[i]]\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpunw2no_i.lua:32:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpunw2no_i.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[i] = lst[i]\n  end\n\
    \  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphu4oiajq.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmphu4oiajq.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key = 0\n  for\
    \ i = 1, #lst do\n    local key = tostring(lst[i])\n    if not sorted_keys[key]\
    \ then\n      sorted_keys[key] = sorted_key\n      sorted_lst[sorted_key] = lst[i]\n\
    \      sorted_key = sorted_key + 1\n    else\n      sorted_keys[key] = (sorted_keys[key]\
    \ + 1) % #sorted_lst\n    end\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwp0ca4_v.lua:36:\
    \ expected: {\"aa\"}\nactual: {0=\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t\
    /tmp/tmpwp0ca4_v.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst + 1]\
    \ = lst[i]\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9d14y3_7.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp9d14y3_7.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_list = { }\n  for i = 1, #lst do\n    local word = lst[i]\n   \
    \ local length = #word\n    if sorted_list[length] == nil then\n      sorted_list[length]\
    \ = word\n    else\n      table.insert(sorted_list, word)\n    end\n  end\n  table.sort(sorted_list)\n\
    \  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwi72j1ea.lua:34:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpwi72j1ea.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  for i = 1, #lst do\n    local\
    \ key = lst[i]\n    sorted_keys[#sorted_keys + 1] = key\n    sorted_lst[#sorted_lst\
    \ + 1] = key\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  table.sort(sorted_keys, function(a, b) return #a > #b end)\n  for i = 1, #sorted_lst\
    \ do\n    sorted_lst[i] = sorted_keys[i - 1]\n  end\n  return sorted_lst\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6lbylmja.lua:35:\
    \ expected: {\"aa\"}\nactual: {2=\"aaa\", 3=\"aa\"}\nstack traceback:\n\t/tmp/tmp6lbylmja.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key_count =\
    \ 0\n  for _, v in ipairs(lst) do\n    sorted_key_count = sorted_key_count + 1\n\
    \    sorted_keys[#sorted_keys + 1] = v\n  end\n  table.sort(sorted_keys, function(a,\
    \ b) return #a < #b end)\n  for _, v in ipairs(sorted_keys) do\n    sorted_lst[#sorted_lst\
    \ + 1] = v\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebfy0kq8.lua:34:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpebfy0kq8.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[i] = lst[i]\n  end\n\
    \  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphu4oiajq.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmphu4oiajq.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst + 1]\
    \ = lst[i]\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9d14y3_7.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp9d14y3_7.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_vals = {}\n\
    \  local sorted_key\n  local sorted_val\n  for _, v in pairs(lst) do\n    sorted_key\
    \ = v\n    sorted_val = sorted_keys[sorted_key]\n    if sorted_val == nil then\n\
    \      sorted_keys[sorted_key] = v\n      sorted_vals[v] = sorted_key\n    else\n\
    \      sorted_keys[sorted_key] = sorted_val..\", \"..v\n      sorted_vals[v] =\
    \ sorted_val\n    end\n  end\n  for sorted_key, sorted_val in pairs(sorted_keys)\
    \ do\n    sorted_lst[#sorted_lst+1] = sorted_val\n  end\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdd7gz2c_.lua:42:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpdd7gz2c_.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key = 0\n  for\
    \ i = 1, #lst do\n    local key = lst[i]\n    if not sorted_keys[key] then\n \
    \     sorted_keys[key] = sorted_key\n      sorted_lst[sorted_key] = key\n    \
    \  sorted_key = sorted_key + 1\n    end\n  end\n  for i = 1, #sorted_lst do\n\
    \    sorted_lst[sorted_keys[i]] = sorted_lst[i]\n  end\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphp64zl3d.lua:29:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmphp64zl3d.lua:29: in function\
    \ 'candidate'\n\t/tmp/tmphp64zl3d.lua:37: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_lst = {}\n    for _, v in ipairs(lst) do\n        table.insert(sorted_lst,\
    \ v)\n    end\n    table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \    return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpegl7jatz.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpegl7jatz.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_vals = {}\n\
    \  for i = 1, #lst do\n    local key = lst[i]\n    sorted_keys[#sorted_keys +\
    \ 1] = key\n    sorted_vals[#sorted_vals + 1] = lst[i]\n  end\n  table.sort(sorted_vals,\
    \ function(a, b) return #a == #b end)\n  for i = 1, #sorted_vals do\n    sorted_lst[#sorted_lst\
    \ + 1] = sorted_keys[i]\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmdceuofb.lua:35:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpmdceuofb.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  for i = 1, #lst do\n    sorted_keys[#sorted_keys\
    \ + 1] = lst[i]\n  end\n  table.sort(sorted_keys, function(a, b) return #a < #b\
    \ end)\n  for i = 1, #sorted_keys do\n    sorted_lst[#sorted_lst + 1] = sorted_keys[i]\n\
    \  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmx47ex4n.lua:32:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpmx47ex4n.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst+1] =\
    \ lst[i]\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu1_xp0x7.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpu1_xp0x7.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key = 0\n  for\
    \ i = 1, #lst do\n    local key = lst[i]\n    sorted_keys[#sorted_keys + 1] =\
    \ key\n    sorted_key = sorted_key + 1\n  end\n  table.sort(sorted_keys, function(a,\
    \ b) return #a == #b end)\n  for i = 1, #sorted_keys do\n    sorted_lst[sorted_keys[i]]\
    \ = lst[i]\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9rd0ar0m.lua:35:\
    \ expected: {\"aa\"}\nactual: {a=\"a\", aa=\"aa\", aaa=\"aaa\"}\nstack traceback:\n\
    \t/tmp/tmp9rd0ar0m.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  for i = 1, #lst do\n    local\
    \ key = lst[i]\n    sorted_keys[#sorted_keys + 1] = key\n    sorted_lst[#sorted_lst\
    \ + 1] = key\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  for i = 1, #sorted_lst do\n    sorted_lst[i] = sorted_keys[i - 1]\n  end\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6lqzluq.lua:34:\
    \ expected: {\"aa\"}\nactual: {2=\"aa\", 3=\"a\"}\nstack traceback:\n\t/tmp/tmpw6lqzluq.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_lst = {}\n    for _, v in ipairs(lst) do\n        table.insert(sorted_lst,\
    \ v)\n    end\n    table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \    return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpegl7jatz.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpegl7jatz.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst+1] =\
    \ lst[i]\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu1_xp0x7.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpu1_xp0x7.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key_count =\
    \ 0\n  local sorted_key_values = {}\n  for i = 1, #lst do\n    local key = lst[i]\n\
    \    local value = sorted_key_values[sorted_key_count]\n    sorted_key_values[sorted_key_count]\
    \ = key\n    sorted_key_count = sorted_key_count + 1\n    sorted_lst[#sorted_lst\
    \ + 1] = value\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b\
    \ end)\n  for i = 1, #sorted_lst do\n    sorted_keys[#sorted_keys + 1] = sorted_lst[i]\n\
    \  end\n  return sorted_keys\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpccz3dehb.lua:38:\
    \ expected: {\"aa\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpccz3dehb.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key_count =\
    \ 0\n  for i = 1, #lst do\n    local key = lst[i]\n    sorted_keys[sorted_key_count]\
    \ = key\n    sorted_key_count = sorted_key_count + 1\n  end\n  table.sort(sorted_keys,\
    \ function(a, b) return #a == #b end)\n  for i = 1, #sorted_keys do\n    sorted_lst[sorted_keys[i]]\
    \ = lst[i]\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprlid_avs.lua:35:\
    \ expected: {\"aa\"}\nactual: {a=\"aa\", aaa=\"a\"}\nstack traceback:\n\t/tmp/tmprlid_avs.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key = 0\n  for\
    \ i = 1, #lst do\n    local key = lst[i]\n    if not sorted_keys[key] then\n \
    \     sorted_keys[key] = sorted_key\n      sorted_lst[sorted_key] = key\n    \
    \  sorted_key = sorted_key + 1\n    end\n  end\n  for i = 1, #sorted_lst do\n\
    \    sorted_lst[sorted_keys[i]] = sorted_lst[i]\n  end\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphp64zl3d.lua:29:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmphp64zl3d.lua:29: in function\
    \ 'candidate'\n\t/tmp/tmphp64zl3d.lua:37: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_lst = {}\n    local sorted_keys = {}\n    local sorted_key =\
    \ 0\n    for i = 1, #lst do\n        local key = lst[i]\n        if sorted_keys[key]\
    \ == nil then\n            sorted_keys[key] = sorted_key\n            sorted_lst[sorted_key]\
    \ = key\n            sorted_key = sorted_key + 1\n        else\n            sorted_keys[key]\
    \ = sorted_keys[key]\n        end\n    end\n    return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvdxu72ii.lua:36:\
    \ expected: {\"aa\"}\nactual: {0=\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t\
    /tmp/tmpvdxu72ii.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    sorted_lst[#sorted_lst\
    \ + 1] = v\n  end\n  table.sort(sorted_lst)\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpth6q9sq0.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpth6q9sq0.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst + 1]\
    \ = lst[i]\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9d14y3_7.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp9d14y3_7.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: -1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_list = lst\n  local sorted_list_size = #lst\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index < sorted_list_size do\n    local current_value\
    \ = sorted_list[sorted_list_index]\n    local current_index = sorted_list_index\n\
    \    local current_size = sorted_list_size\n    while current_index > 1 do\n \
    \     local current_value = sorted_list[current_index - 1]\n      local current_index\
    \ = current_index - 1\n      local current_size = current_size - 1\n      if current_size\
    \ == 0 then\n        sorted_list[current_index] = nil\n      else\n        sorted_list[current_index]\
    \ = current_value\n      end\n    end\n    sorted_list_index = sorted_list_index\
    \ + 1\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750347
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for i = 1, #lst do\n    local word = lst[i]\n    local\
    \ length = #word\n    if length % 2 == 1 then\n      table.insert(sorted_lst,\
    \ word)\n    end\n  end\n  table.sort(sorted_lst, function(a, b) return #a < #b\
    \ end)\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkvv7amj0.lua:32:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpkvv7amj0.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  for i = 1, #lst do\n    local\
    \ key = lst[i]\n    sorted_keys[#sorted_keys + 1] = key\n    sorted_lst[#sorted_lst\
    \ + 1] = key\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  table.sort(sorted_keys, function(a, b) return #a < #b end)\n  for i = 1, #sorted_lst\
    \ do\n    sorted_lst[i] = sorted_keys[i - 1]\n  end\n  return sorted_lst\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppwa0drzv.lua:35:\
    \ expected: {\"aa\"}\nactual: {2=\"a\", 3=\"aa\"}\nstack traceback:\n\t/tmp/tmppwa0drzv.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_vals = {}\n\
    \  local sorted_key\n  local sorted_val\n  local i = 1\n  while i <= #lst do\n\
    \    sorted_key = lst[i]\n    sorted_val = sorted_keys[sorted_key]\n    if sorted_val\
    \ == nil then\n      sorted_vals[sorted_key] = i\n      sorted_lst[#sorted_lst\
    \ + 1] = sorted_key\n      sorted_keys[sorted_key] = i\n      i = i + 1\n    else\n\
    \      i = sorted_vals[sorted_key] + 1\n    end\n  end\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvfgo4mg0.lua:41:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpvfgo4mg0.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    sorted_lst[#sorted_lst+1]\
    \ = v\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n \
    \ return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqx6m_zga.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpqx6m_zga.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key\n  local\
    \ sorted_key\n  for _, value in ipairs(lst) do\n    sorted_key = value\n    sorted_keys[#sorted_keys\
    \ + 1] = sorted_key\n  end\n  table.sort(sorted_keys, function(a, b) return #a\
    \ > #b end)\n  for _, value in ipairs(sorted_keys) do\n    sorted_lst[#sorted_lst\
    \ + 1] = sorted_keys[value]\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppnred6ir.lua:35:\
    \ expected: {\"aa\"}\nactual: {}\nstack traceback:\n\t/tmp/tmppnred6ir.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  for i = 1, #lst do\n    sorted_keys[#sorted_keys\
    \ + 1] = lst[i]\n  end\n  table.sort(sorted_keys, function(a, b) return #a ==\
    \ #b end)\n  for i = 1, #sorted_keys do\n    sorted_lst[#sorted_lst + 1] = sorted_keys[i]\n\
    \  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5uirb2v_.lua:32:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp5uirb2v_.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key = 0\n  local\
    \ sorted_key_len = 0\n  for i = 1, #lst do\n    local key = lst[i]\n    sorted_key_len\
    \ = #key\n    if sorted_key_len > sorted_key then\n      sorted_key = sorted_key_len\n\
    \      sorted_keys[#sorted_keys + 1] = key\n    end\n  end\n  for i = 1, #sorted_keys\
    \ do\n    sorted_lst[#sorted_lst + 1] = sorted_keys[i]\n  end\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgitgoft.lua:38:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpmgitgoft.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_lst = {}\n    local sorted_keys = {}\n    local sorted_values\
    \ = {}\n    for _, v in ipairs(lst) do\n        table.insert(sorted_keys, v)\n\
    \        table.insert(sorted_values, v)\n    end\n    table.sort(sorted_keys,\
    \ function(a, b) return #a == #b end)\n    table.sort(sorted_values, function(a,\
    \ b) return #a < #b end)\n    for _, v in ipairs(sorted_keys) do\n        table.insert(sorted_lst,\
    \ sorted_values[v])\n    end\n    return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpir20yoj0.lua:35:\
    \ expected: {\"aa\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpir20yoj0.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    sorted_lst[#sorted_lst\
    \ + 1] = v\n  end\n  table.sort(sorted_lst, function(a, b) return #a < #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfus77oh8.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpfus77oh8.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_list = { }\n    local sorted_list_len = #lst\n    for i = 1,\
    \ sorted_list_len do\n        sorted_list[#sorted_list + 1] = lst[i]\n    end\n\
    \    table.sort(sorted_list)\n    return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0hld0fw.lua:29:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmps0hld0fw.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst+1] =\
    \ lst[i]\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu1_xp0x7.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpu1_xp0x7.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a > #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8tzy13a.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aaa\", \"aa\", \"a\"}\nstack traceback:\n\t/tmp/tmpd8tzy13a.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  for i = 1, #lst do\n    sorted_keys[#sorted_keys\
    \ + 1] = lst[i]\n  end\n  table.sort(sorted_keys, function(a, b)\n    return #a\
    \ == #b or a < b\n  end)\n  for i = 1, #sorted_keys do\n    sorted_lst[#sorted_lst\
    \ + 1] = sorted_keys[i]\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplu846wde.lua:34:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmplu846wde.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  for i = 1, #lst do\n    local\
    \ key = lst[i]\n    sorted_keys[#sorted_keys + 1] = key\n    sorted_lst[#sorted_lst\
    \ + 1] = key\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  table.sort(sorted_keys, function(a, b) return #a < #b end)\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpypjwpbqc.lua:32:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpypjwpbqc.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  for _, v in ipairs(lst) do\n\
    \    table.insert(sorted_keys, v)\n    table.insert(sorted_lst, v)\n  end\n  table.sort(sorted_keys,\
    \ function(a, b) return #a == #b end)\n  table.sort(sorted_lst, function(a, b)\
    \ return #a == #b end)\n  return sorted_keys\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmtzkiitq.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpmtzkiitq.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[i] = lst[i]\n  end\n\
    \  table.sort(sorted_lst)\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgy2fvveg.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpgy2fvveg.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key = 0\n  for\
    \ i = 1, #lst do\n    local key = tostring(lst[i])\n    if sorted_keys[key] ==\
    \ nil then\n      sorted_keys[key] = sorted_key\n      sorted_lst[sorted_key]\
    \ = lst[i]\n      sorted_key = sorted_key + 1\n    else\n      sorted_keys[key]\
    \ = sorted_key + 1\n    end\n  end\n  for i = 1, #sorted_lst do\n    sorted_lst[sorted_keys[i]]\
    \ = sorted_lst[i]\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl7no4wk5.lua:31:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpl7no4wk5.lua:31: in function\
    \ 'candidate'\n\t/tmp/tmpl7no4wk5.lua:39: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst + 1]\
    \ = lst[i]\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9d14y3_7.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp9d14y3_7.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst)\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmbcc0ku1.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpmbcc0ku1.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_list = { }\n    local sorted_list_len = #lst\n    for i = 1,\
    \ sorted_list_len do\n        sorted_list[#sorted_list + 1] = lst[i]\n    end\n\
    \    table.sort(sorted_list, function(a, b) return #a > #b end)\n    return sorted_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ycruikh.lua:29:\
    \ expected: {\"aa\"}\nactual: {\"aaa\", \"aa\", \"a\"}\nstack traceback:\n\t/tmp/tmp1ycruikh.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_list = lst\n  table.sort(sorted_list, function(a, b) return #a\
    \ == #b end)\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgq56nekv.lua:25:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpgq56nekv.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_vals = {}\n\
    \  local sorted_key\n  local sorted_val\n  local i = 1\n  while i <= #lst do\n\
    \    sorted_key = lst[i]\n    sorted_val = sorted_keys[sorted_key]\n    if sorted_val\
    \ == nil then\n      sorted_vals[sorted_key] = sorted_key\n      sorted_lst[#sorted_lst\
    \ + 1] = sorted_key\n      sorted_keys[sorted_key] = i\n      i = i + 1\n    else\n\
    \      i = sorted_vals[sorted_key] + 1\n    end\n  end\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_pslct8i.lua:41:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp_pslct8i.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: -1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_vals = {}\n\
    \  local sorted_key\n  local sorted_val\n  local i = 1\n  for _, v in pairs(lst)\
    \ do\n    sorted_key = \"_\"..i\n    sorted_val = v\n    sorted_keys[i] = sorted_key\n\
    \    sorted_vals[i] = sorted_val\n    i = i + 1\n  end\n  for i = 1, #sorted_keys\
    \ do\n    sorted_key = sorted_keys[i]\n    sorted_val = sorted_vals[i]\n    local\
    \ j = 1\n    while j <= #sorted_keys do\n      if sorted_keys[j] == sorted_key\
    \ then\n        sorted_vals[j] = sorted_val\n      else\n        j = j + 1\n \
    \     end\n    end\n  end\n  for i = 1, #sorted_keys do\n    sorted_key = sorted_keys[i]\n\
    \    sorted_val = sorted_vals[i]\n    sorted_lst[sorted_key] = sorted_val\n  end\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750347
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    sorted_lst[#sorted_lst+1]\
    \ = v\n  end\n  table.sort(sorted_lst, function(a, b) return #a < #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3t42imd.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpv3t42imd.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key_index =\
    \ 1\n  local sorted_key_value = nil\n  for _, v in pairs(lst) do\n    sorted_lst[#sorted_lst\
    \ + 1] = v\n    sorted_keys[#sorted_keys + 1] = sorted_key_index\n    sorted_key_value\
    \ = v\n    sorted_key_index = sorted_key_index + 1\n  end\n  table.sort(sorted_lst,\
    \ function(a, b) return #a == #b end)\n  table.sort(sorted_keys, function(a, b)\
    \ return sorted_key_value < sorted_keys[b] end)\n  for i = 1, #sorted_lst do\n\
    \    sorted_lst[i] = sorted_lst[i]\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkoyf27bo.lua:28:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpkoyf27bo.lua:28:\
    \ in function </tmp/tmpkoyf27bo.lua:28>\n\t[C]: in function 'sort'\n\t/tmp/tmpkoyf27bo.lua:28:\
    \ in function 'candidate'\n\t/tmp/tmpkoyf27bo.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  for i = 1, #lst do\n    local\
    \ key = lst[i]\n    sorted_keys[#sorted_keys + 1] = key\n    sorted_lst[#sorted_lst\
    \ + 1] = key\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  table.sort(sorted_keys, function(a, b) return #a == #b end)\n  for i = 1, #sorted_lst\
    \ do\n    sorted_lst[i] = sorted_keys[i - 1]\n  end\n  return sorted_lst\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3e82245.lua:35:\
    \ expected: {\"aa\"}\nactual: {2=\"aa\", 3=\"a\"}\nstack traceback:\n\t/tmp/tmps3e82245.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: -1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index < sorted_list_size do\n    local current_element\
    \ = sorted_list[sorted_list_index]\n    local current_element_size = #current_element\n\
    \    if current_element_size % 2 == 1 then\n      table.insert(sorted_list, current_element)\n\
    \      sorted_list_index = sorted_list_index + 1\n    end\n  end\n  return sorted_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750347
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key = 0\n  for\
    \ i = 1, #lst do\n    local key = lst[i]\n    if not sorted_keys[key] then\n \
    \     sorted_keys[key] = sorted_key\n      sorted_lst[sorted_key] = key\n    \
    \  sorted_key = sorted_key + 1\n    end\n  end\n  for i = 1, #sorted_lst do\n\
    \    sorted_lst[sorted_keys[i]] = sorted_lst[i]\n  end\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphp64zl3d.lua:29:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmphp64zl3d.lua:29: in function\
    \ 'candidate'\n\t/tmp/tmphp64zl3d.lua:37: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a < #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7hmbpd1o.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp7hmbpd1o.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_lst = {}\n    local sorted_keys = {}\n    local sorted_vals =\
    \ {}\n    for _, v in pairs(lst) do\n        sorted_keys[#sorted_keys + 1] = v\n\
    \        sorted_vals[#sorted_vals + 1] = v\n    end\n    table.sort(sorted_vals,\
    \ function(a, b) return #a < #b end)\n    for _, v in pairs(sorted_vals) do\n\
    \        sorted_lst[#sorted_lst + 1] = v\n    end\n    return sorted_lst\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkmyhv_j7.lua:34:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpkmyhv_j7.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[i] = lst[i]\n  end\n\
    \  table.sort(sorted_lst)\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgy2fvveg.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpgy2fvveg.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key\n  local\
    \ i = 1\n  for _, v in ipairs(lst) do\n    sorted_key = \"%\"..i\n    i = i +\
    \ 1\n    sorted_keys[sorted_key] = v\n    sorted_lst[sorted_key] = v\n  end\n\
    \  for _, v in pairs(sorted_keys) do\n    sorted_lst[v] = sorted_lst[sorted_keys[v]]\n\
    \  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmdaa4kqc.lua:36:\
    \ expected: {\"aa\"}\nactual: {\"%1\"=\"aa\", \"%2\"=\"a\", \"%3\"=\"aaa\"}\n\
    stack traceback:\n\t/tmp/tmpmdaa4kqc.lua:36: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst)\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmbcc0ku1.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpmbcc0ku1.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_vals = {}\n\
    \  for i = 1, #lst do\n    sorted_keys[#sorted_keys + 1] = lst[i]\n    sorted_vals[#sorted_vals\
    \ + 1] = lst[i]\n  end\n  table.sort(sorted_keys, function(a, b) return #a ==\
    \ #b end)\n  table.sort(sorted_vals, function(a, b) return #a > #b end)\n  for\
    \ i = 1, #sorted_keys do\n    sorted_lst[#sorted_lst + 1] = sorted_keys[i]\n \
    \ end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9f50ab06.lua:35:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp9f50ab06.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[i] = lst[i]\n  end\n\
    \  table.sort(sorted_lst)\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgy2fvveg.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpgy2fvveg.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_vals = {}\n\
    \  for i = 1, #lst do\n    local key = lst[i]\n    sorted_keys[#sorted_keys +\
    \ 1] = key\n    sorted_vals[#sorted_vals + 1] = lst[i]\n  end\n  table.sort(sorted_keys,\
    \ function(a, b) return #a == #b end)\n  table.sort(sorted_vals, function(a, b)\
    \ return a < b end)\n  for i = 1, #sorted_keys do\n    sorted_lst[#sorted_lst\
    \ + 1] = sorted_vals[i]\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9v9druf1.lua:36:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp9v9druf1.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for i = 1, #lst do\n    local word = lst[i]\n    sorted_lst[#sorted_lst+1]\
    \ = word\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpklx73s8q.lua:29:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpklx73s8q.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_list = lst\n  table.sort(sorted_list, function(a, b) return #a\
    \ > #b end)\n  local last_index = 1\n  for i = 1, #sorted_list do\n    if sorted_list[i]\
    \ == sorted_list[last_index] then\n      last_index = last_index + 1\n    else\n\
    \      table.insert(sorted_list, sorted_list[last_index])\n      last_index =\
    \ last_index + 1\n    end\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsk8w2a4a.lua:34:\
    \ expected: {\"aa\"}\nactual: {\"aaa\", \"aa\", \"a\"}\nstack traceback:\n\t/tmp/tmpsk8w2a4a.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_list = { }\n  for _, v in ipairs(lst) do\n    table.insert(sorted_list,\
    \ v)\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzoc1dzmf.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpzoc1dzmf.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_vals = {}\n\
    \  for i = 1, #lst do\n    local key = lst[i]\n    sorted_keys[#sorted_keys +\
    \ 1] = key\n    sorted_vals[#sorted_vals + 1] = lst[i]\n  end\n  table.sort(sorted_keys,\
    \ function(a, b) return #a == #b end)\n  table.sort(sorted_vals, function(a, b)\
    \ return #a < #b end)\n  for i = 1, #sorted_keys do\n    sorted_lst[#sorted_lst\
    \ + 1] = sorted_vals[i]\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4r9_ixzl.lua:36:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp4r9_ixzl.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in pairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpth2yngx5.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpth2yngx5.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_vals = {}\n\
    \  local sorted_key\n  local sorted_val\n  local i = 1\n  while i <= #lst do\n\
    \    sorted_key = lst[i]\n    sorted_val = sorted_keys[sorted_key]\n    if sorted_val\
    \ == nil then\n      sorted_vals[sorted_key] = sorted_key\n      sorted_lst[#sorted_lst\
    \ + 1] = sorted_key\n      sorted_keys[sorted_key] = i\n    else\n      sorted_keys[sorted_key]\
    \ = i\n    end\n    i = i + 1\n  end\n  sorted_lst = sorted_lst:sort()\n  sorted_lst\
    \ = sorted_lst:reverse()\n  sorted_lst = sorted_lst:sort()\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp12wuruw_.lua:35:\
    \ attempt to call method 'sort' (a nil value)\nstack traceback:\n\t/tmp/tmp12wuruw_.lua:35:\
    \ in function 'candidate'\n\t/tmp/tmp12wuruw_.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key = 0\n  for\
    \ i = 1, #lst do\n    local key = tostring(lst[i])\n    if sorted_keys[key] ==\
    \ nil then\n      sorted_keys[key] = sorted_key\n      sorted_lst[sorted_key]\
    \ = lst[i]\n      sorted_key = sorted_key + 1\n    else\n      sorted_keys[key]\
    \ = sorted_key + 1\n    end\n  end\n  table.sort(sorted_lst, function(a, b) return\
    \ #a == #b end)\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyci5yctf.lua:37:\
    \ expected: {\"aa\"}\nactual: {0=\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t\
    /tmp/tmpyci5yctf.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key = 0\n  for\
    \ i = 1, #lst do\n    local key = lst[i]\n    sorted_keys[#sorted_keys + 1] =\
    \ key\n    sorted_key = sorted_key + 1\n  end\n  table.sort(sorted_keys, function(a,\
    \ b) return #a == #b end)\n  for i = 1, #sorted_keys do\n    sorted_lst[sorted_keys[i]]\
    \ = lst[i]\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9rd0ar0m.lua:35:\
    \ expected: {\"aa\"}\nactual: {a=\"a\", aa=\"aa\", aaa=\"aaa\"}\nstack traceback:\n\
    \t/tmp/tmp9rd0ar0m.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_list = { }\n  for _, v in ipairs(lst) do\n    table.insert(sorted_list,\
    \ v)\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzoc1dzmf.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpzoc1dzmf.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_list = { }\n  local sorted_list_len = #lst\n  for i = 1, sorted_list_len\
    \ do\n    sorted_list[#sorted_list + 1] = lst[i]\n  end\n  table.sort(sorted_list,\
    \ function(a, b) return #a == #b end)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4wq7r4q.lua:29:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpm4wq7r4q.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst + 1]\
    \ = lst[i]\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9d14y3_7.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp9d14y3_7.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for i = 1, #lst do\n    local word = lst[i]\n    sorted_lst[#sorted_lst\
    \ + 1] = word\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b\
    \ end)\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgi5rqp1.lua:29:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpmgi5rqp1.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_list = { }\n  for _, v in ipairs(lst) do\n    table.insert(sorted_list,\
    \ v)\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzoc1dzmf.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpzoc1dzmf.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_table = {}\n  local sorted_table_len = 0\n  for i = 1, #lst do\n\
    \    local word = lst[i]\n    sorted_table[#sorted_table + 1] = word\n    sorted_table_len\
    \ = #sorted_table + 1\n  end\n  table.sort(sorted_table, function(a, b) return\
    \ #a > #b end)\n  local sorted_table_len = #sorted_table\n  local sorted_table\
    \ = {}\n  for i = 1, sorted_table_len do\n    sorted_table[#sorted_table + 1]\
    \ = sorted_table[i]\n  end\n  return sorted_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4w0d70t.lua:36:\
    \ expected: {\"aa\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpt4w0d70t.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_lst = {}\n    for _, v in ipairs(lst) do\n        table.insert(sorted_lst,\
    \ v)\n    end\n    table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \    return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpegl7jatz.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpegl7jatz.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_table = {}\n  for i = 1, #lst do\n    local word = lst[i]\n   \
    \ table.insert(sorted_table, word)\n  end\n  table.sort(sorted_table)\n  return\
    \ sorted_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpalrfopcd.lua:29:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpalrfopcd.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[i] = lst[i]\n  end\n\
    \  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphu4oiajq.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmphu4oiajq.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_vals = {}\n\
    \  local sorted_key\n  local sorted_val\n  for _, v in pairs(lst) do\n    sorted_key\
    \ = v\n    sorted_val = sorted_keys[sorted_key]\n    if sorted_val == nil then\n\
    \      sorted_val = 1\n    else\n      sorted_val = sorted_val + 1\n    end\n\
    \    sorted_keys[sorted_key] = sorted_val\n  end\n  for sorted_key, sorted_val\
    \ in pairs(sorted_keys) do\n    sorted_lst[sorted_val] = sorted_key\n  end\n \
    \ return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprxb69ukn.lua:41:\
    \ expected: {\"aa\"}\nactual: {\"aaa\"}\nstack traceback:\n\t/tmp/tmprxb69ukn.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst + 1]\
    \ = lst[i]\n  end\n  table.sort(sorted_lst, function(a, b) return #a > #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_93d1ny.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aaa\", \"aa\", \"a\"}\nstack traceback:\n\t/tmp/tmpw_93d1ny.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_lst = {}\n    for _, v in pairs(lst) do\n        table.insert(sorted_lst,\
    \ v)\n    end\n    table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \    return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi3jqakku.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpi3jqakku.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst+1] =\
    \ lst[i]\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu1_xp0x7.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpu1_xp0x7.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key_count =\
    \ 0\n  for i = 1, #lst do\n    local key = lst[i]\n    sorted_keys[sorted_key_count]\
    \ = key\n    sorted_key_count = sorted_key_count + 1\n  end\n  table.sort(sorted_keys,\
    \ function(a, b) return #a < #b end)\n  for i = 1, #sorted_keys do\n    sorted_lst[#sorted_lst\
    \ + 1] = sorted_keys[i]\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa7oz_6hi.lua:35:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpa7oz_6hi.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key = 0\n  for\
    \ i = 1, #lst do\n    local key = lst[i]\n    sorted_keys[#sorted_keys + 1] =\
    \ key\n    sorted_key = sorted_key + 1\n  end\n  table.sort(sorted_keys, function(a,\
    \ b) return #a < #b end)\n  for i = 1, #sorted_keys do\n    sorted_lst[sorted_keys[i]]\
    \ = lst[i]\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnizxxpw9.lua:35:\
    \ expected: {\"aa\"}\nactual: {a=\"aa\", aa=\"a\", aaa=\"aaa\"}\nstack traceback:\n\
    \t/tmp/tmpnizxxpw9.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key = 0\n  for\
    \ i = 1, #lst do\n    local key = tostring(lst[i])\n    if sorted_keys[key] ~=\
    \ nil then\n      sorted_keys[#sorted_keys + 1] = key\n      sorted_keys[#sorted_keys\
    \ + 1] = i\n    else\n      sorted_keys[key] = 1\n      sorted_lst[#sorted_lst\
    \ + 1] = lst[i]\n    end\n  end\n  table.sort(sorted_lst, function(a, b) return\
    \ #a == #b end)\n  for i = 1, #sorted_lst do\n    sorted_lst[sorted_keys[sorted_lst[i]]]\
    \ = nil\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7yiu4585.lua:40:\
    \ expected: {\"aa\"}\nactual: {2=\"a\", 3=\"aaa\"}\nstack traceback:\n\t/tmp/tmp7yiu4585.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in pairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpth2yngx5.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpth2yngx5.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key = 0\n  for\
    \ i = 1, #lst do\n    local key = lst[i]\n    if sorted_keys[key] then\n     \
    \ sorted_keys[#sorted_keys + 1] = key\n    else\n      sorted_keys[key] = i\n\
    \    end\n  end\n  for i = 1, #sorted_keys do\n    sorted_lst[#sorted_lst + 1]\
    \ = sorted_keys[sorted_key]\n    sorted_key = sorted_key + 1\n  end\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbbwnfsq.lua:38:\
    \ expected: {\"aa\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpwbbwnfsq.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst + 1]\
    \ = lst[i]\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9d14y3_7.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp9d14y3_7.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[i] = lst[i]\n  end\n\
    \  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphu4oiajq.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmphu4oiajq.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key = 0\n  for\
    \ i = 1, #lst do\n    local key = lst[i]\n    sorted_keys[#sorted_keys + 1] =\
    \ key\n    sorted_lst[sorted_key] = key\n    sorted_key = sorted_key + 1\n  end\n\
    \  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  table.sort(sorted_lst,\
    \ function(a, b) return a < b end)\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg2s48fvw.lua:34:\
    \ expected: {\"aa\"}\nactual: {0=\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t\
    /tmp/tmpg2s48fvw.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_list = { }\n  for _, v in ipairs(lst) do\n    table.insert(sorted_list,\
    \ v)\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzoc1dzmf.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpzoc1dzmf.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst + 1]\
    \ = lst[i]\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9d14y3_7.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp9d14y3_7.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_keys = table.sort(sorted_keys)\n\
    \  for _, key in ipairs(sorted_keys) do\n    sorted_lst[key] = lst[key]\n  end\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx6quhx8o.lua:20:\
    \ bad argument #1 to 'ipairs' (table expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpx6quhx8o.lua:20: in function 'candidate'\n\t/tmp/tmpx6quhx8o.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst + 1]\
    \ = lst[i]\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9d14y3_7.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp9d14y3_7.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key = 0\n  for\
    \ i = 1, #lst do\n    local key = lst[i]\n    sorted_keys[#sorted_keys + 1] =\
    \ key\n    sorted_key = sorted_key + 1\n  end\n  table.sort(sorted_keys, function(a,\
    \ b) return #a == #b end)\n  for i = 1, #sorted_keys do\n    sorted_lst[sorted_keys[i]]\
    \ = lst[i]\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9rd0ar0m.lua:35:\
    \ expected: {\"aa\"}\nactual: {a=\"a\", aa=\"aa\", aaa=\"aaa\"}\nstack traceback:\n\
    \t/tmp/tmp9rd0ar0m.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  for i = 1, #lst do\n    sorted_keys[#sorted_keys\
    \ + 1] = lst[i]\n  end\n  table.sort(sorted_keys, function(a, b)\n    return #a\
    \ == #b and #a > 0 and #b > 0 and a < b\n  end)\n  for i = 1, #sorted_keys do\n\
    \    sorted_lst[#sorted_lst + 1] = sorted_keys[i]\n  end\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjna19uqv.lua:34:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpjna19uqv.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_list = { }\n  for _, v in ipairs(lst) do\n    table.insert(sorted_list,\
    \ v)\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzoc1dzmf.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpzoc1dzmf.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst + 1]\
    \ = lst[i]\n  end\n  table.sort(sorted_lst)\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq08_fjxh.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpq08_fjxh.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  for i = 1, #lst do\n    local\
    \ key = lst[i]\n    sorted_keys[#sorted_keys + 1] = key\n    sorted_lst[#sorted_lst\
    \ + 1] = key\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  table.sort(sorted_keys, function(a, b) return #a < #b end)\n  for i = 1, #sorted_lst\
    \ do\n    sorted_lst[#sorted_lst + 1] = sorted_keys[#sorted_keys + 1]\n  end\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60y3mi_j.lua:35:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp60y3mi_j.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  for i = 1, #lst do\n    local\
    \ key = lst[i]\n    sorted_keys[#sorted_keys + 1] = key\n    sorted_lst[#sorted_lst\
    \ + 1] = key\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  table.sort(sorted_keys, function(a, b) return #a < #b end)\n  for i = 1, #sorted_keys\
    \ do\n    sorted_lst[#sorted_lst + 1] = sorted_keys[i]\n  end\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvb6cjkkb.lua:35:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\", \"a\", \"aa\", \"aaa\"\
    }\nstack traceback:\n\t/tmp/tmpvb6cjkkb.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a > #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8tzy13a.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aaa\", \"aa\", \"a\"}\nstack traceback:\n\t/tmp/tmpd8tzy13a.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_list = { }\n  for _, v in ipairs(lst) do\n    table.insert(sorted_list,\
    \ v)\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzoc1dzmf.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpzoc1dzmf.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_lst = {}\n    local sorted_keys = {}\n    local sorted_vals =\
    \ {}\n    local sorted_key\n    local sorted_val\n    local i = 1\n    for _,\
    \ v in ipairs(lst) do\n        sorted_key = \"_\"..i\n        sorted_val = v\n\
    \        sorted_keys[sorted_key] = true\n        sorted_vals[sorted_val] = true\n\
    \        i = i + 1\n    end\n    local i = 1\n    for _, v in pairs(sorted_vals)\
    \ do\n        if v then\n            sorted_key = sorted_keys[i]\n           \
    \ sorted_lst[sorted_key] = v\n            sorted_keys[i] = nil\n            i\
    \ = i + 1\n        end\n    end\n    return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7dfbw_qr.lua:34:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmp7dfbw_qr.lua:34: in function\
    \ 'candidate'\n\t/tmp/tmp7dfbw_qr.lua:45: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a < #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7hmbpd1o.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp7hmbpd1o.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_table = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_table,\
    \ v)\n  end\n  table.sort(sorted_table)\n  return sorted_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9m__vtu4.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp9m__vtu4.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  for i = 1, #lst do\n    sorted_keys[#sorted_keys\
    \ + 1] = lst[i]\n  end\n  table.sort(sorted_keys, function(a, b) return #a ==\
    \ #b end)\n  for i = 1, #sorted_keys do\n    sorted_lst[#sorted_lst + 1] = sorted_keys[i]\n\
    \  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5uirb2v_.lua:32:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp5uirb2v_.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key_count =\
    \ 0\n  for i = 1, #lst do\n    local key = lst[i]\n    sorted_keys[#sorted_keys\
    \ + 1] = key\n    sorted_key_count = #sorted_keys\n  end\n  table.sort(sorted_keys,\
    \ function(a, b) return #a < #b end)\n  for i = 1, #sorted_keys do\n    sorted_lst[sorted_key_count\
    \ + i] = sorted_keys[i]\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_23d9bj.lua:35:\
    \ expected: {\"aa\"}\nactual: {4=\"a\", 5=\"aa\", 6=\"aaa\"}\nstack traceback:\n\
    \t/tmp/tmpz_23d9bj.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_vals = {}\n\
    \  for i = 1, #lst do\n    local key = lst[i]\n    sorted_keys[#sorted_keys +\
    \ 1] = key\n    sorted_vals[#sorted_vals + 1] = lst[i]\n  end\n  table.sort(sorted_keys,\
    \ function(a, b) return #a < #b end)\n  table.sort(sorted_vals, function(a, b)\
    \ return a < b end)\n  for i = 1, #sorted_keys do\n    sorted_lst[#sorted_lst\
    \ + 1] = sorted_vals[i]\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfbz7rsh8.lua:36:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpfbz7rsh8.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_list = { }\n  for _, v in ipairs(lst) do\n    table.insert(sorted_list,\
    \ v)\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzoc1dzmf.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpzoc1dzmf.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_list = { }\n  for _, v in ipairs(lst) do\n    table.insert(sorted_list,\
    \ v)\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzoc1dzmf.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpzoc1dzmf.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for i = 1, #lst do\n    local word = lst[i]\n    local\
    \ length = #word\n    if length > 1 then\n      sorted_lst[#sorted_lst + 1] =\
    \ word\n    end\n  end\n  table.sort(sorted_lst, function(a, b) return #a > #b\
    \ end)\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykry0z8z.lua:32:\
    \ expected: {\"aa\"}\nactual: {\"aaa\", \"aa\"}\nstack traceback:\n\t/tmp/tmpykry0z8z.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_lst = {}\n    local sorted_keys = {}\n    local sorted_key =\
    \ 0\n    for _, v in ipairs(lst) do\n        local key = #v\n        if sorted_keys[key]\
    \ == nil then\n            sorted_keys[key] = sorted_key\n            sorted_lst[sorted_key]\
    \ = v\n        else\n            sorted_keys[key] = (sorted_keys[key] + #v) /\
    \ 2\n            sorted_lst[sorted_key] = v\n        end\n    end\n    return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzaxm5l41.lua:36:\
    \ expected: {\"aa\"}\nactual: {0=\"aaa\"}\nstack traceback:\n\t/tmp/tmpzaxm5l41.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  for i = 1, #lst do\n    sorted_keys[#sorted_keys\
    \ + 1] = lst[i]\n  end\n  table.sort(sorted_keys, function(a, b) return #a ==\
    \ #b end)\n  for i = 1, #sorted_keys do\n    sorted_lst[#sorted_lst + 1] = sorted_keys[i]\n\
    \  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5uirb2v_.lua:32:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp5uirb2v_.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_vals = {}\n\
    \  local sorted_key\n  local sorted_val\n  local i = 1\n  for _, val in pairs(lst)\
    \ do\n    sorted_key = \"_\"\n    sorted_val = \"_\"\n    sorted_keys[i] = sorted_key\n\
    \    sorted_vals[i] = sorted_val\n    i = i + 1\n  end\n  table.sort(sorted_keys,\
    \ function(a, b) return #a < #b end)\n  table.sort(sorted_vals, function(a, b)\
    \ return a < b end)\n  for _, val in pairs(sorted_keys) do\n    sorted_lst[#sorted_lst\
    \ + 1] = sorted_vals[#sorted_vals + 1]\n  end\n  return sorted_lst\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk81tivig.lua:41:\
    \ expected: {\"aa\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpk81tivig.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst)\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmbcc0ku1.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpmbcc0ku1.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_list = { }\n  for _, v in ipairs(lst) do\n    table.insert(sorted_list,\
    \ v)\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzoc1dzmf.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpzoc1dzmf.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key_count =\
    \ 0\n  for i = 1, #lst do\n    local key = lst[i]\n    sorted_keys[#sorted_keys\
    \ + 1] = key\n    sorted_key_count = #sorted_keys\n  end\n  table.sort(sorted_keys,\
    \ function(a, b) return #a < #b end)\n  for i = 1, #sorted_keys do\n    sorted_lst[sorted_key_count\
    \ + i] = sorted_keys[i]\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_23d9bj.lua:35:\
    \ expected: {\"aa\"}\nactual: {4=\"a\", 5=\"aa\", 6=\"aaa\"}\nstack traceback:\n\
    \t/tmp/tmpz_23d9bj.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    sorted_lst[#sorted_lst\
    \ + 1] = v\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkx8yaqx0.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpkx8yaqx0.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_list = { }\n  for _, v in ipairs(lst) do\n    table.insert(sorted_list,\
    \ v)\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzoc1dzmf.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpzoc1dzmf.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key = 0\n  for\
    \ i = 1, #lst do\n    local key = lst[i]\n    if sorted_keys[key] == nil then\n\
    \      sorted_keys[key] = sorted_key\n      sorted_lst[sorted_key] = key\n   \
    \   sorted_key = sorted_key + 1\n    end\n  end\n  for i = 1, #sorted_lst do\n\
    \    sorted_lst[sorted_lst[i]] = i\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpltgvt0pb.lua:37:\
    \ expected: {\"aa\"}\nactual: {0=\"aa\", \"a\", \"aaa\", a=1, aaa=2}\nstack traceback:\n\
    \t/tmp/tmpltgvt0pb.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_list = { }\n  for i = 1, #lst do\n    sorted_list[#sorted_list\
    \ + 1] = lst[i]\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt9ytbvvh.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpt9ytbvvh.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  for _, v in pairs(lst) do\n\
    \    sorted_lst[#sorted_lst + 1] = v\n    sorted_keys[v] = true\n  end\n  table.sort(sorted_lst,\
    \ function(a, b) return #a == #b end)\n  table.sort(sorted_lst, function(a, b)\
    \ return a < b end)\n  for i = 1, #sorted_lst do\n    if not sorted_keys[sorted_lst[i]]\
    \ then\n      sorted_lst[#sorted_lst + 1] = sorted_lst[i]\n    end\n  end\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvw7jgas.lua:36:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpdvw7jgas.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  for _, v in ipairs(lst) do\n\
    \    sorted_keys[#sorted_keys + 1] = v\n  end\n  table.sort(sorted_keys, function(a,\
    \ b) return #a == #b end)\n  for _, v in ipairs(sorted_keys) do\n    sorted_lst[#sorted_lst\
    \ + 1] = lst[v]\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk0gs_r2y.lua:32:\
    \ expected: {\"aa\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpk0gs_r2y.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_lst = {}\n    local sorted_keys = {}\n    local sorted_vals =\
    \ {}\n    for _, v in pairs(lst) do\n        table.insert(sorted_vals, v)\n  \
    \      table.insert(sorted_keys, #sorted_vals + 1)\n    end\n    table.sort(sorted_vals,\
    \ function(a, b) return #a < #b end)\n    table.sort(sorted_keys, function(a,\
    \ b) return #a < #b end)\n    for _, v in pairs(sorted_vals) do\n        table.insert(sorted_lst,\
    \ v)\n    end\n    return sorted_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt15m28fe.lua:25:\
    \ attempt to get length of local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpt15m28fe.lua:25:\
    \ in function </tmp/tmpt15m28fe.lua:25>\n\t[C]: in function 'sort'\n\t/tmp/tmpt15m28fe.lua:25:\
    \ in function 'candidate'\n\t/tmp/tmpt15m28fe.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_list = { }\n  for _, v in ipairs(lst) do\n    table.insert(sorted_list,\
    \ v)\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzoc1dzmf.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpzoc1dzmf.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a > #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8tzy13a.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aaa\", \"aa\", \"a\"}\nstack traceback:\n\t/tmp/tmpd8tzy13a.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst + 1]\
    \ = lst[i]\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9d14y3_7.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp9d14y3_7.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  for i = 1, #lst do\n    sorted_keys[#sorted_keys\
    \ + 1] = lst[i]\n  end\n  table.sort(sorted_keys, function(a, b)\n    return #a\
    \ == #b or a < b\n  end)\n  for i = 1, #sorted_keys do\n    sorted_lst[#sorted_lst\
    \ + 1] = sorted_keys[i]\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplu846wde.lua:34:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmplu846wde.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a > #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8tzy13a.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aaa\", \"aa\", \"a\"}\nstack traceback:\n\t/tmp/tmpd8tzy13a.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    sorted_lst[#sorted_lst+1]\
    \ = v\n  end\n  table.sort(sorted_lst, function(a, b) return #a < #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3t42imd.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpv3t42imd.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key = 0\n  for\
    \ i = 1, #lst do\n    local key = lst[i]\n    sorted_keys[#sorted_keys + 1] =\
    \ key\n    sorted_key = sorted_key + 1\n  end\n  table.sort(sorted_keys, function(a,\
    \ b) return #a == #b end)\n  for i = 1, #sorted_keys do\n    sorted_lst[sorted_keys[i]]\
    \ = lst[i]\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9rd0ar0m.lua:35:\
    \ expected: {\"aa\"}\nactual: {a=\"a\", aa=\"aa\", aaa=\"aaa\"}\nstack traceback:\n\
    \t/tmp/tmp9rd0ar0m.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key_count =\
    \ 0\n  for _, v in ipairs(lst) do\n    sorted_keys[#sorted_keys + 1] = v\n  end\n\
    \  table.sort(sorted_keys, function(a, b) return #a == #b end)\n  for _, v in\
    \ ipairs(sorted_keys) do\n    sorted_lst[#sorted_lst + 1] = v\n  end\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0lgerumr.lua:33:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp0lgerumr.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_list = { }\n  for _, v in ipairs(lst) do\n    table.insert(sorted_list,\
    \ v)\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzoc1dzmf.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpzoc1dzmf.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst+1] =\
    \ lst[i]\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu1_xp0x7.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpu1_xp0x7.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_lst = {}\n    local sorted_keys = {}\n    local sorted_key =\
    \ 0\n    for i = 1, #lst do\n        local key = lst[i]\n        if sorted_keys[key]\
    \ == nil then\n            sorted_keys[key] = i\n            sorted_lst[i] = key\n\
    \        else\n            sorted_keys[key] = (sorted_keys[key] + 1) % #sorted_lst\n\
    \        end\n    end\n    for i = 1, #sorted_lst do\n        sorted_lst[sorted_keys[sorted_lst[i]]]\
    \ = sorted_lst[i]\n    end\n    return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp27x31ha2.lua:38:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp27x31ha2.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \   local sorted_lst = {}\n    local sorted_keys = {}\n    local sorted_vals =\
    \ {}\n    for i = 1, #lst do\n        local key = lst[i]\n        sorted_keys[#sorted_keys\
    \ + 1] = key\n        sorted_vals[#sorted_vals + 1] = lst[i]\n    end\n    table.sort(sorted_keys,\
    \ function(a, b) return #a < #b end)\n    table.sort(sorted_vals, function(a,\
    \ b) return a < b end)\n    for i = 1, #sorted_keys do\n        sorted_lst[#sorted_lst\
    \ + 1] = sorted_vals[i]\n    end\n    return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9pjhz2i.lua:36:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpz9pjhz2i.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_list = { }\n  local sorted_list_len = #lst\n  local sorted_list_index\
    \ = 1\n  local sorted_list_len = #lst\n  local sorted_list_index = 1\n  local\
    \ sorted_list_len = #lst\n  local sorted_list_index = 1\n  local sorted_list_len\
    \ = #lst\n  local sorted_list_index = 1\n  local sorted_list_len = #lst\n  local\
    \ sorted_list_index = 1\n  local sorted_list_len = #lst\n  local sorted_list_index\
    \ = 1\n  local sorted_list_len = #lst\n  local sorted_list_index = 1\n  local\
    \ sorted_list_len = #lst\n  local sorted_list_index = 1\n  local sorted_list_len\
    \ = #lst\n  local sorted_list_index = 1\n  local sorted_list_len = #lst\n  local\
    \ sorted_list_index = 1\n  local sorted_list_len = #lst\n  local sorted_list_index\
    \ = 1\n  local sorted_list_len = #lst\n  local sorted_list_index = 1\n  local\
    \ sorted_list_len = #lst\n  local sorted_list_index = 1\n  local sorted_list_len\
    \ = #lst\n  local sorted_list_index = 1\n  local sorted_list_len = #lst\n  local\
    \ sorted_list_index = 1\n  local sorted_list_len = #lst\n  local sorted_list_index\
    \ = 1\n  local sorted_list_len = #lst\n  local sorted_list_index = 1\n  local\
    \ sorted_list_len = #lst\n  local sorted_list_index = 1\n  local sorted_list_len\
    \ = #lst\n  local sorted_list_index = 1\n  local sorted_list_len = #lst\n  local\
    \ sorted_list_index = 1\n  local sorted_list_len = #lst\n  local sorted_list_index\
    \ = 1\n  local sorted_list_len = #lst\n  local sorted_list_index = 1\n  local\
    \ sorted_list_len = #lst\n  local sorted_list_index = 1\n  local sorted_list_len\
    \ = #lst\n  local sorted_list_index = 1\n  local sorted_list_len = #lst\n  local\
    \ sorted_list_index = 1\n  local sorted_list_len = #lst\n  local sorted_list_index\
    \ = 1\n  local sorted_list_len = #lst\n  local sorted_list_index = 1\n  local\
    \ sorted_list_len = #lst\n  local sorted_list_index = 1\n  local sorted_list_len\
    \ = #lst\n  local sorted_list_index = 1\n  local sorted_list_len = #lst\n  local\
    \ sorted_list_index = 1\n  local sorted_list_len = #lst\n  local sorted_list_index\
    \ = 1\n  local sorted_list_len = #lst\n  local sorted_list_index = 1\n  local\
    \ sorted_list_len = #lst\n  local sorted_list_index = 1\n  local sorted_list_len\
    \ = #lst\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp11h8c3wk.lua:99: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_vals = {}\n\
    \  local sorted_key\n  local sorted_val\n  for _, v in ipairs(lst) do\n    sorted_key\
    \ = v\n    sorted_val = sorted_keys[sorted_key]\n    if sorted_val == nil then\n\
    \      sorted_vals[sorted_key] = v\n    else\n      sorted_vals[sorted_key] =\
    \ sorted_val..' '..v\n    end\n  end\n  for sorted_key, sorted_val in pairs(sorted_vals)\
    \ do\n    sorted_lst[#sorted_lst+1] = sorted_val\n  end\n  for _, v in ipairs(sorted_lst)\
    \ do\n    sorted_keys[v] = sorted_key\n  end\n  return sorted_keys\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcu887j8s.lua:43:\
    \ expected: {\"aa\"}\nactual: {a=\"aaa\", aa=\"aaa\", aaa=\"aaa\"}\nstack traceback:\n\
    \t/tmp/tmpcu887j8s.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q24y75y.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6q24y75y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Write a function that accepts a table of strings as a parameter,\n\
    -- deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ table with a sorted order,\n-- The table is always a table of strings and never\
    \ a table of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ table should be ascending by length of each word, and you\n-- should return\
    \ the table sorted by that rule.\n-- If two words have the same length, sort the\
    \ table alphabetically.\n-- The function should return a table of strings in sorted\
    \ order.\n-- You may assume that all words will have the same length.\n-- For\
    \ example:\n-- >>> list_sort({'aa', 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab',\
    \ 'a', 'aaa', 'cd'})\n-- {'ab', 'cd'}\nlocal function sorted_list_sum(lst)\n \
    \ local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst + 1]\
    \ = lst[i]\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9d14y3_7.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp9d14y3_7.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
