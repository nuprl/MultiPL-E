name: HumanEval_44_change_base
language: lua
prompt: "-- Change numerical base of input number x to base.\n-- return string representation\
  \ after the conversion.\n-- base numbers are less than 10.\n-- >>> change_base(8,\
  \ 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>> change_base(7, 2)\n--\
  \ '111'\nlocal function change_base(x, base)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
  \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9, 3),\
  \ '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
  \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
  \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
  \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
  \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
  \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local digits = math.floor(x/base)\n  local result = {}\n  for i =\
    \ 1, digits do\n    table.insert(result, math.floor(x/base))\n    x = x % base\n\
    \  end\n  table.insert(result, x)\n  return table.concat(result, '') .. '0'\n\
    end", "  if x < 10 then\n    return string.format(\"%0*d\", base, x)\n  else\n\
    \    return string.format(\"%0*d\", base, x)\n  end\nend", "  if x < 10 then\n\
    \    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x %\
    \ base\n  local result = \"\"\n  while x do\n    local digit = math.floor(x/base)\n\
    \    result = tostring(digit) + result\n    x = x % base\n  end\n  return tostring(digits)\
    \ .. result\nend", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits\
    \ = math.floor(x/base)\n  x = x - digits * base\n  local base10 = 10\n  local\
    \ base2 = 0\n  while x >= base10 do\n    digits = math.floor(x/base10)\n    x\
    \ = x - digits * base10\n    base10 = base10 * base2\n    base2 = base2 + 1\n\
    \  end\n  return tostring(digits + base2)\nend", "  local digits = math.floor(math.log(math.abs(x),\
    \ base))\n  if digits == 0 then\n    return tostring(x)\n  end\n  local digits_str\
    \ = tostring(digits)\n  local digits_len = #digits_str\n  local digits_pow = math.pow(base,\
    \ digits)\n  local digits_div = digits_pow / x\n  local digits_mod = digits_pow\
    \ % x\n  local digits_str = digits_str:sub(1, digits_len - digits_div)\n  local\
    \ digits_str = digits_str .. tostring(digits_mod)\n  return digits_str\nend",
  "    if x < 10 then\n        return string.format(\"%0*d\", base, x)\n    end\n\
    \    if base < 2 then\n        return string.format(\"%0*d\", base, x)\n    end\n\
    \    if base > 10 then\n        return string.format(\"%0*d\", base, x)\n    end\n\
    end", "\tlocal s = \"\"\n\tlocal i = 1\n\twhile x > 0 do\n\t\ts = string.rep(\"\
    0\", base) + s\n\t\tx = math.floor(x/base)\n\t\ti = i + 1\n\tend\n\treturn string.rep(s,\
    \ i)\nend", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits =\
    \ math.floor(math.log(x + 1, base))\n  local new_base = 10\n  while digits > 0\
    \ do\n    new_base = (new_base * base) + x\n    digits = digits - 1\n  end\n \
    \ return tostring(new_base)\nend", "  local digits = math.floor(math.log(x, base))\n\
    \  local result = \"\"\n  while digits > 0 do\n    local digit = x % base\n  \
    \  local remainder = x / base\n    local result = string.rep(\"0\", digits - 1)\
    \ .. digit\n    x = remainder\n  end\n  return result .. x\nend", "  if x < 10\
    \ then\n    return tostring(x)\n  end\n  local digits = math.floor(math.log(x\
    \ / base))\n  if digits == 0 then\n    return tostring(x)\n  end\n  local factor\
    \ = 10^(digits - 1)\n  local digit = x / factor\n  local result = tostring(digit)\n\
    \  local remainder = x % factor\n  if remainder ~= 0 then\n    result = result\
    \ .. tostring(remainder)\n  end\n  return result\nend", "  if x < 10 then\n  \
    \  return tostring(x)\n  end\n  local digits = math.floor(math.log(x + 1, base))\n\
    \  local factor = 10^(digits - 1)\n  local new_x = x / factor\n  return tostring(new_x)\
    \ * factor\nend", "  local digits = math.floor(x/base)+1\n  local result = {}\n\
    \  for i = 1, digits do\n    table.insert(result, math.floor(x/base)*base+(i-1)*base)\n\
    \  end\n  return table.concat(result)\nend", "  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  return string.format(\"%0*d\", base, digits)\nend",
  "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x", "  local digits = math.floor(x/base)\n\
    \  local result = {}\n  for i = 1, digits do\n    table.insert(result, math.floor(x/base))\n\
    \    x = x % base\n  end\n  table.insert(result, x)\n  return table.concat(result)\n\
    end", "  local digits = math.floor(x/base)\n  local result = {}\n  local i = 1\n\
    \  while i <= digits do\n    result[#result+1] = i\n    i = i * base\n  end\n\
    \  return table.concat(result, '') .. '0'\nend", "  local digits = math.floor(x/base)\n\
    \  local rest = x - base*digits\n  return string.format('%d', digits)..string.format('%b',\
    \ rest)\nend", "  local digits = math.floor(x/base)\n  x = x - base*digits\n \
    \ return string.format('%0*d', digits, x)\nend", "  local digits = math.floor(math.log(x,\
    \ base))\n  local digits_str = string.rep('0', digits + 1) .. string.rep('0',\
    \ digits - 1)\n  return string.format('%s%s', digits_str, x:div(base):rem(base))\n\
    end", "  local digits = math.floor(x/base)+1\n  if digits == 0 then\n    return\
    \ \"\"\n  elseif digits == 1 then\n    return tostring(base*digits)\n  else\n\
    \    return tostring(base*digits)..change_base(digits, base)\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
