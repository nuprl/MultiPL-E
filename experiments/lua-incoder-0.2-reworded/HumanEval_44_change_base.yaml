name: HumanEval_44_change_base
language: lua
prompt: "-- Change numerical base of input number x to base.\n-- return string representation\
  \ after the conversion.\n-- base numbers are less than 10.\n-- >>> change_base(8,\
  \ 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>> change_base(7, 2)\n--\
  \ '111'\nlocal function change_base(x, base)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
  \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9, 3),\
  \ '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
  \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
  \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
  \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
  \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
  \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local digits = math.floor(x/base)\n  local result = {}\n  for i =\
    \ 1, digits do\n    table.insert(result, math.floor(x/base))\n    x = x % base\n\
    \  end\n  table.insert(result, x)\n  return table.concat(result, '') .. '0'\n\
    end", "  if x < 10 then\n    return string.format(\"%0*d\", base, x)\n  else\n\
    \    return string.format(\"%0*d\", base, x)\n  end\nend", "  if x < 10 then\n\
    \    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x %\
    \ base\n  local result = \"\"\n  while x do\n    local digit = math.floor(x/base)\n\
    \    result = tostring(digit) + result\n    x = x % base\n  end\n  return tostring(digits)\
    \ .. result\nend", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits\
    \ = math.floor(x/base)\n  x = x - digits * base\n  local base10 = 10\n  local\
    \ base2 = 0\n  while x >= base10 do\n    digits = math.floor(x/base10)\n    x\
    \ = x - digits * base10\n    base10 = base10 * base2\n    base2 = base2 + 1\n\
    \  end\n  return tostring(digits + base2)\nend", "  local digits = math.floor(math.log(math.abs(x),\
    \ base))\n  if digits == 0 then\n    return tostring(x)\n  end\n  local digits_str\
    \ = tostring(digits)\n  local digits_len = #digits_str\n  local digits_pow = math.pow(base,\
    \ digits)\n  local digits_div = digits_pow / x\n  local digits_mod = digits_pow\
    \ % x\n  local digits_str = digits_str:sub(1, digits_len - digits_div)\n  local\
    \ digits_str = digits_str .. tostring(digits_mod)\n  return digits_str\nend",
  "    if x < 10 then\n        return string.format(\"%0*d\", base, x)\n    end\n\
    \    if base < 2 then\n        return string.format(\"%0*d\", base, x)\n    end\n\
    \    if base > 10 then\n        return string.format(\"%0*d\", base, x)\n    end\n\
    end", "\tlocal s = \"\"\n\tlocal i = 1\n\twhile x > 0 do\n\t\ts = string.rep(\"\
    0\", base) + s\n\t\tx = math.floor(x/base)\n\t\ti = i + 1\n\tend\n\treturn string.rep(s,\
    \ i)\nend", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits =\
    \ math.floor(math.log(x + 1, base))\n  local new_base = 10\n  while digits > 0\
    \ do\n    new_base = (new_base * base) + x\n    digits = digits - 1\n  end\n \
    \ return tostring(new_base)\nend", "  local digits = math.floor(math.log(x, base))\n\
    \  local result = \"\"\n  while digits > 0 do\n    local digit = x % base\n  \
    \  local remainder = x / base\n    local result = string.rep(\"0\", digits - 1)\
    \ .. digit\n    x = remainder\n  end\n  return result .. x\nend", "  if x < 10\
    \ then\n    return tostring(x)\n  end\n  local digits = math.floor(math.log(x\
    \ / base))\n  if digits == 0 then\n    return tostring(x)\n  end\n  local factor\
    \ = 10^(digits - 1)\n  local digit = x / factor\n  local result = tostring(digit)\n\
    \  local remainder = x % factor\n  if remainder ~= 0 then\n    result = result\
    \ .. tostring(remainder)\n  end\n  return result\nend", "  if x < 10 then\n  \
    \  return tostring(x)\n  end\n  local digits = math.floor(math.log(x + 1, base))\n\
    \  local factor = 10^(digits - 1)\n  local new_x = x / factor\n  return tostring(new_x)\
    \ * factor\nend", "  local digits = math.floor(x/base)+1\n  local result = {}\n\
    \  for i = 1, digits do\n    table.insert(result, math.floor(x/base)*base+(i-1)*base)\n\
    \  end\n  return table.concat(result)\nend", "  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  return string.format(\"%0*d\", base, digits)\nend",
  "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x", "  local digits = math.floor(x/base)\n\
    \  local result = {}\n  for i = 1, digits do\n    table.insert(result, math.floor(x/base))\n\
    \    x = x % base\n  end\n  table.insert(result, x)\n  return table.concat(result)\n\
    end", "  local digits = math.floor(x/base)\n  local result = {}\n  local i = 1\n\
    \  while i <= digits do\n    result[#result+1] = i\n    i = i * base\n  end\n\
    \  return table.concat(result, '') .. '0'\nend", "  local digits = math.floor(x/base)\n\
    \  local rest = x - base*digits\n  return string.format('%d', digits)..string.format('%b',\
    \ rest)\nend", "  local digits = math.floor(x/base)\n  x = x - base*digits\n \
    \ return string.format('%0*d', digits, x)\nend", "  local digits = math.floor(math.log(x,\
    \ base))\n  local digits_str = string.rep('0', digits + 1) .. string.rep('0',\
    \ digits - 1)\n  return string.format('%s%s', digits_str, x:div(base):rem(base))\n\
    end", "  local digits = math.floor(x/base)+1\n  if digits == 0 then\n    return\
    \ \"\"\n  elseif digits == 1 then\n    return tostring(base*digits)\n  else\n\
    \    return tostring(base*digits)..change_base(digits, base)\n  end\nend", " \
    \ if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(math.log(x\
    \ / base))\n  local result = \"\"\n  while digits > 0 do\n    local digit = math.floor((x\
    \ / base) % base)\n    result = tostring(digit) + result\n    x = x / base\n \
    \   digits = digits - 1\n  end\n  return tostring(x) + result\nend", "  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  return string.format(\"\
    %0\" .. digits .. \"d\", x)\nend", "  if x < 10 then\n    return tostring(x)\n\
    \  end\n  local digits = math.floor(x/base)\n  local mod = x % base\n  return\
    \ tostring(digits) .. change_base(mod, base)\nend", "  local digits = math.floor(math.log(x,\
    \ base))\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n\
    \    result = result .. string.char(digit)\n    x = math.floor(x/10)\n  end\n\
    \  return result .. x\nend", "  local digits = math.floor(x/base)\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    result = base * result + digit\n  end\n\
    \  return result\nend", "\t-- base numbers are less than 10.\n\tassert(base <\
    \ 10)\n\tlocal s = ''\n\twhile x > 0 do\n\t\ts = string.format('%d%s', math.floor(x/base),\
    \ s)\n\t\tx = x % base\n\tend\n\treturn s\nend", "  -- base numbers are less than\
    \ 10.\n  assert(base < 10)\n  local digits = math.floor(x/base)\n  local remainder\
    \ = x - base*digits\n  return string.format('%d', digits)..string.format('%d',\
    \ remainder)\nend", "  local s = \"\"\n  local i = 1\n  while x > 0 do\n    local\
    \ t = math.floor(x/base)\n    s = string.sub(tostring(t), -2)..s\n    x = t\n\
    \    i = i + 1\n  end\n  return \"0\"..s\nend", "  local digits = math.floor(x/base)+1\n\
    \  local result = \"\"\n  while digits > 0 do\n    local digit = math.floor(x/base)\
    \ -- integer division\n    local remainder = x % base\n    local digits = digits-1\n\
    \    if digit > 9 then\n      result = result .. \"0\"\n    end\n    result =\
    \ result .. string.char(digit+48)\n    x = remainder\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log(x, base))\n  local result = \"\"\n\
    \  while digits > 0 do\n    local digit = x / base\n    local mod = digits % base\n\
    \    local digit = math.floor(digit)\n    local remainder = digits - digit\n \
    \   if remainder > 0 then\n      result = mod .. result\n    end\n    result =\
    \ digit .. result\n    x = x - digit * base\n    digits = math.floor(math.log(x,\
    \ base))\n  end\n  return result\nend", "  if x < 10 then\n    return tostring(x)\n\
    \  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n  local result\
    \ = \"\"\n  while x > 0 do\n    local digit = tostring(x%base)\n    x = x/base\n\
    \    result = digit .. result\n  end\n  return result .. tostring(x)\nend", " \
    \ local digits = math.floor(x/base)+1\n  local result = \"\"\n  while digits >\
    \ 0 do\n    local digit = math.mod(x, base)+1\n    local remainder = math.floor(digit/base)\n\
    \    digit = digit-remainder*base\n    result = result .. string.format(\"%d\"\
    , digit)\n    x = x%base\n    digits = digits-1\n  end\n  return result\nend",
  "  if x < 10 then\n    return string.format(\"%0*d\", base, x)\n  else\n    return\
    \ string.format(\"%0*d\", base, x)\n  end\nend", "\tlocal digits = math.floor(x/base)\n\
    \tx = x - base*digits\n\treturn string.format(\"%0\" .. digits .. \"d\", x)\n\
    end", "  local digits = math.floor(x/base)+1\n  x = x - base*digits\n  return\
    \ string.format(\"%0*d\", base, digits)\nend", "    if base < 2 then\n       \
    \ error(\"Base must be greater than 1\")\n    end\n    if base == 10 then\n  \
    \      return tostring(x)\n    end\n    local digits = math.floor(x/base)\n  \
    \  local remainder = x - base*digits\n    return tostring(base*digits) + change_base(remainder,\
    \ base)\nend", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits\
    \ = math.floor(x/base)\n  x = x - base*digits\n  local result = \"\"\n  while\
    \ x ~= 0 do\n    local digit = tostring(x%base)\n    x = x/base\n    result =\
    \ digit .. result\n  end\n  return result .. tostring(digits)\nend", "  if x <\
    \ 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - digits * base\n  local digits_str = tostring(digits)\n  local digits_len\
    \ = #digits_str\n  if digits_len > 1 then\n    digits_str = digits_str:sub(1,\
    \ digits_len - 1)\n  end\n  return digits_str .. tostring(x)\nend", "  if x <\
    \ 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - digits * base\n  local digits2 = math.floor(x/base)\n  x = x - digits2\
    \ * base\n  return tostring(digits) .. tostring(base) .. tostring(digits2)\nend",
  "\tlocal s = ''\n\twhile x > 0 do\n\t\ts = string.format('%d', x % base) + s\n\t\
    \tx = math.floor(x / base)\n\tend\n\treturn s\nend", "  local digits = math.floor(x/base)\n\
    \  local mod = x % base\n  return string.format('%d', digits) .. string.format('%0',\
    \ mod)\nend", "  if x < 10 then\n    return string.format(\"%0*d\", base, x)\n\
    \  else\n    return string.format(\"%0*d\", base, x)\n  end\nend", "  local digits\
    \ = math.floor(x/base)\n  local result = \"\"\n  while digits > 0 do\n    local\
    \ digit = math.mod(x, base)\n    result = string.format(\"%s%s\", digit, result)\n\
    \    x = math.floor(x/base)\n    digits = math.floor(x/base)\n  end\n  return\
    \ result\nend", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits\
    \ = math.floor(x/base)\n  x = x - digits * base\n  local result = \"\"\n  while\
    \ x > 0 do\n    local digit = tostring(x%base)\n    x = x / base\n    result =\
    \ digit .. result\n  end\n  return result\nend", "  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base * digits\n\
    \  return tostring(base * digits) + tostring(x)\nend", "  local digits = math.floor(x/base);\n\
    \  x = x - digits * base;\n  return string.format(\"%0*d\", base, digits) .. x;\n\
    end", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(math.log(x\
    \ / base))\n  if digits == 0 then\n    return tostring(x)\n  end\n  local factor\
    \ = 10^(digits - 1)\n  return tostring(x * factor) / factor\nend", "  if base\
    \ < 2 then\n    error('Base must be 2 or greater.')\n  end\n  local digits = math.floor(math.log(x,\
    \ base))\n  local result = x\n  while digits > 0 do\n    result = result * base\
    \ + digit\n    digits = digits - 1\n  end\n  return result\nend", "  local digits\
    \ = math.floor(x/base)\n  local rest = x - base*digits\n  return base*digits ..\
    \ rest\nend", "  local digits = math.floor(x/base)+1\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = base*i\n    local remainder = x-digit\n\
    \    if remainder > 0 then\n      result = result .. \"0\"\n    end\n    result\
    \ = result .. tostring(remainder)\n  end\n  return result\nend", "  if base <\
    \ 2 then\n    error('Base must be 2 or higher')\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  local result = {}\n  for i = 1, digits do\n    table.insert(result,\
    \ string.format('%0', base))\n  end\n  table.insert(result, string.format('%0',\
    \ x))\n  return table.concat(result)\nend", "  local digits = math.floor(math.log(x,\
    \ base))\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n\
    \    local carry = digit > 0 and 1 or 0\n    local digit = digit == 0 and 1 or\
    \ digit\n    result = result .. string.format(\"%c\", digit*base + carry)\n  end\n\
    \  return result\nend", "\tlocal digits = math.floor(x/base)+1\n\tlocal result\
    \ = \"\"\n\twhile digits > 0 do\n\t\tlocal digit = math.mod(x, base)\n\t\tx =\
    \ x/base\n\t\tresult = string.format(\"%s%d\", result, digit)\n\tend\n\treturn\
    \ result\nend", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits\
    \ = math.floor(x/base)\n  x = x - digits * base\n  local result = \"\"\n  while\
    \ x ~= 0 do\n    local digit = tostring(x%base)\n    x = x/base\n    result =\
    \ digit .. result\n  end\n  return result\nend", "  if x < 10 then\n    return\
    \ string.format(\"%0*d\", base, x)\n  else\n    return string.format(\"%0*d\"\
    , base, x)\n  end\nend", "  local s = \"\"\n  local i = 0\n  while i < base do\n\
    \    s = string.format(\"%0*d\", base, x) + s\n    x = math.floor(x/base)\n  \
    \  i = i + 1\n  end\n  return s\nend", "  local digits = math.floor(math.log(x,\
    \ base))\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n\
    \    result = result .. string.char(digit)\n    x = math.floor(x/10)\n  end\n\
    \  if x > 0 then\n    result = result .. string.char(x)\n  end\n  return result\n\
    end", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  return tostring(base*digits) .. tostring(x)\nend", " \
    \ if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  return tostring(base*digits) .. tostring(x)\nend", " \
    \ -- base numbers are less than 10.\n  assert(base < 10)\n  local digits = math.floor(x/base)*base\n\
    \  local result = {}\n  for i = 1, digits do\n    result[#result+1] = string.format(\"\
    %d\", x%base)\n    x = x/base\n  end\n  result[#result+1] = string.format(\"%d\"\
    , x)\n  return table.concat(result)\nend", "  if x < 10 then\n    return string.format(\"\
    %0*d\", base, x)\n  else\n    return string.format(\"%0*d\", base, x)\n  end\n\
    end", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base * digits\n  return tostring(base * digits) + tostring(x)\nend",
  "  local digits = math.floor(x/base)\n  local rest = x - base*digits\n  return string.format('%0*d',\
    \ digits, rest)\nend", "  local digits = math.floor(x/base)\n  local result =\
    \ \"\"\n  while digits > 0 do\n    local digit = math.mod(x, base)\n    result\
    \ = string.format(\"%s%s\", digit, result)\n    x = math.floor(x/base)\n    digits\
    \ = math.floor(x/base)\n  end\n  return result\nend", "  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  return tostring(base*digits) + tostring(x)\nend", "  local digits = math.floor(x/base)+1\n\
    \  if digits == 0 then\n    return ''\n  end\n  local digits_str = table.concat(digits,\
    \ '') .. base\n  return digits_str:sub(1, digits_str:len())\nend", "  -- base\
    \ numbers are less than 10.\n  if base < 10 then\n    error('base numbers are\
    \ less than 10.')\n  end", "  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  return string.format(\"%0*d\", base, digits)\nend", "  -- base numbers are\
    \ less than 10.\n  assert(base < 10)\n  local digits = math.floor(math.log(x,\
    \ base))\n  -- return string representation after the conversion.\n  return string.format('%d',\
    \ x / base^digits)\nend", "  local s = \"\"\n  local digits = math.floor(x/base)\n\
    \  while digits > 0 do\n    local digit = math.mod(x, base)\n    s = string.format(\"\
    %0\" .. digits .. \"d\", digit) + s\n    x = math.floor(x/base)\n  end\n  return\
    \ s\nend", "  local digits = math.floor(x/base)\n  local rest = x - base*digits\n\
    \  return string.format('%d', digits)..string.format('%b', rest)\nend", "  if\
    \ x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(math.log(x\
    \ / base))\n  local new_base = 10\n  while digits > 0 do\n    local digit = math.floor((digits\
    \ - 1) / 2)\n    new_base = base * new_base\n    if x % new_base == 0 then\n \
    \     digits = digits - 1\n      x = x / new_base\n    else\n      x = x % new_base\n\
    \    end\n  end\n  return tostring(x)\nend", "  local digits = math.floor(x/base)*base\n\
    \  local result = \"\"\n  while digits > 0 do\n    local digit = math.floor((digits-1)\
    \ / base)\n    local remainder = digits%base\n    result = string.format(\"%0*d\"\
    , base, digit) + result\n    digits = remainder\n  end\n  return result\nend",
  "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  local mod = x % base\n  return change_base(digits, base) + tostring(mod)\n\
    end", "  local digits = math.floor(x/base)+1\n  local result = \"\"\n  for i =\
    \ 1, digits do\n    local digit = math.floor(x/base*base)+1\n    if digit > 9\
    \ then\n      digit = digit-base+10\n    end\n    result = result .. digit\n \
    \   x = x - digit*base\n  end\n  return result\nend", "  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - digits *\
    \ base\n  return tostring(x) + tostring(digits)\nend", "  if x < 10 then\n   \
    \ return tostring(x)\n  end\n  local digits = math.floor(x/base)\n  local remainder\
    \ = x % base\n  return tostring(base * digits + remainder)\nend", "  local digits\
    \ = math.floor(math.log(x, base))\n  local result = \"\"\n  local power = base\n\
    \  while digits > 0 do\n    local digit = math.floor((x - power) / power)\n  \
    \  local digitString = tostring(digit)\n    if digits > 1 then\n      digitString\
    \ = string.format(\"%0\" .. digits .. \"d\", digit)\n    end\n    result = result\
    \ .. digitString\n    power = power * base\n    digits = digits - 1\n  end\n \
    \ return result\nend", "  local digits = math.floor(x/base)+1\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base*base)+1\n\
    \    if digit > 9 then\n      digit = digit - 9\n    end\n    result = result\
    \ .. string.char(tonumber(digit))\n  end\n  return result\nend", "  local digits\
    \ = math.floor(x/base);\n  x = x - base*digits;\n  return string.format(\"%0*d\"\
    , base, digits)\nend", "  local digits = math.floor(math.log(x, base))\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n\
    \    result = string.sub(result, 1, i-1) + digit\n    x = math.floor(x/10)\n \
    \ end\n  return result .. x\nend", "  local digits = math.floor(math.log(x, base))\n\
    \  local result = \"\"\n  while digits > 0 do\n    local digit = x % base\n  \
    \  x = x / base\n    result = string.sub(result, 1, digits-1) + digit\n  end\n\
    \  if x ~= 0 then\n    result = result .. x\n  end\n  return result\nend", " \
    \ -- base numbers are less than 10.\n  assert(base < 10)\n  local s = ''\n  --\
    \ Convert to string and remove all non-digits characters.\n  -- This allows us\
    \ to handle negative numbers.\n  s = x:gsub('%d+', '')\n  -- Convert from base\
    \ 10 to base 10.\n  s = s:gsub('%d', function(digit)\n    local digit = tonumber(digit)\n\
    \    if digit == 0 then\n      digit = '1'\n    end\n    return string.format('%0',\
    \ base*digit)\n  end)\n  return s\nend", "  local s = \"\"\n  local i = 1\n  while\
    \ x > 0 do\n    local digit = x % base\n    s = string.rep(\"0\", i - 1) + digit\
    \ .. s\n    x = math.floor(x/base)\n    i = i + 1\n  end\n  return s\nend", " \
    \ local digits = math.floor(math.log(x, base))\n  local result = \"\"\n  for i\
    \ = 1, digits do\n    local digit = math.floor(x/base%10)\n    result = string.format(\"\
    %s%d%s\", result, digit, base.chars[i])\n    x = math.floor(x/base)\n  end\n \
    \ return result\nend", "  local digits = math.floor(x/base)\n  local result =\
    \ \"\"\n  while digits > 0 do\n    local digit = math.mod(x, base)\n    result\
    \ = string.format(\"%s%s\", digit, result)\n    x = math.floor(x/base)\n    digits\
    \ = math.floor(x/base)\n  end\n  return result\nend", "  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base * digits\n\
    \  return tostring(base * digits) + tostring(x)\nend", "  if x < 10 then\n   \
    \ return tostring(x)\n  end\n  local digits = math.floor(x/base)\n  local rest\
    \ = x - base*digits\n  return change_base(rest, base):reverse()\nend", "  local\
    \ digits = math.floor(x/base)\n  local result = \"\"\n  while digits > 0 do\n\
    \    local digit = math.mod(x, base)\n    result = string.format(\"%s%s\", digit,\
    \ result)\n    x = math.floor(x/base)\n    digits = math.floor(x/base)\n  end\n\
    \  return result\nend", "  local digits = math.floor(x/base)\n  local mod = x\
    \ % base\n  local new_digits = digits + mod\n  if new_digits < 10 then\n    return\
    \ string.format(\"%0*d\", base, new_digits)\n  else\n    return string.format(\"\
    %0*d\", base, new_digits)\n  end\nend", "  local digits = math.floor(x/base)\n\
    \  local result = \"\"\n  while digits > 0 do\n    local digit = math.floor((digits\
    \ % base)/10)\n    result = string.sub(bases, digit*10+1, digit*10+1) + result\n\
    \    digits = math.floor((digits - digit*10)/base)\n  end\n  return result\nend",
  "  local digits = math.floor(x/base)+1\n  x = x - base*digits\n  return tostring(base*digits)\
    \ .. x\nend", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits\
    \ = math.floor(x/base)\n  x = x - base*digits\n  return tostring(base*digits)\
    \ + tostring(x)\nend", "  local digits = math.floor(math.log(x, base))\n  local\
    \ result = \"\"\n  while digits > 0 do\n    local digit = math.mod(x, base)\n\
    \    local remainder = math.floor(x / base)\n    result = result .. string.format(\"\
    %d\", remainder)\n    x = math.floor((x - remainder) / base)\n    digits = digits\
    \ - 1\n  end\n  return result .. string.format(\"%d\", x)\nend", "  local digits\
    \ = math.floor(math.log(x, base))\n  local result = \"\"\n  for i = 1, digits\
    \ do\n    local digit = math.floor(x/base%10)\n    result = string.sub(result,\
    \ 1, i-1) + digit\n    x = math.floor(x/10)\n  end\n  return result .. x\nend",
  "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  return tostring(base*digits) + tostring(x)\nend", " \
    \ if base < 2 then\n    error('base must be >= 2')\n  end\n  local digits = math.floor(x/base^0)\n\
    \  return base * digits\nend", "  if x < 10 then\n    return tostring(x)\n  end\n\
    \  local digits = math.floor(x/base)\n  x = x - base*digits\n  local digits_str\
    \ = tostring(digits)\n  local digits_len = #digits_str\n  local digits_len = digits_len\
    \ + digits_len\n  if digits_len < 3 then\n    digits_len = digits_len + 1\n  end\n\
    \  local digits_str = string.sub(digits_str, 1, digits_len)\n  local digits_str\
    \ = string.gsub(digits_str, \"0\", tostring(base))\n  return digits_str\nend",
  "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - digits * base\n  local result = \"\"\n  while x ~= 0 do\n    local\
    \ digit = tostring(x%base)\n    x = math.floor(x/base)\n    result = digit ..\
    \ result\n  end\n  return result .. digits\nend", "  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  local result = \"\"\n  while x > 0 do\n    local digit = tostring(x%base)\n\
    \    x = math.floor(x/base)\n    result = digit .. result\n  end\n  return result\
    \ .. tostring(x)\nend", "  local digits = math.floor(x/base)\n  local result =\
    \ {}\n  for i = 1, digits do\n    table.insert(result, math.floor(x/base))\n \
    \   x = x % base\n  end\n  table.insert(result, x)\n  return table.concat(result)\n\
    end", "  if base < 2 then\n    error('Base must be >= 2')\n  end\n  local s =\
    \ ''\n  local i = 1\n  while x > 0 do\n    local digit = x % base\n    s = string.sub(tostring(digit),\
    \ i - 1, 1)\n    x = x / base\n    i = i + 1\n  end\n  return s\nend", "  if base\
    \ < 2 then\n    error(\"Base must be greater than 1.\")\n  end\n  local s = \"\
    \"\n  while x ~= 0 do\n    local digit = x % base\n    x = x / base\n    s = string.sub(tostring(digit),\
    \ -base) + s\n  end\n  return s\nend", "    if x < 10 then\n        return tostring(x)\n\
    \    end\n    local digits = math.floor(math.log(x / base))\n    local digits_str\
    \ = tostring(digits)\n    local digits_len = #digits_str\n    local digits_pow\
    \ = math.pow(base, digits)\n    local digits_str = tostring(digits_pow)\n    local\
    \ digits_len = #digits_str\n    local digits_pow = math.pow(base, digits)\n  \
    \  local digits_str = tostring(digits_pow)\n    local digits_len = #digits_str\n\
    \    local digits_pow = math.pow(base, digits)\n    local digits_str = tostring(digits_pow)\n\
    \    local digits_len = #digits_str\n    local digits_pow = math.pow(base, digits)\n\
    \    local digits_str = tostring(digits_pow)\n    local digits_len = #digits_str\n\
    \    local digits_pow = math.pow(base, digits)\n    local digits_str = tostring(digits_pow)\n\
    \    local digits_len = #digits_str\n    local digits_pow = math.pow(base, digits)\n\
    \    local digits_str = tostring(digits_pow)\n    local digits_len = #digits_str\n\
    \    local digits_pow = math.pow(base, digits)\n    local digits_str = tostring(digits_pow)\n\
    \    local digits_len = #digits_str\n    local digits_pow = math.pow(base, digits)\n\
    \    local digits_str = tostring(digits_pow)\n    local digits_len = #digits_str\n\
    \    local digits_pow = math.pow(base, digits)\n    local digits_str = tostring(digits_pow)\n\
    \    local digits_len = #digits_str\n    local digits_pow = math.pow(base, digits)\n\
    \    local digits_str = tostring(digits_pow)\n    local digits_len = #digits_str\n\
    \    local digits_pow = math.pow(base, digits)\n    local digits_str = tostring(digits_pow)\n\
    \    local digits_len = #digits_str\n    local digits_pow = math.pow(base, digits)\n\
    \    local digits_str = tostring(digits_pow)\n    local digits_len = #digits_str\n\
    \    local digits_pow = math.pow(base, digits)\n    local digits_str = tostring(digits_pow)\n\
    \    local digits_len = #digits_str\n    local digits_pow = math.pow(base, digits)\n\
    \    local digits_str = tostring(digits_pow)\n    local digit", "  -- Base is\
    \ less than 10.\n  if base < 10 then\n    local digits = math.floor(x/base)\n\
    \    return digits * base + x%base\n  end\n  -- Base is greater than 10.\n  local\
    \ digits = math.floor(x/base)\n  return digits * base\nend", "  if x < 10 then\n\
    \    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x %\
    \ base\n  local result = \"\"\n  while x > 0 do\n    local digit = digits % base\n\
    \    digits = digits / base\n    result = tostring(digit) + result\n    x = x\
    \ * base + digit\n  end\n  return result\nend", "  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x", "  local digits = math.floor(math.log(x, base))\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = x % base\n    x = x\
    \ / base\n    result = result .. digit\n  end\n  return result\nend", "  -- base\
    \ numbers are less than 10.\n  assert(base < 10)\n  local digits = math.floor(math.log(x,\
    \ base))\n  local result = \"\"\n  -- Convert to string and reverse the string.\n\
    \  -- The string will be in the right order when converted back to a number.\n\
    \  for i = digits, 0, -1 do\n    local digit = math.floor(x/base%10)\n    result\
    \ = string.sub(tostring(digit), -#digit+1, -1) + result\n    x = math.floor(x/base)\n\
    \  end\n  return result\nend", "  local digits = math.floor(x/base)\n  local rest\
    \ = x - base*digits\n  return string.format('%d', digits)..string.format('%b',\
    \ rest)\nend", "  local digits = math.floor(x/base)\n  local result = \"\"\n \
    \ while digits > 0 do\n    local digit = math.mod(x, base)\n    local remainder\
    \ = math.floor(digit/base)\n    local remainder_str = string.format(\"%0*d\",\
    \ base, remainder)\n    result = remainder_str .. result\n    x = math.floor(digit/base)\n\
    \    digits = math.floor(x/base)\n  end\n  return result\nend", "  local digits\
    \ = math.floor(x/base)*base\n  local result = \"\"\n  while digits > 0 do\n  \
    \  local digit = math.mod(digits, base)\n    digits = math.floor(digits/base)\n\
    \    result = string.sub(tostring(digit), -digit+1) + result\n  end\n  return\
    \ result\nend", "  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  return string.format(\"%0\" .. digits .. \"d\", x)\nend", "    if base < 2\
    \ then\n        error(\"Base must be greater than 1\")\n    end\n    if base ==\
    \ 2 then\n        return string.format(\"%0*d\", base, x)\n    end\n    local\
    \ s = \"\"\n    local i = 1\n    while x > 0 do\n        local digit = x % base\n\
    \        x = x / base\n        s = string.format(\"%0*d\", i, digit) + s\n   \
    \     i = i + 1\n    end\n    return s\nend", "  local digits = math.floor(x/base)+1\n\
    \  local result = {}\n  for i = 1, digits do\n    table.insert(result, base*i)\n\
    \  end\n  return table.concat(result)\nend", "  if x < 10 then\n    return tostring(x)\n\
    \  end\n  local digits = math.floor(x/base)\n  local rest = x - base*digits\n\
    \  return change_base(rest, base):reverse()\nend", "  local digits = math.floor(x/base)\n\
    \  local remainder = x - base*digits\n  return string.format('%d', digits)..string.format('%b',\
    \ remainder)\nend", "  local digits = math.floor(x/base)\n  local rest = x - base*digits\n\
    \  return string.format('%d', digits)..string.format('%b', rest)\nend", "  local\
    \ digits = math.floor(math.log(x, base))\n  local result = \"\"\n  for i = 1,\
    \ digits do\n    local digit = math.floor(x/base%10)\n    result = string.format(\"\
    %d%s\", digit, result)\n    x = math.floor(x/10)\n  end\n  return result\nend",
  "  local s = \"\"\n  local i = 1\n  while x > 0 do\n    local digit = x % base\n\
    \    s = string.format(\"%d%s\", digit, s)\n    x = math.floor(x / base)\n   \
    \ if x > 0 then\n      s = string.format(\"%d%s\", x, s)\n    end\n    i = i +\
    \ 1\n  end\n  return s\nend", "\t-- base numbers are less than 10.\n\t-- >>> change_base(8,\
    \ 3)\n\t-- '22'\n\t-- >>> change_base(8, 2)\n\t-- '1000'\n\t-- >>> change_base(7,\
    \ 2)\n\t-- '111'\n\tif base < 10 then\n\t\terror('Base must be greater than or\
    \ equal to 10.')\n\tend\n\t-- Convert x to a string and remove any trailing zeros.\n\
    \tlocal s = x:tostring()\n\ts = s:gsub('0+$', '')\n\t-- Convert x to a number\
    \ in base base and return the result.\n\treturn tonumber(s, base)\nend", "  local\
    \ digits = math.floor(x/base)\n  local rest = x - base*digits\n  return string.format('%d',\
    \ digits)..string.format('%d', rest)\nend", "  if x < 10 then\n    return tostring(x)\n\
    \  end\n  local digits = math.floor(x/base)\n  x = x % base\n  return tostring(digits)\
    \ .. change_base(x, base)\nend", "  if x < 10 then\n    return tostring(x)\n \
    \ end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10\
    \ then\n    return tostring(base*digits)\n  end\n  return tostring(base*digits)..tostring(x)\n\
    end", "  local digits = math.floor(math.log(abs(x), base))\n  local digits_str\
    \ = string.rep('0', digits + 1) .. '1'\n  return tonumber(string.format('%.' ..\
    \ digits .. 'f', x / base))\nend", "    if base < 2 then\n        error('base\
    \ must be greater than or equal to 2')\n    end\n    if base == 10 then\n    \
    \    return tostring(x)\n    end\n    local digits = math.floor(x/base)\n    local\
    \ rest = x - base*digits\n    return tostring(digits) .. change_base(rest, base)\n\
    end", "  local s = \"\"\n  local i = 1\n  while x > 0 do\n    local digit = x%base\n\
    \    x = math.floor(x/base)\n    s = string.sub(tostring(digit), -i-1, -i-1) +\
    \ s\n    i = i + 1\n  end\n  return s\nend", "  local digits = math.floor(x/base)+1\n\
    \  local result = \"\"\n  while digits > 0 do\n    local digit = math.floor(x/base)\n\
    \    local remainder = x % base\n    local digitString = string.format(\"%0d\"\
    , digit)\n    if remainder == 0 then\n      result = digitString .. result\n \
    \   else\n      result = digitString .. string.format(\"%0d\", remainder) .. result\n\
    \    end\n    x = math.floor(x/base)\n    digits = digits - 1\n  end\n  return\
    \ result\nend", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits\
    \ = math.floor(x/base)\n  x = x - base*digits\n  local result = \"\"\n  while\
    \ x > 0 do\n    local digit = tostring(x%base)\n    x = x/base\n    result = digit\
    \ .. result\n  end\n  return result .. tostring(x)\nend", "  local digits = math.floor(x/base)+1\n\
    \  local result = \"\"\n  while digits > 0 do\n    local digit = math.mod(x, base)\n\
    \    local digits = digits-1\n    result = result .. digit\n    x = digit\n  end\n\
    \  return result\nend", "  local digits = math.floor(x/base)+1\n  local result\
    \ = \"\"\n  while digits > 0 do\n    local digit = math.mod(x, base)\n    local\
    \ remainder = x/base\n    local digits = digits-1\n    result = result .. string.format(\"\
    %d\", digit)\n    x = remainder\n  end\n  return result\nend", "  local digits\
    \ = math.floor(math.log(abs(x), base))\n  local result = \"\"\n  for i = 1, digits\
    \ do\n    local digit = math.floor((x / base) % (base))\n    x = x / base\n  \
    \  result = result .. digit\n  end\n  return result .. x\nend", "  local s = \"\
    \"\n  local i = 1\n  while x > 0 do\n    local digit = x%base\n    if digit ==\
    \ 0 then\n      s = string.rep(\"0\", i - 1) + s\n    else\n      s = string.rep(\"\
    1\", i - 1) + s\n    end\n    x = math.floor(x/base)\n    i = i + 1\n  end\n \
    \ return s\nend", "  local s = \"\"\n  local i = 1\n  while x > 0 do\n    local\
    \ digit = x%base\n    s = string.rep(\"0\", digit) + s\n    x = math.floor(x/base)\n\
    \  end\n  return s\nend", "  if x < 10 then\n    return tostring(x)\n  end\n \
    \ local digits = math.floor(x/base)\n  x = x - base*digits\n  return tostring(base*digits)\
    \ + tostring(x)\nend", "  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  local result = \"\"\n\
    \  while x > 0 do\n    local digit = tostring(x%base)\n    x = math.floor(x/base)\n\
    \    result = digit .. result\n  end\n  return result .. tostring(x)\nend", " \
    \ local digits = math.floor(x/base)\n  local result = \"\"\n  for i = 1, digits\
    \ do\n    local digit = math.mod(x, base)\n    local digitString = string.format(\"\
    %0*d\", base, digit)\n    result = result .. digitString\n    x = math.floor(x/base)\n\
    \  end\n  return result\nend", "  local s = \"\"\n  local i = 1\n  while x > 0\
    \ do\n    local t = math.floor(x/base)\n    if t > 0 then\n      s = string.rep(\"\
    0\", t-1) + s\n    end\n    s = string.rep(\"0\", base-1) + s + string.rep(\"\
    1\", base-x%base)\n    x = x%base\n  end\n  return s\nend", "  local digits =\
    \ math.floor(math.log(abs(x), base))\n  local digits_str = string.rep('0', digits\
    \ + 1) .. string.rep('0', digits - 1)\n  return ((digits > 0 and x) or 0) * base^digits\n\
    end", "  local digits = math.floor(math.log(x, base))\n  local digits_str = string.format(\"\
    %0\", digits)\n  local digits_len = digits_str:len() - 1 -- -1 to remove leading\
    \ zero\n  local digits_str = digits_str:sub(1, digits_len)\n  local digits_str\
    \ = string.reverse(digits_str)\n  local digits_len = digits_str:len() - 1 -- -1\
    \ to remove leading zero\n  local digits_str = digits_str:sub(1, digits_len)\n\
    \  local digits_str = string.reverse(digits_str)\n  local digits_len = digits_str:len()\
    \ - 1 -- -1 to remove leading zero\n  local digits_str = digits_str:sub(1, digits_len)\n\
    \  local digits_str = string.reverse(digits_str)\n  local digits_len = digits_str:len()\
    \ - 1 -- -1 to remove leading zero\n  local digits_str = digits_str:sub(1, digits_len)\n\
    \  local digits_str = string.reverse(digits_str)\n  local digits_len = digits_str:len()\
    \ - 1 -- -1 to remove leading zero\n  local digits_str = digits_str:sub(1, digits_len)\n\
    \  local digits_str = string.reverse(digits_str)\n  local digits_len = digits_str:len()\
    \ - 1 -- -1 to remove leading zero\n  local digits_str = digits_str:sub(1, digits_len)\n\
    \  local digits_str = string.reverse(digits_str)\n  local digits_len = digits_str:len()\
    \ - 1 -- -1 to remove leading zero\n  local digits_str = digits_str:sub(1, digits_len)\n\
    \  local digits_str = string.reverse(digits_str)\n  local digits_len = digits_str:len()\
    \ - 1 -- -1 to remove leading zero\n  local digits_str = digits_str:sub(1, digits_len)\n\
    \  local digits_str = string.reverse(digits_str)\n  local digits_len = digits_str:len()\
    \ - 1 -- -1 to remove leading zero\n  local digits_str = digits_str:sub(1, digits_len)\n\
    \  local digits_str = string.reverse(digits_str)\n  local digits_len = digits_str:len()\
    \ - 1 -- -1 to remove leading zero\n  local digits_str = digits_str:sub(1, digits_len)\n\
    \  local digits_str = string.reverse(digits_str)\n  local digits_len = digits_str:len()\
    \ - 1 -- -1 to remove leading zero\n  local digits_str = digits_str:sub(1, digits_len)\n\
    \  local digits_str = string.reverse(digits_str)\n  local digit", "  local digits\
    \ = math.floor(x/base)\n  x = x - base*digits\n  return string.format('%d', x)\
    \ + string.format('%0*d', base, digits)\nend", "  local digits = math.floor(math.log(x,\
    \ base))\n  local result = \"\"\n  while digits > 0 do\n    local digit = x %\
    \ base\n    local remainder = x / base\n    local result = result .. string.format(\"\
    %d\", digit)\n    x = remainder\n    digits = digits - 1\n  end\n  return result\
    \ .. string.format(\"%d\", x)\nend", "\tlocal digits = math.floor(math.log(abs(x),\
    \ base))\n\tlocal result = \"\"\n\tlocal i = 1\n\twhile i <= digits do\n\t\tlocal\
    \ digit = math.floor((x / base) * base) + 1\n\t\tx = x - digit * base\n\t\tresult\
    \ = result .. digit\n\t\ti = i + 1\n\tend\n\treturn result\nend", "  local digits\
    \ = math.floor(x/base)+1\n  local result = \"\"\n  for i = 1, digits do\n    local\
    \ digit = base*i\n    local remainder = x-digit\n    if remainder < 0 then\n \
    \     remainder = -remainder\n      digit = digit+base\n    end\n    result =\
    \ result..digit\n  end\n  return result\nend", "  -- base numbers are less than\
    \ 10.\n  assert(base < 10)\n  local s = \"\"\n  while x ~= 0 do\n    local digit\
    \ = x % base\n    x = x / base\n    s = string.rep(\"0\", base-1) + digit .. s\n\
    \  end\n  return s\nend", "  local digits = math.floor(x/base)\n  local remainder\
    \ = x - base*digits\n  return string.format('%d', digits)..string.format('%0*d',\
    \ base, remainder)\nend", "    if x < 10 then\n        return string.format(\"\
    %0\" .. base .. \"d\", x)\n    else\n        return string.format(\"%0\" .. base\
    \ .. \"d\", x / base)\n    end\nend", "  local digits = math.floor(math.log(abs(x),\
    \ base))\n  local digits_str = string.format(\"%0.\" .. digits .. \"d\", x / base^digits)\n\
    \  return digits_str\nend", "  local digits = math.floor(x/base)+1\n  local result\
    \ = \"\"\n  while digits > 0 do\n    local digit = math.floor(x/base)\n    local\
    \ remainder = x - digit * base\n    if remainder > 0 then\n      result = string.format(\"\
    %0*d\", digits, remainder) + result\n    end\n    x = digit\n    digits = math.floor(x/base)+1\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log(x + 1, base))\n\
    \  return tonumber(string.format(\"%0.\" .. (base * 2 - digits) .. \"d\", x /\
    \ base))\nend", "  -- base numbers are less than 10.\n  assert(base < 10)\n  --\
    \ convert x to string\n  local str = tostring(x)\n  -- convert string to number\n\
    \  local n = tonumber(str)\n  -- convert number to new base\n  local new_n = n\
    \ * base\n  -- convert number to string\n  str = tostring(new_n)\n  -- convert\
    \ string to number\n  local new_x = tonumber(str)\n  return new_x\nend", "  if\
    \ x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  local base10 = 10\n  local base2 = 0\n  while x > 0\
    \ do\n    local digit = math.floor(x/base10)\n    x = x - base10*digit\n    if\
    \ digit == 0 then\n      base10 = base10*base2\n      base2 = base2+1\n    end\n\
    \  end\n  return tostring(base2)..tostring(base10)\nend", "  local digits = math.floor(x/base)\n\
    \  local mod = x % base\n  return string.format('%d', digits)..string.format('%c',\
    \ mod)\nend", "  local digits = math.floor(math.log(x, base))\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n  \
    \  result = result .. string.char(digit)\n    x = math.floor(x/10)\n  end\n  return\
    \ result .. x\nend", "  local digits = math.floor(math.log(x, base))\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n\
    \    result = string.format(\"%s%d\", result, digit)\n    x = math.floor(x/10)\n\
    \  end\n  return result\nend", "  local digits = math.floor(x/base)*base\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base%base)*base\n\
    \    result = result .. string.char(digit)\n  end\n  return result\nend", "  local\
    \ digits = math.floor(x/base)\n  local result = \"\"\n  while digits > 0 do\n\
    \    local digit = math.mod(x, base)\n    result = string.format(\"%s%d\", result,\
    \ digit)\n    x = math.floor(x/base)\n    digits = digits-1 \n  end\n  return\
    \ result\nend", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits\
    \ = math.floor(x/base)\n  x = x % base\n  local digits_str = tostring(digits)\n\
    \  local digits_len = #digits_str\n  local digits_len = digits_len + digits_len\n\
    \  local digits_str = string.sub(digits_str, 1, digits_len)\n  local digits_str\
    \ = string.gsub(digits_str, \"0\", tostring(base))\n  return digits_str .. tostring(x)\n\
    end", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x", "  local digits = math.floor(math.log(x,\
    \ base))\n  local result = \"\"\n  for i = 1, digits do\n    local digit = x /\
    \ base\n    local mod = math.floor(digit)\n    digit = mod * base\n    local remainder\
    \ = math.mod(digit, base)\n    result = result .. tostring(digit) .. tostring(remainder)\n\
    \  end\n  return result\nend", "  -- base numbers are less than 10.\n  assert(base\
    \ < 10)\n  local s = ''\n  while x ~= 0 do\n    local digit = x % base\n    s\
    \ = string.format('%s%d', s, digit)\n    x = math.floor(x/base)\n  end\n  return\
    \ s\nend", "  local digits = math.floor(math.log(x, base))\n  local result = \"\
    \"\n  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n    result\
    \ = result .. string.char(digit)\n    x = math.floor(x/10)\n  end\n  return result\
    \ .. x\nend", "  local digits = math.floor(math.log(x, base))\n  local result\
    \ = \"\"\n  local i = 0\n  while i < digits do\n    local digit = math.floor(x/base%10)\n\
    \    local remainder = x/base\n    result = result .. string.char(digit+48) ..\
    \ string.char(remainder+48)\n    x = remainder\n    i = i + 1\n  end\n  return\
    \ result\nend", "  local s = \"\"\n  local i = 1\n  while x > 0 do\n    local\
    \ digit = x % base\n    x = x / base\n    s = string.rep(\"0\", digit) + s\n \
    \   i = i + 1\n  end\n  return s\nend", "  if x < 10 then\n    return tostring(x)\n\
    \  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 0\
    \ then\n    digits = -digits\n    x = -x\n  end\n  return tostring(digits, base)\
    \ + tostring(x)\nend", "  local digits = math.floor(x/base)+1\n  local result\
    \ = \"\"\n  while digits > 0 do\n    local digit = math.mod(x, base)\n    local\
    \ remainder = math.floor(digit/base)\n    result = string.format(\"%s%d%s\", result,\
    \ digit, remainder == 0 and \"\" or \"-\")\n    x = math.floor(digit/base)\n \
    \   digits = digits-1\n  end\n  return result\nend", "    if x < 10 then\n   \
    \     return string.format(\"%0*d\", base, x)\n    else\n        return string.format(\"\
    %0*d\", base, x)\n    end\nend", "  local digits = math.floor(x/base)\n  local\
    \ remainder = x - base*digits\n  return string.format('%d', digits)..string.format('%b',\
    \ base*digits)..string.format('%d', remainder)\nend", "  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - digits *\
    \ base\n  return tostring(digits) .. tostring(x)\nend", "  local digits = math.floor(x/base)+1\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base*base)+1\n\
    \    result = string.format(\"%0\" .. digit .. \"d\", result)\n    x = x - digit*base\n\
    \  end\n  return result\nend", "  local digits = math.floor(x/base)\n  local result\
    \ = \"\"\n  while digits > 0 do\n    local digit = math.mod(x, base)\n    result\
    \ = string.sub(tostring(digit), -base) + result\n    x = math.floor(x / base)\n\
    \  end\n  return result\nend", "  local digits = math.floor(x/base)\n  local remainder\
    \ = x - digits * base\n  return digits .. base:reverse():gsub('%d+', function(digit)\n\
    \    return base * tonumber(digit) + remainder\n  end)\nend", "  if x < 10 then\n\
    \    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x -\
    \ base*digits\n  local result = \"\"\n  while x >= base do\n    local digit =\
    \ tostring(x)\n    x = x - base\n    result = digit .. result\n  end\n  return\
    \ result .. tostring(x)\nend", "  local digits = math.floor(math.log(x, base))\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n\
    \    result = string.sub(result, 1, i-1) + tostring(digit)\n    x = math.floor(x/10)\n\
    \  end\n  return result .. tostring(x)\nend", "  local digits = math.floor(x/base)\n\
    \  local result = {}\n  for i = 1, digits do\n    table.insert(result, math.floor(x/base))\n\
    \    x = x % base\n  end\n  table.insert(result, x)\n  return table.concat(result)\n\
    end", "  local digits = math.floor(x/base)\n  x = x - base*digits\n  return string.format(\"\
    %0*d\", base, digits)\nend", "  if x < 10 then\n    return tostring(x)\n  end\n\
    \  local digits = math.floor(x/base)\n  x = x - base*digits\n  return tostring(base*digits)\
    \ + tostring(x)\nend", "  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  return string.format('%d', x) + string.format('%0*d', base, digits)\nend",
  "  local s = \"\"\n  local digits = math.floor(x/base)\n  x = x - digits * base\n\
    \  while x >= base do\n    s = string.format(\"%0\" .. digits .. \"d\", x%base)\
    \ + s\n    x = math.floor(x/base)\n  end\n  return s\nend", "  local digits =\
    \ math.floor(x/base)+1\n  local result = \"\"\n  for i = 1, digits do\n    local\
    \ digit = math.mod(x, base)\n    result = result .. digit\n    x = math.floor(x/base)\n\
    \  end\n  return result\nend", "  local digits = math.floor(x/base)\n  x = x -\
    \ base*digits\n  return string.format(\"%0*d\", base, digits)\nend", "  if x <\
    \ 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  local digits_str = tostring(digits)\n  local digits_len\
    \ = #digits_str\n  if digits_len > 0 then\n    return digits_str .. change_base(x,\
    \ base)\n  else\n    return \"\"\n  end\nend", "  local digits = math.floor(x/base)\n\
    \  local result = \"\"\n  while digits > 0 do\n    local digit = math.floor(x/base)\n\
    \    local remainder = x - digit*base\n    if remainder > 0 then\n      result\
    \ = string.format(\"%0*d\", base, digit) + result\n    end\n    x = digit\n  end\n\
    \  return result\nend", "  if x < 10 then\n    return string.format(\"%u\", x)\n\
    \  else\n    local digits = math.floor(math.log(x / base))\n    local digit =\
    \ digits % base\n    return string.format(\"%u\", x / base * base + digit)\n \
    \ end\nend", "  if x < 10 then\n    return string.format(\"%0*d\", base, x)\n\
    \  else\n    return string.format(\"%0*d\", base, x)\n  end\nend", "  local digits\
    \ = math.floor(math.log(x, base))\n  local result = \"\"\n  local i = 0\n  while\
    \ i < digits do\n    local digit = math.floor(x/base%10)\n    local carry = (x%base)/10\n\
    \    local digitstr = string.format(\"%0.d\", digit)\n    if carry > 0 then\n\
    \      digitstr = string.format(\"%0.d\", carry) + digitstr\n    end\n    result\
    \ = result .. digitstr\n    x = x%base\n    i = i + 1\n  end\n  return result\n\
    end", "\tlocal digits = math.floor(x/base)+1\n\tlocal result = \"\"\n\twhile digits\
    \ > 0 do\n\t\tlocal digit = math.mod(x, base)\n\t\tx = math.floor(x / base)\n\t\
    \tresult = string.format(\"%s%s\", digit, result)\n\tend\n\treturn result\nend",
  "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - digits * base\n  local digits2 = math.floor(x/base)\n  x = x - digits2\
    \ * base\n  local digits3 = math.floor(x/base)\n  x = x - digits3 * base\n  local\
    \ digits4 = math.floor(x/base)\n  x = x - digits4 * base\n  local digits5 = math.floor(x/base)\n\
    \  x = x - digits5 * base\n  local digits6 = math.floor(x/base)\n  x = x - digits6\
    \ * base\n  local digits7 = math.floor(x/base)\n  x = x - digits7 * base\n  local\
    \ digits8 = math.floor(x/base)\n  x = x - digits8 * base\n  local digits9 = math.floor(x/base)\n\
    \  x = x - digits9 * base\n  local digits10 = math.floor(x/base)\n  x = x - digits10\
    \ * base\n  return tostring(digits10) + tostring(digits9) + tostring(digits8)\
    \ + tostring(digits7) + tostring(digits6) + tostring(digits5) + tostring(digits4)\
    \ + tostring(digits3) + tostring(digits2) + tostring(digits)\nend", "  if x <\
    \ 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  return tostring(base*digits) + tostring(x)\nend", " \
    \ local s = \"\"\n  local i = 1\n  while x > 0 do\n    local digit = x%base\n\
    \    s = string.rep(\"0\", digit) + s\n    x = math.floor(x/base)\n    i = i +\
    \ 1\n  end\n  return s\nend", "    if x < 10 then\n        return string.format(\"\
    %0*d\", base, x)\n    else\n        return string.format(\"%0*d\", base, x)\n\
    \    end\nend", "  local digits = math.floor(math.log(x, base))\n  local result\
    \ = \"\"\n  while digits > 0 do\n    local digit = math.floor((digits - 1) / base)\
    \ + 1\n    result = string.format(\"%s%0*d\", result, base, digit)\n    digits\
    \ = digits - (digit * base)\n  end\n  return result\nend", "  if x < 10 then\n\
    \    return tostring(x)\n  end\n  local digits = math.floor(math.log(x / base))\n\
    \  local digits_str = tostring(digits)\n  local digits_len = #digits_str\n  local\
    \ digits_pow = math.pow(base, digits)\n  local digits_div = digits_pow / x\n \
    \ local digits_mod = digits_pow % x\n  local digits_str = digits_str:sub(1, digits_len\
    \ - 1)\n  local digits_div = digits_div:sub(1, digits_len - 1)\n  local digits_mod\
    \ = digits_mod:sub(1, digits_len - 1)\n  local digits_div = digits_div:sub(1,\
    \ digits_len - 1)\n  local digits_str = digits_str:sub(1, digits_len - 1)\n  local\
    \ digits_str = digits_str:sub(1, digits_len - 1)\n  local digits_str = digits_str:sub(1,\
    \ digits_len - 1)\n  local digits_str = digits_str:sub(1, digits_len - 1)\n  local\
    \ digits_str = digits_str:sub(1, digits_len - 1)\n  local digits_str = digits_str:sub(1,\
    \ digits_len - 1)\n  local digits_str = digits_str:sub(1, digits_len - 1)\n  local\
    \ digits_str = digits_str:sub(1, digits_len - 1)\n  local digits_str = digits_str:sub(1,\
    \ digits_len - 1)\n  local digits_str = digits_str:sub(1, digits_len - 1)\n  local\
    \ digits_str = digits_str:sub(1, digits_len - 1)\n  local digits_str = digits_str:sub(1,\
    \ digits_len - 1)\n  local digits_str = digits_str:sub(1, digits_len - 1)\n  local\
    \ digits_str = digits_str:sub(1, digits_len - 1)\n  local digits_str = digits_str:sub(1,\
    \ digits_len - 1)\n  local digits_str = digits_str:sub(1, digits_len - 1)\n  local\
    \ digits_str = digits_str:sub(1, digits_len - 1)\n  local digits_str = digits_str:sub(1,\
    \ digits_len - 1)\n  local digits_str = digits_str:sub(1, digits_len - 1)\n  local\
    \ digits_str = digits_str:sub(1, digits_len - 1)\n  local digits_str = digits_str:sub(1,\
    \ digits_len - 1)\n  local digits_str = digits_str:sub(1, digits_len - 1)\n  local\
    \ digits_str = digits_str:sub(1, digits_len - 1)\n  local digits_str = digits_str:sub(1,\
    \ digits_len - 1)\n  local digits_str = digits_", "  local digits = math.floor(x/base)+1\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.mod(x,\
    \ base)+1\n    local digitstr = tostring(digit)\n    if digitstr == \"0\" then\n\
    \      digitstr = \"1\"\n    end\n    result = result .. digitstr\n    x = math.floor(x/base)\n\
    \  end\n  return result\nend", "  local digits = math.floor(x/base)\n  local result\
    \ = \"\"\n  while digits > 0 do\n    local digit = math.floor((digits-1) * base)\n\
    \    result = string.sub(result, 1, digit-1) + tostring(digit)\n    digits = digits\
    \ - digit\n  end\n  return result\nend", "    if x < 10 then\n        return tostring(x)\n\
    \    end\n    local digits = math.floor(x/base)\n    local rest = x - base*digits\n\
    \    return tostring(base*digits) + change_base(rest, base)\nend", "  if x < 10\
    \ then\n    return string.format(\"%0*d\", base, x)\n  else\n    return string.format(\"\
    %0*d\", base, x)\n  end\nend", "  if x < 10 then\n    return tostring(x)\n  end\n\
    \  local digits = math.floor(x/base)\n  x = x % base\n  local result = \"\"\n\
    \  while x do\n    local digit = tostring(x)\n    if digits > 1 then\n      digit\
    \ = digit .. \"0\"\n    end\n    result = digit .. result\n    x = math.floor(x/base)\n\
    \  end\n  return result .. tostring(x)\nend", "  local digits = math.floor(math.log(x,\
    \ base))\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n\
    \    result = string.format(\"%s%d%s\", result, digit, base==2 and \"0\" or \"\
    \")\n    x = math.floor(x/base)\n  end\n  return result\nend", "  local digits\
    \ = math.floor(x/base)\n  local remainder = x - base*digits\n  return string.format('%d',\
    \ digits)..string.format('%b', remainder)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
