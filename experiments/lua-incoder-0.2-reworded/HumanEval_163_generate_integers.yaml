name: HumanEval_163_generate_integers
language: lua
prompt: "-- Given two positive integers a and b, return the even digits between a\n\
  -- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8)\n\
  -- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(10,\
  \ 14)\n-- {}\nlocal function generate_integers(a, b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n\
  \    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10,\
  \ 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
  \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local result = {}\n  for i = a, b do\n    table.insert(result, i)\n\
    \  end\n  return result\nend", "  if a < b then\n    generate_integers(b, a)\n\
    \  else\n    local results = {}\n    for i = a, b do\n      table.insert(results,\
    \ i)\n    end\n    return results\n  end\nend", "  local result = {}\n  for i\
    \ = a, b do\n    table.insert(result, i)\n  end\n  return result\nend", "  local\
    \ result = {}\n  for i = a, b do\n    table.insert(result, i)\n  end\n  return\
    \ result\nend", "  local result = {}\n  for i = a, b do\n    table.insert(result,\
    \ i)\n  end\n  return result\nend", "  if a < b then\n    generate_integers(b,\
    \ a)\n  else\n    local digits = {}\n    for i = a, b do\n      digits[i] = true\n\
    \    end\n    return digits\n  end\nend", "  local result = {}\n  local i = 1\n\
    \  while i <= b do\n    table.insert(result, i)\n    i = i * 10 + 1\n  end\n \
    \ table.sort(result)\n  return result\nend", "  if b < a then\n    return {}\n\
    \  end\n  local result = {}\n  for i = a, b do\n    table.insert(result, i)\n\
    \  end\n  return result\nend", "  local result = {}\n  for i = a, b do\n    table.insert(result,\
    \ i)\n  end\n  return result\nend", "  local result = {}\n  for i = a, b do\n\
    \    table.insert(result, i)\n  end\n  return result\nend", "  if b < a then\n\
    \    generate_integers(b, a)\n  end\n  local results = {}\n  for i = a, b do\n\
    \    table.insert(results, i)\n  end\n  return results\nend", "  local results\
    \ = {}\n  for i = a, b do\n    table.insert(results, i)\n  end\n  return results\n\
    end", "  local digits = {}\n  for i = a, b do\n    digits[i] = true\n  end\n \
    \ local i = 1\n  while i <= b do\n    if digits[i] then\n      i = i + 1\n   \
    \ else\n      digits[i] = false\n    end\n  end\n  return table.concat(digits)\n\
    end", "  local digits = {}\n  local i = 1\n  while i <= b do\n    digits[i] =\
    \ i\n    i = i * 10\n  end\n  local result = {}\n  for i = a, 1, -1 do\n    if\
    \ digits[i] then\n      table.insert(result, digits[i])\n    end\n  end\n  return\
    \ result\nend", "  local results = {}\n  for i = a, b do\n    table.insert(results,\
    \ i)\n  end\n  return results\nend", "  -- The first number in the set is always\
    \ even.\n  -- The second number is always odd.\n  -- The third number is always\
    \ even.\n  -- The fourth number is always odd.\n  -- The fifth number is always\
    \ even.\n  -- The sixth number is always odd.\n  -- The seventh number is always\
    \ even.\n  -- The eighth number is always odd.\n  -- The ninth number is always\
    \ even.\n  -- The tenth number is always odd.\n  -- The eleventh number is always\
    \ even.\n  -- The twelfth number is always odd.\n  -- The thirteenth number is\
    \ always even.\n  -- The fourteenth number is always odd.\n  -- The fifteenth\
    \ number is always even.\n  -- The sixteenth number is always odd.\n  -- The seventeenth\
    \ number is always even.\n  -- The eighteenth number is always odd.\n  -- The\
    \ nineteenth number is always even.\n  -- The twentieth number is always odd.\n\
    \  -- The twenty-first number is always even.\n  -- The twenty-second number is\
    \ always odd.\n  -- The twenty-third number is always even.\n  -- The twenty-fourth\
    \ number is always odd.\n  -- The twenty-fifth number is always even.\n  -- The\
    \ twenty-sixth number is always odd.\n  -- The twenty-seventh number is always\
    \ even.\n  -- The twenty-eighth number is always odd.\n  -- The twenty-ninth number\
    \ is always even.\n  -- The thirtieth number is always odd.\n  -- The thirty-first\
    \ number is always even.\n  -- The thirty-second number is always odd.\n  -- The\
    \ thirty-third number is always even.\n  -- The thirty-fourth number is always\
    \ odd.\n  -- The thirty-fifth number is always even.\n  -- The thirty-sixth number\
    \ is always odd.\n  -- The thirty-seventh number is always even.\n  -- The thirty-eighth\
    \ number is always odd.\n  -- The thirty-ninth number is always even.\n  -- The\
    \ fortieth number is always odd.\n  -- The forty-first number is always even.\n\
    \  -- The forty-second number is always odd.\n  -- The forty-third number is always\
    \ even.\n  -- The for", "  local results = {}\n  for i = a, b do\n    table.insert(results,\
    \ i)\n  end\n  return results\nend", "  if a > b then a, b = b, a end\n  local\
    \ result = {}\n  for i = a, b do\n    table.insert(result, i)\n  end\n  table.sort(result)\n\
    \  return result\nend", "  local result = {}\n  for i = a, b do\n    table.insert(result,\
    \ i)\n  end\n  return result\nend", "  local result = {}\n  for i = a, b do\n\
    \    table.insert(result, i)\n  end\n  return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
