name: HumanEval_23_strlen
language: lua
prompt: "-- Return length of given string\n-- >>> strlen('')\n-- 0\n-- >>> strlen('abc')\n\
  -- 3\nlocal function strlen(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strlen\n\
  \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('x'), 1)\n\
  \    lu.assertEquals(candidate('asdasnakj'), 9)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  return string.len() or 0 -- Lua 5.2\nend", "  return string.len()\
    \ or string.sub(string, 1, string.len() - 1)\nend", "  if string == nil then return\
    \ 0 end\n  local len = 0\n  for i = 1, #string do\n    len = len + 1\n  end\n\
    \  return len\nend", "  return string.len\nend", "  return string.len\nend", " \
    \ return string.len() or string.bytelen(string) or 0\nend", "  return string.len()\
    \ or 0 -- Lua 5.2\nend", "  return string.len() or string.bytelen()\nend", " \
    \ if string == nil then\n    return 0\n  end\n  local len = 0\n  for i = 1, #string\
    \ do\n    len = len + 1\n  end\n  return len\nend", "  return string.len() or\
    \ string.bytelen()\nend", "  return string.len() or string.bytelen()\nend", " \
    \ return string.len() or 0 -- Lua 5.2\nend", "  return string.len() or string.bytelen()\n\
    end", "  return string.len() or 0\nend", "  return string.len() or string.bytelen()\n\
    end", "  return string.len() or 0 -- Lua 5.2\nend", "  return string.len() or\
    \ string.bytelen()\nend", "  return string.len() or 0 -- Lua 5.2\nend", "  if\
    \ string == nil then return 0 end\n  local len = 0\n  for i = 1, #string do\n\
    \    len = len + 1\n  end\n  return len\nend", "  return string.len() or string.bytelen()\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
