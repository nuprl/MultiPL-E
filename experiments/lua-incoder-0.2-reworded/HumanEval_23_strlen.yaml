name: HumanEval_23_strlen
language: lua
prompt: "-- Return length of given string\n-- >>> strlen('')\n-- 0\n-- >>> strlen('abc')\n\
  -- 3\nlocal function strlen(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strlen\n\
  \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('x'), 1)\n\
  \    lu.assertEquals(candidate('asdasnakj'), 9)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  return string.len() or 0 -- Lua 5.2\nend", "  return string.len()\
    \ or string.sub(string, 1, string.len() - 1)\nend", "  if string == nil then return\
    \ 0 end\n  local len = 0\n  for i = 1, #string do\n    len = len + 1\n  end\n\
    \  return len\nend", "  return string.len\nend", "  return string.len\nend", " \
    \ return string.len() or string.bytelen(string) or 0\nend", "  return string.len()\
    \ or 0 -- Lua 5.2\nend", "  return string.len() or string.bytelen()\nend", " \
    \ if string == nil then\n    return 0\n  end\n  local len = 0\n  for i = 1, #string\
    \ do\n    len = len + 1\n  end\n  return len\nend", "  return string.len() or\
    \ string.bytelen()\nend", "  return string.len() or string.bytelen()\nend", " \
    \ return string.len() or 0 -- Lua 5.2\nend", "  return string.len() or string.bytelen()\n\
    end", "  return string.len() or 0\nend", "  return string.len() or string.bytelen()\n\
    end", "  return string.len() or 0 -- Lua 5.2\nend", "  return string.len() or\
    \ string.bytelen()\nend", "  return string.len() or 0 -- Lua 5.2\nend", "  if\
    \ string == nil then return 0 end\n  local len = 0\n  for i = 1, #string do\n\
    \    len = len + 1\n  end\n  return len\nend", "  return string.len() or string.bytelen()\n\
    end", "  return string.len() or string.sub(string, 1, string.len() - 1)\nend",
  "  return string.len() or string.bytes and string.len(string.bytes()) or 0\nend",
  "  return string.len() or string.bytelen()\nend", "  return string.len() or string.bytes\
    \ and string.len(string.bytes()) or 0\nend", "  return string.len() or string.sub(string,\
    \ 1, string.len() - 1)\nend", "  return string.len() or string.bytelen()\nend",
  "  if string == nil then return 0 end\n  local len = 0\n  for i = 1, #string do\n\
    \    len = len + 1\n  end\n  return len\nend", "  return string.len() or 0 --\
    \ Lua 5.2\nend", "  return string.len() or string.bytelen()\nend", "  return string.len\n\
    end", "  return string.len() -- Lua 5.2\nend", "  return string.len() or 0\nend",
  "  return string.len() or string.sub(string, 1, string.len() - 1)\nend", "  if string\
    \ == nil then\n    return 0\n  end\n  local len = 0\n  for i = 1, #string do\n\
    \    len = len + 1\n  end\n  return len\nend", "  return string.len() or string.bytelen()\n\
    end", "  return string.len() or string.bytelen() or string.gsub(string, \"[^\\\
    x00-\\x7F]\", \"\"):gsub(\"%z\", \"\"):gsub(\"%Z\", \"\"):gsub(\"%z\", \"\")\n\
    end", "  return string.len() or 0 -- Lua 5.2\nend", "  return string.len\nend",
  "  return string.len() or string.bytelen()\nend", "  return string.len() or string.bytelen()\n\
    end", "  return string.len() or string.bytelen()\nend", "  return string.len()\
    \ or string.bytes and string.bytes.length(string) or string.gsub(string, \"[^\\\
    x00-\\x7F]\", \"\") or 0\nend", "  return string.len() or string.bytelen()\nend",
  "  return string.len() -- Lua 5.1\n  or string.gsub(string, '^%s*', '')  -- Lua\
    \ 5.2\n  or string.gsub(string, '^%s*$', '')  -- Lua 5.3\n  or string.gsub(string,\
    \ '^%s*$', '') -- Lua 5.4\n  or string.gsub(string, '^%s*$', '') -- Lua 5.5\n\
    \  or string.gsub(string, '^%s*$', '') -- Lua 5.6\n  or string.gsub(string, '^%s*$',\
    \ '') -- Lua 5.7\n  or string.gsub(string, '^%s*$', '') -- Lua 5.8\n  or string.gsub(string,\
    \ '^%s*$', '') -- Lua 5.9\n  or string.gsub(string, '^%s*$', '') -- Lua 5.10\n\
    \  or string.gsub(string, '^%s*$', '') -- Lua 5.11\n  or string.gsub(string, '^%s*$',\
    \ '') -- Lua 5.12\n  or string.gsub(string, '^%s*$', '') -- Lua 5.13\n  or string.gsub(string,\
    \ '^%s*$', '') -- Lua 5.14\n  or string.gsub(string, '^%s*$', '') -- Lua 5.15\n\
    \  or string.gsub(string, '^%s*$', '') -- Lua 5.16\n  or string.gsub(string, '^%s*$',\
    \ '') -- Lua 5.17\n  or string.gsub(string, '^%s*$', '') -- Lua 5.18\n  or string.gsub(string,\
    \ '^%s*$', '') -- Lua 5.19\n  or string.gsub(string, '^%s*$', '') -- Lua 5.20\n\
    \  or string.gsub(string, '^%s*$', '') -- Lua 5.21\n  or string.gsub(string, '^%s*$',\
    \ '') -- Lua 5.22\n  or string.gsub(string, '^%s*$', '') -- Lua 5.23\n  or string.gsub(string,\
    \ '^%s*$', '') -- Lua 5.24\n  or string.gsub(string, '^%s*$', '') -- Lua 5.25\n\
    \  or string.gsub(string, '^%s*$', '') -- Lua 5.26\n  or string.gsub(string, '^%s*$',\
    \ '') -- Lua 5.27\n  or string.gsub(string, '^%s", "  return string.len\nend",
  "  return string.len() or string.bytelen()\nend", "  return string.len\nend", " \
    \ if string == nil then return 0 end\n  local len = 0\n  for i = 1, #string do\n\
    \    len = len + 1\n  end\n  return len\nend", "  return string.len() -- Lua 5.2\n\
    end", "  return string.len() or string.bytelen()\nend", "  return string.len\n\
    end", "  return string.len() or string.bytelen()\nend", "  return string.len()\
    \ -- Lua 5.1\n  or string.gsub(string, '^%s*', '')  -- Lua 5.2\n  or string.gsub(string,\
    \ '^%s*$', '')  -- Lua 5.3\n  or string.gsub(string, '^%s+$', '')  -- Lua 5.4\n\
    end", "  return string.len() or 0 -- Lua 5.2\nend", "  return string.len() or\
    \ 0 -- Lua 5.2\nend", "  if string == nil then return 0 end\n  local len = 0\n\
    \  for i = 1, #string do\n    len = len + 1\n  end\n  return len\nend", "  return\
    \ string.len() or string.bytes and string.len(string.bytes()) or 0\nend", "  return\
    \ string.len() -- Lua 5.2\nend", "  return string.len() or 0\nend", "  return\
    \ string.len() or string.bytes and string.len(string.bytes()) or 0\nend", "  return\
    \ string.len() or string.bytelen()\nend", "  return string.len() or 0 -- Lua 5.2\n\
    end", "  return string.len\nend", "  if string == nil then\n    return 0\n  end\n\
    \  local len = 0\n  for i = 1, #string do\n    len = len + 1\n  end\n  return\
    \ len\nend", "  return string.len() -- Lua 5.2\nend", "  return string.len() or\
    \ string.bytelen()\nend", "  return string.len\nend", "  return string.len\nend",
  "  return string.len() or string.bytes and string.len(string.bytes()) or 0\nend",
  "  return string.len() or string.sub(string, 1, string.len() - 1)\nend", "  return\
    \ string.len() or string.bytelen()\nend", "  if string == nil then\n    return\
    \ 0\n  end\n  local len = 0\n  for i = 1, #string do\n    len = len + 1\n  end\n\
    \  return len\nend", "  return string.len() or 0\nend", "  return string.len()\
    \ or 0\nend", "  return string.len() or string.sub(string, 1, string.len() - 1)\n\
    end", "  return string.len() or string.bytelen()\nend", "  if string == nil then\
    \ return 0 end\n  local len = 0\n  for i = 1, #string do\n    len = len + 1\n\
    \  end\n  return len\nend", "  return string.len() or string.bytelen()\nend",
  "  return string.len() or string.bytelen()\nend", "  return string.len() or string.bytelen()\n\
    end", "  return string.len() or 0 -- Lua 5.2\nend", "  return string.len() or\
    \ 0\nend", "  return string.len() or string.len()\nend", "  return string.len()\
    \ or string.len()\nend", "  return string.len() or string.bytelen()\nend", " \
    \ return string.len() or string.sub(string, 1, string.len() - 1)\nend", "  return\
    \ string.len() or string.bytelen()\nend", "  return string.len() or string.sub(string,\
    \ 1, string.len() - 1)\nend", "  return string.len() or string.len()\nend", " \
    \ return string.len() -- Lua 5.2\n  or string.gsub(string, '^%s*', '')\n  or string.gsub(string,\
    \ '%s+', '')\n  or 0\nend", "  return string.len() or string.sub(string, 1, string.len()\
    \ - 1) or 0\nend", "  return string.len() -- Lua 5.2\nend", "  return string.len()\
    \ or 0 -- Lua 5.2\nend", "  return string.len() or string.bytelen() or string.bytelen()\n\
    end", "  return string.len() or string.len()\nend", "  return string.len() or\
    \ string.bytelen()\nend", "  return string.len() or 0 -- Lua 5.2\nend", "  return\
    \ string.len() or string.len()\nend", "  return string.len() or string.bytes and\
    \ string.len(string.bytes()) or 0\nend", "  return string.len\nend", "  return\
    \ string.len() or string.bytelen()\nend", "  return string.len() or 0 -- Lua 5.2\n\
    end", "  return string.len() or string.bytes or string.chars or 0\nend", "  return\
    \ string.len() or 0 -- Lua 5.2\nend", "  return string.len() or string.bytelen()\n\
    end", "  return string.len() or 0 -- Lua 5.2\nend", "  return string.len() or\
    \ string.bytelen()\nend", "  return string.len() or string.bytes and string.len(string.bytes())\
    \ or 0\nend", "  return string.len() or string.bytelen()\nend", "  return string.len()\
    \ or string.bytes or string.chars or 0\nend", "  return string.len() or string.bytelen()\n\
    end", "  return string.len() or string.bytes and string.len(string.bytes()) or\
    \ 0\nend", "  return string.len() or string.bytelen() or string.gsub(string, \"\
    [^\\x00-\\x7F]\", \"\"):gsub(\"%z\", \"\"):gsub(\"%z\", \"\")\nend", "  return\
    \ string.len\nend", "  return string.len\nend", "  return string.len() or string.bytelen()\n\
    end", "  return string.len() or 0 -- Lua 5.2\nend", "  if type(string) == 'string'\
    \ then\n    return string.len\n  else\n    return nil\n  end\nend", "  return\
    \ string.len() or string.bytelen()\nend", "  return string.len() or 0\nend", " \
    \ return string.len() or string.sub(string, 1, string.len() - 1)\nend", "  return\
    \ string.len() or string.bytelen()\nend", "  return string.len\nend", "  return\
    \ string.len() or string.bytelen()\nend", "  return string.len() or string.bytes\
    \ and string.len(string.bytes()) or 0\nend", "  return string.len() or string.bytelen()\n\
    end", "  return string.len() or 0 -- Lua 5.2\nend", "  return string.len() or\
    \ string.bytelen()\nend", "  return string.len() or 0\nend", "  return string.len()\
    \ or string.bytelen()\nend", "  return string.len() or 0\nend", "  return string.len()\
    \ -- Lua 5.2\nend", "  return string.len() or string.bytes and string.bytes.length(string)\
    \ or string.gsub(string, \"[^\\x00-\\x7F]\", \"\"):bytelen()\nend", "  return\
    \ string.len() or string.bytelen()\nend", "  return string.len() or 0\nend", " \
    \ return string.len\nend", "  if string == nil then return 0 end\n  local len\
    \ = 0\n  for i = 1, #string do\n    len = len + 1\n  end\n  return len\nend",
  "  return string.len() or string.bytelen()\nend", "  return string.len() or string.bytelen()\n\
    end", "  return string.len() or string.len()\nend", "  return string.len\nend",
  "  return string.len() or string.bytes and string.len(string.bytes()) or 0\nend",
  "  if string == nil then\n    return 0\n  end\n  local len = 0\n  for i = 1, #string\
    \ do\n    len = len + 1\n  end\n  return len\nend", "  return string.len() or\
    \ 0 -- Lua 5.2\nend", "  return string.len() -- Lua 5.2\nend", "  return string.len()\
    \ or string.bytelen() or string.bytelen()\nend", "  return string.len() or string.bytelen()\n\
    end", "  return string.len() or 0 -- Lua 5.2\nend", "  return string.len() or\
    \ string.bytelen()\nend", "  if string == nil then return 0 end\n  local len =\
    \ 0\n  for i = 1, #string do\n    len = len + 1\n  end\n  return len\nend", " \
    \ return string.len() or string.bytes and string.len(string.bytes()) or 0\nend",
  "  return string.len\nend", "  return string.len\nend", "  if string == nil then\
    \ return 0 end\n  local len = 0\n  for i = 1, #string do\n    len = len + 1\n\
    \  end\n  return len\nend", "  return string.len() or string.bytelen()\nend",
  "  return string.len() or string.sub(string, 1, string.len() - 1)\nend", "  return\
    \ string.len() -- Lua 5.2\nend", "  return string.len() or string.bytelen()\n\
    end", "  return string.len\nend", "  return string.len() or string.bytelen()\n\
    end", "  if type(string) == 'string' then\n    return string.len\n  else\n   \
    \ return nil\n  end\nend", "  return string.len() or 0 -- Lua 5.2\nend", "  return\
    \ string.len\nend", "  return string.len() or string.bytelen()\nend", "  return\
    \ string.len() or 0\nend", "  return string.len() or string.bytes and string.len(string.bytes())\
    \ or 0\nend", "  return string.len() -- Lua 5.2\nend", "  return string.len()\
    \ or string.bytelen()\nend", "  return string.len() or string.bytes and string.len(string.bytes())\
    \ or 0\nend", "  if string == nil then return 0 end\n  local count = 0\n  for\
    \ c in string.gmatch(string, \".\") do\n    count = count + 1\n  end\n  return\
    \ count\nend", "  return string.len() or 0\nend", "  return string.len() or string.bytes\
    \ and string.len(string.bytes()) or 0\nend", "  return string.len() or 0 -- Lua\
    \ 5.2\nend", "  if string == nil then return 0 end\n  local len = 0\n  for i =\
    \ 1, #string do\n    len = len + 1\n  end\n  return len\nend", "  return string.len()\
    \ or string.bytelen()\nend", "  return string.len\nend", "  return string.len()\
    \ or 0 -- Lua 5.2\nend", "  return string.len() or string.bytelen()\nend", " \
    \ return string.len() or string.bytelen()\nend", "  return string.len() or string.bytelen()\n\
    end", "  return string.len() or string.bytelen()\nend", "  return string.len()\
    \ or string.bytes and string.len(string.bytes()) or 0\nend", "  return string.len()\
    \ or string.bytes and string.len(string.bytes()) or 0\nend", "  return string.len()\
    \ or string.bytelen()\nend", "  return string.len() or string.bytelen()\nend",
  "  return string.len() or 0\nend", "  return string.len() or string.bytes and string.len(string.bytes())\
    \ or 0\nend", "  return string.len() or string.bytelen()\nend", "  return string.len()\
    \ -- Lua 5.1\n  or string.bytelen() -- Lua 5.2\n  or string.gsub(string, '^%s*',\
    \ '')\n  or 0 -- Lua 5.3\nend", "  return string.len() or string.bytelen() or\
    \ string.gsub(string, '[^\\x00-\\x7F]', '').len()\nend", "  return string.len()\
    \ or string.sub(string, 1, string.len() - 1)\nend", "  return string.len() or\
    \ string.bytelen()\nend", "  if string == nil then return 0 end\n  local len =\
    \ 0\n  for i = 1, #string do\n    len = len + 1\n  end\n  return len\nend", " \
    \ return string.len() or string.bytes and string.len(string.bytes()) or 0\nend",
  "  return string.len() or string.bytelen()\nend", "  return string.len() or string.bytes\
    \ and string.bytes.length(string) or string.gsub(string, \"[^\\x00-\\x7F]\", \"\
    \"):gsub(\"%z\", \"\"):gsub(\"%Z\", \"\"):gsub(\"%z\", \"\")\nend", "  return\
    \ string.len() or string.sub(string, 1, string.len() - 1)\nend", "  return string.len()\
    \ or string.len()\nend", "  return string.len() or string.bytelen()\nend", " \
    \ return string.len() or string.gsub(string, '[^\\n]+', '')\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
