name: HumanEval_9_rolling_max
language: lua
prompt: "-- From a given table of integers, generate a table of rolling maximum element\
  \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3, 2,\
  \ 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
  \ 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n\
  \    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n\
    \  local max_index = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] >\
    \ max_value then\n      rolling_max:insert(max_value)\n      max_value = numbers[i]\n\
    \      max_index = i\n    else\n      rolling_max:insert(numbers[i])\n    end\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = {}\n  for i = 1, #numbers\
    \ do\n    local max_element = numbers[i]\n    for j = i - 1, 1, -1 do\n      if\
    \ numbers[j] > max_element then\n        max_element = numbers[j]\n      end\n\
    \    end\n    table.insert(rolling_max, max_element)\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers\
    \ do\n    local max_value = numbers[i]\n    local max_index = i\n    for j = i\
    \ + 1, #numbers do\n      if numbers[j] > max_value then\n        max_value =\
    \ numbers[j]\n        max_index = j\n      end\n    end\n    rolling_max:insert(max_value)\n\
    \    i = max_index + 1\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.new()\n  local max_value = numbers[1]\n  for i = 2, #numbers do\n\
    \    if numbers[i] > max_value then\n      rolling_max = numbers:sub(1, i)\n \
    \     max_value = numbers[i]\n    end\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local max_index\
    \ = 1\n  for i = 2, #numbers do\n    if numbers[i] ~= max_value then\n      rolling_max:insert(max_value)\n\
    \      max_value = numbers[i]\n      max_index = i\n    end\n  end\n  rolling_max:insert(max_value)\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local index\
    \ = 1\n  local max_value = numbers[1]\n  rolling_max[1] = max_value\n  for i =\
    \ 2, #numbers do\n    if numbers[i] ~= max_value then\n      max_value = numbers[i]\n\
    \      rolling_max[index] = max_value\n      index = index + 1\n    end\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local max_value\
    \ = numbers.new()\n  local max_index = numbers.new()\n  local i = 1\n  while i\
    \ <= #numbers do\n    local value = numbers[i]\n    if max_value ~= nil and value\
    \ > max_value then\n      rolling_max:insert(max_value)\n      max_value = nil\n\
    \      max_index = nil\n    end\n    if max_value == nil then\n      max_value\
    \ = value\n      max_index = i\n    end\n    rolling_max:insert(value)\n    i\
    \ = i + 1\n  end\n  return rolling_max, max_index, max_value\nend", "  local rolling_max\
    \ = numbers.new()\n  local max_value = numbers.new()\n  local max_index = numbers.new()\n\
    \  local i = 1\n  while i <= #numbers do\n    local value = numbers[i]\n    if\
    \ value > max_value then\n      max_value = value\n      max_index = i\n    end\n\
    \    rolling_max:insert(max_value)\n    rolling_max:insert(max_index)\n    i =\
    \ i + 1\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local i = 1\n  while i <= #numbers do\n    local max_value = numbers[i]\n \
    \   local max_index = i\n    for j = i + 1, #numbers do\n      if numbers[j] >\
    \ max_value then\n        max_value = numbers[j]\n        max_index = j\n    \
    \  end\n    end\n    rolling_max[max_index] = max_value\n    i = max_index + 1\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local\
    \ i = 1\n  while i <= #numbers do\n    rolling_max:insert(numbers[i])\n    i =\
    \ i + 1\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local rolling_max_index = 0\n  local rolling_max_value = numbers[1]\n  for\
    \ i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value then\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max:set(rolling_max_index,\
    \ rolling_max_value)\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local last_number = nil\n  local last_max_number = nil\n  for i = 1, #numbers\
    \ do\n    if numbers[i] ~= last_number then\n      rolling_max:insert(numbers[i])\n\
    \      last_number = numbers[i]\n    end\n    if numbers[i] > last_max_number\
    \ then\n      last_max_number = numbers[i]\n    end\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n \
    \ local max_index = 1\n  for i = 2, #numbers do\n    if numbers[i] ~= max_value\
    \ then\n      rolling_max:insert(max_value)\n      max_value = numbers[i]\n  \
    \    max_index = i\n    end\n  end\n  rolling_max:insert(max_value)\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers.new()\n  local i = 1\n  while\
    \ i <= #numbers do\n    rolling_max[i] = numbers[i]\n    i = i + 1\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers.new()\n  local i = 1\n  while\
    \ i <= #numbers do\n    local max_value = numbers[i]\n    local max_index = i\n\
    \    for j = i + 1, #numbers do\n      if numbers[j] > max_value then\n      \
    \  max_value = numbers[j]\n        max_index = j\n      end\n    end\n    rolling_max[max_index]\
    \ = max_value\n    i = max_index + 1\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.new()\n  local last_value = numbers.last()\n  local last_index\
    \ = #numbers - 1\n  local current_value = numbers[last_index]\n  local current_index\
    \ = last_index\n  while current_index do\n    local next_value = numbers[current_index\
    \ + 1]\n    if next_value > current_value then\n      rolling_max:insert(current_value)\n\
    \      last_value = current_value\n      last_index = current_index\n      current_value\
    \ = next_value\n      current_index = current_index + 1\n    else\n      current_value\
    \ = next_value\n      current_index = current_index + 1\n    end\n  end\n  rolling_max:insert(last_value)\n\
    \  return rolling_max\nend", "  local rolling_max = {}\n  local max_value = nil\n\
    \  for i = 1, #numbers do\n    if max_value == nil then\n      max_value = numbers[i]\n\
    \      rolling_max[i] = numbers[i]\n    else\n      if numbers[i] > max_value\
    \ then\n        max_value = numbers[i]\n        rolling_max[i] = numbers[i]\n\
    \      else\n        rolling_max[i] = max_value\n      end\n    end\n  end\n \
    \ return rolling_max\nend", "  local rolling_max = numbers.new()\n  local i =\
    \ 1\n  while i <= #numbers do\n    local max_value = numbers[i]\n    local max_index\
    \ = i\n    for j = i + 1, #numbers do\n      if numbers[j] > max_value then\n\
    \        max_value = numbers[j]\n        max_index = j\n      end\n    end\n \
    \   rolling_max[max_index] = max_value\n    i = max_index + 1\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers.new()\n  local rolling_max_index\
    \ = 0\n  local rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if\
    \ numbers[i] ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_index = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n\
    \  rolling_max:insert(rolling_max_index)\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend", "  local rolling_max = {}\n  local max_element\n\
    \  for _, number in ipairs(numbers) do\n    if max_element and number > max_element\
    \ then\n      rolling_max[#rolling_max + 1] = max_element\n      max_element =\
    \ nil\n    else\n      max_element = number\n    end\n  end\n  if max_element\
    \ then\n    rolling_max[#rolling_max + 1] = max_element\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n \
    \ local max_index = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~=\
    \ max_value then\n      rolling_max:insert(max_value)\n      max_value = numbers[i]\n\
    \      max_index = i\n    end\n  end\n  rolling_max:insert(max_value)\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers.new()\n  local i = 1\n  while\
    \ i <= #numbers do\n    local value = numbers[i]\n    rolling_max[#rolling_max\
    \ + 1] = value\n    i = i + 1\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.new()\n  local index = 1\n  local max_value = numbers[1]\n  local\
    \ max_index = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= max_value\
    \ then\n      rolling_max:insert(max_value)\n      max_value = numbers[i]\n  \
    \    max_index = i\n    end\n    rolling_max:insert(numbers[i])\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers.new()\n  local i = 1\n  while\
    \ i <= #numbers do\n    local max_value = numbers[i]\n    local max_index = i\n\
    \    for j = i + 1, #numbers do\n      if numbers[j] > max_value then\n      \
    \  max_value = numbers[j]\n        max_index = j\n      end\n    end\n    rolling_max[max_index]\
    \ = max_value\n    i = max_index + 1\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.new()\n  local max_value = numbers.new()\n  local max_index\
    \ = numbers.new()\n  local max_index2 = numbers.new()\n  local max_index3 = numbers.new()\n\
    \  local max_index4 = numbers.new()\n  local max_index5 = numbers.new()\n  local\
    \ max_index6 = numbers.new()\n  local max_index7 = numbers.new()\n  local max_index8\
    \ = numbers.new()\n  local max_index9 = numbers.new()\n  local max_index10 = numbers.new()\n\
    \  local max_index11 = numbers.new()\n  local max_index12 = numbers.new()\n  local\
    \ max_index13 = numbers.new()\n  local max_index14 = numbers.new()\n  local max_index15\
    \ = numbers.new()\n  local max_index16 = numbers.new()\n  local max_index17 =\
    \ numbers.new()\n  local max_index18 = numbers.new()\n  local max_index19 = numbers.new()\n\
    \  local max_index20 = numbers.new()\n  local max_index21 = numbers.new()\n  local\
    \ max_index22 = numbers.new()\n  local max_index23 = numbers.new()\n  local max_index24\
    \ = numbers.new()\n  local max_index25 = numbers.new()\n  local max_index26 =\
    \ numbers.new()\n  local max_index27 = numbers.new()\n  local max_index28 = numbers.new()\n\
    \  local max_index29 = numbers.new()\n  local max_index30 = numbers.new()\n  local\
    \ max_index31 = numbers.new()\n  local max_index32 = numbers.new()\n  local max_index33\
    \ = numbers.new()\n  local max_index34 = numbers.new()\n  local max_index35 =\
    \ numbers.new()\n  local max_index36 = numbers.new()\n  local max_index37 = numbers.new()\n\
    \  local max_index38 = numbers.new()\n  local max_index39 = numbers.new()\n  local\
    \ max_index40 = numbers.new()\n  local max_index41 = numbers.new()\n  local max_index42\
    \ = numbers.new()\n  local max_index43 = numbers.new()\n  local max_index44 =\
    \ numbers.new()\n  local max_index45 = numbers.new()\n  local max_index46 = numbers.new()\n\
    \  local max_index47 = numbers.new()\n  local max_index48 = numbers.new()\n  local\
    \ max_index49 = numbers.new()\n  local max_index50 = numbers.new()\n  local max_index51\
    \ = numbers.new", "  local rolling_max = {}\n  local i = 1\n  while i <= #numbers\
    \ do\n    local max_element = numbers[i]\n    for j = i - 1, -1, -1 do\n     \
    \ if numbers[j] > max_element then\n        max_element = numbers[j]\n      end\n\
    \    end\n    table.insert(rolling_max, max_element)\n    i = i + 1\n  end\n \
    \ return rolling_max\nend", "  local rolling_max = {}\n  for i = 1, #numbers do\n\
    \    local max_element = numbers[i]\n    for j = i - 1, -1, -1 do\n      if numbers[j]\
    \ > max_element then\n        max_element = numbers[j]\n      end\n    end\n \
    \   table.insert(rolling_max, max_element)\n  end\n  return rolling_max\nend",
  "  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local max_index\
    \ = 1\n  for i = 2, #numbers do\n    if numbers[i] > max_value then\n      max_value\
    \ = numbers[i]\n      max_index = i\n    end\n  end\n  rolling_max:insert(max_value)\n\
    \  rolling_max:insert(max_index)\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.new()\n  local max_value = numbers.new()\n  local max_index = numbers.new()\n\
    \  local i = 1\n  while i <= numbers.n do\n    local value = numbers[i]\n    if\
    \ value > max_value then\n      max_value = value\n      max_index = i\n    end\n\
    \    rolling_max:insert(max_value)\n    rolling_max:insert(max_index)\n    i =\
    \ i + 1\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local max_value = numbers.first()\n  local max_index = nil\n  for i = 1, numbers.n\
    \ do\n    if numbers[i] ~= max_value then\n      rolling_max:insert(max_value)\n\
    \      max_value = numbers[i]\n      max_index = i\n    end\n  end\n  if max_index\
    \ ~= numbers.n then\n    rolling_max:insert(max_value)\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n \
    \ local max_index = 1\n  for i = 2, #numbers do\n    if numbers[i] > max_value\
    \ then\n      rolling_max[max_index] = max_value\n      max_value = numbers[i]\n\
    \      max_index = i\n    end\n  end\n  rolling_max[max_index] = max_value\n \
    \ return rolling_max\nend", "  local rolling_max = numbers.new()\n  local rolling_max_index\
    \ = 0\n  local rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if\
    \ numbers[i] ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_index = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n\
    \  for i = 1, rolling_max_index do\n    rolling_max:insert(numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local rolling_max_index\
    \ = 1\n  local rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if\
    \ numbers[i] ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_index = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n\
    \  rolling_max:insert(rolling_max_index)\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n    local\
    \ value = numbers[i]\n    rolling_max:insert(value)\n    i = i + 1\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers.new()\n  local i = 1\n  while\
    \ i <= #numbers do\n    local max_value = numbers[i]\n    for j = i - 1, i - 1,\
    \ -1 do\n      if numbers[j] > max_value then\n        max_value = numbers[j]\n\
    \      end\n    end\n    rolling_max:insert(max_value)\n    i = i + 1\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local rolling_max_index\
    \ = 0\n  local rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if\
    \ numbers[i] ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_index = i\n    end\n  end\n  rolling_max:resize(#numbers)\n\
    \  for i = 1, #numbers do\n    rolling_max[rolling_max_index] = numbers[i]\n \
    \ end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local\
    \ max_value = numbers.new()\n  local max_index = numbers.new()\n  local i = 1\n\
    \  while i <= #numbers do\n    local value = numbers[i]\n    local index = i\n\
    \    while i + 1 < #numbers do\n      local next_value = numbers[i + 1]\n    \
    \  if next_value > value then\n        value = next_value\n        index = i +\
    \ 1\n      else\n        i = i + 1\n      end\n    end\n    rolling_max:insert(value)\n\
    \    max_value:insert(value)\n    max_index:insert(index)\n  end\n  return rolling_max,\
    \ max_value, max_index\nend", "  local rolling_max = numbers.new()\n  local rolling_max_index\
    \ = 0\n  local rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if\
    \ numbers[i] ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_index = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n\
    \  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_value)\n\
    \  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_value)\n\
    \  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_value)\n\
    \  rolling_max:insert(rolling_max_value)\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  local rolling_max_count = 0\n  for i = 2, #numbers do\n    if\
    \ numbers[i] ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_index = i\n      rolling_max_count = rolling_max_count + 1\n\
    \    end\n  end\n  rolling_max:resize(rolling_max_count)\n  for i = 1, rolling_max_count\
    \ do\n    rolling_max[i] = numbers[rolling_max_index + i]\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers\
    \ do\n    local value = numbers[i]\n    rolling_max[#rolling_max + 1] = value\n\
    \    i = i + 1\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local rolling_max_index = 0\n  local rolling_max_value = numbers[1]\n  for\
    \ i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value then\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n\
    \  for i = 1, rolling_max_index do\n    rolling_max:insert(numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local rolling_max_index\
    \ = 1\n  local rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if\
    \ numbers[i] ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_index = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n\
    \  rolling_max:insert(rolling_max_index)\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.new()\n  local max_index = 0\n  local max_value = numbers[1]\n\
    \  for i = 2, #numbers do\n    if numbers[i] > max_value then\n      rolling_max[max_index]\
    \ = max_value\n      max_value = numbers[i]\n      max_index = i\n    end\n  end\n\
    \  rolling_max[max_index] = max_value\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.new()\n  local rolling_max_index = 1\n  for i = 1, #numbers do\n \
    \   local max_element = numbers[i]\n    local max_element_index = i\n    while\
    \ rolling_max_index > 0 do\n      local current_element = numbers[rolling_max_index]\n\
    \      if current_element > max_element then\n        rolling_max_index = rolling_max_index\
    \ - 1\n      else\n        rolling_max[rolling_max_index] = current_element\n\
    \        break\n      end\n    end\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n    local\
    \ value = numbers[i]\n    rolling_max[#rolling_max + 1] = value\n    i = i + 1\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local\
    \ max_index = 0\n  local max_value = numbers[1]\n  for i = 2, #numbers do\n  \
    \  if numbers[i] ~= max_value then\n      rolling_max[max_index] = max_value\n\
    \      max_value = numbers[i]\n      max_index = i\n    end\n  end\n  rolling_max[max_index]\
    \ = max_value\n  return rolling_max\nend", "  local rolling_max = {}\n  local\
    \ max_value = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= max_value\
    \ then\n      table.insert(rolling_max, max_value)\n      max_value = numbers[i]\n\
    \    end\n  end\n  table.insert(rolling_max, max_value)\n  return rolling_max\n\
    end", "  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers\
    \ do\n    local max_value = numbers[i]\n    local max_index = i\n    for j = i\
    \ + 1, #numbers do\n      if numbers[j] > max_value then\n        max_value =\
    \ numbers[j]\n        max_index = j\n      end\n    end\n    rolling_max[max_index]\
    \ = max_value\n    i = max_index + 1\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n    local\
    \ value = numbers[i]\n    local max_value = rolling_max[#rolling_max]\n    if\
    \ value > max_value then\n      rolling_max[#rolling_max] = value\n    end\n \
    \   i = i + 1\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local max_value = numbers.new()\n  local max_index = nil\n  local i = 1\n \
    \ while i <= #numbers do\n    if numbers[i] ~= max_value then\n      max_value\
    \ = numbers[i]\n      max_index = i\n    end\n    i = i + 1\n  end\n  rolling_max:set(max_index,\
    \ max_value)\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local i = 1\n  while i <= #numbers do\n    local value = numbers[i]\n    rolling_max[#rolling_max\
    \ + 1] = value\n    i = i + 1\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.new()\n  local i = 1\n  while i <= #numbers do\n    local value =\
    \ numbers[i]\n    local max_value = rolling_max[i - 1]\n    if max_value == nil\
    \ then\n      rolling_max[i - 1] = value\n    else\n      if value > max_value\
    \ then\n        rolling_max[i - 1] = value\n      end\n    end\n    i = i + 1\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local\
    \ max_value = numbers[1]\n  local max_index = 1\n  for i = 2, #numbers do\n  \
    \  if numbers[i] > max_value then\n      rolling_max[max_index] = max_value\n\
    \      max_value = numbers[i]\n      max_index = i\n    end\n  end\n  rolling_max[max_index]\
    \ = max_value\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local rolling_max_index = 1\n  local rolling_max_value = numbers[1]\n  for\
    \ i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value then\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n\
    \  rolling_max:insert(rolling_max_index)\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local max_index\
    \ = 1\n  for i = 2, #numbers do\n    if numbers[i] > max_value then\n      rolling_max[max_index]\
    \ = max_value\n      max_value = numbers[i]\n      max_index = i\n    end\n  end\n\
    \  rolling_max[max_index] = max_value\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.new()\n  local max_value = numbers.new()\n  local max_index = numbers.new()\n\
    \  local i = 1\n  while i <= #numbers do\n    local value = numbers[i]\n    if\
    \ value == nil then\n      break\n    end\n    local index = i - 1\n    while\
    \ index >= 0 do\n      if numbers[index] > value then\n        rolling_max:insert(value)\n\
    \        max_value:insert(value)\n        max_index:insert(index)\n        break\n\
    \      else\n        index = index - 1\n      end\n    end\n    i = i + 1\n  end\n\
    \  return rolling_max, max_value, max_index\nend", "  local rolling_max = {}\n\
    \  local i = 1\n  while i <= #numbers do\n    local max_element = numbers[i]\n\
    \    local max_element_index = i\n    while i + 1 < #numbers do\n      if numbers[i\
    \ + 1] > max_element then\n        max_element = numbers[i + 1]\n        max_element_index\
    \ = i + 1\n      end\n      i = i + 1\n    end\n    table.insert(rolling_max,\
    \ max_element)\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local i = 1\n  while i <= #numbers do\n    local value = numbers[i]\n    rolling_max[#rolling_max\
    \ + 1] = value\n    i = i + 1\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.new()\n  local max_value = numbers.new()\n  local max_index = numbers.new()\n\
    \  local i = 1\n  while i <= numbers.n do\n    local value = numbers[i]\n    local\
    \ index = i\n    while i + 1 < numbers.n and numbers[i + 1] > value do\n     \
    \ i = i + 1\n    end\n    rolling_max:insert(value)\n    max_value:insert(value)\n\
    \    max_index:insert(index)\n    i = i + 1\n  end\n  return rolling_max, max_value,\
    \ max_index\nend", "  local rolling_max = numbers.new()\n  local last_element\
    \ = numbers.last()\n  local last_element_index = #numbers - 1\n  local current_element\
    \ = numbers[last_element_index]\n  local current_element_index = last_element_index\
    \ - 1\n  while current_element_index > 0 do\n    local next_element = numbers[current_element_index]\n\
    \    if next_element > current_element then\n      rolling_max:insert(current_element)\n\
    \      current_element = next_element\n    else\n      current_element = current_element\
    \ - 1\n    end\n    current_element_index = current_element_index - 1\n  end\n\
    \  rolling_max:insert(current_element)\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.new()\n  local max_value = numbers[1]\n  local max_index = 1\n  for\
    \ i = 2, #numbers do\n    if numbers[i] > max_value then\n      rolling_max:insert(max_value)\n\
    \      max_value = numbers[i]\n      max_index = i\n    end\n    rolling_max:insert(numbers[i])\n\
    \  end\n  rolling_max:insert(max_value)\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local max_index\
    \ = 1\n  for i = 2, #numbers do\n    if numbers[i] ~= max_value then\n      rolling_max[max_index]\
    \ = max_value\n      max_value = numbers[i]\n      max_index = i\n    end\n  end\n\
    \  rolling_max[max_index] = max_value\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.new()\n  local rolling_max_index = 1\n  local rolling_max_value =\
    \ numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  for i = 1, rolling_max_index\
    \ do\n    rolling_max:insert(numbers[i])\n  end\n  return rolling_max\nend", " \
    \ local rolling_max = numbers.new()\n  local last_number = numbers[1]\n  for i\
    \ = 2, #numbers do\n    if numbers[i] ~= last_number then\n      rolling_max:insert(last_number)\n\
    \      last_number = numbers[i]\n    end\n  end\n  rolling_max:insert(last_number)\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local i =\
    \ 1\n  while i <= #numbers do\n    local value = numbers[i]\n    rolling_max[#rolling_max\
    \ + 1] = value\n    i = i + 1\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.new()\n  local i = 1\n  while i <= #numbers do\n    local max_element\
    \ = numbers[i]\n    local max_index = i\n    for j = i + 1, #numbers do\n    \
    \  if numbers[j] > max_element then\n        max_element = numbers[j]\n      \
    \  max_index = j\n      end\n    end\n    rolling_max[max_index] = max_element\n\
    \    i = max_index + 1\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.new()\n  local max_index = 0\n  for i = 1, #numbers do\n    local\
    \ index = i - 1\n    if numbers[index] > numbers[i] then\n      rolling_max[max_index]\
    \ = numbers[index]\n      max_index = index\n    end\n  end\n  rolling_max[max_index]\
    \ = numbers[#numbers]\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local rolling_max_index = 0\n  local rolling_max_value = numbers[1]\n  for\
    \ i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value then\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max:resize(#numbers)\n\
    \  for i = 1, #numbers do\n    rolling_max[i] = numbers[rolling_max_index]\n \
    \ end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local\
    \ rolling_max_index = 1\n  for i = 1, #numbers do\n    local max_value = numbers[i]\n\
    \    while rolling_max_index > 0 and\n           max_value < numbers[rolling_max_index]\
    \ do\n      rolling_max_index = rolling_max_index - 1\n    end\n    rolling_max[rolling_max_index]\
    \ = max_value\n    rolling_max_index = rolling_max_index + 1\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers.new()\n  local rolling_max_index\
    \ = 0\n  local rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if\
    \ numbers[i] ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_index = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n\
    \  rolling_max:insert(rolling_max_value)\n  for i = 2, #numbers do\n    rolling_max:insert(numbers[i])\n\
    \    rolling_max:insert(numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  local rolling_max_time = numbers[1]\n  for i = 2, #numbers do\n\
    \    if numbers[i] ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_time = i\n    end\n  end\n  rolling_max_index = rolling_max_time\n\
    \  rolling_max:resize(#numbers)\n  for i = 1, #numbers do\n    rolling_max[i]\
    \ = numbers[i]\n    if rolling_max_index == i then\n      rolling_max[i] = rolling_max_value\n\
    \      rolling_max_index = i + 1\n    end\n  end\n  return rolling_max\nend",
  "  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local value = numbers[i]\n    rolling_max[#rolling_max + 1] = value\n   \
    \ i = i + 1\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local rolling_max_index = 0\n  local rolling_max_value = numbers[1]\n  for\
    \ i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value then\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n\
    \  for i = 1, rolling_max_index do\n    rolling_max:insert(numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local max_value\
    \ = numbers[1]\n  local max_index = 1\n  for i = 2, #numbers do\n    if numbers[i]\
    \ > max_value then\n      max_value = numbers[i]\n      max_index = i\n    end\n\
    \  end\n  rolling_max:insert(max_value)\n  rolling_max:insert(max_index)\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers.new()\n  local max_value =\
    \ numbers.new()\n  local max_index = numbers.new()\n  local i = 1\n  while i <=\
    \ numbers.n do\n    local value = numbers[i]\n    local index = i\n    while i\
    \ + 1 < numbers.n and numbers[i + 1] > value do\n      i = i + 1\n    end\n  \
    \  rolling_max[index] = value\n    max_value[index] = value\n    max_index[index]\
    \ = i\n    i = i + 1\n  end\n  return rolling_max, max_value, max_index\nend",
  "  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_element = numbers[i]\n    local max_element_index = i\n    while\
    \ i + 1 < #numbers and numbers[i + 1] > max_element do\n      i = i + 1\n    end\n\
    \    rolling_max[max_element_index] = max_element\n    i = i + 1\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers.new()\n  local i = 1\n  while\
    \ i <= #numbers do\n    local max_value = numbers[i]\n    for j = i - 1, i - 2,\
    \ i - 3, i - 4, i - 5, i - 6, i - 7, i - 8, i - 9, i - 10, i - 11, i - 12, i -\
    \ 13, i - 14, i - 15, i - 16, i - 17, i - 18, i - 19, i - 20, i - 21, i - 22,\
    \ i - 23, i - 24, i - 25, i - 26, i - 27, i - 28, i - 29, i - 30, i - 31, i -\
    \ 32, i - 33, i - 34, i - 35, i - 36, i - 37, i - 38, i - 39, i - 40, i - 41,\
    \ i - 42, i - 43, i - 44, i - 45, i - 46, i - 47, i - 48, i - 49, i - 50, i -\
    \ 51, i - 52, i - 53, i - 54, i - 55, i - 56, i - 57, i - 58, i - 59, i - 60,\
    \ i - 61, i - 62, i - 63, i - 64, i - 65, i - 66, i - 67, i - 68, i - 69, i -\
    \ 70, i - 71, i - 72, i - 73, i - 74, i - 75, i - 76, i - 77, i - 78, i - 79,\
    \ i - 80, i - 81, i - 82, i - 83, i - 84, i - 85, i - 86, i - 87, i - 88, i -\
    \ 89, i - 90, i - 91, i - 92, i - 93, i - 94, i - 95, i - 96, i - 97, i - 98,\
    \ i - 99, i - 100, i - 101, i - 102, i - 103, i - 104, i - 105, i - 106, i - 107,\
    \ i - 108, i - 109, i - 110, i - 111, i - 112, i - 113, i - 114, i - 115, i -\
    \ 116, i - 117, i - 118, i - 119, i - 120, i - 121, i - 122, i - 123, i - 124,\
    \ i - 125, i - 126, i - 127, i - 128, i - 129, i - 130, i - 131, i - 132, i -\
    \ 133, i - 134, i - 135, i - 136, i - 137, i - 138, i - 139, i - 140, i - 141,\
    \ i - 142, i - 143, i - 144, i - 145, i - 146, i - 147, i - 148, i - 149, i -\
    \ 150, i - 151, i - 152, i - 153, i - 154, i - 155, i - 156, i - 157, i - 158,\
    \ i - 159, i - 160, i - 161, i - 162, i - 163, i - 164, i - 165, i - 166, i -\
    \ 167, i - 168, i - 169, i - 170, i - 171, i - 172, i - 173, i - 174, i - 175,\
    \ i - 176, i - 177, i - 178, i - 179, i - 180, i - 181, i - 182, i - 183, i -\
    \ 184, i - 185, i - ", "  local rolling_max = numbers.new()\n  local i = 1\n \
    \ while i <= #numbers do\n    local element = numbers[i]\n    rolling_max[#rolling_max\
    \ + 1] = element\n    i = i + 1\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.new()\n  local max_value = numbers[1]\n  local max_index = 1\n  for\
    \ i = 2, #numbers do\n    if numbers[i] ~= max_value then\n      rolling_max[max_index]\
    \ = max_value\n      max_value = numbers[i]\n      max_index = i\n    end\n  end\n\
    \  rolling_max[max_index] = max_value\n  return rolling_max\nend", "  local rolling_max\
    \ = {}\n  local max_index = 0\n  local max_value = numbers[1]\n  for i = 2, #numbers\
    \ do\n    if numbers[i] > max_value then\n      max_value = numbers[i]\n     \
    \ max_index = i\n    end\n  end\n  rolling_max[max_index] = max_value\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers.new()\n  local index = 1\n\
    \  while true do\n    local element = numbers[index]\n    index = index + 1\n\
    \    if element > rolling_max[#rolling_max] then\n      rolling_max[#rolling_max]\
    \ = element\n    end\n    if index > #numbers then\n      break\n    end\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local i =\
    \ 1\n  while i <= #numbers do\n    local value = numbers[i]\n    rolling_max:insert(value)\n\
    \    i = i + 1\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local i = 1\n  while i <= #numbers do\n    local max_element = numbers[i]\n\
    \    local max_element_index = i\n    while i + 1 < #numbers do\n      if numbers[i\
    \ + 1] > max_element then\n        max_element = numbers[i + 1]\n        max_element_index\
    \ = i + 1\n      end\n      i = i + 1\n    end\n    rolling_max:insert(max_element)\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local\
    \ max_value = numbers[1]\n  local max_index = 1\n  for i = 2, #numbers do\n  \
    \  if numbers[i] > max_value then\n      rolling_max:insert(max_value)\n     \
    \ max_value = numbers[i]\n      max_index = i\n    end\n  end\n  rolling_max:insert(max_value)\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local last_value\
    \ = numbers.last()\n  local last_index = #numbers - 1\n  local current_value =\
    \ numbers[last_index]\n  local current_index = last_index\n  while current_index\
    \ > 1 do\n    current_value = numbers[current_index]\n    if current_value > last_value\
    \ then\n      rolling_max:insert(current_value)\n    end\n    last_value = current_value\n\
    \    last_index = current_index - 1\n    current_index = current_index - 1\n \
    \ end\n  rolling_max:insert(last_value)\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n    local\
    \ value = numbers[i]\n    rolling_max[#rolling_max + 1] = value\n    i = i + 1\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local\
    \ i = 1\n  while i <= #numbers do\n    local value = numbers[i]\n    rolling_max[#rolling_max\
    \ + 1] = value\n    i = i + 1\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.new()\n  local max_value = numbers[1]\n  local max_index = 1\n  for\
    \ i = 2, #numbers do\n    if numbers[i] ~= max_value then\n      rolling_max[max_index]\
    \ = numbers[i]\n      max_value = numbers[i]\n      max_index = i\n    end\n \
    \ end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local\
    \ i = 1\n  while i <= #numbers do\n    local max_element = numbers[i]\n    local\
    \ max_index = i\n    for j = i + 1, #numbers do\n      if numbers[j] > max_element\
    \ then\n        max_element = numbers[j]\n        max_index = j\n      end\n \
    \   end\n    rolling_max[max_index] = max_element\n    i = max_index + 1\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local i =\
    \ 1\n  while i <= #numbers do\n    local max_value = numbers[i]\n    local max_index\
    \ = i\n    for j = i + 1, #numbers do\n      if numbers[j] > max_value then\n\
    \        max_value = numbers[j]\n        max_index = j\n      end\n    end\n \
    \   rolling_max[max_index] = max_value\n    i = max_index + 1\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers.new()\n  local i = 1\n  while\
    \ i <= #numbers do\n    rolling_max[i] = numbers[i]\n    i = i + 1\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers.new()\n  local rolling_max_index\
    \ = 0\n  local rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if\
    \ numbers[i] < rolling_max_value then\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_index = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n\
    \  rolling_max:insert(rolling_max_index)\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.new()\n  local max_value = numbers[1]\n  for i = 2, #numbers\
    \ do\n    if numbers[i] > max_value then\n      rolling_max = numbers:copy(i,\
    \ i - 1)\n      max_value = numbers[i]\n    end\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers\
    \ do\n    local max_value = numbers[i]\n    for j = i - 1, i - 1, -1 do\n    \
    \  if numbers[j] > max_value then\n        max_value = numbers[j]\n      end\n\
    \    end\n    rolling_max:insert(max_value)\n    i = i + 1\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers.new()\n  local max_value = numbers.new()\n\
    \  local max_index = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local value = numbers[i]\n    if value > max_value then\n      rolling_max:insert(max_value)\n\
    \      max_value:copy(max_value)\n      max_index:copy(i)\n    end\n    max_value\
    \ = math.max(max_value, value)\n    i = i + 1\n  end\n  return rolling_max, max_value,\
    \ max_index\nend", "  local rolling_max = numbers.new()\n  local i = 1\n  while\
    \ i <= #numbers do\n    local element = numbers[i]\n    rolling_max[#rolling_max\
    \ + 1] = element\n    i = i + 1\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.new()\n  local i = 1\n  while i <= #numbers do\n    local max_value\
    \ = numbers[i]\n    local max_index = i\n    for j = i + 1, #numbers do\n    \
    \  if numbers[j] > max_value then\n        max_value = numbers[j]\n        max_index\
    \ = j\n      end\n    end\n    rolling_max[max_index] = max_value\n    i = max_index\
    \ + 1\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local rolling_max_index = 0\n  local rolling_max_value = numbers[1]\n  for\
    \ i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value then\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n\
    \  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_value)\n\
    \  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_value)\n\
    \  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_value)\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local i =\
    \ 1\n  while i <= #numbers do\n    local element = numbers[i]\n    rolling_max[#rolling_max\
    \ + 1] = element\n    i = i + 1\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value =\
    \ numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max[rolling_max_index] = rolling_max_value\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max[rolling_max_index]\
    \ = rolling_max_value\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local max_value = numbers[1]\n  local max_index = 1\n  local max_index2 = 0\n\
    \  for i = 2, #numbers do\n    if numbers[i] ~= max_value then\n      rolling_max:insert(max_value)\n\
    \      max_value = numbers[i]\n      max_index = i\n      max_index2 = i\n   \
    \ end\n  end\n  rolling_max:insert(max_value)\n  return rolling_max\nend", " \
    \ local rolling_max = numbers.new()\n  local index = 1\n  local max_value = numbers[1]\n\
    \  local max_index = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~=\
    \ max_value then\n      rolling_max:insert(max_value)\n      max_value = numbers[i]\n\
    \      max_index = i\n    end\n    rolling_max:insert(numbers[i])\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers.new()\n  local rolling_max_index\
    \ = 0\n  local rolling_max_value = numbers[1]\n  local rolling_max_time = numbers[1]\n\
    \  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value then\n     \
    \ rolling_max_value = numbers[i]\n      rolling_max_time = i\n    end\n  end\n\
    \  rolling_max_index = rolling_max_time\n  for i = 1, #numbers do\n    if numbers[i]\
    \ ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n      rolling_max_time\
    \ = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_time)\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local i =\
    \ 1\n  while i <= #numbers do\n    local max_value = numbers[i]\n    local max_index\
    \ = i\n    for j = i + 1, #numbers do\n      if numbers[j] > max_value then\n\
    \        max_value = numbers[j]\n        max_index = j\n      end\n    end\n \
    \   rolling_max[max_index] = max_value\n    i = max_index + 1\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers.new()\n  local last_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    local value = numbers[i]\n    if\
    \ value > last_value then\n      rolling_max:insert(last_value)\n      last_value\
    \ = value\n    else\n      last_value = value\n    end\n  end\n  rolling_max:insert(last_value)\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > max_value then\n\
    \      rolling_max:insert(max_value)\n      max_value = numbers[i]\n    else\n\
    \      rolling_max:insert(numbers[i])\n    end\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers\
    \ do\n    local value = numbers[i]\n    rolling_max[#rolling_max + 1] = value\n\
    \    i = i + 1\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local max_value = numbers[1]\n  local max_index = 1\n  for i = 2, #numbers\
    \ do\n    if numbers[i] > max_value then\n      max_value = numbers[i]\n     \
    \ max_index = i\n    end\n  end\n  rolling_max:insert(max_value)\n  rolling_max:insert(max_index)\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local rolling_max_index\
    \ = 1\n  local rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if\
    \ numbers[i] ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_index = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n\
    \  rolling_max:insert(rolling_max_index)\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max[rolling_max_index] = rolling_max_value\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max[rolling_max_index]\
    \ = rolling_max_value\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local max_value = numbers[1]\n  local max_index = 1\n  for i = 2, #numbers\
    \ do\n    if numbers[i] > max_value then\n      max_value = numbers[i]\n     \
    \ max_index = i\n    end\n  end\n  rolling_max:insert(max_value)\n  rolling_max:insert(max_index)\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local last_value\
    \ = numbers.last()\n  local last_index = #numbers - 1\n  local current_index =\
    \ 1\n  local current_value = numbers[current_index]", "  local rolling_max = numbers.new()\n\
    \  local last_element\n  for i = 1, #numbers do\n    if last_element and last_element\
    \ < numbers[i] then\n      rolling_max:insert(last_element)\n    else\n      rolling_max:insert(numbers[i])\n\
    \    end\n    last_element = numbers[i]\n  end\n  return rolling_max\nend", " \
    \ local rolling_max = numbers.new()\n  local index = 1\n  local max_value = numbers[1]\n\
    \  local max_index = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~=\
    \ max_value then\n      rolling_max:insert(max_value)\n      index = i\n     \
    \ max_value = numbers[i]\n      max_index = numbers[i]\n    else\n      max_value\
    \ = max_value + numbers[i]\n      index = index + 1\n    end\n  end\n  rolling_max:insert(max_value)\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > max_value then\n\
    \      rolling_max = numbers:copy(i, #numbers)\n      max_value = numbers[i]\n\
    \    end\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local rolling_max_index = 0\n  local rolling_max_value = numbers[1]\n  for\
    \ i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value then\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max:resize(#numbers)\n\
    \  for i = 1, #numbers do\n    rolling_max[rolling_max_index] = numbers[i]\n \
    \ end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local\
    \ max_value = numbers.new()\n  local max_index = numbers.new()\n  local i = 1\n\
    \  while i <= #numbers do\n    local value = numbers[i]\n    local index = i\n\
    \    while i + 1 < #numbers do\n      local next_value = numbers[i + 1]\n    \
    \  if next_value > value then\n        value = next_value\n        index = i +\
    \ 1\n      else\n        break\n      end\n      i = i + 1\n    end\n    rolling_max:insert(value)\n\
    \    max_value:insert(value)\n    max_index:insert(index)\n  end\n  return rolling_max,\
    \ max_value, max_index\nend", "  local rolling_max = numbers.new()\n  local i\
    \ = 1\n  while i <= #numbers do\n    local max_element = numbers[i]\n    local\
    \ max_index = i\n    for j = i + 1, #numbers do\n      if numbers[j] > max_element\
    \ then\n        max_element = numbers[j]\n        max_index = j\n      end\n \
    \   end\n    rolling_max[max_index] = max_element\n    i = max_index + 1\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local index\
    \ = 1\n  local max_value = numbers[1]\n  local max_index = numbers[1]\n  for i\
    \ = 2, #numbers do\n    if numbers[i] ~= max_value then\n      rolling_max:insert(max_value)\n\
    \      index = i\n      max_value = numbers[i]\n      max_index = numbers[i]\n\
    \    else\n      max_value = max_value + numbers[i]\n      rolling_max:insert(max_value)\n\
    \    end\n  end\n  rolling_max:insert(max_value)\n  return rolling_max\nend",
  "  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_element = numbers[i]\n    local max_element_index = i\n    while\
    \ i + 1 < #numbers and numbers[i + 1] > max_element do\n      i = i + 1\n    end\n\
    \    rolling_max[max_element_index] = max_element\n    i = i + 1\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers.new()\n  local i = 1\n  while\
    \ i <= #numbers do\n    local max_element = numbers[i]\n    local max_element_index\
    \ = i\n    for j = i + 1, #numbers do\n      if numbers[j] > max_element then\n\
    \        max_element = numbers[j]\n        max_element_index = j\n      end\n\
    \    end\n    rolling_max[max_element_index] = max_element\n    i = max_element_index\
    \ + 1\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local max_value = numbers[1]\n  local max_index = numbers[1]\n  for i = 2,\
    \ #numbers do\n    if numbers[i] > max_value then\n      max_value = numbers[i]\n\
    \      max_index = i\n    end\n  end\n  rolling_max:insert(max_value)\n  rolling_max:insert(max_index)\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > max_value then\n\
    \      rolling_max = numbers[i]\n      max_value = numbers[i]\n    end\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local rolling_max_index\
    \ = 0\n  local rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if\
    \ numbers[i] ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_index = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n\
    \  for i = 1, rolling_max_index do\n    rolling_max:insert(numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = {}\n  local max_value = nil\n\
    \  for _, value in ipairs(numbers) do\n    if max_value == nil then\n      max_value\
    \ = value\n    else\n      if value > max_value then\n        max_value = value\n\
    \      end\n    end\n    table.insert(rolling_max, max_value)\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers.new()\n  local i = 1\n  while\
    \ i <= #numbers do\n    local max_value = numbers[i]\n    local max_index = i\n\
    \    for j = i + 1, #numbers do\n      if numbers[j] > max_value then\n      \
    \  max_value = numbers[j]\n        max_index = j\n      end\n    end\n    rolling_max[max_index]\
    \ = max_value\n    i = max_index + 1\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = {}\n  local max_value = numbers[1]\n  for i = 2, #numbers do\n\
    \    if numbers[i] ~= max_value then\n      rolling_max[max_value] = max_value\n\
    \      max_value = numbers[i]\n    else\n      rolling_max[numbers[i]] = numbers[i]\n\
    \    end\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local max_value = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] >\
    \ max_value then\n      rolling_max:insert(max_value)\n      max_value = numbers[i]\n\
    \    else\n      max_value = max_value .. \", \" .. numbers[i]\n    end\n  end\n\
    \  rolling_max:insert(max_value)\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.new()\n  local max_value = numbers[1]\n  local max_index = 1\n  for\
    \ i = 2, #numbers do\n    if numbers[i] ~= max_value then\n      rolling_max:insert(max_value)\n\
    \      max_value = numbers[i]\n      max_index = i\n    end\n  end\n  rolling_max:insert(max_value)\n\
    \  return rolling_max\nend", "  local rolling_max = {}\n  for i = 1, #numbers\
    \ do\n    local max_value = numbers[i]\n    for j = i - 1, -1, -1 do\n      if\
    \ numbers[j] > max_value then\n        max_value = numbers[j]\n      end\n   \
    \ end\n    table.insert(rolling_max, max_value)\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers\
    \ do\n    local element = numbers[i]\n    rolling_max[i] = element\n    i = i\
    \ + 1\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local max_value = numbers[1]\n  local max_index = 1\n  for i = 2, #numbers\
    \ do\n    if numbers[i] ~= max_value then\n      rolling_max:insert(max_value)\n\
    \      max_value = numbers[i]\n      max_index = i\n    end\n  end\n  rolling_max:insert(max_value)\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local i =\
    \ 1\n  while i <= #numbers do\n    local value = numbers[i]\n    rolling_max:insert(value)\n\
    \    i = i + 1\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local last_value\n  local last_index\n  for i = 1, #numbers do\n    if numbers[i]\
    \ ~= last_value then\n      rolling_max:insert(numbers[i])\n      last_value =\
    \ numbers[i]\n      last_index = i\n    end\n  end\n  return rolling_max\nend",
  "  local rolling_max = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local i = 1\n  while i <= #numbers do\n    local\
    \ value = numbers[i]\n    if value > max_value then\n      max_value = value\n\
    \      max_index = i\n    end\n    rolling_max:insert(max_value)\n    rolling_max:insert(max_index)\n\
    \    i = i + 1\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local rolling_max_index = 1\n  local max_element = numbers[1]\n  for i = 2,\
    \ #numbers do\n    if numbers[i] > max_element then\n      rolling_max_index =\
    \ i\n      max_element = numbers[i]\n    end\n    rolling_max[rolling_max_index]\
    \ = max_element\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local i = 1\n  while i <= #numbers do\n    local max_element = numbers[i]\n\
    \    for j = i - 1, i - 1, -1 do\n      if numbers[j] > max_element then\n   \
    \     max_element = numbers[j]\n      end\n    end\n    rolling_max:insert(max_element)\n\
    \    i = i + 1\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local max_value = numbers[1]\n  local max_index = 1\n  for i = 2, #numbers\
    \ do\n    if numbers[i] > max_value then\n      rolling_max:insert(max_value)\n\
    \      max_value = numbers[i]\n      max_index = i\n    end\n    rolling_max:insert(numbers[i])\n\
    \  end\n  rolling_max:insert(max_value)\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n    local\
    \ max_element = numbers[i]\n    for j = i - 1, i - 1, -1 do\n      if numbers[j]\
    \ > max_element then\n        max_element = numbers[j]\n      end\n    end\n \
    \   rolling_max:insert(max_element)\n    i = i + 1\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers.new()\n  local last_element\n  for i = 1,\
    \ #numbers do\n    local element = numbers[i]\n    if last_element then\n    \
    \  rolling_max[#rolling_max + 1] = element > last_element and element or last_element\n\
    \    end\n    last_element = element\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.new()\n  local max_value = numbers.first()\n  local max_index\
    \ = nil\n  for i = 1, numbers.n do\n    if numbers[i] ~= max_value then\n    \
    \  rolling_max:insert(max_value)\n      max_value = numbers[i]\n      max_index\
    \ = i\n    end\n  end\n  if max_index then\n    rolling_max:insert(max_value)\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local\
    \ index = 1\n  local max_value = numbers[1]\n  rolling_max:insert(numbers[1])\n\
    \  for i = 2, #numbers do\n    if numbers[i] ~= max_value then\n      rolling_max:insert(numbers[i])\n\
    \      index = i\n      max_value = numbers[i]\n    end\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n \
    \ for i = 2, #numbers do\n    if numbers[i] > max_value then\n      rolling_max\
    \ = numbers[i - 1], max_value\n    else\n      rolling_max = numbers[i], max_value\n\
    \    end\n    max_value = rolling_max\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n    local\
    \ max_element = numbers[i]\n    local max_element_index = i\n    while i + 1 <\
    \ #numbers do\n      if numbers[i + 1] > max_element then\n        max_element\
    \ = numbers[i + 1]\n        max_element_index = i + 1\n      end\n      i = i\
    \ + 1\n    end\n    rolling_max:insert(max_element)\n    i = max_element_index\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local\
    \ rolling_max_index = 1\n  local rolling_max_value = numbers[1]\n  local rolling_max_count\
    \ = 0\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value then\n\
    \      rolling_max_value = numbers[i]\n      rolling_max_index = i\n      rolling_max_count\
    \ = rolling_max_count + 1\n    end\n  end\n  rolling_max:resize(rolling_max_index)\n\
    \  for i = 1, rolling_max_count do\n    rolling_max[rolling_max_index - i] = rolling_max_value\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local\
    \ max_value = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > max_value\
    \ then\n      rolling_max:insert(max_value)\n      max_value = numbers[i]\n  \
    \  else\n      max_value = max_value .. \", \" .. numbers[i]\n    end\n  end\n\
    \  rolling_max:insert(max_value)\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.new()\n  local rolling_max_index = 1\n  local rolling_max_value =\
    \ numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local max_value\
    \ = numbers.first()\n  for i = 1, numbers.next() do\n    local value = numbers[i]\n\
    \    if value > max_value then\n      rolling_max = rolling_max.new()\n      max_value\
    \ = value\n    end\n    rolling_max:insert(value)\n  end\n  return rolling_max\n\
    end", "  local rolling_max = {}\n  local max_value = nil\n  for i = 1, #numbers\
    \ do\n    if max_value == nil then\n      max_value = numbers[i]\n    else\n \
    \     if numbers[i] > max_value then\n        max_value = numbers[i]\n      end\n\
    \    end\n    table.insert(rolling_max, max_value)\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers.new()\n  local last_value\n  for i = 1, #numbers\
    \ do\n    if numbers[i] ~= last_value then\n      rolling_max:insert(numbers[i])\n\
    \      last_value = numbers[i]\n    end\n  end\n  return rolling_max\nend", " \
    \ local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  for i =\
    \ 2, #numbers do\n    if numbers[i] > max_value then\n      rolling_max:insert(max_value)\n\
    \      max_value = numbers[i]\n    else\n      max_value = max_value .. \", \"\
    \ .. numbers[i]\n    end\n  end\n  rolling_max:insert(max_value)\n  return rolling_max\n\
    end", "  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers\
    \ do\n    local max_element = numbers[i]\n    for j = i - 1, i - 2, i - 3, i -\
    \ 4, i - 5, i - 6, i - 7, i - 8, i - 9, i - 10, i - 11, i - 12, i - 13, i - 14,\
    \ i - 15, i - 16, i - 17, i - 18, i - 19, i - 20, i - 21, i - 22, i - 23, i -\
    \ 24, i - 25, i - 26, i - 27, i - 28, i - 29, i - 30, i - 31, i - 32, i - 33,\
    \ i - 34, i - 35, i - 36, i - 37, i - 38, i - 39, i - 40, i - 41, i - 42, i -\
    \ 43, i - 44, i - 45, i - 46, i - 47, i - 48, i - 49, i - 50, i - 51, i - 52,\
    \ i - 53, i - 54, i - 55, i - 56, i - 57, i - 58, i - 59, i - 60, i - 61, i -\
    \ 62, i - 63, i - 64, i - 65, i - 66, i - 67, i - 68, i - 69, i - 70, i - 71,\
    \ i - 72, i - 73, i - 74, i - 75, i - 76, i - 77, i - 78, i - 79, i - 80, i -\
    \ 81, i - 82, i - 83, i - 84, i - 85, i - 86, i - 87, i - 88, i - 89, i - 90,\
    \ i - 91, i - 92, i - 93, i - 94, i - 95, i - 96, i - 97, i - 98, i - 99, i -\
    \ 100, i - 101, i - 102, i - 103, i - 104, i - 105, i - 106, i - 107, i - 108,\
    \ i - 109, i - 110, i - 111, i - 112, i - 113, i - 114, i - 115, i - 116, i -\
    \ 117, i - 118, i - 119, i - 120, i - 121, i - 122, i - 123, i - 124, i - 125,\
    \ i - 126, i - 127, i - 128, i - 129, i - 130, i - 131, i - 132, i - 133, i -\
    \ 134, i - 135, i - 136, i - 137, i - 138, i - 139, i - 140, i - 141, i - 142,\
    \ i - 143, i - 144, i - 145, i - 146, i - 147, i - 148, i - 149, i - 150, i -\
    \ 151, i - 152, i - 153, i - 154, i - 155, i - 156, i - 157, i - 158, i - 159,\
    \ i - 160, i - 161, i - 162, i - 163, i - 164, i - 165, i - 166, i - 167, i -\
    \ 168, i - 169, i - 170, i - 171, i - 172, i - 173, i - 174, i - 175, i - 176,\
    \ i - 177, i - 178, i - 179, i - 180, i - 181, i - 182, i - 183, i - 184, i -\
    \ 185, i - ", "  local rolling_max = numbers.new()\n  local i = 1\n  while i <=\
    \ #numbers do\n    rolling_max:insert(numbers[i])\n    i = i + 1\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers.new()\n  local i = 1\n  while\
    \ i <= #numbers do\n    local max_element = numbers[i]\n    for j = i - 1, i -\
    \ 2, i - 3, i - 4, i - 5, i - 6, i - 7, i - 8, i - 9, i - 10, i - 11, i - 12,\
    \ i - 13, i - 14, i - 15, i - 16, i - 17, i - 18, i - 19, i - 20, i - 21, i -\
    \ 22, i - 23, i - 24, i - 25, i - 26, i - 27, i - 28, i - 29, i - 30, i - 31,\
    \ i - 32, i - 33, i - 34, i - 35, i - 36, i - 37, i - 38, i - 39, i - 40, i -\
    \ 41, i - 42, i - 43, i - 44, i - 45, i - 46, i - 47, i - 48, i - 49, i - 50,\
    \ i - 51, i - 52, i - 53, i - 54, i - 55, i - 56, i - 57, i - 58, i - 59, i -\
    \ 60, i - 61, i - 62, i - 63, i - 64, i - 65, i - 66, i - 67, i - 68, i - 69,\
    \ i - 70, i - 71, i - 72, i - 73, i - 74, i - 75, i - 76, i - 77, i - 78, i -\
    \ 79, i - 80, i - 81, i - 82, i - 83, i - 84, i - 85, i - 86, i - 87, i - 88,\
    \ i - 89, i - 90, i - 91, i - 92, i - 93, i - 94, i - 95, i - 96, i - 97, i -\
    \ 98, i - 99, i - 100, i - 101, i - 102, i - 103, i - 104, i - 105, i - 106, i\
    \ - 107, i - 108, i - 109, i - 110, i - 111, i - 112, i - 113, i - 114, i - 115,\
    \ i - 116, i - 117, i - 118, i - 119, i - 120, i - 121, i - 122, i - 123, i -\
    \ 124, i - 125, i - 126, i - 127, i - 128, i - 129, i - 130, i - 131, i - 132,\
    \ i - 133, i - 134, i - 135, i - 136, i - 137, i - 138, i - 139, i - 140, i -\
    \ 141, i - 142, i - 143, i - 144, i - 145, i - 146, i - 147, i - 148, i - 149,\
    \ i - 150, i - 151, i - 152, i - 153, i - 154, i - 155, i - 156, i - 157, i -\
    \ 158, i - 159, i - 160, i - 161, i - 162, i - 163, i - 164, i - 165, i - 166,\
    \ i - 167, i - 168, i - 169, i - 170, i - 171, i - 172, i - 173, i - 174, i -\
    \ 175, i - 176, i - 177, i - 178, i - 179, i - 180, i - 181, i - 182, i - 183,\
    \ i - 184, i - 185, i - ", "  local rolling_max = numbers.new()\n  local i = 1\n\
    \  while i <= #numbers do\n    local element = numbers[i]\n    rolling_max[#rolling_max\
    \ + 1] = element\n    i = i + 1\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.new()\n  local max_value = numbers.new()\n  local max_index = numbers.new()\n\
    \  local max_time = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local max_time = numbers.new()\n  local max_value\
    \ = numbers.new()\n  local max_index = numbers.new()\n  local max_time = numbers.new()\n\
    \  local max_value = numbers.new()\n  local max_index = numbers.new()\n  local\
    \ max_time = numbers.new()\n  local max_value = numbers.new()\n  local max_index\
    \ = numbers.new()\n  local max_time = numbers.new()\n  local max_value = numbers.new()\n\
    \  local max_index = numbers.new()\n  local max_time = numbers.new()\n  local\
    \ max_value = numbers.new()\n  local max_index = numbers.new()\n  local max_time\
    \ = numbers.new()\n  local max_value = numbers.new()\n  local max_index = numbers.new()\n\
    \  local max_time = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local max_time = numbers.new()\n  local max_value\
    \ = numbers.new()\n  local max_index = numbers.new()\n  local max_time = numbers.new()\n\
    \  local max_value = numbers.new()\n  local max_index = numbers.new()\n  local\
    \ max_time = numbers.new()\n  local max_value = numbers.new()\n  local max_index\
    \ = numbers.new()\n  local max_time = numbers.new()\n  local max_value = numbers.new()\n\
    \  local max_index = numbers.new()\n  local max_time = numbers.new()\n  local\
    \ max_value = numbers.new()\n  local max_index = numbers.new()\n  local max_time\
    \ = numbers.new()\n  local max_value = numbers.new()\n  local max_index = numbers.new()\n\
    \  local max_time = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local max_time = numbers.new()\n  local max_value\
    \ = numbers.new()\n  local max_index = numbers.new()\n  local max_time = numbers.new()\n\
    \  local max_value = numbers.new()\n  local max_index = numbers.new()\n  local\
    \ max_time = numbers.new()\n  local max_value = numbers.new()\n  local max_index\
    \ = numbers.new()\n  local max_time = numbers.new()\n  local max_value = numbers.new()\n\
    \  local max_index = numbers.new()\n  local max_time = numbers.new()\n  local\
    \ max_value = numbers.new()\n  local max_index = numbers.new()\n  local max_time\
    \ = numbers.new()", "  local rolling_max = numbers.new()\n  local i = 1\n  while\
    \ i <= #numbers do\n    local value = numbers[i]\n    rolling_max[#rolling_max\
    \ + 1] = value\n    i = i + 1\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.new()\n  local max_value = numbers[1]\n  local max_index = 1\n  for\
    \ i = 2, #numbers do\n    if numbers[i] > max_value then\n      rolling_max[max_index]\
    \ = max_value\n      max_value = numbers[i]\n      max_index = i\n    end\n  end\n\
    \  rolling_max[max_index] = max_value\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.new()\n  local i = 1\n  while i <= #numbers do\n    local max_value\
    \ = numbers[i]\n    local max_index = i\n    for j = i + 1, #numbers do\n    \
    \  if numbers[j] > max_value then\n        max_value = numbers[j]\n        max_index\
    \ = j\n      end\n    end\n    rolling_max:insert(max_value)\n    i = max_index\
    \ + 1\n  end\n  return rolling_max\nend", "  local rolling_max = {}\n  local rolling_max_index\
    \ = 0\n  local rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if\
    \ numbers[i] ~= rolling_max_value then\n      rolling_max[rolling_max_index] =\
    \ rolling_max_value\n      rolling_max_value = numbers[i]\n      rolling_max_index\
    \ = i\n    end\n  end\n  rolling_max[rolling_max_index] = rolling_max_value\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local i =\
    \ 1\n  while i <= #numbers do\n    local max_value = numbers[i]\n    local max_index\
    \ = i\n    for j = i + 1, #numbers do\n      if numbers[j] > max_value then\n\
    \        max_value = numbers[j]\n        max_index = j\n      end\n    end\n \
    \   rolling_max[max_index] = max_value\n    i = max_index + 1\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers.new()\n  local max_value =\
    \ numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > max_value then\n \
    \     rolling_max = rolling_max.new(max_value)\n      max_value = numbers[i]\n\
    \    end\n    rolling_max = rolling_max.new(numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n \
    \ for i = 2, #numbers do\n    if numbers[i] > max_value then\n      rolling_max\
    \ = numbers[i]\n      max_value = numbers[i]\n    else\n      rolling_max = rolling_max\
    \ .. \", \" .. numbers[i]\n    end\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n    local\
    \ max_element = numbers[i]\n    local max_element_index = i\n    while i + 1 <\
    \ #numbers and numbers[i + 1] > max_element do\n      i = i + 1\n    end\n   \
    \ rolling_max[max_element_index] = max_element\n    i = i + 1\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers.new()\n  local i = 1\n  while\
    \ i <= #numbers do\n    local max_element = numbers[i]\n    local max_index =\
    \ i\n    for j = i + 1, #numbers do\n      if numbers[j] > max_element then\n\
    \        max_element = numbers[j]\n        max_index = j\n      end\n    end\n\
    \    rolling_max[max_index] = max_element\n    i = max_index + 1\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers.new()\n  local index = 1\n\
    \  local max_value = numbers[1]\n  rolling_max:insert(max_value)\n  for i = 2,\
    \ #numbers do\n    if numbers[i] ~= max_value then\n      rolling_max:insert(numbers[i])\n\
    \      index = i\n      max_value = numbers[i]\n    end\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local\
    \ rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i]\
    \ ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n      rolling_max_index\
    \ = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local index\
    \ = 1\n  local max_value = numbers[1]\n  local max_index = numbers[1]\n  local\
    \ max_number = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= max_number\
    \ then\n      rolling_max:insert(max_number)\n      index = index + 1\n      max_value\
    \ = numbers[i]\n      max_index = i\n      max_number = numbers[i]\n    else\n\
    \      rolling_max:insert(numbers[i])\n    end\n  end\n  rolling_max:insert(max_number)\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local i =\
    \ 1\n  while i <= #numbers do\n    local max_value = numbers[i]\n    for j = i\
    \ - 1, i - 1, -1 do\n      if numbers[j] > max_value then\n        max_value =\
    \ numbers[j]\n      end\n    end\n    rolling_max:insert(max_value)\n    i = i\
    \ + 1\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local rolling_max_index = 1\n  local rolling_max_value = numbers[1]\n  for\
    \ i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value then\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n\
    \  rolling_max:insert(rolling_max_index)\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n    local\
    \ max_value = numbers[i]\n    for j = i - 1, i - 1, -1 do\n      if numbers[j]\
    \ > max_value then\n        max_value = numbers[j]\n      end\n    end\n    rolling_max:insert(max_value)\n\
    \    i = i + 1\n  end\n  return rolling_max\nend", "  local rolling_max = {}\n\
    \  local max_index = 0\n  local max_value = numbers[1]\n  for i = 2, #numbers\
    \ do\n    if numbers[i] > max_value then\n      rolling_max[max_index] = max_value\n\
    \      max_index = i\n      max_value = numbers[i]\n    else\n      rolling_max[max_index]\
    \ = numbers[i]\n    end\n  end\n  rolling_max[max_index] = max_value\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers.new()\n  local last_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= last_value then\n\
    \      rolling_max:insert(last_value)\n      last_value = numbers[i]\n    end\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local\
    \ rolling_max_index = 0\n  local rolling_max_value = numbers[1]\n  for i = 2,\
    \ #numbers do\n    if numbers[i] ~= rolling_max_value then\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n\
    \  for i = 1, rolling_max_index do\n    rolling_max:insert(numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local i =\
    \ 1\n  while i <= #numbers do\n    local element = numbers[i]\n    rolling_max[#rolling_max\
    \ + 1] = element\n    i = i + 1\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.new()\n  local i = 1\n  while i <= #numbers do\n    local element\
    \ = numbers[i]\n    rolling_max[#rolling_max + 1] = element\n    i = i + 1\n \
    \ end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local\
    \ rolling_max_index = 0\n  local rolling_max_value = numbers[1]\n  for i = 2,\
    \ #numbers do\n    if numbers[i] ~= rolling_max_value then\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n\
    \  rolling_max:insert(rolling_max_index)\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n    local\
    \ element = numbers[i]\n    rolling_max[#rolling_max + 1] = element\n    i = i\
    \ + 1\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local max_value = numbers[1]\n  local max_index = 1\n  for i = 2, #numbers\
    \ do\n    if numbers[i] ~= max_value then\n      rolling_max[max_index] = max_value\n\
    \      max_value = numbers[i]\n      max_index = i\n    end\n  end\n  rolling_max[max_index]\
    \ = max_value\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local rolling_max_index = 0\n  local rolling_max_value = numbers[1]\n  for\
    \ i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value then\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n\
    \  rolling_max:insert(rolling_max_index)\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n    local\
    \ max_value = numbers[i]\n    for j = i - 1, i - 2, i - 3, i - 4, i - 5, i - 6,\
    \ i - 7, i - 8, i - 9, i - 10, i - 11, i - 12, i - 13, i - 14, i - 15, i - 16,\
    \ i - 17, i - 18, i - 19, i - 20, i - 21, i - 22, i - 23, i - 24, i - 25, i -\
    \ 26, i - 27, i - 28, i - 29, i - 30, i - 31, i - 32, i - 33, i - 34, i - 35,\
    \ i - 36, i - 37, i - 38, i - 39, i - 40, i - 41, i - 42, i - 43, i - 44, i -\
    \ 45, i - 46, i - 47, i - 48, i - 49, i - 50, i - 51, i - 52, i - 53, i - 54,\
    \ i - 55, i - 56, i - 57, i - 58, i - 59, i - 60, i - 61, i - 62, i - 63, i -\
    \ 64, i - 65, i - 66, i - 67, i - 68, i - 69, i - 70, i - 71, i - 72, i - 73,\
    \ i - 74, i - 75, i - 76, i - 77, i - 78, i - 79, i - 80, i - 81, i - 82, i -\
    \ 83, i - 84, i - 85, i - 86, i - 87, i - 88, i - 89, i - 90, i - 91, i - 92,\
    \ i - 93, i - 94, i - 95, i - 96, i - 97, i - 98, i - 99, i - 100, i - 101, i\
    \ - 102, i - 103, i - 104, i - 105, i - 106, i - 107, i - 108, i - 109, i - 110,\
    \ i - 111, i - 112, i - 113, i - 114, i - 115, i - 116, i - 117, i - 118, i -\
    \ 119, i - 120, i - 121, i - 122, i - 123, i - 124, i - 125, i - 126, i - 127,\
    \ i - 128, i - 129, i - 130, i - 131, i - 132, i - 133, i - 134, i - 135, i -\
    \ 136, i - 137, i - 138, i - 139, i - 140, i - 141, i - 142, i - 143, i - 144,\
    \ i - 145, i - 146, i - 147, i - 148, i - 149, i - 150, i - 151, i - 152, i -\
    \ 153, i - 154, i - 155, i - 156, i - 157, i - 158, i - 159, i - 160, i - 161,\
    \ i - 162, i - 163, i - 164, i - 165, i - 166, i - 167, i - 168, i - 169, i -\
    \ 170, i - 171, i - 172, i - 173, i - 174, i - 175, i - 176, i - 177, i - 178,\
    \ i - 179, i - 180, i - 181, i - 182, i - 183, i - 184, i - 185, i - ", "  local\
    \ rolling_max = numbers.new()\n  local index = 1\n  local max_value = numbers[1]\n\
    \  rolling_max[1] = max_value\n  for i = 2, #numbers do\n    if numbers[i] ~=\
    \ max_value then\n      max_value = numbers[i]\n      rolling_max[index] = max_value\n\
    \      index = index + 1\n    end\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n    local\
    \ max_value = numbers[i]\n    for j = i - 1, i - 1, -1 do\n      if numbers[j]\
    \ > max_value then\n        max_value = numbers[j]\n      end\n    end\n    rolling_max:insert(max_value)\n\
    \    i = i + 1\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local i = 1\n  while i <= #numbers do\n    local max_element = numbers[i]\n\
    \    local max_index = i\n    for j = i + 1, #numbers do\n      if numbers[j]\
    \ > max_element then\n        max_element = numbers[j]\n        max_index = j\n\
    \      end\n    end\n    rolling_max[max_index] = max_element\n    i = max_index\
    \ + 1\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local max_value = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] >\
    \ max_value then\n      rolling_max:insert(max_value)\n      max_value = numbers[i]\n\
    \    else\n      max_value = max_value .. \", \" .. numbers[i]\n    end\n  end\n\
    \  rolling_max:insert(max_value)\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value =\
    \ numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= max_value then\n\
    \      rolling_max:insert(max_value)\n      max_value = numbers[i]\n    end\n\
    \  end\n  rolling_max:insert(max_value)\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.new()\n  local max_value = numbers[1]\n  for i = 2, #numbers\
    \ do\n    if numbers[i] > max_value then\n      rolling_max = table.concat(rolling_max,\
    \ \", \")\n      rolling_max = table.concat(rolling_max, numbers[i])\n      max_value\
    \ = numbers[i]\n    else\n      rolling_max = table.concat(rolling_max, numbers[i])\n\
    \    end\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local rolling_max_index = 0\n  local rolling_max_value = numbers[1]\n  for\
    \ i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value then\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n\
    \  for i = 1, rolling_max_index do\n    rolling_max:insert(numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local i =\
    \ 1\n  while i <= #numbers do\n    local max_value = numbers[i]\n    for j = i\
    \ - 1, i - 1, -1 do\n      if numbers[j] > max_value then\n        max_value =\
    \ numbers[j]\n      end\n    end\n    rolling_max:insert(max_value)\n    i = i\
    \ + 1\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local max_value = numbers.new()\n  local max_index = numbers.new()\n  local\
    \ max_index_value = numbers.new()\n  for i = 1, numbers.n do\n    max_value =\
    \ max_value[1] or numbers[i]\n    max_index = max_index[1] or i\n    max_index_value\
    \ = max_index_value[1] or max_value\n    rolling_max[i] = max_value\n  end\n \
    \ local i = numbers.n - 1\n  while i >= 1 do\n    max_value = max_value[1] or\
    \ numbers[i]\n    max_index = max_index[1] or i\n    max_index_value = max_index_value[1]\
    \ or max_value\n    rolling_max[i] = max_value\n    i = i - 1\n  end\n  rolling_max[numbers.n]\
    \ = max_index_value\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local rolling_max_index = 0\n  local rolling_max_value = numbers[1]\n  for\
    \ i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value then\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max:resize(#numbers)\n\
    \  for i = 1, #numbers do\n    rolling_max[rolling_max_index] = numbers[i]\n \
    \ end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local\
    \ max_value = numbers.new()\n  local max_index = numbers.new()\n  local max_value\
    \ = numbers.new()\n  local max_index = numbers.new()\n  local max_value = numbers.new()\n\
    \  local max_index = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local max_value = numbers.new()\n  local max_index\
    \ = numbers.new()\n  local max_value = numbers.new()\n  local max_index = numbers.new()\n\
    \  local max_value = numbers.new()\n  local max_index = numbers.new()\n  local\
    \ max_value = numbers.new()\n  local max_index = numbers.new()\n  local max_value\
    \ = numbers.new()\n  local max_index = numbers.new()\n  local max_value = numbers.new()\n\
    \  local max_index = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local max_value = numbers.new()\n  local max_index\
    \ = numbers.new()\n  local max_value = numbers.new()\n  local max_index = numbers.new()\n\
    \  local max_value = numbers.new()\n  local max_index = numbers.new()\n  local\
    \ max_value = numbers.new()\n  local max_index = numbers.new()\n  local max_value\
    \ = numbers.new()\n  local max_index = numbers.new()\n  local max_value = numbers.new()\n\
    \  local max_index = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local max_value = numbers.new()\n  local max_index\
    \ = numbers.new()\n  local max_value = numbers.new()\n  local max_index = numbers.new()\n\
    \  local max_value = numbers.new()\n  local max_index = numbers.new()\n  local\
    \ max_value = numbers.new()\n  local max_index = numbers.new()\n  local max_value\
    \ = numbers.new()\n  local max_index = numbers.new()\n  local max_value = numbers.new()\n\
    \  local max_index = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local max_value = numbers.new()\n  local max_index\
    \ = numbers.new()\n  local max_value = numbers.new()\n  local max_index = numbers.new()\n\
    \  local max_value = numbers.new()\n  local max_index = numbers.new()\n  local\
    \ max_value = numbers.new()\n  local max_index = numbers.new()\n  local max_value\
    \ = numbers.new()\n  local max_index = numbers.new()\n  local max_value = numbers.new()\n\
    \  local max_index = numbers.new()\n  local max_value = numbers.new()", "  local\
    \ rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:resize(#numbers)\n  for i = 1, #numbers do\n    rolling_max[i]\
    \ = numbers[rolling_max_index]\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.new()\n  local i = 1\n  while i <= #numbers do\n    local max_value\
    \ = numbers[i]\n    for j = i - 1, i - 1, -1 do\n      if numbers[j] > max_value\
    \ then\n        max_value = numbers[j]\n      end\n    end\n    rolling_max:insert(max_value)\n\
    \    i = i + 1\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local last_value = numbers[1]\n  for i = 2, #numbers do\n    local value =\
    \ numbers[i]\n    if value > last_value then\n      rolling_max:insert(last_value)\n\
    \      last_value = value\n    else\n      last_value = value\n    end\n  end\n\
    \  rolling_max:insert(last_value)\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.new()\n  local i = 1\n  while i <= #numbers do\n    local max_element\
    \ = numbers[i]\n    local max_index = i\n    for j = i + 1, #numbers do\n    \
    \  if numbers[j] > max_element then\n        max_element = numbers[j]\n      \
    \  max_index = j\n      end\n    end\n    rolling_max[max_index] = max_element\n\
    \    i = max_index + 1\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.new()\n  local max_value = numbers[1]\n  local max_index = 1\n  for\
    \ i = 2, #numbers do\n    if numbers[i] > max_value then\n      rolling_max:insert(max_value)\n\
    \      max_value = numbers[i]\n      max_index = i\n    end\n    rolling_max:insert(numbers[i])\n\
    \  end\n  rolling_max:insert(max_value)\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.new()\n  local index = 1\n  local max_value = numbers[1]\n\
    \  local max_index = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~=\
    \ max_value then\n      rolling_max:insert(max_value)\n      index = i\n     \
    \ max_value = numbers[i]\n      max_index = numbers[i]\n    end\n  end\n  rolling_max:insert(max_value)\n\
    \  return rolling_max\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
