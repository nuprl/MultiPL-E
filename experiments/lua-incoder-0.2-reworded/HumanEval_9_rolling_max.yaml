name: HumanEval_9_rolling_max
language: lua
prompt: "-- From a given table of integers, generate a table of rolling maximum element\
  \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3, 2,\
  \ 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
  \ 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n\
  \    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n\
    \  local max_index = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] >\
    \ max_value then\n      rolling_max:insert(max_value)\n      max_value = numbers[i]\n\
    \      max_index = i\n    else\n      rolling_max:insert(numbers[i])\n    end\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = {}\n  for i = 1, #numbers\
    \ do\n    local max_element = numbers[i]\n    for j = i - 1, 1, -1 do\n      if\
    \ numbers[j] > max_element then\n        max_element = numbers[j]\n      end\n\
    \    end\n    table.insert(rolling_max, max_element)\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers\
    \ do\n    local max_value = numbers[i]\n    local max_index = i\n    for j = i\
    \ + 1, #numbers do\n      if numbers[j] > max_value then\n        max_value =\
    \ numbers[j]\n        max_index = j\n      end\n    end\n    rolling_max:insert(max_value)\n\
    \    i = max_index + 1\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.new()\n  local max_value = numbers[1]\n  for i = 2, #numbers do\n\
    \    if numbers[i] > max_value then\n      rolling_max = numbers:sub(1, i)\n \
    \     max_value = numbers[i]\n    end\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local max_index\
    \ = 1\n  for i = 2, #numbers do\n    if numbers[i] ~= max_value then\n      rolling_max:insert(max_value)\n\
    \      max_value = numbers[i]\n      max_index = i\n    end\n  end\n  rolling_max:insert(max_value)\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local index\
    \ = 1\n  local max_value = numbers[1]\n  rolling_max[1] = max_value\n  for i =\
    \ 2, #numbers do\n    if numbers[i] ~= max_value then\n      max_value = numbers[i]\n\
    \      rolling_max[index] = max_value\n      index = index + 1\n    end\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local max_value\
    \ = numbers.new()\n  local max_index = numbers.new()\n  local i = 1\n  while i\
    \ <= #numbers do\n    local value = numbers[i]\n    if max_value ~= nil and value\
    \ > max_value then\n      rolling_max:insert(max_value)\n      max_value = nil\n\
    \      max_index = nil\n    end\n    if max_value == nil then\n      max_value\
    \ = value\n      max_index = i\n    end\n    rolling_max:insert(value)\n    i\
    \ = i + 1\n  end\n  return rolling_max, max_index, max_value\nend", "  local rolling_max\
    \ = numbers.new()\n  local max_value = numbers.new()\n  local max_index = numbers.new()\n\
    \  local i = 1\n  while i <= #numbers do\n    local value = numbers[i]\n    if\
    \ value > max_value then\n      max_value = value\n      max_index = i\n    end\n\
    \    rolling_max:insert(max_value)\n    rolling_max:insert(max_index)\n    i =\
    \ i + 1\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local i = 1\n  while i <= #numbers do\n    local max_value = numbers[i]\n \
    \   local max_index = i\n    for j = i + 1, #numbers do\n      if numbers[j] >\
    \ max_value then\n        max_value = numbers[j]\n        max_index = j\n    \
    \  end\n    end\n    rolling_max[max_index] = max_value\n    i = max_index + 1\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n  local\
    \ i = 1\n  while i <= #numbers do\n    rolling_max:insert(numbers[i])\n    i =\
    \ i + 1\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local rolling_max_index = 0\n  local rolling_max_value = numbers[1]\n  for\
    \ i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value then\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max:set(rolling_max_index,\
    \ rolling_max_value)\n  return rolling_max\nend", "  local rolling_max = numbers.new()\n\
    \  local last_number = nil\n  local last_max_number = nil\n  for i = 1, #numbers\
    \ do\n    if numbers[i] ~= last_number then\n      rolling_max:insert(numbers[i])\n\
    \      last_number = numbers[i]\n    end\n    if numbers[i] > last_max_number\
    \ then\n      last_max_number = numbers[i]\n    end\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n \
    \ local max_index = 1\n  for i = 2, #numbers do\n    if numbers[i] ~= max_value\
    \ then\n      rolling_max:insert(max_value)\n      max_value = numbers[i]\n  \
    \    max_index = i\n    end\n  end\n  rolling_max:insert(max_value)\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers.new()\n  local i = 1\n  while\
    \ i <= #numbers do\n    rolling_max[i] = numbers[i]\n    i = i + 1\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers.new()\n  local i = 1\n  while\
    \ i <= #numbers do\n    local max_value = numbers[i]\n    local max_index = i\n\
    \    for j = i + 1, #numbers do\n      if numbers[j] > max_value then\n      \
    \  max_value = numbers[j]\n        max_index = j\n      end\n    end\n    rolling_max[max_index]\
    \ = max_value\n    i = max_index + 1\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.new()\n  local last_value = numbers.last()\n  local last_index\
    \ = #numbers - 1\n  local current_value = numbers[last_index]\n  local current_index\
    \ = last_index\n  while current_index do\n    local next_value = numbers[current_index\
    \ + 1]\n    if next_value > current_value then\n      rolling_max:insert(current_value)\n\
    \      last_value = current_value\n      last_index = current_index\n      current_value\
    \ = next_value\n      current_index = current_index + 1\n    else\n      current_value\
    \ = next_value\n      current_index = current_index + 1\n    end\n  end\n  rolling_max:insert(last_value)\n\
    \  return rolling_max\nend", "  local rolling_max = {}\n  local max_value = nil\n\
    \  for i = 1, #numbers do\n    if max_value == nil then\n      max_value = numbers[i]\n\
    \      rolling_max[i] = numbers[i]\n    else\n      if numbers[i] > max_value\
    \ then\n        max_value = numbers[i]\n        rolling_max[i] = numbers[i]\n\
    \      else\n        rolling_max[i] = max_value\n      end\n    end\n  end\n \
    \ return rolling_max\nend", "  local rolling_max = numbers.new()\n  local i =\
    \ 1\n  while i <= #numbers do\n    local max_value = numbers[i]\n    local max_index\
    \ = i\n    for j = i + 1, #numbers do\n      if numbers[j] > max_value then\n\
    \        max_value = numbers[j]\n        max_index = j\n      end\n    end\n \
    \   rolling_max[max_index] = max_value\n    i = max_index + 1\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers.new()\n  local rolling_max_index\
    \ = 0\n  local rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if\
    \ numbers[i] ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_index = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n\
    \  rolling_max:insert(rolling_max_index)\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
