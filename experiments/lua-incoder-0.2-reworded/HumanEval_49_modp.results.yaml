language: lua
name: HumanEval_49_modp
results:
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  local q = modp(n / p, p)\n  if n % p == 0 then return q else\
    \ return q + 1 end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp10tw2pwx.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp10tw2pwx.lua:14: in function 'modp'\n\
    \t/tmp/tmp10tw2pwx.lua:14: in function 'modp'\n\t/tmp/tmp10tw2pwx.lua:14: in function\
    \ 'modp'\n\t/tmp/tmp10tw2pwx.lua:14: in function 'modp'\n\t/tmp/tmp10tw2pwx.lua:14:\
    \ in function 'modp'\n\t/tmp/tmp10tw2pwx.lua:14: in function 'modp'\n\t/tmp/tmp10tw2pwx.lua:14:\
    \ in function 'modp'\n\t/tmp/tmp10tw2pwx.lua:14: in function 'modp'\n\t/tmp/tmp10tw2pwx.lua:14:\
    \ in function 'modp'\n\t/tmp/tmp10tw2pwx.lua:14: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.370 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 or p == -1 then return n end\n  if p == -1 and n ~=\
    \ 0 then return 1 end\n  if p == 1 and n ~= 0 then return 0 end\n  if p == -1\
    \ and n ~= 0 then return -1 end\n  if p == 1 and n ~= 0 then return -2 end\n \
    \ if p == -1 and n ~= 0 then return -2 end\n  if p == 1 and n ~= 0 then return\
    \ -4 end\n  if p == -1 and n ~= 0 then return -4 end\n  if p == 1 and n ~= 0 then\
    \ return -8 end\n  if p == -1 and n ~= 0 then return -8 end\n  if p == 1 and n\
    \ ~= 0 then return -16 end\n  if p == -1 and n ~= 0 then return -16 end\n  if\
    \ p == 1 and n ~= 0 then return -32 end\n  if p == -1 and n ~= 0 then return -32\
    \ end\n  if p == 1 and n ~= 0 then return -64 end\n  if p == -1 and n ~= 0 then\
    \ return -64 end\n  if p == 1 and n ~= 0 then return -128 end\n  if p == -1 and\
    \ n ~= 0 then return -128 end\n  if p == 1 and n ~= 0 then return -256 end\n \
    \ if p == -1 and n ~= 0 then return -256 end\n  if p == 1 and n ~= 0 then return\
    \ -512 end\n  if p == -1 and n ~= 0 then return -512 end\n  if p == 1 and n ~=\
    \ 0 then return -1024 end\n  if p == -1 and n ~= 0 then return -1024 end\n  if\
    \ p == 1 and n ~= 0 then return -2048 end\n  if p == -1 and n ~= 0 then return\
    \ -2048 end\n  if p == 1 and n ~= 0 then return -4096 end\n  if p == -1 and n\
    \ ~= 0 then return -4096 end\n  if p == 1 and n ~= 0 then return -8192 end\n \
    \ if p == -1 and n ~= 0 then return -8192 end\n  if p == 1 and n ~= 0 then return\
    \ -16384 end\n  if p == -1 and n ~= 0 then return -16384 end\n  if p == 1 and\
    \ n ~= 0 then return -32768 end\n  if p == -1 and n ~= 0 then return -32768 end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvdzpor9e.lua:61: ''end'' expected (to close ''function'' at
    line 12) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t == 0 then\n    return 1\n  elseif t < p then\n    return modp(t -\
    \ 1, p) + p\n  else\n    return modp(t - 1, p) + p\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7gxge4u.lua:26:\
    \ expected: 3, actual: 16\nstack traceback:\n\t/tmp/tmpk7gxge4u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return p end\n\
    \  if p == p then return 1 end\n  if p == p ^ n then return modp(n ^ p, p) end\n\
    \  return modp(n / p, p)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph6pd4b8v.lua:24:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmph6pd4b8v.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = 1\n\
    \  while t <= p do\n    if n >= t then\n      n = n - t\n    else\n      n = n\
    \ + t\n    end\n    t = t * 2\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprccr3stn.lua:28:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmprccr3stn.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * p + p\n  else\n    return q\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe2zxlw6v.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpe2zxlw6v.lua:22: in function 'modp'\n\
    \t/tmp/tmpe2zxlw6v.lua:22: in function 'modp'\n\t/tmp/tmpe2zxlw6v.lua:22: in function\
    \ 'modp'\n\t/tmp/tmpe2zxlw6v.lua:22: in function 'modp'\n\t/tmp/tmpe2zxlw6v.lua:22:\
    \ in function 'modp'\n\t/tmp/tmpe2zxlw6v.lua:22: in function 'modp'\n\t/tmp/tmpe2zxlw6v.lua:22:\
    \ in function 'modp'\n\t/tmp/tmpe2zxlw6v.lua:22: in function 'modp'\n\t/tmp/tmpe2zxlw6v.lua:22:\
    \ in function 'modp'\n\t/tmp/tmpe2zxlw6v.lua:22: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.380 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = math.abs(n)\n\
    \  if t <= p then\n    return n\n  elseif t <= p / 2 then\n    return n % p\n\
    \  else\n    return modp(n % p, p)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0p963gq9.lua:27:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmp0p963gq9.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  local r = n % p\n\
    \  if r == 0 then\n    return r\n  end\n  return modp(r, p) * p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaj1v7az6.lua:23:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpaj1v7az6.lua:23: in function 'modp'\n\
    \t/tmp/tmpaj1v7az6.lua:23: in function 'modp'\n\t/tmp/tmpaj1v7az6.lua:23: in function\
    \ 'modp'\n\t/tmp/tmpaj1v7az6.lua:23: in function 'modp'\n\t/tmp/tmpaj1v7az6.lua:23:\
    \ in function 'modp'\n\t/tmp/tmpaj1v7az6.lua:23: in function 'modp'\n\t/tmp/tmpaj1v7az6.lua:23:\
    \ in function 'modp'\n\t/tmp/tmpaj1v7az6.lua:23: in function 'modp'\n\t/tmp/tmpaj1v7az6.lua:23:\
    \ in function 'modp'\n\t/tmp/tmpaj1v7az6.lua:23: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.420 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return 0 end\n\
    \  if p == p then return 1 end\n  if p == p ^ n then return modp(n ^ p, p) end\n\
    \  return modp(n - (n % p), p)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0128sxfp.lua:24:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp0128sxfp.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return p end\n\
    \  if p == -1 then return -n end\n  local m = n % p\n  return modp(m, p) * modp(n,\
    \ p)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ng33rfg.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp2ng33rfg.lua:18: in function 'modp'\n\
    \t/tmp/tmp2ng33rfg.lua:18: in function 'modp'\n\t/tmp/tmp2ng33rfg.lua:18: in function\
    \ 'modp'\n\t/tmp/tmp2ng33rfg.lua:18: in function 'modp'\n\t/tmp/tmp2ng33rfg.lua:18:\
    \ in function 'modp'\n\t/tmp/tmp2ng33rfg.lua:18: in function 'modp'\n\t/tmp/tmp2ng33rfg.lua:18:\
    \ in function 'modp'\n\t/tmp/tmp2ng33rfg.lua:18: in function 'modp'\n\t/tmp/tmp2ng33rfg.lua:18:\
    \ in function 'modp'\n\t/tmp/tmp2ng33rfg.lua:18: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.420 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp584xf0_7.lua:24:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp584xf0_7.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  local q = math.floor(n/p)\n  local r = n % p\n  return modp(q,\
    \ p) * p + r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsbumd7ld.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpsbumd7ld.lua:14: in function 'modp'\n\
    \t/tmp/tmpsbumd7ld.lua:16: in function 'modp'\n\t/tmp/tmpsbumd7ld.lua:16: in function\
    \ 'modp'\n\t/tmp/tmpsbumd7ld.lua:16: in function 'modp'\n\t/tmp/tmpsbumd7ld.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpsbumd7ld.lua:16: in function 'modp'\n\t/tmp/tmpsbumd7ld.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpsbumd7ld.lua:16: in function 'modp'\n\t/tmp/tmpsbumd7ld.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpsbumd7ld.lua:16: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.450 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n/p)\n\
    \  if nn > 0 then\n    return modp(nn, p)\n  else\n    return p - nn * p\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprkmy6fe1.lua:24:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmprkmy6fe1.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 or p == -1 then return n end\n  local q = modp(n /\
    \ p, p)\n  if n % p == 0 then return q else return q + p end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptbm4cbq7.lua:15:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmptbm4cbq7.lua:15: in function 'modp'\n\
    \t/tmp/tmptbm4cbq7.lua:15: in function 'modp'\n\t/tmp/tmptbm4cbq7.lua:15: in function\
    \ 'modp'\n\t/tmp/tmptbm4cbq7.lua:15: in function 'modp'\n\t/tmp/tmptbm4cbq7.lua:15:\
    \ in function 'modp'\n\t/tmp/tmptbm4cbq7.lua:15: in function 'modp'\n\t/tmp/tmptbm4cbq7.lua:15:\
    \ in function 'modp'\n\t/tmp/tmptbm4cbq7.lua:15: in function 'modp'\n\t/tmp/tmptbm4cbq7.lua:15:\
    \ in function 'modp'\n\t/tmp/tmptbm4cbq7.lua:15: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.370 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ (p - 1)\n  if t < 0 then\n    return t + p\n  else\n    return t\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9dm63irk.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp9dm63irk.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return p end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then return q end\n  return q * p\
    \ + p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo_b2mvi2.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpo_b2mvi2.lua:16: in function 'modp'\n\
    \t/tmp/tmpo_b2mvi2.lua:16: in function 'modp'\n\t/tmp/tmpo_b2mvi2.lua:16: in function\
    \ 'modp'\n\t/tmp/tmpo_b2mvi2.lua:16: in function 'modp'\n\t/tmp/tmpo_b2mvi2.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpo_b2mvi2.lua:16: in function 'modp'\n\t/tmp/tmpo_b2mvi2.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpo_b2mvi2.lua:16: in function 'modp'\n\t/tmp/tmpo_b2mvi2.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpo_b2mvi2.lua:16: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.360 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n   \
    \ return -n\n  else\n    local q = modp(n / p, p)\n    return q * p + (n % p)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp31dj979i.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp31dj979i.lua:20: in function 'modp'\n\
    \t/tmp/tmp31dj979i.lua:20: in function 'modp'\n\t/tmp/tmp31dj979i.lua:20: in function\
    \ 'modp'\n\t/tmp/tmp31dj979i.lua:20: in function 'modp'\n\t/tmp/tmp31dj979i.lua:20:\
    \ in function 'modp'\n\t/tmp/tmp31dj979i.lua:20: in function 'modp'\n\t/tmp/tmp31dj979i.lua:20:\
    \ in function 'modp'\n\t/tmp/tmp31dj979i.lua:20: in function 'modp'\n\t/tmp/tmp31dj979i.lua:20:\
    \ in function 'modp'\n\t/tmp/tmp31dj979i.lua:20: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.380 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp584xf0_7.lua:24:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp584xf0_7.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p) * p + n % p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprp_fxxmr.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\
    \t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18: in function\
    \ 'modp'\n\t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18:\
    \ in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18:\
    \ in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18:\
    \ in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.360 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return 0 end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then return q else return q + 1 end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrg3yyle.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpvrg3yyle.lua:16: in function 'modp'\n\
    \t/tmp/tmpvrg3yyle.lua:16: in function 'modp'\n\t/tmp/tmpvrg3yyle.lua:16: in function\
    \ 'modp'\n\t/tmp/tmpvrg3yyle.lua:16: in function 'modp'\n\t/tmp/tmpvrg3yyle.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpvrg3yyle.lua:16: in function 'modp'\n\t/tmp/tmpvrg3yyle.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpvrg3yyle.lua:16: in function 'modp'\n\t/tmp/tmpvrg3yyle.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpvrg3yyle.lua:16: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.370 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = n %\
    \ p\n  if r == 0 then\n    return p\n  else\n    return modp(r, p) * p\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5da9fi__.lua:17:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp5da9fi__.lua:17: in function 'modp'\n\
    \t/tmp/tmp5da9fi__.lua:17: in function 'modp'\n\t/tmp/tmp5da9fi__.lua:17: in function\
    \ 'modp'\n\t/tmp/tmp5da9fi__.lua:17: in function 'modp'\n\t/tmp/tmp5da9fi__.lua:17:\
    \ in function 'modp'\n\t/tmp/tmp5da9fi__.lua:17: in function 'modp'\n\t/tmp/tmp5da9fi__.lua:17:\
    \ in function 'modp'\n\t/tmp/tmp5da9fi__.lua:17: in function 'modp'\n\t/tmp/tmp5da9fi__.lua:17:\
    \ in function 'modp'\n\t/tmp/tmp5da9fi__.lua:17: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.430 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return 1\n  elseif m == p then\n    return 0\n  else\n\
    \    return modp(m, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return 1\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local n1 = math.floor(n)\n\
    \  local n2 = n - n1\n  local n3 = math.floor(p * n1)\n  local n4 = p - n3\n \
    \ local n5 = math.floor(n1 * n2)\n  local n6 = n1 - n5\n  local n7 = math.floor(n2\
    \ * n3)\n  local n8 = n2 - n7\n  local n9 = math.floor(n3 * n4)\n  local n10 =\
    \ n3 - n9\n  local n11 = math.floor(n4 * n5)\n  local n12 = n4 - n11\n  local\
    \ n13 = math.floor(n5 * n6)\n  local n14 = n5 - n13\n  local n15 = math.floor(n6\
    \ * n7)\n  local n16 = n6 - n15\n  local n17 = math.floor(n7 * n8)\n  local n18\
    \ = n7 - n17\n  local n19 = math.floor(n8 * n9)\n  local n20 = n8 - n19\n  local\
    \ n21 = math.floor(n9 * n10)\n  local n22 = n9 - n21\n  local n23 = math.floor(n10\
    \ * n11)\n  local n24 = n10 - n23\n  local n25 = math.floor(n11 * n12)\n  local\
    \ n26 = n11 - n25\n  local n27 = math.floor(n12 * n13)\n  local n28 = n12 - n27\n\
    \  local n29 = math.floor(n13 * n14)\n  local n30 = n13 - n29\n  local n31 = math.floor(n14\
    \ * n15)\n  local n32 = n14 - n31\n  local n33 = math.floor(n15 * n16)\n  local\
    \ n34 = n15 - n33\n  local n35 = math.floor(n16 * n17)\n  local n36 = n16 - n35\n\
    \  local n37 = math.floor(n17 * n18)\n  local n38 = n17 - n37\n  local n39 = math.floor(n18\
    \ * n19)\n  local n40 = n18 - n39\n  local n41 = math.floor(n19 * n20)\n  local\
    \ n42 = n19 - n41\n  local n43 = math.floor(n20 * n21)\n  local n44 = n20 - n43\n\
    \  local n45 = math.floor(n21 * n22)\n  local n46 = n21 - n45\n  local n47 = math.floor(n\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2qqzfhug.lua:60: '')'' expected (to close ''('' at line 59)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local n2 = n *\
    \ n\n  local p2 = p * p\n  if p2 > n2 then\n    return modp(n2, p)\n  elseif p2\
    \ < n2 then\n    return modp(n, p / 2)\n  else\n    return n % p\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local n1 = n %\
    \ p\n  if n1 < 0 then\n    n1 = p + n1\n  end\n  return n1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxr3s5dga.lua:24:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpxr3s5dga.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n/p)\n\
    \  if nn > 0 then\n    return modp(nn, p) * p + n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcd9jiiwk.lua:25:\
    \ expected: 2, actual: 2111\nstack traceback:\n\t/tmp/tmpcd9jiiwk.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return p end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then return q end\n  return q * p\
    \ + p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo_b2mvi2.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpo_b2mvi2.lua:16: in function 'modp'\n\
    \t/tmp/tmpo_b2mvi2.lua:16: in function 'modp'\n\t/tmp/tmpo_b2mvi2.lua:16: in function\
    \ 'modp'\n\t/tmp/tmpo_b2mvi2.lua:16: in function 'modp'\n\t/tmp/tmpo_b2mvi2.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpo_b2mvi2.lua:16: in function 'modp'\n\t/tmp/tmpo_b2mvi2.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpo_b2mvi2.lua:16: in function 'modp'\n\t/tmp/tmpo_b2mvi2.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpo_b2mvi2.lua:16: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.360 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = 1\n\
    \  while n > p do\n    t = t * p\n    n = n - t\n  end\n  return t\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp04kwz8e4.lua:24:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp04kwz8e4.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == 2 then\n    return\
    \ n ^ 2\n  elseif p == 3 then\n    return n ^ 3\n  elseif p == 4 then\n    return\
    \ n ^ 4\n  elseif p == 5 then\n    return n ^ 5\n  elseif p == 6 then\n    return\
    \ n ^ 6\n  elseif p == 7 then\n    return n ^ 7\n  elseif p == 8 then\n    return\
    \ n ^ 8\n  elseif p == 9 then\n    return n ^ 9\n  elseif p == 10 then\n    return\
    \ n ^ 10\n  elseif p == 11 then\n    return n ^ 11\n  elseif p == 12 then\n  \
    \  return n ^ 12\n  elseif p == 13 then\n    return n ^ 13\n  elseif p == 14 then\n\
    \    return n ^ 14\n  elseif p == 15 then\n    return n ^ 15\n  elseif p == 16\
    \ then\n    return n ^ 16\n  elseif p == 17 then\n    return n ^ 17\n  elseif\
    \ p == 18 then\n    return n ^ 18\n  elseif p == 19 then\n    return n ^ 19\n\
    \  elseif p == 20 then\n    return n ^ 20\n  elseif p == 21 then\n    return n\
    \ ^ 21\n  elseif p == 22 then\n    return n ^ 22\n  elseif p == 23 then\n    return\
    \ n ^ 23\n  elseif p == 24 then\n    return n ^ 24\n  elseif p == 25 then\n  \
    \  return n ^ 25\n  elseif p == 26 then\n    return n ^ 26\n  elseif p == 27 then\n\
    \    return n ^ 27\n  elseif p == 28 then\n    return n ^ 28\n  elseif p == 29\
    \ then\n    return n ^ 29\n  elseif p == 30 then\n    return n ^ 30\n  elseif\
    \ p == 31 then\n    return n ^ 31\n  elseif p == 32 then\n    return n ^ 32\n\
    \  elseif p == 33 then\n    return n ^ 33\n  elseif p == 34 then\n    return n\
    \ ^ 34\n  elseif p == 35 then\n    return n ^ 35\n  elseif p == 36 then\n    return\
    \ n ^ 36\n  elseif p == 37 then\n    return n ^ 37\n  elseif p == 38 then\n  \
    \  return n ^ 38\n  elseif p == 39 then\n    return n ^ 39\n  elseif p == 4\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc8jmfw51.lua:94: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 1\n  end\n  if p > n then\n    return modp(n, p - 1)\n  end\n  if\
    \ p < n then\n    return modp(n - p, p)\n  end\n  return modp(n - p, p)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpng5epsza.lua:34:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpng5epsza.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return 1\n  elseif m == p then\n    return 0\n  else\n\
    \    return modp(m, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t == 0 then\n    return 1\n  elseif t < p then\n    return modp(t -\
    \ 1, p) + p\n  else\n    return modp(t - 1, p) * p + p\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkzg37v9w.lua:26:\
    \ expected: 3, actual: 16\nstack traceback:\n\t/tmp/tmpkzg37v9w.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  if p < n then\n    return modp(n - p, p)\n  end\n  return\
    \ modp((n / p) * p, p)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t ~= 0 and t ~= p then\n    return modp(t - 1, p) + p\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxnc1ik9q.lua:23:\
    \ expected: 3, actual: 15\nstack traceback:\n\t/tmp/tmpxnc1ik9q.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  -- Return 2^n\
    \ modulo p (be aware of numerics).\n  -- >>> modp(3, 5)\n  -- 3\n  -- >>> modp(1101,\
    \ 101)\n  -- 2\n  -- >>> modp(0, 101)\n  -- 1\n  -- >>> modp(3, 11)\n  -- 8\n\
    \  -- >>> modp(100, 101)\n  -- 1\n  -- >>> modp(101, 101)\n  -- 0\n  -- >>> modp(101,\
    \ 0)\n  -- 1\n  -- >>> modp(101, -1)\n  -- 1\n  -- >>> modp(101, -2)\n  -- 0\n\
    \  -- >>> modp(101, -3)\n  -- -1\n  -- >>> modp(101, -4)\n  -- -2\n  -- >>> modp(101,\
    \ -5)\n  -- -8\n  -- >>> modp(101, -6)\n  -- -8\n  -- >>> modp(101, -7)\n  --\
    \ -8\n  -- >>> modp(101, -8)\n  -- -8\n  -- >>> modp(101, -9)\n  -- -8\n  -- >>>\
    \ modp(101, -10)\n  -- -8\n  -- >>> modp(101, -11)\n  -- -8\n  -- >>> modp(101,\
    \ -12)\n  -- -8\n  -- >>> modp(101, -13)\n  -- -8\n  -- >>> modp(101, -14)\n \
    \ -- -8\n  -- >>> modp(101, -15)\n  -- -8\n  -- >>> modp(101, -16)\n  -- -8\n\
    \  -- >>> modp(101, -17)\n  -- -8\n  -- >>> modp(101, -18)\n  -- -8\n  -- >>>\
    \ modp(101, -19)\n  -- -8\n  -- >>> modp(101, -20)\n  -- -8\n  -- >>> modp(101,\
    \ -21)\n  -- -8\n  -- >>> modp(101, -22)\n  -- -8\n  -- >>> modp(101, -23)\n \
    \ -- -8\n  -- >>> modp(101, -24)\n  -- -8\n  -- >>> modp(101, -25)\n  -- -8\n\
    \  -- >>> modp(101, -26)\n  -- -8\n  -- >>> modp(101, -27)\n  -- -8\n  -- >>>\
    \ modp(101, -28)\n  -- -8\n  -- >>> modp(101, -29)\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd3qvq_tf.lua:99: ''end'' expected (to close ''function'' at
    line 12) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  if nn < 0 then\n    return modp(math.ceil(n), p)\n  end\n  if nn == 0 then\n\
    \    return 1\n  end\n  local p = p or 1\n  local q = p % nn\n  if q == 0 then\n\
    \    return nn\n  end\n  local r = modp(n - q * nn, p)\n  if r == 0 then\n   \
    \ return q * nn\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return p end\n\
    \  if p == -1 then return n end\n  if p == -n then return p end\n  if p == -2\
    \ then return n end\n  if p == -3 then return n end\n  if p == -4 then return\
    \ n end\n  if p == -5 then return n end\n  if p == -6 then return n end\n  if\
    \ p == -7 then return n end\n  if p == -8 then return n end\n  if p == -9 then\
    \ return n end\n  if p == -10 then return n end\n  if p == -11 then return n end\n\
    \  if p == -12 then return n end\n  if p == -13 then return n end\n  if p == -14\
    \ then return n end\n  if p == -15 then return n end\n  if p == -16 then return\
    \ n end\n  if p == -17 then return n end\n  if p == -18 then return n end\n  if\
    \ p == -19 then return n end\n  if p == -20 then return n end\n  if p == -21 then\
    \ return n end\n  if p == -22 then return n end\n  if p == -23 then return n end\n\
    \  if p == -24 then return n end\n  if p == -25 then return n end\n  if p == -26\
    \ then return n end\n  if p == -27 then return n end\n  if p == -28 then return\
    \ n end\n  if p == -29 then return n end\n  if p == -30 then return n end\n  if\
    \ p == -31 then return n end\n  if p == -32 then return n end\n  if p == -33 then\
    \ return n end\n  if p == -34 then return n end\n  if p == -35 then return n end\n\
    \  if p == -36 then return n end\n  if p == -37 then return n end\n  if p == -38\
    \ then return n end\n  if p == -39 then return n end\n  if p == -40 then return\
    \ n end\n  if p == -41 then return n end\n  if p == -42 then return n end\n  if\
    \ p == -43 then return n end\n  if p == -44 then return n end\n  if p == -45 then\
    \ return n end\n  if p == -46 then return n end\n  if p == -47 then return n end\n\
    \  if p\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9ahic869.lua:65: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if n == 0 then\
    \ return 1 end\n  if p == 0 then return 0 end\n  if p == 1 then return n end\n\
    \  if p == -1 then return n end\n  if p == n then return p end\n  if p == -1 then\
    \ return p end\n  if p == n then return p end\n  if p == -1 then return p end\n\
    \  if p == n then return p end\n  if p == -1 then return p end\n  if p == n then\
    \ return p end\n  if p == -1 then return p end\n  if p == n then return p end\n\
    \  if p == -1 then return p end\n  if p == n then return p end\n  if p == -1 then\
    \ return p end\n  if p == n then return p end\n  if p == -1 then return p end\n\
    \  if p == n then return p end\n  if p == -1 then return p end\n  if p == n then\
    \ return p end\n  if p == -1 then return p end\n  if p == n then return p end\n\
    \  if p == -1 then return p end\n  if p == n then return p end\n  if p == -1 then\
    \ return p end\n  if p == n then return p end\n  if p == -1 then return p end\n\
    \  if p == n then return p end\n  if p == -1 then return p end\n  if p == n then\
    \ return p end\n  if p == -1 then return p end\n  if p == n then return p end\n\
    \  if p == -1 then return p end\n  if p == n then return p end\n  if p == -1 then\
    \ return p end\n  if p == n then return p end\n  if p == -1 then return p end\n\
    \  if p == n then return p end\n  if p == -1 then return p end\n  if p == n then\
    \ return p end\n  if p == -1 then return p end\n  if p == n then return p end\n\
    \  if p == -1 then return p end\n  if p == n then return p end\n  if p == -1 then\
    \ return p end\n  if p == n then return p end\n  if p == -1 then return p end\n\
    \  if p == n then return p end\n  if p == -1 then return p end\n  if p == n then\
    \ return p end\n  if p == -1 then return p end\n  if p == n then return p end\n\
    \  if p == -1 then return p end\n  if p == n then return p end\n  if p == -1 then\
    \ return p end\n  if p == n then return p end\n  if \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpba4effyn.lua:71: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * p + p\n  else\n    return q\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe2zxlw6v.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpe2zxlw6v.lua:22: in function 'modp'\n\
    \t/tmp/tmpe2zxlw6v.lua:22: in function 'modp'\n\t/tmp/tmpe2zxlw6v.lua:22: in function\
    \ 'modp'\n\t/tmp/tmpe2zxlw6v.lua:22: in function 'modp'\n\t/tmp/tmpe2zxlw6v.lua:22:\
    \ in function 'modp'\n\t/tmp/tmpe2zxlw6v.lua:22: in function 'modp'\n\t/tmp/tmpe2zxlw6v.lua:22:\
    \ in function 'modp'\n\t/tmp/tmpe2zxlw6v.lua:22: in function 'modp'\n\t/tmp/tmpe2zxlw6v.lua:22:\
    \ in function 'modp'\n\t/tmp/tmpe2zxlw6v.lua:22: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.380 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 0 end\n  if p == 1 or p == 2 then return n end\n  if p == 3 then return\
    \ n end\n  if p == 5 then return n end\n  if p == 9 then return n end\n  if p\
    \ == 16 then return n end\n  if p == 25 then return n end\n  if p == 36 then return\
    \ n end\n  if p == 49 then return n end\n  if p == 64 then return n end\n  if\
    \ p == 79 then return n end\n  if p == 128 then return n end\n  if p == 163 then\
    \ return n end\n  if p == 256 then return n end\n  if p == 512 then return n end\n\
    \  if p == 1024 then return n end\n  if p == 2048 then return n end\n  if p ==\
    \ 4096 then return n end\n  if p == 8192 then return n end\n  if p == 16384 then\
    \ return n end\n  if p == 32768 then return n end\n  if p == 65536 then return\
    \ n end\n  if p == 131072 then return n end\n  if p == 262144 then return n end\n\
    \  if p == 524288 then return n end\n  if p == 1048576 then return n end\n  if\
    \ p == 2097152 then return n end\n  if p == 4194304 then return n end\n  if p\
    \ == 8388608 then return n end\n  if p == 16777216 then return n end\n  if p ==\
    \ 33554432 then return n end\n  if p == 67108864 then return n end\n  if p ==\
    \ 134217728 then return n end\n  if p == 268435456 then return n end\n  if p ==\
    \ 536870912 then return n end\n  if p == 1073741824 then return n end\n  if p\
    \ == -2147483648 then return n end\n  if p == -2147483649 then return n end\n\
    \  if p == -2147483650 then return n end\n  if p == -2147483651 then return n\
    \ end\n  if p == -2147483652 then return n end\n  if p == -2147483653 then return\
    \ n end\n  if p == -2147483654 then return n end\n  if p == -2147483655 then return\
    \ n end\n  if p == -2147483656 then return n end\n  if p == -2147483657 then return\
    \ n end\n  if p == -2147483658 \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphs6kjonw.lua:60: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local q\n  if\
    \ p == 0 then\n    return 1\n  elseif p == 1 then\n    return n\n  else\n    q\
    \ = modp(n / p, p)\n    if n % p == 0 then\n      return q * p + n\n    else\n\
    \      return q\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt12oj_3_.lua:19:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpt12oj_3_.lua:19: in function 'modp'\n\
    \t/tmp/tmpt12oj_3_.lua:19: in function 'modp'\n\t/tmp/tmpt12oj_3_.lua:19: in function\
    \ 'modp'\n\t/tmp/tmpt12oj_3_.lua:19: in function 'modp'\n\t/tmp/tmpt12oj_3_.lua:19:\
    \ in function 'modp'\n\t/tmp/tmpt12oj_3_.lua:19: in function 'modp'\n\t/tmp/tmpt12oj_3_.lua:19:\
    \ in function 'modp'\n\t/tmp/tmpt12oj_3_.lua:19: in function 'modp'\n\t/tmp/tmpt12oj_3_.lua:19:\
    \ in function 'modp'\n\t/tmp/tmpt12oj_3_.lua:19: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.400 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  if p < n then\n    return modp(n - p, p)\n  end\n  return\
    \ modp((n % p) + p, p)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp584xf0_7.lua:24:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp584xf0_7.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return p end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then return q end\n  return q * p\
    \ + (n - q * p) * p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjdqioon0.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpjdqioon0.lua:16: in function 'modp'\n\
    \t/tmp/tmpjdqioon0.lua:16: in function 'modp'\n\t/tmp/tmpjdqioon0.lua:16: in function\
    \ 'modp'\n\t/tmp/tmpjdqioon0.lua:16: in function 'modp'\n\t/tmp/tmpjdqioon0.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpjdqioon0.lua:16: in function 'modp'\n\t/tmp/tmpjdqioon0.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpjdqioon0.lua:16: in function 'modp'\n\t/tmp/tmpjdqioon0.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpjdqioon0.lua:16: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.350 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local n2 = n *\
    \ n\n  local p2 = p * p\n  if p2 > n2 then\n    return modp(n2, p)\n  elseif p2\
    \ < n2 then\n    return modp(n, p2)\n  else\n    return n % p\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xs6vrnv.lua:27:\
    \ expected: 3, actual: -3.0322618990248e+228\nstack traceback:\n\t/tmp/tmp2xs6vrnv.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 0 end\n  if p == 1 or p == 2 then return n end\n  local q = modp(n /\
    \ p, p)\n  if n % p == 0 then return q else return q + p end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb9tjjjfw.lua:15:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpb9tjjjfw.lua:15: in function 'modp'\n\
    \t/tmp/tmpb9tjjjfw.lua:15: in function 'modp'\n\t/tmp/tmpb9tjjjfw.lua:15: in function\
    \ 'modp'\n\t/tmp/tmpb9tjjjfw.lua:15: in function 'modp'\n\t/tmp/tmpb9tjjjfw.lua:15:\
    \ in function 'modp'\n\t/tmp/tmpb9tjjjfw.lua:15: in function 'modp'\n\t/tmp/tmpb9tjjjfw.lua:15:\
    \ in function 'modp'\n\t/tmp/tmpb9tjjjfw.lua:15: in function 'modp'\n\t/tmp/tmpb9tjjjfw.lua:15:\
    \ in function 'modp'\n\t/tmp/tmpb9tjjjfw.lua:15: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.350 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp584xf0_7.lua:24:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp584xf0_7.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  if nn < 0 then\n    return modp(-n, p)\n  end\n  local nn = nn + p\n  if nn\
    \ < 0 then\n    return nn\n  end\n  local nn = nn % p\n  if nn > p then\n    return\
    \ nn\n  end\n  return nn\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1zblu8ur.lua:32:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmp1zblu8ur.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = n %\
    \ p\n  if r == 0 then\n    return p\n  else\n    return r + modp(r + p, p)\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6gf9v9f1.lua:17:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp6gf9v9f1.lua:17: in function 'modp'\n\
    \t/tmp/tmp6gf9v9f1.lua:17: in function 'modp'\n\t/tmp/tmp6gf9v9f1.lua:17: in function\
    \ 'modp'\n\t/tmp/tmp6gf9v9f1.lua:17: in function 'modp'\n\t/tmp/tmp6gf9v9f1.lua:17:\
    \ in function 'modp'\n\t/tmp/tmp6gf9v9f1.lua:17: in function 'modp'\n\t/tmp/tmp6gf9v9f1.lua:17:\
    \ in function 'modp'\n\t/tmp/tmp6gf9v9f1.lua:17: in function 'modp'\n\t/tmp/tmp6gf9v9f1.lua:17:\
    \ in function 'modp'\n\t/tmp/tmp6gf9v9f1.lua:17: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.410 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = n %\
    \ p\n  if r == 0 then\n    return p\n  else\n    return modp(r, p) * p\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5da9fi__.lua:17:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp5da9fi__.lua:17: in function 'modp'\n\
    \t/tmp/tmp5da9fi__.lua:17: in function 'modp'\n\t/tmp/tmp5da9fi__.lua:17: in function\
    \ 'modp'\n\t/tmp/tmp5da9fi__.lua:17: in function 'modp'\n\t/tmp/tmp5da9fi__.lua:17:\
    \ in function 'modp'\n\t/tmp/tmp5da9fi__.lua:17: in function 'modp'\n\t/tmp/tmp5da9fi__.lua:17:\
    \ in function 'modp'\n\t/tmp/tmp5da9fi__.lua:17: in function 'modp'\n\t/tmp/tmp5da9fi__.lua:17:\
    \ in function 'modp'\n\t/tmp/tmp5da9fi__.lua:17: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.430 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  local q = 1\n  while q < p do\n    q = q * 2\n  end\n\
    \  return n % p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4aoo3vkb.lua:33:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmp4aoo3vkb.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp584xf0_7.lua:24:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp584xf0_7.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  if nn == n then\n    return 1\n  elseif nn == 0 then\n    return 0\n  end\n\
    \  local r = n % p\n  if r == 0 then\n    return modp(n + p - 1, p)\n  else\n\
    \    return modp(r + p - 1, p)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq9pfyndg.lua:30:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpq9pfyndg.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp584xf0_7.lua:24:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp584xf0_7.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  elseif m == p then\n    return n\n  else\n\
    \    return modp(m, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local n1 = math.floor(n)\n\
    \  local n2 = n - n1\n  local n3 = math.floor(n2 / p)\n  local n4 = n2 - n3 *\
    \ p\n  return n1 * p + n3 * p + n4\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbjj7mnq.lua:23:\
    \ expected: 3, actual: 15\nstack traceback:\n\t/tmp/tmpwbjj7mnq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  -- Return 2^n\
    \ modulo p (be aware of numerics).\n  -- >>> modp(3, 5)\n  -- 3\n  -- >>> modp(1101,\
    \ 101)\n  -- 2\n  -- >>> modp(0, 101)\n  -- 1\n  -- >>> modp(3, 11)\n  -- 8\n\
    \  -- >>> modp(100, 101)\n  -- 1\n  if n == 0 then return 1 end\n  if n == 1 then\
    \ return p end\n  local t = modp(n / 2, p)\n  if n % 2 == 0 then\n    return t\
    \ * p + p\n  else\n    return t * p\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2j32nxf0.lua:37:\
    \ expected: 3, actual: #Inf\nstack traceback:\n\t/tmp/tmp2j32nxf0.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  local nn = nn + p - 1\n  if nn < 0 then\n    return 0\n  elseif nn >= p then\n\
    \    return 1\n  else\n    return math.floor(nn / p)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpev9xznue.lua:27:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpev9xznue.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local n1 = math.floor(n)\n\
    \  local n2 = n - n1\n  local n3 = math.floor(p * n2)\n  local n4 = p - n3\n \
    \ local n5 = math.floor(n1 * n4)\n  local n6 = n1 - n5\n  local n7 = math.floor(n3\
    \ * n4)\n  local n8 = n3 - n7\n  local n9 = math.floor(n1 * n8)\n  local n10 =\
    \ n1 - n9\n  local n11 = math.floor(n3 * n8)\n  local n12 = n3 - n11\n  local\
    \ n13 = math.floor(n1 * n12)\n  local n14 = n1 - n13\n  local n15 = math.floor(n3\
    \ * n12)\n  local n16 = n3 - n15\n  local n17 = math.floor(n1 * n16)\n  local\
    \ n18 = n1 - n17\n  local n19 = math.floor(n3 * n16)\n  local n20 = n3 - n19\n\
    \  local n21 = math.floor(n1 * n20)\n  local n22 = n1 - n21\n  local n23 = math.floor(n3\
    \ * n20)\n  local n24 = n3 - n23\n  local n25 = math.floor(n1 * n24)\n  local\
    \ n26 = n1 - n25\n  local n27 = math.floor(n3 * n24)\n  local n28 = n3 - n27\n\
    \  local n29 = math.floor(n1 * n26)\n  local n30 = n1 - n29\n  local n31 = math.floor(n3\
    \ * n26)\n  local n32 = n3 - n31\n  local n33 = math.floor(n1 * n28)\n  local\
    \ n34 = n1 - n33\n  local n35 = math.floor(n3 * n28)\n  local n36 = n3 - n35\n\
    \  local n37 = math.floor(n1 * n30)\n  local n38 = n1 - n37\n  local n39 = math.floor(n3\
    \ * n30)\n  local n40 = n3 - n39\n  local n41 = math.floor(n1 * n32)\n  local\
    \ n42 = n1 - n41\n  local n43 = math.floor(n3 * n32)\n  local n44 = n3 - n43\n\
    \  local n45 = math.floor(n1 * n36)\n  local n46 = n1 - n45\n  local n47 = math.floor(n3\
    \ * n36)\n  local n48 = n3 - n47\n  local n49 = math.floor(n1 * n38)\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5a0qzxee.lua:76: ''end'' expected (to close ''function'' at
    line 12) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 or p == -1 then\n    return n\n  end\n  local\
    \ q = modp(n / p, p)\n  if n % p == 0 then\n    return q\n  else\n    return q\
    \ + p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ev7zj99.lua:19:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp7ev7zj99.lua:19: in function 'modp'\n\
    \t/tmp/tmp7ev7zj99.lua:19: in function 'modp'\n\t/tmp/tmp7ev7zj99.lua:19: in function\
    \ 'modp'\n\t/tmp/tmp7ev7zj99.lua:19: in function 'modp'\n\t/tmp/tmp7ev7zj99.lua:19:\
    \ in function 'modp'\n\t/tmp/tmp7ev7zj99.lua:19: in function 'modp'\n\t/tmp/tmp7ev7zj99.lua:19:\
    \ in function 'modp'\n\t/tmp/tmp7ev7zj99.lua:19: in function 'modp'\n\t/tmp/tmp7ev7zj99.lua:19:\
    \ in function 'modp'\n\t/tmp/tmp7ev7zj99.lua:19: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.320 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = n %\
    \ p\n  if r == 0 then\n    return r\n  else\n    return r + p - 1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63u7gz08.lua:24:\
    \ expected: 3, actual: 7\nstack traceback:\n\t/tmp/tmp63u7gz08.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == 2 then\n    return\
    \ n ^ 2\n  elseif p == 3 then\n    return n ^ 3\n  elseif p == 4 then\n    return\
    \ n ^ 4\n  elseif p == 5 then\n    return n ^ 5\n  elseif p == 6 then\n    return\
    \ n ^ 6\n  elseif p == 7 then\n    return n ^ 7\n  elseif p == 8 then\n    return\
    \ n ^ 8\n  elseif p == 9 then\n    return n ^ 9\n  elseif p == 10 then\n    return\
    \ n ^ 10\n  elseif p == 11 then\n    return n ^ 11\n  elseif p == 12 then\n  \
    \  return n ^ 12\n  elseif p == 13 then\n    return n ^ 13\n  elseif p == 14 then\n\
    \    return n ^ 14\n  elseif p == 15 then\n    return n ^ 15\n  elseif p == 16\
    \ then\n    return n ^ 16\n  elseif p == 17 then\n    return n ^ 17\n  elseif\
    \ p == 18 then\n    return n ^ 18\n  elseif p == 19 then\n    return n ^ 19\n\
    \  elseif p == 20 then\n    return n ^ 20\n  elseif p == 21 then\n    return n\
    \ ^ 21\n  elseif p == 22 then\n    return n ^ 22\n  elseif p == 23 then\n    return\
    \ n ^ 23\n  elseif p == 24 then\n    return n ^ 24\n  elseif p == 25 then\n  \
    \  return n ^ 25\n  elseif p == 26 then\n    return n ^ 26\n  elseif p == 27 then\n\
    \    return n ^ 27\n  elseif p == 28 then\n    return n ^ 28\n  elseif p == 29\
    \ then\n    return n ^ 29\n  elseif p == 30 then\n    return n ^ 30\n  elseif\
    \ p == 31 then\n    return n ^ 31\n  elseif p == 32 then\n    return n ^ 32\n\
    \  elseif p == 33 then\n    return n ^ 33\n  elseif p == 34 then\n    return n\
    \ ^ 34\n  elseif p == 35 then\n    return n ^ 35\n  elseif p == 36 then\n    return\
    \ n ^ 36\n  elseif p == 37 then\n    return n ^ 37\n  elseif p == 38 then\n  \
    \  return n ^ 38\n  elseif p == 39 then\n    return n ^ 39\n  elseif p == 4\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc8jmfw51.lua:94: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t > 0 then\n    return modp(t, p)\n  else\n    return t\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return p end\n\
    \  if p > n then return modp(n - p, p) end\n  return modp(n - p, p)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 0 end\n  if p == 1 then return 1 end\n  if p == n then return 1 end\n\
    \  if p == -1 then return 0 end\n  if p == -n then return 0 end\n  if p == -2\
    \ then return 1 end\n  if p == -3 then return 2 end\n  if p == -4 then return\
    \ 3 end\n  if p == -5 then return 4 end\n  if p == -6 then return 5 end\n  if\
    \ p == -7 then return 6 end\n  if p == -8 then return 7 end\n  if p == -9 then\
    \ return 8 end\n  if p == -10 then return 9 end\n  if p == -11 then return 10\
    \ end\n  if p == -12 then return 11 end\n  if p == -13 then return 12 end\n  if\
    \ p == -14 then return 13 end\n  if p == -15 then return 14 end\n  if p == -16\
    \ then return 15 end\n  if p == -17 then return 16 end\n  if p == -18 then return\
    \ 17 end\n  if p == -19 then return 18 end\n  if p == -20 then return 19 end\n\
    \  if p == -21 then return 20 end\n  if p == -22 then return 21 end\n  if p ==\
    \ -23 then return 22 end\n  if p == -24 then return 23 end\n  if p == -25 then\
    \ return 24 end\n  if p == -26 then return 25 end\n  if p == -27 then return 26\
    \ end\n  if p == -28 then return 27 end\n  if p == -29 then return 28 end\n  if\
    \ p == -30 then return 29 end\n  if p == -31 then return 30 end\n  if p == -32\
    \ then return 31 end\n  if p == -33 then return 32 end\n  if p == -34 then return\
    \ 33 end\n  if p == -35 then return 34 end\n  if p == -36 then return 35 end\n\
    \  if p == -37 then return 36 end\n  if p == -38 then return 37 end\n  if p ==\
    \ -39 then return 38 end\n  if p == -40 then return 39 end\n  if p == -41 then\
    \ return 40 end\n  if p == -42 then return 41 end\n  if p == -43 then return 42\
    \ end\n  if p == -44 then return 43 end\n  if p == -45 then return 44 end\n  if\
    \ p == -46 then return 45 end\n  if p == -47 then \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphn53mf80.lua:77: ''end'' expected (to close ''if'' at line
    63) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = math.abs(n)\n\
    \  if t < p then\n    return 0\n  elseif t <= p then\n    return 1\n  elseif t\
    \ % p == 0 then\n    return modp(t / p, p)\n  else\n    return modp(t / p, p)\
    \ + modp((t - modp(t / p, p)) * p, p)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ug2j1f6.lua:28:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp9ug2j1f6.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return 0 end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then\n    return q * q\n  else\n\
    \    return q * q + p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb96y_me0.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpb96y_me0.lua:16: in function 'modp'\n\
    \t/tmp/tmpb96y_me0.lua:16: in function 'modp'\n\t/tmp/tmpb96y_me0.lua:16: in function\
    \ 'modp'\n\t/tmp/tmpb96y_me0.lua:16: in function 'modp'\n\t/tmp/tmpb96y_me0.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpb96y_me0.lua:16: in function 'modp'\n\t/tmp/tmpb96y_me0.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpb96y_me0.lua:16: in function 'modp'\n\t/tmp/tmpb96y_me0.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpb96y_me0.lua:16: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.340 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  local q = 1\n  while q < p do\n    q = q * 2\n  end\n  return\
    \ n % p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcah2cbvo.lua:25:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpcah2cbvo.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * p + p\n  else\n    return q * p\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkaae4k4z.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpkaae4k4z.lua:22: in function 'modp'\n\
    \t/tmp/tmpkaae4k4z.lua:22: in function 'modp'\n\t/tmp/tmpkaae4k4z.lua:22: in function\
    \ 'modp'\n\t/tmp/tmpkaae4k4z.lua:22: in function 'modp'\n\t/tmp/tmpkaae4k4z.lua:22:\
    \ in function 'modp'\n\t/tmp/tmpkaae4k4z.lua:22: in function 'modp'\n\t/tmp/tmpkaae4k4z.lua:22:\
    \ in function 'modp'\n\t/tmp/tmpkaae4k4z.lua:22: in function 'modp'\n\t/tmp/tmpkaae4k4z.lua:22:\
    \ in function 'modp'\n\t/tmp/tmpkaae4k4z.lua:22: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.330 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return p end\n\
    \  local r = n % p\n  return r and modp(r, p) or n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4_3q6s_2.lua:17:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp4_3q6s_2.lua:17: in function 'modp'\n\
    \t/tmp/tmp4_3q6s_2.lua:17: in function 'modp'\n\t/tmp/tmp4_3q6s_2.lua:17: in function\
    \ 'modp'\n\t/tmp/tmp4_3q6s_2.lua:17: in function 'modp'\n\t/tmp/tmp4_3q6s_2.lua:17:\
    \ in function 'modp'\n\t/tmp/tmp4_3q6s_2.lua:17: in function 'modp'\n\t/tmp/tmp4_3q6s_2.lua:17:\
    \ in function 'modp'\n\t/tmp/tmp4_3q6s_2.lua:17: in function 'modp'\n\t/tmp/tmp4_3q6s_2.lua:17:\
    \ in function 'modp'\n\t/tmp/tmp4_3q6s_2.lua:17: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.440 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = n %\
    \ p\n  if r == 0 then\n    return 1\n  else\n    return r + modp(r, p) * p\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxw5dusaa.lua:17:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpxw5dusaa.lua:17: in function 'modp'\n\
    \t/tmp/tmpxw5dusaa.lua:17: in function 'modp'\n\t/tmp/tmpxw5dusaa.lua:17: in function\
    \ 'modp'\n\t/tmp/tmpxw5dusaa.lua:17: in function 'modp'\n\t/tmp/tmpxw5dusaa.lua:17:\
    \ in function 'modp'\n\t/tmp/tmpxw5dusaa.lua:17: in function 'modp'\n\t/tmp/tmpxw5dusaa.lua:17:\
    \ in function 'modp'\n\t/tmp/tmpxw5dusaa.lua:17: in function 'modp'\n\t/tmp/tmpxw5dusaa.lua:17:\
    \ in function 'modp'\n\t/tmp/tmpxw5dusaa.lua:17: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.380 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return p end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then return q end\n  return q * p\
    \ + p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo_b2mvi2.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpo_b2mvi2.lua:16: in function 'modp'\n\
    \t/tmp/tmpo_b2mvi2.lua:16: in function 'modp'\n\t/tmp/tmpo_b2mvi2.lua:16: in function\
    \ 'modp'\n\t/tmp/tmpo_b2mvi2.lua:16: in function 'modp'\n\t/tmp/tmpo_b2mvi2.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpo_b2mvi2.lua:16: in function 'modp'\n\t/tmp/tmpo_b2mvi2.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpo_b2mvi2.lua:16: in function 'modp'\n\t/tmp/tmpo_b2mvi2.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpo_b2mvi2.lua:16: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.360 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local n1 = math.floor(n)\n\
    \  local n2 = n - n1\n  local n3 = math.floor(n2 / p)\n  local n4 = n2 - n3 *\
    \ p\n  if n4 > 0 then\n    return modp(n4, p) + p\n  else\n    return n3\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxd35zid.lua:27:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpaxd35zid.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return 0 end\n\
    \  if p > n then return modp(n, p - 1) end\n  local q = modp(n / p, p)\n  return\
    \ q * p + (n % p)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4uv2p5uj.lua:24:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp4uv2p5uj.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local n1 = math.floor(n)\n\
    \  local n2 = n - n1\n  local n3 = math.floor(n2 / p)\n  local n4 = n2 - n3 *\
    \ p\n  if n4 > p then\n    return modp(n4, p)\n  elseif n4 < p then\n    return\
    \ modp(n3, p)\n  else\n    return n3\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n/p)\n\
    \  if nn > 0 then\n    return modp(nn.*p, p)\n  else\n    return nn\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr7dgot79.lua:15: ''<name>'' expected near ''*''

    '
  stdout: ''
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  local q = modp(n / p, p)\n  if\
    \ n % p == 0 then return q else return q + 1 end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ol1lzsw.lua:15:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp8ol1lzsw.lua:15: in function 'modp'\n\
    \t/tmp/tmp8ol1lzsw.lua:15: in function 'modp'\n\t/tmp/tmp8ol1lzsw.lua:15: in function\
    \ 'modp'\n\t/tmp/tmp8ol1lzsw.lua:15: in function 'modp'\n\t/tmp/tmp8ol1lzsw.lua:15:\
    \ in function 'modp'\n\t/tmp/tmp8ol1lzsw.lua:15: in function 'modp'\n\t/tmp/tmp8ol1lzsw.lua:15:\
    \ in function 'modp'\n\t/tmp/tmp8ol1lzsw.lua:15: in function 'modp'\n\t/tmp/tmp8ol1lzsw.lua:15:\
    \ in function 'modp'\n\t/tmp/tmp8ol1lzsw.lua:15: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.320 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  -- The algorithm\
    \ is based on the fact that p^r = n^r * p^(r-1) (mod p).\n  -- The power of the\
    \ prime p must be larger than the power of the base n.\n  -- The power of the\
    \ base n must be larger than the power of the prime p.\n  -- The power of the\
    \ prime p must be larger than the power of the base n.\n  -- The power of the\
    \ base n must be larger than the power of the prime p.\n  -- The power of the\
    \ prime p must be larger than the power of the base n.\n  -- The power of the\
    \ base n must be larger than the power of the prime p.\n  -- The power of the\
    \ prime p must be larger than the power of the base n.\n  -- The power of the\
    \ base n must be larger than the power of the prime p.\n  -- The power of the\
    \ prime p must be larger than the power of the base n.\n  -- The power of the\
    \ base n must be larger than the power of the prime p.\n  -- The power of the\
    \ prime p must be larger than the power of the base n.\n  -- The power of the\
    \ base n must be larger than the power of the prime p.\n  -- The power of the\
    \ prime p must be larger than the power of the base n.\n  -- The power of the\
    \ base n must be larger than the power of the prime p.\n  -- The power of the\
    \ prime p must be larger than the power of the base n.\n  -- The power of the\
    \ base n must be larger than the power of the prime p.\n  -- The power of the\
    \ prime p must be larger than the power of the base n.\n  -- The power of the\
    \ base n must be larger than the power of the prime p.\n  -- The power of the\
    \ prime p must be larger than the power of the base n.\n  -- The power of the\
    \ base n must be larger than the power of the prime p.\n  -- The power of the\
    \ prime p must be larger than the power of the base n.\n  -- The power of the\
    \ base n must be larger than the power of the prime p.\n  -- The power of the\
    \ prime p must be larger than the power of the base n.\n  -- The power of the\
    \ base n must be larger than the power of the prime p.\n  -- The power of the\
    \ prime p must be larger than the power of the base n.\n  -- The power of the\
    \ base n must be larger than the power of the prime p.\n  -- The power of the\
    \ prime p must be larger than the power of the base n.\n  -- The power of the\
    \ base n must be larger than the power of the prime p.\n  -- The power of the\
    \ prime p must be larger than the power of the base n.\n  -- The power of the\
    \ base n must be larger than the power of the prime p.\n  -- The power of the\
    \ prime p must be larger than the power of the base n.\n  -- The power of the\
    \ base n must be larger than the power of the prime p.\n  -- The power of the\
    \ prime p must be \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpeek6g0tq.lua:60: ''end'' expected (to close ''function'' at
    line 12) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = tostring(n)\n\
    \  local pp = tostring(p)\n  local nn = nn:gsub(\"^0+(.-)$\", \"%1\")\n  local\
    \ pp = pp:gsub(\"^0+(.-)$\", \"%1\")\n  local nn = tonumber(nn)\n  local pp =\
    \ tonumber(pp)\n  if nn == 0 then\n    return 1\n  elseif nn == 1 then\n    return\
    \ p\n  elseif nn > p then\n    return modp(n - 1, p)\n  else\n    return modp(nn\
    \ - 1, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp12celgzz.lua:33:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp12celgzz.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n/p)\n\
    \  if nn == 0 then\n    return 1\n  else\n    return modp(n - nn * p, p)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1fdjw8_a.lua:24:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp1fdjw8_a.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = n %\
    \ p\n  if r == 0 then\n    return 1\n  else\n    return r + modp(r, p) * p\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxw5dusaa.lua:17:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpxw5dusaa.lua:17: in function 'modp'\n\
    \t/tmp/tmpxw5dusaa.lua:17: in function 'modp'\n\t/tmp/tmpxw5dusaa.lua:17: in function\
    \ 'modp'\n\t/tmp/tmpxw5dusaa.lua:17: in function 'modp'\n\t/tmp/tmpxw5dusaa.lua:17:\
    \ in function 'modp'\n\t/tmp/tmpxw5dusaa.lua:17: in function 'modp'\n\t/tmp/tmpxw5dusaa.lua:17:\
    \ in function 'modp'\n\t/tmp/tmpxw5dusaa.lua:17: in function 'modp'\n\t/tmp/tmpxw5dusaa.lua:17:\
    \ in function 'modp'\n\t/tmp/tmpxw5dusaa.lua:17: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.380 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  local q = modp(n\
    \ / p, p)\n  if n % p == 0 then\n    return q * p + q\n  else\n    return q\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyhyu_myq.lua:19:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpyhyu_myq.lua:19: in function 'modp'\n\
    \t/tmp/tmpyhyu_myq.lua:19: in function 'modp'\n\t/tmp/tmpyhyu_myq.lua:19: in function\
    \ 'modp'\n\t/tmp/tmpyhyu_myq.lua:19: in function 'modp'\n\t/tmp/tmpyhyu_myq.lua:19:\
    \ in function 'modp'\n\t/tmp/tmpyhyu_myq.lua:19: in function 'modp'\n\t/tmp/tmpyhyu_myq.lua:19:\
    \ in function 'modp'\n\t/tmp/tmpyhyu_myq.lua:19: in function 'modp'\n\t/tmp/tmpyhyu_myq.lua:19:\
    \ in function 'modp'\n\t/tmp/tmpyhyu_myq.lua:19: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.320 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 or p == 2 then\n    return n\n  end\n  if p\
    \ == 3 then\n    return n & -p\n  end\n  if p == 4 then\n    return n >> 1\n \
    \ end\n  if p == 5 then\n    return n >> 2\n  end\n  if p == 6 then\n    return\
    \ n >> 3\n  end\n  if p == 7 then\n    return n >> 4\n  end\n  if p == 8 then\n\
    \    return n >> 5\n  end\n  if p == 9 then\n    return n >> 6\n  end\n  if p\
    \ == 10 then\n    return n >> 7\n  end\n  if p == 11 then\n    return n >> 8\n\
    \  end\n  if p == 12 then\n    return n >> 9\n  end\n  if p == 13 then\n    return\
    \ n >> 10\n  end\n  if p == 14 then\n    return n >> 11\n  end\n  if p == 15 then\n\
    \    return n >> 12\n  end\n  if p == 16 then\n    return n >> 13\n  end\n  if\
    \ p == 17 then\n    return n >> 14\n  end\n  if p == 18 then\n    return n >>\
    \ 15\n  end\n  if p == 19 then\n    return n >> 16\n  end\n  if p == 20 then\n\
    \    return n >> 17\n  end\n  if p == 21 then\n    return n >> 18\n  end\n  if\
    \ p == 22 then\n    return n >> 19\n  end\n  if p == 23 then\n    return n >>\
    \ 20\n  end\n  if p == 24 then\n    return n >> 21\n  end\n  if p == 25 then\n\
    \    return n >> 22\n  end\n  if p == 26 then\n    return n >> 23\n  end\n  if\
    \ p == 27 then\n    return n >> 24\n  end\n  if p == 28 then\n    return n >>\
    \ 25\n  end\n  if p == 29 then\n    return n >> 26\n  end\n  if p == 30 then\n\
    \    return n >> 27\n  end\n  if p == 31 then\n    return n >> 28\n  end\n  if\
    \ p == 32 then\n    return n >> 29\n  end\n  if p == 33 then\n    return n >>\
    \ 30\n  end\n  if p == 34 then\n    return n >> 31\n  end\n  if p == 35 then\n\
    \    return n >> 32\n  end\n  if p == 36 then\n    return n >> 33\n  end\n  if\
    \ p == 37 then\n    return n >> 34\n  end\n  if p == 38 then\n    return n >>\
    \ 35\n  end\n  if p == 39 then\n    return n >> 36\n  end\n  if p == 40 then\n\
    \    return n >> 37\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp94mvlzmd.lua:20: ''end'' expected (to close ''if'' at line
    19) near ''&''

    '
  stdout: ''
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n/p)\n\
    \  if nn > 0 then\n    return modp(nn, p) * p + n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcd9jiiwk.lua:25:\
    \ expected: 2, actual: 2111\nstack traceback:\n\t/tmp/tmpcd9jiiwk.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local n1 = n %\
    \ p\n  if n1 == 0 then\n    return 1\n  elseif n1 < p then\n    return modp(n1,\
    \ p)\n  else\n    return modp(n1 - p, p)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = n %\
    \ p\n  if r == 0 then\n    return p\n  else\n    return modp(r, p) * p\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5da9fi__.lua:17:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp5da9fi__.lua:17: in function 'modp'\n\
    \t/tmp/tmp5da9fi__.lua:17: in function 'modp'\n\t/tmp/tmp5da9fi__.lua:17: in function\
    \ 'modp'\n\t/tmp/tmp5da9fi__.lua:17: in function 'modp'\n\t/tmp/tmp5da9fi__.lua:17:\
    \ in function 'modp'\n\t/tmp/tmp5da9fi__.lua:17: in function 'modp'\n\t/tmp/tmp5da9fi__.lua:17:\
    \ in function 'modp'\n\t/tmp/tmp5da9fi__.lua:17: in function 'modp'\n\t/tmp/tmp5da9fi__.lua:17:\
    \ in function 'modp'\n\t/tmp/tmp5da9fi__.lua:17: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.430 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p) * p + n % p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprp_fxxmr.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\
    \t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18: in function\
    \ 'modp'\n\t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18:\
    \ in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18:\
    \ in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18:\
    \ in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.360 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local n1 = n %\
    \ p\n  if n1 == 0 then\n    return 1\n  elseif n1 < p then\n    return modp(n1,\
    \ p) * p + modp(n1 - p, p)\n  else\n    return modp(n1 - p, p)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp08hoo_0b.lua:17:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp08hoo_0b.lua:17: in function 'modp'\n\
    \t/tmp/tmp08hoo_0b.lua:17: in function 'modp'\n\t/tmp/tmp08hoo_0b.lua:17: in function\
    \ 'modp'\n\t/tmp/tmp08hoo_0b.lua:17: in function 'modp'\n\t/tmp/tmp08hoo_0b.lua:17:\
    \ in function 'modp'\n\t/tmp/tmp08hoo_0b.lua:17: in function 'modp'\n\t/tmp/tmp08hoo_0b.lua:17:\
    \ in function 'modp'\n\t/tmp/tmp08hoo_0b.lua:17: in function 'modp'\n\t/tmp/tmp08hoo_0b.lua:17:\
    \ in function 'modp'\n\t/tmp/tmp08hoo_0b.lua:17: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.400 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return 0 end\n\
    \  if p == p then return 1 end\n  local q = modp(n / p, p)\n  if n % p == 0 then\
    \ return q end\n  return q * p + (n - q * p) * p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptcxitnu1.lua:25:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmptcxitnu1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  local q = modp(n / p, p)\n  if\
    \ n % p == 0 then\n    return q * p + q\n  else\n    return q * p\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8tiz3qcr.lua:15:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp8tiz3qcr.lua:15: in function 'modp'\n\
    \t/tmp/tmp8tiz3qcr.lua:15: in function 'modp'\n\t/tmp/tmp8tiz3qcr.lua:15: in function\
    \ 'modp'\n\t/tmp/tmp8tiz3qcr.lua:15: in function 'modp'\n\t/tmp/tmp8tiz3qcr.lua:15:\
    \ in function 'modp'\n\t/tmp/tmp8tiz3qcr.lua:15: in function 'modp'\n\t/tmp/tmp8tiz3qcr.lua:15:\
    \ in function 'modp'\n\t/tmp/tmp8tiz3qcr.lua:15: in function 'modp'\n\t/tmp/tmp8tiz3qcr.lua:15:\
    \ in function 'modp'\n\t/tmp/tmp8tiz3qcr.lua:15: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.320 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local n1 = math.floor(n)\n\
    \  local n2 = n - n1\n  local n3 = math.floor(n2 / p)\n  local n4 = n2 - n3 *\
    \ p\n  return n1 * p + n3 * p + n4\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbjj7mnq.lua:23:\
    \ expected: 3, actual: 15\nstack traceback:\n\t/tmp/tmpwbjj7mnq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return p end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then return q else return q + 1 end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpolkxw3p4.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpolkxw3p4.lua:16: in function 'modp'\n\
    \t/tmp/tmpolkxw3p4.lua:16: in function 'modp'\n\t/tmp/tmpolkxw3p4.lua:16: in function\
    \ 'modp'\n\t/tmp/tmpolkxw3p4.lua:16: in function 'modp'\n\t/tmp/tmpolkxw3p4.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpolkxw3p4.lua:16: in function 'modp'\n\t/tmp/tmpolkxw3p4.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpolkxw3p4.lua:16: in function 'modp'\n\t/tmp/tmpolkxw3p4.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpolkxw3p4.lua:16: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.340 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  if nn < 0 then\n    return modp(math.abs(nn), p)\n  end\n  if nn == 0 then\n\
    \    return 1\n  end\n  if nn == 1 then\n    return p\n  end\n  if p < 1 then\n\
    \    return modp(p - 1, p)\n  end\n  local r = n % p\n  if r == 0 then\n    return\
    \ modp(n - p, p)\n  else\n    return modp(r + 1, p)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0nd81dn.lua:37:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpx0nd81dn.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  if nn < 0 then\n    nn = 0\n  elseif nn > p then\n    nn = p\n  end\n  return\
    \ nn\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt6wiz5fm.lua:26:\
    \ expected: 2, actual: 101\nstack traceback:\n\t/tmp/tmpt6wiz5fm.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return 1\n  elseif m == p then\n    return 0\n  else\n\
    \    return modp(m, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  if p < n then\n    return modp(n - p, p)\n  end\n  return\
    \ modp((n - p) + p, p)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = 1\n\
    \  while n > p do\n    t = t * p\n    n = n - t\n  end\n  return t\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp04kwz8e4.lua:24:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp04kwz8e4.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = 1\n\
    \  local r = 1\n  while t <= n do\n    r = r * p % t\n    t = t + 1\n  end\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmcfk80n.lua:25:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpdmcfk80n.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t > 0 then\n    return modp(t, p)\n  elseif t < 0 then\n    return modp(-t,\
    \ p)\n  else\n    return t\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local function\
    \ f(n)\n    if n == 0 then\n      return 1\n    end\n    if p == 0 then\n    \
    \  return 0\n    end\n    if p == 1 or n == p then\n      return 1\n    end\n\
    \    if p > n then\n      return 0\n    end\n    return f(n-1) * p + f(n-2)\n\
    \  end\n  return f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzurc9q5h.lua:34:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpzurc9q5h.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return p end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then\n    return q * p + p\n  else\n\
    \    return q * p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvvp9oiy8.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpvvp9oiy8.lua:16: in function 'modp'\n\
    \t/tmp/tmpvvp9oiy8.lua:16: in function 'modp'\n\t/tmp/tmpvvp9oiy8.lua:16: in function\
    \ 'modp'\n\t/tmp/tmpvvp9oiy8.lua:16: in function 'modp'\n\t/tmp/tmpvvp9oiy8.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpvvp9oiy8.lua:16: in function 'modp'\n\t/tmp/tmpvvp9oiy8.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpvvp9oiy8.lua:16: in function 'modp'\n\t/tmp/tmpvvp9oiy8.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpvvp9oiy8.lua:16: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.320 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p) * p + n % p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprp_fxxmr.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\
    \t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18: in function\
    \ 'modp'\n\t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18:\
    \ in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18:\
    \ in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18:\
    \ in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.360 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = tostring(n)\n\
    \  local pp = tostring(p)\n  local nn = math.floor(nn)\n  local pp = math.floor(pp)\n\
    \  if nn < pp then\n    return nn\n  else\n    return modp(math.floor(nn / p),\
    \ p) * p + nn\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe1exx2dp.lua:28:\
    \ expected: 2, actual: 2111\nstack traceback:\n\t/tmp/tmpe1exx2dp.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp584xf0_7.lua:24:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp584xf0_7.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t < 0 then\n    return modp(t + p, p)\n  else\n    return t\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6v4m0e_t.lua:25:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmp6v4m0e_t.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp584xf0_7.lua:24:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp584xf0_7.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp584xf0_7.lua:24:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp584xf0_7.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n/p)\n\
    \  if nn > 0 then\n    return modp(nn, p)\n  else\n    return p - nn * p\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprkmy6fe1.lua:24:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmprkmy6fe1.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  if nn < 0 then\n    return modp(-n, p)\n  end\n  local dp = p\n  while dp <\
    \ n do\n    dp = dp * 2 + 1\n  end\n  local r = n % dp\n  if r < 0 then\n    return\
    \ modp(r + dp, p)\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxezm6sor.lua:32:\
    \ expected: 2, actual: 1101\nstack traceback:\n\t/tmp/tmpxezm6sor.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p) * p + n % p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprp_fxxmr.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\
    \t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18: in function\
    \ 'modp'\n\t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18:\
    \ in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18:\
    \ in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18:\
    \ in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.360 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = n %\
    \ p\n  if r == 0 then\n    return p\n  else\n    return modp(r, p) * p\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5da9fi__.lua:17:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp5da9fi__.lua:17: in function 'modp'\n\
    \t/tmp/tmp5da9fi__.lua:17: in function 'modp'\n\t/tmp/tmp5da9fi__.lua:17: in function\
    \ 'modp'\n\t/tmp/tmp5da9fi__.lua:17: in function 'modp'\n\t/tmp/tmp5da9fi__.lua:17:\
    \ in function 'modp'\n\t/tmp/tmp5da9fi__.lua:17: in function 'modp'\n\t/tmp/tmp5da9fi__.lua:17:\
    \ in function 'modp'\n\t/tmp/tmp5da9fi__.lua:17: in function 'modp'\n\t/tmp/tmp5da9fi__.lua:17:\
    \ in function 'modp'\n\t/tmp/tmp5da9fi__.lua:17: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.430 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if n == 0 then\
    \ return 1 end\n  if p == 0 then return 0 end\n  if p == 1 then return n end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then return q end\n  return q + p\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6940p9cz.lua:24:\
    \ expected: 3, actual: 2321\nstack traceback:\n\t/tmp/tmp6940p9cz.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  local q = modp(n\
    \ / p, p)\n  if n % p == 0 then\n    return q * p + p\n  end\n  return q\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprkzwo0je.lua:19:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmprkzwo0je.lua:19: in function 'modp'\n\
    \t/tmp/tmprkzwo0je.lua:19: in function 'modp'\n\t/tmp/tmprkzwo0je.lua:19: in function\
    \ 'modp'\n\t/tmp/tmprkzwo0je.lua:19: in function 'modp'\n\t/tmp/tmprkzwo0je.lua:19:\
    \ in function 'modp'\n\t/tmp/tmprkzwo0je.lua:19: in function 'modp'\n\t/tmp/tmprkzwo0je.lua:19:\
    \ in function 'modp'\n\t/tmp/tmprkzwo0je.lua:19: in function 'modp'\n\t/tmp/tmprkzwo0je.lua:19:\
    \ in function 'modp'\n\t/tmp/tmprkzwo0je.lua:19: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.320 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return 0 end\n\
    \  local q = 1\n  while q < p do\n    q = q * 2\n  end\n  local r = n % p\n  r\
    \ = r / p\n  r = r + q\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoiuld1b8.lua:29:\
    \ expected: 3, actual: 8.6\nstack traceback:\n\t/tmp/tmpoiuld1b8.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  if nn < 0 then\n    nn = 0\n  elseif nn > p then\n    nn = p\n  end\n  return\
    \ math.floor(nn / p) * p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi9rstbht.lua:25:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpi9rstbht.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t < 0 then\n    return modp(t + p, p)\n  else\n    return t\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6v4m0e_t.lua:25:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmp6v4m0e_t.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = tostring(n)\n\
    \  local pp = tostring(p)\n  local nn = nn:len() + 2\n  local pp = pp:len() +\
    \ 2\n  local nn = nn:sub(1, nn)\n  local pp = pp:sub(1, pp)\n  local nn = tonumber(nn)\n\
    \  local pp = tonumber(pp)\n  if nn == 0 then\n    return 1\n  elseif nn == 1\
    \ or pp == 1 then\n    return 0\n  elseif nn > pp then\n    return modp(n - 1,\
    \ p)\n  else\n    return modp(nn - 1, p)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkf8w22kn.lua:17:\
    \ attempt to index local 'nn' (a number value)\nstack traceback:\n\t/tmp/tmpkf8w22kn.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpkf8w22kn.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 0 end\n  if p == 1 or p == 2 then return n end\n  if p == 3 then return\
    \ n end\n  local q = modp(n / p, p)\n  if n % p == 0 then return q end\n  return\
    \ q * p + p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe3sduuo0.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpe3sduuo0.lua:16: in function 'modp'\n\
    \t/tmp/tmpe3sduuo0.lua:16: in function 'modp'\n\t/tmp/tmpe3sduuo0.lua:16: in function\
    \ 'modp'\n\t/tmp/tmpe3sduuo0.lua:16: in function 'modp'\n\t/tmp/tmpe3sduuo0.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpe3sduuo0.lua:16: in function 'modp'\n\t/tmp/tmpe3sduuo0.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpe3sduuo0.lua:16: in function 'modp'\n\t/tmp/tmpe3sduuo0.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpe3sduuo0.lua:16: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.320 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp584xf0_7.lua:24:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp584xf0_7.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = tostring(n)\n\
    \  local pp = tostring(p)\n  if pp > 0 then\n    pp = math.floor(pp / 2)\n  else\n\
    \    pp = math.ceil(pp / 2)\n  end\n  local nn = math.floor(nn / 2)\n  local r\
    \ = math.floor(nn / pp)\n  if r * pp > nn then\n    return modp(nn, p)\n  else\n\
    \    return r * p + nn\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdqaa9qea.lua:15:\
    \ attempt to compare number with string\nstack traceback:\n\t/tmp/tmpdqaa9qea.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpdqaa9qea.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  -- Return 2^n\
    \ modulo p (be aware of numerics).\n  -- >>> modp(3, 5)\n  -- 3\n  -- >>> modp(1101,\
    \ 101)\n  -- 2\n  -- >>> modp(0, 101)\n  -- 1\n  -- >>> modp(3, 11)\n  -- 8\n\
    \  -- >>> modp(100, 101)\n  -- 1\n  local mod = 0\n  local i = 1\n  while i <=\
    \ n do\n    mod = mod + ((2^i) * p) -- Compute 2^i mod p\n    i = i + 1\n  end\n\
    \  return mod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqc9kjkki.lua:36:\
    \ expected: 3, actual: 70\nstack traceback:\n\t/tmp/tmpqc9kjkki.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 0 end\n  if p == 1 then return n end\n  local r = n % p\n  if r == 0\
    \ then return modp(n / p, p) end\n  return modp(r, p) + p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1j1lpzh9.lua:17:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp1j1lpzh9.lua:17: in function 'modp'\n\
    \t/tmp/tmp1j1lpzh9.lua:17: in function 'modp'\n\t/tmp/tmp1j1lpzh9.lua:17: in function\
    \ 'modp'\n\t/tmp/tmp1j1lpzh9.lua:17: in function 'modp'\n\t/tmp/tmp1j1lpzh9.lua:17:\
    \ in function 'modp'\n\t/tmp/tmp1j1lpzh9.lua:17: in function 'modp'\n\t/tmp/tmp1j1lpzh9.lua:17:\
    \ in function 'modp'\n\t/tmp/tmp1j1lpzh9.lua:17: in function 'modp'\n\t/tmp/tmp1j1lpzh9.lua:17:\
    \ in function 'modp'\n\t/tmp/tmp1j1lpzh9.lua:17: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.380 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n/p)\n\
    \  if nn ~= n then return modp(nn, p) end\n  return nn % p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4a_wh_lo.lua:21:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp4a_wh_lo.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t < 0 then\n    return modp(t+p, p)\n  elseif t > p then\n    return\
    \ modp(t-p, p)\n  else\n    return t\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnnuknq62.lua:27:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpnnuknq62.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  if nn == n then return n end\n  local r = n % p\n  if r == 0 then return p\
    \ end\n  return modp(r, p) + p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2r0xv1ut.lua:24:\
    \ expected: 2, actual: 1101\nstack traceback:\n\t/tmp/tmp2r0xv1ut.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return 1\n  elseif m == p then\n    return 0\n  else\n\
    \    return modp(m, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local n1 = math.floor(n)\n\
    \  local n2 = n - n1\n  local n3 = math.floor(p * n2)\n  local n4 = p - n3\n \
    \ local n5 = math.floor(n1 * n4)\n  local n6 = n1 - n5\n  return n5 + n6\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75brujzn.lua:26:\
    \ expected: 2, actual: 1101\nstack traceback:\n\t/tmp/tmp75brujzn.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if n == 0 then\
    \ return 1 end\n  if p == 0 then return 0 end\n  if p == 1 then return n end\n\
    \  if p == -1 then return n end\n  if p == -1 then return n end\n  if p == 0 then\
    \ return n end\n  if p == 1 then return n end\n  if p == -1 then return n end\n\
    \  if p == 0 then return n end\n  if p == 1 then return n end\n  if p == -1 then\
    \ return n end\n  if p == 0 then return n end\n  if p == 1 then return n end\n\
    \  if p == -1 then return n end\n  if p == 0 then return n end\n  if p == 1 then\
    \ return n end\n  if p == -1 then return n end\n  if p == 0 then return n end\n\
    \  if p == 1 then return n end\n  if p == -1 then return n end\n  if p == 0 then\
    \ return n end\n  if p == 1 then return n end\n  if p == -1 then return n end\n\
    \  if p == 0 then return n end\n  if p == 1 then return n end\n  if p == -1 then\
    \ return n end\n  if p == 0 then return n end\n  if p == 1 then return n end\n\
    \  if p == -1 then return n end\n  if p == 0 then return n end\n  if p == 1 then\
    \ return n end\n  if p == -1 then return n end\n  if p == 0 then return n end\n\
    \  if p == 1 then return n end\n  if p == -1 then return n end\n  if p == 0 then\
    \ return n end\n  if p == 1 then return n end\n  if p == -1 then return n end\n\
    \  if p == 0 then return n end\n  if p == 1 then return n end\n  if p == -1 then\
    \ return n end\n  if p == 0 then return n end\n  if p == 1 then return n end\n\
    \  if p == -1 then return n end\n  if p == 0 then return n end\n  if p == 1 then\
    \ return n end\n  if p == -1 then return n end\n  if p == 0 then return n end\n\
    \  if p == 1 then return n end\n  if p == -1 then return n end\n  if p == 0 then\
    \ return n end\n  if p == 1 then return n end\n  if p == -1 then return n end\n\
    \  if p == 0 then return n end\n  if p == 1 then return n end\n  if p == -1 then\
    \ return n end\n  if p == 0 then return n end\n  if p == 1 then return n end\n\
    \  if p == -1 then return n end\n  if \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp41dzjsul.lua:73: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * q\n  else\n    return q\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppeuievtw.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmppeuievtw.lua:16: in function 'modp'\n\
    \t/tmp/tmppeuievtw.lua:16: in function 'modp'\n\t/tmp/tmppeuievtw.lua:16: in function\
    \ 'modp'\n\t/tmp/tmppeuievtw.lua:16: in function 'modp'\n\t/tmp/tmppeuievtw.lua:16:\
    \ in function 'modp'\n\t/tmp/tmppeuievtw.lua:16: in function 'modp'\n\t/tmp/tmppeuievtw.lua:16:\
    \ in function 'modp'\n\t/tmp/tmppeuievtw.lua:16: in function 'modp'\n\t/tmp/tmppeuievtw.lua:16:\
    \ in function 'modp'\n\t/tmp/tmppeuievtw.lua:16: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.350 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  -- If n is negative,\
    \ return 1\n  if n < 0 then\n    return 1\n  end\n  -- If p is negative, return\
    \ 1\n  if p < 0 then\n    return 1\n  end\n  -- If n is 0, return 1\n  if n ==\
    \ 0 then\n    return 1\n  end\n  -- If p is 0, return n\n  if p == 0 then\n  \
    \  return n\n  end\n  -- If p is 1, return n\n  if p == 1 then\n    return n\n\
    \  end\n  -- If n is 1, return p\n  if n == 1 then\n    return p\n  end\n  --\
    \ If n is even, return p\n  if n % 2 == 0 then\n    return p\n  end\n  -- If p\
    \ is even, return n\n  if p % 2 == 0 then\n    return n\n  end\n  -- If n is odd,\
    \ return p\n  if n % 2 == 1 then\n    return p\n  end\n  -- If p is odd, return\
    \ n\n  if p % 2 == 1 then\n    return n\n  end\n  -- If n is odd and p is odd,\
    \ return p\n  if n % 2 == 0 and p % 2 == 1 then\n    return p\n  end\n  -- If\
    \ n is odd and p is even, return n\n  if n % 2 == 1 and p % 2 == 0 then\n    return\
    \ n\n  end\n  -- If n is even and p is odd, return n\n  if n % 2 == 0 and p %\
    \ 2 == 1 then\n    return n\n  end\n  -- If n is even and p is even, return p\n\
    \  if n % 2 == 1 and p % 2 == 0 then\n    return p\n  end\n  -- If n is even and\
    \ p is even, return n\n  if n % 2 == 0 and p % 2 == 1 then\n    return n\n  end\n\
    \  -- If n is odd and p is odd, return p\n  if n % 2 == 1 and p % 2 == 1 then\n\
    \    return p\n  end\n  -- If n is odd and p is even, return n\n  if n % 2 ==\
    \ 1 and p % 2 == 0 then\n    return n\n  end\n  -- If n is even and p is odd,\
    \ return n\n  if n % 2 == 0 and p % 2 == 1 then\n    return n\n  end\n  -- If\
    \ n is even and p is even, return p\n  if n % 2 == 1 and p % 2 == 0 then\n   \
    \ return p\n  end\n  -- If n is even and p is even, return n\n  if n % 2 == 0\
    \ and p % 2 == 1 then\n    return n\n  end\n  -- If n is odd and p is odd, return\
    \ p\n  if n % 2 == 1 and \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn1xcdp0v.lua:95: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n/p)\n\
    \  if nn ~= n then return modp(nn, p) end\n  return nn\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgf1h3064.lua:21:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpgf1h3064.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local n1 = math.floor(n)\n\
    \  local n2 = n - n1\n  local n3 = math.floor(n2 / p)\n  local n4 = n2 - n3 *\
    \ p\n  return n1 * p + n3 * p + n4\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbjj7mnq.lua:23:\
    \ expected: 3, actual: 15\nstack traceback:\n\t/tmp/tmpwbjj7mnq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  local nn = math.max(nn, 1)\n  local p = math.floor(p)\n  local pn = math.floor(p)\n\
    \  local r = math.mod(n, p)\n  if r == 0 then\n    return 1\n  else\n    if r\
    \ < pn then\n      return modp(n - r + p, p)\n    else\n      return modp(nn -\
    \ r + p, p)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfyl_2h69.lua:32:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpfyl_2h69.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = math.abs(n)\n\
    \  if t < p then\n    return 0\n  elseif t < p + p then\n    return n - p\n  else\n\
    \    return modp(n - p, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzfzb8edc.lua:26:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpzfzb8edc.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  local q = modp(n / p, p)\n  if\
    \ n % p == 0 then return q else return q + 1 end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ol1lzsw.lua:15:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp8ol1lzsw.lua:15: in function 'modp'\n\
    \t/tmp/tmp8ol1lzsw.lua:15: in function 'modp'\n\t/tmp/tmp8ol1lzsw.lua:15: in function\
    \ 'modp'\n\t/tmp/tmp8ol1lzsw.lua:15: in function 'modp'\n\t/tmp/tmp8ol1lzsw.lua:15:\
    \ in function 'modp'\n\t/tmp/tmp8ol1lzsw.lua:15: in function 'modp'\n\t/tmp/tmp8ol1lzsw.lua:15:\
    \ in function 'modp'\n\t/tmp/tmp8ol1lzsw.lua:15: in function 'modp'\n\t/tmp/tmp8ol1lzsw.lua:15:\
    \ in function 'modp'\n\t/tmp/tmp8ol1lzsw.lua:15: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.320 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t < 0 then\n    return modp(t + p, p)\n  else\n    return t\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6v4m0e_t.lua:25:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmp6v4m0e_t.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp584xf0_7.lua:24:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp584xf0_7.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  -- Return 2^n\
    \ modulo p (be aware of numerics).\n  -- >>> modp(3, 5)\n  -- 3\n  -- >>> modp(1101,\
    \ 101)\n  -- 2\n  -- >>> modp(0, 101)\n  -- 1\n  -- >>> modp(3, 11)\n  -- 8\n\
    \  -- >>> modp(100, 101)\n  -- 1\n  -- >>> modp(101, 101)\n  -- 0\n  -- >>> modp(101,\
    \ 0)\n  -- 1\n  -- >>> modp(101, -1)\n  -- 1\n  -- >>> modp(101, -2)\n  -- 0\n\
    \  -- >>> modp(101, -3)\n  -- -1\n  -- >>> modp(101, -4)\n  -- -2\n  -- >>> modp(101,\
    \ -5)\n  -- -8\n  -- >>> modp(101, -6)\n  -- -8\n  -- >>> modp(101, -7)\n  --\
    \ -8\n  -- >>> modp(101, -8)\n  -- -8\n  -- >>> modp(101, -9)\n  -- -8\n  -- >>>\
    \ modp(101, -10)\n  -- -8\n  -- >>> modp(101, -11)\n  -- -8\n  -- >>> modp(101,\
    \ -12)\n  -- -8\n  -- >>> modp(101, -13)\n  -- -8\n  -- >>> modp(101, -14)\n \
    \ -- -8\n  -- >>> modp(101, -15)\n  -- -8\n  -- >>> modp(101, -16)\n  -- -8\n\
    \  -- >>> modp(101, -17)\n  -- -8\n  -- >>> modp(101, -18)\n  -- -8\n  -- >>>\
    \ modp(101, -19)\n  -- -8\n  -- >>> modp(101, -20)\n  -- -8\n  -- >>> modp(101,\
    \ -21)\n  -- -8\n  -- >>> modp(101, -22)\n  -- -8\n  -- >>> modp(101, -23)\n \
    \ -- -8\n  -- >>> modp(101, -24)\n  -- -8\n  -- >>> modp(101, -25)\n  -- -8\n\
    \  -- >>> modp(101, -26)\n  -- -8\n  -- >>> modp(101, -27)\n  -- -8\n  -- >>>\
    \ modp(101, -28)\n  -- -8\n  -- >>> modp(101, -29)\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd3qvq_tf.lua:99: ''end'' expected (to close ''function'' at
    line 12) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n   \
    \ return -n\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * p + q\n  else\n    return q\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpesl3zl2w.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpesl3zl2w.lua:20: in function 'modp'\n\
    \t/tmp/tmpesl3zl2w.lua:20: in function 'modp'\n\t/tmp/tmpesl3zl2w.lua:20: in function\
    \ 'modp'\n\t/tmp/tmpesl3zl2w.lua:20: in function 'modp'\n\t/tmp/tmpesl3zl2w.lua:20:\
    \ in function 'modp'\n\t/tmp/tmpesl3zl2w.lua:20: in function 'modp'\n\t/tmp/tmpesl3zl2w.lua:20:\
    \ in function 'modp'\n\t/tmp/tmpesl3zl2w.lua:20: in function 'modp'\n\t/tmp/tmpesl3zl2w.lua:20:\
    \ in function 'modp'\n\t/tmp/tmpesl3zl2w.lua:20: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.330 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
