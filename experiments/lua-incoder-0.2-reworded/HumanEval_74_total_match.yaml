name: HumanEval_74_total_match
language: lua
prompt: "-- Write a function that accepts two tables of strings and returns the table\
  \ that has \n-- total number of chars in the all strings of the table less than\
  \ the other table.\n-- if the two tables have the same number of chars, return the\
  \ first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
  \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
  \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
  \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
  \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
  \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
  \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
  \ {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
  \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
  \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
  \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
  \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
  \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local num_chars = {}\n  for _, v in pairs(lst1) do\n    table.insert(num_chars,\
    \ #v)\n  end\n  for _, v in pairs(lst2) do\n    table.insert(num_chars, #v)\n\
    \  end\n  local num_chars_min = table.min(num_chars)\n  local num_chars_max =\
    \ table.max(num_chars)\n  if num_chars_min == num_chars_max then\n    return lst1\n\
    \  end\n  local num_chars_diff = 0\n  for _, v in pairs(num_chars) do\n    if\
    \ v - num_chars_min > num_chars_diff then\n      num_chars_diff = v - num_chars_min\n\
    \    end\n  end\n  local num_chars_diff_min = num_chars_min - num_chars_diff\n\
    \  local num_chars_diff_max = num_chars_max - num_chars_diff\n  local num_chars_diff_max_index\
    \ = num_chars_max - 1\n  local num_chars_diff_max_value = num_chars[num_chars_diff_max_index]\n\
    \  local num_chars_diff_max_index = num_chars_diff_max_index - 1\n  local num_chars_diff_max_value\
    \ = num_chars[num_chars_diff_max_index]\n  local num_chars_diff_max_value = num_chars[num_chars_diff_max_index]\n\
    \  local num_chars_diff_max_value = num_chars[num_chars_diff_max_index]\n  local\
    \ num_chars_diff_max_value = num_chars[num_chars_diff_max_index]\n  local num_chars_diff_max_value\
    \ = num_chars[num_chars_diff_max_index]\n  local num_chars_diff_max_value = num_chars[num_chars_diff_max_index]\n\
    \  local num_chars_diff_max_value = num_chars[num_chars_diff_max_index]\n  local\
    \ num_chars_diff_max_value = num_chars[num_chars_diff_max_index]\n  local num_chars_diff_max_value\
    \ = num_chars[num_chars_diff_max_index]\n  local num_chars_diff_max_value = num_chars[num_chars_diff_max_index]\n\
    \  local num_chars_diff_max_value = num_chars[num_chars_diff_max_index]\n  local\
    \ num_chars_diff_max_value = num_chars[num_chars_diff_max_index]\n  local num_chars_diff_max_value\
    \ = num_chars[num_chars_diff_max_index]\n  local num_chars_diff_max_value = num_chars[num_chars_diff_max_index]\n\
    \  local num_chars_diff_max_value = num_chars[num_chars_diff_max_index]\n  local\
    \ num_chars_diff_max_value = num_chars[num_chars_diff_max_index]\n  local num_chars_diff_max_value\
    \ = num_chars[num_chars_diff_max_index]\n  local num_chars_diff_max_value = num_chars[num_chars_diff_max_index]\n\
    \  local num_chars_diff_max_value = num_chars[num_chars_diff_max_index]\n  local\
    \ num_chars_diff_max_value = num_chars[num_chars_", "    local num_chars = 0\n\
    \    for _, v in pairs(lst1) do\n        num_chars = num_chars + #v\n    end\n\
    \    for _, v in pairs(lst2) do\n        num_chars = num_chars + #v\n    end\n\
    \    if num_chars == 0 then\n        return {}\n    end\n    local num_chars_lst\
    \ = {}\n    for _, v in pairs(lst1) do\n        num_chars_lst[#num_chars_lst+1]\
    \ = #v\n    end\n    for _, v in pairs(lst2) do\n        num_chars_lst[#num_chars_lst+1]\
    \ = #v\n    end\n    local num_chars_lst = num_chars_lst\n    local num_chars_lst\
    \ = num_chars_lst\n    local num_chars_lst = num_chars_lst\n    local num_chars_lst\
    \ = num_chars_lst\n    local num_chars_lst = num_chars_lst\n    local num_chars_lst\
    \ = num_chars_lst\n    local num_chars_lst = num_chars_lst\n    local num_chars_lst\
    \ = num_chars_lst\n    local num_chars_lst = num_chars_lst\n    local num_chars_lst\
    \ = num_chars_lst\n    local num_chars_lst = num_chars_lst\n    local num_chars_lst\
    \ = num_chars_lst\n    local num_chars_lst = num_chars_lst\n    local num_chars_lst\
    \ = num_chars_lst\n    local num_chars_lst = num_chars_lst\n    local num_chars_lst\
    \ = num_chars_lst\n    local num_chars_lst = num_chars_lst\n    local num_chars_lst\
    \ = num_chars_lst\n    local num_chars_lst = num_chars_lst\n    local num_chars_lst\
    \ = num_chars_lst\n    local num_chars_lst = num_chars_lst\n    local num_chars_lst\
    \ = num_chars_lst\n    local num_chars_lst = num_chars_lst\n    local num_chars_lst\
    \ = num_chars_lst\n    local num_chars_lst = num_chars_lst\n    local num_chars_lst\
    \ = num_chars_lst\n    local num_chars_lst = num_chars_lst\n    local num_chars_lst\
    \ = num_chars_lst\n    local num_chars_lst = num_chars_lst\n    local num_chars_lst\
    \ = num_chars_lst\n    local num_chars_lst = num_chars_lst\n    local num_chars_lst\
    \ = num_chars_lst\n    local num_chars_lst = num_chars_lst\n    local num_chars_lst\
    \ = num_chars_lst\n    local num_chars_lst = num_chars_lst\n    local num_chars_lst\
    \ = num_chars_lst\n    local num_chars_lst = num_chars_lst\n    local num_chars_lst\
    \ = num_chars_lst\n    local num_chars_lst = num_chars_lst\n    local num_chars_lst\
    \ = num_chars_lst\n    ", "    local num_chars = 0\n    for _, v in pairs(lst1)\
    \ do\n        num_chars = num_chars + #v\n    end\n    for _, v in pairs(lst2)\
    \ do\n        num_chars = num_chars + #v\n    end\n    if num_chars == 0 then\n\
    \        return {}\n    end\n    local num_chars_lst1 = #lst1\n    local num_chars_lst2\
    \ = #lst2\n    local num_chars_total = num_chars\n    if num_chars_lst1 == num_chars_lst2\
    \ then\n        num_chars_total = num_chars_lst1\n    end\n    local num_chars_lst1_copy\
    \ = num_chars_lst1\n    local num_chars_lst2_copy = num_chars_lst2\n    local\
    \ num_chars_total_copy = num_chars_total\n    while num_chars_lst1_copy > num_chars_lst2_copy\
    \ do\n        num_chars_lst1_copy = num_chars_lst1_copy - 1\n    end\n    while\
    \ num_chars_lst2_copy > num_chars_lst1_copy do\n        num_chars_lst2_copy =\
    \ num_chars_lst2_copy - 1\n    end\n    while num_chars_total_copy > num_chars_lst1_copy\
    \ do\n        num_chars_total_copy = num_chars_total_copy - 1\n    end\n    local\
    \ num_chars_lst1_copy_copy = num_chars_lst1_copy\n    local num_chars_lst2_copy_copy\
    \ = num_chars_lst2_copy\n    local num_chars_total_copy_copy = num_chars_total_copy\n\
    \    while num_chars_lst1_copy_copy > num_chars_lst2_copy_copy do\n        num_chars_lst1_copy_copy\
    \ = num_chars_lst1_copy_copy - 1\n    end\n    while num_chars_lst2_copy_copy\
    \ > num_chars_lst1_copy_copy do\n        num_chars_lst2_copy_copy = num_chars_lst2_copy_copy\
    \ - 1\n    end\n    while num_chars_total_copy_copy > num_chars_lst1_copy_copy\
    \ do\n        num_chars_total_copy_copy = num_chars_total_copy_copy - 1\n    end\n\
    \    local num_chars_lst1_copy_copy_copy = num_chars_lst1_copy_copy\n    local\
    \ num_chars_lst2_copy_copy_copy = num_chars_lst2_copy_copy\n    local num_chars_total_copy_copy_copy\
    \ = num_chars_total_copy_copy\n    while num_chars_lst1_copy_copy_copy > num_chars_lst2_copy_copy_copy\
    \ do\n        num_chars_lst1_copy_copy_copy = num_chars_lst1_copy_copy_copy -\
    \ 1\n    end\n    while num_chars_lst2_copy_copy_copy > num_chars_lst1_copy_copy_copy\
    \ do\n        num_chars_lst2_copy_copy_copy = num_chars_lst2_copy_copy_copy -\
    \ 1\n    end\n    while num_chars_total_copy_copy_copy > num_chars_lst1_copy_copy_copy\
    \ do\n        num_chars_total_copy_copy_copy = num_chars_total_copy_copy_copy\
    \ - 1\n    end\n    local num_chars_lst1_copy_", "  local num_chars = 0\n  for\
    \ _, str1 in ipairs(lst1) do\n    for _, str2 in ipairs(lst2) do\n      num_chars\
    \ = num_chars + #str1\n    end\n  end\n  if #lst1 == #lst2 then\n    return lst1\n\
    \  else\n    return lst2\n  end\nend", "  local num_chars = 0\n  for _, v in pairs(lst1)\
    \ do\n    num_chars = num_chars + #v\n  end\n  for _, v in pairs(lst2) do\n  \
    \  num_chars = num_chars + #v\n  end\n  if num_chars == 0 then\n    return lst1\n\
    \  else\n    return lst2\n  end\nend", "  local num_chars = 0\n  for _, v in pairs(lst1)\
    \ do\n    num_chars = num_chars + #v\n  end\n  for _, v in pairs(lst2) do\n  \
    \  num_chars = num_chars + #v\n  end\n  if num_chars == 0 then\n    return lst1\n\
    \  else\n    return lst2\n  end\nend", "  local num_chars = {}\n  for _, v in\
    \ pairs(lst1) do\n    num_chars[v] = num_chars[v] or 0\n    num_chars[v] = num_chars[v]\
    \ + 1\n  end\n  for _, v in pairs(lst2) do\n    num_chars[v] = num_chars[v] or\
    \ 0\n    num_chars[v] = num_chars[v] + 1\n  end\n  local num_chars_lst = {}\n\
    \  for k, v in pairs(num_chars) do\n    num_chars_lst[k] = v\n  end\n  local num_chars_lst2\
    \ = {}\n  for k, v in pairs(num_chars) do\n    num_chars_lst2[k] = v\n  end\n\
    \  local num_chars_lst3 = {}\n  for k, v in pairs(num_chars) do\n    num_chars_lst3[k]\
    \ = v\n  end\n  local num_chars_lst4 = {}\n  for k, v in pairs(num_chars) do\n\
    \    num_chars_lst4[k] = v\n  end\n  local num_chars_lst5 = {}\n  for k, v in\
    \ pairs(num_chars) do\n    num_chars_lst5[k] = v\n  end\n  local num_chars_lst6\
    \ = {}\n  for k, v in pairs(num_chars) do\n    num_chars_lst6[k] = v\n  end\n\
    \  local num_chars_lst7 = {}\n  for k, v in pairs(num_chars) do\n    num_chars_lst7[k]\
    \ = v\n  end\n  local num_chars_lst8 = {}\n  for k, v in pairs(num_chars) do\n\
    \    num_chars_lst8[k] = v\n  end\n  local num_chars_lst9 = {}\n  for k, v in\
    \ pairs(num_chars) do\n    num_chars_lst9[k] = v\n  end\n  local num_chars_lst10\
    \ = {}\n  for k, v in pairs(num_chars) do\n    num_chars_lst10[k] = v\n  end\n\
    \  local num_chars_lst11 = {}\n  for k, v in pairs(num_chars) do\n    num_chars_lst11[k]\
    \ = v\n  end\n  local num_chars_lst12 = {}\n  for k, v in pairs(num_chars) do\n\
    \    num_chars_lst12[k] = v\n  end\n  local num_chars_lst13 = {}\n  for k, v in\
    \ pairs(num_chars) do\n    num_chars_lst13[k] = v\n  end\n  local num_chars_lst14\
    \ = {}\n  for k, v in pairs(num_chars) do\n    num_chars_lst14[k] = v\n  end\n\
    \  local num_chars_lst15 = {}\n  for k, v in pairs(num_chars) do\n    num_chars_lst15[k]\
    \ = v\n  end\n  local num_chars_lst16 = {}\n  for k, v in pairs(num_chars) do\n\
    \    num_chars_lst16[k] = v\n  end\n  local num_chars_lst17 = {}\n  for k, v in\
    \ pairs(num_chars) do\n    num_chars_lst", "    local num_chars = 0\n    for _,\
    \ v in pairs(lst1) do\n        num_chars = num_chars + #v\n    end\n    for _,\
    \ v in pairs(lst2) do\n        num_chars = num_chars + #v\n    end\n    if num_chars\
    \ == 0 then\n        return {}\n    end\n    local num_chars_lst1 = #lst1\n  \
    \  local num_chars_lst2 = #lst2\n    local num_chars_total = num_chars\n    if\
    \ num_chars_lst1 < num_chars_lst2 then\n        num_chars_total = num_chars_lst1\n\
    \    else\n        num_chars_total = num_chars_lst2\n    end\n    local num_chars_diff\
    \ = num_chars_total - num_chars_lst1\n    local num_chars_diff_lst1 = num_chars_lst1\
    \ - num_chars_lst2\n    local num_chars_diff_lst2 = num_chars_lst2 - num_chars_lst1\n\
    \    local num_chars_diff_total = num_chars_diff_lst1 + num_chars_diff_lst2\n\
    \    local num_chars_diff_diff_lst1 = num_chars_diff_lst1 - num_chars_diff_lst2\n\
    \    local num_chars_diff_diff_lst2 = num_chars_diff_lst2 - num_chars_diff_lst1\n\
    \    local num_chars_diff_diff_total = num_chars_diff_diff_lst1 + num_chars_diff_diff_lst2\n\
    \    local num_chars_diff_diff_diff_lst1 = num_chars_diff_diff_lst1 - num_chars_diff_diff_lst2\n\
    \    local num_chars_diff_diff_diff_lst2 = num_chars_diff_diff_lst2 - num_chars_diff_diff_lst1\n\
    \    local num_chars_diff_diff_diff_total = num_chars_diff_diff_diff_lst1 + num_chars_diff_diff_diff_lst2\n\
    \    local num_chars_diff_diff_diff_diff_lst1 = num_chars_diff_diff_diff_lst1\
    \ - num_chars_diff_diff_diff_lst2\n    local num_chars_diff_diff_diff_diff_lst2\
    \ = num_chars_diff_diff_diff_lst2 - num_chars_diff_diff_diff_lst1\n    local num_chars_diff_diff_diff_diff_total\
    \ = num_chars_diff_diff_diff_diff_lst1 + num_chars_diff_diff_diff_diff_lst2\n\
    \    local num_chars_diff_diff_diff_diff_diff_lst1 = num_chars_diff_diff_diff_diff_lst1\
    \ - num_chars_diff_diff_diff_diff_lst2\n    local num_chars_diff_diff_diff_diff_lst2\
    \ = num_chars_diff_diff_diff_diff_lst2 - num_chars_diff_diff_diff_diff_lst1\n\
    \    local num_chars_diff_diff_diff_diff_total = num_chars_diff_diff_diff_diff_diff_lst1\
    \ + num_chars_diff_diff_diff_diff_diff_lst2\n    local num_chars_diff_diff_diff_diff_diff_lst1\
    \ = num_chars_diff_diff_diff_diff_diff_lst1 - num_chars_diff_diff_diff_diff_diff_lst2\n\
    \    local num_chars_diff_diff_diff_diff_lst2 = num_chars_diff_diff_diff_diff_lst2\
    \ - num_", "  local num_chars = 0\n  for _, v in pairs(lst1) do\n    num_chars\
    \ = num_chars + #v\n  end\n  for _, v in pairs(lst2) do\n    num_chars = num_chars\
    \ + #v\n  end\n  if num_chars == 0 then\n    return lst1\n  else\n    return lst2\n\
    \  end\nend", "    local num_chars = 0\n    for _, v in ipairs(lst1) do\n    \
    \    num_chars = num_chars + #v\n    end\n    for _, v in ipairs(lst2) do\n  \
    \      num_chars = num_chars + #v\n    end\n    if num_chars == 0 then\n     \
    \   return {}\n    end\n    local num_chars_lst1 = #lst1\n    local num_chars_lst2\
    \ = #lst2\n    local num_chars_total = num_chars\n    if num_chars_lst1 == num_chars_lst2\
    \ then\n        return lst1\n    end\n    local num_chars_diff = num_chars_lst1\
    \ - num_chars_lst2\n    local num_chars_total1 = num_chars_lst1 - num_chars_diff\n\
    \    local num_chars_total2 = num_chars_lst2 - num_chars_diff\n    local num_chars_total3\
    \ = num_chars_total1 + num_chars_total2\n    local num_chars_total4 = num_chars_total3\
    \ - num_chars_diff\n    local num_chars_total5 = num_chars_total4 - num_chars_diff\n\
    \    local num_chars_total6 = num_chars_total5 - num_chars_diff\n    local num_chars_total7\
    \ = num_chars_total6 - num_chars_diff\n    local num_chars_total8 = num_chars_total7\
    \ - num_chars_diff\n    local num_chars_total9 = num_chars_total8 - num_chars_diff\n\
    \    local num_chars_total10 = num_chars_total9 - num_chars_diff\n    local num_chars_total11\
    \ = num_chars_total10 - num_chars_diff\n    local num_chars_total12 = num_chars_total11\
    \ - num_chars_diff\n    local num_chars_total13 = num_chars_total12 - num_chars_diff\n\
    \    local num_chars_total14 = num_chars_total13 - num_chars_diff\n    local num_chars_total15\
    \ = num_chars_total14 - num_chars_diff\n    local num_chars_total16 = num_chars_total15\
    \ - num_chars_diff\n    local num_chars_total17 = num_chars_total16 - num_chars_diff\n\
    \    local num_chars_total18 = num_chars_total17 - num_chars_diff\n    local num_chars_total19\
    \ = num_chars_total18 - num_chars_diff\n    local num_chars_total20 = num_chars_total19\
    \ - num_chars_diff\n    local num_chars_total21 = num_chars_total20 - num_chars_diff\n\
    \    local num_chars_total22 = num_chars_total21 - num_chars_diff\n    local num_chars_total23\
    \ = num_chars_total22 - num_chars_diff\n    local num_chars_total24 = num_chars_total23\
    \ - num_chars_diff\n    local num_chars_total25 = num_chars_total24 - num_chars_diff\n\
    \    local num_chars_total26 = num_chars_total", "  local num_chars = 0\n  for\
    \ _, v in pairs(lst1) do\n    num_chars = num_chars + #v\n  end\n  for _, v in\
    \ pairs(lst2) do\n    num_chars = num_chars + #v\n  end\n  if num_chars == 0 then\n\
    \    return lst1\n  else\n    return lst2\n  end\nend", "    local num_chars =\
    \ 0\n    for _, v in pairs(lst1) do\n        num_chars = num_chars + #v\n    end\n\
    \    for _, v in pairs(lst2) do\n        num_chars = num_chars + #v\n    end\n\
    \    if num_chars == 0 then\n        return lst1\n    else\n        return lst2\n\
    \    end\nend", "  local num_chars = {}\n  for _, v in pairs(lst1) do\n    table.insert(num_chars,\
    \ #v)\n  end\n  for _, v in pairs(lst2) do\n    table.insert(num_chars, #v)\n\
    \  end\n  local num_chars_lst = table.sort(num_chars)\n  local num_chars_set =\
    \ setmetatable({}, {__mode = \"v\"})\n  for _, v in pairs(num_chars_lst) do\n\
    \    table.insert(num_chars_set, v)\n  end\n  local num_chars_set_lst = table.sort(num_chars_set)\n\
    \  if #num_chars_set_lst == #num_chars_lst then\n    return lst1\n  else\n   \
    \ return lst2\n  end\nend", "    local num_chars = #lst1\n    for _, v in ipairs(lst2)\
    \ do\n        num_chars = math.max(num_chars, #v)\n    end\n    if num_chars ==\
    \ #lst1 then\n        return lst1\n    end\n    local num_chars = #lst2\n    for\
    \ _, v in ipairs(lst1) do\n        num_chars = math.max(num_chars, #v)\n    end\n\
    \    if num_chars == #lst2 then\n        return lst2\n    end\n    local num_chars\
    \ = #lst1\n    for _, v in ipairs(lst2) do\n        num_chars = math.max(num_chars,\
    \ #v)\n    end\n    return lst1\nend", "  local num_chars = 0\n  for _, v in pairs(lst1)\
    \ do\n    num_chars = num_chars + #v\n  end\n  for _, v in pairs(lst2) do\n  \
    \  num_chars = num_chars + #v\n  end\n  if num_chars == 0 then\n    return lst1\n\
    \  else\n    return lst2\n  end\nend", "  local len1 = #lst1\n  local len2 = #lst2\n\
    \  if len1 == len2 then\n    return lst1\n  elseif len1 > len2 then\n    return\
    \ lst2\n  else\n    local t = {}\n    for i = 1, len1 do\n      if lst1[i] > lst2[i]\
    \ then\n        t[#t + 1] = lst1[i]\n      else\n        t[#t + 1] = lst2[i]\n\
    \      end\n    end\n    return t\n  end\nend", "    local num_chars = 0\n   \
    \ for _, v in pairs(lst1) do\n        num_chars = num_chars + #v\n    end\n  \
    \  for _, v in pairs(lst2) do\n        num_chars = num_chars + #v\n    end\n \
    \   if num_chars == 0 then\n        return {}\n    end\n    local num_chars_lst1\
    \ = #lst1\n    local num_chars_lst2 = #lst2\n    local num_chars_total = num_chars\n\
    \    if num_chars_lst1 == num_chars_lst2 then\n        return lst1\n    end\n\
    \    local num_chars_lst1_less_than_lst2 = num_chars_lst1 - num_chars_lst2\n \
    \   local num_chars_lst2_less_than_lst1 = num_chars_lst2 - num_chars_lst1\n  \
    \  local num_chars_total_less_than_lst1 = num_chars - num_chars_lst1\n    local\
    \ num_chars_total_less_than_lst2 = num_chars - num_chars_lst2\n    local lst1_less_than_lst2\
    \ = {}\n    local lst2_less_than_lst1 = {}\n    local lst1_less_than_lst2_less_than_lst1\
    \ = {}\n    local lst2_less_than_lst1_less_than_lst2 = {}\n    local lst1_less_than_lst2_less_than_lst1_less_than_lst2\
    \ = {}\n    for _, v in pairs(lst1) do\n        if #v < num_chars_lst1 then\n\
    \            lst1_less_than_lst2[v] = true\n        end\n    end\n    for _, v\
    \ in pairs(lst2) do\n        if #v < num_chars_lst2 then\n            lst2_less_than_lst1[v]\
    \ = true\n        end\n    end\n    for _, v in pairs(lst1) do\n        if #v\
    \ < num_chars_lst1_less_than_lst2 then\n            lst1_less_than_lst2_less_than_lst1[v]\
    \ = true\n        end\n    end\n    for _, v in pairs(lst2) do\n        if #v\
    \ < num_chars_lst2_less_than_lst1 then\n            lst2_less_than_lst1_less_than_lst2[v]\
    \ = true\n        end\n    end\n    for _, v in pairs(lst1) do\n        if #v\
    \ < num_chars_total_less_than_lst1 then\n            lst1_less_than_lst2_less_than_lst1_less_than_lst2[v]\
    \ = true\n        end\n    end\n    for _, v in pairs(lst2) do\n        if #v\
    \ < num_chars_total_less_than_lst2 then\n            lst2_less_than_lst1_less_than_lst2_less_than_lst1[v]\
    \ = true\n        end\n    end\n    if ", "  local num_chars = 0\n  for _, v in\
    \ pairs(lst1) do\n    num_chars = num_chars + #v\n  end\n  for _, v in pairs(lst2)\
    \ do\n    num_chars = num_chars + #v\n  end\n  if num_chars == 0 then\n    return\
    \ lst1\n  else\n    return lst2\n  end\nend", "  local num_chars = 0\n  for _,\
    \ v in pairs(lst1) do\n    num_chars = num_chars + #v\n  end\n  for _, v in pairs(lst2)\
    \ do\n    num_chars = num_chars + #v\n  end\n  if num_chars == 0 then\n    return\
    \ lst1\n  else\n    return lst2\n  end\nend", "    local num_chars = 0\n    for\
    \ _, v in pairs(lst1) do\n        num_chars = num_chars + #v\n    end\n    for\
    \ _, v in pairs(lst2) do\n        num_chars = num_chars + #v\n    end\n    if\
    \ num_chars == 0 then\n        return {}\n    end\n    local num_chars_lst1 =\
    \ #lst1\n    local num_chars_lst2 = #lst2\n    local num_chars_total = num_chars\
    \ - num_chars_lst1 - num_chars_lst2\n    local lst3 = {}\n    for _, v in pairs(lst1)\
    \ do\n        local num_chars_v = #v\n        if num_chars_v < num_chars_total\
    \ then\n            lst3[#lst3 + 1] = v\n        end\n    end\n    return lst3\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
