name: HumanEval_88_sort_array
language: lua
prompt: "-- Given a table of non-negative integers, return a colua of the given table\
  \ after sorting,\n-- you will sort the given table in ascending order if the sum(\
  \ first index value, last index value) is odd,\n-- or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n-- Note:\n-- * don't\
  \ change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n-- >>> sort_array({5})\n\
  -- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0, 1, 2, 3, 4, 5}\n-- >>> sort_array({2,\
  \ 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2, 1, 0}\nlocal function sort_array(array)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
  \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
  \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
  \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
  \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
  \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local sum = 0\n  for i = 1, #array do\n    sum = sum + array[i]\n\
    \  end\n  if sum % 2 == 1 then\n    table.sort(array)\n  else\n    table.sort(array,\
    \ function(x, y)\n      return x > y\n    end)\n  end\n  return array\nend", " \
    \ local sum = 0\n  for _, v in ipairs(array) do\n    sum = sum + v\n  end\n  if\
    \ sum % 2 ~= 0 then\n    table.sort(array)\n  else\n    table.sort(array, function(a,\
    \ b) return b - a end)\n  end\n  return array\nend", "  local function compare(a,b)\n\
    \    if a < b then\n      return -1\n    elseif b < a then\n      return 1\n \
    \   else\n      return 0\n    end\n  end\n  table.sort(array, compare)\n  return\
    \ array\nend", "  local function compare(a,b)\n    if a < b then\n      return\
    \ -1\n    elseif b < a then\n      return 1\n    else\n      return 0\n    end\n\
    \  end\n  table.sort(array, compare)\n  return array\nend", "  local sum = 0\n\
    \  for i = 1, #array do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n\
    \    table.sort(array)\n  else\n    table.sort(array, function(a, b) return a\
    \ < b end)\n  end\n  return array\nend", "  local sum = 0\n  local results = {}\n\
    \  for i = 1, #array do\n    sum = sum + array[i]\n    table.insert(results, array[i])\n\
    \  end\n  if sum % 2 == 1 then\n    table.sort(results)\n  else\n    table.sort(results,\
    \ function(a, b)\n      return a > b\n    end)\n  end\n  return results\nend",
  "  local sum = 0\n  for _, value in ipairs(array) do\n    sum = sum + value\n  end\n\
    \  if sum % 2 ~= 0 then\n    table.sort(array)\n  else\n    table.sort(array,\
    \ function(x, y)\n      return x > y\n    end)\n  end\n  return array\nend", " \
    \ local sum = 0\n  for _, value in ipairs(array) do\n    sum = sum + value\n \
    \ end\n  if sum % 2 == 1 then\n    table.sort(array)\n  else\n    table.sort(array,\
    \ function(v1, v2)\n      return v2 < v1\n    end)\n  end\n  return array\nend",
  "  local sum = 0\n  for _, v in ipairs(array) do\n    sum = sum + v\n  end\n  if\
    \ sum % 2 ~= 0 then\n    table.sort(array)\n  else\n    table.sort(array, function(a,\
    \ b)\n      if a > b then\n        return 1\n      elseif a < b then\n       \
    \ return -1\n      else\n        return 0\n      end\n    end)\n  end\n  return\
    \ array\nend", "  local sum = 0\n  for _, value in ipairs(array) do\n    sum =\
    \ sum + value\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n  else\n\
    \    table.sort(array, function(first, last)\n      return last - first\n    end)\n\
    \  end\n  return array\nend", "  local sum = 0\n  for i = 1, #array do\n    sum\
    \ = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n  else\n\
    \    table.sort(array, function(first, last)\n      return last - first\n    end)\n\
    \  end\n  return array\nend", "  local sum = 0\n  local results = {}\n  for i\
    \ = 1, #array do\n    sum = sum + array[i]\n    table.insert(results, array[i])\n\
    \  end\n  if sum % 2 ~= 0 then\n    table.sort(results)\n  else\n    table.sort(results,\
    \ function(a, b)\n      return a > b\n    end)\n  end\n  return results\nend",
  "  local sum = 0\n  local result = {}\n  for _, v in ipairs(array) do\n    sum =\
    \ sum + v\n    if sum % 2 == 1 then\n      table.insert(result, v)\n    else\n\
    \      table.remove(result, #result - 1)\n      table.insert(result, v)\n    end\n\
    \  end\n  return result\nend", "  local sum = 0\n  for _, v in ipairs(array) do\n\
    \    sum = sum + v\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n  else\n\
    \    table.sort(array, function(v1, v2)\n      return v2 < v1\n    end)\n  end\n\
    \  return array\nend", "  local sum = 0\n  for i = 1, #array do\n    sum = sum\
    \ + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n  else\n \
    \   table.sort(array, function(v1, v2)\n      return v2 < v1\n    end)\n  end\n\
    \  return array\nend", "  local sum = 0\n  local result = {}\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n    table.insert(result, value)\n \
    \ end\n  if sum % 2 ~= 0 then\n    table.sort(result)\n  else\n    table.sort(result,\
    \ function(a, b) return a > b end)\n  end\n  return result\nend", "  local sum\
    \ = 0\n  for _, value in ipairs(array) do\n    sum = sum + value\n  end\n  if\
    \ sum % 2 == 1 then\n    table.sort(array)\n  else\n    table.sort(array, function(a,\
    \ b)\n      if a > b then\n        return 1\n      elseif a < b then\n       \
    \ return -1\n      else\n        return 0\n      end\n    end)\n  end\n  return\
    \ array\nend", "  local sum = 0\n  for _, v in ipairs(array) do\n    sum = sum\
    \ + v\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n  else\n    table.sort(array,\
    \ function(v1, v2)\n      return v1 > v2\n    end)\n  end\n  return array\nend",
  "  local sum = 0\n  local i = 0\n  local j = 1\n  local temp\n  local results =\
    \ {}\n  local first_index\n  local last_index\n  local first_index_value\n  local\
    \ last_index_value\n  local is_odd_or_even\n  local is_ascending_or_descending\n\
    \  local is_ascending\n  local is_descending\n  local is_ascending_or_descending\n\
    \  local is_ascending_or_descending\n  local is_ascending_or_descending\n  local\
    \ is_ascending_or_descending\n  local is_ascending_or_descending\n  local is_ascending_or_descending\n\
    \  local is_ascending_or_descending\n  local is_ascending_or_descending\n  local\
    \ is_ascending_or_descending\n  local is_ascending_or_descending\n  local is_ascending_or_descending\n\
    \  local is_ascending_or_descending\n  local is_ascending_or_descending\n  local\
    \ is_ascending_or_descending\n  local is_ascending_or_descending\n  local is_ascending_or_descending\n\
    \  local is_ascending_or_descending\n  local is_ascending_or_descending\n  local\
    \ is_ascending_or_descending\n  local is_ascending_or_descending\n  local is_ascending_or_descending\n\
    \  local is_ascending_or_descending\n  local is_ascending_or_descending\n  local\
    \ is_ascending_or_descending\n  local is_ascending_or_descending\n  local is_ascending_or_descending\n\
    \  local is_ascending_or_descending\n  local is_ascending_or_descending\n  local\
    \ is_ascending_or_descending\n  local is_ascending_or_descending\n  local is_ascending_or_descending\n\
    \  local is_ascending_or_descending\n  local is_ascending_or_descending\n  local\
    \ is_ascending_or_descending\n  local is_ascending_or_descending\n  local is_ascending_or_descending\n\
    \  local is_ascending_or_descending\n  local is_ascending_or_descending\n  local\
    \ is_ascending_or_descending\n  local is_ascending_or_descending\n  local is_ascending_or_descending\n\
    \  local is_ascending_or_descending\n  local is_ascending_or_descending\n  local\
    \ is_ascending_or_descending\n  local is_ascending_or_descending\n  local is_ascending_or_descending\n\
    \  local is_ascending_or_descending\n  local is_ascending_or_descending\n  local\
    \ is_ascending_or_", "  local sum = 0\n  for _, value in ipairs(array) do\n  \
    \  sum = sum + value\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n \
    \ else\n    table.sort(array, function(a, b)\n      return b - a\n    end)\n \
    \ end\n  return array\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
