name: HumanEval_0_has_close_elements
language: lua
prompt: "-- Check if in given table of numbers, are any two numbers closer to each\
  \ other than\n-- given threshold.\n-- >>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\n\
  -- false\n-- >>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\n-- true\n\
  local function has_close_elements(numbers, threshold)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
  \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n   \
  \ lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0,\
  \ 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
  \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0),\
  \ true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local close = {}\n  for _, v in pairs(numbers) do\n    table.insert(close,\
    \ v)\n    table.insert(close, v + threshold)\n  end\n  local has_close = false\n\
    \  for _, v in pairs(close) do\n    if v == numbers[#close] then\n      has_close\
    \ = true\n    end\n  end\n  return has_close\nend", "  local min_distance = math.min(numbers[1])\n\
    \  for _, number in pairs(numbers) do\n    local distance = math.abs(number -\
    \ min_distance)\n    if distance > threshold then\n      return false\n    end\n\
    \    min_distance = number\n  end\n  return true\nend", "  local close = {}\n\
    \  for _, v in pairs(numbers) do\n    table.insert(close, v)\n  end\n  table.sort(close)\n\
    \  for _, v in pairs(close) do\n    if v - numbers[#numbers - 1] < threshold then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local function is_close(a,\
    \ b)\n    return math.abs(a - b) < threshold\n  end\n  local function is_close_pair(a,\
    \ b)\n    return is_close(a[1], b[1]) and is_close(a[2], b[2])\n  end\n  local\
    \ function is_close_triple(a, b)\n    return is_close(a[1], b[1]) and is_close(a[2],\
    \ b[2]) and is_close(a[3], b[3])\n  end\n  local function is_close_quadruple(a,\
    \ b)\n    return is_close(a[1], b[1]) and is_close(a[2], b[2]) and is_close(a[3],\
    \ b[3]) and is_close(a[4], b[4])\n  end\n  local function is_close_quintuple(a,\
    \ b)\n    return is_close(a[1], b[1]) and is_close(a[2], b[2]) and is_close(a[3],\
    \ b[3]) and is_close(a[4], b[4]) and is_close(a[5], b[5])\n  end\n  local function\
    \ is_close_pairs(pairs)\n    local count = 0\n    for _, pair in pairs(pairs)\
    \ do\n      if is_close_pair(pair) then\n        count = count + 1\n      end\n\
    \    end\n    return count > 1\n  end\n  local function is_close_triples(triples)\n\
    \    local count = 0\n    for _, triple in pairs(triples) do\n      if is_close_triple(triple)\
    \ then\n        count = count + 1\n      end\n    end\n    return count > 1\n\
    \  end\n  local function is_close_quadruples(quadruples)\n    local count = 0\n\
    \    for _, quadruple in pairs(quadruples) do\n      if is_close_quadruple(quadruple)\
    \ then\n        count = count + 1\n      end\n    end\n    return count > 1\n\
    \  end\n  local function is_close_quintuples(quintuples)\n    local count = 0\n\
    \    for _, quintuple in pairs(quintuples) do\n      if is_close_quintuple(quintuple)\
    \ then\n        count = count + 1\n      end\n    end\n    return count > 1\n\
    \  end\n  local function is_close_pairs_and_triples(pairs, triples)\n    local\
    \ count = 0\n    for _, pair in pairs(pairs) do\n      if is_close_pair(pair)\
    \ then\n        count = count + 1\n      end\n    end\n    for _, triple in pairs(triples)\
    \ do\n      if is_close_triple(triple) then\n        count = count + 1\n     \
    \ end\n    end\n    return count > 1\n  end\n  local function is_close_pairs_and_quadruples(pairs,\
    \ quadruples)\n    local count = 0\n    for _, pair in pairs(pairs) do\n     \
    \ if is_close_pair(pair) then\n        count = count + 1", "  local close = {}\n\
    \  for _, v in pairs(numbers) do\n    table.insert(close, v)\n  end\n  table.sort(close)\n\
    \  for _, v in pairs(close) do\n    if v - close[#close] == threshold then\n \
    \     return true\n    end\n  end\n  return false\nend", "  local close = {}\n\
    \  for _, value in pairs(numbers) do\n    for _, value2 in pairs(numbers) do\n\
    \      if value == value2 then\n        close[value] = true\n      end\n    end\n\
    \  end\n  local closed = {}\n  for _, value in pairs(numbers) do\n    if close[value]\
    \ then\n      table.insert(closed, value)\n    end\n  end\n  return #closed ~=\
    \ 0 and #closed ~= #numbers and #closed <= threshold\nend", "  local close = {}\n\
    \  for _, number in ipairs(numbers) do\n    local closed = false\n    for _, other_number\
    \ in ipairs(numbers) do\n      if abs(number - other_number) < threshold then\n\
    \        closed = true\n        break\n      end\n    end\n    if not closed then\n\
    \      table.insert(close, number)\n    end\n  end\n  return #close == #numbers\n\
    end", "  local num_pairs = #numbers - 1\n  local min_diff = threshold\n  local\
    \ min_diff_index\n  for i = 1, num_pairs do\n    local diff = abs(numbers[i +\
    \ 1] - numbers[i])\n    if diff < min_diff then\n      min_diff = diff\n     \
    \ min_diff_index = i\n    end\n  end\n  return min_diff_index == num_pairs\nend",
  "  local function is_close(x, y)\n    return math.abs(x - y) < threshold\n  end\n\
    \  local function is_close_pair(x, y)\n    return is_close(x[1], y[1]) and is_close(x[2],\
    \ y[2])\n  end\n  local function is_close_triple(x, y)\n    return is_close(x[1],\
    \ y[1]) and is_close(x[2], y[2]) and is_close(x[3], y[3])\n  end\n  local function\
    \ is_close_quad(x, y, z)\n    return is_close(x[1], y[1]) and is_close(x[2], y[2])\
    \ and is_close(x[3], y[3]) and is_close(x[4], y[4])\n  end\n  local function is_close_triplet(x,\
    \ y, z)\n    return is_close(x[1], y[1]) and is_close(x[2], y[2]) and is_close(x[3],\
    \ y[3]) and is_close(x[4], y[4]) and is_close(x[5], y[5])\n  end\n  local function\
    \ is_close_quadruple(x, y, z)\n    return is_close(x[1], y[1]) and is_close(x[2],\
    \ y[2]) and is_close(x[3], y[3]) and is_close(x[4], y[4]) and is_close(x[5], y[5])\
    \ and is_close(x[6], y[6])\n  end\n  local function is_close_quintuple(x, y, z)\n\
    \    return is_close(x[1], y[1]) and is_close(x[2], y[2]) and is_close(x[3], y[3])\
    \ and is_close(x[4], y[4]) and is_close(x[5], y[5]) and is_close(x[6], y[6]) and\
    \ is_close(x[7], y[7])\n  end\n  local function is_close_hexa(x, y, z)\n    return\
    \ is_close(x[1], y[1]) and is_close(x[2], y[2]) and is_close(x[3], y[3]) and is_close(x[4],\
    \ y[4]) and is_close(x[5], y[5]) and is_close(x[6], y[6]) and is_close(x[7], y[7])\
    \ and is_close(x[8], y[8])\n  end\n  local function is_close_hexa(x, y, z)\n \
    \   return is_close(x[1], y[1]) and is_close(x[2], y[2]) and is_close(x[3], y[3])\
    \ and is_close(x[4], y[4]) and is_close(x[5], y[5]) and is_close(x[6], y[6]) and\
    \ is_close(x[7], y[7]) and is_close(x[8], y[8])\n  end\n  local function is_close_hexa(x,\
    \ y, z)\n    return is_close(x[1], y[1]) and is_close(x[2], y[2]) and is_close(x[3],\
    \ y[3]) and is_close(x[4], y[4]) and is_close(x[5], y[5]) and is_close(x[6], y[6])\
    \ and is_close(x[7], y[7]) and is_close", "  local close = nil\n  for _, value\
    \ in pairs(numbers) do\n    local close = close or false\n    if math.abs(value\
    \ - threshold) < threshold then\n      close = true\n    end\n  end\n  return\
    \ close\nend", "  local close = {}\n  for _, number in ipairs(numbers) do\n  \
    \  local closed = false\n    for _, other_number in ipairs(numbers) do\n     \
    \ if number - other_number < threshold then\n        closed = true\n        break\n\
    \      end\n    end\n    if not closed then\n      table.insert(close, number)\n\
    \    end\n  end\n  return #close == 1\nend", "  local close = math.abs(numbers[1]\
    \ - numbers[2])\n  for i = 2, #numbers do\n    local close = math.abs(numbers[i]\
    \ - numbers[i - 1])\n    if close < threshold then\n      return true\n    end\n\
    \  end\n  return false\nend", "  local close = nil\n  for _, number in pairs(numbers)\
    \ do\n    local close = number\n    for _, other_number in pairs(numbers) do\n\
    \      if other_number ~= number and abs(other_number - number) < threshold then\n\
    \        close = other_number\n      end\n    end\n    if close then\n      return\
    \ true\n    end\n  end\n  return false\nend", "  local close = {}\n  for _, value\
    \ in pairs(numbers) do\n    local close = false\n    for _, other_value in pairs(numbers)\
    \ do\n      if abs(value - other_value) < threshold then\n        close = true\n\
    \        break\n      end\n    end\n    if close then\n      table.insert(close,\
    \ value)\n    end\n  end\n  return #close == 1\nend", "  local close = {}\n  for\
    \ _, number in ipairs(numbers) do\n    for _, other_number in ipairs(numbers)\
    \ do\n      if number ~= other_number then\n        local dist = math.abs(number\
    \ - other_number)\n        if dist < threshold then\n          table.insert(close,\
    \ other_number)\n        end\n      end\n    end\n  end\n  return #close ~= 0\n\
    end", "  local function is_close(a, b)\n    return math.abs(a - b) < threshold\n\
    \  end\n  local function is_close2(a, b)\n    return math.abs(a - b) < threshold\
    \ * threshold\n  end\n  local function is_close3(a, b, c)\n    return math.abs(a\
    \ - b) < threshold * threshold and math.abs(c - b) < threshold * threshold\n \
    \ end\n  local function is_close4(a, b, c, d)\n    return math.abs(a - b) < threshold\
    \ * threshold and math.abs(c - b) < threshold * threshold and math.abs(d - b)\
    \ < threshold * threshold\n  end\n  local function is_close5(a, b, c, d, e)\n\
    \    return math.abs(a - b) < threshold * threshold and math.abs(c - b) < threshold\
    \ * threshold and math.abs(d - b) < threshold * threshold and math.abs(e - b)\
    \ < threshold * threshold\n  end\n  local function is_close6(a, b, c, d, e, f)\n\
    \    return math.abs(a - b) < threshold * threshold and math.abs(c - b) < threshold\
    \ * threshold and math.abs(d - b) < threshold * threshold and math.abs(e - b)\
    \ < threshold * threshold and math.abs(f - b) < threshold * threshold\n  end\n\
    \  local function is_close7(a, b, c, d, e, f, g)\n    return math.abs(a - b) <\
    \ threshold * threshold and math.abs(c - b) < threshold * threshold and math.abs(d\
    \ - b) < threshold * threshold and math.abs(e - b) < threshold * threshold and\
    \ math.abs(f - b) < threshold * threshold and math.abs(g - b) < threshold * threshold\n\
    \  end\n  local function is_close8(a, b, c, d, e, f, g, h)\n    return math.abs(a\
    \ - b) < threshold * threshold and math.abs(c - b) < threshold * threshold and\
    \ math.abs(d - b) < threshold * threshold and math.abs(e - b) < threshold * threshold\
    \ and math.abs(f - b) < threshold * threshold and math.abs(g - b) < threshold\
    \ * threshold and math.abs(h - b) < threshold * threshold\n  end\n  local function\
    \ is_close9(a, b, c, d, e, f, g, h, i)\n    return math.abs(a - b) < threshold\
    \ * threshold and math.abs(c - b) < threshold * threshold and math.abs(d - b)\
    \ < threshold * threshold and math.abs(e - b) < threshold * threshold and math.abs(f\
    \ - b) < threshold * threshold and math.abs(g - b) < threshold * threshold and\
    \ math.abs(h - b) < threshold * threshold and math.abs(i - b) < threshold * threshold\n\
    \  end\n  local function is_close10(a, b, c, d, e, f, g, h, i, j)\n    return\
    \ math.abs(a - b) < threshold * threshold and math.abs(c - b) < threshold * threshold\
    \ and math.abs(d - b) < threshold * threshold ", "  local close = {}\n  for _,\
    \ num in pairs(numbers) do\n    local close = false\n    for _, num2 in pairs(numbers)\
    \ do\n      if num2 ~= num and abs(num - num2) <= threshold then\n        close\
    \ = true\n        break\n      end\n    end\n    if close then\n      table.insert(close,\
    \ num)\n    end\n  end\n  return #close == #numbers\nend", "  local close = {}\n\
    \  for _, number in pairs(numbers) do\n    local closed = false\n    for _, other_number\
    \ in pairs(numbers) do\n      if abs(number - other_number) < threshold then\n\
    \        closed = true\n        break\n      end\n    end\n    if not closed then\n\
    \      table.insert(close, number)\n    end\n  end\n  return #close == #numbers\n\
    end", "  local num_pairs = #numbers - 1\n  local min_diff = threshold\n  local\
    \ min_pairs = -1\n  local min_pair_index = 1\n  local min_pair_value = numbers[1]\n\
    \  for i = 2, num_pairs do\n    local diff = numbers[i] - min_pair_value\n   \
    \ if diff < 0 then\n      diff = -diff\n    end\n    if diff < min_diff then\n\
    \      min_diff = diff\n      min_pairs = i\n      min_pair_index = i - 1\n  \
    \    min_pair_value = numbers[i]\n    end\n  end\n  return min_pair_index == min_pairs\n\
    end", "  local close = {}\n  for _, number in pairs(numbers) do\n    local closed\
    \ = false\n    for _, otherNumber in pairs(numbers) do\n      if otherNumber >\
    \ number then\n        closed = true\n        break\n      end\n    end\n    if\
    \ closed then\n      table.insert(close, number)\n    end\n  end\n  return #close\
    \ > 0 and #close == #numbers and #close == #close and #close ~= #numbers and #close\
    \ ~= #close and #close ~= #close and #close ~= #close and #close ~= #close and\
    \ #close ~= #close and #close ~= #close and #close ~= #close and #close ~= #close\
    \ and #close ~= #close and #close ~= #close and #close ~= #close and #close ~=\
    \ #close and #close ~= #close and #close ~= #close and #close ~= #close and #close\
    \ ~= #close and #close ~= #close and #close ~= #close and #close ~= #close and\
    \ #close ~= #close and #close ~= #close and #close ~= #close and #close ~= #close\
    \ and #close ~= #close and #close ~= #close and #close ~= #close and #close ~=\
    \ #close and #close ~= #close and #close ~= #close and #close ~= #close and #close\
    \ ~= #close and #close ~= #close and #close ~= #close and #close ~= #close and\
    \ #close ~= #close and #close ~= #close and #close ~= #close and #close ~= #close\
    \ and #close ~= #close and #close ~= #close and #close ~= #close and #close ~=\
    \ #close and #close ~= #close and #close ~= #close and #close ~= #close and #close\
    \ ~= #close and #close ~= #close and #close ~= #close and #close ~= #close and\
    \ #close ~= #close and #close ~= #close and #close ~= #close and #close ~= #close\
    \ and #close ~= #close and #close ~= #close and #close ~= #close and #close ~=\
    \ #close and #close ~= #close and #close ~= #close and #close ~= #close and #close "]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
