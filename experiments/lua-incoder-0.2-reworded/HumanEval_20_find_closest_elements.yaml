name: HumanEval_20_find_closest_elements
language: lua
prompt: "-- From a supplied table of numbers (of length at least two) select and return\
  \ two that are the closest to each\n-- other and return them in order (smaller number,\
  \ larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n\
  -- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n--\
  \ {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
  \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n  \
  \  lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
  \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
  \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local smallest_distance = nil\n  local smallest_number = nil\n  local\
    \ second_smallest_number = nil\n  local second_smallest_distance = nil\n  for\
    \ _, number in ipairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if smallest_distance == nil then\n      smallest_distance = distance\n  \
    \    smallest_number = number\n      second_smallest_number = number\n      second_smallest_distance\
    \ = distance\n    elseif smallest_distance > distance then\n      smallest_distance\
    \ = distance\n      second_smallest_number = number\n      second_smallest_distance\
    \ = distance\n    end\n  end\n  return { smallest_number, second_smallest_number\
    \ }\nend", "  local smallest_distance = nil\n  local smallest_number = nil\n \
    \ local second_smallest_number = nil\n  for _, number in ipairs(numbers) do\n\
    \    local distance = math.abs(number - smallest_number)\n    if smallest_distance\
    \ == nil then\n      smallest_number = number\n      smallest_distance = distance\n\
    \    elseif smallest_distance > distance then\n      smallest_number = number\n\
    \      smallest_distance = distance\n    else\n      second_smallest_number =\
    \ number\n    end\n  end\n  return smallest_number, second_smallest_number\nend",
  "  local smallest_distance = math.inf\n  local smallest_index\n  local largest\n\
    \  local largest_index", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return largest, smallest\nend", "  local smallest_number\
    \ = numbers[1]\n  local second_smallest_number = numbers[1]\n  for _, number in\
    \ pairs(numbers) do\n    if number < smallest_number then\n      smallest_number\
    \ = number\n    end\n    if number > second_smallest_number then\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest_number = numbers[1]\n  local second_smallest_number =\
    \ numbers[1]\n  for i = 2, #numbers do\n    local current_number = numbers[i]\n\
    \    if current_number < smallest_number then\n      smallest_number = current_number\n\
    \    elseif current_number > second_smallest_number then\n      second_smallest_number\
    \ = current_number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      smallest = current\n    elseif current > largest then\n      largest =\
    \ current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = math.inf\n  local smallest_number = nil\n  local largest_distance = math.inf\n\
    \  local largest_number = nil", "  local smallest_number = numbers[1]\n  local\
    \ second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local current_number\
    \ = numbers[i]\n    if current_number < smallest_number then\n      smallest_number\
    \ = current_number\n    elseif current_number > second_smallest_number then\n\
    \      second_smallest_number = current_number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_number\
    \ = numbers[1]\n  local second_smallest_number = numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current_number = numbers[i]\n    if current_number < smallest_number\
    \ then\n      smallest_number = current_number\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest, largest =\
    \ numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local current =\
    \ numbers[i]\n    if current < smallest then\n      smallest = current\n    elseif\
    \ current > largest then\n      largest = current\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest_distance = nil\n  local smallest_number = nil\n\
    \  local second_smallest_number = nil\n  for _, number in ipairs(numbers) do\n\
    \    local distance = math.abs(number - smallest_number)\n    if smallest_distance\
    \ == nil or distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    if smallest_number ~= nil then\n\
    \      local second_distance = math.abs(number - second_smallest_number)\n   \
    \   if second_distance < smallest_distance then\n        smallest_distance = second_distance\n\
    \        second_smallest_number = number\n      end\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest, largest =\
    \ numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local current =\
    \ numbers[i]\n    if current < smallest then\n      smallest = current\n    end\n\
    \    if current > largest then\n      largest = current\n    end\n  end\n  return\
    \ smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = nil\n  local smallest_number = nil\n  local second_smallest_distance = nil\n\
    \  local second_smallest_number = nil\n  for _, number in ipairs(numbers) do\n\
    \    local distance = math.abs(number - smallest_number)\n    if smallest_distance\
    \ == nil then\n      smallest_distance = distance\n      smallest_number = number\n\
    \    elseif smallest_distance > distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    distance = math.abs(number - second_smallest_number)\n\
    \    if second_smallest_distance == nil then\n      second_smallest_distance =\
    \ distance\n      second_smallest_number = number\n    elseif second_smallest_distance\
    \ > distance then\n      second_smallest_distance = distance\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local diff = numbers[i] - smallest\n    if diff < smallest\
    \ then\n      smallest = diff\n    elseif diff > largest then\n      largest =\
    \ diff\n    end\n  end\n  return smallest, largest\nend", "  local smallest_number\
    \ = numbers[1]\n  local second_smallest_number = numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current_number = numbers[i]\n    if current_number < smallest_number\
    \ then\n      smallest_number = current_number\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current_number = numbers[i]\n    if current_number < smallest_number then\n\
    \      smallest_number = current_number\n    end\n    if current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  for _, number in pairs(numbers)\
    \ do\n    if number < smallest_number then\n      smallest_number = number\n \
    \   end\n    if number > second_smallest_number then\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local diff = numbers[i] - smallest\n    if diff < smallest\
    \ then\n      smallest = diff\n    end\n    diff = largest - numbers[i]\n    if\
    \ diff > largest then\n      largest = diff\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest = numbers[1]\n  local largest = numbers[1]\n\
    \  for i = 2, #numbers do\n    if numbers[i] < smallest then\n      smallest =\
    \ numbers[i]\n    end\n    if numbers[i] > largest then\n      largest = numbers[i]\n\
    \    end\n  end\n  return largest, smallest\nend", "  local smallest, largest\
    \ = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n\
    \    if current < smallest then\n      smallest = current\n    elseif current\
    \ > largest then\n      largest = current\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest_distance = nil\n  local smallest_number = nil\n\
    \  local second_smallest_distance = nil\n  local second_smallest_number = nil\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if smallest_distance == nil then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    elseif smallest_distance > distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    local second_distance = math.abs(number - second_smallest_number)\n\
    \    if second_smallest_distance == nil then\n      second_smallest_distance =\
    \ second_distance\n      second_smallest_number = number\n    elseif second_smallest_distance\
    \ > second_distance then\n      second_smallest_distance = second_distance\n \
    \     second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest, largest = numbers[1], numbers[1]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return largest, smallest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ diff = numbers[i] - largest\n    if diff < smallest then\n      smallest, largest\
    \ = diff, numbers[i]\n    end\n  end\n  return largest, smallest\nend", "  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend", "  local closest_pairs = {}\n  local\
    \ closest_distance = nil\n  local closest_number = nil\n  local closest_index\
    \ = nil\n  for i = 1, #numbers do\n    local distance = math.abs(numbers[i] -\
    \ numbers[closest_index])\n    if closest_distance == nil then\n      closest_distance\
    \ = distance\n      closest_number = numbers[i]\n      closest_index = i\n   \
    \ elseif closest_distance > distance then\n      closest_distance = distance\n\
    \      closest_number = numbers[i]\n      closest_index = i\n    end\n  end\n\
    \  table.insert(closest_pairs, closest_number, closest_number)\n  return closest_pairs\n\
    end", "  local smallest_distance = nil\n  local smallest_number = nil\n  local\
    \ second_smallest_number = nil\n  local second_smallest_distance = nil\n  for\
    \ _, number in ipairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if smallest_distance == nil or distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    local second_distance\
    \ = math.abs(number - second_smallest_number)\n    if second_smallest_distance\
    \ == nil or second_distance < second_smallest_distance then\n      second_smallest_distance\
    \ = second_distance\n      second_smallest_number = number\n    end\n  end\n \
    \ return smallest_number, second_smallest_number\nend", "  local smallest, largest\
    \ = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local diff =\
    \ numbers[i] - smallest\n    if diff < 0 then\n      largest = numbers[i]\n  \
    \  else\n      smallest = numbers[i]\n    end\n  end\n  return smallest, largest\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      smallest = current\n    elseif current > largest then\n      largest =\
    \ current\n    end\n  end\n  return largest, smallest\nend", "  local smallest\
    \ = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n    if\
    \ numbers[i] < smallest then\n      smallest = numbers[i]\n    elseif numbers[i]\
    \ > largest then\n      largest = numbers[i]\n    end\n  end\n  return largest,\
    \ smallest\nend", "  local smallest_number = numbers[1]\n  local second_smallest_number\
    \ = numbers[1]\n  for _, number in pairs(numbers) do\n    if number < smallest_number\
    \ then\n      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest = numbers[1]\n  local largest\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] < smallest then\n\
    \      smallest = numbers[i]\n    end\n    if numbers[i] > largest then\n    \
    \  largest = numbers[i]\n    end\n  end\n  return smallest, largest\nend", " \
    \ local smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for _, number in pairs(numbers) do\n    if number < smallest_number then\n\
    \      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest, largest = numbers[1], numbers[1]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_number\
    \ = numbers[1]\n  local second_smallest_number = numbers[1]\n  local smallest_index\
    \ = 2\n  local second_smallest_index = 2\n  for i = 2, #numbers do\n    if numbers[i]\
    \ < smallest_number then\n      smallest_number = numbers[i]\n      smallest_index\
    \ = i\n    elseif numbers[i] > second_smallest_number then\n      second_smallest_number\
    \ = numbers[i]\n      second_smallest_index = i\n    end\n  end\n  return numbers[smallest_index],\
    \ numbers[second_smallest_index]\nend", "  local smallest, largest = numbers[1],\
    \ numbers[#numbers]\n  for i = 2, #numbers do\n    local new_smallest, new_largest\
    \ = numbers[i], numbers[i - 1]\n    if new_smallest < smallest then\n      smallest\
    \ = new_smallest\n    end\n    if new_largest > largest then\n      largest =\
    \ new_largest\n    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = math.inf\n  local smallest_number\n  local second_smallest_number\n  for _,\
    \ number in ipairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    if smallest_distance > math.inf\
    \ then\n      second_smallest_number = smallest_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest_distance =\
    \ nil\n  local smallest_number = nil\n  local largest_distance = nil\n  local\
    \ largest_number = nil", "  local smallest_number = numbers[1]\n  local second_smallest_number\
    \ = numbers[1]\n  for i = 2, #numbers do\n    local current_number = numbers[i]\n\
    \    if current_number < smallest_number then\n      smallest_number = current_number\n\
    \    end\n    if current_number > second_smallest_number then\n      second_smallest_number\
    \ = current_number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      smallest = current\n    elseif current > largest then\n      largest =\
    \ current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_number\
    \ = numbers[1]\n  local largest_number = numbers[#numbers]\n  local smallest_index\
    \ = #numbers\n  local largest_index = #numbers\n  while smallest_index ~= 1 do\n\
    \    smallest_number = numbers[smallest_index]\n    largest_number = numbers[largest_index]\n\
    \    smallest_index = #numbers - smallest_index - 1\n    largest_index = #numbers\
    \ - largest_index - 1\n  end\n  return numbers[smallest_index], numbers[largest_index]\n\
    end", "  local smallest_number = numbers[1]\n  local second_smallest_number =\
    \ numbers[1]\n  for _, number in pairs(numbers) do\n    if number < smallest_number\
    \ then\n      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return {smallest_number,\
    \ second_smallest_number}\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_number\
    \ = numbers[1]\n  local second_smallest_number = numbers[1]\n  for _, number in\
    \ ipairs(numbers) do\n    if number < smallest_number then\n      smallest_number\
    \ = number\n    end\n    if number > second_smallest_number then\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest_number = numbers[1]\n  local second_smallest_number =\
    \ numbers[1]\n  for i = 2, #numbers do\n    local current_number = numbers[i]\n\
    \    if current_number < smallest_number then\n      smallest_number = current_number\n\
    \    elseif current_number > second_smallest_number then\n      second_smallest_number\
    \ = current_number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      smallest = current\n    elseif current > largest then\n      largest =\
    \ current\n    end\n  end\n  return largest, smallest\nend", "  local smallest_number\
    \ = numbers[1]\n  local second_smallest_number = numbers[1]\n  for _, number in\
    \ pairs(numbers) do\n    if number < smallest_number then\n      smallest_number\
    \ = number\n    end\n    if number > second_smallest_number then\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local new_smallest, new_largest = numbers[i], numbers[i - 1]\n\
    \    if new_smallest < smallest then\n      smallest = new_smallest\n    end\n\
    \    if new_largest > largest then\n      largest = new_largest\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return largest, smallest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ new_smallest, new_largest = numbers[i], numbers[i]\n    if smallest > new_smallest\
    \ then\n      smallest, new_smallest = new_smallest, smallest\n    end\n    if\
    \ largest < new_largest then\n      largest, new_largest = new_largest, largest\n\
    \    end\n  end\n  return smallest, largest\nend", "  local smallest_number =\
    \ numbers[1]\n  local second_smallest_number = numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current_number = numbers[i]\n    if current_number < smallest_number\
    \ then\n      smallest_number = current_number\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest_distance =\
    \ math.inf\n  local smallest_number\n  local second_smallest_number\n  for _,\
    \ number in ipairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    if smallest_distance == math.inf\
    \ then\n      break\n    end\n    if number < smallest_number then\n      second_smallest_number\
    \ = smallest_number\n      smallest_number = number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest = numbers[1]\n\
    \  local largest = numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n\
    \    if current < smallest then\n      smallest = current\n    elseif current\
    \ > largest then\n      largest = current\n    end\n  end\n  return largest, smallest\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      smallest = current\n    elseif current > largest then\n      largest =\
    \ current\n    end\n  end\n  return largest, smallest\nend", "  local min_distance\
    \ = math.inf\n  local min_elements = {}\n  for _, element in ipairs(numbers) do\n\
    \    local distance = math.abs(element - numbers[1])\n    if distance < min_distance\
    \ then\n      min_distance = distance\n      min_elements = {element}\n    elseif\
    \ distance == min_distance then\n      table.insert(min_elements, element)\n \
    \   end\n  end\n  return min_elements\nend", "  local smallest_distance = math.inf\n\
    \  local smallest_number = nil\n  local second_smallest_number = nil\n  for _,\
    \ number in ipairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    if smallest_distance == math.inf\
    \ then\n      break\n    end\n    local second_distance = math.abs(number - second_smallest_number)\n\
    \    if second_distance < smallest_distance then\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local diff = numbers[i] - smallest\n    if diff < smallest\
    \ then\n      smallest = diff\n    end\n    diff = numbers[i] - largest\n    if\
    \ diff > largest then\n      largest = diff\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest_number = numbers[1]\n  local second_smallest_number\
    \ = numbers[1]\n  for i = 2, #numbers do\n    local current_number = numbers[i]\n\
    \    if current_number < smallest_number then\n      smallest_number = current_number\n\
    \    end\n    if current_number > second_smallest_number then\n      second_smallest_number\
    \ = current_number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest, largest = numbers[1],\
    \ numbers[#numbers]\n  for i = 2, #numbers do\n    local current = numbers[i]\n\
    \    if current < smallest then\n      smallest = current\n    elseif current\
    \ > largest then\n      largest = current\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest_number = numbers[1]\n  local second_smallest_number\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] < smallest_number\
    \ then\n      smallest_number = numbers[i]\n    end\n    if numbers[i] < second_smallest_number\
    \ then\n      second_smallest_number = numbers[i]\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    end\n    if current > largest then\n   \
    \   largest = current\n    end\n  end\n  return smallest, largest\nend", "  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend", "  local closest_pairs = {}\n  local\
    \ closest_pair_index = 0\n  local closest_distance = nil\n  for i = 1, #numbers\
    \ do\n    local distance = math.abs(numbers[i] - numbers[closest_pair_index])\n\
    \    if closest_distance == nil then\n      closest_pair_index = i\n      closest_distance\
    \ = distance\n    else\n      if distance < closest_distance then\n        closest_pair_index\
    \ = i\n        closest_distance = distance\n      end\n    end\n  end\n  table.insert(closest_pairs,\
    \ numbers[closest_pair_index])\n  table.insert(closest_pairs, numbers[#numbers])\n\
    \  return closest_pairs\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ distance = math.abs(numbers[i] - largest)\n    if distance < smallest then\n\
    \      smallest, largest = distance, numbers[i]\n    end\n  end\n  return largest,\
    \ smallest\nend", "  local min_distance = nil\n  local min_number = nil\n  local\
    \ max_number = nil\n  for _, number in ipairs(numbers) do\n    local distance\
    \ = math.abs(number - min_number)\n    if min_distance == nil or distance < min_distance\
    \ then\n      min_distance = distance\n      min_number = number\n    end\n  \
    \  local distance = math.abs(number - max_number)\n    if distance < min_distance\
    \ then\n      min_distance = distance\n      max_number = number\n    end\n  end\n\
    \  return min_number, max_number\nend", "  local smallest, largest = numbers[1],\
    \ numbers[#numbers]\n  for i = 2, #numbers do\n    local distance = math.abs(numbers[i]\
    \ - largest)\n    if distance < smallest then\n      smallest, largest = distance,\
    \ numbers[i]\n    end\n  end\n  return largest, smallest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest = numbers[1]\n  local largest\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] < smallest then\n\
    \      smallest = numbers[i]\n    end\n    if numbers[i] > largest then\n    \
    \  largest = numbers[i]\n    end\n  end\n  return largest, smallest\nend", " \
    \ local smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for i = 2, #numbers do\n    if numbers[i] < smallest_number then\n      smallest_number\
    \ = numbers[i]\n    end\n    if numbers[i] < second_smallest_number then\n   \
    \   second_smallest_number = numbers[i]\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest_number = numbers[1]\n  local\
    \ second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local current_number\
    \ = numbers[i]\n    if current_number < smallest_number then\n      smallest_number\
    \ = current_number\n    elseif current_number > second_smallest_number then\n\
    \      second_smallest_number = current_number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest_distance = nil\n  local smallest_number\
    \ = nil\n  local second_smallest_number = nil\n  local second_smallest_distance\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if smallest_distance == nil then\n      smallest_number\
    \ = number\n      smallest_distance = distance\n    elseif smallest_distance >\
    \ distance then\n      smallest_number = number\n      smallest_distance = distance\n\
    \    elseif smallest_distance == distance then\n      second_smallest_number =\
    \ number\n      second_smallest_distance = distance\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local function distance(number)\n\
    \    return math.abs(number - numbers[1])\n  end\n  local function find_closest(first,\
    \ second)\n    if first > second then\n      return second\n    elseif first <\
    \ second then\n      return first\n    else\n      return second\n    end\n  end\n\
    \  local function find_closests(first, second)\n    local closest = find_closest(first,\
    \ second)\n    local closests = {}\n    for _, number in pairs(numbers) do\n \
    \     if number == closest then\n        table.insert(closests, closest)\n   \
    \   else\n        local closest = find_closest(number, closest)\n        table.insert(closests,\
    \ closest)\n      end\n    end\n    return closests\n  end\n  local function find_closests_sorted(first,\
    \ second)\n    local closest = find_closest(first, second)\n    local closests\
    \ = {}\n    for _, number in pairs(numbers) do\n      if number == closest then\n\
    \        table.insert(closests, closest)\n      else\n        local closest =\
    \ find_closest(number, closest)\n        if closest > second then\n          table.insert(closests,\
    \ closest)\n        elseif closest < second then\n          table.insert(closests,\
    \ second)\n        else\n          table.insert(closests, first)\n        end\n\
    \      end\n    end\n    return closests\n  end\n  local function find_closests_sorted(first,\
    \ second)\n    local closest = find_closest(first, second)\n    local closests\
    \ = {}\n    for _, number in pairs(numbers) do\n      if number == closest then\n\
    \        table.insert(closests, closest)\n      else\n        local closest =\
    \ find_closest(number, closest)\n        if closest > second then\n          table.insert(closests,\
    \ closest)\n        elseif closest < second then\n          table.insert(closests,\
    \ second)\n        else\n          table.insert(closests, first)\n        end\n\
    \      end\n    end\n    return closests\n  end\n  local function find_closests_sorted(first,\
    \ second)\n    local closest = find_closest(first, second)\n    local closests\
    \ = {}\n    for _, number in pairs(numbers) do\n      if number == closest then\n\
    \        table.insert(closests, closest)\n      else\n        local closest =\
    \ find_closest(number, closest)\n        if closest > second then\n          table.insert(closests,\
    \ closest)\n        elseif closest < second then\n          table.insert(closests,\
    \ second)\n        else\n          table.insert(closests, first)\n        end\n\
    \      end\n    end\n    return closests\n  end\n  local function find_closests_sorted(first,\
    \ second)\n    local closest = find_closest(first, second)\n    local ", "  local\
    \ smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  local smallest_index = nil\n  local second_smallest_index = nil\n  for i =\
    \ 2, #numbers do\n    local current_number = numbers[i]\n    if current_number\
    \ < smallest_number then\n      smallest_number = current_number\n      smallest_index\
    \ = i\n    end\n    if current_number > second_smallest_number then\n      second_smallest_number\
    \ = current_number\n      second_smallest_index = i\n    end\n  end\n  if smallest_index\
    \ == nil then\n    return nil\n  end\n  return numbers[smallest_index], numbers[second_smallest_index]\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local distance = math.abs(numbers[i] - largest)\n    if distance\
    \ < smallest then\n      smallest, largest = distance, numbers[i]\n    end\n \
    \ end\n  return largest, smallest\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  for _, number in pairs(numbers)\
    \ do\n    if number < smallest_number then\n      smallest_number = number\n \
    \   end\n    if number > second_smallest_number then\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      smallest = current\n    elseif current > largest then\n      largest =\
    \ current\n    end\n  end\n  return smallest, largest\nend", "  local smallest\
    \ = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      largest = current\n\
    \    elseif current > largest then\n      smallest = current\n    end\n  end\n\
    \  return largest, smallest\nend", "  local smallest_number = numbers[1]\n  local\
    \ second_smallest_number = numbers[1]\n  for _, number in pairs(numbers) do\n\
    \    if number < smallest_number then\n      smallest_number = number\n    elseif\
    \ number > second_smallest_number then\n      second_smallest_number = number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest_distance = nil\n  local smallest_number = nil\n  local second_smallest_distance\
    \ = nil\n  local second_smallest_number = nil\n  for _, number in ipairs(numbers)\
    \ do\n    local distance = math.abs(number - smallest_number)\n    if smallest_distance\
    \ == nil then\n      smallest_distance = distance\n      smallest_number = number\n\
    \    elseif smallest_distance > distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    local second_distance = math.abs(number\
    \ - second_smallest_number)\n    if second_smallest_distance == nil then\n   \
    \   second_smallest_distance = distance\n      second_smallest_number = number\n\
    \    elseif second_smallest_distance > distance then\n      second_smallest_distance\
    \ = distance\n      second_smallest_number = number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest, largest =\
    \ numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local distance\
    \ = math.abs(numbers[i] - largest)\n    if smallest == nil or distance < distance\
    \ then\n      smallest, largest = numbers[i], numbers[i]\n    end\n  end\n  return\
    \ smallest, largest\nend", "  local smallest_distance = nil\n  local smallest_number\
    \ = nil\n  local second_smallest_number = nil\n  for _, number in ipairs(numbers)\
    \ do\n    local distance = math.abs(number - smallest_number)\n    if smallest_distance\
    \ == nil then\n      smallest_distance = distance\n      smallest_number = number\n\
    \      second_smallest_number = number\n    elseif smallest_distance > distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \     second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest_distance = nil\n  local smallest_number\
    \ = nil\n  local second_smallest_number = nil\n  local second_smallest_distance\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if smallest_number ~= nil and smallest_distance == nil\
    \ then\n      second_smallest_number = smallest_number\n      second_smallest_distance\
    \ = smallest_distance\n    elseif smallest_number ~= nil and smallest_distance\
    \ ~= nil then\n      if distance < second_smallest_distance then\n        second_smallest_number\
    \ = smallest_number\n        second_smallest_distance = smallest_distance\n  \
    \    else\n        smallest_number = number\n        smallest_distance = distance\n\
    \      end\n    else\n      smallest_number = number\n      smallest_distance\
    \ = distance\n    end\n  end\n  return { smallest_number, second_smallest_number\
    \ }\nend", "  local smallest = numbers[1]\n  local largest = numbers[1]\n  for\
    \ i = 2, #numbers do\n    if numbers[i] < smallest then\n      smallest = numbers[i]\n\
    \    end\n    if numbers[i] > largest then\n      largest = numbers[i]\n    end\n\
    \  end\n  return smallest, largest\nend", "  local closest_numbers = {}\n  local\
    \ closest_distance = nil\n  for i = 1, #numbers do\n    local distance = math.abs(numbers[i]\
    \ - numbers[#numbers])\n    if closest_distance == nil then\n      closest_distance\
    \ = distance\n      closest_numbers = {numbers[i]}\n    elseif closest_distance\
    \ > distance then\n      closest_distance = distance\n      closest_numbers =\
    \ {numbers[i]}\n    else\n      table.insert(closest_numbers, numbers[i])\n  \
    \  end\n  end\n  return closest_numbers\nend", "  local smallest, largest = numbers[1],\
    \ numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n    if\
    \ current < smallest then\n      smallest = current\n    elseif current > largest\
    \ then\n      largest = current\n    end\n  end\n  return smallest, largest\n\
    end", "  local smallest_number = numbers[1]\n  local second_smallest_number =\
    \ numbers[1]\n  for _, number in ipairs(numbers) do\n    if number < smallest_number\
    \ then\n      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return {smallest_number,\
    \ second_smallest_number}\nend", "  local smallest_distance = nil\n  local smallest_number\
    \ = nil\n  local second_smallest_number = nil\n  for _, number in ipairs(numbers)\
    \ do\n    local distance = math.abs(number - smallest_number)\n    if smallest_distance\
    \ == nil then\n      smallest_distance = distance\n      smallest_number = number\n\
    \      second_smallest_number = number\n    elseif smallest_distance > distance\
    \ then\n      smallest_distance = distance\n      second_smallest_number = number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ min_distance = nil\n  local min_number = nil\n  local max_number = nil\n  for\
    \ _, number in ipairs(numbers) do\n    if min_distance == nil then\n      min_distance\
    \ = number\n      min_number = number\n      max_number = number\n    else\n \
    \     local distance = math.abs(number - min_number)\n      if distance < min_distance\
    \ then\n        min_distance = distance\n        min_number = number\n      elseif\
    \ distance > max_distance then\n        max_distance = distance\n        max_number\
    \ = number\n      end\n    end\n  end\n  return min_number, max_number\nend",
  "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers\
    \ do\n    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    end\n    if current > largest then\n      largest = current\n\
    \    end\n  end\n  return smallest, largest\nend", "  local smallest, largest\
    \ = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local current\
    \ = numbers[i]\n    if current < smallest then\n      smallest = current\n   \
    \ elseif current > largest then\n      largest = current\n    end\n  end\n  return\
    \ largest, smallest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    end\n    if current > largest then\n   \
    \   largest = current\n    end\n  end\n  return smallest, largest\nend", "  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local min_distance\
    \ = nil\n  local min_number = nil\n  local min_number = nil\n  local max_number\
    \ = nil\n  local max_distance = nil\n  for _, number in ipairs(numbers) do\n \
    \   -- If the number is less than the minimum distance so far, update it.\n  \
    \  if min_distance == nil or min_distance > number then\n      min_distance =\
    \ number\n      min_number = number\n    end\n    -- If the number is greater\
    \ than the maximum distance so far, update it.\n    if max_distance == nil or\
    \ max_distance < number then\n      max_distance = number\n      max_number =\
    \ number\n    end\n  end\n  -- Return the two numbers in order.\n  return min_number,\
    \ max_number\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local current\
    \ = numbers[i]\n    if current < smallest then\n      smallest = current\n   \
    \ elseif current > largest then\n      largest = current\n    end\n  end\n  return\
    \ smallest, largest\nend", "  local min_distance = math.inf\n  local min_element\n\
    \  local min_element_index\n  for _, element in ipairs(numbers) do\n    local\
    \ distance = math.abs(element - min_element)\n    if distance < min_distance then\n\
    \      min_distance = distance\n      min_element = element\n      min_element_index\
    \ = #numbers + 1\n    end\n  end\n  return numbers[min_element_index], numbers[min_element_index\
    \ + 1]\nend", "  local closest_elements = {}\n  local smallest_distance = nil\n\
    \  local smallest_distance = nil\n  local smallest_distance = nil\n  local smallest_distance\
    \ = nil\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local\
    \ smallest_distance = nil\n  local smallest_distance = nil\n  local smallest_distance\
    \ = nil\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local\
    \ smallest_distance = nil\n  local smallest_distance = nil\n  local smallest_distance\
    \ = nil\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local\
    \ smallest_distance = nil\n  local smallest_distance = nil\n  local smallest_distance\
    \ = nil\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local\
    \ smallest_distance = nil\n  local smallest_distance = nil\n  local smallest_distance\
    \ = nil\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local\
    \ smallest_distance = nil\n  local smallest_distance = nil\n  local smallest_distance\
    \ = nil\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local\
    \ smallest_distance = nil\n  local smallest_distance = nil\n  local smallest_distance\
    \ = nil\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local\
    \ smallest_distance = nil\n  local smallest_distance = nil\n  local smallest_distance\
    \ = nil\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local\
    \ smallest_distance = nil\n  local smallest_distance = nil\n  local smallest_distance\
    \ = nil\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local\
    \ smallest_distance = nil\n  local smallest_distance = nil\n  local smallest_distance\
    \ = nil\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local\
    \ smallest_distance = nil\n  local smallest_distance = nil\n  local smallest_distance\
    \ = nil\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local\
    \ smallest_distance = nil\n  local smallest_distance = nil\n  local smallest_distance\
    \ = nil\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local\
    \ smallest_distance = nil\n  local smallest_distance = nil\n  local smallest_distance\
    \ = nil\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local\
    \ smallest_distance = nil\n  local smallest_distance = nil\n  local smallest_distance\
    \ = nil\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local\
    \ smallest_distance = nil\n  local ", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  for _, number in pairs(numbers)\
    \ do\n    if number < smallest_number then\n      smallest_number = number\n \
    \   end\n    if number > second_smallest_number then\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      smallest = current\n    elseif current > largest then\n      largest =\
    \ current\n    end\n  end\n  return smallest, largest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_number\
    \ = numbers[1]\n  local second_smallest_number = numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current_number = numbers[i]\n    if current_number < smallest_number\
    \ then\n      smallest_number = current_number\n    end\n    if current_number\
    \ > second_smallest_number then\n      second_smallest_number = current_number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest, largest = numbers[1],\
    \ numbers[#numbers]\n  for i = 2, #numbers do\n    local current = numbers[i]\n\
    \    if current < smallest then\n      smallest = current\n    elseif current\
    \ > largest then\n      largest = current\n    end\n  end\n  return largest, smallest\n\
    end", "  local min_dist = math.inf\n  local min_element = nil\n  for _, element\
    \ in ipairs(numbers) do\n    local dist = math.abs(element - min_element)\n  \
    \  if dist < min_dist then\n      min_dist = dist\n      min_element = element\n\
    \    end\n  end\n  return min_element, min_dist\nend", "  local smallest_number\
    \ = numbers[1]\n  local second_smallest_number = numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current_number = numbers[i]\n    if current_number < smallest_number\
    \ then\n      smallest_number = current_number\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local closest_pairs = {}\n\
    \  local smallest_distance = nil\n  local smallest_number = nil\n  local smallest_index\
    \ = nil\n  local current_number = numbers[1]\n  local current_index = #numbers\
    \ - 1\n  local current_distance = math.abs(current_number - numbers[current_index])\n\
    \  while current_number ~= numbers[current_index] do\n    local next_number =\
    \ numbers[current_index + 1]\n    local next_index = #numbers - 1\n    local next_distance\
    \ = math.abs(next_number - numbers[next_index])\n    if next_distance < current_distance\
    \ then\n      closest_pairs[#closest_pairs + 1] = {current_number, next_number}\n\
    \      smallest_distance = next_distance\n      smallest_number = next_number\n\
    \      smallest_index = next_index\n    end\n    current_index = next_index\n\
    \    current_number = next_number\n    current_distance = next_distance\n  end\n\
    \  if smallest_distance == nil then\n    closest_pairs[#closest_pairs + 1] = {smallest_number,\
    \ smallest_number}\n  end\n  return closest_pairs\nend", "  local smallest_distance\
    \ = math.inf\n  local smallest_number = nil\n  local second_smallest_number =\
    \ nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_number\
    \ ~= nil then\n      local second_distance = math.abs(number - second_smallest_number)\n\
    \      if second_distance < smallest_distance then\n        second_smallest_number\
    \ = number\n      end\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      smallest = current\n    elseif current > largest then\n      largest =\
    \ current\n    end\n  end\n  return smallest, largest\nend", "  local closest_elements\
    \ = {}\n  local smallest_distance = math.inf\n  local smallest_number = nil\n\
    \  local largest_number = nil\n  for _, number in ipairs(numbers) do\n    local\
    \ distance = math.abs(number - smallest_number)\n    if distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    if largest_number == nil then\n      largest_number = number\n  \
    \  else\n      local distance = math.abs(number - largest_number)\n      if distance\
    \ < smallest_distance then\n        smallest_distance = distance\n        smallest_number\
    \ = number\n      end\n    end\n  end\n  table.insert(closest_elements, smallest_number)\n\
    \  table.insert(closest_elements, largest_number)\n  return closest_elements\n\
    end", "  local smallest_number = numbers[1]\n  local second_smallest_number =\
    \ numbers[1]\n  for i = 2, #numbers do\n    local current_number = numbers[i]\n\
    \    if current_number < smallest_number then\n      smallest_number = current_number\n\
    \    elseif current_number > second_smallest_number then\n      second_smallest_number\
    \ = current_number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      smallest = current\n    elseif current > largest then\n      largest =\
    \ current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_number\
    \ = numbers[1]\n  local second_smallest_number = numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current_number = numbers[i]\n    if current_number < smallest_number\
    \ then\n      smallest_number = current_number\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest, largest =\
    \ numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local new_smallest,\
    \ new_largest = numbers[i], numbers[i - 1]\n    if new_smallest < smallest then\n\
    \      smallest = new_smallest\n    end\n    if new_largest > largest then\n \
    \     largest = new_largest\n    end\n  end\n  return smallest, largest\nend",
  "  local smallest_distance = nil\n  local smallest_number = nil\n  local smallest_index\
    \ = nil\n  local smallest_value = nil\n  local largest_distance = nil\n  local\
    \ largest_number = nil\n  local largest_index = nil\n  local largest_value = nil\n\
    \  for index, value in ipairs(numbers) do\n    local distance = math.abs(value\
    \ - smallest_value)\n    if smallest_distance == nil then\n      smallest_distance\
    \ = distance\n      smallest_number = smallest_index\n      smallest_value = value\n\
    \      smallest_index = index\n    elseif smallest_distance > distance then\n\
    \      smallest_distance = distance\n      smallest_number = smallest_index\n\
    \      smallest_value = value\n      smallest_index = index\n    elseif smallest_distance\
    \ == distance then\n      smallest_number = smallest_index\n      smallest_value\
    \ = value\n      smallest_index = index\n    end\n    local distance = math.abs(value\
    \ - largest_value)\n    if largest_distance == nil then\n      largest_distance\
    \ = distance\n      largest_number = largest_index\n      largest_value = value\n\
    \      largest_index = index\n    elseif largest_distance > distance then\n  \
    \    largest_distance = distance\n      largest_number = largest_index\n     \
    \ largest_value = value\n      largest_index = index\n    elseif largest_distance\
    \ == distance then\n      largest_number = largest_index\n      largest_value\
    \ = value\n      largest_index = index\n    end\n  end\n  return { smallest_number,\
    \ smallest_value }\nend", "  local smallest_distance = nil\n  local smallest_number\
    \ = nil\n  local second_smallest_number = nil\n  local second_smallest_distance\
    \ = nil\n  for i = 1, #numbers do\n    local distance = math.abs(numbers[i] -\
    \ numbers[smallest_number])\n    if smallest_number == nil or smallest_distance\
    \ > distance then\n      smallest_number = i\n      smallest_distance = distance\n\
    \    elseif smallest_number ~= i then\n      second_smallest_number = i\n    \
    \  second_smallest_distance = distance\n    end\n  end\n  return { smallest_number,\
    \ second_smallest_number }\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    end\n    if current > largest then\n   \
    \   largest = current\n    end\n  end\n  return smallest, largest\nend", "  local\
    \ smallest_distance = nil\n  local smallest_number = nil\n  local smallest_index\
    \ = nil\n  local second_smallest_distance = nil\n  local second_smallest_number\
    \ = nil\n  local second_smallest_index = nil\n  for i = 1, #numbers do\n    local\
    \ distance = math.abs(numbers[i] - numbers[smallest_index])\n    if smallest_distance\
    \ == nil then\n      smallest_distance = distance\n      smallest_number = numbers[i]\n\
    \      smallest_index = i\n    elseif smallest_distance > distance then\n    \
    \  smallest_distance = distance\n      smallest_number = numbers[i]\n      smallest_index\
    \ = i\n    end\n    if smallest_distance == nil then\n      distance = math.abs(numbers[i]\
    \ - numbers[second_smallest_index])\n      if second_smallest_distance == nil\
    \ then\n        second_smallest_distance = distance\n        second_smallest_number\
    \ = numbers[i]\n        second_smallest_index = i\n      elseif second_smallest_distance\
    \ > distance then\n        second_smallest_distance = distance\n        second_smallest_number\
    \ = numbers[i]\n        second_smallest_index = i\n      end\n    end\n  end\n\
    \  return { smallest_number, second_smallest_number }\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ this_smallest, this_largest = numbers[i], numbers[i - 1]\n    if this_smallest\
    \ < smallest then\n      smallest = this_smallest\n    end\n    if this_largest\
    \ > largest then\n      largest = this_largest\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    end\n    if current > largest then\n   \
    \   largest = current\n    end\n  end\n  return smallest, largest\nend", "  local\
    \ smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for i = 2, #numbers do\n    local current_number = numbers[i]\n    if current_number\
    \ < smallest_number then\n      smallest_number = current_number\n    elseif current_number\
    \ > second_smallest_number then\n      second_smallest_number = current_number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest_distance = nil\n \
    \ local smallest_number = nil\n  local second_smallest_distance = nil\n  local\
    \ second_smallest_number = nil\n  for _, number in ipairs(numbers) do\n    local\
    \ distance = math.abs(number - smallest_number)\n    if smallest_distance == nil\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   elseif smallest_distance > distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    distance = math.abs(number - second_smallest_number)\n\
    \    if second_smallest_distance == nil then\n      second_smallest_distance =\
    \ distance\n      second_smallest_number = number\n    elseif second_smallest_distance\
    \ > distance then\n      second_smallest_distance = distance\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      smallest = current\n    end\n    if current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_number\
    \ = numbers[1]\n  local second_smallest_number = numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current_number = numbers[i]\n    if current_number < smallest_number\
    \ then\n      smallest_number = current_number\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest, largest =\
    \ numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local current =\
    \ numbers[i]\n    if current < smallest then\n      smallest = current\n    elseif\
    \ current > largest then\n      largest = current\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest = numbers[1]\n  local largest = numbers[1]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      largest = current\n    elseif current > largest then\n      smallest\
    \ = current\n    end\n  end\n  return { smallest, largest }\nend", "  local smallest_number\
    \ = numbers[1]\n  local second_smallest_number = numbers[1]\n  for _, number in\
    \ pairs(numbers) do\n    if number < smallest_number then\n      smallest_number\
    \ = number\n    end\n    if number > second_smallest_number then\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest_number = numbers[1]\n  local largest_number = numbers[#numbers]\n\
    \  local smallest_index = #numbers\n  local largest_index = #numbers\n  while\
    \ smallest_index <= largest_index do\n    local current_number = numbers[smallest_index]\n\
    \    local current_index = smallest_index\n    while current_index <= largest_index\
    \ do\n      local next_number = numbers[current_index]\n      if next_number <\
    \ current_number then\n        smallest_index = current_index + 1\n      else\n\
    \        largest_index = current_index\n      end\n      current_index = current_index\
    \ + 1\n    end\n    if smallest_index == largest_index then\n      break\n   \
    \ end\n    smallest_number = numbers[smallest_index]\n    largest_number = numbers[largest_index]\n\
    \    smallest_index = smallest_index + 1\n    largest_index = largest_index -\
    \ 1\n  end\n  return numbers, {smallest_number, largest_number}\nend", "  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return largest, smallest\nend", "  local smallest, largest = numbers[1],\
    \ numbers[#numbers]\n  for i = 2, #numbers do\n    local current = numbers[i]\n\
    \    if current < smallest then\n      smallest = current\n    elseif current\
    \ > largest then\n      largest = current\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return largest, smallest\nend", "  local smallest_distance\
    \ = math.inf\n  local smallest_number\n  local second_smallest_number\n  for _,\
    \ number in ipairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    if smallest_distance == math.inf\
    \ then\n      break\n    end\n    local second_distance = math.abs(number - second_smallest_number)\n\
    \    if second_distance < smallest_distance then\n      second_smallest_number\
    \ = number\n    end\n  end\n  return {smallest_number, second_smallest_number}\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local new_smallest, new_largest = numbers[i], numbers[i - 1]\n\
    \    if new_smallest < smallest then\n      smallest = new_smallest\n    end\n\
    \    if new_largest > largest then\n      largest = new_largest\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest_number = numbers[1]\n  local\
    \ second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local current_number\
    \ = numbers[i]\n    if current_number < smallest_number then\n      smallest_number\
    \ = current_number\n    elseif current_number > second_smallest_number then\n\
    \      second_smallest_number = current_number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest, largest = numbers[1], numbers[1]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_number\
    \ = numbers[1]\n  local second_smallest_number = numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current_number = numbers[i]\n    if current_number < smallest_number\
    \ then\n      smallest_number = current_number\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest, largest =\
    \ numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local current =\
    \ numbers[i]\n    if current < smallest then\n      smallest = current\n    elseif\
    \ current > largest then\n      largest = current\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local min_distance = nil\n  local min_number = nil\n  local\
    \ max_number = nil", "  local smallest, largest = numbers[1], numbers[1]\n  for\
    \ i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      largest = current\n    elseif current > largest then\n      smallest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ diff = numbers[i] - largest\n    if diff < smallest then\n      smallest, largest\
    \ = diff, numbers[i]\n    end\n  end\n  return largest, smallest\nend", "  local\
    \ function distance(number)\n    return math.abs(number - numbers[1])\n  end\n\
    \  local function sort_by_distance(numbers)\n    table.sort(numbers, distance)\n\
    \    return numbers\n  end\n  local function select_two(numbers)\n    local smallest\
    \ = numbers[1]\n    local largest = numbers[2]\n    if smallest < largest then\n\
    \      return smallest, largest\n    end\n    return largest, smallest\n  end\n\
    \  local function select_two_sorted(numbers)\n    local smallest = numbers[1]\n\
    \    local largest = numbers[2]\n    if smallest < largest then\n      return\
    \ smallest, largest\n    end\n    return largest, smallest\n  end\n  local function\
    \ select_two_sorted_by_distance(numbers)\n    table.sort(numbers, distance)\n\
    \    local smallest = numbers[1]\n    local largest = numbers[2]\n    if smallest\
    \ < largest then\n      return smallest, largest\n    end\n    return largest,\
    \ smallest\n  end\n  local function select_two_sorted_by_distance_sorted(numbers)\n\
    \    table.sort(numbers, distance)\n    local smallest = numbers[1]\n    local\
    \ largest = numbers[2]\n    if smallest < largest then\n      return smallest,\
    \ largest\n    end\n    return largest, smallest\n  end\n  local function select_two_sorted_by_distance_sorted_by_distance(numbers)\n\
    \    table.sort(numbers, distance)\n    table.sort(numbers, distance)\n    local\
    \ smallest = numbers[1]\n    local largest = numbers[2]\n    if smallest < largest\
    \ then\n      return smallest, largest\n    end\n    return largest, smallest\n\
    \  end\n  local function select_two_sorted_by_distance_sorted_by_distance_sorted(numbers)\n\
    \    table.sort(numbers, distance)\n    table.sort(numbers, distance)\n    table.sort(numbers,\
    \ distance)\n    local smallest = numbers[1]\n    local largest = numbers[2]\n\
    \    if smallest < largest then\n      return smallest, largest\n    end\n   \
    \ return largest, smallest\n  end\n  local function select_two_sorted_by_distance_sorted_by_distance_sorted_by_distance(numbers)\n\
    \    table.sort(numbers, distance)\n    table.sort(numbers, distance)\n    table.sort(numbers,\
    \ distance)\n    table.sort(numbers, distance)\n    local smallest = numbers[1]\n\
    \    local largest = numbers[2]\n    if smallest < largest then\n      return\
    \ smallest, largest\n    end\n    return largest, smallest\n  end\n  local function\
    \ select_two_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance(numbers)\n\
    \    table.sort(numbers, distance)\n    table.sort(numbers, ", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local function\
    \ distance(first, second)\n    return math.abs(first - second)\n  end\n  local\
    \ function find_closest_pair(first, second)\n    local min_distance = distance(first,\
    \ second)\n    local min_element = first\n    for _, element in pairs(numbers)\
    \ do\n      if distance(min_element, element) < min_distance then\n        min_distance\
    \ = distance(min_element, element)\n        min_element = element\n      end\n\
    \    end\n    return min_element\n  end\n  local function find_closest_pairs(first,\
    \ second)\n    local min_distance = distance(first, second)\n    local min_element\
    \ = first\n    local min_pairs = {}\n    for _, element in pairs(numbers) do\n\
    \      if distance(min_element, element) < min_distance then\n        min_distance\
    \ = distance(min_element, element)\n        min_element = element\n      else\n\
    \        table.insert(min_pairs, min_element)\n      end\n    end\n    return\
    \ min_pairs\n  end\n  local function find_closest_pairs_sorted(first, second)\n\
    \    local min_distance = distance(first, second)\n    local min_element = first\n\
    \    local min_pairs = {}\n    for _, element in pairs(numbers) do\n      if distance(min_element,\
    \ element) < min_distance then\n        min_distance = distance(min_element, element)\n\
    \        min_element = element\n      else\n        table.insert(min_pairs, min_element)\n\
    \      end\n    end\n    table.sort(min_pairs)\n    return min_pairs\n  end\n\
    \  local function find_closest_pairs_sorted(first, second)\n    local min_distance\
    \ = distance(first, second)\n    local min_element = first\n    local min_pairs\
    \ = {}\n    for _, element in pairs(numbers) do\n      if distance(min_element,\
    \ element) < min_distance then\n        min_distance = distance(min_element, element)\n\
    \        min_element = element\n      else\n        table.insert(min_pairs, min_element)\n\
    \      end\n    end\n    table.sort(min_pairs, function(a, b)\n      return math.abs(a\
    \ - b)\n    end)\n    return min_pairs\n  end\n  local function find_closest_pairs_sorted(first,\
    \ second)\n    local min_distance = distance(first, second)\n    local min_element\
    \ = first\n    local min_pairs = {}\n    for _, element in pairs(numbers) do\n\
    \      if distance(min_element, element) < min_distance then\n        min_distance\
    \ = distance(min_element, element)\n        min_element = element\n      else\n\
    \        table.insert(min_pairs, min_element)\n      end\n    end\n    table.sort(min_pairs,\
    \ function(a, b)\n      return math.abs(a - b)\n    end)\n    return min_pairs\n\
    \  end\n  local function find_closest_pairs_sorted(first, second)\n    local min_distance\
    \ = distance(first, second)\n    local min_element = first\n    local min_pairs\
    \ = {}\n    for _, element in pairs(numbers) do", "  local smallest_distance =\
    \ nil\n  local smallest_number = nil\n  local second_smallest_distance = nil\n\
    \  local second_smallest_number = nil\n  for _, number in ipairs(numbers) do\n\
    \    local distance = math.abs(number - smallest_number)\n    if smallest_distance\
    \ == nil then\n      smallest_distance = distance\n      smallest_number = number\n\
    \    elseif smallest_distance > distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    distance = math.abs(number - second_smallest_number)\n\
    \    if second_smallest_distance == nil then\n      second_smallest_distance =\
    \ distance\n      second_smallest_number = number\n    elseif second_smallest_distance\
    \ > distance then\n      second_smallest_distance = distance\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      smallest = current\n    elseif current > largest then\n      largest =\
    \ current\n    end\n  end\n  return largest, smallest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return largest, smallest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local diff = numbers[i] - largest\n    if diff\
    \ < smallest then\n      smallest = diff\n      largest = numbers[i]\n    end\n\
    \  end\n  return largest, smallest\nend", "  local smallest_number = numbers[1]\n\
    \  local largest_number = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i]\
    \ < smallest_number then\n      smallest_number = numbers[i]\n    elseif numbers[i]\
    \ > largest_number then\n      largest_number = numbers[i]\n    end\n  end\n \
    \ return smallest_number, largest_number\nend", "  local smallest, largest = numbers[1],\
    \ numbers[#numbers]\n  for i = 2, #numbers do\n    local current = numbers[i]\n\
    \    if current < smallest then\n      smallest = current\n    elseif current\
    \ > largest then\n      largest = current\n    end\n  end\n  return largest, smallest\n\
    end", "  local smallest_distance = math.inf\n  local smallest_number\n  local\
    \ largest_distance = math.inf\n  local largest_number", "  local smallest, largest\
    \ = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local current\
    \ = numbers[i]\n    if current < smallest then\n      smallest = current\n   \
    \ elseif current > largest then\n      largest = current\n    end\n  end\n  return\
    \ smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local diff = numbers[i] - smallest\n    if diff\
    \ < smallest then\n      smallest = diff\n    end\n    diff = largest - numbers[i]\n\
    \    if diff > largest then\n      largest = diff\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest_number = numbers[1]\n  local second_smallest_number\
    \ = numbers[1]\n  for _, number in pairs(numbers) do\n    if number < smallest_number\
    \ then\n      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest_number = numbers[1]\n  local\
    \ second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local current_number\
    \ = numbers[i]\n    if current_number < smallest_number then\n      smallest_number\
    \ = current_number\n    end\n    if current_number > second_smallest_number then\n\
    \      second_smallest_number = current_number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    end\n    if current > largest then\n   \
    \   largest = current\n    end\n  end\n  return smallest, largest\nend", "  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local distance = math.abs(numbers[i] - largest)\n    if distance < smallest\
    \ then\n      smallest, largest = distance, numbers[i]\n    end\n  end\n  return\
    \ largest, smallest\nend", "  local smallest_distance = math.inf\n  local smallest_number\n\
    \  local largest_distance = math.inf\n  local largest_number", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest = numbers[1]\n  local largest\
    \ = numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n   \
    \ if current < smallest then\n      smallest = current\n    elseif current > largest\
    \ then\n      largest = current\n    end\n  end\n  return largest, smallest\n\
    end", "  local smallest_distance = nil\n  local smallest_number = nil\n  local\
    \ second_smallest_number = nil\n  for i = 1, #numbers do\n    local distance =\
    \ math.abs(numbers[i] - numbers[1])\n    if smallest_distance == nil or distance\
    \ < smallest_distance then\n      smallest_distance = distance\n      smallest_number\
    \ = numbers[i]\n    end\n    if second_smallest_number == nil or distance < second_smallest_number\
    \ then\n      second_smallest_number = distance\n      second_smallest_number\
    \ = numbers[i]\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local closest_elements = {}\n  local smallest_distance = math.inf\n \
    \ local smallest_number = nil\n  local largest_distance = math.inf\n  local largest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    local distance = math.abs(number\
    \ - largest_number)\n    if distance > largest_distance then\n      largest_distance\
    \ = distance\n      largest_number = number\n    end\n  end\n  table.insert(closest_elements,\
    \ smallest_number)\n  table.insert(closest_elements, largest_number)\n  return\
    \ closest_elements\nend", "  local smallest_number = numbers[1]\n  local second_smallest_number\
    \ = numbers[1]\n  for _, number in pairs(numbers) do\n    if number < smallest_number\
    \ then\n      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest_number = numbers[1]\n  local\
    \ second_smallest_number = numbers[1]\n  for _, number in pairs(numbers) do\n\
    \    if number < smallest_number then\n      smallest_number = number\n    end\n\
    \    if number > second_smallest_number then\n      second_smallest_number = number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  local smallest_index = nil\n  local second_smallest_index = nil\n  local smallest_distance\
    \ = nil\n  local second_smallest_distance = nil\n  for i = 2, #numbers do\n  \
    \  local distance = math.abs(numbers[i] - smallest_number)\n    if smallest_distance\
    \ == nil then\n      smallest_distance = distance\n      smallest_index = i\n\
    \    elseif smallest_distance > distance then\n      smallest_distance = distance\n\
    \      smallest_index = i\n    end\n    distance = math.abs(numbers[i] - second_smallest_number)\n\
    \    if second_smallest_distance == nil then\n      second_smallest_distance =\
    \ distance\n      second_smallest_index = i\n    elseif second_smallest_distance\
    \ > distance then\n      second_smallest_distance = distance\n      second_smallest_index\
    \ = i\n    end\n  end\n  return { smallest_number, second_smallest_number }\n\
    end", "  local smallest_distance = nil\n  local smallest_number = nil\n  local\
    \ second_smallest_number = nil\n  for _, number in ipairs(numbers) do\n    local\
    \ distance = math.abs(number - smallest_number)\n    if smallest_distance == nil\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \     second_smallest_number = number\n    elseif smallest_distance > distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \     second_smallest_number = number\n    end\n  end\n  return {smallest_number,\
    \ second_smallest_number}\nend", "  local function distance(number)\n    return\
    \ math.abs(number - numbers[1])\n  end\n  local function smallest(number)\n  \
    \  return numbers[1]\n  end\n  local function largest(number)\n    return numbers[#numbers]\n\
    \  end\n  local function swap(numbers)\n    local tmp = numbers[1]\n    numbers[1]\
    \ = numbers[#numbers]\n    numbers[#numbers] = tmp\n  end\n  local function find_smallest(numbers)\n\
    \    local smallest = numbers[1]\n    local smallest_index = #numbers\n    for\
    \ i = 2, #numbers do\n      if distance(numbers[i]) < distance(smallest) then\n\
    \        smallest = numbers[i]\n        smallest_index = i\n      end\n    end\n\
    \    return smallest, smallest_index\n  end\n  local function find_largest(numbers)\n\
    \    local largest = numbers[1]\n    local largest_index = #numbers\n    for i\
    \ = 2, #numbers do\n      if distance(numbers[i]) > distance(largest) then\n \
    \       largest = numbers[i]\n        largest_index = i\n      end\n    end\n\
    \    return largest, largest_index\n  end\n  local function find_smallest_and_largest(numbers)\n\
    \    local smallest, smallest_index = find_smallest(numbers)\n    local largest,\
    \ largest_index = find_largest(numbers)\n    swap(numbers)\n    swap(numbers)\n\
    \    return smallest, largest\n  end\n  local function find_smallest_and_smallest(numbers)\n\
    \    local smallest, smallest_index = find_smallest(numbers)\n    local smallest_and_smallest\
    \ = numbers[smallest_index]\n    swap(numbers)\n    swap(numbers)\n    return\
    \ smallest_and_smallest, smallest\n  end\n  local function find_smallest_and_largest(numbers)\n\
    \    local smallest, smallest_index = find_smallest(numbers)\n    local largest,\
    \ largest_index = find_largest(numbers)\n    swap(numbers)\n    swap(numbers)\n\
    \    return smallest, largest\n  end\n  local function find_smallest_and_smallest(numbers)\n\
    \    local smallest, smallest_index = find_smallest(numbers)\n    local smallest_and_smallest\
    \ = numbers[smallest_index]\n    swap(numbers)\n    swap(numbers)\n    return\
    \ smallest_and_smallest, smallest\n  end\n  local function find_smallest_and_smallest(numbers)\n\
    \    local smallest, smallest_index = find_smallest(numbers)\n    local smallest_and_smallest\
    \ = numbers[smallest_index]\n    swap(numbers)\n    swap(number", "  local smallest_distance\
    \ = math.inf\n  local smallest_number = nil\n  local largest_distance = math.inf\n\
    \  local largest_number = nil", "  local smallest_number = numbers[1]\n  local\
    \ second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local current_number\
    \ = numbers[i]\n    if current_number < smallest_number then\n      smallest_number\
    \ = current_number\n    elseif current_number > second_smallest_number then\n\
    \      second_smallest_number = current_number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest_distance = math.inf\n  local\
    \ smallest_number = nil\n  local largest_number = nil\n  for i = 1, #numbers do\n\
    \    local distance = math.abs(numbers[i] - numbers[smallest_number])\n    if\
    \ distance < smallest_distance then\n      smallest_distance = distance\n    \
    \  smallest_number = i\n    end\n    if distance > largest_distance then\n   \
    \   largest_distance = distance\n      largest_number = i\n    end\n  end\n  return\
    \ smallest_number, largest_number\nend", "  local function distance(first, second)\n\
    \    return math.sqrt(math.pow(first[1] - second[1], 2) + math.pow(first[2] -\
    \ second[2], 2))\n  end\n  local function find_smallest(first, second)\n    if\
    \ distance(first, second) < distance(second, first) then\n      return second\n\
    \    else\n      return first\n    end\n  end\n  local function find_largest(first,\
    \ second)\n    if distance(first, second) > distance(second, first) then\n   \
    \   return second\n    else\n      return first\n    end\n  end\n  local smallest\
    \ = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n    local\
    \ smallest_next = find_smallest(numbers[i], largest)\n    local largest_next =\
    \ find_largest(smallest, numbers[i])\n    if smallest_next ~= largest then\n \
    \     largest = smallest_next\n    else\n      largest = largest_next\n    end\n\
    \  end\n  return largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return largest, smallest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[1]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return largest, smallest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ diff = numbers[i] - smallest\n    if diff < smallest then\n      smallest =\
    \ diff\n    end\n    diff = largest - numbers[i]\n    if diff > largest then\n\
    \      largest = diff\n    end\n  end\n  return { smallest, largest }\nend", " \
    \ local smallest_distance = nil\n  local smallest_number = nil\n  local largest_distance\
    \ = nil\n  local largest_number = nil\n  for _, number in ipairs(numbers) do\n\
    \    local distance = math.abs(number - smallest_number)\n    if smallest_distance\
    \ == nil then\n      smallest_distance = distance\n      smallest_number = number\n\
    \    elseif smallest_distance > distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    distance = math.abs(number - largest_number)\n\
    \    if largest_distance == nil then\n      largest_distance = distance\n    \
    \  largest_number = number\n    elseif largest_distance < distance then\n    \
    \  largest_distance = distance\n      largest_number = number\n    end\n  end\n\
    \  return smallest_number, largest_number\nend", "  local smallest_distance =\
    \ nil\n  local smallest_number = nil\n  local second_smallest_number = nil\n \
    \ for _, number in pairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if smallest_distance == nil or distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if second_smallest_number\
    \ == nil then\n      second_smallest_number = number\n    else\n      local distance\
    \ = math.abs(number - second_smallest_number)\n      if distance < smallest_distance\
    \ then\n        smallest_distance = distance\n        smallest_number = number\n\
    \        second_smallest_number = number\n      end\n    end\n  end\n  return\
    \ { smallest_number, second_smallest_number }\nend", "  local smallest, largest\
    \ = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local diff =\
    \ numbers[i] - smallest\n    if diff < 0 then\n      largest = numbers[i]\n  \
    \  elseif diff > 0 then\n      smallest = numbers[i]\n    end\n  end\n  return\
    \ smallest, largest\nend", "  local smallest_distance = nil\n  local smallest_number\
    \ = nil\n  local second_smallest_number = nil\n  for _, number in ipairs(numbers)\
    \ do\n    local distance = math.abs(number - smallest_number)\n    if smallest_distance\
    \ == nil or distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    if smallest_distance ~= nil and\
    \ smallest_distance < distance then\n      second_smallest_number = smallest_number\n\
    \      smallest_distance = distance\n      smallest_number = number\n    end\n\
    \  end\n  return smallest_number, second_smallest_number\nend", "  local smallest\
    \ = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      largest = current\n\
    \    elseif current > largest then\n      smallest = current\n    end\n  end\n\
    \  return largest, smallest\nend", "  local smallest_distance = nil\n  local smallest_number\
    \ = nil\n  local second_smallest_distance = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if smallest_distance == nil then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    elseif smallest_distance > distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    distance = math.abs(number - second_smallest_number)\n    if second_smallest_distance\
    \ == nil then\n      second_smallest_distance = distance\n      second_smallest_number\
    \ = number\n    elseif second_smallest_distance > distance then\n      second_smallest_distance\
    \ = distance\n      second_smallest_number = number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current_number = numbers[i]\n    if current_number < smallest_number then\n\
    \      smallest_number = current_number\n    end\n    if current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest_distance =\
    \ math.inf\n  local smallest_number = nil\n  local largest_distance = math.inf\n\
    \  local largest_number = nil\n  for _, number in ipairs(numbers) do\n    local\
    \ distance = math.abs(number - smallest_number)\n    if distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    distance = math.abs(number - largest_number)\n    if distance > largest_distance\
    \ then\n      largest_distance = distance\n      largest_number = number\n   \
    \ end\n  end\n  return {smallest_number, largest_number}\nend", "  local smallest_number\
    \ = numbers[1]\n  local second_smallest_number = numbers[1]\n  local smallest_index\
    \ = 2\n  local second_smallest_index = 2\n  for i = 2, #numbers do\n    local\
    \ current_number = numbers[i]\n    if current_number < smallest_number then\n\
    \      smallest_number = current_number\n      smallest_index = i\n    elseif\
    \ current_number > second_smallest_number then\n      second_smallest_number =\
    \ current_number\n      second_smallest_index = i\n    end\n  end\n  return numbers[smallest_index],\
    \ numbers[second_smallest_index]\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  local smallest_index = 2\n  local\
    \ second_smallest_index = 2\n  for i = 2, #numbers do\n    if numbers[i] < smallest_number\
    \ then\n      smallest_number = numbers[i]\n      smallest_index = i\n    end\n\
    \    if numbers[i] > second_smallest_number then\n      second_smallest_number\
    \ = numbers[i]\n      second_smallest_index = i\n    end\n  end\n  return { smallest_number,\
    \ second_smallest_number }\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local new_smallest, new_largest = smallest, largest\n\
    \    if numbers[i] < smallest then\n      new_smallest = numbers[i]\n    elseif\
    \ numbers[i] > largest then\n      new_largest = numbers[i]\n    end\n    smallest,\
    \ largest = new_smallest, new_largest\n  end\n  return largest, smallest\nend",
  "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers\
    \ do\n    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current_number = numbers[i]\n    if current_number < smallest_number then\n\
    \      smallest_number = current_number\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
