name: HumanEval_70_strange_sort_list
language: lua
prompt: "-- Given table of integers, return table in strange order.\n-- Strange sorting,\
  \ is when you start with the minimum value,\n-- then maximum of the remaining integers,\
  \ then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1, 2, 3, 4})\n\
  -- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5, 5, 5}\n-- >>>\
  \ strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
  \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
  \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5,\
  \ 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}),\
  \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3,\
  \ 6, 4, 5})\n    lu.assertEquals(candidate({0, 2, 2, 2, 5, 5, -5, -5}), {-5, 5,\
  \ -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}), {111111})\nend\n\
  \nos.exit(lu.LuaUnit.run())"
completions: ["  local result = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    local value = lst[i]\n    if value < minimum then\n\
    \      minimum = value\n    elseif value > maximum then\n      maximum = value\n\
    \    end\n    result[#result + 1] = value\n  end\n  result[#result + 1] = minimum\n\
    \  result[#result + 1] = maximum\n  return result\nend", "  local sorted_lst =\
    \ {}\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst + 1] = lst[i]\n  end\n\
    \  table.sort(sorted_lst)\n  return sorted_lst\nend", "  local lst = lst or {}\n\
    \  local min = lst[1]\n  local max = lst[1]\n  for i = 2, #lst do\n    local v\
    \ = lst[i]\n    if v < min then\n      min = v\n    elseif v > max then\n    \
    \  max = v\n    end\n  end\n  local lst2 = {}\n  for i = 1, #lst do\n    lst2[#lst2\
    \ + 1] = lst[i]\n  end\n  lst2[#lst2 + 1] = min\n  lst2[#lst2 + 1] = max\n  return\
    \ lst2\nend", "  local sorted_lst = {}\n  for i = 1, #lst do\n    table.insert(sorted_lst,\
    \ lst[i])\n  end\n  table.sort(sorted_lst, function(x, y)\n    return x < y\n\
    \  end)\n  return sorted_lst\nend", "  local sorted_list = lst\n  for i = #lst,\
    \ 1, -1 do\n    local min = lst[i]\n    local max = lst[i-1]\n    local swap =\
    \ nil\n    for j = i, 1, -1 do\n      if lst[j] < min then\n        swap = lst[j]\n\
    \        lst[j] = min\n      elseif lst[j] > max then\n        swap = lst[j]\n\
    \        lst[j] = max\n      end\n    end\n    if swap ~= nil then\n      lst[i],\
    \ lst[#lst] = swap, lst[i]\n    end\n  end\n  return sorted_list\nend", "  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and minimum\
    \ or sorted_list[i]\n    maximum = maximum < sorted_list[i] and maximum or sorted_list[i]\n\
    \  end\n  sorted_list[#sorted_list+1] = minimum\n  sorted_list[#sorted_list+1]\
    \ = maximum\n  return sorted_list\nend", "  local sorted_lst = {}\n  local min_val\
    \ = nil\n  local max_val = nil\n  for _, v in pairs(lst) do\n    if min_val ==\
    \ nil then\n      min_val = v\n      max_val = v\n    else\n      if v < min_val\
    \ then\n        min_val = v\n      elseif v > max_val then\n        max_val =\
    \ v\n      end\n    end\n  end\n  for _, v in pairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return a < b end)\n  return\
    \ sorted_lst\nend", "  local sorted_list = lst\n  local min_value = sorted_list[1]\n\
    \  local max_value = sorted_list[1]\n  for i = 2, #sorted_list do\n    if sorted_list[i]\
    \ < min_value then\n      min_value = sorted_list[i]\n    end\n    if sorted_list[i]\
    \ > max_value then\n      max_value = sorted_list[i]\n    end\n  end\n  -- Swap\
    \ min and max values.\n  sorted_list[#sorted_list] = max_value\n  sorted_list[#sorted_list\
    \ + 1] = min_value\n  return sorted_list\nend", "  local sorted_lst = {}\n  local\
    \ min_val = lst[1]\n  local max_val = lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ < min_val then\n      min_val = lst[i]\n    elseif lst[i] > max_val then\n \
    \     max_val = lst[i]\n    end\n  end\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst\
    \ + 1] = lst[i]\n  end\n  for i = 1, #sorted_lst do\n    sorted_lst[i] = min_val\n\
    \  end\n  for i = 1, #sorted_lst do\n    sorted_lst[i] = max_val\n  end\n  return\
    \ sorted_lst\nend", "  local sorted_lst = {}\n  for i = 1, #lst do\n    table.insert(sorted_lst,\
    \ lst[i])\n  end\n  table.sort(sorted_lst)\n  return sorted_lst\nend", "  local\
    \ sorted_list = terralib.newlist()\n  local min_value = lst[1]\n  local max_value\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      max_value = lst[i]\n   \
    \ end\n  end\n  table.sort(lst, function(a, b) return a < b end)\n  for i = 1,\
    \ #lst do\n    sorted_list[#sorted_list + 1] = lst[i]\n  end\n  table.sort(sorted_list,\
    \ function(a, b) return a < b end)\n  return sorted_list\nend", "  local sorted_lst\
    \ = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] < min_value then\n      min_value = lst[i]\n    elseif lst[i]\
    \ > max_value then\n      max_value = lst[i]\n    end\n  end\n  for i = 1, #lst\
    \ do\n    table.insert(sorted_lst, min_value)\n    table.insert(sorted_lst, max_value)\n\
    \    table.insert(sorted_lst, lst[i])\n  end\n  return sorted_lst\nend", "  local\
    \ sorted_lst = lst\n  local min_val = sorted_lst[1]\n  local max_val = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local val = sorted_lst[i]\n    if val < min_val\
    \ then\n      min_val = val\n    end\n    if val > max_val then\n      max_val\
    \ = val\n    end\n  end\n  for i = 1, #sorted_lst do\n    local val = sorted_lst[i]\n\
    \    sorted_lst[i] = val\n  end\n  table.sort(sorted_lst, function(a, b) return\
    \ a < b end)\n  return sorted_lst\nend", "  local sorted_list = lst\n  local minimum\
    \ = sorted_list[1]\n  local maximum = sorted_list[1]\n  for i = 2, #sorted_list\
    \ do\n    minimum = minimum > sorted_list[i] and sorted_list[i] or minimum\n \
    \   maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n  end\n\
    \  -- Swap the minimum and maximum.\n  sorted_list[#sorted_list] = minimum\n \
    \ sorted_list[#sorted_list + 1] = maximum\n  return sorted_list\nend", "  local\
    \ sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst + 1] = lst[i]\n\
    \  end\n  table.sort(sorted_lst)\n  return sorted_lst\nend", "  local sorted_lst\
    \ = lst\n  local minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local current = sorted_lst[i]\n    if current\
    \ < minimum then\n      minimum = current\n    elseif current > maximum then\n\
    \      maximum = current\n    end\n  end\n  -- Swap the minimum and maximum.\n\
    \  sorted_lst[#sorted_lst] = minimum\n  sorted_lst[1] = maximum\n  return sorted_lst\n\
    end", "  local sorted_lst = {}\n  local min_value = lst[1]\n  local max_value\
    \ = lst[1]\n  for i = 2, #lst do\n    local value = lst[i]\n    if value < min_value\
    \ then\n      min_value = value\n    elseif value > max_value then\n      max_value\
    \ = value\n    end\n    table.insert(sorted_lst, value)\n  end\n  return sorted_lst\n\
    end", "  local sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value\
    \ = sorted_lst[#sorted_lst]\n  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n\
    \    if value < min_value then\n      min_value = value\n    end\n    if value\
    \ > max_value then\n      max_value = value\n    end\n  end\n  for i = 1, #sorted_lst\
    \ do\n    sorted_lst[i], sorted_lst[min_value], sorted_lst[max_value] = sorted_lst[min_value],\
    \ sorted_lst[i], sorted_lst[max_value]\n  end\n  return sorted_lst\nend", "  local\
    \ sorted_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n  for i\
    \ = 2, #lst do\n    minimum = minimum or lst[i]\n    maximum = maximum or lst[i]\n\
    \    if minimum > maximum then\n      sorted_lst = table.concat(sorted_lst, minimum,\
    \ maximum)\n      minimum = lst[i]\n      maximum = lst[i]\n    else\n      sorted_lst\
    \ = table.concat(sorted_lst, minimum, lst[i])\n      minimum = minimum or lst[i]\n\
    \      maximum = maximum or lst[i]\n    end\n  end\n  sorted_lst = table.concat(sorted_lst,\
    \ minimum, maximum)\n  return sorted_lst\nend", "  local sorted_lst = {}\n  for\
    \ i = 1, #lst do\n    sorted_lst[#sorted_lst + 1] = lst[i]\n  end\n  table.sort(sorted_lst)\n\
    \  return sorted_lst\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
