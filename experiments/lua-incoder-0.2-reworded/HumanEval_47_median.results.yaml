language: lua
name: HumanEval_47_median
results:
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local middle = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[middle]\n  else\n    return median(l[middle],\
    \ l[middle + 1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz4x4uu5y.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpz4x4uu5y.lua:7:\
    \ in function </tmp/tmpz4x4uu5y.lua:6>\n\t(tail call): ?\n\t/tmp/tmpz4x4uu5y.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid-1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyxuab3ji.lua:21:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpyxuab3ji.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local half = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[half]\n  else\n    return (l[half -\
    \ 1] + l[half]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx137v_.lua:19:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpsbx137v_.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  local\
    \ half = n / 2\n  if n % 2 == 0 then\n    return l[half]\n  else\n    return (l[half]\
    \ + l[half - 1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvez9d7nd.lua:15:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpvez9d7nd.lua:15: in function 'candidate'\n\t/tmp/tmpvez9d7nd.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(n / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n \
    \   return median(l[mid], l[mid-1])\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7kuom4_5.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmp7kuom4_5.lua:7:\
    \ in function </tmp/tmp7kuom4_5.lua:6>\n\t(tail call): ?\n\t/tmp/tmp7kuom4_5.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  local\
    \ m = n / 2\n  if n % 2 == 1 then\n    return l[m]\n  else\n    return (l[m] +\
    \ l[m - 1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_rknmosh.lua:22:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmp_rknmosh.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n %\
    \ 2 == 0 then\n    return l[math.floor(n/2)]\n  end\n  local mid = math.floor((n+1)/2)\n\
    \  return median(l[mid], l[mid-1])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7r6m7fwz.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmp7r6m7fwz.lua:7:\
    \ in function </tmp/tmp7r6m7fwz.lua:6>\n\t(tail call): ?\n\t/tmp/tmp7r6m7fwz.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n < 1 then return nil end\n  local half = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[half]\n  else\n    return median(l[half],\
    \ l[half+1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk8le5kmt.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpk8le5kmt.lua:7:\
    \ in function </tmp/tmpk8le5kmt.lua:6>\n\t(tail call): ?\n\t/tmp/tmpk8le5kmt.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n < 1 then return nil end\n  local half = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[half]\n  else\n    return median(l[half],\
    \ l[half+1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk8le5kmt.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpk8le5kmt.lua:7:\
    \ in function </tmp/tmpk8le5kmt.lua:6>\n\t(tail call): ?\n\t/tmp/tmpk8le5kmt.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwysf4gjv.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpwysf4gjv.lua:7:\
    \ in function </tmp/tmpwysf4gjv.lua:6>\n\t(tail call): ?\n\t/tmp/tmpwysf4gjv.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n < 1 then return nil end\n  local half = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[half]\n  else\n    return median(l[half],\
    \ l[half+1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk8le5kmt.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpk8le5kmt.lua:7:\
    \ in function </tmp/tmpk8le5kmt.lua:6>\n\t(tail call): ?\n\t/tmp/tmpk8le5kmt.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n < 1 then return nil end\n  local half = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[half]\n  else\n    return (l[half-1] + l[half])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mrrvd5w.lua:20:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp_mrrvd5w.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu6kvqe7b.lua:19:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpu6kvqe7b.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  if n\
    \ % 2 == 1 then\n    return l[math.floor(n/2)]\n  end\n  local half = math.floor(n/2)\n\
    \  local median1 = median(l[half])\n  local median2 = median(l[half+1])\n  return\
    \ median1 + median2/2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjgs3r7_0.lua:23:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpjgs3r7_0.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  local median = l[mid]\n  for i = mid + 1, #l do\n    median = median\
    \ + l[i] / 2\n  end\n  return median\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzorfrc00.lua:21:\
    \ expected: 3, actual: 6.5\nstack traceback:\n\t/tmp/tmpzorfrc00.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  local median = l[mid]\n  for i = mid + 1, #l do\n    median = median\
    \ + l[i] / 2\n  end\n  return median\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzorfrc00.lua:21:\
    \ expected: 3, actual: 6.5\nstack traceback:\n\t/tmp/tmpzorfrc00.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu6kvqe7b.lua:19:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpu6kvqe7b.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  local\
    \ m = n / 2\n  if n % 2 == 1 then\n    return l[m]\n  end\n  local q = math.floor(m)\n\
    \  local r = math.ceil(m)\n  if r - q > 1 then\n    return median(l[q..r])\n \
    \ end\n  return l[q]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa8zzuc3k.lua:26:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpa8zzuc3k.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwysf4gjv.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpwysf4gjv.lua:7:\
    \ in function </tmp/tmpwysf4gjv.lua:6>\n\t(tail call): ?\n\t/tmp/tmpwysf4gjv.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwysf4gjv.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpwysf4gjv.lua:7:\
    \ in function </tmp/tmpwysf4gjv.lua:6>\n\t(tail call): ?\n\t/tmp/tmpwysf4gjv.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n %\
    \ 2 == 0 then\n    return l[((n - 1) / 2)]:floor()\n  end\n  local mid = n / 2\n\
    \  local lower = median(l)\n  local upper = median(l)\n  if lower == nil then\n\
    \    return upper\n  elseif upper == nil then\n    return lower\n  else\n    return\
    \ math.floor(lower + (upper - lower) / 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaiyw8hnw.lua:15:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpaiyw8hnw.lua:15: in function 'median'\n\
    \t/tmp/tmpaiyw8hnw.lua:15: in function 'median'\n\t/tmp/tmpaiyw8hnw.lua:15: in\
    \ function 'median'\n\t/tmp/tmpaiyw8hnw.lua:15: in function 'median'\n\t/tmp/tmpaiyw8hnw.lua:15:\
    \ in function 'median'\n\t/tmp/tmpaiyw8hnw.lua:15: in function 'median'\n\t/tmp/tmpaiyw8hnw.lua:15:\
    \ in function 'median'\n\t/tmp/tmpaiyw8hnw.lua:15: in function 'median'\n\t/tmp/tmpaiyw8hnw.lua:15:\
    \ in function 'median'\n\t/tmp/tmpaiyw8hnw.lua:15: in function 'median'\n\t...\n\
    \nRan 1 tests in 0.410 seconds, 0 successes, 1 error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  if n\
    \ % 2 == 0 then\n    return l[((n - 1) / 2)] + median(l[((n - 1) / 2) + 1 : n])\n\
    \  else\n    return l[((n - 1) / 2)]\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpznq3ggx6.lua:12: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2.0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi51j70qm.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpi51j70qm.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2.0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi51j70qm.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpi51j70qm.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  if n\
    \ % 2 == 0 then\n    return l[math.floor(n/2)]\n  else\n    local mid = math.floor(n/2)\n\
    \    local low = median(l)\n    local high = median(l)\n    if low == nil then\n\
    \      return high\n    elseif high == nil then\n      return low\n    else\n\
    \      return (low + high) / 2\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8iu4bjdp.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp8iu4bjdp.lua:14: in function 'median'\n\
    \t/tmp/tmp8iu4bjdp.lua:15: in function 'median'\n\t/tmp/tmp8iu4bjdp.lua:15: in\
    \ function 'median'\n\t/tmp/tmp8iu4bjdp.lua:15: in function 'median'\n\t/tmp/tmp8iu4bjdp.lua:15:\
    \ in function 'median'\n\t/tmp/tmp8iu4bjdp.lua:15: in function 'median'\n\t/tmp/tmp8iu4bjdp.lua:15:\
    \ in function 'median'\n\t/tmp/tmp8iu4bjdp.lua:15: in function 'median'\n\t/tmp/tmp8iu4bjdp.lua:15:\
    \ in function 'median'\n\t/tmp/tmp8iu4bjdp.lua:15: in function 'median'\n\t...\n\
    \nRan 1 tests in 0.430 seconds, 0 successes, 1 error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  if n\
    \ % 2 == 0 then\n    return l[((n - 1) / 2)] + median(l[((n - 1) / 2) + 1 .. n])\n\
    \  else\n    return l[((n - 1) / 2)]\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmq1rwqqb.lua:21:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpmq1rwqqb.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local middle = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[middle]\n  else\n    return median(l[middle],\
    \ l[middle + 1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz4x4uu5y.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpz4x4uu5y.lua:7:\
    \ in function </tmp/tmpz4x4uu5y.lua:6>\n\t(tail call): ?\n\t/tmp/tmpz4x4uu5y.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu6kvqe7b.lua:19:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpu6kvqe7b.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n %\
    \ 2 == 0 then\n    return l[((n - 1) / 2) + 1]\n  end\n  local mid = n / 2\n \
    \ local lower = l[mid]\n  local upper = l[mid]\n  for i = mid + 1, n do\n    lower\
    \ = math.min(lower, l[i])\n    upper = math.max(upper, l[i])\n  end\n  return\
    \ lower + (upper - lower) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkbkynho.lua:18:\
    \ bad argument #1 to 'min' (number expected, got nil)\nstack traceback:\n\t/tmp/tmpdkbkynho.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpdkbkynho.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return median(l[mid], l[mid-1])\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3lhub30g.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmp3lhub30g.lua:7:\
    \ in function </tmp/tmp3lhub30g.lua:6>\n\t(tail call): ?\n\t/tmp/tmp3lhub30g.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2.0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi51j70qm.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpi51j70qm.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l - 1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7k2lksw9.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmp7k2lksw9.lua:7:\
    \ in function </tmp/tmp7k2lksw9.lua:6>\n\t(tail call): ?\n\t/tmp/tmp7k2lksw9.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  if n\
    \ % 2 == 0 then\n    return l[math.floor(n/2)]\n  else\n    return (l[math.floor(n/2)]\
    \ + l[math.floor(n/2)+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwz5br0ow.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpwz5br0ow.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n ==\
    \ 1 then\n    return l[1]\n  end\n  local mid = math.floor(n/2)\n  local median\
    \ = median(l[mid], l[mid-1])\n  if n % 2 == 0 then\n    return median\n  else\n\
    \    return median + median\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3qi02cb1.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmp3qi02cb1.lua:7:\
    \ in function 'median'\n\t/tmp/tmp3qi02cb1.lua:15: in function 'candidate'\n\t\
    /tmp/tmp3qi02cb1.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local half = math.floor(#l /\
    \ 2)\n  if half == 0 then return l[half] end\n  if #l % 2 == 0 then return median(l[half],\
    \ l[half + 1]) end\n  local median = l[half]\n  for i = half + 2, #l do\n    median\
    \ = median + l[i] / 2\n  end\n  return median\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1bxbai3.lua:21:\
    \ expected: 3, actual: 5.5\nstack traceback:\n\t/tmp/tmpm1bxbai3.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n %\
    \ 2 == 0 then\n    return l[math.floor(n/2)]\n  end\n  local mid = math.floor(n/2)\n\
    \  local lower = median(l)\n  local upper = median(l:sub(1, mid))\n  return lower\
    \ + ((upper - lower) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxess7i6y.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpxess7i6y.lua:14: in function 'median'\n\
    \t/tmp/tmpxess7i6y.lua:15: in function 'median'\n\t/tmp/tmpxess7i6y.lua:15: in\
    \ function 'median'\n\t/tmp/tmpxess7i6y.lua:15: in function 'median'\n\t/tmp/tmpxess7i6y.lua:15:\
    \ in function 'median'\n\t/tmp/tmpxess7i6y.lua:15: in function 'median'\n\t/tmp/tmpxess7i6y.lua:15:\
    \ in function 'median'\n\t/tmp/tmpxess7i6y.lua:15: in function 'median'\n\t/tmp/tmpxess7i6y.lua:15:\
    \ in function 'median'\n\t/tmp/tmpxess7i6y.lua:15: in function 'median'\n\t...\n\
    \nRan 1 tests in 0.420 seconds, 0 successes, 1 error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(n / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n \
    \   return median(l[mid], l[mid-1])\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7kuom4_5.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmp7kuom4_5.lua:7:\
    \ in function </tmp/tmp7kuom4_5.lua:6>\n\t(tail call): ?\n\t/tmp/tmp7kuom4_5.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  local\
    \ m = n / 2\n  if n % 2 == 0 then\n    return l[m]\n  else\n    return (l[m] +\
    \ l[m - 1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx8ya_t8g.lua:15:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpx8ya_t8g.lua:15: in function 'candidate'\n\t/tmp/tmpx8ya_t8g.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local\
    \ half = math.floor(n / 2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n\
    \    return (l[half] + l[half - 1]) / 2\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5e_l2ddz.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp5e_l2ddz.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n %\
    \ 2 == 0 then\n    return l[math.floor(n/2)]\n  end\n  local mid = math.floor((n+1)/2)\n\
    \  return median(l, mid-1) or median(l, mid)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnjlf4fu3.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpnjlf4fu3.lua:14: in function 'median'\n\
    \t/tmp/tmpnjlf4fu3.lua:15: in function 'median'\n\t/tmp/tmpnjlf4fu3.lua:15: in\
    \ function 'median'\n\t/tmp/tmpnjlf4fu3.lua:15: in function 'median'\n\t/tmp/tmpnjlf4fu3.lua:15:\
    \ in function 'median'\n\t/tmp/tmpnjlf4fu3.lua:15: in function 'median'\n\t/tmp/tmpnjlf4fu3.lua:15:\
    \ in function 'median'\n\t/tmp/tmpnjlf4fu3.lua:15: in function 'median'\n\t/tmp/tmpnjlf4fu3.lua:15:\
    \ in function 'median'\n\t/tmp/tmpnjlf4fu3.lua:15: in function 'median'\n\t...\n\
    \nRan 1 tests in 0.400 seconds, 0 successes, 1 error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l\
    \ - 1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp06_e_mc9.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmp06_e_mc9.lua:7:\
    \ in function </tmp/tmp06_e_mc9.lua:6>\n\t(tail call): ?\n\t/tmp/tmp06_e_mc9.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2.0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwiw9j93k.lua:19:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpwiw9j93k.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  local\
    \ half = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n \
    \   return (l[half] + l[half+1]) / 2.0\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfr7wuhad.lua:22:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpfr7wuhad.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  local\
    \ m = n / 2\n  if n % 2 == 1 then\n    return l[m]\n  else\n    return (l[m] +\
    \ l[m - 1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_rknmosh.lua:22:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmp_rknmosh.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  local median = l[mid]\n  for i = mid + 1, #l do\n    median = median\
    \ + l[i] / 2\n  end\n  return median\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzorfrc00.lua:21:\
    \ expected: 3, actual: 6.5\nstack traceback:\n\t/tmp/tmpzorfrc00.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  if n\
    \ % 2 == 1 then\n    return l[((n - 1) / 2) + 1]\n  end\n  local mid = math.floor(n\
    \ / 2)\n  local lower = median(l, 1, mid)\n  local upper = median(l, mid + 1,\
    \ n)\n  return lower + ((upper - lower) / 2)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnr1f_07_.lua:23:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpnr1f_07_.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n < 1 then return nil end\n  if n % 2 == 0 then\n\
    \    local m = n / 2\n    return l[m]\n  else\n    local m = n / 2\n    return\
    \ l[m] + (median(l[m + 1]) - l[m])\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd41h6db0.lua:7:\
    \ attempt to get length of local 'l' (a nil value)\nstack traceback:\n\t/tmp/tmpd41h6db0.lua:7:\
    \ in function 'median'\n\t/tmp/tmpd41h6db0.lua:14: in function 'candidate'\n\t\
    /tmp/tmpd41h6db0.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n %\
    \ 2 == 1 then\n    return l[math.floor(n/2)]\n  end\n  local mid = math.floor(n/2)\n\
    \  local lower = median(l[mid-1:mid])\n  local upper = median(l[mid+1:n])\n  return\
    \ lower + (upper - lower) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcci4al8b.lua:15: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  local\
    \ half = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n \
    \   return (l[half-1] + l[half]) / 2\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4n5q0s1n.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp4n5q0s1n.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  local\
    \ mid = n / 2\n  if n % 2 == 1 then\n    return l[mid]\n  else\n    return (l[mid]\
    \ + l[mid+1]) / 2.0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5o9v3j_3.lua:22:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmp5o9v3j_3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwysf4gjv.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpwysf4gjv.lua:7:\
    \ in function </tmp/tmpwysf4gjv.lua:6>\n\t(tail call): ?\n\t/tmp/tmpwysf4gjv.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l - 1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7k2lksw9.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmp7k2lksw9.lua:7:\
    \ in function </tmp/tmp7k2lksw9.lua:6>\n\t(tail call): ?\n\t/tmp/tmp7k2lksw9.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n %\
    \ 2 == 1 then\n    return l[math.floor(n/2)]\n  end\n  local mid = math.floor(n/2)\n\
    \  local lower = median(l, 1, mid)\n  local upper = median(l, mid+1, n)\n  return\
    \ lower + ((upper - lower) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8_vlzhop.lua:23:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp8_vlzhop.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid-1],\
    \ l[mid])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzczhyj_a.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzczhyj_a.lua:7:\
    \ in function </tmp/tmpzczhyj_a.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzczhyj_a.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  local\
    \ half = math.floor(n / 2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n\
    \    return (l[half - 1] + l[half]) / 2\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96weti_x.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp96weti_x.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  end\n  local mid = math.floor((n + 1) / 2)\n  if l[mid]\
    \ == nil then\n    return nil\n  end\n  if l[mid] > l[n - 1] then\n    return\
    \ median(l[mid..n])\n  else\n    return median(l[1..mid])\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmqtuf0pt.lua:20: malformed number near ''1..mid''

    '
  stdout: ''
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwysf4gjv.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpwysf4gjv.lua:7:\
    \ in function </tmp/tmpwysf4gjv.lua:6>\n\t(tail call): ?\n\t/tmp/tmpwysf4gjv.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n %\
    \ 2 == 0 then\n    return l[math.floor(n / 2)]\n  end\n  local mid = math.floor(n\
    \ / 2)\n  local lower = median(l, mid - 1)\n  local upper = median(l, mid)\n \
    \ return lower + ((n - mid) * (upper - lower)) / 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ylyfmls.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp9ylyfmls.lua:14: in function 'median'\n\
    \t/tmp/tmp9ylyfmls.lua:15: in function 'median'\n\t/tmp/tmp9ylyfmls.lua:15: in\
    \ function 'median'\n\t/tmp/tmp9ylyfmls.lua:15: in function 'median'\n\t/tmp/tmp9ylyfmls.lua:15:\
    \ in function 'median'\n\t/tmp/tmp9ylyfmls.lua:15: in function 'median'\n\t/tmp/tmp9ylyfmls.lua:15:\
    \ in function 'median'\n\t/tmp/tmp9ylyfmls.lua:15: in function 'median'\n\t/tmp/tmp9ylyfmls.lua:15:\
    \ in function 'median'\n\t/tmp/tmp9ylyfmls.lua:15: in function 'median'\n\t...\n\
    \nRan 1 tests in 0.380 seconds, 0 successes, 1 error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwysf4gjv.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpwysf4gjv.lua:7:\
    \ in function </tmp/tmpwysf4gjv.lua:6>\n\t(tail call): ?\n\t/tmp/tmpwysf4gjv.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n %\
    \ 2 == 1 then\n    return l[((n - 1) / 2) + 1]\n  end\n  local half = n / 2\n\
    \  local median1 = median(l, half)\n  local median2 = median(l, half + 1)\n  return\
    \ median1 + median2 / (2 * n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphf5s441w.lua:23:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmphf5s441w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2.0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi51j70qm.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpi51j70qm.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwysf4gjv.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpwysf4gjv.lua:7:\
    \ in function </tmp/tmpwysf4gjv.lua:6>\n\t(tail call): ?\n\t/tmp/tmpwysf4gjv.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  local\
    \ half = math.floor(n / 2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n\
    \    return median(l[half], l[half + 1])\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7wr1awl4.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmp7wr1awl4.lua:7:\
    \ in function </tmp/tmp7wr1awl4.lua:6>\n\t(tail call): ?\n\t/tmp/tmp7wr1awl4.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  local\
    \ mid = n / 2\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid]\
    \ + l[mid+1]) / 2.0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_cj7xljg.lua:15:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp_cj7xljg.lua:15: in function 'candidate'\n\t/tmp/tmp_cj7xljg.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local n = #l\n  local half =\
    \ math.floor(n / 2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n    return\
    \ (l[half - 1] + l[half]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxxj9z4ep.lua:20:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpxxj9z4ep.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l - 1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7k2lksw9.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmp7k2lksw9.lua:7:\
    \ in function </tmp/tmp7k2lksw9.lua:6>\n\t(tail call): ?\n\t/tmp/tmp7k2lksw9.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  local median = l[mid]\n  for i = mid + 1, #l do\n    median = median\
    \ + l[i] / 2\n  end\n  return median\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzorfrc00.lua:21:\
    \ expected: 3, actual: 6.5\nstack traceback:\n\t/tmp/tmpzorfrc00.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n < 1 then return nil end\n  local half = math.floor(n\
    \ / 2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n    return median(l[half],\
    \ l[half + 1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa3pores0.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpa3pores0.lua:7:\
    \ in function </tmp/tmpa3pores0.lua:6>\n\t(tail call): ?\n\t/tmp/tmpa3pores0.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(n / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n \
    \   return (l[mid] + l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpltlxqnxf.lua:22:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpltlxqnxf.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n < 1 then return nil end\n  local half = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[half]\n  else\n    return median(l[half],\
    \ l[half+1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk8le5kmt.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpk8le5kmt.lua:7:\
    \ in function </tmp/tmpk8le5kmt.lua:6>\n\t(tail call): ?\n\t/tmp/tmpk8le5kmt.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local\
    \ half = math.floor(n / 2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n\
    \    return (l[half] + l[half - 1]) / 2\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5e_l2ddz.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp5e_l2ddz.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n < 1 then return nil end\n  local m = math.floor(n\
    \ / 2)\n  if n % 2 == 0 then\n    return l[m]\n  else\n    return median(l[m -\
    \ 1], l[m])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ka2kupe.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmp1ka2kupe.lua:7:\
    \ in function </tmp/tmp1ka2kupe.lua:6>\n\t(tail call): ?\n\t/tmp/tmp1ka2kupe.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwysf4gjv.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpwysf4gjv.lua:7:\
    \ in function </tmp/tmpwysf4gjv.lua:6>\n\t(tail call): ?\n\t/tmp/tmpwysf4gjv.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  local median = l[mid]\n  for i = mid + 1, #l do\n    median = median\
    \ + l[i] / 2\n  end\n  return median\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzorfrc00.lua:21:\
    \ expected: 3, actual: 6.5\nstack traceback:\n\t/tmp/tmpzorfrc00.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local middle = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[middle]\n  else\n    return median(l[middle],\
    \ l[middle + 1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz4x4uu5y.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpz4x4uu5y.lua:7:\
    \ in function </tmp/tmpz4x4uu5y.lua:6>\n\t(tail call): ?\n\t/tmp/tmpz4x4uu5y.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwysf4gjv.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpwysf4gjv.lua:7:\
    \ in function </tmp/tmpwysf4gjv.lua:6>\n\t(tail call): ?\n\t/tmp/tmpwysf4gjv.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwysf4gjv.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpwysf4gjv.lua:7:\
    \ in function </tmp/tmpwysf4gjv.lua:6>\n\t(tail call): ?\n\t/tmp/tmpwysf4gjv.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu6kvqe7b.lua:19:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpu6kvqe7b.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  local\
    \ half = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n \
    \   return median(l[half], l[half+1])\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoovpvna_.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpoovpvna_.lua:7:\
    \ in function </tmp/tmpoovpvna_.lua:6>\n\t(tail call): ?\n\t/tmp/tmpoovpvna_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local n = #l\n  local half =\
    \ math.floor(n/2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n    return\
    \ (l[half-1] + l[half]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4r51nnc.lua:20:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp_4r51nnc.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  if n\
    \ % 2 == 1 then\n    return l[n / 2]\n  end\n  local mid = n / 2\n  local lower\
    \ = median(l, 1, mid)\n  local upper = median(l, mid + 1, n)\n  return lower +\
    \ (upper - lower) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbmt5cacp.lua:23:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpbmt5cacp.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  if n\
    \ % 2 == 0 then\n    return l[((n - 1) / 2) + 1]\n  else\n    return (l[((n -\
    \ 1) / 2)] + l[((n - 1) / 2) - 1]) / 2\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm92xl9az.lua:21:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpm92xl9az.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid-1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyxuab3ji.lua:21:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpyxuab3ji.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  local median = l[mid]\n  for i = mid + 1, #l do\n    median = median\
    \ + l[i] / 2\n  end\n  return median\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzorfrc00.lua:21:\
    \ expected: 3, actual: 6.5\nstack traceback:\n\t/tmp/tmpzorfrc00.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n %\
    \ 2 == 0 then\n    return l[math.floor(n/2)]\n  end\n  local half = math.floor(n/2)\n\
    \  local median = l[half]\n  for i = half+1, n do\n    median = median + l[i]\n\
    \  end\n  return median\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprd3spqst.lua:25:\
    \ expected: 3, actual: 12\nstack traceback:\n\t/tmp/tmprd3spqst.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu6kvqe7b.lua:19:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpu6kvqe7b.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l - 1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7k2lksw9.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmp7k2lksw9.lua:7:\
    \ in function </tmp/tmp7k2lksw9.lua:6>\n\t(tail call): ?\n\t/tmp/tmp7k2lksw9.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local\
    \ half = math.floor(n / 2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n\
    \    return (l[half - 1] + l[half]) / 2\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj825pg59.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpj825pg59.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwysf4gjv.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpwysf4gjv.lua:7:\
    \ in function </tmp/tmpwysf4gjv.lua:6>\n\t(tail call): ?\n\t/tmp/tmpwysf4gjv.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  local\
    \ mid = n / 2\n  if n % 2 == 1 then\n    return l[mid]\n  end\n  local lower =\
    \ median(l, 1, mid)\n  local upper = median(l, mid + 1, n)\n  return math.floor(lower\
    \ + 0.5 * (upper - lower))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0cyj95n5.lua:23:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmp0cyj95n5.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwysf4gjv.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpwysf4gjv.lua:7:\
    \ in function </tmp/tmpwysf4gjv.lua:6>\n\t(tail call): ?\n\t/tmp/tmpwysf4gjv.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwysf4gjv.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpwysf4gjv.lua:7:\
    \ in function </tmp/tmpwysf4gjv.lua:6>\n\t(tail call): ?\n\t/tmp/tmpwysf4gjv.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  local\
    \ m = n / 2\n  if n % 2 == 1 then\n    return l[m]\n  end\n  local i1, i2 = 0,\
    \ n - 1\n  while i1 <= i2 do\n    local mid = math.floor((i1 + i2) / 2)\n    if\
    \ l[mid] > l[mid + 1] then\n      i2 = mid - 1\n    else\n      i1 = mid + 1\n\
    \    end\n  end\n  return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnngcwfk9.lua:30:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpnngcwfk9.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n < 1 then\n    return nil\n  end\n  if n %\
    \ 2 == 1 then\n    return l[math.floor(n/2)]\n  end\n  local half = math.floor(n/2)\n\
    \  local median = l[half]\n  for i = half+1, n do\n    median = median + l[i]/2\n\
    \  end\n  return median\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcira783r.lua:25:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpcira783r.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2.0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi51j70qm.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpi51j70qm.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  if n\
    \ % 2 == 1 then\n    return l[((n - 1) / 2) + 1]\n  end\n  local half = n / 2\n\
    \  local median1 = median(l[((half - 1) / 2)])\n  local median2 = median(l[((half\
    \ + 1) / 2)])\n  return median1 + median2 / (2 * n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzxau297.lua:23:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmplzxau297.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local middle = math.floor(#l\
    \ / 2)\n  if middle == 0 then\n    return l[1]\n  else\n    return median(l[middle],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcaoieyup.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpcaoieyup.lua:7:\
    \ in function </tmp/tmpcaoieyup.lua:6>\n\t(tail call): ?\n\t/tmp/tmpcaoieyup.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n < 1 then return nil end\n  local half = math.floor(n\
    \ / 2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n    return median(l[half],\
    \ l[half + 1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa3pores0.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpa3pores0.lua:7:\
    \ in function </tmp/tmpa3pores0.lua:6>\n\t(tail call): ?\n\t/tmp/tmpa3pores0.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n ==\
    \ 1 then\n    return l[1]\n  end\n  local mid = math.floor((n - 1) / 2)\n  if\
    \ l[mid] <= l[mid+1] then\n    return median(l[mid], l[mid+1])\n  else\n    return\
    \ median(l[mid], l[mid+1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2okhbf_x.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmp2okhbf_x.lua:7:\
    \ in function </tmp/tmp2okhbf_x.lua:6>\n\t(tail call): ?\n\t/tmp/tmp2okhbf_x.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local half = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[half]\n  else\n    return (l[half -\
    \ 1] + l[half]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx137v_.lua:19:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpsbx137v_.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local\
    \ half = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n \
    \   return (l[half] + l[half+1]) / 2.0\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa35m_mga.lua:22:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpa35m_mga.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwysf4gjv.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpwysf4gjv.lua:7:\
    \ in function </tmp/tmpwysf4gjv.lua:6>\n\t(tail call): ?\n\t/tmp/tmpwysf4gjv.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n %\
    \ 2 == 1 then\n    return l[math.floor(n/2)]\n  end\n  local mid = math.floor(n/2)\n\
    \  local median = median(l, mid)\n  local lower = median\n  local upper = median\n\
    \  for i = mid + 1, n do\n    if l[i] < lower then\n      lower = l[i]\n    end\n\
    \    if l[i] > upper then\n      upper = l[i]\n    end\n  end\n  return lower\
    \ + math.fabs((upper - lower) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6gzgyhv1.lua:32:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp6gzgyhv1.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n %\
    \ 2 == 1 then\n    return l[((n - 1) / 2) + 1]\n  end\n  local half = n / 2\n\
    \  local median1 = median(l[((half - 1) / 2)..half])\n  local median2 = median(l[half..((half\
    \ + 1) / 2)])\n  return median1 + median2 / (2 * n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpideyh8zk.lua:23:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpideyh8zk.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local middle = math.floor(#l\
    \ / 2)\n  local median = l[middle]\n  for i = middle + 1, #l do\n    median =\
    \ median + l[i] / 2\n  end\n  return median\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ssxo16w.lua:21:\
    \ expected: 3, actual: 6.5\nstack traceback:\n\t/tmp/tmp5ssxo16w.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  local median = l[mid]\n  for i = mid + 1, #l do\n    median = median\
    \ + l[i] / 2\n  end\n  return median\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzorfrc00.lua:21:\
    \ expected: 3, actual: 6.5\nstack traceback:\n\t/tmp/tmpzorfrc00.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return median(l[mid-1], l[mid])\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw5r7kyin.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpw5r7kyin.lua:7:\
    \ in function </tmp/tmpw5r7kyin.lua:6>\n\t(tail call): ?\n\t/tmp/tmpw5r7kyin.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  if n\
    \ % 2 == 1 then\n    return l[n / 2]\n  end\n  local mid = n / 2\n  local lower\
    \ = median(l, 1, mid)\n  local upper = median(l, mid + 1, n)\n  return lower +\
    \ (upper - lower) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbmt5cacp.lua:23:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpbmt5cacp.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  local\
    \ m = n / 2\n  if n % 2 == 0 then\n    return l[m]\n  else\n    return l[m] +\
    \ median(l[m + 1] - l[m])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnqtxhl3m.lua:15:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpnqtxhl3m.lua:15: in function 'candidate'\n\t/tmp/tmpnqtxhl3m.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  local\
    \ half = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n \
    \   return (l[half-1] + l[half]) / 2\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4n5q0s1n.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp4n5q0s1n.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  local\
    \ half = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n \
    \   return (l[half] + l[half+1]) / 2.0\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfr7wuhad.lua:22:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpfr7wuhad.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  local\
    \ half = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n \
    \   return (l[half] + l[half+1]) / 2.0\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfr7wuhad.lua:22:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpfr7wuhad.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  local\
    \ m = n / 2\n  if n % 2 == 1 then\n    return l[m]\n  end\n  local l1 = l\n  local\
    \ l2 = l\n  l1[m], l2[m] = l2[m], l1[m]\n  local m1 = median(l1)\n  local m2 =\
    \ median(l2)\n  if m1 == nil or m2 == nil then\n    return nil\n  end\n  return\
    \ (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy8m6hovz.lua:29:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpy8m6hovz.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  local median = l[mid]\n  for i = mid + 1, #l do\n    median = median\
    \ + l[i] / 2\n  end\n  return median\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzorfrc00.lua:21:\
    \ expected: 3, actual: 6.5\nstack traceback:\n\t/tmp/tmpzorfrc00.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsqj4zo.lua:7:\
    \ attempt to get length of local 'l' (a number value)\nstack traceback:\n\t/tmp/tmpzgsqj4zo.lua:7:\
    \ in function </tmp/tmpzgsqj4zo.lua:6>\n\t(tail call): ?\n\t/tmp/tmpzgsqj4zo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zl1adw.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpo4zl1adw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2.0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi51j70qm.lua:21:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpi51j70qm.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  local median = l[mid]\n  for i = mid + 1, #l do\n    median = median\
    \ + l[i] / 2\n  end\n  return median\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzorfrc00.lua:21:\
    \ expected: 3, actual: 6.5\nstack traceback:\n\t/tmp/tmpzorfrc00.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  if n\
    \ % 2 == 1 then\n    return l[((n - 1) / 2) + 1]\n  end\n  local half = n / 2\n\
    \  local median1 = median(l[((half - 1) / 2)])\n  local median2 = median(l[((half\
    \ + 1) / 2)])\n  return median1 + median2 / (2 * n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzxau297.lua:23:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmplzxau297.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu6kvqe7b.lua:19:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpu6kvqe7b.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  if n\
    \ % 2 == 1 then\n    return l[math.floor(n/2)]\n  end\n  local mid = math.floor(n/2)\n\
    \  local median = median(l[mid], l[mid-1])\n  return median\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36a52jxt.lua:22:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp36a52jxt.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750156
