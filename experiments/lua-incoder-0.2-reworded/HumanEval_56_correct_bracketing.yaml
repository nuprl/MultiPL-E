name: HumanEval_56_correct_bracketing
language: lua
prompt: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
  \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
  -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
  -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
  \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
  \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
  \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
  \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
  \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
  \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local opening = brackets:find('<')\n  local closing = brackets:find('>')\n\
    \  local opening_brackets = brackets:sub(1, opening - 1)\n  local closing_brackets\
    \ = brackets:sub(closing + 1)\n  local opening_brackets_count = opening_brackets:count('<')\n\
    \  local closing_brackets_count = closing_brackets:count('>')\n  return opening_brackets_count\
    \ == closing_brackets_count\nend", "  local opening_brackets = brackets:gsub('%[(%+)(%-)]+',\
    \ function(x)\n    return x:match('%[<>]')\n  end)\n  local closing_brackets =\
    \ brackets:gsub('%[<>](%+)(%-)', function(x)\n    return x:match('%[<>]')\n  end)\n\
    \  return opening_brackets:len() == closing_brackets:len() and\n    opening_brackets:all()\
    \ ~= closing_brackets:all()\nend", "  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  for _,opening_bracket in ipairs(opening_brackets) do\n    if not closing_brackets[opening_bracket]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  local open_brackets\
    \ = brackets:gsub('(<)', ''):gsub('(>)', '')\n  local close_brackets = brackets:gsub('(<)',\
    \ ''):gsub('(>)', '')\n  return open_brackets:len() == close_brackets:len() and\n\
    \         open_brackets:gsub('(<)', ''):gsub('(>)', '') == close_brackets\nend",
  "  local opening = brackets:gsub('%<', '(')\n  local closing = brackets:gsub('%>',\
    \ ')')\n  return opening:len() == closing:len()\nend", "  local opening_brackets\
    \ = brackets:gsub('%b()', '%s*%b()')\n  local closing_brackets = brackets:gsub('%b()',\
    \ '%s*%b()')\n  local opening_brackets_count = opening_brackets:gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%", "  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return\
    \ opening_brackets:len() == closing_brackets:len() and opening_brackets:all(function(x)\n\
    \    return closing_brackets:find(x) == nil\n  end)\nend", "  local opening_brackets\
    \ = brackets:gsub('%[(%+)(%-)]', function(x)\n    return x:sub(1, 1)\n  end)\n\
    \  local closing_brackets = brackets:gsub('%[(%+)(%-)]', function(x)\n    return\
    \ x:sub(2, 2)\n  end)\n  return opening_brackets == closing_brackets\nend", " \
    \ local opening_brackets = brackets:gsub('%b()', '%s*%b()')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%s*%b()')\n  return opening_brackets:sub(1, #opening_brackets)\
    \ == closing_brackets\nend", "  local opening_brackets = brackets:gsub('%b()',\
    \ '%s*%b')\n  local closing_brackets = brackets:gsub('%b()', '%s*%b()')\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend", "  local opening_brackets\
    \ = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n\
    \  return opening_brackets:len() == closing_brackets:len() and opening_brackets:sub(1,1)\
    \ == closing_brackets:sub(1,1)\nend", "  local opening_brackets = brackets:gsub('(<%%(%+%)%>)',\
    \ '')\n  local closing_brackets = brackets:gsub('(%%(%+%)%>)', '')\n  local opening_brackets_count\
    \ = opening_brackets:gsub('(%+%)', '')\n  local closing_brackets_count = closing_brackets:gsub('(%+%)',\
    \ '')\n  return opening_brackets_count == closing_brackets_count\nend", "   for\
    \ i = 1, #brackets do\n      if brackets[i] ~= '<' then\n         return false\n\
    \      end\n      local opening = brackets[i + 1]\n      local closing = brackets[i\
    \ + 2]\n      if opening ~= closing then\n         return false\n      end\n \
    \     i = i + 3\n   end\n   return true\nend", "  local opening = brackets:gsub('(<%%(%+)(%>%+))',\
    \ function(x)\n    return x:sub(1, 1)\n  end)\n  local closing = brackets:gsub('(<%(%+)(%+%>%+))',\
    \ function(x)\n    return x:sub(2, 2)\n  end)\n  return opening:len() == closing:len()\n\
    end", "  local opening_brackets = brackets:gsub('(<)', '%s*%L+%L+'):gsub('(>)',\
    \ '%L+%L+%s*'):gsub('(<%L+)(%L+)', '%%%1%%%2%%'):gsub('(%L+%L+%L+)', '%%%1%%%2%%')\n\
    \  local closing_brackets = brackets:gsub('(<)', '%s*%L+%L+'):gsub('(>)', '%L+%L+%s*'):gsub('(<%L+)(%L+)',\
    \ '%%%1%%%2%%'):gsub('(%L+%L+%L+)', '%%%1%%%2%%')\n  return opening_brackets:gsub('(%L+%L+)',\
    \ '%%%1%%%2%%') == closing_brackets\nend", "  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n \
    \ return opening_brackets:len() == closing_brackets:len()\nend", "  local opening_brackets\
    \ = {}\n  local closing_brackets = {}\n  for _, bracket in ipairs(brackets) do\n\
    \    if bracket:sub(1, 1) == '<' then\n      table.insert(opening_brackets, bracket)\n\
    \    elseif bracket:sub(1, 1) == '>' then\n      table.insert(closing_brackets,\
    \ bracket)\n    end\n  end\n  return #opening_brackets == #closing_brackets\n\
    end", "  local opening_brackets = brackets:gsub('(<%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%",
  "  local opening_brackets = brackets:gsub('(<)', '%s*%L+%L+')\n  local closing_brackets\
    \ = brackets:gsub('(>)', '%s*%L+%L+')\n  return opening_brackets:gsub('%L+%L+',\
    \ '') ~= closing_brackets:gsub('%L+%L+', '')\nend", "  local opening = brackets:gsub('(<)','%1')\n\
    \  local closing = brackets:gsub('(>)','%1')\n  return opening:len() == closing:len()\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
