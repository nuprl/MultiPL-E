language: lua
name: HumanEval_31_is_prime
results:
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even.\n\
    \  if n % 3 == 0 then\n    return false\n  end\n  -- Check odd and even.\n  if\
    \ n % 5 == 0 then\n    return false\n  end\n  -- Check odd and even.\n  if n %\
    \ 7 == 0 then\n    return false\n  end\n  -- Check odd and even.\n  if n % 11\
    \ == 0 then\n    return false\n  end\n  -- Check odd and even.\n  if n % 13 ==\
    \ 0 then\n    return false\n  end\n  -- Check odd and even.\n  if n % 17 == 0\
    \ then\n    return false\n  end\n  -- Check odd and even.\n  if n % 19 == 0 then\n\
    \    return false\n  end\n  -- Check odd and even.\n  if n % 23 == 0 then\n  \
    \  return false\n  end\n  -- Check odd and even.\n  if n % 29 == 0 then\n    return\
    \ false\n  end\n  -- Check odd and even.\n  if n % 31 == 0 then\n    return false\n\
    \  end\n  -- Check odd and even.\n  if n % 37 == 0 then\n    return false\n  end\n\
    \  -- Check odd and even.\n  if n % 41 == 0 then\n    return false\n  end\n  --\
    \ Check odd and even.\n  if n % 43 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even.\n  if n % 47 == 0 then\n    return false\n  end\n  -- Check odd\
    \ and even.\n  if n % 53 == 0 then\n    return false\n  end\n  -- Check odd and\
    \ even.\n  if n % 59 == 0 then\n    return false\n  end\n  -- Check odd and even.\n\
    \  if n % 61 == 0 then\n    return false\n  end\n  -- Check odd and even.\n  if\
    \ n % 67 == 0 then\n    return false\n  end\n  -- Check odd and even.\n  if n\
    \ % 71 == 0 then\n    return false\n  end\n  -- Check odd and even.\n  if n %\
    \ 73 == 0 then\n    return false\n  end\n  -- Check odd and even.\n  if n % 79\
    \ == 0 then\n    return false\n  end\n  -- Check odd and even.\n  if n % 83 ==\
    \ 0 then\n    return false\n  end\n  -- Check odd and even.\n  if n % 89 == 0\
    \ then\n    return false\n  end\n  -- Check odd and even.\n  if n % 97 == 0 then\n\
    \    return false\n  end\n  -- \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5u_p9wou.lua:142: ''end'' expected (to close ''function''
    at line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 115 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 143 == 0 then return false end\n  if n % 149 == 0 then return\
    \ false end\n  if n % 153 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 165 == 0 then return\
    \ false end\n  if n % 169 == 0 then return false end\n  if n % 173 == 0 then return\
    \ false end\n  if n % 177 == 0 then return false end\n  if n % 181 == 0 then return\
    \ false end\n  if n % 185 == 0 then return false end\n  if n % 189 == 0 then return\
    \ false end\n  if n % 193 == 0 then return false end\n  if n % 197 == 0 then return\
    \ false end\n  if n % 201 == 0 then return false end\n  if n % 205 == 0 then return\
    \ false \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptup_w886.lua:69: ''end'' expected (to close ''if'' at line
    68) near ''lu''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- The prime test is taken from http://en.wikipedia.org/wiki/Primality_test\n\
    \  -- The algorithm used is slightly modified to take into account that the\n\
    \  -- prime number must be odd.\n  -- The algorithm is also slightly modified\
    \ to take into account that the\n  -- number must be odd.\n  -- The algorithm\
    \ is also slightly modified to take into account that the\n  -- number must be\
    \ odd.\n  -- The algorithm is also slightly modified to take into account that\
    \ the\n  -- number must be odd.\n  -- The algorithm is also slightly modified\
    \ to take into account that the\n  -- number must be odd.\n  -- The algorithm\
    \ is also slightly modified to take into account that the\n  -- number must be\
    \ odd.\n  -- The algorithm is also slightly modified to take into account that\
    \ the\n  -- number must be odd.\n  -- The algorithm is also slightly modified\
    \ to take into account that the\n  -- number must be odd.\n  -- The algorithm\
    \ is also slightly modified to take into account that the\n  -- number must be\
    \ odd.\n  -- The algorithm is also slightly modified to take into account that\
    \ the\n  -- number must be odd.\n  -- The algorithm is also slightly modified\
    \ to take into account that the\n  -- number must be odd.\n  -- The algorithm\
    \ is also slightly modified to take into account that the\n  -- number must be\
    \ odd.\n  -- The algorithm is also slightly modified to take into account that\
    \ the\n  -- number must be odd.\n  -- The algorithm is also slightly modified\
    \ to take into account that the\n  -- number must be odd.\n  -- The algorithm\
    \ is also slightly modified to take into account that the\n  -- number must be\
    \ odd.\n  -- The algorithm is also slightly modified to take into account that\
    \ the\n  -- number must be odd.\n  -- The algorithm is also slightly modified\
    \ to take into account that the\n  -- number must be odd.\n  -- The algorithm\
    \ is also slightly modified to take into account that the\n  -- number must be\
    \ odd.\n  -- The algorithm is also slightly modified to take into account that\
    \ the\n  -- number must be odd.\n  -- The algorithm is also slightly modified\
    \ to take into account that the\n  -- number must be odd.\n  -- The algorithm\
    \ is also slightly modified to take into account that the\n  -- number must be\
    \ odd.\n  -- The algorithm is also slightly modified to take into account that\
    \ the\n  -- number must be odd.\n  -- The algorithm is also slightly modified\
    \ to take into account \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiyozp679.lua:82: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- The prime test is based on the sieve of Eratosthenes. \n  -- The sieve consists\
    \ of two arrays: one containing the odd numbers, \n  -- one containing the even\
    \ numbers. Each number is then marked \n  -- true or false depending on whether\
    \ it is odd or even.\n  -- >>> is_prime(6)\n  -- true\n  -- >>> is_prime(10)\n\
    \  -- true\n  -- >>> is_prime(11)\n  -- false\n  -- >>> is_prime(13)\n  -- true\n\
    \  -- >>> is_prime(14)\n  -- false\n  -- >>> is_prime(15)\n  -- false\n  -- >>>\
    \ is_prime(16)\n  -- true\n  -- >>> is_prime(17)\n  -- false\n  -- >>> is_prime(18)\n\
    \  -- true\n  -- >>> is_prime(19)\n  -- false\n  -- >>> is_prime(20)\n  -- true\n\
    \  -- >>> is_prime(21)\n  -- false\n  -- >>> is_prime(22)\n  -- true\n  -- >>>\
    \ is_prime(23)\n  -- false\n  -- >>> is_prime(24)\n  -- true\n  -- >>> is_prime(25)\n\
    \  -- false\n  -- >>> is_prime(26)\n  -- true\n  -- >>> is_prime(27)\n  -- false\n\
    \  -- >>> is_prime(28)\n  -- true\n  -- >>> is_prime(29)\n  -- false\n  -- >>>\
    \ is_prime(30)\n  -- true\n  -- >>> is_prime(31)\n  -- false\n  -- >>> is_prime(32)\n\
    \  -- true\n  -- >>> is_prime(33)\n  -- false\n  -- >>> is_prime(34)\n  -- true\n\
    \  -- >>> is_prime(35)\n  -- false\n  -- >>> is_prime(36)\n  -- true\n  -- >>>\
    \ is_prime(37)\n  -- false\n  -- >>> is_prime(38)\n  -- true\n  -- >>> is_prime(39)\n\
    \  -- false\n  -- >>> is_prime(40)\n  -- true\n  -- >>> is_prime(41)\n  -- false\n\
    \  -- >>> is_prime(42)\n  -- true\n  -- >>> is_prime(43)\n  -- false\n  -- >>>\
    \ is_prime(44)\n  -- true\n  -- >>> is_prime(45)\n  -- false\n  -- >>> is_prime(46)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgtr80zzr.lua:113: ''end'' expected (to close ''function''
    at line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local m = math.floor(n/2)\n  for i = 2, m do\n\
    \    if n % i == 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 1 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  local\
    \ m = math.floor(math.sqrt(n))\n  for i = 1, m do\n    if n % i == 0 then return\
    \ false end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvdgl1kcw.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvdgl1kcw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case\n  if n < 2 then return false end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzskr_sn2.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 3 then return true end\n  if n == 5\
    \ then return true end\n  if n == 7 then return true end\n  if n == 11 then return\
    \ true end\n  if n == 13 then return true end\n  if n == 17 then return true end\n\
    \  if n == 19 then return true end\n  if n == 23 then return true end\n  if n\
    \ == 29 then return true end\n  if n == 31 then return true end\n  if n == 37\
    \ then return true end\n  if n == 43 then return true end\n  if n == 47 then return\
    \ true end\n  if n == 59 then return true end\n  if n == 61 then return true end\n\
    \  if n == 67 then return true end\n  if n == 73 then return true end\n  if n\
    \ == 79 then return true end\n  if n == 87 then return true end\n  if n == 97\
    \ then return true end\n  if n == 113 then return true end\n  if n == 131 then\
    \ return true end\n  if n == 139 then return true end\n  if n == 149 then return\
    \ true end\n  if n == 151 then return true end\n  if n == 157 then return true\
    \ end\n  if n == 163 then return true end\n  if n == 171 then return true end\n\
    \  if n == 179 then return true end\n  if n == 181 then return true end\n  if\
    \ n == 191 then return true end\n  if n == 193 then return true end\n  if n ==\
    \ 197 then return true end\n  if n == 199 then return true end\n  if n == 211\
    \ then return true end\n  if n == 223 then return true end\n  if n == 227 then\
    \ return true end\n  if n == 23 then return true end\n  if n == 251 then return\
    \ true end\n  if n == 253 then return true end\n  if n == 257 then return true\
    \ end\n  if n == 263 then return true end\n  if n == 265 then return true end\n\
    \  if n == 269 then return true end\n  if n == 273 then return true end\n  if\
    \ n == 277 then return true end\n  if n == 281 then return true end\n  if n ==\
    \ 283 then return true end\n  if n == 293 then return true end\n  if n == 303\
    \ then return true end\n  if n == 307 then return true end\n  if \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc9ncngmz.lua:76: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case: n is 0 or 1.\n  if n == 0 or n == 1 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy95esggm.lua:40: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case: n is 0 or 1.\n  if n == 0 or n == 1 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy95esggm.lua:40: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 1 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  local\
    \ i\n  for i = 5, n do\n    if n % i == 0 then return false end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqln10lht.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqln10lht.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return true end\n  if n == 2\
    \ then return false end\n  if n == 3 then return true end\n  if n % 10 == 1 then\
    \ return false end\n  if n % 11 == 1 then return false end\n  if n % 13 == 1 then\
    \ return false end\n  if n % 17 == 1 then return false end\n  if n % 19 == 1 then\
    \ return false end\n  if n % 23 == 1 then return false end\n  if n % 29 == 1 then\
    \ return false end\n  if n % 31 == 1 then return false end\n  if n % 37 == 1 then\
    \ return false end\n  if n % 41 == 1 then return false end\n  if n % 43 == 1 then\
    \ return false end\n  if n % 47 == 1 then return false end\n  if n % 53 == 1 then\
    \ return false end\n  if n % 59 == 1 then return false end\n  if n % 63 ~= 1 then\
    \ return false end\n  if n % 69 ~= 1 then return false end\n  if n % 71 ~= 1 then\
    \ return false end\n  if n % 73 ~= 1 then return false end\n  if n % 79 ~= 1 then\
    \ return false end\n  if n % 83 ~= 1 then return false end\n  if n % 89 ~= 1 then\
    \ return false end\n  if n % 97 ~= 1 then return false end\n  if n % 101 ~= 1\
    \ then return false end\n  if n % 103 ~= 1 then return false end\n  if n % 107\
    \ ~= 1 then return false end\n  if n % 109 ~= 1 then return false end\n  if n\
    \ % 113 ~= 1 then return false end\n  if n % 117 ~= 1 then return false end\n\
    \  if n % 121 ~= 1 then return false end\n  if n % 127 ~= 1 then return false\
    \ end\n  if n % 131 ~= 1 then return false end\n  if n % 137 ~= 1 then return\
    \ false end\n  if n % 143 ~= 1 then return false end\n  if n % 149 ~= 1 then return\
    \ false end\n  if n % 151 ~= 1 then return false end\n  if n % 157 ~= 1 then return\
    \ false end\n  if n % 163 ~= 1 then return false end\n  if n % 169 ~= 1 then return\
    \ false end\n  if n % 171 ~= 1 then return false end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgk71i8gb.lua:85: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Prime numbers are greater than 1.\n  if n < 1 then return false end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvxkqsld5.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000var2.txt\n  -- http://primes.utm.edu/lists/small/10000ln2.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000ln10var2.txt\n  -- http://primes.utm.edu/lists/small/10000ln10ln2.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000ln10ln10var2.txt\n  -- http://primes.utm.edu/lists/small/10000ln10ln10ln2.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000ln10ln10ln10var2.txt\n  -- http://primes.utm.edu/lists/small/10000ln10ln10ln10ln2.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000ln10ln10ln10ln10var2.txt\n  -- http://primes.utm.edu/lists/small/10000ln10ln10ln10ln10ln2.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000ln10ln10ln10ln10ln10var2.txt\n  --\
    \ http://primes.utm.edu/lists/small/10000ln10ln10ln10ln10ln10ln2.txt\n  -- http://primes.utm.edu/lists/small/10000ln10ln10ln10ln10ln10ln10var2.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000ln10ln10ln10ln10ln10ln10ln2.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000ln10ln10ln10ln10ln10ln10ln10var2.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000ln10ln10ln10ln10ln10ln10ln10ln2.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000ln10ln10ln10ln10ln10ln10ln10ln10var2.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000ln10ln10ln10ln10ln10ln10ln10ln10ln2.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000ln10ln10ln10ln10ln10ln10ln10ln10ln10var2.txt\n\
    \  -- http://\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp52_m_8i7.lua:58: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- If n is even, then\
    \ (n-1)/2 is odd, so only need to check odd numbers.\n  if n % 2 == 1 then\n \
    \   return not is_prime((n - 1) / 2)\n  end\n  -- If n is odd, then (n-1)/2 is\
    \ even, so only need to check even numbers.\n  return not is_prime((n - 1) / 2)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ixkfdbv.lua:44:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2ixkfdbv.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers\n  if n % 3 == 0 then\n    return false\n  end\n  if n % 5 == 0 then\n\
    \    return false\n  end\n  -- Check divisibility by primes up to sqrt(n)\n  for\
    \ i = 5, math.sqrt(n), 2 do\n    if n % i == 0 then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq6hbxo_q.lua:52:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpq6hbxo_q.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Trial division algorithm\
    \ from Wikipedia.\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division_.282.29\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.29\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.30\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.31\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.32\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.33\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.34\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.35\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.36\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.37\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.38\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.39\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.40\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.41\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.42\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.43\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.44\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.45\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.46\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.47\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.48\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.49\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.50\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.51\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.52\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.53\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.54\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.55\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.56\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.57\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.58\n\
    \  -- \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpksxcz2bz.lua:78: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even.\n\
    \  for i = 3, math.floor(n/2), 2 do\n    if n % i == 0 then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that a prime number greater than 2\n  --\
    \ can be written as the sum of the only even primes less than or equal\n  -- to,\
    \ and including one and the only odd prime greater than or equal to the\n  --\
    \ square root of the number. Thus, the number itself can be written as\n  -- 2n\
    \ \u2212 1. Thus, any prime number greater than 2 is in the form 2n \u2212 1.\n\
    \  -- Source: Wikipedia.\n  -- >>> is_prime(6)\n  -- false\n  -- >>> is_prime(101)\n\
    \  -- true\n  -- >>> is_prime(11)\n  -- true\n  -- >>> is_prime(13441)\n  -- true\n\
    \  -- >>> is_prime(61)\n  -- true\n  -- >>> is_prime(4)\n  -- false\n  -- >>>\
    \ is_prime(1)\n  -- false\n  -- >>> is_prime(13)\n  -- true\n  -- >>> is_prime(1344)\n\
    \  -- false\n  -- >>> is_prime(13442)\n  -- false\n  -- >>> is_prime(13443)\n\
    \  -- false\n  -- >>> is_prime(13444)\n  -- false\n  -- >>> is_prime(13445)\n\
    \  -- false\n  -- >>> is_prime(13446)\n  -- false\n  -- >>> is_prime(13447)\n\
    \  -- false\n  -- >>> is_prime(13448)\n  -- false\n  -- >>> is_prime(13449)\n\
    \  -- false\n  -- >>> is_prime(134410)\n  -- false\n  -- >>> is_prime(134411)\n\
    \  -- false\n  -- >>> is_prime(134412)\n  -- false\n  -- >>> is_prime(134413)\n\
    \  -- false\n  -- >>> is_prime(134414)\n  -- false\n  -- >>> is_prime(134415)\n\
    \  -- false\n  -- >>> is_prime(134416)\n  -- false\n  -- >>> is_prime(134417)\n\
    \  -- false\n  -- >>> is_prime(134418)\n  -- false\n  -- >>> is_prime(134419)\n\
    \  -- false\n  -- >>> is_prime(134420)\n  -- false\n  -- >>> is_prime(134421)\n\
    \  -- false\n  -- >>> is_prime(134422)\n  -- false\n  -- >>> is_prime(134423)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjtjb2y1y.lua:103: ''end'' expected (to close ''function''
    at line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  for i = 4, n - 1, 1, -1 do\n    if n % i ==\
    \ 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkmsdd0w0.lua:20: ''do'' expected near '',''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local m = math.floor(math.sqrt(n))\n\
    \  local i = 2\n  while i <= m do\n    if n % i == 0 then\n      return false\n\
    \    end\n    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_314dcub.lua:50:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_314dcub.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n ==\
    \ 1 then return false end\n  if n % 2 == 0 then return false end\n  if n % 3 ==\
    \ 0 then return false end\n  if n % 5 == 0 then return false end\n  if n % 7 ==\
    \ 0 then return false end\n  if n % 11 == 0 then return false end\n  if n % 13\
    \ == 0 then return false end\n  if n % 17 == 0 then return false end\n  if n %\
    \ 19 == 0 then return false end\n  if n % 23 == 0 then return false end\n  if\
    \ n % 29 == 0 then return false end\n  if n % 31 == 0 then return false end\n\
    \  if n % 37 == 0 then return false end\n  if n % 41 == 0 then return false end\n\
    \  if n % 43 == 0 then return false end\n  if n % 47 == 0 then return false end\n\
    \  if n % 53 == 0 then return false end\n  if n % 59 == 0 then return false end\n\
    \  if n % 61 == 0 then return false end\n  if n % 67 == 0 then return false end\n\
    \  if n % 71 == 0 then return false end\n  if n % 73 == 0 then return false end\n\
    \  if n % 79 == 0 then return false end\n  if n % 83 == 0 then return false end\n\
    \  if n % 89 == 0 then return false end\n  if n % 97 == 0 then return false end\n\
    \  if n % 101 == 0 then return false end\n  if n % 103 == 0 then return false\
    \ end\n  if n % 107 == 0 then return false end\n  if n % 111 == 0 then return\
    \ false end\n  if n % 117 == 0 then return false end\n  if n % 121 == 0 then return\
    \ false end\n  if n % 1253 == 0 then return false end\n  if n % 127 == 0 then\
    \ return false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0\
    \ then return false end\n  if n % 141 == 0 then return false end\n  if n % 147\
    \ == 0 then return false end\n  if n % 151 == 0 then return false end\n  if n\
    \ % 157 == 0 then return false end\n  if n % 161 == 0 then return false end\n\
    \  if n % 165 == 0 then return false end\n  if n % 167 == 0 then return false\
    \ end\n  if n % 171 == 0 then return false end\n  if n % 177 == 0 then return\
    \ false end\n  if n % 181 == 0 then return false end\n  if n % 187 == 0 then return\
    \ false end\n  if n % 191 == 0 then return false end\n  if n % 193 == 0 then return\
    \ false end\n  if n % 197 == 0 then return false end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpem7rrkqo.lua:88: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Prime numbers are greater than 1 and divisible by 3.\n  if n < 1 then return\
    \ false end\n  if n % 3 == 0 then return false end\n  -- Check all the numbers\
    \ from 3 to sqrt(n).\n  for i = 4, math.floor(math.sqrt(n)) + 1, 4 do\n    if\
    \ n % i == 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx3bo_hlx.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx3bo_hlx.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  for i = 3, math.floor(n/2), 2 do\n    if n %\
    \ i == 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case: n is 0 or 1.\n  if n == 0 or n == 1 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy95esggm.lua:40: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test\n  -- http://primes.utm.edu/lists/small/millions/\n\
    \  -- http://www.math.rutgers.edu/~beardy/Primes/odd.txt\n  -- http://www.math.rutgers.edu/~beardy/Primes/even.txt\n\
    \  -- http://www.math.rutgers.edu/~beardy/Primes/march.txt\n  -- http://www.math.rutgers.edu/~beardy/Primes/primes.txt\n\
    \  -- http://www.math.rutgers.edu/~beardy/Primes/odd_primes.txt\n  -- http://www.math.rutgers.edu/~beardy/Primes/even_primes.txt\n\
    \  -- http://www.math.rutgers.edu/~beardy/Primes/march_primes.txt\n  -- http://www.math.rutgers.edu/~beardy/Primes/primes_odd.txt\n\
    \  -- http://www.math.rutgers.edu/~beardy/Primes/primes_even.txt\n  -- http://www.math.rutgers.edu/~beardy/Primes/primes_march.txt\n\
    \  -- http://www.math.rutgers.edu/~beardy/Primes/primes_primes.txt\n  -- http://www.math.rutgers.edu/~beardy/Primes/primes_odd_primes.txt\n\
    \  -- http://www.math.rutgers.edu/~beardy/Primes/primes_even_primes.txt\n  --\
    \ http://www.math.rutgers.edu/~beardy/Primes/primes_march_primes.txt\n  -- http://www.math.rutgers.edu/~beardy/Primes/primes_primes_odd.txt\n\
    \  -- http://www.math.rutgers.edu/~beardy/Primes/primes_primes_even.txt\n  --\
    \ http://www.math.rutgers.edu/~beardy/Primes/primes_primes_march.txt\n  -- http://www.math.rutgers.edu/~beardy/Primes/primes_primes_primes.txt\n\
    \  -- http://www.math.rutgers.edu/~beardy/Primes/primes_primes_odd_primes.txt\n\
    \  -- http://www.math.rutgers.edu/~beardy/Primes/primes_primes_even_primes.txt\n\
    \  -- http://www.math.rutgers.edu/~beardy/Primes/primes_primes_march_primes.txt\n\
    \  -- http://www.math.rutgers.edu/~beardy/Primes/primes_primes_primes_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa1ttqixk.lua:60: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that no prime number greater than \n  --\
    \ \\sqrt{n} is smaller than or equal to \\sqrt{n+1}.\n  -- \n  -- The algorithm\
    \ used here is a modification of the Sieve of Eratosthenes \n  -- algorithm. \n\
    \  -- \n  -- The sieve is initialized with all the primes less than or equal to\
    \ n. \n  -- The sieve is then used to filter out all multiples of primes below\
    \ \n  -- \\sqrt{n}. \n  -- \n  -- The sieve is then used to filter out all multiples\
    \ of primes above \n  -- \\sqrt{n}. \n  -- \n  -- The sieve is then used to filter\
    \ out all multiples of primes \n  -- \\sqrt{n} or larger. \n  -- \n  -- The sieve\
    \ is then used to filter out all multiples of primes \n  -- \\sqrt{n} or larger.\
    \ \n  -- \n  -- The sieve is then used to filter out all multiples of primes \n\
    \  -- \\sqrt{n} or larger. \n  -- \n  -- The sieve is then used to filter out\
    \ all multiples of primes \n  -- \\sqrt{n} or larger. \n  -- \n  -- The sieve\
    \ is then used to filter out all multiples of primes \n  -- \\sqrt{n} or larger.\
    \ \n  -- \n  -- The sieve is then used to filter out all multiples of primes \n\
    \  -- \\sqrt{n} or larger. \n  -- \n  -- The sieve is then used to filter out\
    \ all multiples of primes \n  -- \\sqrt{n} or larger. \n  -- \n  -- The sieve\
    \ is then used to filter out all multiples of primes \n  -- \\sqrt{n} or larger.\
    \ \n  -- \n  -- The sieve is then used to filter out all multiples of primes \n\
    \  -- \\sqrt{n} or larger. \n  -- \n  -- The sieve is then used to filter out\
    \ all multiples of primes \n  -- \\sqrt{n} or larger. \n  -- \n  -- The sieve\
    \ is then used to filter out all multiples of primes \n  -- \\sqrt{n} or larger.\
    \ \n  -- \n  -- The sieve is then used to filter out all multiples of primes \n\
    \  -- \\sqrt{n} or larger. \n  -- \n  \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwlsgngk0.lua:86: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers since they are special cases.\n  if n % 3 == 0 then\n    return false\n\
    \  end\n  if n % 5 == 0 then\n    return false\n  end\n  -- Check all the numbers\
    \ from 3 to n / 2.\n  for i = 4, n / 2, 2 do\n    if n % i == 0 then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprn8e4u5q.lua:52:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprn8e4u5q.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case: n is 0 or 1.\n  if n == 0 or n == 1 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy95esggm.lua:40: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that every positive integer greater than\
    \ 1 that has no positive divisors other than 1 is a prime number.\n  -- The first\
    \ prime number is named 2.\n  -- >>> is_prime(2)\n  -- true\n  -- >>> is_prime(7)\n\
    \  -- false\n  -- >>> is_prime(8)\n  -- false\n  -- >>> is_prime(15)\n  -- false\n\
    \  -- >>> is_prime(19)\n  -- false\n  -- >>> is_prime(23)\n  -- false\n  -- >>>\
    \ is_prime(29)\n  -- false\n  -- >>> is_prime(39)\n  -- false\n  -- >>> is_prime(49)\n\
    \  -- false\n  -- >>> is_prime(59)\n  -- false\n  -- >>> is_prime(69)\n  -- false\n\
    \  -- >>> is_prime(79)\n  -- false\n  -- >>> is_prime(89)\n  -- false\n  -- >>>\
    \ is_prime(97)\n  -- false\n  -- >>> is_prime(101)\n  -- false\n  -- >>> is_prime(103)\n\
    \  -- false\n  -- >>> is_prime(105)\n  -- false\n  -- >>> is_prime(107)\n  --\
    \ false\n  -- >>> is_prime(109)\n  -- false\n  -- >>> is_prime(111)\n  -- false\n\
    \  -- >>> is_prime(127)\n  -- false\n  -- >>> is_prime(131)\n  -- false\n  --\
    \ >>> is_prime(137)\n  -- false\n  -- >>> is_prime(139)\n  -- false\n  -- >>>\
    \ is_prime(149)\n  -- false\n  -- >>> is_prime(151)\n  -- false\n  -- >>> is_prime(157)\n\
    \  -- false\n  -- >>> is_prime(159)\n  -- false\n  -- >>> is_prime(161)\n  --\
    \ false\n  -- >>> is_prime(163)\n  -- false\n  -- >>> is_prime(167)\n  -- false\n\
    \  -- >>> is_prime(173)\n  -- false\n  -- >>> is_prime(175)\n  -- false\n  --\
    \ >>> is_prime(179)\n  -- false\n  -- >>> is_prime(181)\n  -- false\n  -- >>>\
    \ is_prime(191)\n  -- false\n  -- >>> is_prime(193)\n  -- false\n  -- >>> \nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpih3ub2wo.lua:113: ''end'' expected (to close ''function''
    at line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd-even numbers\
    \ for primality\n  local i = 3\n  while i * i <= n do\n    if n % i == 0 then\n\
    \      return false\n    end\n    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 141 == 0 then return false end\n  if n % 147 == 0 then return\
    \ false end\n  if n % 151 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 167 == 0 then return\
    \ false end\n  if n % 173 == 0 then return false end\n  if n % 179 == 0 then return\
    \ false end\n  if n % 183 == 0 then return false end\n  if n % 191 == 0 then return\
    \ false end\n  if n % 197 == 0 then return false end\n  if n % 201 == 0 then return\
    \ false end\n  if n % 207 == 0 then return false end\n  if n % 211 == 0 then return\
    \ false end\n  if n % 215 == 0 then return false end\n  if n % 219 == 0 then return\
    \ false \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps84bzinr.lua:69: ''end'' expected (to close ''if'' at line
    68) near ''lu''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- If n is even, then\
    \ (n-1)/2 is odd and n is prime.\n  if n % 2 == 1 then\n    return not is_prime(math.floor((n\
    \ - 1) / 2))\n  end\n  -- If n is odd, then (n-1)/2 is even, and n is prime.\n\
    \  return not is_prime(math.floor((n - 1) / 2))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpom90iu7x.lua:44:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpom90iu7x.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  for i = 3, math.floor(n/2), 2 do\n    if n %\
    \ i == 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case: n is 0 or 1.\n  if n == 0 or n == 1 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy95esggm.lua:40: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 1253 == 0 then\
    \ return false end\n  if n % 127 == 0 then return false end\n  if n % 131 == 0\
    \ then return false end\n  if n % 137 == 0 then return false end\n  if n % 141\
    \ == 0 then return false end\n  if n % 147 == 0 then return false end\n  if n\
    \ % 151 == 0 then return false end\n  if n % 157 == 0 then return false end\n\
    \  if n % 161 == 0 then return false end\n  if n % 165 == 0 then return false\
    \ end\n  if n % 167 == 0 then return false end\n  if n % 171 == 0 then return\
    \ false end\n  if n % 177 == 0 then return false end\n  if n % 181 == 0 then return\
    \ false end\n  if n % 187 == 0 then return false end\n  if n % 191 == 0 then return\
    \ false end\n  if n % 193 == 0 then return false end\n  if n % 197 == 0 then return\
    \ false end\n  if n % 201 == 0 then return \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm2x_qmwv.lua:69: ''end'' expected (to close ''if'' at line
    68) near ''=''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 113 == 0 then return\
    \ false end\n  if n % 117 == 0 then return false end\n  if n % 121 == 0 then return\
    \ false end\n  if n % 1253 == 0 then return false end\n  if n % 127 == 0 then\
    \ return false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0\
    \ then return false end\n  if n % 141 == 0 then return false end\n  if n % 147\
    \ == 0 then return false end\n  if n % 151 == 0 then return false end\n  if n\
    \ % 157 == 0 then return false end\n  if n % 161 == 0 then return false end\n\
    \  if n % 165 == 0 then return false end\n  if n % 167 == 0 then return false\
    \ end\n  if n % 171 == 0 then return false end\n  if n % 177 == 0 then return\
    \ false end\n  if n % 181 == 0 then return false end\n  if n % 187 == 0 then return\
    \ false end\n  if n % 191 == 0 then return false end\n  if n % 193 == 0 then return\
    \ false end\n  if n % 197 == 0 then \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp864mwira.lua:88: ''end'' expected (to close ''if'' at line
    68) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  for i = 3, math.floor(n/2), 2 do\n    if n %\
    \ i == 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Primality test. Returns true if n is prime and false otherwise.\n  -- >>>\
    \ is_prime(6)\n  -- false\n  -- >>> is_prime(101)\n  -- true\n  -- >>> is_prime(11)\n\
    \  -- true\n  -- >>> is_prime(13441)\n  -- true\n  -- >>> is_prime(61)\n  -- true\n\
    \  -- >>> is_prime(4)\n  -- false\n  -- >>> is_prime(1)\n  -- false\n  if n <\
    \ 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n  end\n\
    \  if n % 2 == 0 then\n    return false\n  end\n  -- Test if n is prime.\n  --\
    \ If n is even, then (n-1)/2 is even.\n  -- If n is odd, then (n-1)/2 is odd.\n\
    \  -- If n is even, then the (n-1)/2 must be even.\n  -- If n is odd, then the\
    \ (n-1)/2 must be odd.\n  local i = 3\n  while i <= math.sqrt(n) do\n    if n\
    \ % i == 0 then\n      return false\n    end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- If n is prime, return true.\n  if n <= 1 then return false end\n  -- If\
    \ n is even, return false.\n  if n % 2 == 0 then return false end\n  -- If n is\
    \ odd, return true if the number is prime or greater.\n  -- If n is odd and greater\
    \ than 2, return true.\n  if n % 2 == 1 then\n    if n <= 3 then return false\
    \ end\n    if n % 3 == 0 then return false end\n    -- If n is odd and greater\
    \ than 3, return true.\n    if n % 5 == 0 then return false end\n    -- If n is\
    \ odd and greater than 5, return true.\n    if n % 7 == 0 then return false end\n\
    \    -- If n is odd and greater than 7, return true.\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvqszohij.lua:45:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvqszohij.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case\n  if n < 2 then return false end\n  -- Test for divisibility\
    \ by all prime factors\n  for i = 2, n do\n    if n % i == 0 then return false\
    \ end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0mm687y.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmps0mm687y.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- If we got this far,\
    \ we're still checking that n is odd.\n  -- If n is even, then the only even prime\
    \ is 2.\n  if n % 2 == 1 then\n    return true\n  end\n  -- If n is odd, then\
    \ all odd numbers are greater than 1.\n  -- If n > 2, then all odd numbers are\
    \ greater than or equal to 3.\n  -- If n > 3, then all odd numbers are greater\
    \ than or equal to 5.\n  -- If n > 5, then all odd numbers are greater than or\
    \ equal to 7.\n  -- If n > 7, then all odd numbers are greater than or equal to\
    \ 11.\n  -- If n > 11, then all odd numbers are greater than or equal to 13.\n\
    \  -- If n > 13, then all odd numbers are greater than or equal to 15.\n  -- If\
    \ n > 15, then all odd numbers are greater than or equal to 17.\n  -- If n > 17,\
    \ then all odd numbers are greater than or equal to 19.\n  -- If n > 19, then\
    \ all odd numbers are greater than or equal to 21.\n  -- If n > 21, then all odd\
    \ numbers are greater than or equal to 23.\n  -- If n > 23, then all odd numbers\
    \ are greater than or equal to 25.\n  -- If n > 25, then all odd numbers are greater\
    \ than or equal to 27.\n  -- If n > 27, then all odd numbers are greater than\
    \ or equal to 29.\n  -- If n > 29, then all odd numbers are greater than or equal\
    \ to 31.\n  -- If n > 31, then all odd numbers are greater than or equal to 33.\n\
    \  -- If n > 33, then all odd numbers are greater than or equal to 35.\n  -- If\
    \ n > 35, then all odd numbers are greater than or equal to 37.\n  -- If n > 37,\
    \ then all odd numbers are greater than or equal to 39.\n  -- If n > 39, then\
    \ all odd numbers are greater than or equal to 41.\n  -- If n > 41, then all odd\
    \ numbers are greater than or equal to 43.\n  -- If n > 43, then all odd numbers\
    \ are greater than or equal to 45.\n  -- If n > 45, then all odd numbers are greater\
    \ than or equal to 47.\n  -- If n > 47, then all odd numbers are greater than\
    \ or equal to 49.\n  -- If n > 49, then all odd numbers are greater than or equal\
    \ to 51.\n  -- If n > 51, then all odd numbers are greater than or equal to 53.\n\
    \  -- If n > 53, then all odd numbers are greater than or equal to 55.\n  -- If\
    \ n > 55, then all odd numbers are greater than or equal to 57.\n  -- If n > 57,\
    \ then all odd numbers are greater than or \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxrjhx11o.lua:79: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  local\
    \ m = math.floor(math.sqrt(n))\n  for i = 1, m do\n    if n % i == 0 then return\
    \ false end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdar_esh9.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdar_esh9.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n ==\
    \ 1 then return false end\n  if n % 2 == 0 then return false end\n  local i =\
    \ 3\n  while i <= math.sqrt(n) do\n    if n % i == 0 then return false end\n \
    \   i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd-ness of\
    \ n\n  local function odd(n)\n    return n % 2 == 1\n  end\n  -- Check whether\
    \ n is prime by trial division\n  local function is_prime(n)\n    local i = 2\n\
    \    while i <= math.sqrt(n) do\n      if odd(n) then\n        return false\n\
    \      end\n      if n % i == 0 then\n        return false\n      end\n      i\
    \ = i + 1\n    end\n    return true\n  end\n  return is_prime(n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahfzr9nz.lua:51:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpahfzr9nz.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- If n is less than or equal to 1, then n is prime.\n  if n <= 1 then\n  \
    \  return true\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5d2i7168.lua:40: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case: n is 0 or 1.\n  if n == 0 then return false end\n  if n == 1\
    \ then return true end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfa__91ur.lua:39: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local m = math.floor(math.sqrt(n))\n\
    \  for i = 2, m do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  -- Check odd and even\n  for i = 3, math.floor(n/2),\
    \ 2 do\n    if n % i == 0 then return false end\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers for primeness\n  local function is_odd_or_even(n)\n    return n % 2\
    \ == 0 or n % 2 == 1\n  end\n  -- Check odd numbers for primeness\n  local function\
    \ is_odd(n)\n    return n % 2 == 1\n  end\n  -- Check even numbers for primeness\n\
    \  local function is_even(n)\n    return n % 2 == 0\n  end\n  -- Check odd numbers\
    \ for primeness\n  local function is_prime(n)\n    local i = 2\n    while i <=\
    \ n do\n      if n % i == 0 then\n        return false\n      end\n      i = i\
    \ + 1\n    end\n    return true\n  end\n  -- Check even numbers for primeness\n\
    \  local function is_prime(n)\n    local i = 2\n    while i <= n do\n      if\
    \ n % i == 0 then\n        return false\n      end\n      i = i + 1\n    end\n\
    \    return true\n  end\n  -- Check odd numbers for primeness\n  local function\
    \ is_prime(n)\n    local i = 2\n    while i <= n do\n      if n % i == 0 then\n\
    \        return false\n      end\n      i = i + 1\n    end\n    return true\n\
    \  end\n  -- Check even numbers for primeness\n  local function is_prime(n)\n\
    \    local i = 2\n    while i <= n do\n      if n % i == 0 then\n        return\
    \ false\n      end\n      i = i + 1\n    end\n    return true\n  end\n  -- Check\
    \ odd numbers for primeness\n  local function is_prime(n)\n    local i = 2\n \
    \   while i <= n do\n      if n % i == 0 then\n        return false\n      end\n\
    \      i = i + 1\n    end\n    return true\n  end\n  -- Check even numbers for\
    \ primeness\n  local function is_prime(n)\n    local i = 2\n    while i <= n do\n\
    \      if n % i == 0 then\n        return false\n      end\n      i = i + 1\n\
    \    end\n    return true\n  end\n  -- Check odd numbers for primeness\n  local\
    \ function is_prime(n)\n    local i = 2\n    while i <= n do\n      if n % i ==\
    \ 0 then\n        return false\n      end\n      i = i + 1\n    end\n    return\
    \ true\n  end\n  -- Check even numbers for primeness\n  local function is_prime(n)\n\
    \    local i = 2\n    while i <= n do\n      if n % i == 0 then\n        return\
    \ false\n      end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp16_lx5r8.lua:142: ''end'' expected (to close ''while'' at
    line 118) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Trial division algorithm\
    \ from Wikipedia.\n  -- http://en.wikipedia.org/wiki/Trial_division\n  -- The\
    \ algorithm is very similar to the sieve of Eratosthenes.\n  -- The only difference\
    \ is that it only considers odd numbers.\n  local function is_odd(n)\n    return\
    \ not n % 2\n  end\n  local function is_prime_iter(n)\n    local i = 2\n    while\
    \ i <= n do\n      if not is_odd(n) then\n        return false\n      end\n  \
    \    i = i * 2\n    end\n    return true\n  end\n  -- The first few primes are\
    \ easy to check, since they are odd.\n  -- If n is prime, then it must be odd.\n\
    \  -- If n is not prime, then it must be even.\n  -- If n is even, then it must\
    \ be odd.\n  -- If n is odd, then it must be even.\n  -- If n is odd, then it\
    \ must be odd.\n  -- If n is even, then it must be odd.\n  -- If n is odd, then\
    \ it must be even.\n  -- If n is even, then it must be odd.\n  -- If n is odd,\
    \ then it must be even.\n  -- If n is even, then it must be odd.\n  -- If n is\
    \ odd, then it must be even.\n  -- If n is even, then it must be odd.\n  -- If\
    \ n is odd, then it must be even.\n  -- If n is even, then it must be odd.\n \
    \ -- If n is odd, then it must be even.\n  -- If n is even, then it must be odd.\n\
    \  -- If n is odd, then it must be even.\n  -- If n is even, then it must be odd.\n\
    \  -- If n is odd, then it must be even.\n  -- If n is even, then it must be odd.\n\
    \  -- If n is odd, then it must be even.\n  -- If n is even, then it must be odd.\n\
    \  -- If n is odd, then it must be even.\n  -- If n is even, then it must be odd.\n\
    \  -- If n is odd, then it must be even.\n  -- If n is even, then it must be odd.\n\
    \  -- If n is odd, then it must be even.\n  -- If n is even, then it must be odd.\n\
    \  -- If n is od\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbu6shtsf.lua:92: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Test if n is evenly\
    \ divisible by 3\n  if n % 3 == 0 then\n    return false\n  end\n  -- Test if\
    \ n is evenly divisible by 5\n  if n % 5 == 0 then\n    return false\n  end\n\
    \  -- Test if n is evenly divisible by 7\n  if n % 7 == 0 then\n    return false\n\
    \  end\n  -- If n is evenly divisible by 3\n  if n % 3 == 0 then\n    -- If n\
    \ is evenly divisible by 5\n    if n % 5 == 0 then\n      -- If n is evenly divisible\
    \ by 7\n      if n % 7 == 0 then\n        return false\n      end\n    end\n \
    \ end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvm97fse7.lua:61:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvm97fse7.lua:61:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  local\
    \ i = 3\n  while i <= math.sqrt(n) do\n    if n % i == 0 then return false end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test\n  -- http://oeis.org/A000045\n\
    \  -- http://oeis.org/A000045#section=7\n  -- http://oeis.org/A000045#section=8\n\
    \  -- http://oeis.org/A000045#section=9\n  -- http://oeis.org/A000045#section=10\n\
    \  -- http://oeis.org/A000045#section=11\n  -- http://oeis.org/A000045#section=12\n\
    \  -- http://oeis.org/A000045#section=13\n  -- http://oeis.org/A000045#section=14\n\
    \  -- http://oeis.org/A000045#section=15\n  -- http://oeis.org/A000045#section=16\n\
    \  -- http://oeis.org/A000045#section=17\n  -- http://oeis.org/A000045#section=18\n\
    \  -- http://oeis.org/A000045#section=19\n  -- http://oeis.org/A000045#section=20\n\
    \  -- http://oeis.org/A000045#section=21\n  -- http://oeis.org/A000045#section=22\n\
    \  -- http://oeis.org/A000045#section=23\n  -- http://oeis.org/A000045#section=24\n\
    \  -- http://oeis.org/A000045#section=25\n  -- http://oeis.org/A000045#section=26\n\
    \  -- http://oeis.org/A000045#section=27\n  -- http://oeis.org/A000045#section=28\n\
    \  -- http://oeis.org/A000045#section=29\n  -- http://oeis.org/A000045#section=30\n\
    \  -- http://oeis.org/A000045#section=31\n  -- http://oeis.org/A000045#section=32\n\
    \  -- http://oeis.org/A000045#section=33\n  -- http://oeis.org/A000045#section=34\n\
    \  -- http://oeis.org/A000045#section=35\n  -- http://oeis.org/A000045#section=36\n\
    \  -- http://oeis.org/A000045#section=37\n  -- http://oeis.org/A000045#section=38\n\
    \  -- http://oeis.org/A000045#section\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqjg4fggk.lua:71: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  local\
    \ i = 3\n  while i <= math.sqrt(n) do\n    if n % i == 0 then return false end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  local\
    \ i = 3\n  while i <= math.sqrt(n) do\n    if n % i == 0 then return false end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Prime numbers are greater than 1.\n  if n < 1 then\n    return false\n \
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzn31_q5f.lua:40: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 141 == 0 then return false end\n  if n % 147 == 0 then return\
    \ false end\n  if n % 151 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 167 == 0 then return\
    \ false end\n  if n % 173 == 0 then return false end\n  if n % 179 == 0 then return\
    \ false end\n  if n % 183 == 0 then return false end\n  if n % 187 == 0 then return\
    \ false end\n  if n % 191 == 0 then return false end\n  if n % 193 == 0 then return\
    \ false end\n  if n % 197 == 0 then return false end\n  if n % 201 == 0 then return\
    \ false end\n  if n % 207 == 0 then return false end\n  if n % 211 == 0 then return\
    \ false \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgtnj44c3.lua:69: ''end'' expected (to close ''if'' at line
    68) near ''lu''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  for\
    \ i = 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163,\
    \ 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251,\
    \ 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349,\
    \ 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443,\
    \ 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557,\
    \ 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647,\
    \ 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757,\
    \ 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863,\
    \ 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983,\
    \ 991, 997\ndo\n  if n % i == 0 then return false end\nend\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp75eggxx7.lua:23: ''do'' expected near '',''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Trial division algorithm\
    \ from Wikipedia.\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division_.28Integer.29\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.29\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.30\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.31\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.32\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.33\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.34\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.35\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.36\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.37\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.38\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.39\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.40\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.41\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.42\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.43\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.44\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.45\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.46\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.47\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.48\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.49\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.50\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.51\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.52\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.53\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.54\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.55\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.56\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.57\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division.58\n\
    \  -- \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd2yruw44.lua:78: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 141 == 0 then return false end\n  if n % 147 == 0 then return\
    \ false end\n  if n % 151 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 167 == 0 then return\
    \ false end\n  if n % 173 == 0 then return false end\n  if n % 179 == 0 then return\
    \ false end\n  if n % 183 == 0 then return false end\n  if n % 189 == 0 then return\
    \ false end\n  if n % 193 == 0 then return false end\n  if n % 197 == 0 then return\
    \ false end\n  if n % 201 == 0 then return false end\n  if n % 207 == 0 then return\
    \ false end\n  if n % 211 == 0 then return false end\n  if n % 215 == 0 then return\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkp0mp73j.lua:69: ''end'' expected (to close ''if'' at line
    68) near ''=''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n ==\
    \ 1 then return false end\n  if n % 2 == 0 then return false end\n  if n % 3 ==\
    \ 0 then return false end\n  if n % 5 == 0 then return false end\n  if n % 7 ==\
    \ 0 then return false end\n  local i\n  for i = 5, n, 2 do\n    if n % i == 0\
    \ then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbq0msuz2.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbq0msuz2.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local m = math.floor(n/2)\n  for i = 2, m do\n\
    \    if n % i == 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 141 == 0 then return false end\n  if n % 147 == 0 then return\
    \ false end\n  if n % 151 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 167 == 0 then return\
    \ false end\n  if n % 173 == 0 then return false end\n  if n % 179 == 0 then return\
    \ false end\n  if n % 183 == 0 then return false end\n  if n % 187 == 0 then return\
    \ false end\n  if n % 191 == 0 then return false end\n  if n % 193 == 0 then return\
    \ false end\n  if n % 197 == 0 then return false end\n  if n % 201 == 0 then return\
    \ false end\n  if n % 207 == 0 then return false end\n  if n % 211 == 0 then return\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp18cehz34.lua:69: ''end'' expected (to close ''if'' at line
    68) near ''=''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 141 == 0 then return false end\n  if n % 147 == 0 then return\
    \ false end\n  if n % 151 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 167 == 0 then return\
    \ false end\n  if n % 173 == 0 then return false end\n  if n % 179 == 0 then return\
    \ false end\n  if n % 183 == 0 then return false end\n  if n % 187 == 0 then return\
    \ false end\n  if n % 191 == 0 then return false end\n  if n % 193 == 0 then return\
    \ false end\n  if n % 197 == 0 then return false end\n  if n % 201 == 0 then return\
    \ false end\n  if n % 207 == 0 then return false end\n  if n % 211 == 0 then return\
    \ false \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgtnj44c3.lua:69: ''end'' expected (to close ''if'' at line
    68) near ''lu''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test\n  if n < 2 then\n    return\
    \ false\n  end\n  if n == 2 then\n    return true\n  end\n  if n % 2 == 0 then\n\
    \    return false\n  end\n  -- Check odd and even numbers for primality\n  local\
    \ i = 3\n  while i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n\
    \    end\n    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case\n  if n < 2 then return false end\n  -- Test for divisibility\
    \ by small primes\n  if n < 7 then return n % 2 == 0 end\n  if n < 11 then return\
    \ n % 3 == 0 end\n  if n < 13 then return n % 5 == 0 end\n  if n < 17 then return\
    \ n % 7 == 0 end\n  if n < 19 then return n % 11 == 0 end\n  if n < 23 then return\
    \ n % 13 == 0 end\n  if n < 29 then return n % 17 == 0 end\n  if n < 31 then return\
    \ n % 19 == 0 end\n  if n < 37 then return n % 23 == 0 end\n  if n < 41 then return\
    \ n % 29 == 0 end\n  if n < 43 then return n % 31 == 0 end\n  if n < 47 then return\
    \ n % 37 == 0 end\n  if n < 51 then return n % 41 == 0 end\n  if n < 55 then return\
    \ n % 43 == 0 end\n  if n < 57 then return n % 47 == 0 end\n  if n < 61 then return\
    \ n % 51 == 0 end\n  if n < 67 then return n % 55 == 0 end\n  if n < 71 then return\
    \ n % 57 == 0 end\n  if n < 77 then return n % 61 == 0 end\n  if n < 81 then return\
    \ n % 67 == 0 end\n  if n < 87 then return n % 71 == 0 end\n  if n < 91 then return\
    \ n % 77 == 0 end\n  if n < 97 then return n % 81 == 0 end\n  if n < 103 then\
    \ return n % 87 == 0 end\n  if n < 107 then return n % 91 == 0 end\n  if n < 111\
    \ then return n % 97 == 0 end\n  if n < 117 then return n % 103 == 0 end\n  if\
    \ n < 121 then return n % 107 == 0 end\n  if n < 127 then return n % 111 == 0\
    \ end\n  if n < 131 then return n % 117 == 0 end\n  if n < 137 then return n %\
    \ 121 == 0 end\n  if n < 143 then return n % 127 == 0 end\n  if n < 149 then return\
    \ n % 131 == 0 end\n  if n < 151 then return n % 137 == 0 end\n  if n < 157 then\
    \ return n % 143 == 0 end\n  if n < 163 then return n % 149 == 0 end\n  if n <\
    \ 167 then return n % 151 == 0 end\n  if n < 173 then return n % 157 == 0 end\n\
    \  if n < 179 then return n % 163 == 0 end\n  if n < 181 then return n % 167 ==\
    \ 0 end\n  if n < 187 then return n % 173 == 0 end\n  if n < 191 then return \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw00becuq.lua:62: ''end'' expected (to close ''if'' at line
    61) near ''=''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local m = math.floor(math.sqrt(n))\n  for i\
    \ = 2, m do\n    if n % i == 0 then return false end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case\n  if n < 2 then return false end\n  -- If n is even, return false\
    \ right away\n  if n % 2 == 0 then return false end\n  -- If n is odd, return\
    \ true if the number is prime or composite\n  if n == 2 then return true end\n\
    \  -- If n is odd and divisible by 3, return false\n  if n % 3 == 0 then return\
    \ false end\n  -- If n is odd and divisible by 5, return true\n  if n % 5 == 0\
    \ then return true end\n  -- If n is odd and divisible by both 3 and 5, return\
    \ true\n  if n % 6 == 0 then return true end\n  -- If n is odd and divisible by\
    \ both 3 and 5, return false\n  if n % 7 == 0 then return false end\n  -- If n\
    \ is odd and divisible by both 3 and 5, return true\n  if n % 8 == 0 then return\
    \ true end\n  -- If n is odd and divisible by both 3 and 5, return false\n  if\
    \ n % 9 == 0 then return false end\n  -- If n is odd and divisible by both 3 and\
    \ 5, return true\n  if n % 10 == 0 then return true end\n  -- If n is odd and\
    \ divisible by both 3 and 5, return false\n  if n % 11 == 0 then return false\
    \ end\n  -- If n is odd and divisible by both 3 and 5, return true\n  if n % 12\
    \ == 0 then return true end\n  -- If n is odd and divisible by both 3 and 5, return\
    \ false\n  if n % 13 == 0 then return false end\n  -- If n is odd and divisible\
    \ by both 3 and 5, return true\n  if n % 14 == 0 then return true end\n  -- If\
    \ n is odd and divisible by both 3 and 5, return false\n  if n % 15 == 0 then\
    \ return false end\n  -- If n is odd and divisible by both 3 and 5, return true\n\
    \  if n % 16 == 0 then return true end\n  -- If n is odd and divisible by both\
    \ 3 and 5, return false\n  if n % 17 == 0 then return false end\n  -- If n is\
    \ odd and divisible by both 3 and 5, return true\n  if n % 18 == 0 then return\
    \ true end\n  -- If n is odd and divisible by both 3 and 5, return false\n  if\
    \ n % 19 == 0 then return false end\n  -- If n is odd and divisible by both 3\
    \ and 5, return true\n  if n % 20 == 0 then return true end\n  -- If n is odd\
    \ and divisible by both 3 and 5, return false\n  if \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9pj8jz1u.lua:59: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return false end\n  if n == 2\
    \ then return true end\n  if n == 3 then return true end\n  if n == 4 then return\
    \ true end\n  if n == 5 then return true end\n  if n == 6 then return true end\n\
    \  if n == 7 then return true end\n  if n == 8 then return true end\n  if n ==\
    \ 9 then return true end\n  if n == 10 then return true end\n  if n == 11 then\
    \ return true end\n  if n == 12 then return true end\n  if n == 13 then return\
    \ true end\n  if n == 14 then return true end\n  if n == 15 then return true end\n\
    \  if n == 16 then return true end\n  if n == 17 then return true end\n  if n\
    \ == 18 then return true end\n  if n == 19 then return true end\n  if n == 20\
    \ then return true end\n  if n == 21 then return true end\n  if n == 22 then return\
    \ true end\n  if n == 23 then return true end\n  if n == 24 then return true end\n\
    \  if n == 25 then return true end\n  if n == 26 then return true end\n  if n\
    \ == 27 then return true end\n  if n == 28 then return true end\n  if n == 29\
    \ then return true end\n  if n == 30 then return true end\n  if n == 31 then return\
    \ true end\n  if n == 32 then return true end\n  if n == 33 then return true end\n\
    \  if n == 34 then return true end\n  if n == 35 then return true end\n  if n\
    \ == 36 then return true end\n  if n == 37 then return true end\n  if n == 38\
    \ then return true end\n  if n == 39 then return true end\n  if n == 40 then return\
    \ true end\n  if n == 41 then return true end\n  if n == 42 then return true end\n\
    \  if n == 43 then return true end\n  if n == 44 then return true end\n  if n\
    \ == 45 then return true end\n  if n == 46 then return true end\n  if n == 47\
    \ then return true end\n  if n == 48 then return true end\n  if n == 49 then return\
    \ true end\n  if n == 50 then return true end\n  if n == 51 then return true end\n\
    \  if n == 52 then return true end\n  if n == 53 then return true end\n  if n\
    \ == 54 then return true end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphr52eyon.lua:98: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 141 == 0 then return false end\n  if n % 147 == 0 then return\
    \ false end\n  if n % 151 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 167 == 0 then return\
    \ false end\n  if n % 171 == 0 then return false end\n  if n % 177 == 0 then return\
    \ false end\n  if n % 181 == 0 then return false end\n  if n % 187 == 0 then return\
    \ false end\n  if n % 191 == 0 then return false end\n  if n % 197 == 0 then return\
    \ false end\n  if n % 201 == 0 then return false end\n  if n % 207 == 0 then return\
    \ false end\n  if n % 211 == 0 then return false end\n  if n % 215 == 0 then return\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfc6d85gr.lua:69: ''end'' expected (to close ''if'' at line
    68) near ''=''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 113 == 0 then return\
    \ false end\n  if n % 117 == 0 then return false end\n  if n % 121 == 0 then return\
    \ false end\n  if n % 1253 == 0 then return false end\n  if n % 127 == 0 then\
    \ return false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0\
    \ then return false end\n  if n % 141 == 0 then return false end\n  if n % 147\
    \ == 0 then return false end\n  if n % 151 == 0 then return false end\n  if n\
    \ % 157 == 0 then return false end\n  if n % 161 == 0 then return false end\n\
    \  if n % 165 == 0 then return false end\n  if n % 167 == 0 then return false\
    \ end\n  if n % 171 == 0 then return false end\n  if n % 177 == 0 then return\
    \ false end\n  if n % 181 == 0 then return false end\n  if n % 187 == 0 then return\
    \ false end\n  if n % 191 == 0 then return false end\n  if n % 193 == 0 then return\
    \ false end\n  if n % 197 == 0 then return \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5mkoyvfd.lua:69: ''end'' expected (to close ''if'' at line
    68) near ''=''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return false end\n  if n % 2\
    \ == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n %\
    \ 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if n\
    \ == 1 then return false end\n  if n == 0 then return false end\n  if n % 2 ==\
    \ 0 then return false end\n  if n % 3 == 0 then return false end\n  if n % 5 ==\
    \ 0 then return false end\n  if n % 7 == 0 then return false end\n  if n == 1\
    \ then return false end\n  if n == 0 then return false end\n  if n % 2 == 0 then\
    \ return false end\n  if n % 3 == 0 then return false end\n  if n % 5 == 0 then\
    \ return false end\n  if n % 7 == 0 then return false end\n  if n == 1 then return\
    \ false end\n  if n == 0 then return false end\n  if n % 2 == 0 then return false\
    \ end\n  if n % 3 == 0 then return false end\n  if n % 5 == 0 then return false\
    \ end\n  if n % 7 == 0 then return false end\n  if n == 1 then return false end\n\
    \  if n == 0 then return false end\n  if n % 2 == 0 then return false end\n  if\
    \ n % 3 == 0 then return false end\n  if n % 5 == 0 then return false end\n  if\
    \ n % 7 == 0 then return false end\n  if n == 1 then return false end\n  if n\
    \ == 0 then return false end\n  if n % 2 == 0 then return false end\n  if n %\
    \ 3 == 0 then return false end\n  if n % 5 == 0 then return false end\n  if n\
    \ % 7 == 0 then return false end\n  if n == 1 then return false end\n  if n ==\
    \ 0 then return false end\n  if n % 2 == 0 then return false end\n  if n % 3 ==\
    \ 0 then return false end\n  if n % 5 == 0 then return false end\n  if n % 7 ==\
    \ 0 then return false end\n  if n == 1 then return false end\n  if n == 0 then\
    \ return false end\n  if n % 2 == 0 then return false end\n  if n % 3 == 0 then\
    \ return false end\n  if n % 5 == 0 then return false end\n  if n % 7 == 0 then\
    \ return false end\n  if n == 1 then return false end\n  if n == 0 then return\
    \ false end\n  if n % 2 == 0 then return false end\n  if \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpurlb5rmt.lua:75: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  for i = 3, math.floor(n/2), 2 do\n    if n %\
    \ i == 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test\n  -- http://oeis.org/A000045\n\
    \  -- http://oeis.org/A000045/002\n  -- http://oeis.org/A000045/003\n  -- http://oeis.org/A000045/004\n\
    \  -- http://oeis.org/A000045/005\n  -- http://oeis.org/A000045/006\n  -- http://oeis.org/A000045/007\n\
    \  -- http://oeis.org/A000045/008\n  -- http://oeis.org/A000045/009\n  -- http://oeis.org/A000045/010\n\
    \  -- http://oeis.org/A000045/011\n  -- http://oeis.org/A000045/012\n  -- http://oeis.org/A000045/013\n\
    \  -- http://oeis.org/A000045/014\n  -- http://oeis.org/A000045/015\n  -- http://oeis.org/A000045/016\n\
    \  -- http://oeis.org/A000045/017\n  -- http://oeis.org/A000045/018\n  -- http://oeis.org/A000045/019\n\
    \  -- http://oeis.org/A000045/020\n  -- http://oeis.org/A000045/021\n  -- http://oeis.org/A000045/023\n\
    \  -- http://oeis.org/A000045/024\n  -- http://oeis.org/A000045/025\n  -- http://oeis.org/A000045/026\n\
    \  -- http://oeis.org/A000045/027\n  -- http://oeis.org/A000045/028\n  -- http://oeis.org/A000045/029\n\
    \  -- http://oeis.org/A000045/030\n  -- http://oeis.org/A000045/031\n  -- http://oeis.org/A000045/034\n\
    \  -- http://oeis.org/A000045/035\n  -- http://oeis.org/A000045/036\n  -- http://oeis.org/A000045/037\n\
    \  -- http://oeis.org/A000045/038\n  -- http://oeis.org/A000045/039\n  -- http://oeis.org/A000045/040\n\
    \  -- http://oeis.org/A000045/041\n  -- http://\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmjmmk5zp.lua:76: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers\n  if n % 3 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers\n  if n % 5 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers\n  if n % 7 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers\n  if n % 11 == 0 then\n    return false\n  end\n  -- Check odd and\
    \ even numbers\n  if n % 13 == 0 then\n    return false\n  end\n  -- Check odd\
    \ and even numbers\n  if n % 17 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 19 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 23 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 29 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 31 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 37 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 41 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 43 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 47 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 53 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 59 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 61 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 67 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 71 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 73 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 79 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 83 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 89 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 97 == 0 then\n    return false\n  end\n  -- \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6tuuq9re.lua:142: ''end'' expected (to close ''function''
    at line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers\n  if n % 3 == 0 then\n    return false\n  end\n  if n % 5 == 0 then\n\
    \    return false\n  end\n  -- Check divisibility by primes up to sqrt(n)\n  local\
    \ i = 3\n  while i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n\
    \    end\n    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptt5i9_1f.lua:54:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptt5i9_1f.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that a prime number greater than 2\n  --\
    \ can be written as the sum of two prime numbers. However, this cannot\n  -- be\
    \ done in general: a) because any two prime numbers are always\n  -- congruent\
    \ to each other, and b) because any two congruent primes\n  -- differ only in\
    \ their least significant bits.\n  -- http://en.wikipedia.org/wiki/Prime_number_theorem\n\
    \  -- http://mathworld.wolfram.com/PrimeNumbers.html\n  -- http://primes.utm.edu/lists/small/1000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000.txt\n  -- http://primes.utm.edu/lists/small/1000001.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000.txt\n  -- http://primes.utm.edu/lists/small/1000000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000.txt\n  -- http://primes.utm.edu/lists/small/1000000000000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/100000000000000000000.txt\n  -- http://primes.utm.edu/lists/small/100000000000000000000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000000000.txt\n  --\
    \ http://primes.utm.edu/lists/small/10000000000000000000000000000000.txt\n  --\
    \ http://primes.utm.edu/lists/small/1000000000000000000000000000000000.txt\n \
    \ -- http://primes.utm.edu/lists/small/10000000000000000000000000000000001.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000000000000002.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000000000000003.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000000000000004.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000000000000005.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000000000000006.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000000000000007.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000000000000009.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000000000000000000000000a.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000000000000000000000000b.txt\n\
    \  -- http://primes.utm.edu/lists/small/\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm2rk9c7q.lua:66: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local m = math.floor(math.sqrt(n))\n\
    \  for i = 2, m do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 113 == 0 then return\
    \ false end\n  if n % 117 == 0 then return false end\n  if n % 121 == 0 then return\
    \ false end\n  if n % 1253 == 0 then return false end\n  if n % 127 == 0 then\
    \ return false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0\
    \ then return false end\n  if n % 141 == 0 then return false end\n  if n % 147\
    \ == 0 then return false end\n  if n % 151 == 0 then return false end\n  if n\
    \ % 157 == 0 then return false end\n  if n % 161 == 0 then return false end\n\
    \  if n % 165 == 0 then return false end\n  if n % 167 == 0 then return false\
    \ end\n  if n % 171 == 0 then return false end\n  if n % 177 == 0 then return\
    \ false end\n  if n % 181 == 0 then return false end\n  if n % 187 == 0 then return\
    \ false end\n  if n % 191 == 0 then return false end\n  if n % 193 == 0 then return\
    \ false end\n  if n % 197 == 0 then \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp864mwira.lua:88: ''end'' expected (to close ''if'' at line
    68) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  for i=3,math.floor(n/2),2 do\n    if n % i ==\
    \ 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case: n is 0 or 1.\n  if n == 0 then return false end\n  if n == 1\
    \ then return true end\n  -- If n is even, then (n-1)/2 is odd and n is prime.\n\
    \  if n % 2 == 0 then\n    local m = math.floor((n - 1) / 2)\n    return is_prime(m)\n\
    \  end\n  -- If n is odd, then (n-1)/2 is even, and n is not prime.\n  local m\
    \ = math.floor((n - 1) / 2)\n  return not is_prime(m)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvt59559b.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvt59559b.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  for\
    \ i = 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163,\
    \ 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251,\
    \ 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349,\
    \ 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443,\
    \ 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557,\
    \ 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647,\
    \ 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757,\
    \ 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863,\
    \ 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983,\
    \ 991, 997\n    do\n      if n % i == 0 then return false end\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp61k8vfxc.lua:23: ''do'' expected near '',''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- TODO: This could be sped up by caching the primes we already have.\n  --\
    \ TODO: This could be sped up by using a sieve.\n  if n <= 1 then return false\
    \ end\n  if n == 2 then return true end\n  if n % 2 == 0 then return false end\n\
    \  local i = 3\n  while i * i <= n do\n    if n % i == 0 then return false end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 1 then return true end\n  if n ==\
    \ 2 then return false end\n  if n % 2 == 0 then return false end\n  if n % 3 ==\
    \ 0 then return false end\n  if n % 5 == 0 then return false end\n  if n % 7 ==\
    \ 0 then return false end\n  -- If we get here, then n is prime.\n  -- See if\
    \ we can divide it by any odd numbers.\n  for i = 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109,\
    \ 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197,\
    \ 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283,\
    \ 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389,\
    \ 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487,\
    \ 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,\
    \ 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691,\
    \ 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,\
    \ 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919,\
    \ 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997\n  do\n    if n % i ==\
    \ 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9npj7my9.lua:26: ''do'' expected near '',''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 1 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- The naive prime test (to test all numbers up to the given number).\n  --\
    \ This implementation is very inefficient for large numbers (it takes about\n\
    \  -- O(sqrt(n)) time).\n  -- -- http://en.wikipedia.org/wiki/Primality_test\n\
    \  -- -- http://primes.utm.edu/lists/small/10000.txt\n  -- -- http://www.cs.berkeley.edu/~wkahan/sc22wg/hw/hw06/slides/slides.pdf\n\
    \  -- -- http://en.wikipedia.org/wiki/Miller-Rabin_primality_test\n  -- -- http://en.wikipedia.org/wiki/Lucas_primality_test\n\
    \  -- -- http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n  -- -- http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes_sieve_of_Eratosthenes_primality_test\n\
    \  -- -- http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes_sieve_of_Atkin\n \
    \ -- -- http://en.wikipedia.org/wiki/Sieve_of_Atkin_primality_test\n  -- -- http://en.wikipedia.org/wiki/Sieve_of_Atkin_sieve_of_Atkin\n\
    \  -- -- http://en.wikipedia.org/wiki/Sieve_of_Atkin_sieve_of_Atkin_primality_test\n\
    \  -- -- http://en.wikipedia.org/wiki/Sieve_of_Atkin_sieve_of_Atkin_sieve_of_Atkin\n\
    \  -- -- http://en.wikipedia.org/wiki/Sieve_of_Atkin_sieve_of_Atkin_sieve_of_Atkin_primality_test\n\
    \  -- -- http://en.wikipedia.org/wiki/Sieve_of_Atkin_sieve_of_Atkin_sieve_of_Atkin_sieve_of_Atkin\n\
    \  -- -- http://en.wikipedia.org/wiki/Sieve_of_Atkin_sieve_of_Atkin_sieve_of_Atkin_sieve_of_Atkin_primality_test\n\
    \  -- -- http://en.wikipedia.org/wiki/Sieve_of_Atkin_sieve_of_Atkin_sieve_of_Atkin_sieve_of_Atkin_sieve_of_Atkin\n\
    \  -- -- http://en.wikipedia.org/wiki/Sieve_of_Atkin_sieve_of_Atkin_sieve_of_Atkin_sieve_of_Atkin_sieve_of_Atkin_sieve_of_Atkin\n\
    \  -- -- http://en.wikipedia.org/wiki/Sieve_of_Atkin_sieve_of_Atkin_sieve_of_Atkin_sieve_of_Atkin_sieve_of_Atkin_sieve_of_Atkin_sieve_of_Atkin_sieve_of_Atkin\n\
    \  -- -- http://en.wikipedia.org/wiki/Sieve_of_Atkin_sie\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmru838in.lua:58: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd-even primality\
    \ of n\n  local function is_odd_prime(n)\n    if n < 2 then\n      return false\n\
    \    end\n    if n == 2 then\n      return true\n    end\n    if n % 2 == 0 then\n\
    \      return false\n    end\n    local function is_odd_prime_helper(n)\n    \
    \  if n < 2 then\n        return false\n      end\n      if n == 2 then\n    \
    \    return true\n      end\n      if n % 2 == 0 then\n        return false\n\
    \      end\n      local function is_odd_prime_helper(n)\n        if n < 2 then\n\
    \          return false\n        end\n        if n == 2 then\n          return\
    \ true\n        end\n        if n % 2 == 0 then\n          return false\n    \
    \    end\n        local function is_odd_prime_helper(n)\n          if n < 2 then\n\
    \            return false\n          end\n          if n == 2 then\n         \
    \   return true\n          end\n          if n % 2 == 0 then\n            return\
    \ false\n          end\n          local function is_odd_prime_helper(n)\n    \
    \        if n < 2 then\n              return false\n            end\n        \
    \    if n == 2 then\n              return true\n            end\n            if\
    \ n % 2 == 0 then\n              return false\n            end\n            return\
    \ not is_odd_prime_helper(n - 2)\n          end\n          return is_odd_prime_helper(n\
    \ - 2)\n        end\n        return is_odd_prime_helper(n - 2)\n      end\n  \
    \    return is_odd_prime_helper(n - 2)\n    end\n    return is_odd_prime_helper(n\
    \ - 2)\n  end\n  return is_odd_prime(n)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpalzvyi6q.lua:94:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpalzvyi6q.lua:94:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Primality test. Returns true if n is prime, and false otherwise.\n  -- >>>\
    \ is_prime(6)\n  -- false\n  -- >>> is_prime(101)\n  -- true\n  -- >>> is_prime(11)\n\
    \  -- true\n  -- >>> is_prime(13441)\n  -- true\n  -- >>> is_prime(61)\n  -- true\n\
    \  -- >>> is_prime(4)\n  -- false\n  -- >>> is_prime(1)\n  -- false\n  if n ==\
    \ 1 then return false end\n  if n == 2 then return true end\n  if n % 2 == 0 then\
    \ return false end\n  -- Test if n is divisible by 3 or 5.\n  if n % 3 == 0 then\
    \ return false end\n  if n % 5 == 0 then return false end\n  -- Test if n is divisible\
    \ by 3 or 5 but not by 11.\n  if n % 3 == 0 then return false end\n  if n % 5\
    \ == 0 then return false end\n  if n % 11 == 0 then return false end\n  -- If\
    \ n is divisible by 3 or 5, then it is prime.\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwxv_hjeh.lua:51:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwxv_hjeh.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case\n  if n < 2 then\n    return false\n  end\n  -- Check factors\n\
    \  for i = 2, n do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphwpntrjz.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphwpntrjz.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Prime numbers are greater than 1 and divisible by 3.\n  -- See http://en.wikipedia.org/wiki/Prime_number\n\
    \  return n > 1 and n % 3 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqpwbqee.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptqpwbqee.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  local\
    \ i\n  for i = 5, n, 1 do\n    if n % i == 0 then return false end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnpiwjp_3.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnpiwjp_3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\n\
    \  local function is_odd(n)\n    return not n % 2\n  end\n  local function is_even(n)\n\
    \    return n % 2 == 0\n  end\n  -- Check divisibility by 3 and 5\n  local function\
    \ is_divisible_by_3_or_5(n)\n    return not n % 3 or not n % 5\n  end\n  -- Check\
    \ divisibility by 3 and 5\n  local function is_divisible_by_3_or_5(n)\n    return\
    \ not n % 3 or not n % 5\n  end\n  -- Check divisibility by 5\n  local function\
    \ is_divisible_by_5(n)\n    return not n % 5\n  end\n  -- Check divisibility by\
    \ 7\n  local function is_divisible_by_7(n)\n    return not n % 7\n  end\n  --\
    \ Check divisibility by 11\n  local function is_divisible_by_11(n)\n    return\
    \ not n % 11\n  end\n  -- Check divisibility by 13\n  local function is_divisible_by_13(n)\n\
    \    return not n % 13\n  end\n  -- Check divisibility by 17\n  local function\
    \ is_divisible_by_17(n)\n    return not n % 17\n  end\n  -- Check divisibility\
    \ by 19\n  local function is_divisible_by_19(n)\n    return not n % 19\n  end\n\
    \  -- Check divisibility by 23\n  local function is_divisible_by_23(n)\n    return\
    \ not n % 23\n  end\n  -- Check divisibility by 29\n  local function is_divisible_by_29(n)\n\
    \    return not n % 29\n  end\n  -- Check divisibility by 31\n  local function\
    \ is_divisible_by_31(n)\n    return not n % 31\n  end\n  -- Check divisibility\
    \ by 37\n  local function is_divisible_by_37(n)\n    return not n % 37\n  end\n\
    \  -- Check divisibility by 41\n  local function is_divisible_by_41(n)\n    return\
    \ not n % 41\n  end\n  -- Check divisibility by 43\n  local function is_divisible_by_43(n)\n\
    \    return not n % 43\n  end\n  -- Check divisibility by 47\n  local function\
    \ is_divisible_by_47(n)\n    return not n % 47\n  end\n  -- Check divisibility\
    \ by 53\n  local function is_divisible_by_53(n)\n    return not n % 53\n  end\n\
    \  -- Check divisibility by 59\n  local function is_divisible_by_59\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx4bboui8.lua:99: ''('' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers for primeness\n  local i = 3\n  while i <= math.sqrt(n) do\n    if n\
    \ % i == 0 then\n      return false\n    end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return true end\n  if n % 2 ==\
    \ 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0 or n == 1 or n == 0 then\n    return\
    \ false\n  end\n  local i = 3\n  while i <= math.sqrt(n) do\n    if n % i == 0\
    \ then return false end\n    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphif7r6ni.lua:46:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphif7r6ni.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers since they are special cases.\n  if n % 3 == 0 then\n    return false\n\
    \  end\n  if n % 5 == 0 then\n    return false\n  end\n  -- Check all the numbers\
    \ from 3 to sqrt(n).\n  for i = 4, math.floor(math.sqrt(n)) + 1, 2 do\n    if\
    \ n % i == 0 then\n      return false\n    end\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm5ruza97.lua:52:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm5ruza97.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers for primeness\n  local function is_odd_or_even(n)\n    return n % 2\
    \ == 0 or n % 2 == 1\n  end\n  -- Check odd numbers for primeness\n  local function\
    \ is_odd(n)\n    return n % 2 == 1\n  end\n  -- Check even numbers for primeness\n\
    \  local function is_even(n)\n    return n % 2 == 0\n  end\n  -- Check odd numbers\
    \ for primeness\n  local function is_odd_or_even(n)\n    return n % 2 == 0 or\
    \ n % 2 == 1\n  end\n  -- Check even numbers for primeness\n  local function is_even(n)\n\
    \    return n % 2 == 0\n  end\n  -- Check odd numbers for primeness\n  local function\
    \ is_odd_or_even(n)\n    return n % 2 == 0 or n % 2 == 1\n  end\n  -- Check even\
    \ numbers for primeness\n  local function is_even(n)\n    return n % 2 == 0\n\
    \  end\n  -- Check odd numbers for primeness\n  local function is_odd_or_even(n)\n\
    \    return n % 2 == 0 or n % 2 == 1\n  end\n  -- Check even numbers for primeness\n\
    \  local function is_even(n)\n    return n % 2 == 0\n  end\n  -- Check odd numbers\
    \ for primeness\n  local function is_odd_or_even(n)\n    return n % 2 == 0 or\
    \ n % 2 == 1\n  end\n  -- Check even numbers for primeness\n  local function is_even(n)\n\
    \    return n % 2 == 0\n  end\n  -- Check odd numbers for primeness\n  local function\
    \ is_odd_or_even(n)\n    return n % 2 == 0 or n % 2 == 1\n  end\n  -- Check even\
    \ numbers for primeness\n  local function is_even(n)\n    return n % 2 == 0\n\
    \  end\n  -- Check odd numbers for primeness\n  local function is_odd_or_even(n)\n\
    \    return n % 2 == 0 or n % 2 == 1\n  end\n  -- Check even numbers for primeness\n\
    \  local function is_even(n)\n    return n % 2 == 0\n  end\n  -- Check odd numbers\
    \ for primeness\n  local function is_odd_or_even(n)\n    return n % 2 == 0 or\
    \ n % 2 == 1\n  end\n  -- Check even numbers for primeness\n  local function is_even(n)\n\
    \    return n % 2 == 0\n  end\n  -- Check odd number\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplcw4y04_.lua:114: ''end'' expected (to close ''function''
    at line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that a prime number greater than 1 has only\
    \ two distinct prime factors: 1 and itself.\n  -- >>> is_prime(6)\n  -- true\n\
    \  -- >>> is_prime(7)\n  -- false\n  -- >>> is_prime(8)\n  -- false\n  -- >>>\
    \ is_prime(9)\n  -- true\n  -- >>> is_prime(10)\n  -- false\n  -- >>> is_prime(11)\n\
    \  -- false\n  -- >>> is_prime(12)\n  -- false\n  -- >>> is_prime(13)\n  -- false\n\
    \  -- >>> is_prime(14)\n  -- false\n  -- >>> is_prime(15)\n  -- false\n  -- >>>\
    \ is_prime(16)\n  -- false\n  -- >>> is_prime(17)\n  -- false\n  -- >>> is_prime(18)\n\
    \  -- false\n  -- >>> is_prime(19)\n  -- false\n  -- >>> is_prime(20)\n  -- false\n\
    \  -- >>> is_prime(21)\n  -- false\n  -- >>> is_prime(22)\n  -- false\n  -- >>>\
    \ is_prime(23)\n  -- false\n  -- >>> is_prime(24)\n  -- false\n  -- >>> is_prime(25)\n\
    \  -- false\n  -- >>> is_prime(26)\n  -- false\n  -- >>> is_prime(27)\n  -- false\n\
    \  -- >>> is_prime(28)\n  -- false\n  -- >>> is_prime(29)\n  -- false\n  -- >>>\
    \ is_prime(30)\n  -- false\n  -- >>> is_prime(31)\n  -- false\n  -- >>> is_prime(32)\n\
    \  -- false\n  -- >>> is_prime(33)\n  -- false\n  -- >>> is_prime(34)\n  -- false\n\
    \  -- >>> is_prime(35)\n  -- false\n  -- >>> is_prime(36)\n  -- false\n  -- >>>\
    \ is_prime(37)\n  -- false\n  -- >>> is_prime(38)\n  -- false\n  -- >>> is_prime(39)\n\
    \  -- false\n  -- >>> is_prime(40)\n  -- false\n  -- >>> is_prime(41)\n  -- false\n\
    \  -- >>> is_prime(42)\n  -- false\n  -- >>> is_prime(43)\n  -- false\n  -- >>>\
    \ is_prime(44)\n  -- false\n  -- >>> is_prime\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphxou94xf.lua:116: ''end'' expected (to close ''function''
    at line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  local\
    \ i = 3\n  while i <= math.sqrt(n) do\n    if n % i == 0 then return false end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that every positive integer greater than\
    \ 1 that has no positive divisors other than 1 and itself is prime.\n  -- The\
    \ first prime number is named 2.\n  -- >>> is_prime(2)\n  -- true\n  -- >>> is_prime(7)\n\
    \  -- false\n  -- >>> is_prime(11)\n  -- false\n  -- >>> is_prime(13)\n  -- false\n\
    \  -- >>> is_prime(14)\n  -- false\n  -- >>> is_prime(15)\n  -- false\n  -- >>>\
    \ is_prime(16)\n  -- false\n  -- >>> is_prime(17)\n  -- false\n  -- >>> is_prime(18)\n\
    \  -- false\n  -- >>> is_prime(19)\n  -- false\n  -- >>> is_prime(20)\n  -- false\n\
    \  -- >>> is_prime(21)\n  -- false\n  -- >>> is_prime(23)\n  -- false\n  -- >>>\
    \ is_prime(29)\n  -- false\n  -- >>> is_prime(30)\n  -- false\n  -- >>> is_prime(100)\n\
    \  -- false\n  -- >>> is_prime(101)\n  -- false\n  -- >>> is_prime(102)\n  --\
    \ false\n  -- >>> is_prime(103)\n  -- false\n  -- >>> is_prime(104)\n  -- false\n\
    \  -- >>> is_prime(105)\n  -- false\n  -- >>> is_prime(106)\n  -- false\n  --\
    \ >>> is_prime(107)\n  -- false\n  -- >>> is_prime(108)\n  -- false\n  -- >>>\
    \ is_prime(109)\n  -- false\n  -- >>> is_prime(115)\n  -- false\n  -- >>> is_prime(123)\n\
    \  -- false\n  -- >>> is_prime(124)\n  -- false\n  -- >>> is_prime(125)\n  --\
    \ false\n  -- >>> is_prime(126)\n  -- false\n  -- >>> is_prime(127)\n  -- false\n\
    \  -- >>> is_prime(128)\n  -- false\n  -- >>> is_prime(129)\n  -- false\n  --\
    \ >>> is_prime(130)\n  -- false\n  -- >>> is_prime(131)\n  -- false\n  -- >>>\
    \ is_prime(132)\n  -- false\n  -- >>> is_prime(133)\n  -- false\n  -- >>> is_prime(134)\n\
    \  -- \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8jba0k4n.lua:114: ''end'' expected (to close ''function''
    at line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that every positive integer greater than\
    \ 1 that has no positive divisors other than 1 and itself is prime can be factored\
    \ into exactly one positive integer. For example, 6 is prime since it can be factored\
    \ into 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, \u2026 It should be noted that 2, 3,\
    \ 5, 7, 11, \u2026 are not considered to be prime since they are divisible by\
    \ 4.\n  -- Source: http://en.wikipedia.org/wiki/Prime_number_theorem\n  -- Source:\
    \ http://en.wikipedia.org/wiki/Primality_test\n  -- Source: http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computer_science\n\
    \  -- Source: http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computer_science\n\
    \  -- Source: http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computer_science\n\
    \  -- Source: http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computer_science\n\
    \  -- Source: http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computer_science\n\
    \  -- Source: http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computer_science\n\
    \  -- Source: http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computer_science\n\
    \  -- Source: http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computer_science\n\
    \  -- Source: http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computer_science\n\
    \  -- Source: http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computer_science\n\
    \  -- Source: http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computer_science\n\
    \  -- Source: http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computer_science\n\
    \  -- Source: http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computer_science\n\
    \  -- Source: http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computer_science\n\
    \  -- Source: http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computer_science\n\
    \  -- Source: http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computer_science\n\
    \  -- Source: http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computer_science\n\
    \  -- Source: http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computer_science\n\
    \  -- Source: http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computer_science\n\
    \  -- Source: http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computer_science\n\
    \  -- Source: http://en.wikipedia.org/wiki/Primality_test#Primal\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzjglkdov.lua:60: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return true end\n  if n == 2\
    \ then return false end\n  if n == 3 then return false end\n  if n == 4 then return\
    \ false end\n  if n == 5 then return false end\n  if n == 6 then return false\
    \ end\n  if n == 7 then return false end\n  if n == 8 then return false end\n\
    \  if n == 9 then return false end\n  if n % 11 == 0 then return false end\n \
    \ if n % 13 == 0 then return false end\n  if n % 17 == 0 then return false end\n\
    \  if n % 19 == 0 then return false end\n  if n % 23 == 0 then return false end\n\
    \  if n % 29 == 0 then return false end\n  if n % 31 == 0 then return false end\n\
    \  if n % 37 == 0 then return false end\n  if n % 41 == 0 then return false end\n\
    \  if n % 43 == 0 then return false end\n  if n % 47 == 0 then return false end\n\
    \  if n % 53 == 0 then return false end\n  if n % 59 == 0 then return false end\n\
    \  if n % 61 == 0 then return false end\n  if n % 67 == 0 then return false end\n\
    \  if n % 71 == 0 then return false end\n  if n % 73 == 0 then return false end\n\
    \  if n % 79 == 0 then return false end\n  if n % 83 == 0 then return false end\n\
    \  if n % 89 == 0 then return false end\n  if n % 97 == 0 then return false end\n\
    \  if n % 101 == 0 then return false end\n  if n % 103 == 0 then return false\
    \ end\n  if n % 107 == 0 then return false end\n  if n % 111 == 0 then return\
    \ false end\n  if n % 117 == 0 then return false end\n  if n % 121 == 0 then return\
    \ false end\n  if n % 127 == 0 then return false end\n  if n % 131 == 0 then return\
    \ false end\n  if n % 137 == 0 then return false end\n  if n % 141 == 0 then return\
    \ false end\n  if n % 147 == 0 then return false end\n  if n % 151 == 0 then return\
    \ false end\n  if n % 157 == 0 then return false end\n  if n % 161 == 0 then return\
    \ false end\n  if n % 167 == 0 then return false end\n  if n % 171 == 0 then return\
    \ false end\n  if n % 177 == 0 then return false \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpafsl3omo.lua:71: ''end'' expected (to close ''if'' at line
    70) near ''lu''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- If n is evenly divisible\
    \ by 2, then it can only be prime if it\n  -- is also evenly divisible by 3.\n\
    \  if n % 2 == 0 then\n    if n % 3 == 0 then\n      return false\n    end\n \
    \ end\n  -- If n is evenly divisible by 3, then it can only be prime if it\n \
    \ -- is also evenly divisible by 5.\n  if n % 3 == 0 then\n    if n % 5 == 0 then\n\
    \      return false\n    end\n  end\n  -- If n is evenly divisible by 5, then\
    \ it can only be prime if it\n  -- is also evenly divisible by 7.\n  if n % 5\
    \ == 0 then\n    if n % 7 == 0 then\n      return false\n    end\n  end\n  --\
    \ If n is evenly divisible by 7, then it can only be prime if it\n  -- is also\
    \ evenly divisible by 11.\n  if n % 7 == 0 then\n    if n % 11 == 0 then\n   \
    \   return false\n    end\n  end\n  -- If n is evenly divisible by 11, then it\
    \ can only be prime if it\n  -- is also evenly divisible by 13.\n  if n % 11 ==\
    \ 0 then\n    if n % 13 == 0 then\n      return false\n    end\n  end\n  -- If\
    \ n is evenly divisible by 13, then it can only be prime if it\n  -- is also evenly\
    \ divisible by 17.\n  if n % 13 == 0 then\n    if n % 17 == 0 then\n      return\
    \ false\n    end\n  end\n  -- If n is evenly divisible by 17, then it can only\
    \ be prime if it\n  -- is also evenly divisible by 19.\n  if n % 17 == 0 then\n\
    \    if n % 19 == 0 then\n      return false\n    end\n  end\n  -- If n is evenly\
    \ divisible by 19, then it can only be prime if it\n  -- is also evenly divisible\
    \ by 23.\n  if n % 19 == 0 then\n    if n % 23 == 0 then\n      return false\n\
    \    end\n  end\n  -- If n is evenly divisible by 23, then it can only be prime\
    \ if it\n  -- is also evenly divisible by 29.\n  if n % 23 == 0 then\n    if n\
    \ % 29 == 0 then\n      return false\n    end\n  end\n  -- If n is evenly divisible\
    \ by 29, then it can only be prime if it\n  -- is also evenly divisible by 31.\n\
    \  if n % 29 == 0 \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz0rfyppf.lua:92: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test\n  -- http://primes.utm.edu/lists/small/millions/\n\
    \  -- http://primes.utm.edu/lists/small/millions/test.html\n  -- http://primes.utm.edu/lists/small/millions/large/\n\
    \  -- http://primes.utm.edu/lists/small/millions/large/test.html\n  -- http://primes.utm.edu/lists/small/millions/medium/\n\
    \  -- http://primes.utm.edu/lists/small/millions/medium/test.html\n  -- http://primes.utm.edu/lists/small/millions/small/\n\
    \  -- http://primes.utm.edu/lists/small/millions/small/test.html\n  -- http://primes.utm.edu/lists/small/millions/medium/large/\n\
    \  -- http://primes.utm.edu/lists/small/millions/medium/large/test.html\n  --\
    \ http://primes.utm.edu/lists/small/millions/medium/small/\n  -- http://primes.utm.edu/lists/small/millions/medium/small/test.html\n\
    \  -- http://primes.utm.edu/lists/small/millions/large/medium/\n  -- http://primes.utm.edu/lists/small/millions/large/medium/test.html\n\
    \  -- http://primes.utm.edu/lists/small/millions/large/small/\n  -- http://primes.utm.edu/lists/small/millions/large/small/test.html\n\
    \  -- http://primes.utm.edu/lists/small/millions/medium/medium/\n  -- http://primes.utm.edu/lists/small/millions/medium/medium/test.html\n\
    \  -- http://primes.utm.edu/lists/small/millions/medium/small/large/\n  -- http://primes.utm.edu/lists/small/millions/medium/small/large/test.html\n\
    \  -- http://primes.utm.edu/lists/small/millions/medium/small/small/\n  -- http://primes.utm.edu/lists/small/millions/medium/small/small/test.html\n\
    \  -- http://primes.utm.edu/lists/small/millions/large/medium/large/\n  -- http://primes.utm.edu/lists/small/millions/large/medium/large/test.html\n\
    \  -- http://primes.utm.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpecfx1u8e.lua:62: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 3 then return true end\n  if n == 5\
    \ then return true end\n  if n == 7 then return true end\n  if n == 9 or n ==\
    \ 11 or n == 13 or n == 17 or n == 19 or n == 23 or n == 29 or n == 31 or n ==\
    \ 37 or n == 43\n  or n == 47 or n == 53 or n == 59 or n == 61 or n == 67 or n\
    \ == 73 or n == 79 or n == 87 or n == 97 then return true\n  else return false\
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7pbpu22k.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7pbpu22k.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Primality test. Based on the algorithm by Damgar & Johnson.\n  -- http://mathworld.wolfram.com/PrimalityTest.html\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test\n  -- http://primes.utm.edu/lists/small/1000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000.txt\n  -- http://primes.utm.edu/lists/small/1000001.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000.txt\n  -- http://primes.utm.edu/lists/small/1000000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000.txt\n  -- http://primes.utm.edu/lists/small/1000000000000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000000000.txt\n  -- http://primes.utm.edu/lists/small/100000000000000000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/100000000000000000000000.txt\n  -- http://primes.utm.edu/lists/small/100000000000000000000000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000000000.txt\n  --\
    \ http://primes.utm.edu/lists/small/10000000000000000000000000000000.txt\n  --\
    \ http://primes.utm.edu/lists/small/1000000000000000000000000000000000.txt\n \
    \ -- http://primes.utm.edu/lists/small/10000000000000000000000000000000001.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000000000000010.txt\n\
    \  -- http://primes.utm.edu/lists/small/100000000000000000000000000000000100.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000000000000000000000001000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000000000000010000.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000000000000000000000001000001.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000000000000010000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000000000000000000000001000000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000000000000010000000001.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000000000000000000000001000000000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000000000000000000000001000000000000000.txt\n\
    \  -- http://primes.utm.edu/list\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpoz36acd6.lua:65: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Primality testing is based on the Miller-Rabin primality test.\n  -- See\
    \ https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test\n  -- The\
    \ test is as follows:\n  --\n  --   Let x = 2\n  --   Let y = n - 1\n  --   Repeat\
    \ while y != 1:\n  --     If (x % y) == 0 then return false\n  --     Let y =\
    \ y \xF7 2\n  --   Return true\n  --\n  -- The algorithm is stable and will terminate\
    \ for large n (where n is\n  -- a prime).\n  --\n  -- The algorithm is based on:\n\
    \  --\n  --   http://en.wikipedia.org/wiki/Primality_test\n  --\n  -- The algorithm\
    \ is based on the following observations:\n  --\n  --   1. If x is even, then\n\
    \  --     a. x is prime if and only if n is even.\n  --\n  --   2. If x is odd,\
    \ then\n  --     a. x is prime if and only if n is odd.\n  --\n  --   3. If n\
    \ is even, then x is odd.\n  --\n  --   4. If n is odd, then x is even.\n  --\n\
    \  --   5. If n is odd, then x is odd.\n  --\n  --   6. If n is even, then x is\
    \ odd.\n  --\n  --   7. If n is even, then x is even.\n  --\n  --   8. If n is\
    \ odd, then x is odd.\n  --\n  --   9. x is odd.\n  --\n  -- The algorithm is\
    \ based on:\n  --\n  --   1. http://en.wikipedia.org/wiki/Primality_test#Naive_methods\n\
    \  --\n  --   2. http://primes.utm.edu/prove/prove2_3.html\n  --\n  --   3. http://primes.utm.edu/prove/prove2_5.html\n\
    \  --\n  --   4. http://primes.utm.edu/prove/prove2_7.html\n  --\n  --   5. http://primes.utm.edu/prove/prove2_8.html\n\
    \  --\n  --   6. http://primes.utm.edu/prove/prove2_9.html\n  --\n  --   7. http://primes.utm.edu/prove/prove2_10.html\n\
    \  --\n  --   8. http://primes.utm.edu/prove/prove2_11.html\n  --\n  --   9. http://primes.utm.edu/prove/prove2_12.html\n\
    \  --\n  -- The \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps1n4jq5p.lua:97: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd-even number\n\
    \  if n % 2 == 1 then\n    return false\n  end\n  -- Check odd-even number\n \
    \ if n % 3 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if\
    \ n % 5 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n\
    \ % 7 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 11 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 13 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 17 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 19 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 23 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 29 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 31 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 37 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 41 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 43 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 47 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 53 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 59 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 61 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 67 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 71 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 73 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 79 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 83 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 89 == 0 then\n    return false\n  end\n  -- Check \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl5gi47ek.lua:142: ''end'' expected (to close ''function''
    at line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 1 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  for i = 3, math.floor(n/2), 2 do\n    if n %\
    \ i == 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Test if n is evenly\
    \ divisible by 3\n  if n % 3 == 0 then\n    return false\n  end\n  -- Test if\
    \ n is evenly divisible by 5\n  if n % 5 == 0 then\n    return false\n  end\n\
    \  -- Test if n is evenly divisible by 7\n  if n % 7 == 0 then\n    return false\n\
    \  end\n  -- Test if n is evenly divisible by 11\n  if n % 11 == 0 then\n    return\
    \ false\n  end\n  -- Test if n is evenly divisible by 13\n  if n % 13 == 0 then\n\
    \    return false\n  end\n  -- Test if n is evenly divisible by 17\n  if n % 17\
    \ == 0 then\n    return false\n  end\n  -- Test if n is evenly divisible by 19\n\
    \  if n % 19 == 0 then\n    return false\n  end\n  -- Test if n is evenly divisible\
    \ by 23\n  if n % 23 == 0 then\n    return false\n  end\n  -- Test if n is evenly\
    \ divisible by 29\n  if n % 29 == 0 then\n    return false\n  end\n  -- Test if\
    \ n is evenly divisible by 31\n  if n % 31 == 0 then\n    return false\n  end\n\
    \  -- Test if n is evenly divisible by 37\n  if n % 37 == 0 then\n    return false\n\
    \  end\n  -- Test if n is evenly divisible by 41\n  if n % 41 == 0 then\n    return\
    \ false\n  end\n  -- Test if n is evenly divisible by 43\n  if n % 43 == 0 then\n\
    \    return false\n  end\n  -- Test if n is evenly divisible by 47\n  if n % 47\
    \ == 0 then\n    return false\n  end\n  -- Test if n is evenly divisible by 53\n\
    \  if n % 53 == 0 then\n    return false\n  end\n  -- Test if n is evenly divisible\
    \ by 59\n  if n % 59 == 0 then\n    return false\n  end\n  -- Test if n is evenly\
    \ divisible by 61\n  if n % 61 == 0 then\n    return false\n  end\n  -- Test if\
    \ n is evenly divisible by 67\n  if n % 67 == 0 then\n    return false\n  end\n\
    \  -- Test if n is evenly divisible by 71\n  if n % 71 == 0 then\n    return false\n\
    \  end\n  -- Test if n is even\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp23qp4ppr.lua:122: ''end'' expected (to close ''function''
    at line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Prime numbers are greater than 1 and divisible by 3.\n  if n < 1 then return\
    \ false end\n  if n % 3 == 0 then return false end\n  -- Check all odd numbers\
    \ up to sqrt(n).\n  for i = 2, math.floor(math.sqrt(n)) + 1 do\n    if n % i ==\
    \ 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8o8mvuj.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpv8o8mvuj.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case\n  if n < 2 then return false end\n  -- If n is even, return false\
    \ right away\n  if n % 2 == 0 then return false end\n  -- If n is odd, return\
    \ true after checking for all odd divisors up to n\n  for i = 3, math.floor(n/2),\
    \ 2 do\n    if n % i == 0 then return false end\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750246
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local m = math.floor(n/2)\n\
    \  for i = 2, m do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750246
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return false end\n  if n % 2\
    \ == 0 and n % 3 == 0 and n % 5 == 0 and n % 7 == 0 then\n    return false\n \
    \ end\n  local i = 3\n  while i <= math.sqrt(n) do\n    if n % i == 0 then\n \
    \     return false\n    end\n    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o82toes.lua:48:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3o82toes.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return false end\n  if n % 2\
    \ == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0 or n == 1 or n == 0 then return\
    \ false end\n  for i = 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139,\
    \ 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229,\
    \ 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,\
    \ 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421,\
    \ 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521,\
    \ 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619,\
    \ 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733,\
    \ 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839,\
    \ 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953,\
    \ 967, 971, 977, 983, 991, 997\n    do\n      if n % i == 0 then return false\
    \ end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwwlo7dgc.lua:26: ''do'' expected near '',''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/100003.txt\n  -- http://primes.utm.edu/lists/small/100004.txt\n\
    \  -- http://primes.utm.edu/lists/small/100005.txt\n  -- http://primes.utm.edu/lists/small/100006.txt\n\
    \  -- http://primes.utm.edu/lists/small/100007.txt\n  -- http://primes.utm.edu/lists/small/100008.txt\n\
    \  -- http://primes.utm.edu/lists/small/100009.txt\n  -- http://primes.utm.edu/lists/small/100010.txt\n\
    \  -- http://primes.utm.edu/lists/small/100011.txt\n  -- http://primes.utm.edu/lists/small/100013.txt\n\
    \  -- http://primes.utm.edu/lists/small/100014.txt\n  -- http://primes.utm.edu/lists/small/100015.txt\n\
    \  -- http://primes.utm.edu/lists/small/100016.txt\n  -- http://primes.utm.edu/lists/small/100017.txt\n\
    \  -- http://primes.utm.edu/lists/small/100018.txt\n  -- http://primes.utm.edu/lists/small/100019.txt\n\
    \  -- http://primes.utm.edu/lists/small/100020.txt\n  -- http://primes.utm.edu/lists/small/100024.txt\n\
    \  -- http://primes.utm.edu/lists/small/100025.txt\n  -- http://primes.utm.edu/lists/small/100026.txt\n\
    \  -- http://primes.utm.edu/lists/small/100027.txt\n  -- http://primes.utm.edu/lists/small/100028.txt\n\
    \  -- http://primes.utm.edu/lists/small/100029.txt\n  -- http://primes.utm.edu/lists/small/100032.txt\n\
    \  -- http://primes.utm.edu/lists/small/100033.txt\n  -- http://primes.utm.edu/lists/small/100034.txt\n\
    \  -- http://primes.utm.edu/lists/small/100035.txt\n  -- http://primes.utm.edu/lists/small/100036.txt\n\
    \  -- http://primes.utm.edu/lists/small/100037.txt\n  -- http://primes.utm.edu/lists/small/100038.txt\n\
    \  -- http://primes.utm.edu/\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm_ps2aeq.lua:69: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local m = math.floor(math.sqrt(n))\n\
    \  for i = 2, m do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  for i=3,math.floor(n/2),2 do\n    if n % i ==\
    \ 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750246
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case: n is 0 or 1.\n  if n == 0 or n == 1 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy95esggm.lua:40: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Test if n is prime.\n\
    \  local i = 3\n  while i * i <= n do\n    if n % i == 0 then\n      return false\n\
    \    end\n    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750246
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that every positive integer greater than\
    \ 1 that has no positive divisors other than 1 is a prime number.\n  -- http://en.wikipedia.org/wiki/Prime_number_theorem\n\
    \  -- http://mathworld.wolfram.com/PrimeNumbers.html\n  -- http://primes.utm.edu/lists/small/1000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000.txt\n  -- http://primes.utm.edu/lists/small/1000003.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000007.txt\n  -- http://primes.utm.edu/lists/small/100000011.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000007.txt\n  -- http://primes.utm.edu/lists/small/10000000011.txt\n\
    \  -- http://primes.utm.edu/lists/small/100000000007.txt\n  -- http://primes.utm.edu/lists/small/1000000000011.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000007.txt\n  -- http://primes.utm.edu/lists/small/1000000000000011.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000007.txt\n  -- http://primes.utm.edu/lists/small/100000000000000011.txt\n\
    \  -- http://primes.utm.edu/lists/small/100000000000000007.txt\n  -- http://primes.utm.edu/lists/small/1000000000000000011.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000007.txt\n  -- http://primes.utm.edu/lists/small/100000000000000000011.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000000000007.txt\n  -- http://primes.utm.edu/lists/small/100000000000000000000011.txt\n\
    \  -- http://primes.utm.edu/lists/small/100000000000000000000007.txt\n  -- http://primes.utm.edu/lists/small/10000000000000000000000011.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000007.txt\n  -- http://primes.utm.edu/lists/small/100000000000000000000000011.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000000000000000007.txt\n  --\
    \ http://primes.utm.edu/lists/small/10000000000000000000000000011.txt\n  -- http://primes.utm.edu/lists/small/100000000000000000000000000007.txt\n\
    \  -- http://primes.utm.edu/lists/\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr0006e40.lua:66: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case: n is 0 or 1.\n  if n == 0 or n == 1 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy95esggm.lua:40: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i * i <= n do\n    if n\
    \ % i == 0 then return false end\n    i = i + 2\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750246
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- If n is less than or equal to 1, then n is prime.\n  if n <= 1 then return\
    \ true end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqugzcn_t.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 141 == 0 then return false end\n  if n % 147 == 0 then return\
    \ false end\n  if n % 151 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 167 == 0 then return\
    \ false end\n  if n % 173 == 0 then return false end\n  if n % 179 == 0 then return\
    \ false end\n  if n % 183 == 0 then return false end\n  if n % 191 == 0 then return\
    \ false end\n  if n % 197 == 0 then return false end\n  if n % 201 == 0 then return\
    \ false end\n  if n % 207 == 0 then return false end\n  if n % 211 == 0 then return\
    \ false end\n  if n % 215 == 0 then return false end\n  if n % 219 == 0 then return\
    \ false \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps84bzinr.lua:69: ''end'' expected (to close ''if'' at line
    68) near ''lu''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers\n  if n % 3 == 0 then\n    return false\n  end\n  -- Check divisible\
    \ by 3 and 5\n  if n % 5 == 0 then\n    return false\n  end\n  -- Check divisible\
    \ by 3 and 5\n  if n % 7 == 0 then\n    return false\n  end\n  -- Check divisible\
    \ by 11\n  if n % 11 == 0 then\n    return false\n  end\n  -- Check divisible\
    \ by 13\n  if n % 13 == 0 then\n    return false\n  end\n  -- Check divisible\
    \ by 17\n  if n % 17 == 0 then\n    return false\n  end\n  -- Check divisible\
    \ by 19\n  if n % 19 == 0 then\n    return false\n  end\n  -- Check divisible\
    \ by 23\n  if n % 23 == 0 then\n    return false\n  end\n  -- Check divisible\
    \ by 29\n  if n % 29 == 0 then\n    return false\n  end\n  -- Check divisible\
    \ by 31\n  if n % 31 == 0 then\n    return false\n  end\n  -- Check divisible\
    \ by 37\n  if n % 37 == 0 then\n    return false\n  end\n  -- Check divisible\
    \ by 41\n  if n % 41 == 0 then\n    return false\n  end\n  -- Check divisible\
    \ by 43\n  if n % 43 == 0 then\n    return false\n  end\n  -- Check divisible\
    \ by 47\n  if n % 47 == 0 then\n    return false\n  end\n  -- Check divisible\
    \ by 53\n  if n % 53 == 0 then\n    return false\n  end\n  -- Check divisible\
    \ by 59\n  if n % 59 == 0 then\n    return false\n  end\n  -- Check divisible\
    \ by 61\n  if n % 61 == 0 then\n    return false\n  end\n  -- Check divisible\
    \ by 67\n  if n % 67 == 0 then\n    return false\n  end\n  -- Check divisible\
    \ by 71\n  if n % 71 == 0 then\n    return false\n  end\n  -- Check divisible\
    \ by 73\n  if n % 73 == 0 then\n    return false\n  end\n  -- Check divisible\
    \ by 79\n  if n % 79 == 0 then\n    return false\n  end\n  -- Check divisible\
    \ by 83\n  if n % 83 == 0 then\n    return false\n  end\n  -- Check divisible\
    \ by 89\n  if n % 89 == 0 then\n    return false\n  end\n  -- Check divisible\
    \ by 97\n  if n % 97 == 0 then\n    return false\n  end\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcfdfdopt.lua:142: ''end'' expected (to close ''function''
    at line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n ==\
    \ 1 then return false end\n  if n % 2 == 0 then return false end\n  if n % 3 ==\
    \ 0 then return false end\n  if n % 5 == 0 then return false end\n  if n % 7 ==\
    \ 0 then return false end\n  if n <= 122 then return true end\n  if n <= 65535\
    \ then return false end\n  if n <= 0xFFFF then return false end\n  if n <= 0xFFFFFFFF\
    \ then return false end\n  if n <= 0xFFFFFFFFFFFFFFFF then return false end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt32w9pop.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt32w9pop.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 113 == 0 then return\
    \ false end\n  if n % 117 == 0 then return false end\n  if n % 121 == 0 then return\
    \ false end\n  if n % 1253 == 0 then return false end\n  if n % 127 == 0 then\
    \ return false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0\
    \ then return false end\n  if n % 141 == 0 then return false end\n  if n % 147\
    \ == 0 then return false end\n  if n % 151 == 0 then return false end\n  if n\
    \ % 157 == 0 then return false end\n  if n % 161 == 0 then return false end\n\
    \  if n % 165 == 0 then return false end\n  if n % 167 == 0 then return false\
    \ end\n  if n % 171 == 0 then return false end\n  if n % 177 == 0 then return\
    \ false end\n  if n % 181 == 0 then return false end\n  if n % 187 == 0 then return\
    \ false end\n  if n % 191 == 0 then return false end\n  if n % 193 == 0 then return\
    \ false end\n  if n % 197 == 0 then \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp864mwira.lua:88: ''end'' expected (to close ''if'' at line
    68) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that every positive integer greater than\
    \ 1 that has no positive divisors other than 1 is a prime number.\n  -- http://en.wikipedia.org/wiki/Prime_number_theorem\n\
    \  -- http://oeis.org/A001490\n  -- http://oeis.org/A001492\n  -- http://oeis.org/A001494\n\
    \  -- http://oeis.org/A001495\n  -- http://oeis.org/A001496\n  -- http://oeis.org/A001497\n\
    \  -- http://oeis.org/A001498\n  -- http://oeis.org/A001499\n  -- http://oeis.org/A001500\n\
    \  -- http://oeis.org/A001501\n  -- http://oeis.org/A001502\n  -- http://oeis.org/A001503\n\
    \  -- http://oeis.org/A001504\n  -- http://oeis.org/A001505\n  -- http://oeis.org/A001506\n\
    \  -- http://oeis.org/A001507\n  -- http://oeis.org/A001508\n  -- http://oeis.org/A001509\n\
    \  -- http://oeis.org/A001510\n  -- http://oeis.org/A001511\n  -- http://oeis.org/A001512\n\
    \  -- http://oeis.org/A001513\n  -- http://oeis.org/A001514\n  -- http://oeis.org/A001515\n\
    \  -- http://oeis.org/A001516\n  -- http://oeis.org/A001517\n  -- http://oeis.org/A001518\n\
    \  -- http://oeis.org/A001519\n  -- http://oeis.org/A001520\n  -- http://oeis.org/A001521\n\
    \  -- http://oeis.org/A001522\n  -- http://oeis.org/A001523\n  -- http://oeis.org/A001524\n\
    \  -- http://oeis.org/A001525\n  -- http://oeis.org/A001526\n  -- http://oeis.org/A001527\n\
    \  -- http://oeis.org/A001528\n  -- http://oeis.org/A001529\n  -- http://oeis.org/A001530\n\
    \  -- http://oeis.org/A00\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr5d7j5x6.lua:78: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd-ness of\
    \ candidate.\n  local i = 3\n  while i * i <= n do\n    if n % i == 0 then\n \
    \     return false\n    end\n    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750246
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n ==\
    \ 1 then return false end\n  if n % 2 == 0 then return false end\n  if n % 3 ==\
    \ 0 then return false end\n  if n % 5 == 0 then return false end\n  if n % 7 ==\
    \ 0 then return false end\n  if n % 11 == 0 then return false end\n  if n % 13\
    \ == 0 then return false end\n  if n % 17 == 0 then return false end\n  if n %\
    \ 19 == 0 then return false end\n  if n % 23 == 0 then return false end\n  if\
    \ n % 29 == 0 then return false end\n  if n % 31 == 0 then return false end\n\
    \  if n % 37 == 0 then return false end\n  if n % 41 == 0 then return false end\n\
    \  if n % 43 == 0 then return false end\n  if n % 47 == 0 then return false end\n\
    \  if n % 53 == 0 then return false end\n  if n % 59 == 0 then return false end\n\
    \  if n % 61 == 0 then return false end\n  if n % 67 == 0 then return false end\n\
    \  if n % 71 == 0 then return false end\n  if n % 73 == 0 then return false end\n\
    \  if n % 79 == 0 then return false end\n  if n % 83 == 0 then return false end\n\
    \  if n % 89 == 0 then return false end\n  if n % 97 == 0 then return false end\n\
    \  if n % 101 == 0 then return false end\n  if n % 103 == 0 then return false\
    \ end\n  if n % 107 == 0 then return false end\n  if n % 111 == 0 then return\
    \ false end\n  if n % 117 == 0 then return false end\n  if n % 121 == 0 then return\
    \ false end\n  if n % 127 == 0 then return false end\n  if n % 131 == 0 then return\
    \ false end\n  if n % 137 == 0 then return false end\n  if n % 141 == 0 then return\
    \ false end\n  if n % 147 == 0 then return false end\n  if n % 151 == 0 then return\
    \ false end\n  if n % 157 == 0 then return false end\n  if n % 161 == 0 then return\
    \ false end\n  if n % 167 == 0 then return false end\n  if n % 173 == 0 then return\
    \ false end\n  if n % 179 == 0 then return false end\n  if n % 183 == 0 then return\
    \ false end\n  if n % 187 == 0 then return false end\n  if n % 191 == 0 then return\
    \ false end\n  if n % 197 == 0 then return false end\n  if n % 201 == 0 then return\
    \ false end\n  if n % 207 == 0 then return false end\n  if n % 211 == 0 then return\
    \ false end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp43l2wtom.lua:89: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- If n is even, then\
    \ (n-1)/2 is even.\n  if n % 2 == 1 then\n    return is_prime((n - 1) / 2)\n \
    \ end\n  -- If n is odd, then (n-1)/2 is odd.\n  return not is_prime((n - 1) /\
    \ 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplxguvb3e.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplxguvb3e.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Primality test. Returns true if n is prime and false otherwise.\n  -- >>>\
    \ is_prime(6)\n  -- false\n  -- >>> is_prime(101)\n  -- true\n  -- >>> is_prime(11)\n\
    \  -- true\n  -- >>> is_prime(13441)\n  -- true\n  -- >>> is_prime(61)\n  -- true\n\
    \  -- >>> is_prime(4)\n  -- false\n  -- >>> is_prime(1)\n  -- false\n  if n <=\
    \ 1 then\n    return false\n  end\n  -- Test for divisibility by 2, 3, 5, and\
    \ 7.\n  -- If n is divisible by any number between 2 and 7, then n is prime.\n\
    \  -- If n is divisible by 2, then n is prime.\n  -- If n is divisible by 3, then\
    \ n is prime.\n  -- If n is divisible by 5, then n is prime.\n  -- If n is divisible\
    \ by 7, then n is prime.\n  -- If n is not divisible by any multiple of 2, 3,\
    \ 5, or 7, then n is prime.\n  -- >>> is_prime(6)\n  -- false\n  -- >>> is_prime(101)\n\
    \  -- true\n  -- >>> is_prime(11)\n  -- true\n  -- >>> is_prime(13441)\n  -- true\n\
    \  -- >>> is_prime(61)\n  -- true\n  -- >>> is_prime(4)\n  -- false\n  -- >>>\
    \ is_prime(1)\n  -- false\n  if n % 2 == 0 then\n    return false\n  end\n  if\
    \ n % 3 == 0 then\n    return false\n  end\n  if n % 5 == 0 then\n    return false\n\
    \  end\n  if n % 7 == 0 then\n    return false\n  end\n  -- If n is divisible\
    \ by any number between 2 and 7, then n is prime.\n  -- If n is divisible by 2,\
    \ then n is prime.\n  -- If n is divisible by 3, then n is prime.\n  -- If n is\
    \ divisible by 5, then n is prime.\n  -- If n is divisible by 7, then n is prime.\n\
    \  -- If n is not divisible by any multiple of 2, 3, 5, or 7, then n is prime.\n\
    \  -- >>> is_prime(6)\n  -- false\n  -- >>> is_prime(101)\n  -- true\n  -- >>>\
    \ is_prime(11)\n  -- true\n  -- >>> is_prime(13441)\n  -- true\n  -- >>> is_prime\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6emncyzs.lua:102: ''end'' expected (to close ''function''
    at line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://www.math.rutgers.edu/~leviens/math/primes/odds-and-ends/odd-prime-tests-in-range.html\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computers\n\
    \  -- http://primes.utm.edu/lists/small/10000.txt\n  -- http://www.math.rutgers.edu/~leviens/math/primes/odds-and-ends/odd-prime-tests-in-range.html\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computers\n\
    \  -- http://primes.utm.edu/lists/small/10000.txt\n  -- http://www.math.rutgers.edu/~leviens/math/primes/odds-and-ends/odd-prime-tests-in-range.html\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computers\n\
    \  -- http://primes.utm.edu/lists/small/10000.txt\n  -- http://www.math.rutgers.edu/~leviens/math/primes/odds-and-ends/odd-prime-tests-in-range.html\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computers\n\
    \  -- http://primes.utm.edu/lists/small/10000.txt\n  -- http://www.math.rutgers.edu/~leviens/math/primes/odds-and-ends/odd-prime-tests-in-range.html\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computers\n\
    \  -- http://primes.utm.edu/lists/small/10000.txt\n  -- http://www.math.rutgers.edu/~leviens/math/primes/odds-and-ends/odd-prime-tests-in-range.html\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computers\n\
    \  -- http://primes.utm.edu/lists/small/10000.txt\n  -- http://www.math.rutgers.edu/~leviens/math/primes/odds-and-ends/odd-prime-tests-in-range.html\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computers\n\
    \  -- http://primes.utm.edu/lists/small/10000.txt\n  -- http://www.math.rutgers.edu/~leviens/math/primes/odds-and-ends/odd-prime-tests-in-range.html\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzl7b14mp.lua:61: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n ==\
    \ 1 then return false end\n  if n % 2 == 0 then return false end\n  if n % 3 ==\
    \ 0 then return false end\n  if n % 5 == 0 then return false end\n  if n % 7 ==\
    \ 0 then return false end\n  if n <= 30 or n % 2 == 0 or n % 3 == 0 or n % 5 ==\
    \ 0 or n % 7 == 0 then\n    return false\n  end\n  local i = 3\n  while i <= math.sqrt(n)\
    \ do\n    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4yymaupi.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4yymaupi.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case\n  if n < 2 then\n    return false\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_j0d__aq.lua:40: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Test if n is evenly\
    \ divisible by 3\n  if n % 3 == 0 then\n    return false\n  end\n  -- Test if\
    \ n is evenly divisible by 5\n  if n % 5 == 0 then\n    return false\n  end\n\
    \  -- Test if n is evenly divisible by 7\n  if n % 7 == 0 then\n    return false\n\
    \  end\n  -- Test if n is evenly divisible by 11\n  if n % 11 == 0 then\n    return\
    \ false\n  end\n  -- If n is evenly divisible by 13, then it can only be evenly\
    \ divisible by 5.\n  if n % 13 == 0 then\n    return n % 5 == 0\n  end\n  -- If\
    \ n is evenly divisible by 17, then it can only be evenly divisible by 7.\n  if\
    \ n % 17 == 0 then\n    return n % 7 == 0\n  end\n  -- If n is evenly divisible\
    \ by 19, then it can only be evenly divisible by 11.\n  if n % 19 == 0 then\n\
    \    return n % 11 == 0\n  end\n  -- If n is evenly divisible by 23, then it can\
    \ only be evenly divisible by 13.\n  if n % 23 == 0 then\n    return n % 13 ==\
    \ 0\n  end\n  -- If n is evenly divisible by 29, then it can only be evenly divisible\
    \ by 17.\n  if n % 29 == 0 then\n    return n % 17 == 0\n  end\n  -- If n is evenly\
    \ divisible by 31, then it can only be evenly divisible by 19.\n  if n % 31 ==\
    \ 0 then\n    return n % 19 == 0\n  end\n  -- If n is evenly divisible by 37,\
    \ then it can only be evenly divisible by 23.\n  if n % 37 == 0 then\n    return\
    \ n % 23 == 0\n  end\n  -- If n is evenly divisible by 43, then it can only be\
    \ evenly divisible by 29.\n  if n % 43 == 0 then\n    return n % 29 == 0\n  end\n\
    \  -- If n is evenly divisible by 49, then it can only be evenly divisible by\
    \ 31.\n  if n % 49 == 0 then\n    return n % 31 == 0\n  end\n  -- If n is evenly\
    \ divisible by 53, then it can only be evenly divisible by 37.\n  if n % 53 ==\
    \ 0 then\n    return n % 37 == 0\n  end\n  -- If n is evenly divisible by 59,\
    \ then it can only be evenly divisible by 43.\n  if n % 59 == 0 then\n    return\
    \ n % \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1305ozun.lua:85: ''end'' expected (to close ''if'' at line
    83) near ''=''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 141 == 0 then return false end\n  if n % 147 == 0 then return\
    \ false end\n  if n % 151 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 167 == 0 then return\
    \ false end\n  if n % 173 == 0 then return false end\n  if n % 179 == 0 then return\
    \ false end\n  if n % 183 == 0 then return false end\n  if n % 187 == 0 then return\
    \ false end\n  if n % 191 == 0 then return false end\n  if n % 193 == 0 then return\
    \ false end\n  if n % 197 == 0 then return false end\n  if n % 201 == 0 then return\
    \ false end\n  if n % 207 == 0 then return false end\n  if n % 211 == 0 then return\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp18cehz34.lua:69: ''end'' expected (to close ''if'' at line
    68) near ''=''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
