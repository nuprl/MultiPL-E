language: lua
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(left,\
    \ right)\n    local l = 0\n    local r = 0\n    while l < right do\n      local\
    \ m = math.floor(left + r / 2)\n      if arr[m - 1] == 0 then\n        r = r +\
    \ 1\n      elseif arr[m - 1] == 1 then\n        l = m + 1\n      else\n      \
    \  local t = arr[m - 1]\n        arr[m - 1] = arr[m + 1]\n        arr[m + 1] =\
    \ t\n        l = m + 1\n        r = r + 1\n      end\n    end\n    return l\n\
    \  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqayydqye.lua:31:\
    \ invalid order function for sorting\nstack traceback:\n\t/tmp/tmpqayydqye.lua:31:\
    \ in function 'candidate'\n\t/tmp/tmpqayydqye.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    local lhs_ones = lhs:bitwise_and(1)\n    local rhs_ones = rhs:bitwise_and(1)\n\
    \    local lhs_decimal = lhs:bitwise_and(0xF)\n    local rhs_decimal = rhs:bitwise_and(0xF)\n\
    \    if lhs_ones == 0 then\n      return rhs_decimal\n    elseif rhs_ones == 0\
    \ then\n      return lhs_decimal\n    else\n      return lhs_decimal - rhs_decimal\n\
    \    end\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpttgrp1n3.lua:13:\
    \ attempt to index local 'lhs' (a number value)\nstack traceback:\n\t/tmp/tmpttgrp1n3.lua:13:\
    \ in function </tmp/tmpttgrp1n3.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpttgrp1n3.lua:25:\
    \ in function 'candidate'\n\t/tmp/tmpttgrp1n3.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function cmp_arr(x,\
    \ y)\n    if x > y then\n      return 1\n    elseif x < y then\n      return -1\n\
    \    else\n      return 0\n    end\n  end\n  table.sort(arr, cmp_arr)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4qdt55n9.lua:13:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp4qdt55n9.lua:13:\
    \ in function </tmp/tmp4qdt55n9.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmp4qdt55n9.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmp4qdt55n9.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We use an auxiliary array\
    \ for counting number of ones in binary representation\n  local counts = {}\n\
    \  for i = 1, #arr do\n    local bin = bit.rshift(tostring(arr[i]), i)\n    counts[bin]\
    \ = counts[bin] or 0\n    counts[bin] = counts[bin] + 1\n  end\n  -- Sort based\
    \ on number of ones in binary representation\n  table.sort(counts, function(a,\
    \ b) return a < b end)\n  -- Sort based on decimal value\n  table.sort(arr, function(a,\
    \ b) return tonumber(string.format(\"%0.f\", a)) < tonumber(string.format(\"%0.f\"\
    , b)) end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpurpwue1b.lua:15:\
    \ attempt to index global 'bit' (a nil value)\nstack traceback:\n\t/tmp/tmpurpwue1b.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpurpwue1b.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(left,\
    \ right)\n    if left == 0 then\n      return right\n    end\n    if right ==\
    \ 0 then\n      return left\n    end\n    return left < right and -1 or 1\n  end\n\
    \  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq4qr1nas.lua:19:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpq4qr1nas.lua:19:\
    \ in function </tmp/tmpq4qr1nas.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpq4qr1nas.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpq4qr1nas.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Write your code here\n\
    \  local function compare(lhs, rhs)\n    if lhs < rhs then\n      return -1\n\
    \    elseif lhs > rhs then\n      return 1\n    else\n      return 0\n    end\n\
    \  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpluadjcc9.lua:14:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpluadjcc9.lua:14:\
    \ in function </tmp/tmpluadjcc9.lua:13>\n\t[C]: in function 'sort'\n\t/tmp/tmpluadjcc9.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpluadjcc9.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    local lhs_ones = lhs:bits():lshift(lhs:size() - 1) -- number of ones\
    \ in lhs\n    local rhs_ones = rhs:bits():lshift(rhs:size() - 1) -- number of\
    \ ones in rhs\n    if lhs_ones < rhs_ones then return -1 end\n    if lhs_ones\
    \ > rhs_ones then return 1 end\n    -- lhs has same number of ones as rhs\n  \
    \  local lhs_decimal = lhs:bits():rshift(lhs:size() - 1) -- decimal value of lhs\n\
    \    local rhs_decimal = rhs:bits():rshift(rhs:size() - 1) -- decimal value of\
    \ rhs\n    if lhs_decimal < rhs_decimal then return -1 end\n    if lhs_decimal\
    \ > rhs_decimal then return 1 end\n    -- lhs has same decimal value as rhs\n\
    \    return 0\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyl_9wre.lua:13:\
    \ attempt to index local 'lhs' (a number value)\nstack traceback:\n\t/tmp/tmphyl_9wre.lua:13:\
    \ in function </tmp/tmphyl_9wre.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmphyl_9wre.lua:25:\
    \ in function 'candidate'\n\t/tmp/tmphyl_9wre.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    local l = 0\n    local r = 0\n    while l < lhs and r < rhs do\n \
    \     if lhs[l] == rhs[r] then\n        l = l + 1\n        r = r + 1\n      elseif\
    \ lhs[l] > rhs[r] then\n        return 1\n      else\n        return -1\n    \
    \  end\n    end\n    if l == lhs then\n      return r - l\n    else\n      return\
    \ lhs - r\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3kn1v5gi.lua:16:\
    \ attempt to index local 'lhs' (a number value)\nstack traceback:\n\t/tmp/tmp3kn1v5gi.lua:16:\
    \ in function </tmp/tmp3kn1v5gi.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmp3kn1v5gi.lua:31:\
    \ in function 'candidate'\n\t/tmp/tmp3kn1v5gi.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then return -1 end\n    if lhs > rhs then return 1 end\n\
    \    return 0\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp520x0_s3.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp520x0_s3.lua:13:\
    \ in function </tmp/tmp520x0_s3.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmp520x0_s3.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmp520x0_s3.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Write your code here\n\
    \  -- return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_gi7ksc2.lua:19:\
    \ expected: {1, 2, 4, 3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmp_gi7ksc2.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Sort the array in ascending\
    \ order based on number of ones\n  -- In binary representation, count number of\
    \ 1s\n  local ones = {}\n  for i = 1, #arr do\n    local bin = bit.rshift(arr[i],\
    \ 1)\n    local count = bit.band(bin, 2)\n    if count ~= 0 then\n      table.insert(ones,\
    \ count)\n    end\n  end\n  -- Sort the array in ascending order based on decimal\
    \ value\n  table.sort(ones)\n  -- Reverse the order of the ones\n  local reversed\
    \ = {}\n  for i = #ones, 1, -1 do\n    table.insert(reversed, ones[i])\n  end\n\
    \  -- Reverse the order of the sorted ones\n  table.sort(reversed)\n  -- Reverse\
    \ the order of the sorted array\n  table.sort(arr)\n  -- Reverse the order of\
    \ the sorted ones\n  for i = #reversed, 1, -1 do\n    table.insert(arr, ones[i])\n\
    \  end\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6u282_ms.lua:16:\
    \ attempt to index global 'bit' (a nil value)\nstack traceback:\n\t/tmp/tmp6u282_ms.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmp6u282_ms.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We use an auxiliary array\
    \ for counting number of ones in binary representation\n  -- of the numbers in\
    \ arr. For example, for arr = {1, 5, 2, 3, 4}, the auxiliary\n  -- array will\
    \ be {1, 1, 2, 1, 2, 1}.\n  local aux\n  local function count_ones(x)\n    if\
    \ aux == nil then\n      aux = {}\n      for i = 1, #x do\n        aux[i] = 0\n\
    \      end\n    end\n    aux[x] = aux[x] + 1\n  end\n  -- We sort arr based on\
    \ number of ones in binary representation of each number\n  -- in arr. For example,\
    \ for arr = {1, 5, 2, 3, 4}, the sorted array will be\n  -- arr = {1, 2, 3, 4,\
    \ 5}.\n  for i = 1, #arr do\n    count_ones(arr[i])\n  end\n  -- We sort arr based\
    \ on decimal value of each number in arr. For example, for\n  -- arr = {-2, -3,\
    \ -4, -5, -6}, the sorted array will be arr = {-6, -5, -4, -3, -2}.\n  for i =\
    \ 1, #arr do\n    arr[i] = math.floor(arr[i] + 0.5)\n  end\n  return arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppjij616s.lua:19:\
    \ attempt to get length of local 'x' (a number value)\nstack traceback:\n\t/tmp/tmppjij616s.lua:19:\
    \ in function 'count_ones'\n\t/tmp/tmppjij616s.lua:29: in function 'candidate'\n\
    \t/tmp/tmppjij616s.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function helper(arr,\
    \ i, j)\n    if i == j then\n      return\n    end\n    if arr[i] > arr[j] then\n\
    \      arr[i], arr[j] = arr[j], arr[i]\n    end\n    helper(arr, i + 1, j - 1)\n\
    \  end\n  helper(arr, 1, #arr)\n  return arr\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xcf5bif.lua:28:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {1, 3, 2, 5, 4}\nstack traceback:\n\t/tmp/tmp6xcf5bif.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs == rhs then\n      return 0\n    end\n    if lhs < rhs then\n\
    \      return -1\n    end\n    return 1\n  end\n  table.sort(arr, compare)\n \
    \ return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq2nj6li0.lua:16:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpq2nj6li0.lua:16:\
    \ in function </tmp/tmpq2nj6li0.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpq2nj6li0.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpq2nj6li0.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Sort arr based on number\
    \ of ones in binary representation\n  -- arr = {1, 5, 2, 3, 4}\n  -- arr = {-2,\
    \ -3, -4, -5, -6}\n  -- arr = {1, 0, 2, 3, 4}\n  -- arr = {0, 1, 2, 3, 4}\n  --\
    \ arr = {1, 5, 2, 3, 4}\n  -- arr = {-2, -3, -4, -5, -6}\n  -- arr = {1, 0, 2,\
    \ 3, 4}\n  -- arr = {0, 1, 2, 3, 4}\n  -- arr = {1, 0, 2, 3, 4}\n  -- arr = {1,\
    \ 5, 2, 3, 4}\n  -- arr = {-2, -3, -4, -5, -6}\n  -- arr = {1, 0, 2, 3, 4}\n \
    \ -- arr = {0, 1, 2, 3, 4}\n  -- arr = {1, 0, 2, 3, 4}\n  -- arr = {1, 5, 2, 3,\
    \ 4}\n  -- arr = {-2, -3, -4, -5, -6}\n  -- arr = {1, 0, 2, 3, 4}\n  -- arr =\
    \ {0, 1, 2, 3, 4}\n  -- arr = {1, 0, 2, 3, 4}\n  -- arr = {1, 5, 2, 3, 4}\n  --\
    \ arr = {-2, -3, -4, -5, -6}\n  -- arr = {1, 0, 2, 3, 4}\n  -- arr = {0, 1, 2,\
    \ 3, 4}\n  -- arr = {1, 0, 2, 3, 4}\n  -- arr = {1, 5, 2, 3, 4}\n  -- arr = {-2,\
    \ -3, -4, -5, -6}\n  -- arr = {1, 0, 2, 3, 4}\n  -- arr = {0, 1, 2, 3, 4}\n  --\
    \ arr = {1, 0, 2, 3, 4}\n  -- arr = {1, 5, 2, 3, 4}\n  -- arr = {-2, -3, -4, -5,\
    \ -6}\n  -- arr = {1, 0, 2, 3, 4}\n  -- arr = {0, 1, 2, 3, 4}\n  -- arr = {1,\
    \ 0, 2, 3, 4}\n  -- arr = {1, 5, 2, 3, 4}\n  -- arr = {-2, -3, -4, -5, -6}\n \
    \ -- arr = {1, 0, 2, 3, 4}\n  -- arr = {0, 1, 2, 3, 4}\n  -- arr = {1, 0, 2, 3,\
    \ 4}\n  -- arr = {1, 5, 2, 3, 4}\n  -- arr = {-2, -3, -4, -5, -6}\n  -- arr =\
    \ {1, 0, 2, 3, 4}\n  -- arr = {0, 1, 2, 3, 4}\n  -- arr = {1, 0, 2, 3, 4}\n  --\
    \ arr = {1, 5, 2, 3, 4}\n  -- arr = {-2, -3, -4, -5, -6}\n  -- arr = {1, 0, 2,\
    \ 3, 4}\n  -- arr = {0, 1, 2, 3, 4}\n  -- arr = {1, 0, 2, 3, 4}\n  -- arr = {1,\
    \ 5, 2, 3, 4}\n  -- arr = {-2, -3, -4, -5, -6}\n  -- arr = {1, 0, 2, 3, 4}\n \
    \ -- arr = {0, 1, 2, 3, 4}\n  -- arr = {1, 0, 2, 3, 4}\n  \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpabzv40tg.lua:82: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Write your sorting code\
    \ here\n  -- Hint: Use a nested for loop\n  -- Hint: Use a nested for loop\n \
    \ -- Hint: Use a nested for loop\n  -- Hint: Use a nested for loop\n  -- Hint:\
    \ Use a nested for loop\n  -- Hint: Use a nested for loop\n  -- Hint: Use a nested\
    \ for loop\n  -- Hint: Use a nested for loop\n  -- Hint: Use a nested for loop\n\
    \  -- Hint: Use a nested for loop\n  -- Hint: Use a nested for loop\n  -- Hint:\
    \ Use a nested for loop\n  -- Hint: Use a nested for loop\n  -- Hint: Use a nested\
    \ for loop\n  -- Hint: Use a nested for loop\n  -- Hint: Use a nested for loop\n\
    \  -- Hint: Use a nested for loop\n  -- Hint: Use a nested for loop\n  -- Hint:\
    \ Use a nested for loop\n  -- Hint: Use a nested for loop\n  -- Hint: Use a nested\
    \ for loop\n  -- Hint: Use a nested for loop\n  -- Hint: Use a nested for loop\n\
    \  -- Hint: Use a nested for loop\n  -- Hint: Use a nested for loop\n  -- Hint:\
    \ Use a nested for loop\n  -- Hint: Use a nested for loop\n  -- Hint: Use a nested\
    \ for loop\n  -- Hint: Use a nested for loop\n  -- Hint: Use a nested for loop\n\
    \  -- Hint: Use a nested for loop\n  -- Hint: Use a nested for loop\n  -- Hint:\
    \ Use a nested for loop\n  -- Hint: Use a nested for loop\n  -- Hint: Use a nested\
    \ for loop\n  -- Hint: Use a nested for loop\n  -- Hint: Use a nested for loop\n\
    \  -- Hint: Use a nested for loop\n  -- Hint: Use a nested for loop\n  -- Hint:\
    \ Use a nested for loop\n  -- Hint: Use a nested for loop\n  -- Hint: Use a nested\
    \ for loop\n  -- Hint: Use a nested for loop\n  -- Hint: Use a nested for loop\n\
    \  -- Hint: Use a nested for loop\n  -- Hint: Use a nested for loop\n  -- Hint:\
    \ Use a nested for loop\n  -- Hint: Use a nested for loop\n  -- Hint: Use a nested\
    \ for loop\n  -- Hint: Use a nested for loop\n  -- Hint: \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfyhyu3c2.lua:78: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We use an auxiliary table\
    \ to store already sorted positions.\n  -- This table is going to be used while\
    \ we iterate over input array.\n  local sorted_positions = {}\n  -- We use an\
    \ auxiliary table to store already sorted values.\n  -- This table is going to\
    \ be used while we iterate over input array.\n  local sorted_values = {}\n  --\
    \ We use an auxiliary table to store already sorted keys.\n  -- This table is\
    \ going to be used while we iterate over input array.\n  local sorted_keys = {}\n\
    \  -- We use an auxiliary table to store already sorted keys.\n  -- This table\
    \ is going to be used while we iterate over input array.\n  local sorted_keys_reverse\
    \ = {}\n  -- We use an auxiliary table to store already sorted values.\n  -- This\
    \ table is going to be used while we iterate over input array.\n  local sorted_values_reverse\
    \ = {}\n  -- We use an auxiliary table to store already sorted keys.\n  -- This\
    \ table is going to be used while we iterate over input array.\n  local sorted_keys_reverse\
    \ = {}\n  -- We use an auxiliary table to store already sorted values.\n  -- This\
    \ table is going to be used while we iterate over input array.\n  local sorted_values_reverse\
    \ = {}\n  -- We use an auxiliary table to store already sorted keys.\n  -- This\
    \ table is going to be used while we iterate over input array.\n  local sorted_keys_reverse\
    \ = {}\n  -- We use an auxiliary table to store already sorted values.\n  -- This\
    \ table is going to be used while we iterate over input array.\n  local sorted_values_reverse\
    \ = {}\n  -- We use an auxiliary table to store already sorted keys.\n  -- This\
    \ table is going to be used while we iterate over input array.\n  local sorted_keys_reverse\
    \ = {}\n  -- We use an auxiliary table to store already sorted values.\n  -- This\
    \ table is going to be used while we iterate over input array.\n  local sorted_values_reverse\
    \ = {}\n  -- We use an auxiliary table to store already sorted keys.\n  -- This\
    \ table is going to be used while we iterate over input array.\n  local sorted_keys_reverse\
    \ = {}\n  -- We use an auxiliary table to store already sorted values.\n  -- This\
    \ table is going to be used while we iterate over input array.\n  local sorted_values_reverse\
    \ = {}\n  -- We use an auxiliary table to store already sorted keys.\n  -- This\
    \ table is going to be used while we iterate over input array.\n  local sorted_keys_reverse\
    \ = {}\n  -- We use an auxiliary table to store \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6dlatowy.lua:69: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We use two stacks to\
    \ implement the sorting algorithm.\n  -- The first stack stores elements with\
    \ non-negative binary representation.\n  -- The second stack stores elements with\
    \ decimal representation.\n  -- The algorithm is as follows:\n  --\n  --   1.\
    \ Sort elements with non-negative binary representation.\n  --   2. Sort elements\
    \ with decimal representation.\n  --\n  --   Algorithm is as follows:\n  --\n\
    \  --   1. Sort elements with non-negative binary representation.\n  --   2. Sort\
    \ elements with decimal representation.\n  --   3. Repeat steps 1 and 2 until\
    \ no more elements are left.\n  --\n  --   Time complexity: O(n log(n))\n  --\
    \   Space complexity: O(log(n))\n  --\n  --   @param arr Array of elements to\
    \ sort.\n  --   @return Sorted array.\n  local function sort(stack, arr)\n   \
    \ local stack_size = #stack\n    local stack2 = {}\n    local stack3 = {}\n  \
    \  local stack4 = {}\n    local stack5 = {}\n    local stack6 = {}\n    local\
    \ stack7 = {}\n    local stack8 = {}\n    local stack9 = {}\n    local stack10\
    \ = {}\n    local stack11 = {}\n    local stack12 = {}\n    local stack13 = {}\n\
    \    local stack14 = {}\n    local stack15 = {}\n    local stack16 = {}\n    local\
    \ stack17 = {}\n    local stack18 = {}\n    local stack19 = {}\n    local stack20\
    \ = {}\n    local stack21 = {}\n    local stack22 = {}\n    local stack23 = {}\n\
    \    local stack24 = {}\n    local stack25 = {}\n    local stack26 = {}\n    local\
    \ stack27 = {}\n    local stack28 = {}\n    local stack29 = {}\n    local stack30\
    \ = {}\n    local stack31 = {}\n    local stack32 = {}\n    local stack33 = {}\n\
    \    local stack34 = {}\n    local stack35 = {}\n    local stack36 = {}\n    local\
    \ stack37 = {}\n    local stack38 = {}\n    local stack39 = {}\n    local stack40\
    \ = {}\n    local stack41 = {}\n    local stack42 = {}\n    local stack43 = {}\n\
    \    local stack44 = {}\n    local stack45 = {}\n    local stack46 = {}\n    local\
    \ stack47 = {}\n    local stack48 = {}\n    local stack49 = {}\n    local stack50\
    \ = {}\n    local stack51 = {}\n    local stack52 = {}\n    local stack53 = {}\n\
    \    local stack54 = {}\n    local stack55 = {}\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyiip5rcq.lua:101: ''end'' expected (to close ''function''
    at line 31) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(x,\
    \ y)\n    if x < y then\n      return -1\n    elseif x > y then\n      return\
    \ 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfk56x6z2.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpfk56x6z2.lua:13:\
    \ in function </tmp/tmpfk56x6z2.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpfk56x6z2.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpfk56x6z2.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Sort the array in ascending\
    \ order\n  table.sort(arr)\n  -- Iterate through the array and convert each element\
    \ to its decimal value\n  -- The decimal value of a binary number is its binary\
    \ value, plus one\n  -- The decimal value of 0 is 0\n  local decimal_values =\
    \ {}\n  for i = 1, #arr do\n    local decimal_value = tonumber(string.format(\"\
    %0d\", arr[i]))\n    decimal_values[decimal_value] = decimal_value\n  end\n  --\
    \ Sort the decimal values in ascending order\n  table.sort(decimal_values)\n \
    \ -- Return the sorted array\n  return decimal_values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwqq5j6h.lua:31:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpxwqq5j6h.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Base case\n  if #arr\
    \ == 1 then\n    return arr\n  end\n  -- Recursive case\n  local function compare(arr1,\
    \ arr2)\n    local function compare_decimal(arr1, arr2)\n      -- Base case\n\
    \      if #arr1 == #arr2 then\n        -- Compare decimal values\n        for\
    \ i = 1, #arr1 do\n          local v1 = arr1[i]\n          local v2 = arr2[i]\n\
    \          if v1 == v1 then\n            -- Compare decimal values\n         \
    \   if v1 < v2 then\n              return -1\n            elseif v1 > v2 then\n\
    \              return 1\n            else\n              -- Compare decimal values\n\
    \              return 0\n            end\n          elseif v1 < v1 then\n    \
    \        return -1\n          elseif v1 > v1 then\n            return 1\n    \
    \      else\n            -- Compare decimal values\n            if v1 < v2 then\n\
    \              return -1\n            elseif v1 > v2 then\n              return\
    \ 1\n            else\n              -- Compare decimal values\n             \
    \ return 0\n            end\n          end\n        end\n      else\n        --\
    \ Compare decimal values\n        return -1\n      end\n    end\n    local function\
    \ compare_int(arr1, arr2)\n      -- Base case\n      if #arr1 == #arr2 then\n\
    \        -- Compare decimal values\n        for i = 1, #arr1 do\n          local\
    \ v1 = arr1[i]\n          local v2 = arr2[i]\n          if v1 == v1 then\n   \
    \         -- Compare decimal values\n            if v1 < v2 then\n           \
    \   return -1\n            elseif v1 > v2 then\n              return 1\n     \
    \       else\n              -- Compare decimal values\n              return 0\n\
    \            end\n          elseif v1 < v1 then\n            return -1\n     \
    \     elseif v1 > v1 then\n            return 1\n          else\n            --\
    \ Compare decimal values\n            if v1 < v2 then\n              return -1\n\
    \            elseif v1 > v2 then\n              return 1\n            else\n \
    \             -- Compare decimal values\n              return 0\n            end\n\
    \          end\n        end\n      else\n        -- Compare decimal values\n \
    \       return -1\n      end\n    end\n    local function compare_float(arr1,\
    \ arr2)\n      -- Base case\n      if #arr1 == #arr2 then\n        -- Compare\
    \ decimal values\n        for i = 1, #arr1 do\n          local v1 = arr1[i]\n\
    \          local v2 = arr2[i]\n          if v1 == v1 then\n            -- Compare\
    \ decimal values\n            if v1 < v2 then\n              return -1\n     \
    \       elseif v1 > \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp95vd3nrx.lua:106: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function helper(arr,\
    \ i, n)\n    if i == n then\n      table.sort(arr)\n      return\n    end\n  \
    \  helper(arr, i + 1, n)\n    local m = math.floor(math.log2(i + 1))\n    local\
    \ tmp = arr[i]\n    arr[i] = arr[m]\n    arr[m] = tmp\n    helper(arr, i + 1,\
    \ n)\n  end\n  helper(arr, 1, #arr)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfta5ykr9.lua:18:\
    \ attempt to call field 'log2' (a nil value)\nstack traceback:\n\t/tmp/tmpfta5ykr9.lua:18:\
    \ in function 'helper'\n\t/tmp/tmpfta5ykr9.lua:17: in function 'helper'\n\t/tmp/tmpfta5ykr9.lua:17:\
    \ in function 'helper'\n\t/tmp/tmpfta5ykr9.lua:17: in function 'helper'\n\t/tmp/tmpfta5ykr9.lua:24:\
    \ in function 'candidate'\n\t/tmp/tmpfta5ykr9.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We use an auxiliary array\
    \ for counting number of ones in binary representation\n  -- of the numbers in\
    \ arr. For example, for arr = {1, 5, 2, 3, 4}, the auxiliary array\n  -- will\
    \ be {1, 1, 1, 1, 1, 1}.\n  local aux\n  local function count_ones(x)\n    if\
    \ aux then\n      -- If aux array is initialized, then increment its value by\
    \ one\n      aux[#aux + 1] = x\n    else\n      -- If aux array is not initialized,\
    \ then initialize it with ones\n      aux = {x}\n    end\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaf1ygx69.lua:39: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function cmp(a,b)\n\
    \    return a > b and 1 or -1\n  end\n  table.sort(arr, cmp)\n  return arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0bvazei1.lua:13:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp0bvazei1.lua:13:\
    \ in function </tmp/tmp0bvazei1.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmp0bvazei1.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmp0bvazei1.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We sort by decreasing\
    \ number of ones in binary representation\n  -- of the number\n  local function\
    \ compare(a, b)\n    local binA = string.format(\"%b\", a)\n    local binB = string.format(\"\
    %b\", b)\n    local nA = string.len(binA)\n    local nB = string.len(binB)\n \
    \   local diff = nA - nB\n    if diff then return diff end\n    -- If number of\
    \ ones in binary representation is equal,\n    -- sort by decimal value\n    local\
    \ aNum = tonumber(binA)\n    local bNum = tonumber(binB)\n    if aNum == bNum\
    \ then return aNum end\n    return bNum - aNum\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9z_sfpx9.lua:15:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmp9z_sfpx9.lua:15:\
    \ in function </tmp/tmp9z_sfpx9.lua:14>\n\t[C]: in function 'sort'\n\t/tmp/tmp9z_sfpx9.lua:28:\
    \ in function 'candidate'\n\t/tmp/tmp9z_sfpx9.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Sort array in ascending\
    \ order\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>>\
    \ sort_array({-2, -3, -4, -5, -6})\n  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1,\
    \ 0, 2, 3, 4})\n  -- {0, 1, 2, 3, 4}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({-2, -3, -4, -5, -6})\n  -- {-6, -5,\
    \ -4, -3, -2}\n  -- >>> sort_array({1, 0, 2, 3, 4})\n  -- {0, 1, 2, 3, 4}\n  --\
    \ >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1, 0, 2, 3,\
    \ 4})\n  -- {0, 1, 2, 3, 4}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2,\
    \ 3, 4, 5}\n  -- >>> sort_array({-2, -3, -4, -5, -6})\n  -- {-6, -5, -4, -3, -2}\n\
    \  -- >>> sort_array({1, 0, 2, 3, 4})\n  -- {0, 1, 2, 3, 4}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({-2, -3, -4, -5, -6})\n\
    \  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1, 0, 2, 3, 4})\n  -- {0, 1,\
    \ 2, 3, 4}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>>\
    \ sort_array({-2, -3, -4, -5, -6})\n  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1,\
    \ 0, 2, 3, 4})\n  -- {0, 1, 2, 3, 4}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({-2, -3, -4, -5, -6})\n  -- {-6, -5,\
    \ -4, -3, -2}\n  -- >>> sort_array({1, 0, 2, 3, 4})\n  -- {0, 1, 2, 3, 4}\n  --\
    \ >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1, 0, 2, 3,\
    \ 4})\n  -- {0, 1, 2, 3, 4}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2,\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk7nwbu32.lua:77: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Base case\n  if #arr\
    \ == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp77akl1iy.lua:30: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Write your code here\n\
    \  -- return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_gi7ksc2.lua:19:\
    \ expected: {1, 2, 4, 3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmp_gi7ksc2.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We use \"local i\" instead\
    \ of \"local i = 1\" to avoid shadowing \"i\".\n  local i\n  local len = #arr\n\
    \  local results = {}\n  local max = 0\n  for i = 1, len do\n    local v = arr[i]\n\
    \    if v > max then\n      max = v\n    end\n  end\n  for i = 1, len do\n   \
    \ local v = arr[i]\n    local k = math.floor(math.log(v) / math.log(2))\n    if\
    \ v == max then\n      results[k] = i\n    else\n      results[k] = v\n    end\n\
    \  end\n  table.sort(results, function(a, b) return results[a] < results[b] end)\n\
    \  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpng6ezl5c.lua:32:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpng6ezl5c.lua:32:\
    \ in function </tmp/tmpng6ezl5c.lua:32>\n\t[C]: in function 'sort'\n\t/tmp/tmpng6ezl5c.lua:32:\
    \ in function 'candidate'\n\t/tmp/tmpng6ezl5c.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(x,\
    \ y)\n    if x < y then\n      return -1\n    elseif x > y then\n      return\
    \ 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfk56x6z2.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpfk56x6z2.lua:13:\
    \ in function </tmp/tmpfk56x6z2.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpfk56x6z2.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpfk56x6z2.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then return -1 else return 1 end\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoav692p8.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpoav692p8.lua:13:\
    \ in function </tmp/tmpoav692p8.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpoav692p8.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpoav692p8.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then return -1 end\n    if lhs > rhs then return 1 end\n\
    \    return 0\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp520x0_s3.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp520x0_s3.lua:13:\
    \ in function </tmp/tmp520x0_s3.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmp520x0_s3.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmp520x0_s3.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Sort arr using bubble\
    \ sort.\n  -- https://en.wikipedia.org/wiki/Bubble_sort\n  -- The algorithm is\
    \ as follows:\n  --\n  --   1. Create a temporary variable that stores the largest\
    \ number in the array.\n  --   2. Iterate through each element of the array.\n\
    \  --   3. If the current number is greater than the largest number in the array,\n\
    \  --       then update the largest number in the array.\n  --   4. Else, if the\
    \ current number is equal to the largest number in the array,\n  --       then\
    \ do nothing.\n  --   5. If the current number is less than the largest number\
    \ in the array,\n  --       then swap the current number with the largest number\
    \ in the array.\n  --\n  -- The algorithm is repeated until no swaps are made.\n\
    \  -- The algorithm is as follows:\n  --\n  --   1. Create a temporary variable\
    \ that stores the largest number in the array.\n  --   2. Iterate through each\
    \ element of the array.\n  --   3. If the current number is greater than the largest\
    \ number in the array,\n  --       then update the largest number in the array.\n\
    \  --   4. Else, if the current number is equal to the largest number in the array,\n\
    \  --       then do nothing.\n  --   5. If the current number is less than the\
    \ largest number in the array,\n  --       then swap the current number with the\
    \ largest number in the array.\n  --\n  -- The algorithm is repeated until no\
    \ swaps are made.\n  -- The algorithm is as follows:\n  --\n  --   1. Create a\
    \ temporary variable that stores the largest number in the array.\n  --   2. Iterate\
    \ through each element of the array.\n  --   3. If the current number is greater\
    \ than the largest number in the array,\n  --       then update the largest number\
    \ in the array.\n  --   4. Else, if the current number is equal to the largest\
    \ number in the array,\n  --       then do nothing.\n  --   5. If the current\
    \ number is less than the largest number in the array,\n  --       then swap the\
    \ current number with the largest number in the array.\n  --\n  -- The algorithm\
    \ is repeated until no swaps are made.\n  -- The algorithm is as follows:\n  --\n\
    \  --   1. Create a temporary variable that stores the largest number in the array.\n\
    \  --   2. Iterate through each element of the array.\n  --   3. If the current\
    \ number is greater than the largest number in the array,\n  --       then update\
    \ the largest number in the array.\n  --   4. Else, if the current number is equal\
    \ to the largest number in the array,\n  --       then do nothing.\n  --   5.\
    \ If the current number is less than the largest number in the array,\n  --  \
    \     then swap the current number with the largest number in the array.\n  --\n\
    \  -- The algorithm is repeated until no swaps are made.\n  -- The algorithm is\
    \ as follows:\n  --\n  --   \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnump3jbd.lua:79: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Sort arr using bubble\
    \ sort algorithm.\n  -- https://en.wikipedia.org/wiki/Bubble_sort\n  -- https://leetcode.com/problems/sort-array/discuss/9041/Python-bubble-sort-implementation-with-explanation\n\
    \  local function swap(arr, i, j)\n    arr[i], arr[j] = arr[j], arr[i]\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps9ms5d_y.lua:32: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We use an auxiliary array\
    \ for counting number of ones in binary representation.\n  -- This array has O(n)\
    \ time complexity, where n is the number of elements in the input array.\n  --\
    \ The auxiliary array has O(1) space complexity.\n  local bincount = {}\n  local\
    \ binarr = {}\n  for i = 1, #arr do\n    local bin = math.floor(math.log2(arr[i]))\n\
    \    bincount[bin] = bincount[bin] or 0\n    bincount[bin] = bincount[bin] + 1\n\
    \    binarr[bin] = binarr[bin] or 0\n    binarr[bin] = binarr[bin] + 1\n  end\n\
    \  -- We sort binarr array in ascending order based on number of ones in their\
    \ binary representation.\n  -- This sorting takes O(nlogn) time complexity, where\
    \ n is the number of elements in the input array.\n  -- The auxiliary array has\
    \ O(1) space complexity.\n  table.sort(binarr, function(a, b) return bincount[a]\
    \ < bincount[b] end)\n  -- We sort arr array in ascending order based on decimal\
    \ value.\n  -- This sorting takes O(n) time complexity, where n is the number\
    \ of elements in the input array.\n  -- The auxiliary array has O(1) space complexity.\n\
    \  table.sort(arr, function(a, b) return binarr[a] < binarr[b] end)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyr6oz5sp.lua:18:\
    \ attempt to call field 'log2' (a nil value)\nstack traceback:\n\t/tmp/tmpyr6oz5sp.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpyr6oz5sp.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Write your code here\n\
    \  local function helper(arr, i, j, k)\n    if i == j then\n      arr[i], arr[j]\
    \ = arr[j], arr[i]\n      return\n    end\n    if arr[i] > arr[j] then\n     \
    \ arr[i], arr[j] = arr[j], arr[i]\n      helper(arr, i + 1, j, k)\n      helper(arr,\
    \ i, j + 1, k)\n    end\n  end\n  helper(arr, 1, #arr, 1)\n  return arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0l4gpho.lua:31:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {1, 5, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpx0l4gpho.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then return -1 end\n    if lhs > rhs then return 1 end\n\
    \    return 0\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp520x0_s3.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp520x0_s3.lua:13:\
    \ in function </tmp/tmp520x0_s3.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmp520x0_s3.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmp520x0_s3.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Write your code here\n\
    \  -- return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_gi7ksc2.lua:19:\
    \ expected: {1, 2, 4, 3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmp_gi7ksc2.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Base case\n  if #arr\
    \ == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp77akl1iy.lua:30: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function cmp(a,b)\n\
    \    if a < b then\n      return -1\n    elseif b < a then\n      return 1\n \
    \   else\n      return 0\n    end\n  end\n  table.sort(arr, cmp)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm57qccof.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpm57qccof.lua:13:\
    \ in function </tmp/tmpm57qccof.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpm57qccof.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpm57qccof.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- The first element of\
    \ arr is already sorted\n  -- The last element of arr is already sorted\n  --\
    \ The rest of arr is sorted according to number of ones in their binary representation\n\
    \  -- The rest of arr is sorted according to decimal value\n  -- The rest of arr\
    \ is sorted according to number of ones in their binary representation in descending\
    \ order\n  -- The rest of arr is sorted according to decimal value in descending\
    \ order\n  -- The rest of arr is sorted according to number of ones in their binary\
    \ representation in ascending order\n  -- The rest of arr is sorted according\
    \ to decimal value in ascending order\n  -- The rest of arr is sorted according\
    \ to number of ones in their binary representation in descending order\n  -- The\
    \ rest of arr is sorted according to decimal value in descending order\n  -- The\
    \ rest of arr is sorted according to number of ones in their binary representation\
    \ in ascending order\n  -- The rest of arr is sorted according to decimal value\
    \ in ascending order\n  -- The rest of arr is sorted according to number of ones\
    \ in their binary representation in descending order\n  -- The rest of arr is\
    \ sorted according to decimal value in descending order\n  -- The rest of arr\
    \ is sorted according to number of ones in their binary representation in ascending\
    \ order\n  -- The rest of arr is sorted according to decimal value in ascending\
    \ order\n  -- The rest of arr is sorted according to number of ones in their binary\
    \ representation in descending order\n  -- The rest of arr is sorted according\
    \ to decimal value in descending order\n  -- The rest of arr is sorted according\
    \ to number of ones in their binary representation in ascending order\n  -- The\
    \ rest of arr is sorted according to decimal value in ascending order\n  -- The\
    \ rest of arr is sorted according to number of ones in their binary representation\
    \ in descending order\n  -- The rest of arr is sorted according to decimal value\
    \ in descending order\n  -- The rest of arr is sorted according to number of ones\
    \ in their binary representation in ascending order\n  -- The rest of arr is sorted\
    \ according to decimal value in ascending order\n  -- The rest of arr is sorted\
    \ according to number of ones in their binary representation in descending order\n\
    \  -- The rest of arr is sorted according to decimal value in descending order\n\
    \  -- The rest of arr is sorted according to number of ones in their binary representation\
    \ in ascending order\n  -- The rest of arr is sorted according to decimal value\
    \ in ascending order\n  -- The rest of arr is sorted according to number of ones\
    \ in their binary representation in descending order\n  -- The rest of arr is\
    \ sorted according to decimal value in descending order\n  -- The rest of arr\
    \ is \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpge8e2pjk.lua:57: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then return -1 end\n    if lhs > rhs then return 1 end\n\
    \    return 0\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp520x0_s3.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp520x0_s3.lua:13:\
    \ in function </tmp/tmp520x0_s3.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmp520x0_s3.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmp520x0_s3.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function cmp(a, b)\n\
    \    if a < b then\n      return -1\n    elseif b < a then\n      return 1\n \
    \   else\n      return 0\n    end\n  end\n  table.sort(arr, cmp)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3p9ilv64.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp3p9ilv64.lua:13:\
    \ in function </tmp/tmp3p9ilv64.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmp3p9ilv64.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmp3p9ilv64.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We use binary representation\
    \ for numbers with less then 64 bits.\n  -- This allows us to sort numbers with\
    \ less then 64 bits using bitwise operators.\n  -- We use bitwise operators for\
    \ sorting because they are faster than loops.\n  -- We use loops for sorting because\
    \ they are easier to read.\n  -- We use loops for sorting because they are easier\
    \ to read.\n  -- We use loops for sorting because they are easier to read.\n \
    \ -- We use loops for sorting because they are easier to read.\n  -- We use loops\
    \ for sorting because they are easier to read.\n  -- We use loops for sorting\
    \ because they are easier to read.\n  -- We use loops for sorting because they\
    \ are easier to read.\n  -- We use loops for sorting because they are easier to\
    \ read.\n  -- We use loops for sorting because they are easier to read.\n  --\
    \ We use loops for sorting because they are easier to read.\n  -- We use loops\
    \ for sorting because they are easier to read.\n  -- We use loops for sorting\
    \ because they are easier to read.\n  -- We use loops for sorting because they\
    \ are easier to read.\n  -- We use loops for sorting because they are easier to\
    \ read.\n  -- We use loops for sorting because they are easier to read.\n  --\
    \ We use loops for sorting because they are easier to read.\n  -- We use loops\
    \ for sorting because they are easier to read.\n  -- We use loops for sorting\
    \ because they are easier to read.\n  -- We use loops for sorting because they\
    \ are easier to read.\n  -- We use loops for sorting because they are easier to\
    \ read.\n  -- We use loops for sorting because they are easier to read.\n  --\
    \ We use loops for sorting because they are easier to read.\n  -- We use loops\
    \ for sorting because they are easier to read.\n  -- We use loops for sorting\
    \ because they are easier to read.\n  -- We use loops for sorting because they\
    \ are easier to read.\n  -- We use loops for sorting because they are easier to\
    \ read.\n  -- We use loops for sorting because they are easier to read.\n  --\
    \ We use loops for sorting because they are easier to read.\n  -- We use loops\
    \ for sorting because they are easier to read.\n  -- We use loops for sorting\
    \ because they are easier to read.\n  -- We use loops for sorting because they\
    \ are easier to read.\n  -- We use loops for sorting because they are easier to\
    \ read.\n  -- We use loops for sorting because they are easier to read.\n  --\
    \ We use loops for sorting because they are easier to read.\n  -- We use loops\
    \ for sorting because they are easier to read.\n  -- We use loops for sorting\
    \ because they are easier to read.\n  -- We use loops for sorting because they\
    \ are easier to read.\n  -- We use loops for sorting because they are easier to\
    \ read.\n  -- We use loops for sorting \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpoxllqk6u.lua:68: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Write your code here\n\
    \  local function compare(lhs, rhs)\n    if lhs < rhs then\n      return -1\n\
    \    elseif lhs > rhs then\n      return 1\n    else\n      return 0\n    end\n\
    \  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpluadjcc9.lua:14:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpluadjcc9.lua:14:\
    \ in function </tmp/tmpluadjcc9.lua:13>\n\t[C]: in function 'sort'\n\t/tmp/tmpluadjcc9.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpluadjcc9.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Base case\n  if #arr\
    \ == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp77akl1iy.lua:30: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We use an auxiliary table\
    \ to store sorted indices.\n  -- We use auxiliary table because we sort it multiple\
    \ times.\n  local aux\n  -- We use auxiliary table to store sorted indices.\n\
    \  -- We use auxiliary table because we sort it multiple times.\n  local aux\n\
    \  -- We use auxiliary table to store sorted indices.\n  -- We use auxiliary table\
    \ because we sort it multiple times.\n  local aux\n  -- We use auxiliary table\
    \ to store sorted indices.\n  -- We use auxiliary table because we sort it multiple\
    \ times.\n  local aux\n  -- We use auxiliary table to store sorted indices.\n\
    \  -- We use auxiliary table because we sort it multiple times.\n  local aux\n\
    \  -- We use auxiliary table to store sorted indices.\n  -- We use auxiliary table\
    \ because we sort it multiple times.\n  local aux\n  -- We use auxiliary table\
    \ to store sorted indices.\n  -- We use auxiliary table because we sort it multiple\
    \ times.\n  local aux\n  -- We use auxiliary table to store sorted indices.\n\
    \  -- We use auxiliary table because we sort it multiple times.\n  local aux\n\
    \  -- We use auxiliary table to store sorted indices.\n  -- We use auxiliary table\
    \ because we sort it multiple times.\n  local aux\n  -- We use auxiliary table\
    \ to store sorted indices.\n  -- We use auxiliary table because we sort it multiple\
    \ times.\n  local aux\n  -- We use auxiliary table to store sorted indices.\n\
    \  -- We use auxiliary table because we sort it multiple times.\n  local aux\n\
    \  -- We use auxiliary table to store sorted indices.\n  -- We use auxiliary table\
    \ because we sort it multiple times.\n  local aux\n  -- We use auxiliary table\
    \ to store sorted indices.\n  -- We use auxiliary table because we sort it multiple\
    \ times.\n  local aux\n  -- We use auxiliary table to store sorted indices.\n\
    \  -- We use auxiliary table because we sort it multiple times.\n  local aux\n\
    \  -- We use auxiliary table to store sorted indices.\n  -- We use auxiliary table\
    \ because we sort it multiple times.\n  local aux\n  -- We use auxiliary table\
    \ to store sorted indices.\n  -- We use auxiliary table because we sort it multiple\
    \ times.\n  local aux\n  -- We use auxiliary table to store sorted indices.\n\
    \  -- We use auxiliary table because we sort it multiple times.\n  local aux\n\
    \  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdkbisuez.lua:78: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- The first step is to\
    \ count the number of ones in each number.\n  -- The result is a table with one\
    \ row for each number.\n  -- Each row has one column for each bit in that number.\n\
    \  -- The columns are sorted in descending order by the number of ones.\n  local\
    \ counts = {}\n  for _, v in ipairs(arr) do\n    local count = 0\n    for i =\
    \ 1, 8 do\n      if v & (1 << i) then\n        count = count + 1\n      end\n\
    \    end\n    table.insert(counts, count)\n  end\n  table.sort(counts, function(a,\
    \ b) return b - a end)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9qijpyap.lua:20: ''then'' expected near ''&''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs == 0 then\n      return rhs\n    end\n    if rhs == 0 then\n\
    \      return lhs\n    end\n    if lhs < rhs then\n      return -1\n    elseif\
    \ lhs > rhs then\n      return 1\n    else\n      return 0\n    end\n  end\n \
    \ table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgavpuvg7.lua:19:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpgavpuvg7.lua:19:\
    \ in function </tmp/tmpgavpuvg7.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpgavpuvg7.lua:27:\
    \ in function 'candidate'\n\t/tmp/tmpgavpuvg7.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing decimal value\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing decimal value\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing decimal value\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing decimal value\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing decimal value\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing decimal value\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing decimal value\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing decimal value\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing decimal value\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing decimal value\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing decimal value\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing decimal value\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing decimal value\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing decimal value\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing decimal value\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing decimal value\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing decimal value\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing decimal value\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing decimal value\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing decimal value\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing decimal value\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing decimal value\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing decimal value\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing decimal value\n  -- We sort by decreasing\
    \ number of \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxnco8jib.lua:75: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs == 0 then\n      return 1\n    end\n    if rhs == 0 then\n\
    \      return -1\n    end\n    return lhs < rhs and 1 or -1\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy2npo6ra.lua:19:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpy2npo6ra.lua:19:\
    \ in function </tmp/tmpy2npo6ra.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpy2npo6ra.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpy2npo6ra.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function cmp(a, b)\n\
    \    if a < b then\n      return -1\n    end\n    if a > b then\n      return\
    \ 1\n    end\n    return 0\n  end\n  table.sort(arr, cmp)\n  return arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzc4t4g39.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpzc4t4g39.lua:13:\
    \ in function </tmp/tmpzc4t4g39.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpzc4t4g39.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpzc4t4g39.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    local function bin2dec(bin)\n      local dec = 0\n      local i =\
    \ 0\n      while i < #bin do\n        local v = bin:sub(i, i)\n        if v ~=\
    \ 0 then\n          dec = dec + v\n        end\n        i = i + 1\n      end\n\
    \      return dec\n    end\n    local function dec2bin(dec)\n      local bin =\
    \ \"\"\n      local i = 0\n      while i < #dec do\n        local v = dec:sub(i,\
    \ i)\n        if v ~= 0 then\n          bin = bin .. string.format(\"%0*d\", i,\
    \ v)\n        end\n        i = i + 1\n      end\n      return bin\n    end\n \
    \   local function bin2dec2(bin)\n      local dec = 0\n      local i = 0\n   \
    \   while i < #bin do\n        local v = bin:sub(i, i)\n        if v ~= 0 then\n\
    \          dec = dec + v\n        end\n        i = i + 1\n      end\n      return\
    \ dec\n    end\n    local function dec2bin2(dec)\n      local bin = \"\"\n   \
    \   local i = 0\n      while i < #dec do\n        local v = dec:sub(i, i)\n  \
    \      if v ~= 0 then\n          bin = bin .. string.format(\"%0*d\", i, v)\n\
    \        end\n        i = i + 1\n      end\n      return bin\n    end\n    local\
    \ function bin2dec3(bin)\n      local dec = 0\n      local i = 0\n      while\
    \ i < #bin do\n        local v = bin:sub(i, i)\n        if v ~= 0 then\n     \
    \     dec = dec + v\n        end\n        i = i + 1\n      end\n      return dec\n\
    \    end\n    local function dec2bin3(dec)\n      local bin = \"\"\n      local\
    \ i = 0\n      while i < #dec do\n        local v = dec:sub(i, i)\n        if\
    \ v ~= 0 then\n          bin = bin .. string.format(\"%0*d\", i, v)\n        end\n\
    \        i = i + 1\n      end\n      return bin\n    end\n    local function bin2dec4(bin)\n\
    \      local dec = 0\n      local i = 0\n      while i < #bin do\n        local\
    \ v = bin:sub(i, i)\n        if v ~= 0 then\n          dec = dec + v\n       \
    \ end\n        i = i + 1\n      end\n      return dec\n    end\n    local function\
    \ dec2bin4(dec)\n      local bin = \"\"\n      local i = 0\n      while i < #dec\
    \ do\n        local v = dec:sub(i, i)\n        if v ~= 0 then\n          \nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_jtd0ob6.lua:118: ''end'' expected (to close ''if'' at line
    102) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We use an auxiliary table\
    \ to store sorted values.\n  -- This table has O(n) complexity.\n  local sorted_arr\
    \ = {}\n  -- We use two pointers to traverse the array.\n  -- One points to the\
    \ smallest element and\n  -- another points to the next smallest element.\n  local\
    \ min_idx, next_min_idx = 1, 1\n  -- We use binary search to find the smallest\
    \ element.\n  -- The complexity of binary search is O(log(n)).\n  for idx = 2,\
    \ #arr do\n    -- We compare the current element with the smallest element in\
    \ the sorted table.\n    -- If the current element is smaller than the smallest\
    \ element,\n    -- we swap the current element with the smallest element.\n  \
    \  -- If the current element is larger than the smallest element,\n    -- we replace\
    \ the smallest element with the current element.\n    if arr[min_idx] > arr[idx]\
    \ then\n      sorted_arr[min_idx] = arr[idx]\n      min_idx = next_min_idx\n \
    \   else\n      next_min_idx = min_idx\n      min_idx = idx\n    end\n  end\n\
    \  -- We return the sorted array.\n  return sorted_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1vtunfw6.lua:42:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {2=2}\nstack traceback:\n\t/tmp/tmp1vtunfw6.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- The first step is to\
    \ count the number of ones in each number\n  -- The second step is to sort them\
    \ in ascending order\n  -- The third step is to combine them into a new table\n\
    \  local function count_ones(x)\n    local n = 0\n    for i = 1, #x do\n     \
    \ if x[i] == 1 then n = n + 1 end\n    end\n    return n\n  end\n  local function\
    \ sort_ascending(arr)\n    local n = count_ones(arr)\n    table.sort(arr, function(a,\
    \ b)\n      return count_ones(a) < count_ones(b) and a or b\n    end)\n  end\n\
    \  local function combine_ascending(arr)\n    local n = count_ones(arr)\n    local\
    \ new_arr = {}\n    for i = 1, #arr do\n      new_arr[i] = arr[i]\n    end\n \
    \   for i = 1, n do\n      local j = n - i - 1\n      new_arr[j] = arr[i]\n  \
    \  end\n    return new_arr\n  end\n  sort_ascending(arr)\n  return combine_ascending(arr)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgoavshqx.lua:17:\
    \ attempt to get length of local 'x' (a number value)\nstack traceback:\n\t/tmp/tmpgoavshqx.lua:17:\
    \ in function 'count_ones'\n\t/tmp/tmpgoavshqx.lua:25: in function </tmp/tmpgoavshqx.lua:24>\n\
    \t[C]: in function 'sort'\n\t/tmp/tmpgoavshqx.lua:24: in function 'sort_ascending'\n\
    \t/tmp/tmpgoavshqx.lua:40: in function 'candidate'\n\t/tmp/tmpgoavshqx.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs == 0 then\n      return 1\n    elseif rhs == 0 then\n     \
    \ return -1\n    end\n    return lhs < rhs and 1 or -1\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg27ee_5z.lua:18:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpg27ee_5z.lua:18:\
    \ in function </tmp/tmpg27ee_5z.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpg27ee_5z.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpg27ee_5z.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then return -1 end\n    if lhs > rhs then return 1 end\n\
    \    return 0\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp520x0_s3.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp520x0_s3.lua:13:\
    \ in function </tmp/tmp520x0_s3.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmp520x0_s3.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmp520x0_s3.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Sort array in ascending\
    \ order.\n  -- Return sorted array.\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  --\
    \ {1, 2, 3, 4, 5}\n  -- >>> sort_array({-2, -3, -4, -5, -6})\n  -- {-6, -5, -4,\
    \ -3, -2}\n  -- >>> sort_array({1, 0, 2, 3, 4})\n  -- {0, 1, 2, 3, 4}\n  -- >>>\
    \ sort_array({1, 2, 3, 4, 5})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 2,\
    \ 3, 4, 5})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 2, 3, 4, 5})\n  --\
    \ {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 2, 3, 4, 5})\n  -- {1, 2, 3, 4, 5}\n\
    \  -- >>> sort_array({1, 2, 3, 4, 5})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 2, 3, 4, 5})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 2, 3, 4, 5})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 2, 3, 4, 5})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 2, 3, 4, 5})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 2, 3, 4, 5})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 2, 3, 4, 5})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 2, 3, 4, 5})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 2, 3, 4, 5})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 2, 3, 4, 5})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 2, 3, 4, 5})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 2, 3, 4, 5})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 2, 3, 4, 5})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 2, 3, 4, 5})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 2, 3, 4, 5})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 2, 3, 4, 5})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 2, 3, 4, 5})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 2, 3, 4, 5})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 2, 3, 4, 5})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 2, 3, 4, 5})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_ro7cmwr.lua:83: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs == rhs then\n      return 0\n    end\n    if lhs < rhs then\n\
    \      return -1\n    end\n    return 1\n  end\n  table.sort(arr, compare)\n \
    \ return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq2nj6li0.lua:16:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpq2nj6li0.lua:16:\
    \ in function </tmp/tmpq2nj6li0.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpq2nj6li0.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpq2nj6li0.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    local function bin2dec(bin)\n      local dec = 0\n      for i = 1,\
    \ 8 do\n        local b = bin:sub(i, i)\n        dec = (dec + b) * (2 ^ i)\n \
    \     end\n      return dec\n    end\n    local function dec2bin(dec)\n      local\
    \ bin = \"\"\n      while dec > 0 do\n        bin = string.format(\"%s%d\", bin,\
    \ dec % 2)\n        dec = dec >> 1\n      end\n      return bin\n    end\n   \
    \ local function bin2dec2(bin)\n      local dec = 0\n      for i = 1, 8 do\n \
    \       local b = bin:sub(i, i)\n        dec = (dec + b) * (2 ^ i)\n      end\n\
    \      return dec\n    end\n    local function dec2bin2(dec)\n      local bin\
    \ = \"\"\n      while dec > 0 do\n        bin = string.format(\"%s%d\", bin, dec\
    \ % 10)\n        dec = dec >> 1\n      end\n      return bin\n    end\n    local\
    \ function compare2(lhs, rhs)\n      local bin = dec2bin2(lhs)\n      bin = bin:reverse()\n\
    \      bin = bin:sub(1, bin:len())\n      bin = bin:reverse()\n      bin = bin:sub(1,\
    \ bin:len())\n      bin = bin:reverse()\n      bin = bin:sub(1, bin:len())\n \
    \     bin = bin:reverse()\n      bin = bin:sub(1, bin:len())\n      bin = bin:reverse()\n\
    \      bin = bin:sub(1, bin:len())\n      bin = bin:reverse()\n      bin = bin:sub(1,\
    \ bin:len())\n      bin = bin:reverse()\n      bin = bin:sub(1, bin:len())\n \
    \     bin = bin:reverse()\n      bin = bin:sub(1, bin:len())\n      bin = bin:reverse()\n\
    \      bin = bin:sub(1, bin:len())\n      bin = bin:reverse()\n      bin = bin:sub(1,\
    \ bin:len())\n      bin = bin:reverse()\n      bin = bin:sub(1, bin:len())\n \
    \     bin = bin:reverse()\n      bin = bin:sub(1, bin:len())\n      bin = bin:reverse()\n\
    \      bin = bin:sub(1, bin:len())\n      bin = bin:reverse()\n      bin = bin:sub(1,\
    \ bin:len())\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsghss9rl.lua:25: unexpected symbol near ''>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    local function bin2dec(bin)\n      local dec = 0\n      for i = 1,\
    \ 8 do\n        local b = bin:sub(i, i)\n        dec = (dec + b) * (2 ^ i)\n \
    \     end\n      return dec\n    end\n    local function dec2bin(dec)\n      local\
    \ bin = \"\"\n      local i = 0\n      while dec > 0 do\n        bin = string.char(dec\
    \ % 2) + bin\n        dec = math.floor(dec / 2)\n        i = i + 1\n      end\n\
    \      return bin\n    end\n    local function bin2dec2(bin)\n      local dec\
    \ = 0\n      for i = 1, 8 do\n        local b = bin:sub(i, i)\n        dec = (dec\
    \ + b) * (2 ^ i)\n      end\n      return dec\n    end\n    local function dec2bin2(dec)\n\
    \      local bin = \"\"\n      local i = 0\n      while dec > 0 do\n        bin\
    \ = string.char(dec % 2) + bin\n        dec = math.floor(dec / 2)\n        i =\
    \ i + 1\n      end\n      return bin\n    end\n    local function compare2(lhs,\
    \ rhs)\n      local bin = dec2bin2(lhs)\n      bin = string.gsub(bin, \"1\", \"\
    0\")\n      bin = string.gsub(bin, \"2\", \"1\")\n      bin = string.gsub(bin,\
    \ \"3\", \"2\")\n      bin = string.gsub(bin, \"4\", \"3\")\n      bin = string.gsub(bin,\
    \ \"5\", \"4\")\n      bin = string.gsub(bin, \"6\", \"5\")\n      bin = string.gsub(bin,\
    \ \"7\", \"6\")\n      bin = string.gsub(bin, \"8\", \"7\")\n      bin = string.gsub(bin,\
    \ \"9\", \"8\")\n      bin = string.gsub(bin, \"0\", \"9\")\n      bin = bin2dec2(bin)\n\
    \      bin = string.gsub(bin, \"1\", \"0\")\n      bin = string.gsub(bin, \"2\"\
    , \"1\")\n      bin = string.gsub(bin, \"3\", \"2\")\n      bin = string.gsub(bin,\
    \ \"4\", \"3\")\n      bin = string.gsub(bin, \"5\", \"4\")\n      bin = string.gsub(bin,\
    \ \"6\", \"5\")\n      bin = string.gsub(bin, \"7\", \"6\")\n      bin = string.gsub(bin,\
    \ \"8\", \"7\")\n      bin = string.gsub(bin, \"9\", \"8\")\n      bin = string.gsub(bin,\
    \ \"0\", \"9\")\n      bin = bin2dec(bin)\n      bin = string.gsub(bin\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyxfg1o8d.lua:74: '')'' expected (to close ''('' at line 73)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Sort arr based on number\
    \ of ones in their binary representation\n  -- Sort arr based on decimal value\n\
    \  -- It must be implemented like this:\n  -- >>> sort_array({1, 5, 2, 3, 4})\n\
    \  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({-2, -3, -4, -5, -6})\n  -- {-6, -5,\
    \ -4, -3, -2}\n  -- >>> sort_array({1, 0, 2, 3, 4})\n  -- {0, 1, 2, 3, 4}\n  --\
    \ Write your code here\n  -- return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp517873g9.lua:28:\
    \ expected: {1, 2, 4, 3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmp517873g9.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    local lbits = string.sub(tostring(lhs), 1, 1)\n    local rbits = string.sub(tostring(rhs),\
    \ 1, 1)\n    local lnum = tonumber(lbits)\n    local rnum = tonumber(rbits)\n\
    \    if lnum == rnum then\n      return 0\n    end\n    if lnum < rnum then\n\
    \      return -1\n    end\n    return 1\n  end\n  table.sort(arr, compare)\n \
    \ return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp23zaah4r.lua:20:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp23zaah4r.lua:20:\
    \ in function </tmp/tmp23zaah4r.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmp23zaah4r.lua:25:\
    \ in function 'candidate'\n\t/tmp/tmp23zaah4r.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(left,\
    \ right)\n    local function cmp(num)\n      if num == 0 then\n        return\
    \ 0\n      elseif num == 1 then\n        return -1\n      else\n        return\
    \ num\n      end\n    end\n    local left_ones = #(left and unpack(left:gsub(\"\
    %d+\", \"\")))\n    local right_ones = #(right and unpack(right:gsub(\"%d+\",\
    \ \"\")))\n    if left_ones == 0 then\n      return right_ones\n    elseif right_ones\
    \ == 0 then\n      return left_ones\n    elseif left_ones < right_ones then\n\
    \      return -1\n    else\n      return 1\n    end\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn_u7oq6v.lua:22:\
    \ attempt to index local 'left' (a number value)\nstack traceback:\n\t/tmp/tmpn_u7oq6v.lua:22:\
    \ in function </tmp/tmpn_u7oq6v.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpn_u7oq6v.lua:34:\
    \ in function 'candidate'\n\t/tmp/tmpn_u7oq6v.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs == 0 then\n      return 0\n    end\n    if lhs == -1 then\n\
    \      return 1\n    end\n    if lhs == 1 then\n      if rhs == 0 then\n     \
    \   return 0\n      elseif rhs == -1 then\n        return -1\n      else\n   \
    \     return rhs\n      end\n    end\n    if rhs == 0 then\n      return -1\n\
    \    end\n    if rhs == 1 then\n      return 0\n    end\n    return lhs < rhs\
    \ and 1 or -1\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1wk_gkk8.lua:34:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp1wk_gkk8.lua:34:\
    \ in function </tmp/tmp1wk_gkk8.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmp1wk_gkk8.lua:36:\
    \ in function 'candidate'\n\t/tmp/tmp1wk_gkk8.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Write your solution here\n\
    \  -- Hint: Use a table with two columns: number of ones in binary representation\
    \ and decimal value\n  -- Hint: Use a table with two columns: number of ones in\
    \ binary representation and decimal value\n  -- Hint: Use a table with two columns:\
    \ number of ones in binary representation and decimal value\n  -- Hint: Use a\
    \ table with two columns: number of ones in binary representation and decimal\
    \ value\n  -- Hint: Use a table with two columns: number of ones in binary representation\
    \ and decimal value\n  -- Hint: Use a table with two columns: number of ones in\
    \ binary representation and decimal value\n  -- Hint: Use a table with two columns:\
    \ number of ones in binary representation and decimal value\n  -- Hint: Use a\
    \ table with two columns: number of ones in binary representation and decimal\
    \ value\n  -- Hint: Use a table with two columns: number of ones in binary representation\
    \ and decimal value\n  -- Hint: Use a table with two columns: number of ones in\
    \ binary representation and decimal value\n  -- Hint: Use a table with two columns:\
    \ number of ones in binary representation and decimal value\n  -- Hint: Use a\
    \ table with two columns: number of ones in binary representation and decimal\
    \ value\n  -- Hint: Use a table with two columns: number of ones in binary representation\
    \ and decimal value\n  -- Hint: Use a table with two columns: number of ones in\
    \ binary representation and decimal value\n  -- Hint: Use a table with two columns:\
    \ number of ones in binary representation and decimal value\n  -- Hint: Use a\
    \ table with two columns: number of ones in binary representation and decimal\
    \ value\n  -- Hint: Use a table with two columns: number of ones in binary representation\
    \ and decimal value\n  -- Hint: Use a table with two columns: number of ones in\
    \ binary representation and decimal value\n  -- Hint: Use a table with two columns:\
    \ number of ones in binary representation and decimal value\n  -- Hint: Use a\
    \ table with two columns: number of ones in binary representation and decimal\
    \ value\n  -- Hint: Use a table with two columns: number of ones in binary representation\
    \ and decimal value\n  -- Hint: Use a table with two columns: number of ones in\
    \ binary representation and decimal value\n  -- Hint: Use a table with two columns:\
    \ number of ones in binary representation and decimal value\n  -- Hint: Use a\
    \ table with two columns: number of ones in binary representation and decimal\
    \ value\n  -- Hint: Use a table with two columns: number of ones in binary representation\
    \ and decimal value\n  -- Hint: Use \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgcvo_64i.lua:53: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Sort arr using bubble\
    \ sort algorithm.\n  -- https://en.wikipedia.org/wiki/Bubble_sort\n  local function\
    \ swap(arr, i, j)\n    arr[i], arr[j] = arr[j], arr[i]\n  end\n  local function\
    \ bubble_sort(arr)\n    local n = #arr\n    for i = 1, n - 1 do\n      local swapped\
    \ = false\n      for j = 1, n - i - 1 do\n        if arr[j] > arr[j + 1] then\n\
    \          swap(arr, j, j + 1)\n          swapped = true\n        end\n      end\n\
    \      if not swapped then\n        return arr\n      end\n    end\n    return\
    \ arr\n  end\n  return bubble_sort(arr)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcoxtvfil.lua:39:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {1, 2, 3, 5, 4}\nstack traceback:\n\t/tmp/tmpcoxtvfil.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- The first step is to\
    \ count the number of ones in each number.\n  -- The result is a table with keys\
    \ of numbers and values of number of ones.\n  local counts = {}\n  for _, v in\
    \ pairs(arr) do\n    local count = counts[v]\n    if not count then\n      count\
    \ = 1\n    end\n    counts[v] = count + 1\n  end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu7aknugn.lua:36: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    local function bits(x)\n      local b = 0\n      while x > 0 do\n\
    \        b, x = b + (x % 2), x / 2\n      end\n      return b\n    end\n    local\
    \ lhs_bits = bits(lhs)\n    local rhs_bits = bits(rhs)\n    if lhs_bits < rhs_bits\
    \ then\n      return -1\n    elseif lhs_bits > rhs_bits then\n      return 1\n\
    \    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbrmfknlq.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpbrmfknlq.lua:15:\
    \ in function 'bits'\n\t/tmp/tmpbrmfknlq.lua:20: in function </tmp/tmpbrmfknlq.lua:12>\n\
    \t[C]: in function 'sort'\n\t/tmp/tmpbrmfknlq.lua:30: in function 'candidate'\n\
    \t/tmp/tmpbrmfknlq.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- The first step is to\
    \ count the number of ones in each bin.\n  -- For this purpose, use bitwise operations.\n\
    \  local function count_ones(x)\n    local n = 0\n    while x > 0 do\n      n\
    \ = n + (x & 1)\n      x = x >> 1\n    end\n    return n\n  end\n  -- The second\
    \ step is to sort the array according to number of ones.\n  -- For this purpose,\
    \ use \"bubble sort\".\n  local function bubble_sort(arr)\n    local n = #arr\n\
    \    for i = 1, n do\n      local j\n      for j = 1, n do\n        if count_ones(arr[j])\
    \ > count_ones(arr[j + 1]) then\n          arr[j], arr[j + 1] = arr[j + 1], arr[j]\n\
    \        end\n      end\n    end\n    return arr\n  end\n  -- The third step is\
    \ to sort the array according to decimal value.\n  -- For this purpose, use \"\
    bubble sort\".\n  local function decimal_sort(arr)\n    local n = #arr\n    for\
    \ i = 1, n do\n      local j\n      for j = 1, n do\n        if arr[j] < arr[j\
    \ + 1] then\n          arr[j], arr[j + 1] = arr[j + 1], arr[j]\n        end\n\
    \      end\n    end\n    return arr\n  end\n  -- The fourth step is to sort the\
    \ array according to decimal value.\n  -- For this purpose, use \"bubble sort\"\
    .\n  local function decimal_sort_2(arr)\n    local n = #arr\n    for i = 1, n\
    \ do\n      local j\n      for j = 1, n do\n        if arr[j] < arr[j + 1] then\n\
    \          arr[j], arr[j + 1] = arr[j + 1], arr[j]\n        end\n      end\n \
    \   end\n    return arr\n  end\n  -- The fifth step is to sort the array according\
    \ to decimal value.\n  -- For this purpose, use \"bubble sort\".\n  local function\
    \ decimal_sort_3(arr)\n    local n = #arr\n    for i = 1, n do\n      local j\n\
    \      for j = 1, n do\n        if arr[j] < arr[j + 1] then\n          arr[j],\
    \ arr[j + 1] = arr[j + 1], arr[j]\n        end\n      end\n    end\n    return\
    \ arr\n  end\n  -- The sixth step is to sort the array according to decimal value.\n\
    \  -- For this purpose, use \"bubble sort\".\n  local function decimal_sort_4(arr)\n\
    \    local n = #arr\n    for i = 1, n do\n      local j\n      for j = 1, n do\n\
    \        if arr[j] < arr[j + 1] then\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbwne4fm1.lua:17: '')'' expected near ''&''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- sort by number of ones\n\
    \  local function cmp_ones(a, b)\n    return #a > #b or\n      (#a == #b and a\
    \ > b) or\n      (#a == #b and a < b and a < 0)\n  end\n  table.sort(arr, cmp_ones)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqb5a8q8s.lua:33: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function cmp(lhs,\
    \ rhs)\n    local l = 0\n    local r = 0\n    while l < lhs and r < rhs do\n \
    \     if lhs[l] == 1 then l = l + 1; else r = r + 1; end\n    end\n    if l <\
    \ lhs then return -1 end\n    if r < rhs then return 1 end\n    return lhs - rhs\n\
    \  end\n  table.sort(arr, cmp)\n  return arr\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg4isibmr.lua:16:\
    \ attempt to index local 'lhs' (a number value)\nstack traceback:\n\t/tmp/tmpg4isibmr.lua:16:\
    \ in function </tmp/tmpg4isibmr.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpg4isibmr.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpg4isibmr.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We use an auxiliary table\
    \ to store binary representation of numbers\n  -- with ones. We use it to sort\
    \ numbers with same number of ones.\n  local function binary(x)\n    local b =\
    \ {}\n    for i = 1, 8 do\n      b[i] = x%2\n      x = math.floor(x/2)\n    end\n\
    \    return b\n  end\n  -- We use auxiliary table to store decimal representation\
    \ of numbers\n  -- with ones. We use it to sort numbers with same number of ones.\n\
    \  local function decimal(x)\n    local b = {}\n    for i = 1, 8 do\n      b[i]\
    \ = x%10\n      x = math.floor(x/10)\n    end\n    return b\n  end\n  -- We use\
    \ auxiliary table to store decimal representation of numbers\n  -- with ones.\
    \ We use it to sort numbers with same number of ones.\n  local function decimal_to_binary(x)\n\
    \    local b = {}\n    for i = 1, 8 do\n      b[i] = x%10\n      x = math.floor(x/10)\n\
    \    end\n    return b\n  end\n  -- We use auxiliary table to store decimal representation\
    \ of numbers\n  -- with ones. We use it to sort numbers with same number of ones.\n\
    \  local function decimal_to_decimal(x)\n    local b = {}\n    for i = 1, 8 do\n\
    \      b[i] = x%10\n      x = math.floor(x/10)\n    end\n    return b\n  end\n\
    \  -- We use auxiliary table to store decimal representation of numbers\n  --\
    \ with ones. We use it to sort numbers with same number of ones.\n  local function\
    \ decimal_to_decimal_to_binary(x)\n    local b = {}\n    for i = 1, 8 do\n   \
    \   b[i] = x%10\n      x = math.floor(x/10)\n    end\n    return b\n  end\n  --\
    \ We use auxiliary table to store decimal representation of numbers\n  -- with\
    \ ones. We use it to sort numbers with same number of ones.\n  local function\
    \ decimal_to_decimal_to_decimal(x)\n    local b = {}\n    for i = 1, 8 do\n  \
    \    b[i] = x%10\n      x = math.floor(x/10)\n    end\n    return b\n  end\n \
    \ -- We use auxiliary table to store decimal representation of numbers\n  -- with\
    \ ones. We use it to sort numbers with same number of ones.\n  local function\
    \ decimal_to_decimal_to_decimal_to_binary(x)\n    local b = {}\n    for i = 1,\
    \ 8 do\n      b[i] = x%10\n      x = math.floor(x/10)\n    end\n    return b\n\
    \  end\n  -- We use auxiliary table to store decimal representation of numbers\n\
    \  -- with ones. We use it to \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnaztnepe.lua:98: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Sort array in ascending\
    \ order\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>>\
    \ sort_array({-2, -3, -4, -5, -6})\n  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1,\
    \ 0, 2, 3, 4})\n  -- {0, 1, 2, 3, 4}\n  -- Sort array in descending order\n  --\
    \ >>> sort_array({1, 5, 2, 3, 4}, true)\n  -- {4, 3, 2, 1, 0}\n  -- >>> sort_array({-2,\
    \ -3, -4, -5, -6}, true)\n  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1, 0,\
    \ 2, 3, 4}, true)\n  -- {0, 1, 2, 3, 4}\n  -- Sort array in descending order with\
    \ same number of ones\n  -- >>> sort_array({1, 5, 2, 3, 4}, true)\n  -- {4, 3,\
    \ 2, 1, 0}\n  -- >>> sort_array({-2, -3, -4, -5, -6}, true)\n  -- {-6, -5, -4,\
    \ -3, -2}\n  -- >>> sort_array({1, 0, 2, 3, 4}, true)\n  -- {0, 1, 2, 3, 4}\n\
    \  -- Sort array in descending order with different number of ones\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4}, true)\n  -- {4, 3, 2, 1, 0}\n  -- >>> sort_array({-2, -3, -4, -5,\
    \ -6}, true)\n  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1, 0, 2, 3, 4},\
    \ true)\n  -- {0, 1, 2, 3, 4}\n  -- Sort array in descending order with same number\
    \ of ones and different number of ones\n  -- >>> sort_array({1, 5, 2, 3, 4}, true)\n\
    \  -- {4, 3, 2, 1, 0}\n  -- >>> sort_array({-2, -3, -4, -5, -6}, true)\n  -- {-6,\
    \ -5, -4, -3, -2}\n  -- >>> sort_array({1, 0, 2, 3, 4}, true)\n  -- {0, 1, 2,\
    \ 3, 4}\n  -- Sort array in descending order with different number of ones and\
    \ same number of ones\n  -- >>> sort_array({1, 5, 2, 3, 4}, true)\n  -- {4, 3,\
    \ 2, 1, 0}\n  -- >>> sort_array({-2, -3, -4, -5, -6}, true)\n  -- {-6, -5, -4,\
    \ -3, -2}\n  -- >>> sort_array({1, 0, 2, 3, 4}, true)\n  -- {0, 1, 2, 3, 4}\n\
    \  -- Sort array in descending order with same number of ones and different number\
    \ of ones\n  -- >>> sort_array({1, 5, 2, 3, 4}, true)\n  -- {4, 3, 2, 1, 0}\n\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxi3aqnz4.lua:72: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs == rhs then return 0 end\n    if lhs < rhs then return -1 end\n\
    \    return 1\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmoyte7_3.lua:14:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpmoyte7_3.lua:14:\
    \ in function </tmp/tmpmoyte7_3.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpmoyte7_3.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpmoyte7_3.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function cmp(x, y)\n\
    \    if x > y then\n      return 1\n    elseif x < y then\n      return -1\n \
    \   else\n      return 0\n    end\n  end\n  table.sort(arr, cmp)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4jmouom3.lua:13:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp4jmouom3.lua:13:\
    \ in function </tmp/tmp4jmouom3.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmp4jmouom3.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmp4jmouom3.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(x,\
    \ y) -- Compare function for sorting\n    if x > y then\n      return 1\n    elseif\
    \ x < y then\n      return -1\n    else\n      return 0\n    end\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnvmzim1f.lua:13:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpnvmzim1f.lua:13:\
    \ in function </tmp/tmpnvmzim1f.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpnvmzim1f.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpnvmzim1f.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Base case\n  if #arr\
    \ == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp77akl1iy.lua:30: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Sort by number of ones\
    \ in binary representation\n  local function cmp(a, b)\n    if a == 0 then\n \
    \     return b\n    end\n    if b == 0 then\n      return a\n    end\n    return\
    \ a > b\n  end\n  table.sort(arr, cmp)\n  -- Sort by decimal value\n  table.sort(arr,\
    \ function(x, y)\n    return math.abs(x - y)\n  end)\n  return arr\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq5erlilr.lua:25:\
    \ attempt to perform arithmetic on local 'x' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpq5erlilr.lua:25: in function </tmp/tmpq5erlilr.lua:24>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmpq5erlilr.lua:24: in function 'candidate'\n\t/tmp/tmpq5erlilr.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function cmp(x, y)\n\
    \    if x < y then\n      return -1\n    elseif x > y then\n      return 1\n \
    \   else\n      return 0\n    end\n  end\n  table.sort(arr, cmp)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmjhjt73q.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpmjhjt73q.lua:13:\
    \ in function </tmp/tmpmjhjt73q.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpmjhjt73q.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpmjhjt73q.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs == rhs then\n      return 0\n    end\n    if lhs < rhs then\n\
    \      return -1\n    end\n    return 1\n  end\n  table.sort(arr, compare)\n \
    \ return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq2nj6li0.lua:16:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpq2nj6li0.lua:16:\
    \ in function </tmp/tmpq2nj6li0.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpq2nj6li0.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpq2nj6li0.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Write your code here\n\
    \  local function helper(arr, i, j, k)\n    if i == j then\n      arr[k] = arr[i]\n\
    \      return\n    end\n    if arr[i] > arr[j] then\n      helper(arr, i, j, k\
    \ + 1)\n      helper(arr, i + 1, j, k)\n    else\n      helper(arr, i + 1, j,\
    \ k + 1)\n      helper(arr, i, j + 1, k)\n    end\n  end\n  helper(arr, 0, #arr\
    \ - 1, 0)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnwf2ws0b.lua:18:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpnwf2ws0b.lua:18:\
    \ in function 'helper'\n\t/tmp/tmpnwf2ws0b.lua:26: in function 'candidate'\n\t\
    /tmp/tmpnwf2ws0b.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We use two stacks to\
    \ implement binary search and sort algorithm.\n  -- The first stack contains all\
    \ elements with non-zero binary representation.\n  -- The second stack contains\
    \ all elements with zero binary representation.\n  -- The algorithm is as follows:\n\
    \  --\n  --   1. Sort first stack according to number of ones in their binary\
    \ representation.\n  --   2. Sort second stack according to decimal value.\n \
    \ --   3. Merge both stacks.\n  --\n  -- The complexity of the algorithm is O(n\
    \ log n).\n  -- @param arr Array of non-negative integers.\n  -- @return Sorted\
    \ array of non-negative integers.\n  local stack1 = {}\n  local stack2 = {}\n\
    \  for i = 1, #arr do\n    local bin = math.floor(math.log2(arr[i]))\n    if bin\
    \ == 0 then\n      stack1[#stack1 + 1] = arr[i]\n    else\n      stack2[#stack2\
    \ + 1] = arr[i]\n    end\n  end\n  table.sort(stack1)\n  table.sort(stack2)\n\
    \  local result = {stack1[1], stack2[1]}\n  for i = 2, #stack1 do\n    table.insert(result,\
    \ stack1[i])\n    table.insert(result, stack2[i])\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfcgdls7f.lua:27:\
    \ attempt to call field 'log2' (a nil value)\nstack traceback:\n\t/tmp/tmpfcgdls7f.lua:27:\
    \ in function 'candidate'\n\t/tmp/tmpfcgdls7f.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We sort by number of\
    \ ones in their binary representation\n  -- ascending order\n  local function\
    \ cmp_ones(a, b)\n    return #a > #b or\n      (#a == #b and a > b) or\n     \
    \ (#a == #b and a < b and a ~= 0)\n  end\n  -- We sort by decimal value\n  local\
    \ function cmp_dec(a, b)\n    return a > b or\n      (a == b and a ~= 0)\n  end\n\
    \  -- We sort by decimal value if number of ones in their binary\n  -- representation\
    \ is equal\n  local function cmp_dec_ones(a, b)\n    return #a > #b or\n     \
    \ (#a == #b and a ~= 0 and a > b) or\n      (#a == #b and a ~= 0 and a < b and\
    \ a ~= 0)\n  end\n  -- We sort by decimal value if number of ones in their binary\n\
    \  -- representation is equal\n  local function cmp_dec_ones_reverse(a, b)\n \
    \   return #a > #b or\n      (#a == #b and a ~= 0 and a < b) or\n      (#a ==\
    \ #b and a ~= 0 and a > b and a ~= 0)\n  end\n  -- We sort by decimal value if\
    \ number of ones in their binary\n  -- representation is equal\n  local function\
    \ cmp_dec_reverse(a, b)\n    return a > b or\n      (a == b and a ~= 0)\n  end\n\
    \  -- We sort by decimal value if number of ones in their binary\n  -- representation\
    \ is equal\n  local function cmp_dec_ones_reverse(a, b)\n    return a > b or\n\
    \      (a == b and a ~= 0)\n  end\n  -- We sort by decimal value if number of\
    \ ones in their binary\n  -- representation is equal\n  local function cmp_dec_reverse(a,\
    \ b)\n    return a > b or\n      (a == b and a ~= 0)\n  end\n  -- We sort by decimal\
    \ value if number of ones in their binary\n  -- representation is equal\n  local\
    \ function cmp_dec_ones_reverse(a, b)\n    return a > b or\n      (a == b and\
    \ a ~= 0)\n  end\n  -- We sort by decimal value if number of ones in their binary\n\
    \  -- representation is equal\n  local function cmp_dec_reverse(a, b)\n    return\
    \ a > b or\n      (a == b and a ~= 0)\n  end\n  -- We sort by decimal value if\
    \ number of ones in their binary\n  -- representation is equal\n  local function\
    \ cmp_dec_ones_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa89fcr7w.lua:71: ''('' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Write your sorting code\
    \ here\n  -- Hint: Use a nested loop to iterate through the array\n  -- Hint:\
    \ Use a nested loop to iterate through the array\n  -- Hint: Use a nested loop\
    \ to iterate through the array\n  -- Hint: Use a nested loop to iterate through\
    \ the array\n  -- Hint: Use a nested loop to iterate through the array\n  -- Hint:\
    \ Use a nested loop to iterate through the array\n  -- Hint: Use a nested loop\
    \ to iterate through the array\n  -- Hint: Use a nested loop to iterate through\
    \ the array\n  -- Hint: Use a nested loop to iterate through the array\n  -- Hint:\
    \ Use a nested loop to iterate through the array\n  -- Hint: Use a nested loop\
    \ to iterate through the array\n  -- Hint: Use a nested loop to iterate through\
    \ the array\n  -- Hint: Use a nested loop to iterate through the array\n  -- Hint:\
    \ Use a nested loop to iterate through the array\n  -- Hint: Use a nested loop\
    \ to iterate through the array\n  -- Hint: Use a nested loop to iterate through\
    \ the array\n  -- Hint: Use a nested loop to iterate through the array\n  -- Hint:\
    \ Use a nested loop to iterate through the array\n  -- Hint: Use a nested loop\
    \ to iterate through the array\n  -- Hint: Use a nested loop to iterate through\
    \ the array\n  -- Hint: Use a nested loop to iterate through the array\n  -- Hint:\
    \ Use a nested loop to iterate through the array\n  -- Hint: Use a nested loop\
    \ to iterate through the array\n  -- Hint: Use a nested loop to iterate through\
    \ the array\n  -- Hint: Use a nested loop to iterate through the array\n  -- Hint:\
    \ Use a nested loop to iterate through the array\n  -- Hint: Use a nested loop\
    \ to iterate through the array\n  -- Hint: Use a nested loop to iterate through\
    \ the array\n  -- Hint: Use a nested loop to iterate through the array\n  -- Hint:\
    \ Use a nested loop to iterate through the array\n  -- Hint: Use a nested loop\
    \ to iterate through the array\n  -- Hint: Use a nested loop to iterate through\
    \ the array\n  -- Hint: Use a nested loop to iterate through the array\n  -- Hint:\
    \ Use a nested loop to iterate through the array\n  -- Hint: Use a nested loop\
    \ to iterate through the array\n  -- Hint: Use a nested loop to iterate through\
    \ the array\n  -- Hint: Use a nested loop to iterate through the array\n  -- Hint:\
    \ Use a nested loop to iterate through the array\n  -- Hint: Use a nested loop\
    \ to iterate \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu0mo0r8x.lua:66: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Sort the array in ascending\
    \ order based on the number of ones in their binary representation\n  -- The binary\
    \ representation is obtained by converting each integer to a binary string and\
    \ concatenating them\n  -- The resulting binary string has as many '1' bits as\
    \ there are integers in the input array\n  -- The resulting binary string will\
    \ be a number in base 2 with as many '0' bits as there are integers in the input\
    \ array\n  -- The length of the resulting binary string will be the length of\
    \ the binary representation of the largest integer in the input array\n  -- For\
    \ example, if there are two integers in the input array, the binary representation\
    \ of these two integers will be:\n  -- '0101' if the largest integer in the input\
    \ array is 1\n  -- '1010' if the largest integer in the input array is 2\n  --\
    \ The length of the binary string will be the length of the binary representation\
    \ of the largest integer in the input array\n  -- The binary representation of\
    \ the largest integer in the input array is obtained by converting each integer\
    \ to a binary string and concatenating them\n  -- The resulting binary string\
    \ has as many '1' bits as there are integers in the input array\n  -- The resulting\
    \ binary string will be a number in base 2 with as many '0' bits as there are\
    \ integers in the input array\n  -- The length of the resulting binary string\
    \ will be the length of the binary representation of the largest integer in the\
    \ input array\n  -- For example, if there are two integers in the input array,\
    \ the binary representation of these two integers will be:\n  -- '0101' if the\
    \ largest integer in the input array is 1\n  -- '1010' if the largest integer\
    \ in the input array is 2\n  -- The length of the binary string will be the length\
    \ of the binary representation of the largest integer in the input array\n  --\
    \ The binary representation of the largest integer in the input array is obtained\
    \ by converting each integer to a binary string and concatenating them\n  -- The\
    \ resulting binary string has as many '1' bits as there are integers in the input\
    \ array\n  -- The resulting binary string will be a number in base 2 with as many\
    \ '0' bits as there are integers in the input array\n  -- The length of the resulting\
    \ binary string will be the length of the binary representation of the largest\
    \ integer in the input array\n  -- For example, if there are two integers in the\
    \ input array, the binary representation of these two integers will be:\n  --\
    \ '0101' if the largest integer in the input array is 1\n  -- '1010' if the largest\
    \ integer in the input array is 2\n  -- The length of the binary string will be\
    \ the length of the binary representation of the largest integer in the input\
    \ array\n  -- The binary representation of the largest integer in the input array\
    \ is obtained by converting each integer to a binary string and concatenating\
    \ them\n  -- The resulting binary string has as many '1' bits as there are integers\
    \ in the input array\n  -- The \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8wxt0lz0.lua:54: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function helper(arr,\
    \ i, n)\n    if i == n then\n      table.sort(arr)\n      return\n    end\n  \
    \  helper(arr, i + 1, n)\n    local m = math.floor(math.log2(i + 1))\n    local\
    \ tmp = arr[i]\n    arr[i] = arr[m]\n    arr[m] = tmp\n    helper(arr, i + 1,\
    \ n)\n  end\n  helper(arr, 1, #arr)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfta5ykr9.lua:18:\
    \ attempt to call field 'log2' (a nil value)\nstack traceback:\n\t/tmp/tmpfta5ykr9.lua:18:\
    \ in function 'helper'\n\t/tmp/tmpfta5ykr9.lua:17: in function 'helper'\n\t/tmp/tmpfta5ykr9.lua:17:\
    \ in function 'helper'\n\t/tmp/tmpfta5ykr9.lua:17: in function 'helper'\n\t/tmp/tmpfta5ykr9.lua:24:\
    \ in function 'candidate'\n\t/tmp/tmpfta5ykr9.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Write your code here\n\
    \  local function compare(lhs, rhs)\n    if lhs < rhs then\n      return -1\n\
    \    elseif lhs > rhs then\n      return 1\n    else\n      return 0\n    end\n\
    \  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpluadjcc9.lua:14:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpluadjcc9.lua:14:\
    \ in function </tmp/tmpluadjcc9.lua:13>\n\t[C]: in function 'sort'\n\t/tmp/tmpluadjcc9.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpluadjcc9.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Sort the array in ascending\
    \ order based on number of ones in its binary representation\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({-2, -3, -4, -5, -6})\n\
    \  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1, 0, 2, 3, 4})\n  -- {0, 1,\
    \ 2, 3, 4}\n  local function compare(lhs, rhs)\n    local function bin2dec(bin)\n\
    \      -- Convert binary representation to decimal number\n      -- >>> bin2dec('1100')\n\
    \      -- 5\n      -- >>> bin2dec('1101')\n      -- 6\n      -- >>> bin2dec('1111')\n\
    \      -- -1\n      -- >>> bin2dec('1010')\n      -- 4\n      -- >>> bin2dec('0101')\n\
    \      -- 3\n      -- >>> bin2dec('1111')\n      -- -1\n      -- >>> bin2dec('0111')\n\
    \      -- 2\n      -- >>> bin2dec('1111')\n      -- -1\n      -- >>> bin2dec('1001')\n\
    \      -- 1\n      -- >>> bin2dec('1001')\n      -- 1\n      -- >>> bin2dec('1111')\n\
    \      -- -1\n      -- >>> bin2dec('1111')\n      -- -1\n      -- >>> bin2dec('1111')\n\
    \      -- -1\n      -- >>> bin2dec('1111')\n      -- -1\n      -- >>> bin2dec('1111')\n\
    \      -- -1\n      -- >>> bin2dec('1111')\n      -- -1\n      -- >>> bin2dec('1111')\n\
    \      -- -1\n      -- >>> bin2dec('1111')\n      -- -1\n      -- >>> bin2dec('1111')\n\
    \      -- -1\n      -- >>> bin2dec('1111')\n      -- -1\n      -- >>> bin2dec('1111')\n\
    \      -- -1\n      -- >>> bin2dec('1111')\n      -- -1\n      -- >>> bin2dec('1111')\n\
    \      -- -1\n      -- >>> bin2dec('1111')\n      -- -1\n      -- >>> bin2dec('1111')\n\
    \      -- -1\n      -- >>> bin2dec('1111')\n      -- -1\n      -- >>> bin2dec('1111')\n\
    \      -- -1\n      -- >>> bin2dec('1111')\n      -- -1\n      -- >>> bin2dec('1111')\n\
    \      \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvx_bc63f.lua:94: ''end'' expected (to close ''function'' at
    line 20) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Sort the array in ascending\
    \ order\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>>\
    \ sort_array({-2, -3, -4, -5, -6})\n  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1,\
    \ 0, 2, 3, 4})\n  -- {0, 1, 2, 3, 4}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpndo4jj01.lua:82: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    local function bin2dec(n)\n      local s = ''\n      while n ~= 0\
    \ do\n        s = string.format('%s%d', s, n*2)\n        n = math.floor(n / 2)\n\
    \      end\n      return tonumber(s)\n    end\n    local function dec2bin(n)\n\
    \      local s = ''\n      while n ~= 0 do\n        s = string.format('%s%d',\
    \ s, n*2)\n        n = math.floor((n-1) / 2)\n      end\n      return s\n    end\n\
    \    local function compare_dec(lhs, rhs)\n      return bin2dec(lhs) < bin2dec(rhs)\
    \ and 1 or -1\n    end\n    local function compare_bin(lhs, rhs)\n      return\
    \ dec2bin(lhs) < dec2bin(rhs) and 1 or -1\n    end\n    local function compare_int(lhs,\
    \ rhs)\n      return lhs < rhs and 1 or -1\n    end\n    local function compare_float(lhs,\
    \ rhs)\n      return lhs < rhs and 1 or -1\n    end\n    local function compare_array(lhs,\
    \ rhs)\n      local llen = #lhs\n      local rlen = #rhs\n      local cmp = 0\n\
    \      local i = 0\n      while i < llen and i < rlen do\n        cmp = compare(lhs[i],\
    \ rhs[i])\n        if cmp == 0 then\n          i = i + 1\n        elseif cmp ==\
    \ 1 then\n          i = llen\n        else\n          i = rlen\n        end\n\
    \      end\n      return cmp\n    end\n    local function compare_dict(lhs, rhs)\n\
    \      local llen = #lhs\n      local rlen = #rhs\n      local cmp = 0\n     \
    \ local i = 0\n      while i < llen and i < rlen do\n        cmp = compare(lhs.i,\
    \ rhs.i)\n        if cmp == 0 then\n          i = i + 1\n        elseif cmp ==\
    \ 1 then\n          i = llen\n        else\n          i = rlen\n        end\n\
    \      end\n      return cmp\n    end\n    if type(arr) == 'table' then\n    \
    \  if type(arr[1]) == 'table' then\n        return compare_dict(arr, arr)\n  \
    \    elseif type(arr[1]) == 'number' then\n        return compare_int(arr, arr)\n\
    \      elseif type(arr[1]) == 'string' then\n        return compare_float(arr,\
    \ arr)\n      elseif type(arr[1]) == 'function' then\n        return compare_array(arr,\
    \ arr)\n      else\n        return compare_array(arr, arr)\n      end\n    else\n\
    \      return compare_array(arr, arr)\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpowtj3y2s.lua:36:\
    \ attempt to compare two table values\nstack traceback:\n\t/tmp/tmpowtj3y2s.lua:36:\
    \ in function </tmp/tmpowtj3y2s.lua:35>\n\t(tail call): ?\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmpowtj3y2s.lua:91: in function 'candidate'\n\t/tmp/tmpowtj3y2s.lua:98:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- The first step is to\
    \ count the number of ones in each number.\n  -- For this problem, we use a hash\
    \ table to count the number of ones.\n  -- The hash table is implemented as a\
    \ hash map with O(1) lookup.\n  local counts = {}\n  for _, v in pairs(arr) do\n\
    \    local key = tostring(v)\n    counts[key] = counts[key] or 0\n    counts[key]\
    \ = counts[key] + 1\n  end\n  -- The second step is to sort the numbers by number\
    \ of ones.\n  -- For this problem, we use a binary search to find the correct\
    \ position\n  -- to insert the numbers.\n  -- The binary search is implemented\
    \ as a binary search with O(logn) lookup.\n  local function binary_search(arr,\
    \ key)\n    local low = 1\n    local high = #arr\n    while low < high do\n  \
    \    local mid = (low + high) / 2\n      local v = arr[mid]\n      if key < v\
    \ then\n        low = mid + 1\n      elseif key > v then\n        high = mid -\
    \ 1\n      else\n        return mid\n      end\n    end\n    return low\n  end\n\
    \  -- The third step is to insert the numbers in the correct order.\n  -- For\
    \ this problem, we use a binary search to find the correct position\n  -- to insert\
    \ the numbers.\n  -- The binary search is implemented as a binary search with\
    \ O(logn) lookup.\n  local function binary_insert(arr, key, val)\n    local low\
    \ = 1\n    local high = #arr\n    while low < high do\n      local mid = (low\
    \ + high) / 2\n      local v = arr[mid]\n      if key < v then\n        low =\
    \ mid + 1\n      elseif key > v then\n        high = mid - 1\n      else\n   \
    \     arr[mid] = val\n        return arr\n      end\n    end\n    arr[low] = val\n\
    \    return arr\n  end\n  -- The fourth step is to sort the numbers by decimal\
    \ value.\n  -- For this problem, we use a binary search to find the correct position\n\
    \  -- to insert the numbers.\n  -- The binary search is implemented as a binary\
    \ search with O(logn) lookup.\n  local function binary_sort_by_value(arr, key)\n\
    \    local low = 1\n    local high = #arr\n    while low < high do\n      local\
    \ mid = (low + high) / 2\n      local v = arr[mid]\n      if key < v then\n  \
    \      low = mid + 1\n      elseif key > v then\n        high = mid - 1\n    \
    \  else\n        -- The binary search is implemented as a binary search with O(logn)\
    \ lookup.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm3yw64wc.lua:93: ''end'' expected (to close ''if'' at line
    73) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Sort array in ascending\
    \ order\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>>\
    \ sort_array({-2, -3, -4, -5, -6})\n  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1,\
    \ 0, 2, 3, 4})\n  -- {0, 1, 2, 3, 4}\n  -- Sort array in descending order\n  --\
    \ >>> sort_array({1, 5, 2, 3, 4}, true)\n  -- {4, 3, 2, 5, 1}\n  -- >>> sort_array({-2,\
    \ -3, -4, -5, -6}, true)\n  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1, 0,\
    \ 2, 3, 4}, true)\n  -- {0, 1, 2, 3, 4}\n  -- Sort array in ascending order with\
    \ different comparison function\n  -- >>> sort_array({1, 5, 2, 3, 4}, function(x)\n\
    \  --   if x < 0 then return -1 else return 1 end\n  --   end)\n  -- {1, 2, 3,\
    \ 4, 5}\n  -- >>> sort_array({-2, -3, -4, -5, -6}, function(x)\n  --   if x <\
    \ 0 then return -1 else return 1 end\n  --   end)\n  -- {-6, -5, -4, -3, -2}\n\
    \  -- >>> sort_array({1, 0, 2, 3, 4}, function(x)\n  --   if x < 0 then return\
    \ -1 else return 1 end\n  --   end)\n  -- {0, 1, 2, 3, 4}\n  -- Sort array in\
    \ descending order with different comparison function\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4}, function(x)\n  --   if x < 0 then return 1 end\n  --   end)\n \
    \ -- {4, 3, 2, 5, 1}\n  -- >>> sort_array({-2, -3, -4, -5, -6}, function(x)\n\
    \  --   if x < 0 then return 1 end\n  --   end)\n  -- {-6, -5, -4, -3, -2}\n \
    \ -- >>> sort_array({1, 0, 2, 3, 4}, function(x)\n  --   if x < 0 then return\
    \ 1 end\n  --   end)\n  -- {0, 1, 2, 3, 4}\n  -- Sort array in ascending order\
    \ with different comparison function\n  -- >>> sort_array({1, 5, 2, 3, 4}, function(x)\n\
    \  --   if x < 0 then return -1 else return 1 end\n  --   end, true)\n  -- {1,\
    \ 2, 3, 4, 5}\n  -- >>> sort_array({-2, -3, -4, -5, -6}, function(x)\n  --   if\
    \ x < 0 then return -1 else return 1 end\n  --   end, true)\n  -- {-6, -5, -4,\
    \ -3, -2}\n  -- >>> sort_array({\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3bzefvgr.lua:76: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then return -1 else return 1 end\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoav692p8.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpoav692p8.lua:13:\
    \ in function </tmp/tmpoav692p8.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpoav692p8.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpoav692p8.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We use binary search\
    \ to find position of first 1\n  local function binary_search(arr, val)\n    local\
    \ low, high = 1, #arr\n    while low < high do\n      local mid = math.floor(low\
    \ + (high - low) / 2)\n      if arr[mid] == val then\n        return mid\n   \
    \   elseif arr[mid] > val then\n        high = mid\n      else\n        low =\
    \ mid + 1\n      end\n    end\n    return nil\n  end\n  -- We use binary search\
    \ to find position of first 1\n  local function decimal_search(arr, val)\n   \
    \ local low, high = 1, #arr\n    while low < high do\n      local mid = math.floor(low\
    \ + (high - low) / 2)\n      if arr[mid] == val then\n        return mid\n   \
    \   elseif arr[mid] > val then\n        high = mid\n      else\n        low =\
    \ mid + 1\n      end\n    end\n    return nil\n  end\n  -- We use binary search\
    \ to find position of first 1\n  local function binary_search2(arr, val)\n   \
    \ local low, high = 1, #arr\n    while low < high do\n      local mid = math.floor(low\
    \ + (high - low) / 2)\n      if arr[mid] == val then\n        return mid\n   \
    \   elseif arr[mid] > val then\n        high = mid\n      else\n        low =\
    \ mid + 1\n      end\n    end\n    return nil\n  end\n  -- We use binary search\
    \ to find position of first 1\n  local function decimal_search2(arr, val)\n  \
    \  local low, high = 1, #arr\n    while low < high do\n      local mid = math.floor(low\
    \ + (high - low) / 2)\n      if arr[mid] == val then\n        return mid\n   \
    \   elseif arr[mid] > val then\n        high = mid\n      else\n        low =\
    \ mid + 1\n      end\n    end\n    return nil\n  end\n  -- We use binary search\
    \ to find position of first 1\n  local function binary_search3(arr, val)\n   \
    \ local low, high = 1, #arr\n    while low < high do\n      local mid = math.floor(low\
    \ + (high - low) / 2)\n      if arr[mid] == val then\n        return mid\n   \
    \   elseif arr[mid] > val then\n        high = mid\n      else\n        low =\
    \ mid + 1\n      end\n    end\n    return nil\n  end\n  -- We use binary search\
    \ to find position of first 1\n  local function decimal_search3(arr, val)\n  \
    \  local low, high = 1, #arr\n    while low < high do\n      local mid = math.floor(low\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvngvtbp1.lua:92: '')'' expected (to close ''('' at line 91)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Sort array in ascending\
    \ order based on number of ones in binary representation\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({-2, -3, -4, -5, -6})\n\
    \  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1, 0, 2, 3, 4})\n  -- {0, 1,\
    \ 2, 3, 4}\n  -- Sort array in ascending order based on decimal value\n  -- >>>\
    \ sort_array({1, 0, 2, 3, 4})\n  -- {0, 1, 2, 3, 4}\n  -- >>> sort_array({1, 5,\
    \ 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({-2, -3, -4, -5, -6})\n\
    \  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1, 0, 2, 3, 4})\n  -- {0, 1,\
    \ 2, 3, 4}\n  -- Sort array in descending order based on number of ones in binary\
    \ representation\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n\
    \  -- >>> sort_array({-2, -3, -4, -5, -6})\n  -- {-6, -5, -4, -3, -2}\n  -- >>>\
    \ sort_array({1, 0, 2, 3, 4})\n  -- {0, 1, 2, 3, 4}\n  -- >>> sort_array({1, 5,\
    \ 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({-2, -3, -4, -5, -6})\n\
    \  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1, 0, 2, 3, 4})\n  -- {0, 1,\
    \ 2, 3, 4}\n  -- Sort array in descending order based on decimal value\n  -- >>>\
    \ sort_array({1, 0, 2, 3, 4})\n  -- {0, 1, 2, 3, 4}\n  -- >>> sort_array({1, 5,\
    \ 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({-2, -3, -4, -5, -6})\n\
    \  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1, 0, 2, 3, 4})\n  -- {0, 1,\
    \ 2, 3, 4}\n  -- Sort array in descending order based on number of ones in binary\
    \ representation\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n\
    \  -- >>> sort_array({-2, -3, -4, -5, -6})\n  -- {-6, -5, -4, -3, -2}\n  -- >>>\
    \ sort_array({1, 0, 2, 3, 4})\n  -- {0, 1, 2, 3, 4}\n  -- >>> sort_array({1, 5,\
    \ 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({-2, -3, -4, -5, -6})\n\
    \  -- {-6, -5, -\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5tfuwb6h.lua:75: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Sort array in ascending\
    \ order based on number of ones in their binary representation\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({-2, -3, -4, -5, -6})\n\
    \  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1, 0, 2, 3, 4})\n  -- {0, 1,\
    \ 2, 3, 4}\n  -- Sort array in ascending order based on decimal value\n  -- >>>\
    \ sort_array({1, 0, 2, 3, 4})\n  -- {0, 1, 2, 3, 4}\n  -- >>> sort_array({1, 5,\
    \ 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({-2, -3, -4, -5, -6})\n\
    \  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1, 0, 2, 3, 4})\n  -- {0, 1,\
    \ 2, 3, 4}\n  -- Sort array in descending order based on number of ones in their\
    \ binary representation\n  -- >>> sort_array({1, 5, 2, 3, 4}, true)\n  -- {4,\
    \ 3, 2, 1, 5}\n  -- >>> sort_array({-2, -3, -4, -5, -6}, true)\n  -- {-6, -5,\
    \ -4, -3, -2}\n  -- >>> sort_array({1, 0, 2, 3, 4}, true)\n  -- {0, 1, 2, 3, 4}\n\
    \  -- Sort array in descending order based on decimal value\n  -- >>> sort_array({1,\
    \ 0, 2, 3, 4}, true)\n  -- {0, 1, 2, 3, 4}\n  -- >>> sort_array({1, 5, 2, 3, 4},\
    \ true)\n  -- {4, 3, 2, 1, 5}\n  -- >>> sort_array({-2, -3, -4, -5, -6}, true)\n\
    \  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1, 0, 2, 3, 4}, true)\n  -- {0,\
    \ 1, 2, 3, 4}\n  -- Sort array in descending order based on number of ones in\
    \ their binary representation\n  -- >>> sort_array({1, 5, 2, 3, 4}, false)\n \
    \ -- {5, 4, 3, 2, 1}\n  -- >>> sort_array({-2, -3, -4, -5, -6}, false)\n  -- {-6,\
    \ -5, -4, -3, -2}\n  -- >>> sort_array({1, 0, 2, 3, 4}, false)\n  -- {0, 1, 2,\
    \ 3, 4}\n  -- Sort array in descending order based on decimal value\n  -- >>>\
    \ sort_array({1, 0, 2, 3, 4}, false)\n  -- {0, 1, 2, 3, 4}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4}, false)\n  -- {5, 4, 3, 2, 1}\n  -- >>> sort_array({-2, -3, -4,\
    \ -5, -6}, false)\n  -- {-6, -5, -4, -3, -2\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpblef4tp1.lua:72: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We use binary search\
    \ to find position of first 1\n  -- This position will be used as pivot point\
    \ for binary search\n  -- We also use binary search to find position of first\
    \ 0\n  -- This position will be used as pivot point for binary search\n  -- We\
    \ also use binary search to find position of first 0\n  -- This position will\
    \ be used as pivot point for binary search\n  -- We also use binary search to\
    \ find position of first 0\n  -- This position will be used as pivot point for\
    \ binary search\n  -- We also use binary search to find position of first 0\n\
    \  -- This position will be used as pivot point for binary search\n  -- We also\
    \ use binary search to find position of first 0\n  -- This position will be used\
    \ as pivot point for binary search\n  -- We also use binary search to find position\
    \ of first 0\n  -- This position will be used as pivot point for binary search\n\
    \  -- We also use binary search to find position of first 0\n  -- This position\
    \ will be used as pivot point for binary search\n  -- We also use binary search\
    \ to find position of first 0\n  -- This position will be used as pivot point\
    \ for binary search\n  -- We also use binary search to find position of first\
    \ 0\n  -- This position will be used as pivot point for binary search\n  -- We\
    \ also use binary search to find position of first 0\n  -- This position will\
    \ be used as pivot point for binary search\n  -- We also use binary search to\
    \ find position of first 0\n  -- This position will be used as pivot point for\
    \ binary search\n  -- We also use binary search to find position of first 0\n\
    \  -- This position will be used as pivot point for binary search\n  -- We also\
    \ use binary search to find position of first 0\n  -- This position will be used\
    \ as pivot point for binary search\n  -- We also use binary search to find position\
    \ of first 0\n  -- This position will be used as pivot point for binary search\n\
    \  -- We also use binary search to find position of first 0\n  -- This position\
    \ will be used as pivot point for binary search\n  -- We also use binary search\
    \ to find position of first 0\n  -- This position will be used as pivot point\
    \ for binary search\n  -- We also use binary search to find position of first\
    \ 0\n  -- This position will be used as pivot point for binary search\n  -- We\
    \ also use binary search to find position of first 0\n  -- This position will\
    \ be used as pivot point for binary search\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp6bsmwzv.lua:65: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then return -1 else if lhs > rhs then return 1 else return\
    \ 0 end\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpne8amsyo.lua:32: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Sort array in ascending\
    \ order\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>>\
    \ sort_array({-2, -3, -4, -5, -6})\n  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1,\
    \ 0, 2, 3, 4})\n  -- {0, 1, 2, 3, 4}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6o59b7gn.lua:82: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We use an auxiliary array\
    \ for counting number of ones in binary representation\n  -- of the numbers in\
    \ arr. Since there are 2^n numbers in arr, we use 2^n bits.\n  -- The auxiliary\
    \ array has 2^n elements and is initialized to zero.\n  -- The first 2^n bits\
    \ are set to one. Then, for each number in arr, we set the\n  -- corresponding\
    \ bit to one if the number is greater than zero. After that, we sum\n  -- all\
    \ 2^n bits.\n  local aux\n  aux = {[0] = 0}\n  for i = 1, #arr do\n    aux[2^i]\
    \ = aux[2^i] + 1\n  end\n  -- We sort arr according to number of ones in their\
    \ binary representation in ascending\n  -- order.\n  -- The first 2^n bits are\
    \ set to one. Then, for each number in arr, we set the\n  -- corresponding bit\
    \ to one if the number is greater than zero. After that, we sum\n  -- all 2^n\
    \ bits.\n  -- The auxiliary array has 2^n elements and is initialized to zero.\n\
    \  -- The first 2^n bits are set to one. Then, for each number in arr, we set\
    \ the\n  -- corresponding bit to one if the number is greater than zero. After\
    \ that, we sum\n  -- all 2^n bits.\n  -- The auxiliary array has 2^n elements\
    \ and is initialized to zero.\n  -- The first 2^n bits are set to one. Then, for\
    \ each number in arr, we set the\n  -- corresponding bit to one if the number\
    \ is greater than zero. After that, we sum\n  -- all 2^n bits.\n  -- The auxiliary\
    \ array has 2^n elements and is initialized to zero.\n  -- The first 2^n bits\
    \ are set to one. Then, for each number in arr, we set the\n  -- corresponding\
    \ bit to one if the number is greater than zero. After that, we sum\n  -- all\
    \ 2^n bits.\n  -- The auxiliary array has 2^n elements and is initialized to zero.\n\
    \  -- The first 2^n bits are set to one. Then, for each number in arr, we set\
    \ the\n  -- corresponding bit to one if the number is greater than zero. After\
    \ that, we sum\n  -- all 2^n bits.\n  -- The auxiliary array has 2^n elements\
    \ and is initialized to zero.\n  -- The first 2^n bits are set to one. Then, for\
    \ each number in arr, we set the\n  -- corresponding bit to one if the number\
    \ is greater than zero. After that, we sum\n  -- all 2^n bits.\n  -- The auxiliary\
    \ array has 2^\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplzcs4z7y.lua:63: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    local function bin2dec(bin)\n      local dec = 0\n      for i = 1,\
    \ 8 do\n        local b = bin:sub(i, i)\n        dec = (dec + b) * (2^(8 - i))\n\
    \      end\n      return dec\n    end\n    local function dec2bin(dec)\n     \
    \ local bin = \"\"\n      for i = 1, 8 do\n        local dec = dec / (2^(8 - i))\n\
    \        local b = dec:mod(2)\n        bin = b .. bin\n        dec = dec:div(2)\n\
    \      end\n      return bin\n    end\n    local function bin2dec(bin)\n     \
    \ local dec = 0\n      for i = 1, 8 do\n        local b = bin:sub(i, i)\n    \
    \    dec = (dec + b) * (2^(8 - i))\n      end\n      return dec\n    end\n   \
    \ local function dec2bin(dec)\n      local bin = \"\"\n      for i = 1, 8 do\n\
    \        local dec = dec / (2^(8 - i))\n        local b = dec:mod(2)\n       \
    \ bin = b .. bin\n        dec = dec:div(2)\n      end\n      return bin\n    end\n\
    \    local function bin2dec(bin)\n      local dec = 0\n      for i = 1, 8 do\n\
    \        local b = bin:sub(i, i)\n        dec = (dec + b) * (2^(8 - i))\n    \
    \  end\n      return dec\n    end\n    local function dec2bin(dec)\n      local\
    \ bin = \"\"\n      for i = 1, 8 do\n        local dec = dec / (2^(8 - i))\n \
    \       local b = dec:mod(2)\n        bin = b .. bin\n        dec = dec:div(2)\n\
    \      end\n      return bin\n    end\n    local function bin2dec(bin)\n     \
    \ local dec = 0\n      for i = 1, 8 do\n        local b = bin:sub(i, i)\n    \
    \    dec = (dec + b) * (2^(8 - i))\n      end\n      return dec\n    end\n   \
    \ local function dec2bin(dec)\n      local bin = \"\"\n      for i = 1, 8 do\n\
    \        local dec = dec / (2^(8 - i))\n        local b = dec:mod(2)\n       \
    \ bin = b .. bin\n        dec = dec:div(2)\n      end\n      return bin\n    end\n\
    \    local function bin2dec(bin)\n      local dec = 0\n      for i = 1, 8 do\n\
    \        local b = bin:sub(i, i)\n        dec = (dec + b) * (2^(8 - i))\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp034cg8r.lua:104: ''end'' expected (to close ''for'' at line
    87) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We sort by number of\
    \ ones in their binary representation\n  -- by converting them to binary string\
    \ and counting number of 1's\n  -- from right to left.\n  -- We sort by decimal\
    \ value by converting them to string and counting\n  -- number of 1's from left\
    \ to right.\n  -- We sort by decimal value by converting them to string and counting\n\
    \  -- number of 1's from right to left.\n  -- We sort by decimal value by converting\
    \ them to string and counting\n  -- number of 1's from left to right.\n  -- We\
    \ sort by decimal value by converting them to string and counting\n  -- number\
    \ of 1's from right to left.\n  -- We sort by decimal value by converting them\
    \ to string and counting\n  -- number of 1's from left to right.\n  -- We sort\
    \ by decimal value by converting them to string and counting\n  -- number of 1's\
    \ from right to left.\n  -- We sort by decimal value by converting them to string\
    \ and counting\n  -- number of 1's from left to right.\n  -- We sort by decimal\
    \ value by converting them to string and counting\n  -- number of 1's from right\
    \ to left.\n  -- We sort by decimal value by converting them to string and counting\n\
    \  -- number of 1's from left to right.\n  -- We sort by decimal value by converting\
    \ them to string and counting\n  -- number of 1's from right to left.\n  -- We\
    \ sort by decimal value by converting them to string and counting\n  -- number\
    \ of 1's from left to right.\n  -- We sort by decimal value by converting them\
    \ to string and counting\n  -- number of 1's from right to left.\n  -- We sort\
    \ by decimal value by converting them to string and counting\n  -- number of 1's\
    \ from left to right.\n  -- We sort by decimal value by converting them to string\
    \ and counting\n  -- number of 1's from right to left.\n  -- We sort by decimal\
    \ value by converting them to string and counting\n  -- number of 1's from left\
    \ to right.\n  -- We sort by decimal value by converting them to string and counting\n\
    \  -- number of 1's from right to left.\n  -- We sort by decimal value by converting\
    \ them to string and counting\n  -- number of 1's from left to right.\n  -- We\
    \ sort by decimal value by converting them to string and counting\n  -- number\
    \ of 1's from right to left.\n  -- We sort by decimal value by converting them\
    \ to string and counting\n  -- number of 1's from left to right.\n  -- We sort\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppc0q4uhe.lua:68: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Sort array in ascending\
    \ order\n  -- Sort array in ascending order according to number of ones in their\
    \ binary representation in ascending order\n  -- For similar number of ones, sort\
    \ based on decimal value\n  -- It must be implemented like this:\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({-2, -3, -4, -5, -6})\n\
    \  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1, 0, 2, 3, 4})\n  -- {0, 1,\
    \ 2, 3, 4}\n  -- Sort array in ascending order according to number of ones in\
    \ their binary representation in ascending order\n  -- For similar number of ones,\
    \ sort based on decimal value\n  -- It must be implemented like this:\n  -- >>>\
    \ sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1, 0, 2, 3,\
    \ 4})\n  -- {0, 1, 2, 3, 4}\n  -- Sort array in ascending order according to number\
    \ of ones in their binary representation in ascending order\n  -- For similar\
    \ number of ones, sort based on decimal value\n  -- It must be implemented like\
    \ this:\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>>\
    \ sort_array({-2, -3, -4, -5, -6})\n  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1,\
    \ 0, 2, 3, 4})\n  -- {0, 1, 2, 3, 4}\n  -- Sort array in ascending order according\
    \ to number of ones in their binary representation in ascending order\n  -- For\
    \ similar number of ones, sort based on decimal value\n  -- It must be implemented\
    \ like this:\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  --\
    \ >>> sort_array({-2, -3, -4, -5, -6})\n  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1,\
    \ 0, 2, 3, 4})\n  -- {0, 1, 2, 3, 4}\n  -- Sort array in ascending order according\
    \ to number of ones in their binary representation in ascending order\n  -- For\
    \ similar number of ones, sort based on decimal value\n  -- It must be implemented\
    \ like this:\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  --\
    \ >>> sort_array({-2, -3, -4, -5, -6})\n  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1,\
    \ 0, 2, 3, 4})\n  -- {0, 1, 2, \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6038xkz1.lua:72: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Write your solution here\n\
    \  -- Hint: Use table.sort and table.unpack\n  -- Hint: Use table.unpack and table.concat\n\
    \  -- Hint: Use table.sort and table.concat\n  -- Hint: Use table.sort and table.concat\n\
    \  -- Hint: Use table.sort and table.concat\n  -- Hint: Use table.sort and table.concat\n\
    \  -- Hint: Use table.sort and table.concat\n  -- Hint: Use table.sort and table.concat\n\
    \  -- Hint: Use table.sort and table.concat\n  -- Hint: Use table.sort and table.concat\n\
    \  -- Hint: Use table.sort and table.concat\n  -- Hint: Use table.sort and table.concat\n\
    \  -- Hint: Use table.sort and table.concat\n  -- Hint: Use table.sort and table.concat\n\
    \  -- Hint: Use table.sort and table.concat\n  -- Hint: Use table.sort and table.concat\n\
    \  -- Hint: Use table.sort and table.concat\n  -- Hint: Use table.sort and table.concat\n\
    \  -- Hint: Use table.sort and table.concat\n  -- Hint: Use table.sort and table.concat\n\
    \  -- Hint: Use table.sort and table.concat\n  -- Hint: Use table.sort and table.concat\n\
    \  -- Hint: Use table.sort and table.concat\n  -- Hint: Use table.sort and table.concat\n\
    \  -- Hint: Use table.sort and table.concat\n  -- Hint: Use table.sort and table.concat\n\
    \  -- Hint: Use table.sort and table.concat\n  -- Hint: Use table.sort and table.concat\n\
    \  -- Hint: Use table.sort and table.concat\n  -- Hint: Use table.sort and table.concat\n\
    \  -- Hint: Use table.sort and table.concat\n  -- Hint: Use table.sort and table.concat\n\
    \  -- Hint: Use table.sort and table.concat\n  -- Hint: Use table.sort and table.concat\n\
    \  -- Hint: Use table.sort and table.concat\n  -- Hint: Use table.sort and table.concat\n\
    \  -- Hint: Use table.sort and table.concat\n  -- Hint: Use table.sort and table.concat\n\
    \  -- Hint: Use table.sort and table.concat\n  -- Hint: Use table.sort and table.concat\n\
    \  -- Hint: Use table.sort and table.concat\n  -- Hint: Use table.sort and table.concat\n\
    \  -- Hint: Use table.sort and table.concat\n  -- Hint: Use table.sort and table.concat\n\
    \  -- Hint: Use table.sort and table.concat\n  -- Hint: Use table.sort and table.concat\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnrhila4r.lua:73: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Write your code here\n\
    \  -- Hint: use table.sort function\n  -- Hint: use math.floor function\n  --\
    \ Hint: use math.floor function\n  -- Hint: use math.floor function\n  -- Hint:\
    \ use math.floor function\n  -- Hint: use math.floor function\n  -- Hint: use\
    \ math.floor function\n  -- Hint: use math.floor function\n  -- Hint: use math.floor\
    \ function\n  -- Hint: use math.floor function\n  -- Hint: use math.floor function\n\
    \  -- Hint: use math.floor function\n  -- Hint: use math.floor function\n  --\
    \ Hint: use math.floor function\n  -- Hint: use math.floor function\n  -- Hint:\
    \ use math.floor function\n  -- Hint: use math.floor function\n  -- Hint: use\
    \ math.floor function\n  -- Hint: use math.floor function\n  -- Hint: use math.floor\
    \ function\n  -- Hint: use math.floor function\n  -- Hint: use math.floor function\n\
    \  -- Hint: use math.floor function\n  -- Hint: use math.floor function\n  --\
    \ Hint: use math.floor function\n  -- Hint: use math.floor function\n  -- Hint:\
    \ use math.floor function\n  -- Hint: use math.floor function\n  -- Hint: use\
    \ math.floor function\n  -- Hint: use math.floor function\n  -- Hint: use math.floor\
    \ function\n  -- Hint: use math.floor function\n  -- Hint: use math.floor function\n\
    \  -- Hint: use math.floor function\n  -- Hint: use math.floor function\n  --\
    \ Hint: use math.floor function\n  -- Hint: use math.floor function\n  -- Hint:\
    \ use math.floor function\n  -- Hint: use math.floor function\n  -- Hint: use\
    \ math.floor function\n  -- Hint: use math.floor function\n  -- Hint: use math.floor\
    \ function\n  -- Hint: use math.floor function\n  -- Hint: use math.floor function\n\
    \  -- Hint: use math.floor function\n  -- Hint: use math.floor function\n  --\
    \ Hint: use math.floor function\n  -- Hint: use math.floor function\n  -- Hint:\
    \ use math.floor function\n  -- Hint: use math.floor function\n  -- Hint: use\
    \ math.flo\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1d07qzfc.lua:78: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Base case\n  if #arr\
    \ == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp77akl1iy.lua:30: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(left,\
    \ right)\n    if left == right then\n      return 0\n    end\n    if left < right\
    \ then\n      return -1\n    end\n    return 1\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnukv_vlj.lua:16:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpnukv_vlj.lua:16:\
    \ in function </tmp/tmpnukv_vlj.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpnukv_vlj.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpnukv_vlj.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then return -1 end\n    if lhs > rhs then return 1 end\n\
    \    return 0\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp520x0_s3.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp520x0_s3.lua:13:\
    \ in function </tmp/tmp520x0_s3.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmp520x0_s3.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmp520x0_s3.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs == 0 then return rhs end\n    if rhs == 0 then return lhs end\n\
    \    return lhs > rhs and 1 or -1\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprg7w4mh_.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmprg7w4mh_.lua:15:\
    \ in function </tmp/tmprg7w4mh_.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmprg7w4mh_.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmprg7w4mh_.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(x,\
    \ y)\n    if x < y then return -1 end\n    if x > y then return 1 end\n    return\
    \ 0\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7eiu4avl.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp7eiu4avl.lua:13:\
    \ in function </tmp/tmp7eiu4avl.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmp7eiu4avl.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmp7eiu4avl.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(x,\
    \ y)\n    if x < y then\n      return -1\n    elseif x > y then\n      return\
    \ 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfk56x6z2.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpfk56x6z2.lua:13:\
    \ in function </tmp/tmpfk56x6z2.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpfk56x6z2.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpfk56x6z2.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Base case\n  if #arr\
    \ == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp77akl1iy.lua:30: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Base case\n  if #arr\
    \ == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp77akl1iy.lua:30: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function cmp(a,b)\n\
    \    if a < b then\n      return -1\n    end\n    if a == b then\n      return\
    \ 0\n    end\n    return 1\n  end\n  table.sort(arr, cmp)\n  return arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpult837v3.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpult837v3.lua:13:\
    \ in function </tmp/tmpult837v3.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpult837v3.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpult837v3.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We use an auxiliary array\
    \ to store binary representation of numbers,\n  -- and sort it using bubble sort.\n\
    \  local bins = {}\n  for i = 1, #arr do\n    local bin = bit.bor(bit.lshift(arr[i],\
    \ 8), bit.rshift(arr[i], 8))\n    bins[#bins + 1] = bin\n  end\n  table.sort(bins,\
    \ function(a, b) return a < b end)\n  -- Now we convert binary representation\
    \ back to numbers.\n  -- We use an auxiliary array to store decimal representation\
    \ of numbers,\n  -- and sort it using bubble sort.\n  local decs = {}\n  for i\
    \ = 1, #bins do\n    local dec = bit.bor(bit.lshift(bins[i], 8), bit.rshift(bins[i],\
    \ 8))\n    decs[#decs + 1] = dec\n  end\n  table.sort(decs, function(a, b) return\
    \ a < b end)\n  -- Now we convert decimal representation back to numbers.\n  --\
    \ We use an auxiliary array to store decimal representation of numbers,\n  --\
    \ and sort it using bubble sort.\n  local decs = {}\n  for i = 1, #decs do\n \
    \   local dec = decs[i]\n    decs[i] = dec\n  end\n  table.sort(decs, function(a,\
    \ b) return a < b end)\n  -- Now we convert decimal representation back to numbers.\n\
    \  -- We use an auxiliary array to store decimal representation of numbers,\n\
    \  -- and sort it using bubble sort.\n  local decs = {}\n  for i = 1, #decs do\n\
    \    local dec = decs[i]\n    decs[i] = dec\n  end\n  table.sort(decs, function(a,\
    \ b) return a < b end)\n  -- Now we convert decimal representation back to numbers.\n\
    \  -- We use an auxiliary array to store decimal representation of numbers,\n\
    \  -- and sort it using bubble sort.\n  local decs = {}\n  for i = 1, #decs do\n\
    \    local dec = decs[i]\n    decs[i] = dec\n  end\n  table.sort(decs, function(a,\
    \ b) return a < b end)\n  -- Now we convert decimal representation back to numbers.\n\
    \  -- We use an auxiliary array to store decimal representation of numbers,\n\
    \  -- and sort it using bubble sort.\n  local decs = {}\n  for i = 1, #decs do\n\
    \    local dec = decs[i]\n    decs[i] = dec\n  end\n  table.sort(decs, function(a,\
    \ b) return a < b end)\n  -- Now we convert decimal representation back to numbers.\n\
    \  -- We use an auxiliary array to store decimal representation of numbers,\n\
    \  -- and sort it using bubble \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzae5v74a.lua:82: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Write your solution here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpja6v8wll.lua:18:\
    \ expected: {1, 2, 4, 3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmpja6v8wll.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(x,\
    \ y)\n    if x < y then\n      return -1\n    elseif x > y then\n      return\
    \ 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfk56x6z2.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpfk56x6z2.lua:13:\
    \ in function </tmp/tmpfk56x6z2.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpfk56x6z2.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpfk56x6z2.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Sort arr based on number\
    \ of ones in binary representation of arr\n  -- >>> sort_array({1, 5, 2, 3, 4})\n\
    \  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({-2, -3, -4, -5, -6})\n  -- {-6, -5,\
    \ -4, -3, -2}\n  -- >>> sort_array({1, 0, 2, 3, 4})\n  -- {0, 1, 2, 3, 4}\n  --\
    \ >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuuf7ii4d.lua:82: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We sort array in ascending\
    \ order and then\n  -- we sort array in descending order according to number of\
    \ ones in their binary representation\n  -- We sort array in descending order\
    \ according to decimal value\n  -- We sort array in descending order according\
    \ to number of ones in their binary representation\n  -- We sort array in descending\
    \ order according to decimal value\n  -- We sort array in descending order according\
    \ to number of ones in their binary representation\n  -- We sort array in descending\
    \ order according to decimal value\n  -- We sort array in descending order according\
    \ to number of ones in their binary representation\n  -- We sort array in descending\
    \ order according to decimal value\n  -- We sort array in descending order according\
    \ to number of ones in their binary representation\n  -- We sort array in descending\
    \ order according to decimal value\n  -- We sort array in descending order according\
    \ to number of ones in their binary representation\n  -- We sort array in descending\
    \ order according to decimal value\n  -- We sort array in descending order according\
    \ to number of ones in their binary representation\n  -- We sort array in descending\
    \ order according to decimal value\n  -- We sort array in descending order according\
    \ to number of ones in their binary representation\n  -- We sort array in descending\
    \ order according to decimal value\n  -- We sort array in descending order according\
    \ to number of ones in their binary representation\n  -- We sort array in descending\
    \ order according to decimal value\n  -- We sort array in descending order according\
    \ to number of ones in their binary representation\n  -- We sort array in descending\
    \ order according to decimal value\n  -- We sort array in descending order according\
    \ to number of ones in their binary representation\n  -- We sort array in descending\
    \ order according to decimal value\n  -- We sort array in descending order according\
    \ to number of ones in their binary representation\n  -- We sort array in descending\
    \ order according to decimal value\n  -- We sort array in descending order according\
    \ to number of ones in their binary representation\n  -- We sort array in descending\
    \ order according to decimal value\n  -- We sort array in descending order according\
    \ to number of ones in their binary representation\n  -- We sort array in descending\
    \ order according to decimal value\n  -- We sort array in descending order according\
    \ to number of ones in their binary representation\n  -- We sort array in descending\
    \ order according to decimal value\n  -- We sort array in descending order according\
    \ to number of ones in their binary representation\n  -- We sort array in descending\
    \ order according to decimal value\n  -- We sort array in descending order according\
    \ to number of ones in their binary representation\n  -- We \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp95frxebt.lua:61: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- sort by number of ones\n\
    \  local function count_ones(x)\n    local count = 0\n    for i = 1, #x do\n \
    \     if x[i] == 1 then count = count + 1 end\n    end\n    return count\n  end\n\
    \  -- sort by decimal value\n  local function sort_by_dec(x)\n    local count\
    \ = 0\n    for i = 1, #x do\n      if x[i] == 1 then count = count + 1 end\n \
    \   end\n    return count\n  end\n  -- sort by number of ones\n  local function\
    \ sort_by_one(x)\n    local count = 0\n    for i = 1, #x do\n      if x[i] ==\
    \ 1 then count = count + 1 end\n    end\n    return count\n  end\n  -- sort by\
    \ decimal value\n  local function sort_by_dec(x)\n    local count = 0\n    for\
    \ i = 1, #x do\n      if x[i] == 1 then count = count + 1 end\n    end\n    return\
    \ count\n  end\n  -- sort by number of ones\n  local function sort_by_one(x)\n\
    \    local count = 0\n    for i = 1, #x do\n      if x[i] == 1 then count = count\
    \ + 1 end\n    end\n    return count\n  end\n  -- sort by decimal value\n  local\
    \ function sort_by_dec(x)\n    local count = 0\n    for i = 1, #x do\n      if\
    \ x[i] == 1 then count = count + 1 end\n    end\n    return count\n  end\n  --\
    \ sort by number of ones\n  local function sort_by_one(x)\n    local count = 0\n\
    \    for i = 1, #x do\n      if x[i] == 1 then count = count + 1 end\n    end\n\
    \    return count\n  end\n  -- sort by decimal value\n  local function sort_by_dec(x)\n\
    \    local count = 0\n    for i = 1, #x do\n      if x[i] == 1 then count = count\
    \ + 1 end\n    end\n    return count\n  end\n  -- sort by number of ones\n  local\
    \ function sort_by_one(x)\n    local count = 0\n    for i = 1, #x do\n      if\
    \ x[i] == 1 then count = count + 1 end\n    end\n    return count\n  end\n  --\
    \ sort by decimal value\n  local function sort_by_dec(x)\n    local count = 0\n\
    \    for i = 1, #x do\n      if x[i] == 1 then count = count + 1 end\n    end\n\
    \    return count\n  end\n  -- sort by number of ones\n  local function sort_by_one(x)\n\
    \    local count = 0\n    for i = 1, #x do\n      if x[i] == 1 then count = count\
    \ + 1 end\n    end\n    return count\n  end\n  -- sort by decimal value\n  local\
    \ function sort_by_dec(x)\n    local count = 0\n    for i = 1, #\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprdqu860j.lua:104: ''do'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We sort array in ascending\
    \ order based on number of ones in binary representation.\n  -- For similar number\
    \ of ones, sort based on decimal value.\n  -- We sort first by number of ones\
    \ in binary representation\n  -- then by decimal value.\n  -- For example {1,\
    \ 5, 2, 3, 4} has binary representation {1, 1, 0, 4, 10}\n  -- so first we sort\
    \ by number of ones in binary representation then by decimal value.\n  -- For\
    \ example {-2, -3, -4, -5, -6} has binary representation {0, -6, -5, -4, -3}\n\
    \  -- so first we sort by number of ones in binary representation then by decimal\
    \ value.\n  -- For example {1, 0, 2, 3, 4} has binary representation {0, 1, 1,\
    \ 2, 3}\n  -- so first we sort by number of ones in binary representation then\
    \ by decimal value.\n  -- For example {1, 5, 2, 3, 4} has binary representation\
    \ {1, 1, 0, 4, 10}\n  -- so first we sort by number of ones in binary representation\
    \ then by decimal value.\n  -- For example {1, 0, 2, 3, 4} has binary representation\
    \ {0, 1, 1, 2, 3}\n  -- so first we sort by number of ones in binary representation\
    \ then by decimal value.\n  -- For example {1, 0, 2, 3, 4} has binary representation\
    \ {0, 1, 1, 2, 3}\n  -- so first we sort by number of ones in binary representation\
    \ then by decimal value.\n  -- For example {1, 0, 2, 3, 4} has binary representation\
    \ {0, 1, 1, 2, 3}\n  -- so first we sort by number of ones in binary representation\
    \ then by decimal value.\n  -- For example {1, 0, 2, 3, 4} has binary representation\
    \ {0, 1, 1, 2, 3}\n  -- so first we sort by number of ones in binary representation\
    \ then by decimal value.\n  -- For example {1, 0, 2, 3, 4} has binary representation\
    \ {0, 1, 1, 2, 3}\n  -- so first we sort by number of ones in binary representation\
    \ then by decimal value.\n  -- For example {1, 0, 2, 3, 4} has binary representation\
    \ {0, 1, 1, 2, 3}\n  -- so first we sort by number of ones in binary representation\
    \ then by decimal value.\n  -- For example {1, 0, 2, 3, 4} has binary representation\
    \ {0, 1, 1, 2, 3}\n  -- so first we sort by number of ones in binary representation\
    \ then by decimal value.\n  -- For example {1, 0, 2, 3, 4} has binary representation\
    \ {0, 1, 1, 2, 3}\n  -- so first we sort by number of ones in binary representation\
    \ then by decimal value.\n  -- For example {1, 0, 2, 3, 4} has binary representation\
    \ {0, 1, 1, 2, 3}\n  -- so first we sort by number of ones in binary representation\
    \ then by decimal value.\n  -- For example {1, 0, 2, 3, \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg8gpuhpi.lua:57: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Sort the array in ascending\
    \ order.\n  -- The first element is the smallest one.\n  -- The last element is\
    \ the largest one.\n  -- The middle elements are the elements that divide evenly\
    \ into the\n  -- array.\n  -- The middle element is the element that divides the\
    \ array evenly\n  -- into two parts.\n  -- The middle element is the element that\
    \ divides the array evenly\n  -- into three parts.\n  -- The middle element is\
    \ the element that divides the array evenly\n  -- into four parts.\n  -- The middle\
    \ element is the element that divides the array evenly\n  -- into five parts.\n\
    \  -- The middle element is the element that divides the array evenly\n  -- into\
    \ six parts.\n  -- The middle element is the element that divides the array evenly\n\
    \  -- into seven parts.\n  -- The middle element is the element that divides the\
    \ array evenly\n  -- into eight parts.\n  -- The middle element is the element\
    \ that divides the array evenly\n  -- into nine parts.\n  -- The middle element\
    \ is the element that divides the array evenly\n  -- into ten parts.\n  -- The\
    \ middle element is the element that divides the array evenly\n  -- into eleven\
    \ parts.\n  -- The middle element is the element that divides the array evenly\n\
    \  -- into twelve parts.\n  -- The middle element is the element that divides\
    \ the array evenly\n  -- into thirteen parts.\n  -- The middle element is the\
    \ element that divides the array evenly\n  -- into fourteen parts.\n  -- The middle\
    \ element is the element that divides the array evenly\n  -- into fifteen parts.\n\
    \  -- The middle element is the element that divides the array evenly\n  -- into\
    \ sixteen parts.\n  -- The middle element is the element that divides the array\
    \ evenly\n  -- into seventeen parts.\n  -- The middle element is the element that\
    \ divides the array evenly\n  -- into eighteen parts.\n  -- The middle element\
    \ is the element that divides the array evenly\n  -- into nineteen parts.\n  --\
    \ The middle element is the element that divides the array evenly\n  -- into twenty\
    \ parts.\n  -- The middle element is the element that divides the array evenly\n\
    \  -- into twenty-one parts.\n  -- The middle element is the element that divides\
    \ the array evenly\n  -- into twenty-two parts.\n  -- The middle element is the\
    \ element that divides the array \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpza5rg5ef.lua:74: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Write your code here\n\
    \  local function compare(lhs, rhs)\n    if lhs < rhs then\n      return 1\n \
    \   elseif lhs > rhs then\n      return -1\n    else\n      return 0\n    end\n\
    \  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkik60arf.lua:14:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpkik60arf.lua:14:\
    \ in function </tmp/tmpkik60arf.lua:13>\n\t[C]: in function 'sort'\n\t/tmp/tmpkik60arf.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpkik60arf.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Base case\n  if #arr\
    \ == 0 then\n    return arr\n  end\n  -- Sort recursively\n  local function helper(arr,\
    \ i, j)\n    if i == j then\n      -- Base case\n      arr[i], arr[j] = arr[j],\
    \ arr[i]\n      return\n    end\n    -- Sort recursively\n    helper(arr, i +\
    \ 1, j)\n    -- Sort recursively\n    helper(arr, i, j - 1)\n  end\n  -- Initial\
    \ call\n  helper(arr, 1, #arr)\n  return arr\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpptrbwb8_.lua:36:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {1, 5, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpptrbwb8_.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then return -1 else if lhs > rhs then return 1 else return\
    \ 0 end\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpne8amsyo.lua:32: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    local l = 0\n    local r = 0\n    while l < lhs and r < rhs do\n \
    \     if lhs[l] == rhs[r] then\n        l = l + 1\n        r = r + 1\n      elseif\
    \ lhs[l] > rhs[r] then\n        r = r + 1\n      else\n        l = l + 1\n   \
    \   end\n    end\n    if l < lhs then\n      return -1\n    elseif r < rhs then\n\
    \      return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaetj1928.lua:16:\
    \ attempt to index local 'lhs' (a number value)\nstack traceback:\n\t/tmp/tmpaetj1928.lua:16:\
    \ in function </tmp/tmpaetj1928.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpaetj1928.lua:33:\
    \ in function 'candidate'\n\t/tmp/tmpaetj1928.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing number of ones\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing number of ones\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing number of ones\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing number of ones\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing number of ones\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing number of ones\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing number of ones\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing number of ones\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing number of ones\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing number of ones\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing number of ones\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing number of ones\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing number of ones\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing number of ones\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing number of ones\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing number of ones\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing number of ones\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing number of ones\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing number of ones\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing number of ones\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing number of ones\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing number of ones\n  -- We sort by decreasing\
    \ number of ones\n  -- We sort by decreasing number of ones\n  -- We sort by decre\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2cq3pghc.lua:73: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We sort by number of\
    \ ones in binary representation\n  -- We sort by decimal value if number of ones\
    \ is equal\n  -- We sort by decimal value if number of ones is greater\n  -- We\
    \ sort by number of ones in binary representation\n  -- We sort by decimal value\
    \ if number of ones is equal\n  -- We sort by decimal value if number of ones\
    \ is greater\n  -- We sort by number of ones in binary representation\n  -- We\
    \ sort by decimal value if number of ones is equal\n  -- We sort by decimal value\
    \ if number of ones is greater\n  -- We sort by number of ones in binary representation\n\
    \  -- We sort by decimal value if number of ones is equal\n  -- We sort by decimal\
    \ value if number of ones is greater\n  -- We sort by number of ones in binary\
    \ representation\n  -- We sort by decimal value if number of ones is equal\n \
    \ -- We sort by decimal value if number of ones is greater\n  -- We sort by number\
    \ of ones in binary representation\n  -- We sort by decimal value if number of\
    \ ones is equal\n  -- We sort by decimal value if number of ones is greater\n\
    \  -- We sort by number of ones in binary representation\n  -- We sort by decimal\
    \ value if number of ones is equal\n  -- We sort by decimal value if number of\
    \ ones is greater\n  -- We sort by number of ones in binary representation\n \
    \ -- We sort by decimal value if number of ones is equal\n  -- We sort by decimal\
    \ value if number of ones is greater\n  -- We sort by number of ones in binary\
    \ representation\n  -- We sort by decimal value if number of ones is equal\n \
    \ -- We sort by decimal value if number of ones is greater\n  -- We sort by number\
    \ of ones in binary representation\n  -- We sort by decimal value if number of\
    \ ones is equal\n  -- We sort by decimal value if number of ones is greater\n\
    \  -- We sort by number of ones in binary representation\n  -- We sort by decimal\
    \ value if number of ones is equal\n  -- We sort by decimal value if number of\
    \ ones is greater\n  -- We sort by number of ones in binary representation\n \
    \ -- We sort by decimal value if number of ones is equal\n  -- We sort by decimal\
    \ value if number of ones is greater\n  -- We sort by number of ones in binary\
    \ representation\n  -- We sort by decimal value if number of ones is equal\n \
    \ -- We sort by decimal value if number of ones is greater\n  -- We sort by number\
    \ of ones in binary representation\n  -- We sort by decimal value if number of\
    \ ones is equal\n  -- We sort by decimal value \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkbd2afwv.lua:68: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function helper(arr,\
    \ i, n)\n    if i == n then\n      return\n    end\n    local j = i\n    while\
    \ j > 0 and arr[j] == 1 do\n      j = j - 1\n    end\n    arr[i], arr[j] = arr[j],\
    \ arr[i]\n    helper(arr, i + 1, n)\n  end\n  helper(arr, 1, #arr)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3s1cw2ck.lua:30:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {0=1, 2=5, 3=2, 4=3, 5=4}\nstack traceback:\n\
    \t/tmp/tmp3s1cw2ck.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Sort arr based on number\
    \ of ones in their binary representation in ascending order.\n  -- For similar\
    \ number of ones, sort based on decimal value.\n  -- It must be implemented like\
    \ this:\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>>\
    \ sort_array({-2, -3, -4, -5, -6})\n  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1,\
    \ 0, 2, 3, 4})\n  -- {0, 1, 2, 3, 4}\n  -- @param arr Array of non-negative integers.\n\
    \  -- @return Sorted array of non-negative integers.\n  local function count_ones(arr)\n\
    \    local counts = {}\n    for i = 1, #arr do\n      local num = arr[i]\n   \
    \   if not counts[num] then\n        counts[num] = 1\n      else\n        counts[num]\
    \ = counts[num] + 1\n      end\n    end\n    local sorted_counts = {}\n    for\
    \ i = 1, #counts do\n      sorted_counts[i] = counts[i]\n    end\n    table.sort(sorted_counts)\n\
    \    local sorted_arr = {}\n    for i = 1, #sorted_counts do\n      sorted_arr[i]\
    \ = arr[sorted_counts[i]]\n    end\n    return sorted_arr\n  end\n  -- Sort arr\
    \ based on number of ones in their binary representation in ascending order.\n\
    \  -- For similar number of ones, sort based on decimal value.\n  -- It must be\
    \ implemented like this:\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3,\
    \ 4, 5}\n  -- >>> sort_array({-2, -3, -4, -5, -6})\n  -- {-6, -5, -4, -3, -2}\n\
    \  -- >>> sort_array({1, 0, 2, 3, 4})\n  -- {0, 1, 2, 3, 4}\n  -- @param arr Array\
    \ of non-negative integers.\n  -- @return Sorted array of non-negative integers.\n\
    \  local function sort_array_by_decimal(arr)\n    local counts = {}\n    for i\
    \ = 1, #arr do\n      local num = arr[i]\n      if not counts[num] then\n    \
    \    counts[num] = 1\n      else\n        counts[num] = counts[num] + 1\n    \
    \  end\n    end\n    local sorted_counts = {}\n    for i = 1, #counts do\n   \
    \   sorted_counts[i] = counts[i]\n    end\n    table.sort(sorted_counts, function(a,\
    \ b)\n      return math.floor(a / 10) * 10 + math.floor(b / 10)\n    end)\n  \
    \  local sorted_arr = {}\n    for i = 1, #sorted_counts do\n      sorted_arr[i]\
    \ = arr[sorted_counts[i]]\n    end\n    return sorted_arr\n  end\n  -- Sort arr\
    \ based on \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjae6ync6.lua:93: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs == 0 then return rhs end\n    if rhs == 0 then return lhs end\n\
    \    return lhs > rhs and 1 or -1\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprg7w4mh_.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmprg7w4mh_.lua:15:\
    \ in function </tmp/tmprg7w4mh_.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmprg7w4mh_.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmprg7w4mh_.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    local function bin2dec(n)\n      local s = ''\n      while n ~= 0\
    \ do\n        s = string.format('%s%d', s, n-1)\n        n = math.floor(n / 2)\n\
    \      end\n      return tonumber(s)\n    end\n    local function dec2bin(n)\n\
    \      local s = ''\n      while n ~= 0 do\n        s = string.format('%s%d',\
    \ s, n*2)\n        n = math.floor(n / 2)\n      end\n      return s\n    end\n\
    \    local function compare_dec(lhs, rhs)\n      if lhs < rhs then\n        return\
    \ -1\n      elseif lhs > rhs then\n        return 1\n      else\n        return\
    \ 0\n      end\n    end\n    local function compare_bin(lhs, rhs)\n      if lhs\
    \ < rhs then\n        return -1\n      elseif lhs > rhs then\n        return 1\n\
    \      else\n        return 0\n      end\n    end\n    local function compare_dec_bin(lhs,\
    \ rhs)\n      if lhs < rhs then\n        return -1\n      elseif lhs > rhs then\n\
    \        return 1\n      else\n        if lhs == 0 then\n          if rhs == 0\
    \ then\n            return 0\n          else\n            return -1\n        \
    \  end\n        else\n          if rhs == 0 then\n            return 1\n     \
    \     else\n            return compare_dec(dec2bin(lhs), dec2bin(rhs))\n     \
    \     end\n        end\n      end\n    end\n    local function compare_bin_bin(lhs,\
    \ rhs)\n      if lhs < rhs then\n        return -1\n      elseif lhs > rhs then\n\
    \        return 1\n      else\n        if lhs == 0 then\n          if rhs == 0\
    \ then\n            return 0\n          else\n            return 1\n         \
    \ end\n        else\n          if rhs == 0 then\n            return -1\n     \
    \     else\n            return compare_dec(dec2bin(lhs), dec2bin(rhs))\n     \
    \     end\n        end\n      end\n    end\n    local function compare_dec_bin_bin(lhs,\
    \ rhs)\n      if lhs < rhs then\n        return -1\n      elseif lhs > rhs then\n\
    \        return 1\n      else\n        if lhs == 0 then\n          if rhs == 0\
    \ then\n            return 0\n          else\n            return 1\n         \
    \ end\n        else\n          if rhs == 0 then\n            return -1\n     \
    \     else\n            return compare_dec(dec2bin(lhs), dec2bin(rhs))\n     \
    \     end\n        end\n      end\n    end\n    if lhs == 0 then\n      if rhs\
    \ == 0 then\n        return 0\n      else\n        return -1\n      end\n    else\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpny7a7yp2.lua:131: ''end'' expected (to close ''if'' at line
    110) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We use binary search\
    \ to find position of first 1\n  -- If it exists, we know where to put next 1\n\
    \  -- If it does not exist, we know where to put next 0\n  -- If it does not exist,\
    \ we know where to put next -1\n  -- If it does not exist, we know where to put\
    \ next -2\n  -- If it does not exist, we know where to put next -3\n  -- If it\
    \ does not exist, we know where to put next -4\n  -- If it does not exist, we\
    \ know where to put next -5\n  -- If it does not exist, we know where to put next\
    \ -6\n  -- If it does not exist, we know where to put next -7\n  -- If it does\
    \ not exist, we know where to put next -8\n  -- If it does not exist, we know\
    \ where to put next -9\n  -- If it does not exist, we know where to put next -10\n\
    \  -- If it does not exist, we know where to put next -11\n  -- If it does not\
    \ exist, we know where to put next -12\n  -- If it does not exist, we know where\
    \ to put next -13\n  -- If it does not exist, we know where to put next -14\n\
    \  -- If it does not exist, we know where to put next -15\n  -- If it does not\
    \ exist, we know where to put next -16\n  -- If it does not exist, we know where\
    \ to put next -17\n  -- If it does not exist, we know where to put next -18\n\
    \  -- If it does not exist, we know where to put next -19\n  -- If it does not\
    \ exist, we know where to put next -20\n  -- If it does not exist, we know where\
    \ to put next -21\n  -- If it does not exist, we know where to put next -22\n\
    \  -- If it does not exist, we know where to put next -23\n  -- If it does not\
    \ exist, we know where to put next -24\n  -- If it does not exist, we know where\
    \ to put next -25\n  -- If it does not exist, we know where to put next -26\n\
    \  -- If it does not exist, we know where to put next -27\n  -- If it does not\
    \ exist, we know where to put next -28\n  -- If it does not exist, we know where\
    \ to put next -29\n  -- If it does not exist, we know where to put next -30\n\
    \  -- If it does not exist, we know where to put next -31\n  -- If it does not\
    \ exist, we know where to put next -32\n  -- If it does not exist, we know where\
    \ to put next -33\n  -- If it does not exist, we know where to put next -34\n\
    \  -- If it does not exist, we know where to put next -35\n  -- If it does not\
    \ exist, we know where to put next -36\n  -- If it does not exist, we know where\
    \ to put next -37\n  -- If it does not exist, we know where to put next -38\n\
    \  -- \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppwxwet27.lua:68: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Sort arr based on number\
    \ of ones in their binary representation\n  -- Sort arr based on decimal value\n\
    \  -- It must be implemented like this:\n  -- >>> sort_array({1, 5, 2, 3, 4})\n\
    \  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({-2, -3, -4, -5, -6})\n  -- {-6, -5,\
    \ -4, -3, -2}\n  -- >>> sort_array({1, 0, 2, 3, 4})\n  -- {0, 1, 2, 3, 4}\n  --\
    \ Write your code here\n  -- return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp517873g9.lua:28:\
    \ expected: {1, 2, 4, 3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmp517873g9.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We use an auxiliary array\
    \ to store binary representation of numbers,\n  -- and sort it by number of ones\
    \ in their binary representation.\n  -- The auxiliary array is initialized with\
    \ zeros.\n  local bin = {}\n  for i = 1, #arr do\n    bin[i] = 0\n  end\n  for\
    \ i = 1, #arr do\n    bin[tostring(arr[i])] = tostring(bin[tostring(arr[i])])\
    \ + 1\n  end\n  -- We use binary search to find position of first element with\
    \ number of ones\n  -- in ascending order.\n  local pos = 1\n  while pos < #bin\
    \ do\n    local mid = pos * 2 + 1\n    if bin[tostring(arr[mid])] <= #bin then\n\
    \      pos = mid + 1\n    else\n      pos = mid\n    end\n  end\n  -- We use binary\
    \ search to find position of last element with number of ones\n  -- in ascending\
    \ order.\n  pos = 1\n  while pos < #bin do\n    local mid = pos * 2 + 1\n    if\
    \ bin[tostring(arr[mid])] <= #bin then\n      pos = mid + 1\n    else\n      pos\
    \ = mid\n    end\n  end\n  -- We return sorted array.\n  return arr[1..pos]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphgiyhow2.lua:45: malformed number near ''1..pos''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We use an auxiliary array\
    \ for counting number of ones in binary representation\n  local counts = {}\n\
    \  for i = 1, #arr do\n    local bin = bit.rshift(arr[i], 1)\n    counts[bin]\
    \ = counts[bin] or 0\n    counts[bin] = counts[bin] + 1\n  end\n  -- Sort based\
    \ on number of ones in binary representation\n  table.sort(counts, function(a,\
    \ b)\n    return a > b\n  end)\n  -- Sort based on decimal value\n  table.sort(counts,\
    \ function(a, b)\n    return a < b\n  end)\n  -- Convert sorted array to sorted\
    \ table\n  local sorted_arr = {}\n  for i = 1, #counts do\n    sorted_arr[i] =\
    \ arr[i]\n  end\n  return sorted_arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpan7alomp.lua:15:\
    \ attempt to index global 'bit' (a nil value)\nstack traceback:\n\t/tmp/tmpan7alomp.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpan7alomp.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs == 0 then return rhs == 0 end\n    if lhs == -1 then return\
    \ rhs == 1 end\n    if lhs == 1 then return rhs == -1 end\n    return lhs < rhs\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg5y_xrtb.lua:32: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs == 0 then\n      return rhs\n    end\n    if rhs == 0 then\n\
    \      return lhs\n    end\n    return lhs < rhs and -1 or 1\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnwiv_s43.lua:19:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpnwiv_s43.lua:19:\
    \ in function </tmp/tmpnwiv_s43.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpnwiv_s43.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpnwiv_s43.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    local function bits(x)\n      local b = 0\n      while x > 0 do\n\
    \        b, x = b + (x & 1), x >> 1\n      end\n      return b\n    end\n    local\
    \ lhs_bits = bits(lhs)\n    local rhs_bits = bits(rhs)\n    if lhs_bits < rhs_bits\
    \ then\n      return -1\n    elseif lhs_bits > rhs_bits then\n      return 1\n\
    \    else\n      return lhs - rhs\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3q8sgc06.lua:16: '')'' expected near ''&''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(left,\
    \ right)\n    if left == 0 then\n      return right\n    end\n    if right ==\
    \ 0 then\n      return left\n    end\n    return left < right and 1 or -1\n  end\n\
    \  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvic1uujs.lua:19:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpvic1uujs.lua:19:\
    \ in function </tmp/tmpvic1uujs.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpvic1uujs.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpvic1uujs.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Sort the array in ascending\
    \ order\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>>\
    \ sort_array({-2, -3, -4, -5, -6})\n  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1,\
    \ 0, 2, 3, 4})\n  -- {0, 1, 2, 3, 4}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpndo4jj01.lua:82: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function cmp(a,b)\n\
    \    if a < b then\n      return -1\n    elseif b < a then\n      return 1\n \
    \   else\n      return 0\n    end\n  end\n  table.sort(arr, cmp)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm57qccof.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpm57qccof.lua:13:\
    \ in function </tmp/tmpm57qccof.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpm57qccof.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpm57qccof.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We use an auxiliary table\
    \ to store already sorted elements.\n  -- We use auxiliary table to speed up sorting\
    \ process.\n  -- This table has O(n) complexity, where n is number of elements\
    \ in the array.\n  -- We use auxiliary table to speed up sorting process.\n  local\
    \ aux = {}\n  -- We use auxiliary table to speed up sorting process.\n  -- This\
    \ table has O(n) complexity, where n is number of elements in the array.\n  --\
    \ We use auxiliary table to speed up sorting process.\n  local sorted_arr = {}\n\
    \  -- We use auxiliary table to speed up sorting process.\n  -- This table has\
    \ O(n) complexity, where n is number of elements in the array.\n  -- We use auxiliary\
    \ table to speed up sorting process.\n  local sorted_arr2 = {}\n  -- We use auxiliary\
    \ table to speed up sorting process.\n  -- This table has O(n) complexity, where\
    \ n is number of elements in the array.\n  -- We use auxiliary table to speed\
    \ up sorting process.\n  local sorted_arr3 = {}\n  -- We use auxiliary table to\
    \ speed up sorting process.\n  -- This table has O(n) complexity, where n is number\
    \ of elements in the array.\n  -- We use auxiliary table to speed up sorting process.\n\
    \  local sorted_arr4 = {}\n  -- We use auxiliary table to speed up sorting process.\n\
    \  -- This table has O(n) complexity, where n is number of elements in the array.\n\
    \  -- We use auxiliary table to speed up sorting process.\n  local sorted_arr5\
    \ = {}\n  -- We use auxiliary table to speed up sorting process.\n  -- This table\
    \ has O(n) complexity, where n is number of elements in the array.\n  -- We use\
    \ auxiliary table to speed up sorting process.\n  local sorted_arr6 = {}\n  --\
    \ We use auxiliary table to speed up sorting process.\n  -- This table has O(n)\
    \ complexity, where n is number of elements in the array.\n  -- We use auxiliary\
    \ table to speed up sorting process.\n  local sorted_arr7 = {}\n  -- We use auxiliary\
    \ table to speed up sorting process.\n  -- This table has O(n) complexity, where\
    \ n is number of elements in the array.\n  -- We use auxiliary table to speed\
    \ up sorting process.\n  local sorted_arr8 = {}\n  -- We use auxiliary table to\
    \ speed up sorting process.\n  -- This table has O(n) complexity, where n is number\
    \ of elements in the array.\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplui06jtn.lua:66: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Write your code here\n\
    \  local function compare(lhs, rhs)\n    if lhs < rhs then\n      return -1\n\
    \    elseif lhs > rhs then\n      return 1\n    else\n      return 0\n    end\n\
    \  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpluadjcc9.lua:14:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpluadjcc9.lua:14:\
    \ in function </tmp/tmpluadjcc9.lua:13>\n\t[C]: in function 'sort'\n\t/tmp/tmpluadjcc9.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpluadjcc9.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Write your code here\n\
    \  local function compare(lhs, rhs)\n    if lhs == 0 then\n      return 0\n  \
    \  end\n    if lhs == rhs then\n      return lhs\n    end\n    if lhs > rhs then\n\
    \      return 1\n    end\n    return -1\n  end\n  table.sort(arr, compare)\n \
    \ return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgs85bmhp.lua:20:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpgs85bmhp.lua:20:\
    \ in function </tmp/tmpgs85bmhp.lua:13>\n\t[C]: in function 'sort'\n\t/tmp/tmpgs85bmhp.lua:25:\
    \ in function 'candidate'\n\t/tmp/tmpgs85bmhp.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Write your code here\n\
    \  local function is_odd(n)\n    return n % 2 == 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2wf8xkgk.lua:30: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Write your code here\n\
    \  -- return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_gi7ksc2.lua:19:\
    \ expected: {1, 2, 4, 3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmp_gi7ksc2.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    local l = 0\n    local r = 0\n    while l < lhs and r < rhs do\n \
    \     if lhs < rhs then\n        return -1\n      elseif lhs > rhs then\n    \
    \    return 1\n      else\n        l = l + 1\n        r = r + 1\n      end\n \
    \   end\n    if l > lhs then\n      return 1\n    elseif r > rhs then\n      return\
    \ -1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n \
    \ return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo_q6pdpp.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpo_q6pdpp.lua:15:\
    \ in function </tmp/tmpo_q6pdpp.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpo_q6pdpp.lua:33:\
    \ in function 'candidate'\n\t/tmp/tmpo_q6pdpp.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    local l = 0\n    local r = 0\n    while l < lhs and r < rhs do\n \
    \     if lhs[l] == rhs[r] then\n        l = l + 1\n        r = r + 1\n      elseif\
    \ lhs[l] < rhs[r] then\n        r = r + 1\n      else\n        l = l + 1\n   \
    \   end\n    end\n    if l < lhs then\n      return -1\n    elseif r < rhs then\n\
    \      return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwjprtc5w.lua:16:\
    \ attempt to index local 'lhs' (a number value)\nstack traceback:\n\t/tmp/tmpwjprtc5w.lua:16:\
    \ in function </tmp/tmpwjprtc5w.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpwjprtc5w.lua:33:\
    \ in function 'candidate'\n\t/tmp/tmpwjprtc5w.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We use binary search\
    \ to find position of first 1\n  -- This position will be used to sort arr\n \
    \ local function binary_search(arr, val)\n    local start = 0\n    local end =\
    \ #arr\n    local mid\n    while start < end do\n      mid = start + (end - start)\
    \ / 2\n      if arr[mid] == val then\n        return mid\n      elseif arr[mid]\
    \ > val then\n        start = mid + 1\n      else\n        end = mid\n      end\n\
    \    end\n    return end\n  end\n  -- Binary search to find position of first\
    \ 1\n  local pos = binary_search(arr, 1)\n  -- If there are no 1s, return original\
    \ array\n  if pos == #arr then\n    return arr\n  end\n  -- If there are 1s, sort\
    \ arr based on their decimal value\n  -- This part is tricky, because we cannot\
    \ use binary search here\n  -- because we cannot guarantee that arr is sorted\
    \ in ascending order\n  -- So we sort it by converting arr to decimal value first\n\
    \  -- Then we sort it by binary search\n  local function decimal_to_binary(val)\n\
    \    local bin = bit.bor(bit.lshift(bit.rshift(val, 8), 8), val)\n    local res\
    \ = bit.lshift(bin, 8) - val\n    return res\n  end\n  -- Convert arr to decimal\
    \ value\n  local decimal_arr = {}\n  for i = 1, #arr do\n    decimal_arr[i] =\
    \ decimal_to_binary(arr[i])\n  end\n  -- Sort arr based on decimal value\n  table.sort(decimal_arr)\n\
    \  -- Convert decimal value to arr\n  local decimal_arr2 = {}\n  for i = 1, #decimal_arr\
    \ do\n    decimal_arr2[i] = bit.rshift(decimal_arr[i], 8)\n  end\n  -- Binary\
    \ search to find position of first 1\n  pos = binary_search(decimal_arr2, 1)\n\
    \  -- If there are no 1s, return original array\n  if pos == #decimal_arr2 then\n\
    \    return arr\n  end\n  -- If there are 1s, sort arr based on their decimal\
    \ value\n  -- This part is tricky, because we cannot use binary search here\n\
    \  -- because we cannot guarantee that arr is sorted in ascending order\n  --\
    \ So we sort it by converting arr to decimal value first\n  -- Then we sort it\
    \ by binary search\n  local function decimal_to_binary(val)\n    local bin = bit.bor(bit.lshift(bit.rshift(val,\
    \ 8), 8), val)\n    local res = bit.lshift(bin, 8) - val\n    return res\n  end\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl97ydnfd.lua:16: ''<name>'' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Base case\n  if #arr\
    \ == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp77akl1iy.lua:30: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs == 0 then\n      return 0\n    end\n    if rhs == 0 then\n\
    \      return 1\n    end\n    if lhs < rhs then\n      return -1\n    end\n  \
    \  return 1\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3k_21hr_.lua:19:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp3k_21hr_.lua:19:\
    \ in function </tmp/tmp3k_21hr_.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmp3k_21hr_.lua:24:\
    \ in function 'candidate'\n\t/tmp/tmp3k_21hr_.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Write your code here\n\
    \  local function helper(arr, i, j, k)\n    if i == j then\n      arr[k] = arr[i]\n\
    \      return\n    end\n    if arr[i] > arr[j] then\n      helper(arr, i, j, k\
    \ + 1)\n      helper(arr, i + 1, j, k)\n    else\n      helper(arr, i, j, k +\
    \ 1)\n      helper(arr, i, j + 1, k)\n    end\n  end\n  helper(arr, 1, #arr, 1)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp75e7ybva.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp75e7ybva.lua:22: in function 'helper'\n\
    \t/tmp/tmp75e7ybva.lua:22: in function 'helper'\n\t/tmp/tmp75e7ybva.lua:22: in\
    \ function 'helper'\n\t/tmp/tmp75e7ybva.lua:22: in function 'helper'\n\t/tmp/tmp75e7ybva.lua:22:\
    \ in function 'helper'\n\t/tmp/tmp75e7ybva.lua:22: in function 'helper'\n\t/tmp/tmp75e7ybva.lua:22:\
    \ in function 'helper'\n\t/tmp/tmp75e7ybva.lua:22: in function 'helper'\n\t/tmp/tmp75e7ybva.lua:22:\
    \ in function 'helper'\n\t/tmp/tmp75e7ybva.lua:22: in function 'helper'\n\t...\n\
    \nRan 1 tests in 0.430 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- We use an auxiliary function\
    \ to sort array in descending order.\n  -- This function is called recursively.\n\
    \  -- It returns new array and old array is restored after sorting.\n  -- We use\
    \ auxiliary function because we can't sort array in-place.\n  local function aux(arr,\
    \ i, j)\n    if i == j then\n      return arr\n    end\n    if arr[i] > arr[j]\
    \ then\n      arr[i], arr[j] = arr[j], arr[i]\n    end\n    local new_arr = aux(arr,\
    \ i + 1, j)\n    arr[i], arr[j] = arr[j], arr[i]\n    return new_arr\n  end\n\
    \  return aux(arr, 1, #arr)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7hicz8j.lua:33:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {4, 2, 3, 5, 1}\nstack traceback:\n\t/tmp/tmpu7hicz8j.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Write your sorting code\
    \ here\n  -- Hint: use table.sort function\n  -- Hint: use math.floor function\n\
    \  -- Hint: use math.floor function\n  -- Hint: use math.floor function\n  --\
    \ Hint: use math.floor function\n  -- Hint: use math.floor function\n  -- Hint:\
    \ use math.floor function\n  -- Hint: use math.floor function\n  -- Hint: use\
    \ math.floor function\n  -- Hint: use math.floor function\n  -- Hint: use math.floor\
    \ function\n  -- Hint: use math.floor function\n  -- Hint: use math.floor function\n\
    \  -- Hint: use math.floor function\n  -- Hint: use math.floor function\n  --\
    \ Hint: use math.floor function\n  -- Hint: use math.floor function\n  -- Hint:\
    \ use math.floor function\n  -- Hint: use math.floor function\n  -- Hint: use\
    \ math.floor function\n  -- Hint: use math.floor function\n  -- Hint: use math.floor\
    \ function\n  -- Hint: use math.floor function\n  -- Hint: use math.floor function\n\
    \  -- Hint: use math.floor function\n  -- Hint: use math.floor function\n  --\
    \ Hint: use math.floor function\n  -- Hint: use math.floor function\n  -- Hint:\
    \ use math.floor function\n  -- Hint: use math.floor function\n  -- Hint: use\
    \ math.floor function\n  -- Hint: use math.floor function\n  -- Hint: use math.floor\
    \ function\n  -- Hint: use math.floor function\n  -- Hint: use math.floor function\n\
    \  -- Hint: use math.floor function\n  -- Hint: use math.floor function\n  --\
    \ Hint: use math.floor function\n  -- Hint: use math.floor function\n  -- Hint:\
    \ use math.floor function\n  -- Hint: use math.floor function\n  -- Hint: use\
    \ math.floor function\n  -- Hint: use math.floor function\n  -- Hint: use math.floor\
    \ function\n  -- Hint: use math.floor function\n  -- Hint: use math.floor function\n\
    \  -- Hint: use math.floor function\n  -- Hint: use math.floor function\n  --\
    \ Hint: use math.floor function\n  -- Hint: use math.floor function\n  -- Hint:\
    \ use \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvoez4joj.lua:78: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Write your code here\n\
    \  -- return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_gi7ksc2.lua:19:\
    \ expected: {1, 2, 4, 3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmp_gi7ksc2.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Sort the array in ascending\
    \ order\n  -- The first element is the smallest one\n  local smallest = arr[1]\n\
    \  -- The last element is the biggest one\n  local biggest = arr[1]\n  for i =\
    \ 2, #arr do\n    -- If current element is smaller than smallest one\n    if arr[i]\
    \ < smallest then\n      -- Replace smallest one with current element\n      smallest\
    \ = arr[i]\n    -- If current element is bigger than biggest one\n    elseif arr[i]\
    \ > biggest then\n      -- Replace biggest one with current element\n      biggest\
    \ = arr[i]\n    end\n  end\n  -- Return the sorted array\n  return arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2a_xyq6.lua:35:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {1, 5, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpz2a_xyq6.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Write your code here\n\
    \  local function compare(lhs, rhs)\n    if lhs < rhs then\n      return -1\n\
    \    elseif lhs > rhs then\n      return 1\n    else\n      return 0\n    end\n\
    \  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpluadjcc9.lua:14:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpluadjcc9.lua:14:\
    \ in function </tmp/tmpluadjcc9.lua:13>\n\t[C]: in function 'sort'\n\t/tmp/tmpluadjcc9.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpluadjcc9.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then return -1 end\n    if lhs > rhs then return 1 end\n\
    \    return 0\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp520x0_s3.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp520x0_s3.lua:13:\
    \ in function </tmp/tmp520x0_s3.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmp520x0_s3.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmp520x0_s3.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(left,\
    \ right)\n    if left < right then\n      return -1\n    elseif left > right then\n\
    \      return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxy55t6cg.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpxy55t6cg.lua:13:\
    \ in function </tmp/tmpxy55t6cg.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpxy55t6cg.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpxy55t6cg.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function cmp(a,b)\n\
    \    if a < b then\n      return -1\n    elseif b < a then\n      return 1\n \
    \   else\n      return 0\n    end\n  end\n  table.sort(arr,cmp)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6mqvn6rg.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp6mqvn6rg.lua:13:\
    \ in function </tmp/tmp6mqvn6rg.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmp6mqvn6rg.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmp6mqvn6rg.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(x,\
    \ y)\n    if x == y then return 0 end\n    if x < y then return -1 end\n    return\
    \ 1\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_2atmtzj.lua:14:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp_2atmtzj.lua:14:\
    \ in function </tmp/tmp_2atmtzj.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmp_2atmtzj.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmp_2atmtzj.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Sort the array in ascending\
    \ order\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>>\
    \ sort_array({-2, -3, -4, -5, -6})\n  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1,\
    \ 0, 2, 3, 4})\n  -- {0, 1, 2, 3, 4}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpndo4jj01.lua:82: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Write your code here\n\
    \  local function compare(lhs, rhs)\n    if lhs < rhs then\n      return -1\n\
    \    elseif lhs > rhs then\n      return 1\n    else\n      return 0\n    end\n\
    \  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpluadjcc9.lua:14:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpluadjcc9.lua:14:\
    \ in function </tmp/tmpluadjcc9.lua:13>\n\t[C]: in function 'sort'\n\t/tmp/tmpluadjcc9.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpluadjcc9.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then return -1 end\n    if lhs > rhs then return 1 end\n\
    \    return 0\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp520x0_s3.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp520x0_s3.lua:13:\
    \ in function </tmp/tmp520x0_s3.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmp520x0_s3.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmp520x0_s3.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  -- Sort arr in ascending\
    \ order according to number of ones in their binary representation\n  -- In other\
    \ words, sort arr based on number of ones in their binary representation\n  --\
    \ >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n  -- {-6, -5, -4, -3, -2}\n  -- >>> sort_array({1, 0, 2, 3,\
    \ 4})\n  -- {0, 1, 2, 3, 4}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2,\
    \ 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>>\
    \ sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5,\
    \ 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  --\
    \ {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n\
    \  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1,\
    \ 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n \
    \ -- {1, 2, 3, 4, 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4,\
    \ 5}\n  -- >>> sort_array({1, 5, 2, 3, 4})\n  -- {1, 2, 3, 4, 5}\n  -- >>> sort_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbdso6gst.lua:81: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750317
- exit_code: 1
  program: "-- In this Kata, you have to sort a table of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
    \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
    -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbb3hny6l.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbb3hny6l.lua:13:\
    \ in function </tmp/tmpbb3hny6l.lua:12>\n\t[C]: in function 'sort'\n\t/tmp/tmpbb3hny6l.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpbb3hny6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750316
