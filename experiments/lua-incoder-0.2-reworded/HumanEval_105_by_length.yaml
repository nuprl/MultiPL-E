name: HumanEval_105_by_length
language: lua
prompt: "-- Given a table of integers, sort the integers that are between 1 and 9\
  \ inclusive,\n-- reverse the resulting table, and then replace each digit by its\
  \ corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
  Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2, 1,\
  \ 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
  \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
  -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1, -1,\
  \ 55})\n-- {'One'}\nlocal function by_length(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
  \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
  \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
  \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
  \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
  \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local result = {}\n  for i = 1, 9 do\n    local value = arr[i]\n\
    \    if value ~= nil then\n      result[i] = name[value]\n    end\n  end\n  return\
    \ result\nend", "  local result = {}\n  for i = 1, 9 do\n    local value = arr[i]\n\
    \    if value ~= nil then\n      result[value] = arr[i]\n    end\n  end\n  return\
    \ result\nend", "  local result = {}\n  for i = 1, 9 do\n    local value = arr[i]\n\
    \    if value ~= nil then\n      result[value] = arr[i]\n    end\n  end\n  return\
    \ result\nend", "  local result = {}\n  for i = 1, 9 do\n    local value = arr[i]\n\
    \    if value then\n      result[#result + 1] = name .. value\n    end\n  end\n\
    \  if #arr > 0 then\n    for i = #result, 1, -1 do\n      arr[i] = nil\n    end\n\
    \  end\n  return result\nend", "  local result = {}\n  for i = 1, 9 do\n    local\
    \ value = arr[i]\n    if value ~= nil then\n      result[value] = arr[i]\n   \
    \ end\n  end\n  return result\nend", "  local result = {}\n  for i = 1, 9 do\n\
    \    local value = arr[i]\n    if value ~= nil then\n      result[value] = i\n\
    \    end\n  end\n  if #arr > 0 then\n    for i = 1, 9 do\n      local value =\
    \ arr[i]\n      if value ~= nil then\n        result[value] = i\n      end\n \
    \   end\n  end\n  return result\nend", "  local result = {}\n  for i = 1, 9 do\n\
    \    local value = arr[i]\n    if value ~= nil then\n      result[value] = i\n\
    \    end\n  end\n  for i = 1, 9 do\n    local value = arr[i]\n    if value ~=\
    \ nil then\n      result[value] = i\n    end\n  end\n  return result\nend", " \
    \ local result = {}\n  for i = 1, 9 do\n    local value = arr[i]\n    if value\
    \ ~= nil then\n      result[value] = arr[i]\n    end\n  end\n  return result\n\
    end", "  local result = {}\n  for i = 1, 9 do\n    local value = arr[i]\n    if\
    \ value ~= nil then\n      local name = string.format(\"%g\", value)\n      local\
    \ index = tonumber(name)\n      if index then\n        result[index] = name\n\
    \      end\n    end\n  end\n  return result\nend", "  local result = {}\n  for\
    \ i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      local\
    \ name = string.format(\"%g\", value)\n      if not result[#result] then\n   \
    \     result[#result] = value\n      else\n        if result[#result] > value\
    \ then\n          result[#result] = value\n        end\n      end\n    end\n \
    \ end\n  return result\nend", "  local result = {}\n  for i = 1, 9 do\n    local\
    \ key = tostring(i)\n    local value = arr[key]\n    if value ~= nil then\n  \
    \    result[key] = value\n    end\n  end\n  return result\nend", "  local result\
    \ = {}\n  for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n\
    \      local name = one_or_nine[value]\n      if name ~= nil then\n        result[#result\
    \ + 1] = name\n      end\n    end\n  end\n  if #result == 0 then\n    return {}\n\
    \  end\n  table.sort(result)\n  for i = 1, 9 do\n    local value = result[i]\n\
    \    if value ~= nil then\n      result[i] = one_or_nine[value]\n    end\n  end\n\
    \  return result\nend", "  local result = {}\n  for i = 1, 9 do\n    local value\
    \ = arr[i]\n    if value ~= nil then\n      local name = string.format(\"%g\"\
    , value)\n      local index = tonumber(name)\n      if index == nil then\n   \
    \     index = tonumber(string.format(\"%g\", value))\n      end\n      if index\
    \ == nil then\n        index = tonumber(string.format(\"%g\", value - 1))\n  \
    \    end\n      if index == nil then\n        index = tonumber(string.format(\"\
    %g\", value + 1))\n      end\n      if index == nil then\n        index = tonumber(string.format(\"\
    %g\", value + 10))\n      end\n      if index == nil then\n        index = tonumber(string.format(\"\
    %g\", value - 10))\n      end\n      if index == nil then\n        index = tonumber(string.format(\"\
    %g\", value + 100))\n      end\n      if index == nil then\n        index = tonumber(string.format(\"\
    %g\", value - 100))\n      end\n      if index == nil then\n        index = tonumber(string.format(\"\
    %g\", value + 1000))\n      end\n      if index == nil then\n        index = tonumber(string.format(\"\
    %g\", value - 1000))\n      end\n      if index == nil then\n        index = tonumber(string.format(\"\
    %g\", value + 10000))\n      end\n      if index == nil then\n        index =\
    \ tonumber(string.format(\"%g\", value - 10000))\n      end\n      if index ==\
    \ nil then\n        index = tonumber(string.format(\"%g\", value + 100000))\n\
    \      end\n      if index == nil then\n        index = tonumber(string.format(\"\
    %g\", value - 100000))\n      end\n      if index == nil then\n        index =\
    \ tonumber(string.format(\"%g\", value + 1000000))\n      end\n      if index\
    \ == nil then\n        index = tonumber(string.format(\"%g\", value - 1000000))\n\
    \      end\n      if index == nil then\n        index = tonumber(string.format(\"\
    %g\", value + 10000000))\n      end\n      if index == nil then\n        index\
    \ = tonumber(string.format(\"%g\", value - 10000000))\n      end\n      if index\
    \ == nil then\n        index = tonumber(string.format(\"%g\", value + 100000000))\n\
    \      end\n      if index == nil then\n        index = tonumber(string.format(\"\
    %g\", value - 100000000))\n      end\n      if index == nil then\n        index\
    \ = tonumber(string.format(\"%g\", value + 1000000000))\n      end\n      if index\
    \ == nil", "  local result = {}\n  for i = 1, 9 do\n    local value = arr[i]\n\
    \    if value ~= nil then\n      result[value] = tostring(i)\n    end\n  end\n\
    \  return result\nend", "  local result = {}\n  for i = 1, 9 do\n    local value\
    \ = arr[i]\n    if value ~= nil then\n      result[value] = arr[i]\n    end\n\
    \  end\n  return result\nend", "  local result = {}\n  for i = 1, 9 do\n    local\
    \ value = arr[i]\n    if value ~= nil then\n      result[value] = tostring(i -\
    \ 1)\n    end\n  end\n  return result\nend", "  local result = {}\n  for i = 1,\
    \ 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = tostring(i - 1)\n    end\n  end\n  return result\nend", "  local result =\
    \ {}\n  for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n\
    \      local name = map[value]\n      if name then\n        result[#result + 1]\
    \ = name\n      end\n    end\n  end\n  if #result == 0 then\n    return {}\n \
    \ end\n  table.sort(result, function (a, b)\n    return a < b\n  end)\n  for i\
    \ = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      local name\
    \ = map[value]\n      if name then\n        result[#result + 1] = name\n     \
    \ end\n    end\n  end\n  return result\nend", "  local result = {}\n  for i =\
    \ 1, 9 do\n    local value = arr[i]\n    if value then\n      result[value] =\
    \ arr[i]\n    end\n  end\n  return result\nend", "  local result = {}\n  for i\
    \ = 1, 10 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
