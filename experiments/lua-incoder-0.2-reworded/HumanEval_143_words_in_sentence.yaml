name: HumanEval_143_words_in_sentence
language: lua
prompt: "-- You are given a string representing a sentence,\n-- the sentence contains\
  \ some words separated by a space,\n-- and you have to return a string that contains\
  \ the words from the original sentence,\n-- whose lengths are prime numbers,\n--\
  \ the order of the words in the new string should be the same as the original one.\n\
  -- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n-- Example 2:\n\
  -- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n-- Constraints:\n\
  -- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\nlocal function\
  \ words_in_sentence(sentence)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
  \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
  \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
  \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I am\
  \ Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'), 'go for\
  \ it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
  \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local primes = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if i % primes[j] == 0 then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local result = {}\n    for i = 1, #primes do\n        local word\
    \ = sentence:sub(1, primes[i])\n        table.insert(result, word)\n    end\n\
    \    return table.concat(result)\nend\n</cell>\n<text>\nLet's test our implementation:",
  "    local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if i % primes[j] == 0 then\n     \
    \           prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(primes, i)\n        end\n   \
    \ end\n    local result = {}\n    for i = 2, #primes do\n        local prime =\
    \ primes[i]\n        for j = 2, #sentence do\n            if sentence:sub(i, i\
    \ + 1) ~= ' ' then\n                local index = sentence:find(sentence:sub(i,\
    \ i + 1), 1, true)\n                if index == nil then\n                   \
    \ index = i\n                end\n                if prime == 1 then\n       \
    \             table.insert(result, sentence:sub(1, index))\n                else\n\
    \                    table.insert(result, sentence:sub(1, index - 1))\n      \
    \              table.insert(result, sentence:sub(index + 1))\n               \
    \ end\n            end\n        end\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's test our function", "    local primes = {}\n    for\
    \ i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if sentence:sub(i, i) == primes[j] then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 2, #primes do\n        local word = sentence:sub(i, i)\n \
    \       for j = 2, #primes do\n            if j == i then\n                table.insert(result,\
    \ word)\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(result)\nend", "    local primes = {}\n    local prime_words =\
    \ {}\n    local prime_words_length = {}\n    local prime_words_order = {}\n  \
    \  local prime_words_index = {}\n    local prime_words_index2 = 0\n    local prime_words_index3\
    \ = 0\n    local prime_words_index4 = 0\n    local prime_words_index5 = 0\n  \
    \  local prime_words_index6 = 0\n    local prime_words_index7 = 0\n    local prime_words_index8\
    \ = 0\n    local prime_words_index9 = 0\n    local prime_words_index10 = 0\n \
    \   local prime_words_index11 = 0\n    local prime_words_index12 = 0\n    local\
    \ prime_words_index13 = 0\n    local prime_words_index14 = 0\n    local prime_words_index15\
    \ = 0\n    local prime_words_index16 = 0\n    local prime_words_index17 = 0\n\
    \    local prime_words_index18 = 0\n    local prime_words_index19 = 0\n    local\
    \ prime_words_index20 = 0\n    local prime_words_index21 = 0\n    local prime_words_index22\
    \ = 0\n    local prime_words_index23 = 0\n    local prime_words_index24 = 0\n\
    \    local prime_words_index25 = 0\n    local prime_words_index26 = 0\n    local\
    \ prime_words_index27 = 0\n    local prime_words_index28 = 0\n    local prime_words_index29\
    \ = 0\n    local prime_words_index30 = 0\n    local prime_words_index31 = 0\n\
    \    local prime_words_index32 = 0\n    local prime_words_index33 = 0\n    local\
    \ prime_words_index34 = 0\n    local prime_words_index35 = 0\n    local prime_words_index36\
    \ = 0\n    local prime_words_index37 = 0\n    local prime_words_index38 = 0\n\
    \    local prime_words_index39 = 0\n    local prime_words_index40 = 0\n    local\
    \ prime_words_index41 = 0\n    local prime_words_index42 = 0\n    local prime_words_index43\
    \ = 0\n    local prime_words_index44 = 0\n    local prime_words_index45 = 0\n\
    \    local prime_words_index46 = 0\n    local prime_words_index47 = 0\n    local\
    \ prime_words_index48 = 0\n    local prime_words_index49 = 0\n    local prime_words_index50\
    \ = 0\n    local prime_words_index51 = 0\n    local prime_words_index52 = 0\n\
    \    local prime_words_index53 = 0\n    local prime_words_index54 = 0", "    local\
    \ result = {}\n    for w in string.gmatch(sentence, \"([^ ]+)\") do\n        local\
    \ prime = true\n        for i = 2, #result do\n            if string.len(result[i])\
    \ > string.len(w) then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            table.insert(result,\
    \ w)\n        end\n    end\n    return table.concat(result)\nend", "    local\
    \ primes = {}\n    local primes_count = 0\n    local primes_length = 0\n    local\
    \ primes_index = 0\n    local primes_length_index = 0\n    local primes_string\
    \ = ''\n    local primes_string_index = 0\n    local primes_string_length = 0\n\
    \    local primes_string_length_index = 0\n    local primes_string_length_string\
    \ = ''\n    local primes_string_length_string_index = 0\n    local primes_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_index = 0\n    local primes_string_length_string_length_string\
    \ = ''\n    local primes_string_length_string_length_string_index = 0\n    local\
    \ primes_string_length_string_length_string_length = 0\n    local primes_string_length_string_length_string_length_index\
    \ = 0\n    local primes_string_length_string_length_string_length_string = ''\n\
    \    local primes_string_length_string_length_string_length_string_index = 0\n\
    \    local primes_string_length_string_length_string_length_string_length = 0\n\
    \    local primes_string_length_string_length_string_length_string_length_index\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string\
    \ = ''\n    local primes_string_length_string_length_string_length_string_length_string_index\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_string\
    \ = ''\n    local primes_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length_string\
    \ = ''\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    local primes_string_length_string_length_string_", "    local primes\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]))\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\n\
    Let's test our implementation:", "    local result = {}\n    for w in string.gmatch(sentence,\
    \ \"([^ ]+)\") do\n        local prime = true\n        for i = 2, #result do\n\
    \            if string.len(result[i]) > string.len(w) then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(result, w)\n        end\n    end\n    return\
    \ table.concat(result)\nend", "    local prime_words = {}\n    for i = 2, #sentence\
    \ do\n        local prime = true\n        for j = 2, #prime_words do\n       \
    \     if #prime_words[j] == i then\n                prime = false\n          \
    \      break\n            end\n        end\n        if prime then\n          \
    \  table.insert(prime_words, sentence[i])\n        end\n    end\n    return table.concat(prime_words,\
    \ \" \")\nend", "    local prime_numbers = {}\n    local prime_numbers_count =\
    \ 0\n    local prime_numbers_index = {}\n    local prime_numbers_index_count =\
    \ 0\n    local prime_numbers_index_map = {}\n    local prime_numbers_index_map_count\
    \ = 0\n    local prime_numbers_index_map_count_max = 0\n    local prime_numbers_index_map_count_max_count\
    \ = 0\n    local prime_numbers_index_map_count_max_index = 0\n    local prime_numbers_index_map_count_max_index_count\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index = 0\n    local\
    \ prime_numbers_index_map_count_max_index_index_count = 0\n    local prime_numbers_index_map_count_max_index_index_index\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max = 0\n\
    \    local prime_numbers_index_map_count_max_index_index_count_max_count = 0\n\
    \    local prime_numbers_index_map_count_max_index_index_count_max_index = 0\n\
    \    local prime_numbers_index_map_count_max_index_index_count_max_index_count\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max_index_index\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max_index_index_count\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max_index_index_index\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max_index_index_count_max\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max_index_index_count_max_count\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max_index_index_count_max_index\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max_index_count_max_index_count\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max_index_index_count_max_index_index\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max_index_count_max_index_index_count\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max_index_index_count_max_index_index_index\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max_index_index_count_max_index_index_count_max\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max_index_index_count_max_index_index_count_max_count\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max_index_index_count_max_index_index_count_max_index\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max_index_index_count_max_index_count_max_index_count\
    \ = 0\n    local ", "    local primes = {}\n    for i = 2, #sentence do\n    \
    \    local prime = true\n        for j = 2, #primes do\n            if i ~= primes[j]\
    \ then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(primes, i)\n   \
    \     end\n    end\n    local result = {}\n    for i = 2, #primes do\n       \
    \ local word = sentence:sub(1, primes[i])\n        table.insert(result, word)\n\
    \    end\n    return table.concat(result)\nend\n</cell>\n<text>\nLet's test our\
    \ implementation:", "    local primes = {}\n    local prime_words = {}\n    local\
    \ prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_str\
    \ = ''\n    local prime_words_index = 1\n    local prime_words_len_index = 1\n\
    \    local prime_words_order_index = 1\n    for word in sentence:gmatch('([a-z]+)\
    \ ') do\n        local prime = true\n        for i = 2, #primes do\n         \
    \   if primes[i] ~= nil then\n                if primes[i] == word:len() then\n\
    \                    prime = false\n                    break\n              \
    \  end\n            end\n        end\n        if prime then\n            primes[prime_words_len_index]\
    \ = word:len()\n            prime_words_len[prime_words_len_index] = word:len()\n\
    \            prime_words_order[prime_words_order_index] = word\n            prime_words_str\
    \ = (prime_words_str == '') then\n                prime_words_str\n          \
    \  else\n                prime_words_str = prime_words_str .. ' ' .. word\n  \
    \          end\n            prime_words_index = prime_words_index + 1\n      \
    \  end\n    end\n    for i = 1, #primes do\n        if primes[i] ~= nil then\n\
    \            local prime_words_len_index = prime_words_len_index + 1\n       \
    \ end\n    end\n    for i = 1, #prime_words_len do\n        if prime_words_len[i]\
    \ ~= nil then\n            local prime_words_order_index = prime_words_order_index\
    \ + 1\n        end\n    end\n    return prime_words_str\nend\n</cell>\n<text>\n\
    Let's test our function", "    local primes = {}\n    for i = 2, #sentence do\n\
    \        local prime = true\n        for j = 2, #primes do\n            if sentence[i]\
    \ == primes[j] then\n                prime = false\n                break\n  \
    \          end\n        end\n        if prime then\n            table.insert(primes,\
    \ sentence[i])\n        end\n    end\n    return table.concat(primes, \" \")\n\
    end\n</cell>\n<text>\nLet's test our implementation:", "    local primes = {}\n\
    \    for i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]))\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\n\
    Let's test our implementation:", "    local primes = {}\n    for i = 2, #sentence\
    \ do\n        local prime = true\n        for j = 2, #primes do\n            if\
    \ i % primes[j] == 0 then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local result = {}\n    for i = 1, #primes do\n\
    \        local word = sentence:sub(1, primes[i])\n        table.insert(result,\
    \ word)\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\nLet's\
    \ see how it works:", "    local result = {}\n    local primes = {}\n    local\
    \ prime_number\n    local prime_number_count\n    local prime_number_count2\n\
    \    local prime_number_count3\n    local prime_number_count4\n    local prime_number_count5\n\
    \    local prime_number_count6\n    local prime_number_count7\n    local prime_number_count8\n\
    \    local prime_number_count9\n    local prime_number_count10\n    local prime_number_count11\n\
    \    local prime_number_count12\n    local prime_number_count13\n    local prime_number_count14\n\
    \    local prime_number_count15\n    local prime_number_count16\n    local prime_number_count17\n\
    \    local prime_number_count18\n    local prime_number_count19\n    local prime_number_count20\n\
    \    local prime_number_count21\n    local prime_number_count22\n    local prime_number_count23\n\
    \    local prime_number_count24\n    local prime_number_count25\n    local prime_number_count26\n\
    \    local prime_number_count27\n    local prime_number_count28\n    local prime_number_count29\n\
    \    local prime_number_count30\n    local prime_number_count31\n    local prime_number_count32\n\
    \    local prime_number_count33\n    local prime_number_count34\n    local prime_number_count35\n\
    \    local prime_number_count36\n    local prime_number_count37\n    local prime_number_count38\n\
    \    local prime_number_count39\n    local prime_number_count40\n    local prime_number_count41\n\
    \    local prime_number_count42\n    local prime_number_count43\n    local prime_number_count44\n\
    \    local prime_number_count45\n    local prime_number_count46\n    local prime_number_count47\n\
    \    local prime_number_count48\n    local prime_number_count49\n    local prime_number_count50\n\
    \    local prime_number_count51\n    local prime_number_count52\n    local prime_number_count53\n\
    \    local prime_number_count54\n    local prime_number_count55\n    local prime_number_count56\n\
    \    local prime_number_count57\n    local prime_number_count58\n    local prime_number_count59\n\
    \    local prime_number_count60\n    local prime_number_count61\n    local prime_number_count62\n\
    \    ", "    local primes = {}\n    local prime_words = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_index = {}\n    local prime_words_index2 = 0\n \
    \   local prime_words_index3 = 0\n    local prime_words_index4 = 0\n    local\
    \ prime_words_index5 = 0\n    local prime_words_index6 = 0\n    local prime_words_index7\
    \ = 0\n    local prime_words_index8 = 0\n    local prime_words_index9 = 0\n  \
    \  local prime_words_index10 = 0\n    local prime_words_index11 = 0\n    local\
    \ prime_words_index12 = 0\n    local prime_words_index13 = 0\n    local prime_words_index14\
    \ = 0\n    local prime_words_index15 = 0\n    local prime_words_index16 = 0\n\
    \    local prime_words_index17 = 0\n    local prime_words_index18 = 0\n    local\
    \ prime_words_index19 = 0\n    local prime_words_index20 = 0\n    local prime_words_index21\
    \ = 0\n    local prime_words_index22 = 0\n    local prime_words_index23 = 0\n\
    \    local prime_words_index24 = 0\n    local prime_words_index25 = 0\n    local\
    \ prime_words_index26 = 0\n    local prime_words_index27 = 0\n    local prime_words_index28\
    \ = 0\n    local prime_words_index29 = 0\n    local prime_words_index30 = 0\n\
    \    local prime_words_index31 = 0\n    local prime_words_index32 = 0\n    local\
    \ prime_words_index33 = 0\n    local prime_words_index34 = 0\n    local prime_words_index35\
    \ = 0\n    local prime_words_index36 = 0\n    local prime_words_index37 = 0\n\
    \    local prime_words_index38 = 0\n    local prime_words_index39 = 0\n    local\
    \ prime_words_index40 = 0\n    local prime_words_index41 = 0\n    local prime_words_index42\
    \ = 0\n    local prime_words_index43 = 0\n    local prime_words_index44 = 0\n\
    \    local prime_words_index45 = 0\n    local prime_words_index46 = 0\n    local\
    \ prime_words_index47 = 0\n    local prime_words_index48 = 0\n    local prime_words_index49\
    \ = 0\n    local prime_words_index50 = 0\n    local prime_words_index51 = 0\n\
    \    local prime_words_index52 = 0\n    local prime_words_index53 = 0\n    local\
    \ prime_words_index54 = 0\n    local prime_words_index55", "    local prime_numbers\
    \ = {}\n    local new_sentence = ''\n    for word in string.gmatch(sentence, '([^\
    \ ]+)')\n    do\n        local prime = true\n        for i = 2, #prime_numbers\
    \ + 1\n        do\n            if #new_sentence == 0 and prime_numbers[i] == #word\
    \ then\n                prime = false\n            end\n        end\n        if\
    \ prime then\n            table.insert(prime_numbers, #word)\n            new_sentence\
    \ = new_sentence .. ' ' .. word\n        end\n    end\n    return new_sentence\n\
    end\n</cell>\n<text>\nLet's test our implementation:", "    local primes = {}\n\
    \    for i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]))\n    end\n    return table.concat(result)\nend", "    local result\
    \ = {}\n    for w in string.gmatch(sentence, \"([^ ]+)\") do\n        local n\
    \ = #w\n        if n ~= 1 then\n            local prime = true\n            for\
    \ i = 2, n do\n                if not prime or n % i == 0 then\n             \
    \       prime = false\n                    break\n                end\n      \
    \      end\n            if prime then\n                result[#result + 1] = w\n\
    \            end\n        end\n    end\n    return table.concat(result)\nend\n\
    </cell>\n<text>\nLet's see how it works:"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
