name: HumanEval_143_words_in_sentence
language: lua
prompt: "-- You are given a string representing a sentence,\n-- the sentence contains\
  \ some words separated by a space,\n-- and you have to return a string that contains\
  \ the words from the original sentence,\n-- whose lengths are prime numbers,\n--\
  \ the order of the words in the new string should be the same as the original one.\n\
  -- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n-- Example 2:\n\
  -- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n-- Constraints:\n\
  -- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\nlocal function\
  \ words_in_sentence(sentence)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
  \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
  \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
  \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I am\
  \ Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'), 'go for\
  \ it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
  \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local primes = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if i % primes[j] == 0 then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local result = {}\n    for i = 1, #primes do\n        local word\
    \ = sentence:sub(1, primes[i])\n        table.insert(result, word)\n    end\n\
    \    return table.concat(result)\nend\n</cell>\n<text>\nLet's test our implementation:",
  "    local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if i % primes[j] == 0 then\n     \
    \           prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(primes, i)\n        end\n   \
    \ end\n    local result = {}\n    for i = 2, #primes do\n        local prime =\
    \ primes[i]\n        for j = 2, #sentence do\n            if sentence:sub(i, i\
    \ + 1) ~= ' ' then\n                local index = sentence:find(sentence:sub(i,\
    \ i + 1), 1, true)\n                if index == nil then\n                   \
    \ index = i\n                end\n                if prime == 1 then\n       \
    \             table.insert(result, sentence:sub(1, index))\n                else\n\
    \                    table.insert(result, sentence:sub(1, index - 1))\n      \
    \              table.insert(result, sentence:sub(index + 1))\n               \
    \ end\n            end\n        end\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's test our function", "    local primes = {}\n    for\
    \ i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if sentence:sub(i, i) == primes[j] then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 2, #primes do\n        local word = sentence:sub(i, i)\n \
    \       for j = 2, #primes do\n            if j == i then\n                table.insert(result,\
    \ word)\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(result)\nend", "    local primes = {}\n    local prime_words =\
    \ {}\n    local prime_words_length = {}\n    local prime_words_order = {}\n  \
    \  local prime_words_index = {}\n    local prime_words_index2 = 0\n    local prime_words_index3\
    \ = 0\n    local prime_words_index4 = 0\n    local prime_words_index5 = 0\n  \
    \  local prime_words_index6 = 0\n    local prime_words_index7 = 0\n    local prime_words_index8\
    \ = 0\n    local prime_words_index9 = 0\n    local prime_words_index10 = 0\n \
    \   local prime_words_index11 = 0\n    local prime_words_index12 = 0\n    local\
    \ prime_words_index13 = 0\n    local prime_words_index14 = 0\n    local prime_words_index15\
    \ = 0\n    local prime_words_index16 = 0\n    local prime_words_index17 = 0\n\
    \    local prime_words_index18 = 0\n    local prime_words_index19 = 0\n    local\
    \ prime_words_index20 = 0\n    local prime_words_index21 = 0\n    local prime_words_index22\
    \ = 0\n    local prime_words_index23 = 0\n    local prime_words_index24 = 0\n\
    \    local prime_words_index25 = 0\n    local prime_words_index26 = 0\n    local\
    \ prime_words_index27 = 0\n    local prime_words_index28 = 0\n    local prime_words_index29\
    \ = 0\n    local prime_words_index30 = 0\n    local prime_words_index31 = 0\n\
    \    local prime_words_index32 = 0\n    local prime_words_index33 = 0\n    local\
    \ prime_words_index34 = 0\n    local prime_words_index35 = 0\n    local prime_words_index36\
    \ = 0\n    local prime_words_index37 = 0\n    local prime_words_index38 = 0\n\
    \    local prime_words_index39 = 0\n    local prime_words_index40 = 0\n    local\
    \ prime_words_index41 = 0\n    local prime_words_index42 = 0\n    local prime_words_index43\
    \ = 0\n    local prime_words_index44 = 0\n    local prime_words_index45 = 0\n\
    \    local prime_words_index46 = 0\n    local prime_words_index47 = 0\n    local\
    \ prime_words_index48 = 0\n    local prime_words_index49 = 0\n    local prime_words_index50\
    \ = 0\n    local prime_words_index51 = 0\n    local prime_words_index52 = 0\n\
    \    local prime_words_index53 = 0\n    local prime_words_index54 = 0", "    local\
    \ result = {}\n    for w in string.gmatch(sentence, \"([^ ]+)\") do\n        local\
    \ prime = true\n        for i = 2, #result do\n            if string.len(result[i])\
    \ > string.len(w) then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            table.insert(result,\
    \ w)\n        end\n    end\n    return table.concat(result)\nend", "    local\
    \ primes = {}\n    local primes_count = 0\n    local primes_length = 0\n    local\
    \ primes_index = 0\n    local primes_length_index = 0\n    local primes_string\
    \ = ''\n    local primes_string_index = 0\n    local primes_string_length = 0\n\
    \    local primes_string_length_index = 0\n    local primes_string_length_string\
    \ = ''\n    local primes_string_length_string_index = 0\n    local primes_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_index = 0\n    local primes_string_length_string_length_string\
    \ = ''\n    local primes_string_length_string_length_string_index = 0\n    local\
    \ primes_string_length_string_length_string_length = 0\n    local primes_string_length_string_length_string_length_index\
    \ = 0\n    local primes_string_length_string_length_string_length_string = ''\n\
    \    local primes_string_length_string_length_string_length_string_index = 0\n\
    \    local primes_string_length_string_length_string_length_string_length = 0\n\
    \    local primes_string_length_string_length_string_length_string_length_index\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string\
    \ = ''\n    local primes_string_length_string_length_string_length_string_length_string_index\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_string\
    \ = ''\n    local primes_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length_string\
    \ = ''\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    local primes_string_length_string_length_string_", "    local primes\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]))\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\n\
    Let's test our implementation:", "    local result = {}\n    for w in string.gmatch(sentence,\
    \ \"([^ ]+)\") do\n        local prime = true\n        for i = 2, #result do\n\
    \            if string.len(result[i]) > string.len(w) then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(result, w)\n        end\n    end\n    return\
    \ table.concat(result)\nend", "    local prime_words = {}\n    for i = 2, #sentence\
    \ do\n        local prime = true\n        for j = 2, #prime_words do\n       \
    \     if #prime_words[j] == i then\n                prime = false\n          \
    \      break\n            end\n        end\n        if prime then\n          \
    \  table.insert(prime_words, sentence[i])\n        end\n    end\n    return table.concat(prime_words,\
    \ \" \")\nend", "    local prime_numbers = {}\n    local prime_numbers_count =\
    \ 0\n    local prime_numbers_index = {}\n    local prime_numbers_index_count =\
    \ 0\n    local prime_numbers_index_map = {}\n    local prime_numbers_index_map_count\
    \ = 0\n    local prime_numbers_index_map_count_max = 0\n    local prime_numbers_index_map_count_max_count\
    \ = 0\n    local prime_numbers_index_map_count_max_index = 0\n    local prime_numbers_index_map_count_max_index_count\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index = 0\n    local\
    \ prime_numbers_index_map_count_max_index_index_count = 0\n    local prime_numbers_index_map_count_max_index_index_index\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max = 0\n\
    \    local prime_numbers_index_map_count_max_index_index_count_max_count = 0\n\
    \    local prime_numbers_index_map_count_max_index_index_count_max_index = 0\n\
    \    local prime_numbers_index_map_count_max_index_index_count_max_index_count\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max_index_index\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max_index_index_count\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max_index_index_index\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max_index_index_count_max\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max_index_index_count_max_count\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max_index_index_count_max_index\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max_index_count_max_index_count\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max_index_index_count_max_index_index\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max_index_count_max_index_index_count\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max_index_index_count_max_index_index_index\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max_index_index_count_max_index_index_count_max\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max_index_index_count_max_index_index_count_max_count\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max_index_index_count_max_index_index_count_max_index\
    \ = 0\n    local prime_numbers_index_map_count_max_index_index_count_max_index_index_count_max_index_count_max_index_count\
    \ = 0\n    local ", "    local primes = {}\n    for i = 2, #sentence do\n    \
    \    local prime = true\n        for j = 2, #primes do\n            if i ~= primes[j]\
    \ then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(primes, i)\n   \
    \     end\n    end\n    local result = {}\n    for i = 2, #primes do\n       \
    \ local word = sentence:sub(1, primes[i])\n        table.insert(result, word)\n\
    \    end\n    return table.concat(result)\nend\n</cell>\n<text>\nLet's test our\
    \ implementation:", "    local primes = {}\n    local prime_words = {}\n    local\
    \ prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_str\
    \ = ''\n    local prime_words_index = 1\n    local prime_words_len_index = 1\n\
    \    local prime_words_order_index = 1\n    for word in sentence:gmatch('([a-z]+)\
    \ ') do\n        local prime = true\n        for i = 2, #primes do\n         \
    \   if primes[i] ~= nil then\n                if primes[i] == word:len() then\n\
    \                    prime = false\n                    break\n              \
    \  end\n            end\n        end\n        if prime then\n            primes[prime_words_len_index]\
    \ = word:len()\n            prime_words_len[prime_words_len_index] = word:len()\n\
    \            prime_words_order[prime_words_order_index] = word\n            prime_words_str\
    \ = (prime_words_str == '') then\n                prime_words_str\n          \
    \  else\n                prime_words_str = prime_words_str .. ' ' .. word\n  \
    \          end\n            prime_words_index = prime_words_index + 1\n      \
    \  end\n    end\n    for i = 1, #primes do\n        if primes[i] ~= nil then\n\
    \            local prime_words_len_index = prime_words_len_index + 1\n       \
    \ end\n    end\n    for i = 1, #prime_words_len do\n        if prime_words_len[i]\
    \ ~= nil then\n            local prime_words_order_index = prime_words_order_index\
    \ + 1\n        end\n    end\n    return prime_words_str\nend\n</cell>\n<text>\n\
    Let's test our function", "    local primes = {}\n    for i = 2, #sentence do\n\
    \        local prime = true\n        for j = 2, #primes do\n            if sentence[i]\
    \ == primes[j] then\n                prime = false\n                break\n  \
    \          end\n        end\n        if prime then\n            table.insert(primes,\
    \ sentence[i])\n        end\n    end\n    return table.concat(primes, \" \")\n\
    end\n</cell>\n<text>\nLet's test our implementation:", "    local primes = {}\n\
    \    for i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]))\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\n\
    Let's test our implementation:", "    local primes = {}\n    for i = 2, #sentence\
    \ do\n        local prime = true\n        for j = 2, #primes do\n            if\
    \ i % primes[j] == 0 then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local result = {}\n    for i = 1, #primes do\n\
    \        local word = sentence:sub(1, primes[i])\n        table.insert(result,\
    \ word)\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\nLet's\
    \ see how it works:", "    local result = {}\n    local primes = {}\n    local\
    \ prime_number\n    local prime_number_count\n    local prime_number_count2\n\
    \    local prime_number_count3\n    local prime_number_count4\n    local prime_number_count5\n\
    \    local prime_number_count6\n    local prime_number_count7\n    local prime_number_count8\n\
    \    local prime_number_count9\n    local prime_number_count10\n    local prime_number_count11\n\
    \    local prime_number_count12\n    local prime_number_count13\n    local prime_number_count14\n\
    \    local prime_number_count15\n    local prime_number_count16\n    local prime_number_count17\n\
    \    local prime_number_count18\n    local prime_number_count19\n    local prime_number_count20\n\
    \    local prime_number_count21\n    local prime_number_count22\n    local prime_number_count23\n\
    \    local prime_number_count24\n    local prime_number_count25\n    local prime_number_count26\n\
    \    local prime_number_count27\n    local prime_number_count28\n    local prime_number_count29\n\
    \    local prime_number_count30\n    local prime_number_count31\n    local prime_number_count32\n\
    \    local prime_number_count33\n    local prime_number_count34\n    local prime_number_count35\n\
    \    local prime_number_count36\n    local prime_number_count37\n    local prime_number_count38\n\
    \    local prime_number_count39\n    local prime_number_count40\n    local prime_number_count41\n\
    \    local prime_number_count42\n    local prime_number_count43\n    local prime_number_count44\n\
    \    local prime_number_count45\n    local prime_number_count46\n    local prime_number_count47\n\
    \    local prime_number_count48\n    local prime_number_count49\n    local prime_number_count50\n\
    \    local prime_number_count51\n    local prime_number_count52\n    local prime_number_count53\n\
    \    local prime_number_count54\n    local prime_number_count55\n    local prime_number_count56\n\
    \    local prime_number_count57\n    local prime_number_count58\n    local prime_number_count59\n\
    \    local prime_number_count60\n    local prime_number_count61\n    local prime_number_count62\n\
    \    ", "    local primes = {}\n    local prime_words = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_index = {}\n    local prime_words_index2 = 0\n \
    \   local prime_words_index3 = 0\n    local prime_words_index4 = 0\n    local\
    \ prime_words_index5 = 0\n    local prime_words_index6 = 0\n    local prime_words_index7\
    \ = 0\n    local prime_words_index8 = 0\n    local prime_words_index9 = 0\n  \
    \  local prime_words_index10 = 0\n    local prime_words_index11 = 0\n    local\
    \ prime_words_index12 = 0\n    local prime_words_index13 = 0\n    local prime_words_index14\
    \ = 0\n    local prime_words_index15 = 0\n    local prime_words_index16 = 0\n\
    \    local prime_words_index17 = 0\n    local prime_words_index18 = 0\n    local\
    \ prime_words_index19 = 0\n    local prime_words_index20 = 0\n    local prime_words_index21\
    \ = 0\n    local prime_words_index22 = 0\n    local prime_words_index23 = 0\n\
    \    local prime_words_index24 = 0\n    local prime_words_index25 = 0\n    local\
    \ prime_words_index26 = 0\n    local prime_words_index27 = 0\n    local prime_words_index28\
    \ = 0\n    local prime_words_index29 = 0\n    local prime_words_index30 = 0\n\
    \    local prime_words_index31 = 0\n    local prime_words_index32 = 0\n    local\
    \ prime_words_index33 = 0\n    local prime_words_index34 = 0\n    local prime_words_index35\
    \ = 0\n    local prime_words_index36 = 0\n    local prime_words_index37 = 0\n\
    \    local prime_words_index38 = 0\n    local prime_words_index39 = 0\n    local\
    \ prime_words_index40 = 0\n    local prime_words_index41 = 0\n    local prime_words_index42\
    \ = 0\n    local prime_words_index43 = 0\n    local prime_words_index44 = 0\n\
    \    local prime_words_index45 = 0\n    local prime_words_index46 = 0\n    local\
    \ prime_words_index47 = 0\n    local prime_words_index48 = 0\n    local prime_words_index49\
    \ = 0\n    local prime_words_index50 = 0\n    local prime_words_index51 = 0\n\
    \    local prime_words_index52 = 0\n    local prime_words_index53 = 0\n    local\
    \ prime_words_index54 = 0\n    local prime_words_index55", "    local prime_numbers\
    \ = {}\n    local new_sentence = ''\n    for word in string.gmatch(sentence, '([^\
    \ ]+)')\n    do\n        local prime = true\n        for i = 2, #prime_numbers\
    \ + 1\n        do\n            if #new_sentence == 0 and prime_numbers[i] == #word\
    \ then\n                prime = false\n            end\n        end\n        if\
    \ prime then\n            table.insert(prime_numbers, #word)\n            new_sentence\
    \ = new_sentence .. ' ' .. word\n        end\n    end\n    return new_sentence\n\
    end\n</cell>\n<text>\nLet's test our implementation:", "    local primes = {}\n\
    \    for i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]))\n    end\n    return table.concat(result)\nend", "    local result\
    \ = {}\n    for w in string.gmatch(sentence, \"([^ ]+)\") do\n        local n\
    \ = #w\n        if n ~= 1 then\n            local prime = true\n            for\
    \ i = 2, n do\n                if not prime or n % i == 0 then\n             \
    \       prime = false\n                    break\n                end\n      \
    \      end\n            if prime then\n                result[#result + 1] = w\n\
    \            end\n        end\n    end\n    return table.concat(result)\nend\n\
    </cell>\n<text>\nLet's see how it works:", "    local prime_words = {}\n    for\
    \ i = 2, #sentence do\n        local prime_word = {}\n        for j = 1, #sentence\
    \ do\n            if sentence:sub(i, i + 1) ~= ' ' then\n                prime_word[#prime_word\
    \ + 1] = 1\n            end\n        end\n        table.insert(prime_words, #prime_word)\n\
    \    end\n    local new_sentence = ''\n    for i = 1, #prime_words do\n      \
    \  if prime_words[i] == 1 then\n            for j = 1, #sentence do\n        \
    \        if sentence:sub(i, i + 1) ~= ' ' then\n                    new_sentence\
    \ = new_sentence .. sentence:sub(i, i + 1)\n                end\n            end\n\
    \        end\n    end\n    return new_sentence\nend", "    local prime_words =\
    \ {}\n    for i = 2, #sentence do\n        local prime_word = {}\n        for\
    \ j = 2, #prime_words do\n            local prime_word = prime_word .. \" \" ..\
    \ sentence:sub(i,i)\n        end\n        prime_words[#prime_words + 1] = prime_word\n\
    \    end\n    return prime_words[#prime_words]\nend\n</cell>\n<text>\nLet's test\
    \ our implementation:", "    local primes = {}\n    for i = 2, #sentence do\n\
    \        local prime = true\n        for j = 2, #primes do\n            if i %\
    \ primes[j] == 0 then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local result = \"\"\n    for i = 1, #primes do\n\
    \        result = result .. \" \" .. sentence:sub(1, primes[i])\n    end\n   \
    \ return result\nend\n</cell>\n<text>\nLet's test our function", "    local primes\
    \ = {}\n    local prime_words = {}\n    local prime_words_len = {}\n    local\
    \ prime_words_order = {}\n    local prime_words_str = {}\n    local prime_words_str2\
    \ = {}\n    local prime_words_str3 = {}\n    local prime_words_str4 = {}\n   \
    \ local prime_words_str5 = {}\n    local prime_words_str6 = {}\n    local prime_words_str7\
    \ = {}\n    local prime_words_str8 = {}\n    local prime_words_str9 = {}\n   \
    \ local prime_words_str10 = {}\n    local prime_words_str11 = {}\n    local prime_words_str12\
    \ = {}\n    local prime_words_str13 = {}\n    local prime_words_str14 = {}\n \
    \   local prime_words_str15 = {}\n    local prime_words_str16 = {}\n    local\
    \ prime_words_str17 = {}\n    local prime_words_str18 = {}\n    local prime_words_str19\
    \ = {}\n    local prime_words_str20 = {}\n    local prime_words_str21 = {}\n \
    \   local prime_words_str22 = {}\n    local prime_words_str23 = {}\n    local\
    \ prime_words_str24 = {}\n    local prime_words_str25 = {}\n    local prime_words_str26\
    \ = {}\n    local prime_words_str27 = {}\n    local prime_words_str28 = {}\n \
    \   local prime_words_str29 = {}\n    local prime_words_str30 = {}\n    local\
    \ prime_words_str31 = {}\n    local prime_words_str32 = {}\n    local prime_words_str33\
    \ = {}\n    local prime_words_str34 = {}\n    local prime_words_str35 = {}\n \
    \   local prime_words_str36 = {}\n    local prime_words_str37 = {}\n    local\
    \ prime_words_str38 = {}\n    local prime_words_str39 = {}\n    local prime_words_str40\
    \ = {}\n    local prime_words_str41 = {}\n    local prime_words_str42 = {}\n \
    \   local prime_words_str43 = {}\n    local prime_words_str44 = {}\n    local\
    \ prime_words_str45 = {}\n    local prime_words_str46 = {}\n    local prime_words_str47\
    \ = {}\n    local prime_words_str48 = {}\n    local prime_words_str49 = {}\n \
    \   local prime_words_str50 = {}\n    local prime_words_str51 = {}\n    local\
    \ prime_words_str52 = {}\n    local prime_words_str53 = {}", "    local primes\
    \ = {}\n    local prime_words = {}\n    local prime_words_length = {}\n    local\
    \ prime_words_index = {}\n    local prime_words_index2 = {}\n    local prime_words_index3\
    \ = {}\n    local prime_words_index4 = {}\n    local prime_words_index5 = {}\n\
    \    local prime_words_index6 = {}\n    local prime_words_index7 = {}\n    local\
    \ prime_words_index8 = {}\n    local prime_words_index9 = {}\n    local prime_words_index10\
    \ = {}\n    local prime_words_index11 = {}\n    local prime_words_index12 = {}\n\
    \    local prime_words_index13 = {}\n    local prime_words_index14 = {}\n    local\
    \ prime_words_index15 = {}\n    local prime_words_index16 = {}\n    local prime_words_index17\
    \ = {}\n    local prime_words_index18 = {}\n    local prime_words_index19 = {}\n\
    \    local prime_words_index20 = {}\n    local prime_words_index21 = {}\n    local\
    \ prime_words_index22 = {}\n    local prime_words_index23 = {}\n    local prime_words_index24\
    \ = {}\n    local prime_words_index25 = {}\n    local prime_words_index26 = {}\n\
    \    local prime_words_index27 = {}\n    local prime_words_index28 = {}\n    local\
    \ prime_words_index29 = {}\n    local prime_words_index30 = {}\n    local prime_words_index31\
    \ = {}\n    local prime_words_index32 = {}\n    local prime_words_index33 = {}\n\
    \    local prime_words_index34 = {}\n    local prime_words_index35 = {}\n    local\
    \ prime_words_index36 = {}\n    local prime_words_index37 = {}\n    local prime_words_index38\
    \ = {}\n    local prime_words_index39 = {}\n    local prime_words_index40 = {}\n\
    \    local prime_words_index41 = {}\n    local prime_words_index42 = {}\n    local\
    \ prime_words_index43 = {}\n    local prime_words_index44 = {}\n    local prime_words_index45\
    \ = {}\n    local prime_words_index46 = {}\n    local prime_words_index47 = {}\n\
    \    local prime_words_index48 = {}\n    local prime_words_index49 = {}\n    local\
    \ prime_words_index50 = {}\n    local prime_words_index51 = {}\n    local prime_words_index52\
    \ = {}\n    local prime_words_index53 = {}\n    local prime_words_index54", " \
    \   local prime_words = {}\n    for i = 2, #sentence do\n        local prime =\
    \ true\n        for j = 2, #prime_words do\n            if #prime_words[j] > i\
    \ then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(prime_words, i)\n\
    \        end\n    end\n    local result = {}\n    for i = 1, #prime_words do\n\
    \        local prime_word = sentence:sub(1, prime_words[i])\n        table.insert(result,\
    \ prime_word)\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\n\
    Let's see how it works:", "    local primes = {}\n    for i = 2, #sentence do\n\
    \        local prime = true\n        for j = 2, #primes do\n            if i %\
    \ primes[j] == 0 then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local result = {}\n    for i = 1, #primes do\n\
    \        local word = sentence:sub(1, primes[i])\n        table.insert(result,\
    \ word)\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\nLet's\
    \ see how it works:", "    local primes = {}\n    local primes_count = 0\n   \
    \ local primes_length = 1\n    local primes_index = 1\n    local primes_length\
    \ = #sentence\n    for i = 1, primes_length do\n        local prime = primes_index\n\
    \        primes[prime] = true\n        primes_index = primes_index + 1\n     \
    \   if primes_index > primes_length then\n            primes_count = primes_count\
    \ + 1\n            primes_length = primes_length + 1\n        end\n    end\n \
    \   local result = \"\"\n    for i = 1, primes_count do\n        if sentence:sub(i,\
    \ i + primes_length) == \"\" then\n            primes_count = primes_count - 1\n\
    \        end\n    end\n    for i = 1, primes_count do\n        local prime = primes[i]\n\
    \        for j = 1, primes_length do\n            if sentence:sub(i, i + primes_length)\
    \ == \"\" then\n                local prime_copy = prime\n                prime\
    \ = primes[prime]\n                local new_word = sentence:sub(i, i + primes_length)\n\
    \                local new_word_index = #new_word\n                local new_word_length\
    \ = #new_word\n                local new_word_prime = prime\n                local\
    \ new_word_prime_index = primes_index\n                primes_index = primes_index\
    \ + 1\n                local new_word_prime_length = primes_length\n         \
    \       local new_word_prime_copy = prime\n                local new_word_prime_copy_index\
    \ = primes_index\n                primes_index = primes_index + 1\n          \
    \      local new_word_prime_copy_index = primes_index\n                primes_index\
    \ = primes_index + 1\n                local new_word_prime_copy_index_2 = primes_index\n\
    \                primes_index = primes_index + 1\n                local new_word_prime_copy_index_3\
    \ = primes_index\n                primes_index = primes_index + 1\n          \
    \      local new_word_prime_copy_index_4 = primes_index\n                primes_index\
    \ = primes_index + 1\n                local new_word_prime_copy_index_5 = primes_index\n\
    \                primes_index = primes_index + 1\n                local new_word_prime_copy_index_6\
    \ = primes_index\n                primes_index = primes_index + 1\n          \
    \      local new_word_prime_copy_index_7 = primes_index\n                primes_index\
    \ = primes_index + 1\n                local new_word_prime_copy_index_8 = primes_index\n\
    \                primes_index = primes_index + 1\n                local new_word_prime_copy_index_9\
    \ = primes_index\n                primes_index = primes_index + 1\n          \
    \      local new_word_prime_copy_index_10 = primes_index\n                primes_index\
    \ = primes_index + 1\n                local new_word_prime_copy", "    local primes\
    \ = {}\n    local primes_count = 0\n    local primes_index = {}\n    local primes_length\
    \ = {}\n    local primes_string = ''\n    local primes_string_index = 0\n    local\
    \ primes_string_length = 0\n    local primes_string_prime = ''\n    local primes_string_prime_index\
    \ = 0\n    local primes_string_prime_length = 0\n    local primes_string_prime_prime\
    \ = ''\n    local primes_string_prime_prime_index = 0\n    local primes_string_prime_prime_length\
    \ = 0\n    local primes_string_prime_prime_prime = ''\n    local primes_string_prime_prime_prime_index\
    \ = 0\n    local primes_string_prime_prime_prime_length = 0\n    local primes_string_prime_prime_prime_prime\
    \ = ''\n    local primes_string_prime_prime_prime_prime_index = 0\n    local primes_string_prime_prime_prime_prime_length\
    \ = 0\n    local primes_string_prime_prime_prime_prime_prime = ''\n    local primes_string_prime_prime_prime_prime_prime_index\
    \ = 0\n    local primes_string_prime_prime_prime_prime_prime_length = 0\n    local\
    \ primes_string_prime_prime_prime_prime_prime_prime = ''\n    local primes_string_prime_prime_prime_prime_prime_prime_index\
    \ = 0\n    local primes_string_prime_prime_prime_prime_prime_prime_length = 0\n\
    \    local primes_string_prime_prime_prime_prime_prime_prime_prime = ''\n    local\
    \ primes_string_prime_prime_prime_prime_prime_prime_prime_index = 0\n    local\
    \ primes_string_prime_prime_prime_prime_prime_prime_prime_length = 0\n    local\
    \ primes_string_prime_prime_prime_prime_prime_prime_prime_prime = ''\n    local\
    \ primes_string_prime_prime_prime_prime_prime_prime_prime_prime_index = 0\n  \
    \  local primes_string_prime_prime_prime_prime_prime_prime_prime_prime_length\
    \ = 0\n    local primes_string_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = ''\n    local primes_string_prime_prime_prime_prime_prime_prime_prime_prime_prime_index\
    \ = 0\n    local primes_string_prime_prime_prime_prime_prime_prime_prime_prime_prime_length\
    \ = 0\n    local primes_string_", "    local prime_numbers = {}\n    for i = 2,\
    \ 100 do\n        prime_numbers[i] = true\n    end\n    for i = 1, #sentence do\n\
    \        local word = sentence:sub(i,i)\n        if prime_numbers[#prime_numbers\
    \ + 1] == true then\n            prime_numbers[#prime_numbers + 1] = false\n \
    \           for j = #prime_numbers, 1, -1 do\n                if prime_numbers[j]\
    \ == true then\n                    prime_numbers[j] = false\n               \
    \     break\n                end\n            end\n        end\n    end\n    return\
    \ table.concat(prime_numbers, \" \")\nend\n</cell>\n<text>\nLet's test our implementation:",
  "    local prime_numbers = {}\n    local prime_numbers_count = 0\n    local prime_numbers_index\
    \ = 1\n    local prime_numbers_index_prev = 1\n    local prime_numbers_index_next\
    \ = 1\n    local prime_numbers_index_temp = 1\n    local prime_numbers_index_temp2\
    \ = 0\n    local prime_numbers_index_temp3 = 0\n    local prime_numbers_index_temp4\
    \ = 0\n    local prime_numbers_index_temp5 = 0\n    local prime_numbers_index_temp6\
    \ = 0\n    local prime_numbers_index_temp7 = 0\n    local prime_numbers_index_temp8\
    \ = 0\n    local prime_numbers_index_temp9 = 0\n    local prime_numbers_index_temp10\
    \ = 0\n    local prime_numbers_index_temp11 = 0\n    local prime_numbers_index_temp12\
    \ = 0\n    local prime_numbers_index_temp13 = 0\n    local prime_numbers_index_temp14\
    \ = 0\n    local prime_numbers_index_temp15 = 0\n    local prime_numbers_index_temp16\
    \ = 0\n    local prime_numbers_index_temp17 = 0\n    local prime_numbers_index_temp18\
    \ = 0\n    local prime_numbers_index_temp19 = 0\n    local prime_numbers_index_temp20\
    \ = 0\n    local prime_numbers_index_temp21 = 0\n    local prime_numbers_index_temp22\
    \ = 0\n    local prime_numbers_index_temp23 = 0\n    local prime_numbers_index_temp24\
    \ = 0\n    local prime_numbers_index_temp25 = 0\n    local prime_numbers_index_temp26\
    \ = 0\n    local prime_numbers_index_temp27 = 0\n    local prime_numbers_index_temp28\
    \ = 0\n    local prime_numbers_index_temp29 = 0\n    local prime_numbers_index_temp30\
    \ = 0\n    local prime_numbers_index_temp31 = 0\n    local prime_numbers_index_temp32\
    \ = 0\n    local prime_numbers_index_temp33 = 0\n    local prime_numbers_index_temp34\
    \ = 0\n    local prime_numbers_index_temp35 = 0\n    local prime_numbers_index_temp36\
    \ = 0\n    local prime_numbers_index_temp37 = 0\n    local prime_numbers_index_temp38\
    \ = 0\n    local prime_numbers_index_temp39 = 0\n    local prime_numbers_index_temp40\
    \ = 0\n    local prime_numbers_index_temp41 = 0\n    local prime_numbers_index_temp42\
    \ = 0\n    local prime_numbers_index_", "    local primes = {}\n    for i = 2,\
    \ #sentence do\n        local prime = true\n        for j = 2, #primes do\n  \
    \          if i % primes[j] == 0 then\n                prime = false\n       \
    \         break\n            end\n        end\n        if prime then\n       \
    \     table.insert(primes, i)\n        end\n    end\n    local result = {}\n \
    \   for i = 1, #primes do\n        local word = sentence:sub(1, primes[i])\n \
    \       table.insert(result, word)\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's see how it works:", "    local primes = {}\n    for\
    \ i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if sentence:sub(i, i) == primes[j] then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 2, #primes do\n        local word = sentence:sub(i, i)\n \
    \       for j = #primes, 1, -1 do\n            if word:sub(1, 1) == primes[j]\
    \ then\n                word:sub(1)\n                break\n            end\n\
    \        end\n        table.insert(result, word)\n    end\n    return table.concat(result)\n\
    end", "    local primes = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if sentence:sub(i, i+j) ~=\
    \ ' ' then\n                prime = false\n                break\n           \
    \ end\n        end\n        if prime then\n            table.insert(primes, i)\n\
    \        end\n    end\n    local result = {}\n    for i = 2, #primes do\n    \
    \    local word = sentence:sub(1, primes[i])\n        table.insert(result, word)\n\
    \    end\n    return table.concat(result)\nend\n</cell>\n<text>\nLet's test our\
    \ implementation:", "    local primes = {}\n    for i = 2, 100 do\n        local\
    \ prime = true\n        for _, v in pairs(sentence:gsub('%w+', '%s*')):gmatch('%s*')\
    \ do\n            if v % i ~= 0 then\n                prime = false\n        \
    \        break\n            end\n        end\n        if prime then\n        \
    \    table.insert(primes, i)\n        end\n    end\n    local result = {}\n  \
    \  for _, v in pairs(primes) do\n        table.insert(result, v:sub(1, v - 1))\n\
    \    end\n    return table.concat(result)\nend\n</cell>\n<text>\nLet's test our\
    \ implementation:", "    local primes = {}\n    for i = 2, #sentence do\n    \
    \    local prime = true\n        for j = 2, #primes do\n            if sentence:sub(i,\
    \ i + j) ~= ' ' then\n                prime = false\n                break\n \
    \           end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return table.concat(primes, ' ')\nend", "    local\
    \ prime_words = {}\n    for i = 2, #sentence do\n        local prime_word = {}\n\
    \        for j = 1, #sentence do\n            if sentence:sub(i,i) == ' ' then\n\
    \                prime_word[#prime_word+1] = sentence:sub(i,i)\n            end\n\
    \        end\n        prime_words[#prime_words+1] = prime_word\n    end\n    local\
    \ new_sentence = sentence\n    for i = 1, #prime_words do\n        for j = 1,\
    \ #prime_words[i] do\n            if prime_words[i][j] ~= ' ' then\n         \
    \       new_sentence = new_sentence:sub(1,#new_sentence)\n                new_sentence\
    \ = new_sentence..prime_words[i][j]\n            end\n        end\n    end\n \
    \   return new_sentence\nend", "    local primes = {}\n    for i = 2, #sentence\
    \ do\n        local prime = true\n        for j = 2, #primes do\n            if\
    \ sentence[i] == primes[j] then\n                prime = false\n             \
    \   break\n            end\n        end\n        if prime then\n            table.insert(primes,\
    \ sentence[i])\n        end\n    end\n    return table.concat(primes, \" \")\n\
    end", "    local primes = {}\n    local prime_words = {}\n    for i = 2, #sentence\
    \ do\n        local prime = true\n        for j = 2, #primes do\n            if\
    \ sentence[i] == primes[j] then\n                prime = false\n             \
    \   break\n            end\n        end\n        if prime then\n            table.insert(primes,\
    \ sentence[i])\n            table.insert(prime_words, sentence[i])\n        end\n\
    \    end\n    return table.concat(prime_words, \" \")\nend\n</cell>\n<text>\n\
    Let's test our function", "    local primes = {}\n    local primes_count = 0\n\
    \    local primes_index = {}\n    local primes_length = {}\n    local primes_index\
    \ = {}\n    local primes_length = {}\n    local primes_index = {}\n    local primes_length\
    \ = {}\n    local primes_index = {}\n    local primes_length = {}\n    local primes_index\
    \ = {}\n    local primes_length = {}\n    local primes_index = {}\n    local primes_length\
    \ = {}\n    local primes_index = {}\n    local primes_length = {}\n    local primes_index\
    \ = {}\n    local primes_length = {}\n    local primes_index = {}\n    local primes_length\
    \ = {}\n    local primes_index = {}\n    local primes_length = {}\n    local primes_index\
    \ = {}\n    local primes_length = {}\n    local primes_index = {}\n    local primes_length\
    \ = {}\n    local primes_index = {}\n    local primes_length = {}\n    local primes_index\
    \ = {}\n    local primes_length = {}\n    local primes_index = {}\n    local primes_length\
    \ = {}\n    local primes_index = {}\n    local primes_length = {}\n    local primes_index\
    \ = {}\n    local primes_length = {}\n    local primes_index = {}\n    local primes_length\
    \ = {}\n    local primes_index = {}\n    local primes_length = {}\n    local primes_index\
    \ = {}\n    local primes_length = {}\n    local primes_index = {}\n    local primes_length\
    \ = {}\n    local primes_index = {}\n    local primes_length = {}\n    local primes_index\
    \ = {}\n    local primes_length = {}\n    local primes_index = {}\n    local primes_length\
    \ = {}\n    local primes_index = {}\n    local primes_length = {}\n    local primes_index\
    \ = {}\n    local primes_length = {}\n    local primes_index = {}\n    local primes_length\
    \ = {}\n    local primes_index = {}\n    local primes_length = {}\n    local primes_index\
    \ = {}\n    local primes_length = {}\n    local primes_index = {}\n    local primes_length\
    \ = {}\n    local primes_index = {}\n    local primes_length = {}\n    local primes_index\
    \ = {}\n    local primes_length = {}\n    local primes_index = {}\n    local primes_length\
    \ = {}\n    local primes_index = {}\n    local primes_length = {}\n    local primes_index\
    \ = {}\n    local primes_length = {}\n    local primes_index = {}\n    local primes_",
  "    local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if i % primes[j] == 0 then\n     \
    \           prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(primes, i)\n        end\n   \
    \ end\n    local result = {}\n    for i = 1, #primes do\n        local word =\
    \ sentence:sub(1, primes[i])\n        table.insert(result, word)\n    end\n  \
    \  return table.concat(result)\nend\n</cell>\n<text>\nLet's test our implementation:",
  "    local primes = {}\n    local prime_words = {}\n    local prime_words_len =\
    \ {}\n    local prime_words_order = {}\n    local prime_words_str = {}\n    local\
    \ prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_str\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_str = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_str = {}\n    local prime_words_len = {}\n    local\
    \ prime_words_order = {}\n    local prime_words_str = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_str = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_str\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_str = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_str = {}\n    local prime_words_len = {}\n    local\
    \ prime_words_order = {}\n    local prime_words_str = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_str = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_str\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_str = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_str = {}\n    local prime_words_len = {}\n    local\
    \ prime_words_order = {}\n    local prime_words_str = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_str = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_str\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_str = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_str = {}\n    local prime_words_len = {}\n    local\
    \ prime_words_order = {}\n    local prime_words_str = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_", "    local primes\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #primes do\n            if i ~= primes[j] then\n                prime =\
    \ false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]))\n    end\n    return table.concat(result)\nend", "    local primes\
    \ = {}\n    local primes_count = 0\n    local primes_sum = 0\n    local primes_sum2\
    \ = 0\n    local primes_sum3 = 0\n    local primes_sum4 = 0\n    local primes_sum5\
    \ = 0\n    local primes_sum6 = 0\n    local primes_sum7 = 0\n    local primes_sum8\
    \ = 0\n    local primes_sum9 = 0\n    local primes_sum10 = 0\n    local primes_sum11\
    \ = 0\n    local primes_sum12 = 0\n    local primes_sum13 = 0\n    local primes_sum14\
    \ = 0\n    local primes_sum15 = 0\n    local primes_sum16 = 0\n    local primes_sum17\
    \ = 0\n    local primes_sum18 = 0\n    local primes_sum19 = 0\n    local primes_sum20\
    \ = 0\n    local primes_sum21 = 0\n    local primes_sum22 = 0\n    local primes_sum23\
    \ = 0\n    local primes_sum24 = 0\n    local primes_sum25 = 0\n    local primes_sum26\
    \ = 0\n    local primes_sum27 = 0\n    local primes_sum28 = 0\n    local primes_sum29\
    \ = 0\n    local primes_sum30 = 0\n    local primes_sum31 = 0\n    local primes_sum32\
    \ = 0\n    local primes_sum33 = 0\n    local primes_sum34 = 0\n    local primes_sum35\
    \ = 0\n    local primes_sum36 = 0\n    local primes_sum37 = 0\n    local primes_sum38\
    \ = 0\n    local primes_sum39 = 0\n    local primes_sum40 = 0\n    local primes_sum41\
    \ = 0\n    local primes_sum42 = 0\n    local primes_sum43 = 0\n    local primes_sum44\
    \ = 0\n    local primes_sum45 = 0\n    local primes_sum46 = 0\n    local primes_sum47\
    \ = 0\n    local primes_sum48 = 0\n    local primes_sum49 = 0\n    local primes_sum50\
    \ = 0\n    local primes_sum51 = 0\n    local primes_sum52 = 0\n    local primes_sum53\
    \ = 0\n    local primes_sum54 = 0\n    local primes_sum55 = 0\n    local primes_sum56\
    \ = 0\n    local primes_sum57 = 0\n    local primes_sum58 = 0\n    local primes_sum59\
    \ = 0\n    local primes_sum60 = 0\n    local primes_sum61 = 0\n    local primes_sum62\
    \ = 0\n    local primes_sum63", "    local primes = {}\n    for i = 2, #sentence\
    \ do\n        local prime = true\n        for j = 2, #primes do\n            if\
    \ i ~= primes[j] and sentence[i] == sentence[i]:sub(1, #primes[j]) then\n    \
    \            prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(primes, i)\n        end\n   \
    \ end\n    local result = {}\n    for i = 1, #primes do\n        table.insert(result,\
    \ sentence:sub(1, primes[i]))\n    end\n    return table.concat(result)\nend\n\
    </cell>\n<text>\nLet's test our implementation:", "    local primes = {}\n   \
    \ local prime_words = {}\n    local prime_words_len = {}\n    for i = 2, #sentence\
    \ do\n        local prime = true\n        for j = 2, #primes do\n            if\
    \ sentence[i] == primes[j] then\n                prime = false\n             \
    \   break\n            end\n        end\n        if prime then\n            table.insert(primes,\
    \ sentence[i])\n            table.insert(prime_words, sentence[i])\n         \
    \   table.insert(prime_words_len, 1)\n        else\n            local len = 1\n\
    \            for j = 2, #prime_words do\n                if sentence[i] == prime_words[j]\
    \ then\n                    len = len + 1\n                    break\n       \
    \         end\n            end\n            table.insert(prime_words_len, len)\n\
    \        end\n    end\n    local result = {}\n    for i = 2, #prime_words do\n\
    \        if prime_words_len[i] ~= prime_words_len[i - 1] and prime_words_len[i]\
    \ ~= prime_words_len[i - 2] then\n            table.insert(result, prime_words[i])\n\
    \        end\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\n\
    Let's test your implementation. Make sure it passes the Python unit test.", " \
    \   local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if i % primes[j] == 0 then\n     \
    \           prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(primes, i)\n        end\n   \
    \ end\n    local result = {}\n    for i = 1, #primes do\n        local word =\
    \ sentence:sub(1, primes[i])\n        table.insert(result, word)\n    end\n  \
    \  return table.concat(result)\nend", "    local prime_words = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n    ",
  "    local primes = {}\n    local primes_count = 0\n    local primes_string = ''\n\
    \    local words = sentence:gmatch('[^ ]+')\n    for _, word in pairs(words) do\n\
    \        local prime = true\n        for i = 2, #primes do\n            if primes[i]\
    \ == #words and primes[i] == i then\n                prime = false\n         \
    \       break\n            end\n        end\n        if prime then\n         \
    \   primes[#primes + 1] = #words + 1\n            primes_count = #primes\n   \
    \     end\n    end\n    for i = 1, primes_count do\n        primes_string = primes_string\
    \ .. ' ' .. words[primes[i]:byte()]\n    end\n    return primes_string\nend",
  "    local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if i % primes[j] == 0 then\n     \
    \           prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(primes, i)\n        end\n   \
    \ end\n    local result = {}\n    for i = 1, #primes do\n        table.insert(result,\
    \ sentence:sub(1, primes[i]))\n    end\n    return table.concat(result)\nend\n\
    </cell>\n<text>\nLet's test our implementation:", "    local primes = {}\n   \
    \ local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_", "    local result = {}\n    for w in string.gmatch(sentence,\
    \ \"([^ ]+)\") do\n        local prime = true\n        for i = 2, #result do\n\
    \            if string.len(result[i]) > string.len(w) then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(result, w)\n        end\n    end\n    return\
    \ table.concat(result)\nend", "    local primes = {}\n    for i = 2, #sentence\
    \ do\n        local prime = true\n        for j = 2, #primes do\n            if\
    \ i % primes[j] == 0 then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local result = {}\n    for i = 1, #primes do\n\
    \        local word = sentence:sub(1, primes[i])\n        table.insert(result,\
    \ word)\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\nLet's\
    \ now see how to use this function in an actual problem:", "    local prime_words\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ for i = 1, #sentence do\n        local word = sentence:sub(i, i)\n        local\
    \ prime_words_len[i] = #word\n        if prime_words_len[i] == 0 then\n      \
    \      prime_words[i] = word\n        else\n            local prime_words_order[i]\
    \ = word\n        end\n    end\n    for i = 2, #prime_words_len do\n        if\
    \ prime_words_len[i] == 1 then\n            prime_words[#prime_words+1] = prime_words_order[i]\n\
    \        end\n    end\n    return table.concat(prime_words)\nend\n</cell>\n<text>\n\
    Let's now see how to use this function in an actual problem:", "  local primes\
    \ = {}\n  for i = 2, #sentence do\n    local prime = true\n    for j = 2, #primes\
    \ do\n      if i % primes[j] == 0 then\n        prime = false\n        break\n\
    \      end\n    end\n    if prime then\n      table.insert(primes, i)\n    end\n\
    \  end\n  local result = {}\n  for i = 1, #primes do\n    table.insert(result,\
    \ sentence:sub(1, primes[i]))\n  end\n  return table.concat(result)\nend", " \
    \   local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if i % primes[j] == 0 then\n     \
    \           prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(primes, i)\n        end\n   \
    \ end\n    local result = {}\n    for i = 1, #primes do\n        table.insert(result,\
    \ sentence:sub(1, primes[i]))\n    end\n    return table.concat(result)\nend\n\
    </cell>\n<text>\nLet's see how it works:", "    local primes = {}\n    for i =\
    \ 2, #sentence do\n        local prime = true\n        for j = 2, #primes do\n\
    \            if i % primes[j] == 0 then\n                prime = false\n     \
    \           break\n            end\n        end\n        if prime then\n     \
    \       table.insert(primes, i)\n        end\n    end\n    local result = {}\n\
    \    for i = 1, #primes do\n        table.insert(result, sentence:sub(1, primes[i]))\n\
    \    end\n    return table.concat(result)\nend", "    local primes = {}\n    local\
    \ primes_count = 0\n    local primes_length = 0\n    local primes_string = ''\n\
    \    local primes_string_length = 0\n    local primes_string_index = 0\n    local\
    \ primes_string_length_index = 0\n    local primes_string_prime_index = 0\n  \
    \  local primes_string_prime_length_index = 0\n    local primes_string_prime_length\
    \ = 0\n    local primes_string_prime_length_index = 0\n    local primes_string_prime_prime_index\
    \ = 0\n    local primes_string_prime_prime_length_index = 0\n    local primes_string_prime_prime_length\
    \ = 0\n    local primes_string_prime_prime_length_index = 0\n    local primes_string_prime_prime_prime_index\
    \ = 0\n    local primes_string_prime_prime_prime_length_index = 0\n    local primes_string_prime_prime_prime_length\
    \ = 0\n    local primes_string_prime_prime_prime_length_index = 0\n    local primes_string_prime_prime_prime_prime_index\
    \ = 0\n    local primes_string_prime_prime_prime_prime_length_index = 0\n    local\
    \ primes_string_prime_prime_prime_prime_length = 0\n    local primes_string_prime_prime_prime_prime_length_index\
    \ = 0\n    local primes_string_prime_prime_prime_prime_prime_index = 0\n    local\
    \ primes_string_prime_prime_prime_prime_prime_length_index = 0\n    local primes_string_prime_prime_prime_prime_prime_prime_index\
    \ = 0\n    local primes_string_prime_prime_prime_prime_prime_prime_length_index\
    \ = 0\n    local primes_string_prime_prime_prime_prime_prime_prime_length = 0\n\
    \    local primes_string_prime_prime_prime_prime_prime_prime_length_index = 0\n\
    \    local primes_string_prime_prime_prime_prime_prime_prime_length = 0\n    local\
    \ primes_string_prime_prime_prime_prime_prime_prime_length_index = 0\n    local\
    \ primes_string_prime_prime_prime_prime_prime_prime_prime_length = 0\n    local\
    \ primes_string_prime_prime_prime_prime_prime_prime_prime_length_index = 0\n \
    \   local primes_string_prime_prime_prime_prime_prime_prime_prime_length = 0\n\
    \    local primes_string_prime_prime_prime_prime_prime_prime_prime_prime_length\
    \ = 0\n    ", "    local primes = {}\n    local prime_words = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_str = ''\n   \
    \ local prime_words_index = 1\n    local prime_words_index2 = 0\n    local prime_words_index3\
    \ = 0\n    local prime_words_index4 = 0\n    local prime_words_index5 = 0\n  \
    \  local prime_words_index6 = 0\n    local prime_words_index7 = 0\n    local prime_words_index8\
    \ = 0\n    local prime_words_index9 = 0\n    local prime_words_index10 = 0\n \
    \   local prime_words_index11 = 0\n    local prime_words_index12 = 0\n    local\
    \ prime_words_index13 = 0\n    local prime_words_index14 = 0\n    local prime_words_index15\
    \ = 0\n    local prime_words_index16 = 0\n    local prime_words_index17 = 0\n\
    \    local prime_words_index18 = 0\n    local prime_words_index19 = 0\n    local\
    \ prime_words_index20 = 0\n    local prime_words_index21 = 0\n    local prime_words_index22\
    \ = 0\n    local prime_words_index23 = 0\n    local prime_words_index24 = 0\n\
    \    local prime_words_index25 = 0\n    local prime_words_index26 = 0\n    local\
    \ prime_words_index27 = 0\n    local prime_words_index28 = 0\n    local prime_words_index29\
    \ = 0\n    local prime_words_index30 = 0\n    local prime_words_index31 = 0\n\
    \    local prime_words_index32 = 0\n    local prime_words_index33 = 0\n    local\
    \ prime_words_index34 = 0\n    local prime_words_index35 = 0\n    local prime_words_index36\
    \ = 0\n    local prime_words_index37 = 0\n    local prime_words_index38 = 0\n\
    \    local prime_words_index39 = 0\n    local prime_words_index40 = 0\n    local\
    \ prime_words_index41 = 0\n    local prime_words_index42 = 0\n    local prime_words_index43\
    \ = 0\n    local prime_words_index44 = 0\n    local prime_words_index45 = 0\n\
    \    local prime_words_index46 = 0\n    local prime_words_index47 = 0\n    local\
    \ prime_words_index48 = 0\n    local prime_words_index49 = 0\n    local prime_words_index50\
    \ = 0\n    local prime_words_index51 = 0\n    local prime_words_index52 = 0\n\
    \    local prime_words_index53 = 0\n", "    local primes = {}\n    local primes_count\
    \ = 0\n    local primes_sum = 0\n    local primes_sum2 = 0\n    local primes_sum3\
    \ = 0\n    local primes_sum4 = 0\n    local primes_sum5 = 0\n    local primes_sum6\
    \ = 0\n    local primes_sum7 = 0\n    local primes_sum8 = 0\n    local primes_sum9\
    \ = 0\n    local primes_sum10 = 0\n    local primes_sum11 = 0\n    local primes_sum12\
    \ = 0\n    local primes_sum13 = 0\n    local primes_sum14 = 0\n    local primes_sum15\
    \ = 0\n    local primes_sum16 = 0\n    local primes_sum17 = 0\n    local primes_sum18\
    \ = 0\n    local primes_sum19 = 0\n    local primes_sum20 = 0\n    local primes_sum21\
    \ = 0\n    local primes_sum22 = 0\n    local primes_sum23 = 0\n    local primes_sum24\
    \ = 0\n    local primes_sum25 = 0\n    local primes_sum26 = 0\n    local primes_sum27\
    \ = 0\n    local primes_sum28 = 0\n    local primes_sum29 = 0\n    local primes_sum30\
    \ = 0\n    local primes_sum31 = 0\n    local primes_sum32 = 0\n    local primes_sum33\
    \ = 0\n    local primes_sum34 = 0\n    local primes_sum35 = 0\n    local primes_sum36\
    \ = 0\n    local primes_sum37 = 0\n    local primes_sum38 = 0\n    local primes_sum39\
    \ = 0\n    local primes_sum40 = 0\n    local primes_sum41 = 0\n    local primes_sum42\
    \ = 0\n    local primes_sum43 = 0\n    local primes_sum44 = 0\n    local primes_sum45\
    \ = 0\n    local primes_sum46 = 0\n    local primes_sum47 = 0\n    local primes_sum48\
    \ = 0\n    local primes_sum49 = 0\n    local primes_sum50 = 0\n    local primes_sum51\
    \ = 0\n    local primes_sum52 = 0\n    local primes_sum53 = 0\n    local primes_sum54\
    \ = 0\n    local primes_sum55 = 0\n    local primes_sum56 = 0\n    local primes_sum57\
    \ = 0\n    local primes_sum58 = 0\n    local primes_sum59 = 0\n    local primes_sum60\
    \ = 0\n    local primes_sum61 = 0\n    local primes_sum62 = 0\n    local primes_sum63",
  "    local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if i % primes[j] == 0 then\n     \
    \           prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(primes, i)\n        end\n   \
    \ end\n    local result = \"\"\n    for i = 1, #primes do\n        result = result\
    \ .. \" \" .. sentence:sub(1, primes[i])\n    end\n    return result:sub(2)\n\
    end\n</cell>\n<text>\nLet's see how it works:", "    local primes = {}\n    for\
    \ i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]))\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\n\
    Let's test our implementation:", "    local result = {}\n    for w in string.gmatch(sentence,\
    \ \"%S+\") do\n        local n = #w\n        for i = 2, n do\n            local\
    \ m = math.floor(math.sqrt(n))\n            if n % i == 0 then\n             \
    \   n = n + 1\n                break\n            end\n        end\n        if\
    \ n == 1 then\n            result[#result + 1] = w\n        end\n    end\n   \
    \ return table.concat(result)\nend", "    local prime_numbers = {}\n    for i\
    \ = 2, #sentence do\n        local prime = true\n        for j = 2, #prime_numbers\
    \ do\n            if i % prime_numbers[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(prime_numbers, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #prime_numbers do\n        result = result .. \" \" ..\
    \ sentence:sub(1, prime_numbers[i])\n    end\n    return result\nend", "    local\
    \ prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    ", "    local primes = {}\n    for\
    \ i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 1, #primes do\n        local prime = primes[i]\n        for\
    \ j = 1, #sentence do\n            if sentence:sub(i, i + 1) ~= ' ' then\n   \
    \             local index = sentence:find(sentence:sub(i, i + 1), 1, true)\n \
    \               if index == nil then\n                    index = sentence:find(sentence:sub(i,\
    \ i + 1), 1, false)\n                end\n                if index == nil then\n\
    \                    index = sentence:find(sentence:sub(i, i + 1), 1, true)\n\
    \                end\n                if index == nil then\n                 \
    \   index = sentence:find(sentence:sub(i, i + 1), 1, false)\n                end\n\
    \                if index == nil then\n                    index = sentence:find(sentence:sub(i,\
    \ i + 1), 1, true)\n                end\n                if index == nil then\n\
    \                    index = sentence:find(sentence:sub(i, i + 1), 1, false)\n\
    \                end\n                if index == nil then\n                 \
    \   index = sentence:find(sentence:sub(i, i + 1), 1, true)\n                end\n\
    \                if index == nil then\n                    index = sentence:find(sentence:sub(i,\
    \ i + 1), 1, false)\n                end\n                if index == nil then\n\
    \                    index = sentence:find(sentence:sub(i, i + 1), 1, true)\n\
    \                end\n                if index == nil then\n                 \
    \   index = sentence:find(sentence:sub(i, i + 1), 1, false)\n                end\n\
    \                if index == nil then\n                    index = sentence:find(sentence:sub(i,\
    \ i + 1), 1, true)\n                end\n                if index == nil then\n\
    \                    index = sentence:find(sentence:sub(i, i + 1), 1, false)\n\
    \                end\n                if index == nil then\n                 \
    \   index = sentence:find(sentence:sub(i, i + 1), 1, true)\n                end\n\
    \                if index == nil then\n                    index = sentence:find(sentence:sub(i,\
    \ i + 1), 1, false)\n                end\n                if index == nil then\n\
    \                    index = sentence:find(sentence:sub(i, i + 1), 1, true)\n\
    \                end\n                if index == nil then\n                 \
    \   index = sentence:find(sentence:sub(i, i + 1), 1, false)\n                end\n\
    \                if index == nil then\n                    index = sentence:find(sentence:sub(i,\
    \ i + 1), 1, true)\n                end\n                if index == nil then",
  "    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_str = ''\n    for i = 1, #sentence do\n        local\
    \ word = sentence:sub(i,i)\n        local prime_words_len = #prime_words\n   \
    \     if prime_words_len == 0 then\n            prime_words[#prime_words+1] =\
    \ word\n        else\n            for j = 1, #prime_words do\n               \
    \ if prime_words[j] == word then\n                    prime_words_order[#prime_words_order+1]\
    \ = j\n                end\n            end\n        end\n    end\n    for i =\
    \ 1, #prime_words_len do\n        local word = prime_words[prime_words_order[i]]\n\
    \        prime_words_str = prime_words_str..' '..word\n    end\n    return prime_words_str\n\
    end\n</cell>\n<text>\nLet's see how it works:", "    local result = {}\n    for\
    \ w in string.gmatch(sentence, '([^ ]+)')\n    do\n        local n = tonumber(w)\n\
    \        if n ~= nil then\n            if math.floor(n) == n then\n          \
    \      result[#result + 1] = w\n            end\n        end\n    end\n    return\
    \ table.concat(result)\nend", "    local primes = {}\n    for i = 2, 100 do\n\
    \        primes[i] = true\n    end\n    for i = 1, #sentence do\n        local\
    \ word = sentence:sub(i, i)\n        for j = 2, #primes do\n            if word:len()\
    \ == j and primes[j] then\n                primes[j] = false\n            end\n\
    \        end\n    end\n    local result = {}\n    for i = 1, #primes do\n    \
    \    if primes[i] then\n            result[#result + 1] = i\n        end\n   \
    \ end\n    return table.concat(result)\nend\n</cell>\n<text>\nLet's see how it\
    \ works:", "    local result = {}\n    for word in string.gmatch(sentence, \"\
    ([^ ]+)\") do\n        local prime = true\n        for i = 2, #result do\n   \
    \         if #word == i then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return table.concat(result)\nend", "    local\
    \ primes = {}\n    for i = 2, #sentence do\n        local prime = true\n     \
    \   for j = 2, #primes do\n            if sentence:sub(i, i+j) ~= sentence:sub(i-1,\
    \ i-1) then\n                prime = false\n                break\n          \
    \  end\n        end\n        if prime then\n            table.insert(primes, i)\n\
    \        end\n    end\n    local result = {}\n    for i = 2, #primes do\n    \
    \    local word = sentence:sub(i, i)\n        for j = #primes, 1, -1 do\n    \
    \        if word ~= sentence:sub(i, i+j) then\n                table.insert(result,\
    \ word)\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(result)\nend\n</cell>\n<text>\nLet's test your implementation",
  "    local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if sentence:len() >= primes[j] then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, #primes)\n  \
    \      end\n    end\n    local result = {}\n    for i = 1, #primes do\n      \
    \  local prime = primes[i]\n        for j = 1, #sentence do\n            if sentence:len()\
    \ >= prime then\n                table.insert(result, sentence:sub(1, prime))\n\
    \                break\n            end\n        end\n    end\n    return table.concat(result)\n\
    end", "    local primes = {}\n    local prime_words = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_str = {}\n   \
    \ local prime_words_str2 = {}\n    local prime_words_str3 = {}\n    local prime_words_str4\
    \ = {}\n    local prime_words_str5 = {}\n    local prime_words_str6 = {}\n   \
    \ local prime_words_str7 = {}\n    local prime_words_str8 = {}\n    local prime_words_str9\
    \ = {}\n    local prime_words_str10 = {}\n    local prime_words_str11 = {}\n \
    \   local prime_words_str12 = {}\n    local prime_words_str13 = {}\n    local\
    \ prime_words_str14 = {}\n    local prime_words_str15 = {}\n    local prime_words_str16\
    \ = {}\n    local prime_words_str17 = {}\n    local prime_words_str18 = {}\n \
    \   local prime_words_str19 = {}\n    local prime_words_str20 = {}\n    local\
    \ prime_words_str21 = {}\n    local prime_words_str22 = {}\n    local prime_words_str23\
    \ = {}\n    local prime_words_str24 = {}\n    local prime_words_str25 = {}\n \
    \   local prime_words_str26 = {}\n    local prime_words_str27 = {}\n    local\
    \ prime_words_str28 = {}\n    local prime_words_str29 = {}\n    local prime_words_str30\
    \ = {}\n    local prime_words_str31 = {}\n    local prime_words_str32 = {}\n \
    \   local prime_words_str33 = {}\n    local prime_words_str34 = {}\n    local\
    \ prime_words_str35 = {}\n    local prime_words_str36 = {}\n    local prime_words_str37\
    \ = {}\n    local prime_words_str38 = {}\n    local prime_words_str39 = {}\n \
    \   local prime_words_str40 = {}\n    local prime_words_str41 = {}\n    local\
    \ prime_words_str42 = {}\n    local prime_words_str43 = {}\n    local prime_words_str44\
    \ = {}\n    local prime_words_str45 = {}\n    local prime_words_str46 = {}\n \
    \   local prime_words_str47 = {}\n    local prime_words_str48 = {}\n    local\
    \ prime_words_str49 = {}\n    local prime_words_str50 = {}\n    local prime_words_str51\
    \ = {}\n    local prime_words_str52 = {}\n    local prime_words_str53 = {}", " \
    \   local primes = {}\n    local primes_count = 0\n    local primes_string = ''\n\
    \    local words = sentence:gmatch('([^ ]+)')\n    for _, word in pairs(words)\
    \ do\n        local prime = true\n        for i = 2, #primes do\n            if\
    \ primes[i] == word:len() then\n                prime = false\n              \
    \  break\n            end\n        end\n        if prime then\n            primes[#primes\
    \ + 1] = word:len()\n            primes_count = #primes\n        end\n    end\n\
    \    for i = 1, primes_count do\n        primes_string = primes_string .. ' '\
    \ .. primes[i]\n    end\n    return primes_string\nend", "    local primes = {}\n\
    \    for i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]))\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\n\
    Let's test our implementation:", "    local primes = {}\n    for i = 2, #sentence\
    \ do\n        local prime = true\n        for j = 2, #primes do\n            if\
    \ i ~= primes[j] then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local result = {}\n    for i = 1, #primes do\n\
    \        table.insert(result, sentence:sub(1, primes[i]))\n    end\n    return\
    \ table.concat(result)\nend", "    local primes = {}\n    for i = 2, #sentence\
    \ do\n        local prime = true\n        for j = 2, #primes do\n            if\
    \ i % primes[j] == 0 then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local result = {}\n    for i = 1, #primes do\n\
    \        table.insert(result, sentence:sub(1, primes[i]))\n    end\n    return\
    \ table.concat(result)\nend\n</cell>\n<text>\nLet's test our implementation:",
  "    local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if i % primes[j] == 0 then\n     \
    \           prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(primes, i)\n        end\n   \
    \ end\n    local result = \"\"\n    for i = 2, #primes do\n        result = result\
    \ .. \" \" .. sentence:sub(1, primes[i])\n    end\n    return result\nend\n</cell>\n\
    <text>\nLet's test our implementation:", "    local prime_numbers = {}\n    local\
    \ prime_numbers_count = 0\n    for i = 2, #sentence do\n        local prime_number\
    \ = prime_number_helper(sentence, i)\n        if prime_number ~= nil then\n  \
    \          prime_numbers[prime_numbers_count] = i\n            prime_numbers_count\
    \ = prime_numbers_count + 1\n        end\n    end\n    local result = {}\n   \
    \ for i = 1, #prime_numbers do\n        local prime_number = prime_numbers[i]\n\
    \        for j = 1, #sentence do\n            if sentence:sub(i, i + prime_number)\
    \ == sentence:sub(j, j + prime_number) then\n                result[#result +\
    \ 1] = sentence:sub(i, i + prime_number)\n            end\n        end\n    end\n\
    \    return table.concat(result)\nend\n</cell>\n<text>\nLet's test our implementation:",
  "    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    for i = 1, #sentence do\n        local word = sentence:sub(i,i)\n\
    \        local prime_words_len[i] = #word\n        if prime_words_len[i] == 0\
    \ then\n            prime_words[i] = word\n        else\n            local prime_words_order[i]\
    \ = word\n        end\n    end\n    for i = 2, #prime_words_len do\n        for\
    \ j = i, #prime_words_len do\n            if prime_words_len[j] ~= prime_words_len[i]\
    \ then\n                local prime_words_len[j] = prime_words_len[i]\n      \
    \          local prime_words_order[j] = prime_words_order[i]\n               \
    \ prime_words[j] = prime_words[i]\n            end\n        end\n    end\n   \
    \ return table.concat(prime_words_order)\nend\n</cell>\n<text>\nLet's see how\
    \ it works:", "    local primes = {}\n    local prime_words = {}\n    for i =\
    \ 2, #sentence do\n        local prime = true\n        for j = 2, #primes do\n\
    \            if sentence[i] == primes[j] then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, sentence[i])\n            table.insert(prime_words,\
    \ sentence[i])\n        end\n    end\n    return table.concat(prime_words, \"\
    \ \")\nend\n</cell>\n<text>\nLet's see how it works:", "    local primes = {}\n\
    \    local primes_count = 0\n    local primes_index = {}\n    local primes_index_count\
    \ = 0\n    local primes_string = ''\n    local primes_string_count = 0\n    local\
    \ primes_string_length = 0\n    local primes_string_length_count = 0\n    local\
    \ primes_string_length_prime = 0\n    local primes_string_length_prime_count =\
    \ 0\n    local primes_string_length_prime_prime = 0\n    local primes_string_length_prime_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_prime = 0\n    local primes_string_length_prime_prime_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_prime_prime = 0\n    local primes_string_length_prime_prime_prime_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_prime_prime_prime = 0\n    local\
    \ primes_string_length_prime_prime_prime_prime_prime_count = 0\n    local primes_string_length_prime_prime_prime_prime_prime_prime\
    \ = 0\n    local primes_string_length_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n    local primes_string_length_", "    local primes = {}\n    for i = 2,\
    \ 100 do\n        local prime = true\n        for _, word in ipairs(split(sentence))\
    \ do\n            if i ~= tonumber(word) then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for _, word in ipairs(split(sentence)) do\n        if table.contains(primes,\
    \ tonumber(word)) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result)\nend", "    local primes = {}\n    for\
    \ i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i ~= primes[j] then\n                prime = false\n    \
    \            break\n            end\n        end\n        if prime then\n    \
    \        table.insert(primes, i)\n        end\n    end\n    local result = \"\"\
    \n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result:sub(2)\nend\n</cell>\n<text>\nLet's see\
    \ how it works:", "    local primes = {}\n    for i = 2, #sentence do\n      \
    \  local prime = true\n        for j = 2, #primes do\n            if sentence:sub(i,\
    \ i + j) ~= sentence:sub(i - j, i) then\n                prime = false\n     \
    \           break\n            end\n        end\n        if prime then\n     \
    \       table.insert(primes, i)\n        end\n    end\n    local result = {}\n\
    \    for i = 2, #primes do\n        table.insert(result, sentence:sub(i, i + primes[i]))\n\
    \    end\n    return table.concat(result)\nend\n</cell>\n<text>\nLet's test our\
    \ implementation:", "    local primes = {}\n    for i = 2, #sentence do\n    \
    \    local prime = true\n        for j = 2, #primes do\n            if i % primes[j]\
    \ == 0 then\n                prime = false\n                break\n          \
    \  end\n        end\n        if prime then\n            table.insert(primes, i)\n\
    \        end\n    end\n    local result = {}\n    for i = 1, #primes do\n    \
    \    local word = sentence:sub(1, primes[i])\n        table.insert(result, word)\n\
    \    end\n    return table.concat(result)\nend", "    local primes = {}\n    for\
    \ i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 1, #primes do\n        local prime = primes[i]\n        for\
    \ j = 1, #sentence do\n            if sentence:sub(i, i + prime) == sentence:sub(j,\
    \ j + prime) then\n                table.insert(result, sentence:sub(i, i + prime))\n\
    \            end\n        end\n    end\n    return table.concat(result)\nend\n\
    </cell>\n<text>\nLet's see how it works:", "    local primes = {}\n    for i =\
    \ 2, #sentence do\n        local prime = true\n        for j = 2, #primes do\n\
    \            if sentence:sub(i, i+j) ~= ' ' then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 1, #primes do\n        local word = sentence:sub(1, primes[i])\n\
    \        table.insert(result, word)\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's see how it works:", "    local result = \"\"\n   \
    \ for w in string.gmatch(sentence, \"[^ ]+\") do\n        local n = math.floor(math.sqrt(#w))\n\
    \        if #w == n then\n            result = result .. w\n        else\n   \
    \         local m = math.floor(#w / n)\n            for i = 1, m do\n        \
    \        result = result .. w[i]\n            end\n        end\n    end\n    return\
    \ result\nend", "    local primes = {}\n    local prime_words = {}\n    for i\
    \ = 2, #sentence do\n        local prime = true\n        for j = 2, #primes do\n\
    \            if sentence[i] == primes[j] then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, sentence[i])\n            table.insert(prime_words,\
    \ sentence[i])\n        end\n    end\n    return table.concat(prime_words, ' ')\n\
    end", "    local primes = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if sentence:sub(i, i + j)\
    \ ~= sentence:sub(i - j, i) then\n                prime = false\n            \
    \    break\n            end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local result = {}\n    for i = 1, #primes do\n\
    \        table.insert(result, sentence:sub(i, i + primes[i]))\n    end\n    return\
    \ table.concat(result)\nend\n</cell>\n<text>\nLet's test your implementation on\
    \ the following sentences:", "    local primes = {}\n    for i = 2, #sentence\
    \ do\n        local prime = true\n        for j = 2, #primes do\n            if\
    \ sentence:sub(i, i + j) ~= sentence:sub(i - 1, i) then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        local word = sentence:sub(i, i + primes[i])\n\
    \        for j = 1, #primes do\n            if primes[j] == i + primes[j - 1]\
    \ then\n                word = word .. ' ' .. sentence:sub(i, i + primes[j])\n\
    \            end\n        end\n        table.insert(result, word)\n    end\n \
    \   return table.concat(result)\nend", "    local prime_numbers = {}\n    local\
    \ prime_numbers_count = 0\n    local prime_numbers_index = 0\n    local prime_numbers_last_index\
    \ = 0\n    local prime_numbers_last_index2 = 0\n    local prime_numbers_last_index3\
    \ = 0\n    local prime_numbers_last_index4 = 0\n    local prime_numbers_last_index5\
    \ = 0\n    local prime_numbers_last_index6 = 0\n    local prime_numbers_last_index7\
    \ = 0\n    local prime_numbers_last_index8 = 0\n    local prime_numbers_last_index9\
    \ = 0\n    local prime_numbers_last_index10 = 0\n    local prime_numbers_last_index11\
    \ = 0\n    local prime_numbers_last_index12 = 0\n    local prime_numbers_last_index13\
    \ = 0\n    local prime_numbers_last_index14 = 0\n    local prime_numbers_last_index15\
    \ = 0\n    local prime_numbers_last_index16 = 0\n    local prime_numbers_last_index17\
    \ = 0\n    local prime_numbers_last_index18 = 0\n    local prime_numbers_last_index19\
    \ = 0\n    local prime_numbers_last_index20 = 0\n    local prime_numbers_last_index21\
    \ = 0\n    local prime_numbers_last_index22 = 0\n    local prime_numbers_last_index23\
    \ = 0\n    local prime_numbers_last_index24 = 0\n    local prime_numbers_last_index25\
    \ = 0\n    local prime_numbers_last_index26 = 0\n    local prime_numbers_last_index27\
    \ = 0\n    local prime_numbers_last_index28 = 0\n    local prime_numbers_last_index29\
    \ = 0\n    local prime_numbers_last_index30 = 0\n    local prime_numbers_last_index31\
    \ = 0\n    local prime_numbers_last_index32 = 0\n    local prime_numbers_last_index33\
    \ = 0\n    local prime_numbers_last_index34 = 0\n    local prime_numbers_last_index35\
    \ = 0\n    local prime_numbers_last_index36 = 0\n    local prime_numbers_last_index37\
    \ = 0\n    local prime_numbers_last_index38 = 0\n    local prime_numbers_last_index39\
    \ = 0\n    local prime_numbers_last_index40 = 0\n    local prime_numbers_last_index41\
    \ = 0\n    local prime_numbers_last_index42 = 0\n    local prime_numbers_last_index43\
    \ = 0\n    local prime_numbers_last_index44 = 0\n    local prime_number", "  \
    \  local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if sentence:sub(i, i+j) ~= sentence:sub(i,\
    \ i+j) then\n                prime = false\n                break\n          \
    \  end\n        end\n        if prime then\n            table.insert(primes, i)\n\
    \        end\n    end\n    local result = \"\"\n    for i = 1, #primes do\n  \
    \      result = result .. sentence:sub(i, primes[i])\n    end\n    return result\n\
    end\n</cell>\n<text>\nLet's test our implementation:", "    local primes = {}\n\
    \    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_str = ''\n    local prime_words_index = 1\n    local\
    \ prime_words_index2 = 0\n    local prime_words_index3 = 0\n    local prime_words_index4\
    \ = 0\n    local prime_words_index5 = 0\n    local prime_words_index6 = 0\n  \
    \  local prime_words_index7 = 0\n    local prime_words_index8 = 0\n    local prime_words_index9\
    \ = 0\n    local prime_words_index10 = 0\n    local prime_words_index11 = 0\n\
    \    local prime_words_index12 = 0\n    local prime_words_index13 = 0\n    local\
    \ prime_words_index14 = 0\n    local prime_words_index15 = 0\n    local prime_words_index16\
    \ = 0\n    local prime_words_index17 = 0\n    local prime_words_index18 = 0\n\
    \    local prime_words_index19 = 0\n    local prime_words_index20 = 0\n    local\
    \ prime_words_index21 = 0\n    local prime_words_index22 = 0\n    local prime_words_index23\
    \ = 0\n    local prime_words_index24 = 0\n    local prime_words_index25 = 0\n\
    \    local prime_words_index26 = 0\n    local prime_words_index27 = 0\n    local\
    \ prime_words_index28 = 0\n    local prime_words_index29 = 0\n    local prime_words_index30\
    \ = 0\n    local prime_words_index31 = 0\n    local prime_words_index32 = 0\n\
    \    local prime_words_index33 = 0\n    local prime_words_index34 = 0\n    local\
    \ prime_words_index35 = 0\n    local prime_words_index36 = 0\n    local prime_words_index37\
    \ = 0\n    local prime_words_index38 = 0\n    local prime_words_index39 = 0\n\
    \    local prime_words_index40 = 0\n    local prime_words_index41 = 0\n    local\
    \ prime_words_index42 = 0\n    local prime_words_index43 = 0\n    local prime_words_index44\
    \ = 0\n    local prime_words_index45 = 0\n    local prime_words_index46 = 0\n\
    \    local prime_words_index47 = 0\n    local prime_words_index48 = 0\n    local\
    \ prime_words_index49 = 0\n    local prime_words_index50 = 0\n    local prime_words_index51\
    \ = 0\n    local prime_words_index52 = 0\n    local prime_words_index53 = 0\n",
  "    local primes = {}\n    local prime_words = {}\n    for i = 2, #sentence do\n\
    \        local prime = true\n        for j = 2, #primes do\n            if sentence:sub(i,\
    \ i+j) ~= primes[j] then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n            table.insert(prime_words, sentence:sub(i, i))\n        end\n\
    \    end\n    return table.concat(prime_words, \" \")\nend\n</cell>\n<text>\n\
    Let's test our implementation:", "    local primes = {}\n    for i = 2, 100 do\n\
    \        local prime = true\n        for _, letter in ipairs(sentence) do\n  \
    \          if i ~= math.floor(i/letter) then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for _, prime in ipairs(primes) do\n        for _, letter in ipairs(sentence)\
    \ do\n            if letter ~= letter then\n                table.insert(result,\
    \ letter)\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(result)\nend", "    local primes = {}\n    for i = 2, #sentence\
    \ do\n        local prime = true\n        for j = 2, #primes do\n            if\
    \ sentence:sub(i, i) == primes[j]:sub(1, 1) then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, sentence:sub(i, i))\n        end\n    end\n\
    \    return table.concat(primes, \" \")\nend\n</cell>\n<text>\nLet's test our\
    \ implementation:", "    local primes = {}\n    for i = 2, #sentence do\n    \
    \    local prime = true\n        for j = 2, #primes do\n            if i % primes[j]\
    \ == 0 then\n                prime = false\n                break\n          \
    \  end\n        end\n        if prime then\n            table.insert(primes, i)\n\
    \        end\n    end\n    local result = {}\n    for i = 1, #primes do\n    \
    \    table.insert(result, sentence:sub(1, primes[i]))\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's now see how to use this function in an exercise:",
  "    local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if sentence:sub(i, i+j) ~= sentence:sub(i-1,\
    \ i+j-1) then\n                prime = false\n                break\n        \
    \    end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local result = {}\n    for i = 1, #primes do\n\
    \        table.insert(result, sentence:sub(i, i+primes[i]))\n    end\n    return\
    \ table.concat(result)\nend\n</cell>\n<text>\nLet's test our implementation:",
  "    local primes = {}\n    local primes_count = 0\n    local primes_string = ''\n\
    \    local words = sentence:gmatch('([^ ]+)')\n    for _, word in pairs(words)\
    \ do\n        local prime = true\n        for i = 2, #primes do\n            if\
    \ primes[i] == #word:len() then\n                prime = false\n             \
    \   break\n            end\n        end\n        if prime then\n            primes[#primes\
    \ + 1] = #word\n            primes_count = #primes\n        end\n    end\n   \
    \ for i = 1, primes_count do\n        primes_string = primes_string .. ' ' ..\
    \ words[primes[i]:len() - 1]\n    end\n    return primes_string\nend\n</cell>\n\
    <text>\nLet's test our function", "    local result = {}\n    for word in string.gmatch(sentence,\
    \ '([^ ]+)')\n    do\n        local prime = true\n        for i = 2, #result\n\
    \        do\n            if #word == i then\n                prime = false\n \
    \           end\n        end\n        if prime then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return table.concat(result)\nend", "    local\
    \ prime_numbers = {}\n    local prime_numbers_length = {}\n    local prime_numbers_string\
    \ = ''\n    local prime_numbers_string_length = 0\n    local prime_numbers_string_length_string\
    \ = ''\n    local prime_numbers_string_length_string_prime = ''\n    local prime_numbers_string_length_string_prime_prime\
    \ = ''\n    local prime_numbers_string_length_string_prime_prime_prime = ''\n\
    \    local prime_numbers_string_length_string_prime_prime_prime_prime = ''\n \
    \   local prime_numbers_string_length_string_prime_prime_prime_prime_prime = ''\n\
    \    local prime_numbers_string_length_string_prime_prime_prime_prime_prime_prime\
    \ = ''\n    local prime_numbers_string_length_string_prime_prime_prime_prime_prime_prime\
    \ = ''\n    local prime_numbers_string_length_string_prime_prime_prime_prime_prime_prime_prime\
    \ = ''\n    local prime_numbers_string_length_string_prime_prime_prime_prime_prime_prime_prime\
    \ = ''\n    local prime_numbers_string_length_string_prime_prime_prime_prime_prime_prime_prime\
    \ = ''\n    local prime_numbers_string_length_string_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = ''\n    local prime_numbers_string_length_string_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = ''\n    local prime_numbers_string_length_string_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = ''\n    local prime_numbers_string_length_string_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = ''\n    local prime_numbers_string_length_string_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = ''\n    local prime_numbers_string_length_string_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = ''\n    local prime_numbers_string_length_string_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = ''\n    local prime_numbers_string_length_string_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = ''\n    local prime_numbers_string_length_string_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = ''\n    local prime_numbers_string_length_string_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = ''\n    local prime_numbers_", "    local primes = {}\n    local primes_count\
    \ = 0\n    local primes_string = ''\n    for i = 1, #sentence do\n        local\
    \ prime = true\n        for j = 1, #primes do\n            if sentence[i] == primes[j]\
    \ then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            primes[primes_count] = sentence[i]\n\
    \            primes_count = primes_count + 1\n        end\n    end\n    for i\
    \ = 1, primes_count do\n        primes_string = primes_string .. ' ' .. primes[i]\n\
    \    end\n    return primes_string\nend\n</cell>\n<text>\nLet's see how it works:",
  "    local primes = {}\n    local prime_words = {}\n    local prime_words_len =\
    \ {}\n    local prime_words_order = {}\n    local i = 0\n    local j = 0\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime", "    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if sentence:sub(i, i + j) ~= sentence:sub(i - j,\
    \ i) then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(primes, i)\n   \
    \     end\n    end\n    local result = {}\n    for i = 1, #primes do\n       \
    \ table.insert(result, sentence:sub(i, i + primes[i]))\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's see how it works:", "    local primes = {}\n    for\
    \ i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ \"\"\n    for i = 1, #primes do\n        local word = sentence:sub(1, primes[i])\n\
    \        local rest = sentence:sub(primes[i] + 1)\n        result = result ..\
    \ word .. rest\n    end\n    return result\nend\n</cell>\n<text>\nLet's test our\
    \ implementation:", "    local primes = {}\n    local prime_words = {}\n    local\
    \ prime_words_len = {}\n    local words = sentence:gsub('[^ ]+', ' ', 'g'):gsub('\
    \ ', '', 'g'):gsub('%a+', '')\n    for i = 1, #words do\n        local prime =\
    \ true\n        for j = 1, #primes do\n            if words[i] == primes[j] then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, words[i])\n \
    \           table.insert(prime_words, words[i])\n            table.insert(prime_words_len,\
    \ 1)\n        else\n            local prime_words_len = prime_words_len + 1\n\
    \            for j = 1, #primes do\n                if primes[j] == words[i] then\n\
    \                    table.insert(prime_words, primes[j])\n                  \
    \  break\n                end\n            end\n        end\n    end\n    return\
    \ table.concat(prime_words, ' ')\nend\n</cell>\n<text>\nLet's now see how to use\
    \ this function in an interactive session:", "    local primes = {}\n    for i\
    \ = 2, #sentence do\n        local prime = true\n        for j = 2, #primes do\n\
    \            if i % primes[j] == 0 then\n                prime = false\n     \
    \           break\n            end\n        end\n        if prime then\n     \
    \       table.insert(primes, i)\n        end\n    end\n    local result = \"\"\
    \n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result\nend", "    local primes = {}\n    for\
    \ i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 1, #primes do\n        local word = sentence:sub(1, primes[i]:byte())\n\
    \        table.insert(result, word)\n    end\n    return table.concat(result)\n\
    end", "    local primes = {}\n    for i = 2, 100 do\n        local prime = true\n\
    \        for _, word in ipairs(split(sentence)) do\n            if i ~= tonumber(word)\
    \ then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(primes, i)\n   \
    \     end\n    end\n    local result = {}\n    for _, word in ipairs(split(sentence))\
    \ do\n        table.insert(result, word)\n    end\n    return table.concat(primes,\
    \ \" \")\nend", "    local primes = {}\n    for i = 2, #sentence do\n        local\
    \ prime = true\n        for j = 2, #primes do\n            if i % primes[j] ==\
    \ 0 then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(primes, i)\n   \
    \     end\n    end\n    local result = {}\n    for i = 1, #primes do\n       \
    \ table.insert(result, sentence:sub(1, primes[i]))\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's see how it works:", "    local primes = {}\n    for\
    \ i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]:sub(1)))\n    end\n    return table.concat(result)\nend\n</cell>\n\
    <text>\nLet's test our implementation:", "    local primes = {}\n    for i = 2,\
    \ 100 do\n        local prime = true\n        for j = 2, #sentence do\n      \
    \      if sentence:sub(i, j) ~= ' ' then\n                prime = false\n    \
    \            break\n            end\n        end\n        if prime then\n    \
    \        table.insert(primes, i)\n        end\n    end\n    local result = {}\n\
    \    for i = 1, #primes do\n        local prime = primes[i]\n        for j = 1,\
    \ #sentence do\n            if sentence:sub(i, j) ~= ' ' then\n              \
    \  local new_word = sentence:sub(i, j)\n                for k = 1, prime do\n\
    \                    new_word = new_word .. ' ' .. sentence:sub(i, j)\n      \
    \          end\n                table.insert(result, new_word)\n             \
    \   break\n            end\n        end\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's test our implementation:", "    local primes = {}\n\
    \    for i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if sentence:sub(i, i + j) ~= sentence:sub(i - j, i - 1) then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    return table.concat(primes, \" \")\nend", "    local primes = {}\n\
    \    for i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if sentence[i] == primes[j] then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, sentence[i])\n        end\n    end\n    local\
    \ result = {}\n    for i = 1, #primes do\n        table.insert(result, primes[i])\n\
    \    end\n    return table.concat(result)\nend\n</cell>\n<text>\nLet's test our\
    \ function", "  local words = sentence:gmatch('([^ ]+)')\n  local prime_words\
    \ = {}\n  for i = 2, #words do\n    local prime = true\n    for j = 2, #prime_words\
    \ do\n      if prime_words[j] ~= words[i] then\n        prime = false\n      \
    \  break\n      end\n    end\n    if prime then\n      table.insert(prime_words,\
    \ words[i])\n    end\n  end\n  return table.concat(prime_words)\nend\n</cell>\n\
    <text>\nLet's test our implementation:", "    local primes = {}\n    for i = 2,\
    \ #sentence do\n        local prime = true\n        for j = 2, #primes do\n  \
    \          if sentence[i] == primes[j] then\n                prime = false\n \
    \               break\n            end\n        end\n        if prime then\n \
    \           table.insert(primes, sentence[i])\n        end\n    end\n    return\
    \ table.concat(primes, \" \")\nend", "    local primes = {}\n    for i = 2, #sentence\
    \ do\n        local prime = true\n        for j = 2, #primes do\n            if\
    \ sentence:sub(i, i+j) ~= sentence:sub(i-1, i+j) then\n                prime =\
    \ false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(i,\
    \ i+primes[i]))\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\n\
    Let's test your implementation", "  local primes = {}\n  for i = 2, #sentence\
    \ do\n    local prime = true\n    for j = 2, #primes do\n      if i % primes[j]\
    \ == 0 then\n        prime = false\n        break\n      end\n    end\n    if\
    \ prime then\n      table.insert(primes, i)\n    end\n  end\n  local result =\
    \ \"\"\n  for i = 1, #primes do\n    result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n  end\n  return result\nend", "    local primes = {}\n    for i\
    \ = 2, #sentence do\n        local prime = true\n        for j = 2, #primes do\n\
    \            if i % primes[j] == 0 then\n                prime = false\n     \
    \           break\n            end\n        end\n        if prime then\n     \
    \       table.insert(primes, i)\n        end\n    end\n    local result = \"\"\
    \n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result\nend\n</cell>\n<text>\nLet's test our\
    \ implementation:", "    local primes = {}\n    local primes_count = 0\n    local\
    \ primes_length = 0\n    local primes_string = ''\n    for i = 1, #sentence do\n\
    \        local char = sentence[i]\n        if char == ' ' then\n            primes_count\
    \ = primes_count + 1\n            primes_length = primes_length + 1\n        \
    \    if primes_count == primes_length then\n                primes[#primes + 1]\
    \ = i\n                primes_string = '' -- clear string\n            end\n \
    \       else\n            primes_string = primes_string .. char\n        end\n\
    \    end\n    local result = {}\n    for i = 1, #primes do\n        local prime\
    \ = primes[i]\n        local prime_length = #primes_string\n        for j = 1,\
    \ prime_length do\n            local char = primes_string[j]\n            if char\
    \ == ' ' then\n                primes_count = primes_count + 1\n             \
    \   if primes_count == prime_length then\n                    result[#result +\
    \ 1] = prime\n                end\n            end\n        end\n    end\n   \
    \ return table.concat(result)\nend\n</cell>\n<text>\nLet's test our implementation:",
  "    local primes = {}\n    local primes_count = 0\n    local primes_index = {}\n\
    \    local primes_index_count = 0\n    local primes_string = ''\n    local primes_string_count\
    \ = 0\n    local primes_string_count_index = 0\n    local primes_string_count_index2\
    \ = 0\n    local primes_string_count_index3 = 0\n    local primes_string_count_index4\
    \ = 0\n    local primes_string_count_index5 = 0\n    local primes_string_count_index6\
    \ = 0\n    local primes_string_count_index7 = 0\n    local primes_string_count_index8\
    \ = 0\n    local primes_string_count_index9 = 0\n    local primes_string_count_index10\
    \ = 0\n    local primes_string_count_index11 = 0\n    local primes_string_count_index12\
    \ = 0\n    local primes_string_count_index13 = 0\n    local primes_string_count_index14\
    \ = 0\n    local primes_string_count_index15 = 0\n    local primes_string_count_index16\
    \ = 0\n    local primes_string_count_index17 = 0\n    local primes_string_count_index18\
    \ = 0\n    local primes_string_count_index19 = 0\n    local primes_string_count_index20\
    \ = 0\n    local primes_string_count_index21 = 0\n    local primes_string_count_index22\
    \ = 0\n    local primes_string_count_index23 = 0\n    local primes_string_count_index24\
    \ = 0\n    local primes_string_count_index25 = 0\n    local primes_string_count_index26\
    \ = 0\n    local primes_string_count_index27 = 0\n    local primes_string_count_index28\
    \ = 0\n    local primes_string_count_index29 = 0\n    local primes_string_count_index30\
    \ = 0\n    local primes_string_count_index31 = 0\n    local primes_string_count_index32\
    \ = 0\n    local primes_string_count_index33 = 0\n    local primes_string_count_index34\
    \ = 0\n    local primes_string_count_index35 = 0\n    local primes_string_count_index36\
    \ = 0\n    local primes_string_count_index37 = 0\n    local primes_string_count_index38\
    \ = 0\n    local primes_string_count_index39 = 0\n    local primes_string_count_index40\
    \ = 0\n    local primes_string_count_index41 = 0\n    local primes_string_count_index42\
    \ = 0\n    local primes_string_count_index43 = 0\n    local primes_string_count_index44\
    \ = 0\n    local primes_string_count_index45 = 0\n    local primes_string_count_index46\
    \ = 0\n    local primes_string_count_index47 = 0\n    local prime", "    local\
    \ result = {}\n    for word in string.gmatch(sentence, \"([^ ]+)\")\n    do\n\
    \        local prime = true\n        for i = 2, #result do\n            if result[i]\
    \ ~= math.floor(word:len() / i) then\n                prime = false\n        \
    \        break\n            end\n        end\n        if prime then\n        \
    \    table.insert(result, word)\n        end\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's test our implementation:", "    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #prime_words do\n            if sentence[i] == prime_words[j] then\n  \
    \              prime = false\n                break\n            end\n       \
    \ end\n        if prime then\n            table.insert(prime_words, sentence[i])\n\
    \        end\n    end\n    return table.concat(prime_words, \" \")\nend", "  \
    \  local primes = {}\n    local primes_count = 0\n    for i = 2, #sentence do\n\
    \        local prime = true\n        for j = 2, #primes do\n            if sentence[i]\
    \ == primes[j] then\n                prime = false\n                break\n  \
    \          end\n        end\n        if prime then\n            table.insert(primes,\
    \ sentence[i])\n            primes_count = primes_count+1\n        end\n    end\n\
    \    local result = \"\"\n    for i = 1, #primes_count do\n        result = result\
    \ .. \" \" .. primes[i]\n    end\n    return result\nend", "    local prime_numbers\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #prime_numbers do\n            if i % prime_numbers[j] == 0 then\n    \
    \            prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(prime_numbers, i)\n        end\n\
    \    end\n    local result = {}\n    for i = 1, #prime_numbers do\n        local\
    \ word = sentence:sub(1, prime_numbers[i])\n        table.insert(result, word)\n\
    \    end\n    return table.concat(result)\nend", "    local primes = {}\n    local\
    \ prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 1, #primes do\n            if sentence[i] == primes[j] then\n            \
    \    prime = false\n                break\n            end\n        end\n    \
    \    if prime then\n            table.insert(primes, sentence[i])\n          \
    \  table.insert(prime_words, sentence[i])\n            table.insert(prime_words_len,\
    \ 1)\n            table.insert(prime_words_order, i)\n        end\n    end\n \
    \   for i = 2, #primes do\n        for j = 1, #prime_words do\n            if\
    \ primes[j] == primes[i] then\n                prime_words_len[prime_words_len[1]]\
    \ = prime_words_len[prime_words_len[1]] + 1\n                prime_words_order[prime_words_order[1]]\
    \ = i\n                break\n            end\n        end\n    end\n    local\
    \ new_sentence = sentence\n    for i = 1, #prime_words_len do\n        new_sentence\
    \ = new_sentence:sub(1, prime_words_len[i]):sub(1, #new_sentence)\n    end\n \
    \   for i = 1, #prime_words_order do\n        new_sentence = new_sentence:sub(1,\
    \ prime_words_order[i]):sub(1, #new_sentence)\n    end\n    return new_sentence\n\
    end\n</cell>\n<text>\nLet's test our implementation:", "    local primes = {}\n\
    \    for i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]))\n    end\n    return table.concat(result)\nend", "    local prime_numbers\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #prime_numbers do\n            if i % prime_numbers[j] == 0 then\n    \
    \            prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(prime_numbers, i)\n        end\n\
    \    end\n    local result = {}\n    for i = 1, #prime_numbers do\n        table.insert(result,\
    \ sentence:sub(1, prime_numbers[i]:sub(1)))\n    end\n    return table.concat(result)\n\
    end", "    local primes = {}\n    local prime_words = {}\n    for i = 2, #sentence\
    \ do\n        local prime = true\n        for j = 2, #primes do\n            if\
    \ sentence:sub(i, i+j) == primes[j] then\n                prime = false\n    \
    \            break\n            end\n        end\n        if prime then\n    \
    \        table.insert(primes, i)\n            table.insert(prime_words, sentence:sub(i,\
    \ i))\n        end\n    end\n    return table.concat(prime_words, \" \")\nend",
  "    local primes = {}\n    local prime_words = {}\n    local prime_words_len =\
    \ {}\n    local prime_words_order = {}\n    local prime_words_str = {}\n    local\
    \ prime_words_str2 = {}\n    local prime_words_str3 = {}\n    local prime_words_str4\
    \ = {}\n    local prime_words_str5 = {}\n    local prime_words_str6 = {}\n   \
    \ local prime_words_str7 = {}\n    local prime_words_str8 = {}\n    local prime_words_str9\
    \ = {}\n    local prime_words_str10 = {}\n    local prime_words_str11 = {}\n \
    \   local prime_words_str12 = {}\n    local prime_words_str13 = {}\n    local\
    \ prime_words_str14 = {}\n    local prime_words_str15 = {}\n    local prime_words_str16\
    \ = {}\n    local prime_words_str17 = {}\n    local prime_words_str18 = {}\n \
    \   local prime_words_str19 = {}\n    local prime_words_str20 = {}\n    local\
    \ prime_words_str21 = {}\n    local prime_words_str22 = {}\n    local prime_words_str23\
    \ = {}\n    local prime_words_str24 = {}\n    local prime_words_str25 = {}\n \
    \   local prime_words_str26 = {}\n    local prime_words_str27 = {}\n    local\
    \ prime_words_str28 = {}\n    local prime_words_str29 = {}\n    local prime_words_str30\
    \ = {}\n    local prime_words_str31 = {}\n    local prime_words_str32 = {}\n \
    \   local prime_words_str33 = {}\n    local prime_words_str34 = {}\n    local\
    \ prime_words_str35 = {}\n    local prime_words_str36 = {}\n    local prime_words_str37\
    \ = {}\n    local prime_words_str38 = {}\n    local prime_words_str39 = {}\n \
    \   local prime_words_str40 = {}\n    local prime_words_str41 = {}\n    local\
    \ prime_words_str42 = {}\n    local prime_words_str43 = {}\n    local prime_words_str44\
    \ = {}\n    local prime_words_str45 = {}\n    local prime_words_str46 = {}\n \
    \   local prime_words_str47 = {}\n    local prime_words_str48 = {}\n    local\
    \ prime_words_str49 = {}\n    local prime_words_str50 = {}\n    local prime_words_str51\
    \ = {}\n    local prime_words_str52 = {}\n    local prime_words_str53 = {}", " \
    \   local primes = {}\n    local primes_count = 0\n    local primes_length = 1\n\
    \    local primes_index = 1\n    local primes_string = ''\n    local primes_string_length\
    \ = 1\n    local primes_string_index = 1\n    local primes_string_prime = ''\n\
    \    local primes_string_prime_index = 1\n    local primes_string_prime_length\
    \ = 1\n    local primes_string_prime_prime = ''\n    local primes_string_prime_prime_index\
    \ = 1\n    local primes_string_prime_prime_length = 1\n    local primes_string_prime_prime_prime\
    \ = ''\n    local primes_string_prime_prime_prime_index = 1\n    local primes_string_prime_prime_prime_length\
    \ = 1\n    local primes_string_prime_prime_prime_prime = ''\n    local primes_string_prime_prime_prime_prime_index\
    \ = 1\n    local primes_string_prime_prime_prime_prime_length = 1\n    local primes_string_prime_prime_prime_prime_prime\
    \ = ''\n    local primes_string_prime_prime_prime_prime_prime_index = 1\n    local\
    \ primes_string_prime_prime_prime_prime_prime_length = 1\n    local primes_string_prime_prime_prime_prime_prime_prime\
    \ = ''\n    local primes_string_prime_prime_prime_prime_prime_prime_index = 1\n\
    \    local primes_string_prime_prime_prime_prime_prime_prime_length = 1\n    local\
    \ primes_string_prime_prime_prime_prime_prime_prime_prime = ''\n    local primes_string_prime_prime_prime_prime_prime_prime_prime_index\
    \ = 1\n    local primes_string_prime_prime_prime_prime_prime_prime_prime_length\
    \ = 1\n    local primes_string_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = ''\n    local primes_string_prime_prime_prime_prime_prime_prime_prime_prime_index\
    \ = 1\n    local primes_string_prime_prime_prime_prime_prime_prime_prime_prime_length\
    \ = 1\n    local primes_string_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = ''\n    local primes_string_prime_prime_prime_prime_prime_prime_prime_prime_prime_index\
    \ = 1\n    local primes_string_prime_prime_prime_prime_prime_prime_prime_prime_prime_length\
    \ = 1\n    local primes_string_", "    local result = {}\n    for w in string.gmatch(sentence,\
    \ \"%S+\") do\n        local prime = true\n        for i = 2, #result do\n   \
    \         if string.len(result[i]) > string.len(w) then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(result, w)\n        end\n    end\n    return\
    \ table.concat(result)\nend", "    local primes = {}\n    for i = 2, #sentence\
    \ do\n        local prime = true\n        for j = 2, #primes do\n            if\
    \ sentence:sub(i, i) == primes[j]:sub(i - 1, i) then\n                prime =\
    \ false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, sentence:sub(i, i))\n        end\n  \
    \  end\n    local result = {}\n    for i = 1, #primes do\n        table.insert(result,\
    \ primes[i])\n    end\n    return table.concat(result)\nend", "  local primes\
    \ = {}\n  for i = 2, #sentence do\n    local prime = true\n    for j = 2, #primes\
    \ do\n      if i % primes[j] == 0 then\n        prime = false\n        break\n\
    \      end\n    end\n    if prime then\n      table.insert(primes, i)\n    end\n\
    \  end\n  local result = {}\n  for i = 1, #primes do\n    table.insert(result,\
    \ sentence:sub(1, primes[i]))\n  end\n  return table.concat(result)\nend\n</cell>\n\
    <text>\nLet's test our implementation:", "    local primes = {}\n    local prime_words\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_", "    local primes = {}\n    for i = 2, #sentence do\n       \
    \ local prime = true\n        for j = 2, #primes do\n            if sentence:sub(i,\
    \ i) == primes[j] then\n                prime = false\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local result = \"\"\n    for i = 1, #primes do\n        result =\
    \ result .. sentence:sub(i, i)\n    end\n    return result\nend", "    local prime_numbers\
    \ = {}\n    for i = 2, 100 do\n        prime_numbers[i] = true\n    end\n    local\
    \ prime_numbers_index = 1\n    local prime_numbers_index_max = 100\n    while\
    \ prime_numbers_index < prime_numbers_index_max do\n        local prime_numbers_index_temp\
    \ = prime_numbers_index\n        local prime_numbers_index_temp2 = prime_numbers_index\n\
    \        for i = prime_numbers_index, prime_numbers_index_max do\n           \
    \ if prime_numbers[i] == true then\n                prime_numbers_index = prime_numbers_index_temp\n\
    \                prime_numbers_index_temp2 = prime_numbers_index_temp\n      \
    \      end\n        end\n        if prime_numbers_index_temp2 == prime_numbers_index\
    \ then\n            prime_numbers[prime_numbers_index] = false\n            prime_numbers_index\
    \ = prime_numbers_index_temp\n        end\n    end\n    local result = \"\"\n\
    \    for i = 1, #sentence do\n        if prime_numbers[#prime_numbers + 1] ==\
    \ true then\n            result = result .. sentence[i]\n        end\n    end\n\
    \    return result\nend\n</cell>\n<text>\nLet's test your implementation on the\
    \ following sentences:", "    local result = {}\n    for w in string.gmatch(sentence,\
    \ '([^ ]+)')\n    do\n        local prime = true\n        for i = 2, #result\n\
    \        do\n            if string.len(result[i]) > string.len(w) then\n     \
    \           prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(result, w)\n        end\n   \
    \ end\n    return table.concat(result)\nend", "    local primes = {}\n    local\
    \ prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    for i = 1, #sentence do\n        local word = sentence:sub(i, i)\n\
    \        if prime_words[word] == nil then\n            prime_words[word] = true\n\
    \            prime_words_len[#prime_words + 1] = #word\n            prime_words_order[#prime_words_order\
    \ + 1] = word\n        end\n    end\n    for i = 2, #prime_words_len do\n    \
    \    if prime_words_len[i] ~= prime_words_len[i - 1] then\n            local prime_words_copy\
    \ = prime_words_order:copy()\n            for j = 1, #prime_words_copy do\n  \
    \              local prime_word = prime_words_copy[j]\n                for k =\
    \ 1, #prime_words_copy do\n                    if prime_words_copy[k] == prime_word\
    \ then\n                        prime_words_copy[k] = nil\n                  \
    \  end\n                end\n            end\n            prime_words_len = prime_words_copy\n\
    \        end\n    end\n    for i = 1, #prime_words do\n        if prime_words[i]\
    \ == nil then\n            primes[i] = false\n        end\n    end\n    local\
    \ result = \"\"\n    for i = 1, #prime_words do\n        if primes[i] then\n \
    \           result = result .. prime_words_order[i]\n        end\n    end\n  \
    \  return result\nend\n</cell>\n<text>\nLet's test our implementation:", "   \
    \ local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if sentence:sub(i, i+j) ~= ' ' then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local result = {}\n    for i = 1, #primes do\n        table.insert(result,\
    \ sentence:sub(1, primes[i]))\n    end\n    return table.concat(result)\nend\n\
    </cell>\n<text>\nLet's test our implementation:", "    local primes = {}\n   \
    \ local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_", "    local prime_words = {}\n    for i = 2, #sentence\
    \ do\n        local prime_word = sentence:sub(i,i)\n        if prime_word:len()\
    \ == prime_word:len() then\n            table.insert(prime_words, prime_word)\n\
    \        end\n    end\n    return table.concat(prime_words, \" \")\nend", "  \
    \  local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if sentence:sub(i, i + j) ~= sentence:sub(i\
    \ - j, i) then\n                prime = false\n                break\n       \
    \     end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local result = {}\n    for i = 1, #primes do\n\
    \        table.insert(result, sentence:sub(i, i + primes[i]))\n    end\n    return\
    \ table.concat(result)\nend\n</cell>\n<text>\nLet's test our implementation:",
  "    local primes = {}\n    local prime_words = {}\n    local prime_words_len =\
    \ {}\n    local prime_words_order = {}\n    for i = 1, #sentence do\n        local\
    \ word = sentence:sub(i,i)\n        local prime_word = word:gsub('%w+', function(x)\n\
    \            local prime_len = #x\n            if prime_words[prime_len] == nil\
    \ then\n                prime_words[prime_len] = x\n                prime_words_len[prime_len]\
    \ = prime_len\n                prime_words_order[prime_len] = i\n            end\n\
    \            return x\n        end)\n        primes[#primes + 1] = prime_word\n\
    \    end\n    local result = {}\n    for i = 1, #primes do\n        local prime\
    \ = primes[i]\n        local prime_len = prime_words_len[i]\n        local prime_order\
    \ = prime_words_order[i]\n        for j = 1, prime_len do\n            local word\
    \ = sentence:sub(prime_order,prime_order)\n            local prime_word = prime:sub(1,prime_len)\n\
    \            local index = #result + 1\n            result[index] = word\n   \
    \         prime_word = prime_word:sub(1,prime_len)\n            prime_words_len[index]\
    \ = prime_len\n            prime_words_order[index] = prime_order\n        end\n\
    \    end\n    return table.concat(result)\nend\n</cell>\n<text>\nLet's test our\
    \ function", "    local primes = {}\n    for i = 2, #sentence do\n        local\
    \ prime = true\n        for j = 2, #primes do\n            if sentence[i] == primes[j]\
    \ then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(primes, sentence[i])\n\
    \        end\n    end\n    return table.concat(primes, \" \")\nend", "    local\
    \ primes = {}\n    for i = 2, #sentence do\n        local prime = true\n     \
    \   for j = 2, #primes do\n            if i % primes[j] == 0 then\n          \
    \      prime = false\n                break\n            end\n        end\n  \
    \      if prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for i = 1, #primes do\n        local word = sentence:sub(1,\
    \ primes[i])\n        table.insert(result, word)\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's now see how to use this function in an exercise!",
  "    local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if sentence:sub(i, i + j) ~= sentence:sub(i\
    \ - 1, i + j) then\n                prime = false\n                break\n   \
    \         end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local result = {}\n    for i = 1, #primes do\n\
    \        table.insert(result, sentence:sub(1, primes[i]))\n    end\n    return\
    \ table.concat(result)\nend\n</cell>\n<text>\nLet's see how it works:", "    local\
    \ prime_words = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #prime_words do\n            if sentence[i] == prime_words[j]\
    \ then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(prime_words, sentence[i])\n\
    \        end\n    end\n    return table.concat(prime_words, \" \")\nend", "  \
    \  local primes = {}\n    local primes_count = 0\n    for i = 1, #sentence do\n\
    \        local prime = true\n        for j = 2, #primes do\n            if primes[j]\
    \ and sentence[i] == primes[j] then\n                prime = false\n         \
    \       break\n            end\n        end\n        if prime then\n         \
    \   primes[#primes + 1] = sentence[i]\n            primes_count = #primes\n  \
    \      end\n    end\n    return primes[primes_count]\nend", "    local primes\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #primes do\n            if sentence:sub(i, i+j) ~= sentence:sub(i-1, i+j-1)\
    \ then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(primes, i)\n   \
    \     end\n    end\n    local result = \"\"\n    for i = 1, #primes do\n     \
    \   result = result .. sentence:sub(i, primes[i])\n    end\n    return result\n\
    end", "    local primes = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if i ~= primes[j] then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local result = {}\n    for i = 1, #primes do\n        table.insert(result,\
    \ sentence:sub(1, primes[i]))\n    end\n    return table.concat(result)\nend",
  "    local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if i % primes[j] == 0 then\n     \
    \           prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(primes, i)\n        end\n   \
    \ end\n    local result = {}\n    for i = 1, #primes do\n        local word =\
    \ sentence:sub(1, primes[i]:len() - 1)\n        table.insert(result, word)\n \
    \   end\n    return table.concat(result)\nend\n</cell>\n<text>\nLet's see how\
    \ it works:", "    local primes = {}\n    for i = 2, #sentence do\n        local\
    \ prime = true\n        for j = 2, #primes do\n            if i % primes[j] ==\
    \ 0 then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(primes, i)\n   \
    \     end\n    end\n    local result = {}\n    for i = 1, #primes do\n       \
    \ table.insert(result, sentence:sub(1, primes[i]:tostring()))\n    end\n    return\
    \ table.concat(result)\nend\n</cell>\n<text>\nLet's test our implementation:",
  "    local primes = {}\n    local prime_words = {}\n    for i = 2, #sentence do\n\
    \        local prime = true\n        for j = 2, #primes do\n            if sentence[i]\
    \ == primes[j] then\n                prime = false\n                break\n  \
    \          end\n        end\n        if prime then\n            table.insert(primes,\
    \ sentence[i])\n            table.insert(prime_words, sentence[i])\n        end\n\
    \    end\n    return table.concat(prime_words, \" \")\nend", "    local prime_numbers\
    \ = {}\n    local prime_numbers_count = 0\n    local prime_numbers_index = 0\n\
    \    local prime_numbers_index_count = 0\n    local prime_numbers_index_count_2\
    \ = 0\n    local prime_numbers_index_count_3 = 0\n    local prime_numbers_index_count_4\
    \ = 0\n    local prime_numbers_index_count_5 = 0\n    local prime_numbers_index_count_6\
    \ = 0\n    local prime_numbers_index_count_7 = 0\n    local prime_numbers_index_count_8\
    \ = 0\n    local prime_numbers_index_count_9 = 0\n    local prime_numbers_index_count_10\
    \ = 0\n    local prime_numbers_index_count_11 = 0\n    local prime_numbers_index_count_12\
    \ = 0\n    local prime_numbers_index_count_13 = 0\n    local prime_numbers_index_count_14\
    \ = 0\n    local prime_numbers_index_count_15 = 0\n    local prime_numbers_index_count_16\
    \ = 0\n    local prime_numbers_index_count_17 = 0\n    local prime_numbers_index_count_18\
    \ = 0\n    local prime_numbers_index_count_19 = 0\n    local prime_numbers_index_count_20\
    \ = 0\n    local prime_numbers_index_count_21 = 0\n    local prime_numbers_index_count_22\
    \ = 0\n    local prime_numbers_index_count_23 = 0\n    local prime_numbers_index_count_24\
    \ = 0\n    local prime_numbers_index_count_25 = 0\n    local prime_numbers_index_count_26\
    \ = 0\n    local prime_numbers_index_count_27 = 0\n    local prime_numbers_index_count_28\
    \ = 0\n    local prime_numbers_index_count_29 = 0\n    local prime_numbers_index_count_30\
    \ = 0\n    local prime_numbers_index_count_31 = 0\n    local prime_numbers_index_count_32\
    \ = 0\n    local prime_numbers_index_count_33 = 0\n    local prime_numbers_index_count_34\
    \ = 0\n    local prime_numbers_index_count_35 = 0\n    local prime_numbers_index_count_36\
    \ = 0\n    local prime_numbers_index_count_37 = 0\n    local prime_numbers_index_count_38\
    \ = 0\n    local prime_numbers_index_count_39 = 0\n    local prime_numbers_index_count_40\
    \ = 0\n    local prime_numbers_index_count_41 = 0\n    local prime_numbers_index_count_42\
    \ = 0\n    local prime_numbers_index_count_43 = 0\n    local prime_numbers_index_count_44\
    \ = 0\n    local prime_numbers_", "  local prime_words = {}\n  local prime_words_len\
    \ = {}\n  local prime_words_order = {}\n  local prime_words_str = ''\n  local\
    \ prime_words_len_index = 1\n  local prime_words_order_index = 1\n  for word in\
    \ string.gmatch(sentence, '([^ ]+) ') do\n    local prime_words_len = #word\n\
    \    local prime_words_order = #prime_words_str\n    if prime_words_len > 1 then\n\
    \      local prime_words_str = prime_words_str .. ' ' .. word\n      local prime_words_len_index\
    \ = prime_words_len_index + 1\n      local prime_words_order_index = prime_words_order_index\
    \ + 1\n    end\n    if prime_words_len == 1 then\n      prime_words[prime_words_len_index]\
    \ = word\n      prime_words_len[prime_words_len_index] = prime_words_len\n   \
    \   prime_words_order[prime_words_order_index] = prime_words_order\n    end\n\
    \  end\n  local prime_words_len = prime_words_len[1]\n  local prime_words_order\
    \ = prime_words_order[1]\n  for i = 2, prime_words_len do\n    if prime_words_len\
    \ % i == 0 then\n      local prime_words_str = prime_words_str .. ' ' .. prime_words[i]\n\
    \      local prime_words_len_index = prime_words_len_index + 1\n      local prime_words_order_index\
    \ = prime_words_order_index + 1\n    end\n  end\n  local prime_words_len = prime_words_len[1]\n\
    \  local prime_words_order = prime_words_order[1]\n  for i = 2, prime_words_len\
    \ do\n    if prime_words_len % i == 0 then\n      prime_words[prime_words_len_index]\
    \ = prime_words[i]\n      prime_words_len[prime_words_len_index] = prime_words_len\n\
    \      prime_words_order[prime_words_order_index] = prime_words_order\n    end\n\
    \  end\n  local prime_words_str = prime_words_str\n  local prime_words_len_index\
    \ = prime_words_len_index - 1\n  local prime_words_order_index = prime_words_order_index\
    \ - 1\n  local prime_words_len = prime_words_len[prime_words_len_index]\n  local\
    \ prime_words_order = prime_words_order[prime_words_order_index]\n  for i = 1,\
    \ prime_words_len do\n    prime_words_str = prime_words_str .. ' ' .. prime_words[prime_words_len_index\
    \ + i]\n    prime_words_len_index = prime_words_len_index + 1\n    prime_", " \
    \   local primes = {}\n    local primes_count = 0\n    local primes_string = ''\n\
    \    local words = sentence:gmatch('([^ ]+)')\n    for _, word in pairs(words)\
    \ do\n        local prime = true\n        for i = 2, #primes do\n            if\
    \ primes[i] == #word then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            primes[#primes\
    \ + 1] = #word\n            primes_count = #primes\n        end\n    end\n   \
    \ for i = 1, primes_count do\n        primes_string = primes_string .. ' ' ..\
    \ primes[i]\n    end\n    return primes_string\nend\n</cell>\n<text>\nLet's test\
    \ our implementation:", "    local primes = {}\n    local primes_count = 0\n \
    \   local primes_string = ''\n    local words = sentence:gmatch('[^ ]+')\n   \
    \ for _, word in pairs(words) do\n        local prime = true\n        for i =\
    \ 2, #primes do\n            if primes[i] == #word:len() then\n              \
    \  prime = false\n                break\n            end\n        end\n      \
    \  if prime then\n            primes[#primes + 1] = #word:len()\n            primes_count\
    \ = #primes\n            primes_string = primes_string .. ' ' .. word\n      \
    \  end\n    end\n    return primes_string\nend", "    local primes = {}\n    local\
    \ primes_count = 0\n    local primes_string = ''\n    for i = 1, #sentence do\n\
    \        local letter = sentence[i]\n        if letter:byte() == 1 then\n    \
    \        primes[#primes + 1] = 1\n            primes_count = primes_count + 1\n\
    \        end\n    end\n    for i = 1, #primes do\n        if primes[i] == 1 then\n\
    \            primes_string = primes_string .. ' ' .. tostring(i)\n        end\n\
    \    end\n    return primes_string\nend\n</cell>\n<text>\nLet's test our implementation:",
  "    local prime_numbers = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #prime_numbers do\n            if i % prime_numbers[j]\
    \ == 0 then\n                prime = false\n                break\n          \
    \  end\n        end\n        if prime then\n            table.insert(prime_numbers,\
    \ i)\n        end\n    end\n    local result = {}\n    for i = 2, #prime_numbers\
    \ do\n        local prime_number = prime_numbers[i]\n        for j = 2, #sentence\
    \ do\n            if sentence:sub(i, i + 1) ~= ' ' then\n                local\
    \ word = sentence:sub(i, i + 1)\n                if word:len() == prime_number\
    \ then\n                    table.insert(result, word)\n                end\n\
    \            end\n        end\n    end\n    return table.concat(result)\nend\n\
    </cell>\n<text>\nLet's test your implementation on the following sentences:",
  "    local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if i % primes[j] == 0 then\n     \
    \           prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(primes, i)\n        end\n   \
    \ end\n    local result = {}\n    for i = 1, #primes do\n        local word =\
    \ sentence:sub(1, primes[i])\n        table.insert(result, word)\n    end\n  \
    \  return table.concat(result)\nend\n</cell>\n<text>\nLet's test our implementation:",
  "    local primes = {}\n    local prime_words = {}\n    for i = 2, #sentence do\n\
    \        local prime = true\n        for j = 2, #primes do\n            if sentence[i]\
    \ == primes[j] then\n                prime = false\n                break\n  \
    \          end\n        end\n        if prime then\n            table.insert(primes,\
    \ sentence[i])\n            table.insert(prime_words, sentence[i])\n        end\n\
    \    end\n    return table.concat(prime_words, \" \")\nend", "    local primes\
    \ = {}\n    local primes_count = 0\n    local primes_index = {}\n    local primes_index2\
    \ = 0\n    local primes_index3 = 0\n    local primes_index4 = 0\n    local primes_index5\
    \ = 0\n    local primes_index6 = 0\n    local primes_index7 = 0\n    local primes_index8\
    \ = 0\n    local primes_index9 = 0\n    local primes_index10 = 0\n    local primes_index11\
    \ = 0\n    local primes_index12 = 0\n    local primes_index13 = 0\n    local primes_index14\
    \ = 0\n    local primes_index15 = 0\n    local primes_index16 = 0\n    local primes_index17\
    \ = 0\n    local primes_index18 = 0\n    local primes_index19 = 0\n    local primes_index20\
    \ = 0\n    local primes_index21 = 0\n    local primes_index22 = 0\n    local primes_index23\
    \ = 0\n    local primes_index24 = 0\n    local primes_index25 = 0\n    local primes_index26\
    \ = 0\n    local primes_index27 = 0\n    local primes_index28 = 0\n    local primes_index29\
    \ = 0\n    local primes_index30 = 0\n    local primes_index31 = 0\n    local primes_index32\
    \ = 0\n    local primes_index33 = 0\n    local primes_index34 = 0\n    local primes_index35\
    \ = 0\n    local primes_index36 = 0\n    local primes_index37 = 0\n    local primes_index38\
    \ = 0\n    local primes_index39 = 0\n    local primes_index40 = 0\n    local primes_index41\
    \ = 0\n    local primes_index42 = 0\n    local primes_index43 = 0\n    local primes_index44\
    \ = 0\n    local primes_index45 = 0\n    local primes_index46 = 0\n    local primes_index47\
    \ = 0\n    local primes_index48 = 0\n    local primes_index49 = 0\n    local primes_index50\
    \ = 0\n    local primes_index51 = 0\n    local primes_index52 = 0\n    local primes_index53\
    \ = 0\n    local primes_index54 = 0\n    local primes_index55 = 0\n    local primes_index56\
    \ = 0\n    local primes_index57 = 0\n    local primes_index58 = 0\n    local primes_index59\
    \ = 0\n    local primes_index60 = 0\n    local primes_index61 = 0\n    local primes_index62\
    \ = 0\n    local primes_index63", "    local prime_words = {}\n    for i = 2,\
    \ #sentence do\n        local prime = true\n        for j = 2, #prime_words do\n\
    \            if sentence[i] == prime_words[j] then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(prime_words, sentence[i])\n        end\n    end\n  \
    \  return table.concat(prime_words, \" \")\nend\n</cell>\n<text>\nLet's test your\
    \ implementation. Make sure it passes the tests:", "    local primes = {}\n  \
    \  for i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result\nend", "    local primes = {}\n    for\
    \ i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if sentence:sub(i, i + j) ~= sentence:sub(i - 1, i) then\n \
    \               prime = false\n                break\n            end\n      \
    \  end\n        if prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local result = {}\n    for i = 1, #primes do\n        table.insert(result,\
    \ sentence:sub(1, primes[i]))\n    end\n    return table.concat(result)\nend\n\
    </cell>\n<text>\nLet's test our implementation:", "    local primes = {}\n   \
    \ local primes_count = 0\n    local primes_length = 1\n    local primes_index\
    \ = 1\n    local primes_length_index = 1\n    local primes_index = 1\n    local\
    \ primes_length_index = 1\n    local primes_index = 1\n    local primes_length_index\
    \ = 1\n    local primes_index = 1\n    local primes_length_index = 1\n    local\
    \ primes_index = 1\n    local primes_length_index = 1\n    local primes_index\
    \ = 1\n    local primes_length_index = 1\n    local primes_index = 1\n    local\
    \ primes_length_index = 1\n    local primes_index = 1\n    local primes_length_index\
    \ = 1\n    local primes_index = 1\n    local primes_length_index = 1\n    local\
    \ primes_index = 1\n    local primes_length_index = 1\n    local primes_index\
    \ = 1\n    local primes_length_index = 1\n    local primes_index = 1\n    local\
    \ primes_length_index = 1\n    local primes_index = 1\n    local primes_length_index\
    \ = 1\n    local primes_index = 1\n    local primes_length_index = 1\n    local\
    \ primes_index = 1\n    local primes_length_index = 1\n    local primes_index\
    \ = 1\n    local primes_length_index = 1\n    local primes_index = 1\n    local\
    \ primes_length_index = 1\n    local primes_index = 1\n    local primes_length_index\
    \ = 1\n    local primes_index = 1\n    local primes_length_index = 1\n    local\
    \ primes_index = 1\n    local primes_length_index = 1\n    local primes_index\
    \ = 1\n    local primes_length_index = 1\n    local primes_index = 1\n    local\
    \ primes_length_index = 1\n    local primes_index = 1\n    local primes_length_index\
    \ = 1\n    local primes_index = 1\n    local primes_length_index = 1\n    local\
    \ primes_index = 1\n    local primes_length_index = 1\n    local primes_index\
    \ = 1\n    local primes_length_index = 1\n    local primes_index = 1\n    local\
    \ primes_length_index = 1\n    local primes_index = 1\n    local primes_length_index\
    \ = 1\n    local primes_index = 1\n    local primes_length_index = 1\n    local\
    \ primes_index = 1\n    local primes_length_index = 1\n    local primes_index\
    \ = 1\n    local primes_length_index = 1\n    local primes_index = 1\n    local\
    \ primes_length_index = 1\n    local primes_index = 1\n    local primes_length_index\
    \ = 1", "  local prime_numbers = {}\n  for i = 2, 100 do\n    prime_numbers[i]\
    \ = true\n  end\n  local prime_numbers_string = table.concat(prime_numbers, \"\
    \ \")\n  local words = sentence:gsub(\"[^ ]+\", \" \")\n  local result = \"\"\n\
    \  for i = 1, #words do\n    local word = words[i]\n    if prime_numbers[#prime_numbers_string]\
    \ == true then\n      prime_numbers[#prime_numbers_string] = false\n      result\
    \ = result .. word\n    end\n  end\n  return result\nend", "    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        local prime = primes[i]\n        for\
    \ j = 1, #sentence do\n            if sentence:sub(i, i + 1) ~= ' ' then\n   \
    \             table.insert(result, sentence:sub(i, i + 1))\n            end\n\
    \        end\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\n\
    Let's test our implementation:", "    local result = {}\n    for w in string.gmatch(sentence,\
    \ '([^ ]+)')\n    do\n        local n = tonumber(w)\n        if n ~= nil then\n\
    \            table.insert(result, w)\n        end\n    end\n    return table.concat(result)\n\
    end", "    local prime_numbers = {}\n    local prime_numbers_count = 0\n    local\
    \ prime_numbers_index = 1\n    local prime_numbers_index_count = 0\n    local\
    \ prime_numbers_index_max = 1\n    local prime_numbers_index_max_count = 0\n \
    \   local prime_numbers_index_max_max = 1\n    local prime_numbers_index_max_max_count\
    \ = 0\n    local prime_numbers_index_max_max_max = 1\n    local prime_numbers_index_max_max_max_count\
    \ = 0\n    local prime_numbers_index_max_max_max_max = 1\n    local prime_numbers_index_max_max_max_max_count\
    \ = 0\n    local prime_numbers_index_max_max_max_max_max = 1\n    local prime_numbers_index_max_max_max_max_count\
    \ = 0\n    local prime_numbers_index_max_max_max_max_max = 1\n    local prime_numbers_index_max_max_max_max_count\
    \ = 0\n    local prime_numbers_index_max_max_max_max_max = 1\n    local prime_numbers_index_max_max_max_max_max_count\
    \ = 0\n    local prime_numbers_index_max_max_max_max_max_max = 1\n    local prime_numbers_index_max_max_max_max_max_count\
    \ = 0\n    local prime_numbers_index_max_max_max_max_max_max = 1\n    local prime_numbers_index_max_max_max_max_max_count\
    \ = 0\n    local prime_numbers_index_max_max_max_max_max_max = 1\n    local prime_numbers_index_max_max_max_max_max_count\
    \ = 0\n    local prime_numbers_index_max_max_max_max_max_max = 1\n    local prime_numbers_index_max_max_max_max_max_count\
    \ = 0\n    local prime_numbers_index_max_max_max_max_max_max = 1\n    local prime_numbers_index_max_max_max_max_max_count\
    \ = 0\n    local prime_numbers_index_max_max_max_max_max_max = 1\n    local prime_numbers_index_max_max_max_max_max_count\
    \ = 0\n    local prime_numbers_index_max_max_max_max_max_max = 1\n    local prime_numbers_index_max_max_max_max_max_count\
    \ = 0\n    local prime_numbers_index_max_max_max_max_max_max = 1\n    local prime_numbers_index_max_max_max_max_max_count\
    \ = 0\n    local prime_numbers_index_max_max_max_max_max_max = 1\n    local prime_numbers_index_max_max_max_max_max_count\
    \ = 0\n    local prime_numbers_index_max_max_max_max_max_max = 1\n    local prime_numbers_index_max_max_max_max_max_count\
    \ = 0\n    local prime_numbers_index_max_max_max_max_max_max = 1\n", "    local\
    \ primes = {}\n    for i = 2, #sentence do\n        local prime = true\n     \
    \   for j = 2, #primes do\n            if i % primes[j] == 0 then\n          \
    \      prime = false\n                break\n            end\n        end\n  \
    \      if prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for i = 1, #primes do\n        table.insert(result,\
    \ sentence:sub(1, primes[i]))\n    end\n    return table.concat(result)\nend\n\
    </cell>\n<text>\nLet's test your implementation", "    local primes = {}\n   \
    \ for i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if sentence:sub(i, i+j) ~= ' ' then\n                prime =\
    \ false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]))\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\n\
    Let's see how it works:", "    local primes = {}\n    for i = 2, #sentence do\n\
    \        local prime = true\n        for j = 2, #primes do\n            if sentence:sub(i,\
    \ i + j) ~= sentence:sub(i - j, i) then\n                prime = false\n     \
    \           break\n            end\n        end\n        if prime then\n     \
    \       table.insert(primes, i)\n        end\n    end\n    return table.concat(primes,\
    \ \" \")\nend", "    local primes = {}\n    local primes_count = 0\n    local\
    \ primes_string = ''\n    for i = 1, #sentence do\n        local letter = sentence:sub(i,i)\n\
    \        if letter:sub(1,1) ~= 'a' and letter:sub(1,1) ~= 'e' and letter:sub(1,1)\
    \ ~= 'i' and letter:sub(1,1) ~= 'o' and letter:sub(1,1) ~= 'u' then\n        \
    \    primes[#primes + 1] = 1\n            primes_count = primes_count + 1\n  \
    \      end\n    end\n    for i = 1, primes_count do\n        local prime = primes[i]\n\
    \        local prime_letter = primes_string\n        for j = 1, #prime_letter\
    \ do\n            prime_letter = prime_letter..' '\n        end\n        if prime\
    \ == 1 then\n            primes_string = primes_string..prime_letter\n       \
    \ else\n            primes_string = primes_string..prime_letter..' '\n       \
    \ end\n    end\n    return primes_string\nend", "    local primes = {}\n    for\
    \ i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 1, #primes do\n        local word = sentence:sub(1, primes[i])\n\
    \        table.insert(result, word)\n    end\n    return table.concat(result)\n\
    end", "    local primes = {}\n    local primes_count = 0\n    local primes_length\
    \ = 0\n    local primes_string = ''\n    for i = 1, #sentence do\n        local\
    \ letter = sentence:sub(i,i)\n        if letter:sub(1,1) ~= 'a' and letter:sub(1,1)\
    \ ~= 'e' and letter:sub(1,1) ~= 'i' and letter:sub(1,1) ~= 'o' and letter:sub(1,1)\
    \ ~= 'u' then\n            primes[#primes + 1] = letter\n            primes_count\
    \ = primes_count + 1\n        end\n    end\n    for i = 1, #primes do\n      \
    \  local prime = primes[i]\n        local prime_length = #prime\n        if primes_length\
    \ == prime_length then\n            primes_string = primes_string .. ' ' .. prime\n\
    \        else\n            if primes_count == 1 then\n                primes_string\
    \ = primes_string .. ' ' .. prime\n            else\n                primes_string\
    \ = primes_string .. ' ' .. prime\n                primes_length = primes_length\
    \ + 1\n            end\n        end\n    end\n    return primes_string\nend\n\
    </cell>\n<text>\nLet's see how it works:", "    local primes = {}\n    for i =\
    \ 2, #sentence do\n        local prime = true\n        for j = 2, #primes do\n\
    \            if i % primes[j] == 0 then\n                prime = false\n     \
    \           break\n            end\n        end\n        if prime then\n     \
    \       table.insert(primes, i)\n        end\n    end\n    local result = \"\"\
    \n    for i = 2, #primes do\n        result = result .. sentence[math.mod(#sentence,\
    \ primes[i])]\n    end\n    return result\nend", "    local result = {}\n    for\
    \ w in string.gmatch(sentence, \"([^ ]+)\")\n    do\n        local n = tonumber(w)\n\
    \        if n ~= nil then\n            if math.fmod(n, 2) == 0 then\n        \
    \        result[#result + 1] = w\n            end\n        end\n    end\n    return\
    \ table.concat(result)\nend", "    local primes = {}\n    for i = 2, #sentence\
    \ do\n        local prime = true\n        for j = 2, #primes do\n            if\
    \ i % primes[j] == 0 then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local result = {}\n    for i = 1, #primes do\n\
    \        table.insert(result, sentence:sub(1, primes[i]))\n    end\n    return\
    \ table.concat(result)\nend\n</cell>\n<text>\nLet's test our implementation:",
  "    local prime_words = {}\n    for i = 2, #sentence do\n        local prime =\
    \ true\n        for j = 2, #prime_words do\n            if #prime_words[j] ==\
    \ i then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(prime_words, i)\n\
    \        end\n    end\n    local result = {}\n    for i = 1, #prime_words do\n\
    \        local prime_word = sentence:sub(1, prime_words[i])\n        for j = 1,\
    \ #prime_words do\n            if prime_words[j] == i then\n                table.insert(result,\
    \ prime_word)\n                break\n            end\n        end\n    end\n\
    \    return table.concat(result)\nend\n</cell>\n<text>\nLet's see how it works:",
  "    local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if i % primes[j] == 0 then\n     \
    \           prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(primes, i)\n        end\n   \
    \ end\n    local result = {}\n    for i = 1, #primes do\n        local word =\
    \ sentence:sub(1, primes[i])\n        table.insert(result, word)\n    end\n  \
    \  return table.concat(result)\nend\n</cell>\n<text>\nLet's see how it works:",
  "    local primes = {}\n    local primes_count = 0\n    local primes_index = 1\n\
    \    local primes_length = #primes\n    local primes_index = 1\n    local primes_length\
    \ = #primes\n    local primes_index = 1\n    local primes_length = #primes\n \
    \   local primes_index = 1\n    local primes_length = #primes\n    local primes_index\
    \ = 1\n    local primes_length = #primes\n    local primes_index = 1\n    local\
    \ primes_length = #primes\n    local primes_index = 1\n    local primes_length\
    \ = #primes\n    local primes_index = 1\n    local primes_length = #primes\n \
    \   local primes_index = 1\n    local primes_length = #primes\n    local primes_index\
    \ = 1\n    local primes_length = #primes\n    local primes_index = 1\n    local\
    \ primes_length = #primes\n    local primes_index = 1\n    local primes_length\
    \ = #primes\n    local primes_index = 1\n    local primes_length = #primes\n \
    \   local primes_index = 1\n    local primes_length = #primes\n    local primes_index\
    \ = 1\n    local primes_length = #primes\n    local primes_index = 1\n    local\
    \ primes_length = #primes\n    local primes_index = 1\n    local primes_length\
    \ = #primes\n    local primes_index = 1\n    local primes_length = #primes\n \
    \   local primes_index = 1\n    local primes_length = #primes\n    local primes_index\
    \ = 1\n    local primes_length = #primes\n    local primes_index = 1\n    local\
    \ primes_length = #primes\n    local primes_index = 1\n    local primes_length\
    \ = #primes\n    local primes_index = 1\n    local primes_length = #primes\n \
    \   local primes_index = 1\n    local primes_length = #primes\n    local primes_index\
    \ = 1\n    local primes_length = #primes\n    local primes_index = 1\n    local\
    \ primes_length = #primes\n    local primes_index = 1\n    local primes_length\
    \ = #primes\n    local primes_index = 1\n    local primes_length = #primes\n \
    \   local primes_index = 1\n    local primes_length = #primes\n    local primes_index\
    \ = 1\n    local primes_length = #primes\n    local primes_index = 1\n    local\
    \ primes_length = #primes\n    local primes_index", "    local prime_numbers =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #prime_numbers do\n            if i % prime_numbers[j] == 0 then\n      \
    \          prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(prime_numbers, i)\n        end\n\
    \    end\n    local result = {}\n    for i = 1, #prime_numbers do\n        table.insert(result,\
    \ sentence:sub(1, prime_numbers[i]))\n    end\n    return table.concat(result)\n\
    end", "    local result = {}\n    for w in string.gmatch(sentence, \"([^ ]+)\"\
    )\n    do\n        local prime = true\n        for i = 2, #result do\n       \
    \     if string.len(result[i]) > string.len(w) then\n                prime = false\n\
    \            end\n        end\n        if prime then\n            table.insert(result,\
    \ w)\n        end\n    end\n    return table.concat(result)\nend", "    local\
    \ result = {}\n    for w in string.gmatch(sentence, \"([^ ]+)\")\n    do\n   \
    \     local n = math.floor(math.sqrt(#w))\n        if #result < n then\n     \
    \       for i = 1, n do\n                result[#result + 1] = w[i]\n        \
    \    end\n        else\n            for i = 1, n do\n                if w[i] ~=\
    \ result[#result] then\n                    result[#result + 1] = w[i]\n     \
    \           end\n            end\n        end\n    end\n    return table.concat(result)\n\
    end", "    local primes = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if i % primes[j] == 0 then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local result = {}\n    for i = 1, #primes do\n        table.insert(result,\
    \ sentence:sub(1, primes[i]))\n    end\n    return table.concat(result)\nend\n\
    </cell>\n<text>\nLet's see how it works:", "    local prime_words = {}\n    for\
    \ i = 2, #sentence do\n        local prime_word = true\n        for j = 2, #prime_words\
    \ do\n            if sentence[i] == prime_words[j] then\n                prime_word\
    \ = false\n            end\n        end\n        if prime_word then\n        \
    \    table.insert(prime_words, sentence[i])\n        end\n    end\n    return\
    \ table.concat(prime_words, \" \")\nend", "    local primes = {}\n    local primes_count\
    \ = 0\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #primes do\n            if sentence[i] == primes[j] then\n            \
    \    prime = false\n                break\n            end\n        end\n    \
    \    if prime then\n            primes[primes_count] = sentence[i]\n         \
    \   primes_count = primes_count + 1\n        end\n    end\n    local result =\
    \ \"\"\n    for i = 1, primes_count do\n        result = result .. \" \" .. primes[i]\n\
    \    end\n    return result\nend\n</cell>\n<text>\nLet's test our implementation:",
  "    local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if i % primes[j] == 0 then\n     \
    \           prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(primes, i)\n        end\n   \
    \ end\n    local result = {}\n    for i = 1, #primes do\n        table.insert(result,\
    \ sentence:sub(1, primes[i]))\n    end\n    return table.concat(result)\nend",
  "    local primes = {}\n    local prime_words = {}\n    local prime_words_len =\
    \ {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n    local\
    \ prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_", "    local primes\
    \ = {}\n    local primes_count = 0\n    local primes_index = {}\n    local primes_index_count\
    \ = 0\n    local primes_index_max = 0\n    local primes_index_max_count = 0\n\
    \    local primes_index_max_index = 0\n    local primes_index_max_count = 0\n\
    \    local primes_index_max_index = 0\n    local primes_index_max_count = 0\n\
    \    local primes_index_max_index = 0\n    local primes_index_max_count = 0\n\
    \    local primes_index_max_index = 0\n    local primes_index_max_count = 0\n\
    \    local primes_index_max_index = 0\n    local primes_index_max_count = 0\n\
    \    local primes_index_max_index = 0\n    local primes_index_max_count = 0\n\
    \    local primes_index_max_index = 0\n    local primes_index_max_count = 0\n\
    \    local primes_index_max_index = 0\n    local primes_index_max_count = 0\n\
    \    local primes_index_max_index = 0\n    local primes_index_max_count = 0\n\
    \    local primes_index_max_index = 0\n    local primes_index_max_count = 0\n\
    \    local primes_index_max_index = 0\n    local primes_index_max_count = 0\n\
    \    local primes_index_max_index = 0\n    local primes_index_max_count = 0\n\
    \    local primes_index_max_index = 0\n    local primes_index_max_count = 0\n\
    \    local primes_index_max_index = 0\n    local primes_index_max_count = 0\n\
    \    local primes_index_max_index = 0\n    local primes_index_max_count = 0\n\
    \    local primes_index_max_index = 0\n    local primes_index_max_count = 0\n\
    \    local primes_index_max_index = 0\n    local primes_index_max_count = 0\n\
    \    local primes_index_max_index = 0\n    local primes_index_max_count = 0\n\
    \    local primes_index_max_index = 0\n    local primes_index_max_count = 0\n\
    \    local primes_index_max_index = 0\n    local primes_index_max_count = 0\n\
    \    local primes_index_max_index = 0\n    local primes_index_max_count = 0\n\
    \    local primes_index_max_index = 0\n    local primes_index_max_count = 0\n\
    \    local primes_index_max_index = 0\n    local primes_index_max_count = 0\n\
    \    local primes_index_max_index = 0\n    local primes_index_max_count = 0\n\
    \    local primes_index_max_index = 0\n    local primes_index_max_count = 0\n\
    \    local primes_index_max_index = 0\n    local primes_index_max_count = 0\n\
    \    local primes_index_max_index = 0\n    local primes_index_max_count = 0\n\
    \    local primes_index_max_index = 0\n    local prime", "    local primes = {}\n\
    \    for i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if sentence:sub(i, i + j) ~= sentence:sub(i - j, i) then\n \
    \               prime = false\n                break\n            end\n      \
    \  end\n        if prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local result = {}\n    for i = 1, #primes do\n        table.insert(result,\
    \ sentence:sub(i, i + primes[i]))\n    end\n    return table.concat(result)\n\
    end", "    local primes = {}\n    local prime_words = {}\n    local prime_words_len\
    \ = {}\n    for i = 1, #sentence do\n        local word = sentence:sub(i, i)\n\
    \        local prime = 1\n        for j = 1, #word do\n            if word:sub(i,\
    \ i) == word:sub(j, j) then\n                prime = prime + 1\n            end\n\
    \        end\n        if prime == 1 then\n            primes[#primes + 1] = word\n\
    \        end\n    end\n    for i = 1, #primes do\n        local prime_word = primes[i]\n\
    \        local prime_words_len = #prime_words\n        for j = 1, #prime_word\
    \ do\n            if prime_word:sub(i, i) == prime_word:sub(j, j) then\n     \
    \           prime_words_len = prime_words_len + 1\n            end\n        end\n\
    \        if prime_words_len == #prime_words then\n            prime_words[prime_words_len\
    \ + 1] = prime_word\n        end\n    end\n    local result = \"\"\n    for i\
    \ = 1, #prime_words do\n        result = result .. prime_words[i]\n    end\n \
    \   return result\nend\n</cell>\n<text>\nLet's test our implementation:", "  \
    \  local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if i % primes[j] == 0 then\n     \
    \           prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(primes, i)\n        end\n   \
    \ end\n    local result = {}\n    for i = 1, #primes do\n        table.insert(result,\
    \ sentence:sub(1, primes[i]:tostring()))\n    end\n    return table.concat(result)\n\
    end", "    local primes = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if sentence:sub(i, i + j)\
    \ ~= sentence:sub(i - 1, i + j) then\n                prime = false\n        \
    \        break\n            end\n        end\n        if prime then\n        \
    \    table.insert(primes, i)\n        end\n    end\n    local result = {}\n  \
    \  for i = 1, #primes do\n        table.insert(result, sentence:sub(1, primes[i]))\n\
    \    end\n    return table.concat(result)\nend", "    local primes = {}\n    local\
    \ primes_index = {}\n    local primes_length = {}\n    local primes_string = ''\n\
    \    local primes_index = 0\n    local primes_length = 0\n    local primes_string\
    \ = ''\n    local primes_index = 0\n    local primes_length = 0\n    local primes_string\
    \ = ''\n    local primes_index = 0\n    local primes_length = 0\n    local primes_string\
    \ = ''\n    local primes_index = 0\n    local primes_length = 0\n    local primes_string\
    \ = ''\n    local primes_index = 0\n    local primes_length = 0\n    local primes_string\
    \ = ''\n    local primes_index = 0\n    local primes_length = 0\n    local primes_string\
    \ = ''\n    local primes_index = 0\n    local primes_length = 0\n    local primes_string\
    \ = ''\n    local primes_index = 0\n    local primes_length = 0\n    local primes_string\
    \ = ''\n    local primes_index = 0\n    local primes_length = 0\n    local primes_string\
    \ = ''\n    local primes_index = 0\n    local primes_length = 0\n    local primes_string\
    \ = ''\n    local primes_index = 0\n    local primes_length = 0\n    local primes_string\
    \ = ''\n    local primes_index = 0\n    local primes_length = 0\n    local primes_string\
    \ = ''\n    local primes_index = 0\n    local primes_length = 0\n    local primes_string\
    \ = ''\n    local primes_index = 0\n    local primes_length = 0\n    local primes_string\
    \ = ''\n    local primes_index = 0\n    local primes_length = 0\n    local primes_string\
    \ = ''\n    local primes_index = 0\n    local primes_length = 0\n    local primes_string\
    \ = ''\n    local primes_index = 0\n    local primes_length = 0\n    local primes_string\
    \ = ''\n    local primes_index = 0\n    local primes_length = 0\n    local primes_string\
    \ = ''\n    local primes_index = 0\n    local primes_length = 0\n    local primes_string\
    \ = ''\n    local primes_index = 0\n    local primes_length = 0\n    local primes_string\
    \ = ''\n    local primes_index = 0\n    local primes_length = 0\n    local primes_string\
    \ = ''\n    local primes_index = 0\n    local primes_length = 0\n    local primes_string\
    \ = ''\n    local primes_index = 0\n    local primes_length = 0\n    local primes_string\
    \ = ''\n    local prime", "    local primes = {}\n    for i = 2, #sentence do\n\
    \        local prime = true\n        for j = 2, #primes do\n            if sentence:sub(i,\
    \ i + j) ~= sentence:sub(i - j, i - 1) then\n                prime = false\n \
    \               break\n            end\n        end\n        if prime then\n \
    \           table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(i,\
    \ i + primes[i]))\n    end\n    return table.concat(result)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
