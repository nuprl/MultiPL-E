name: HumanEval_87_get_row
language: lua
prompt: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is similar\
  \ to matrix, however, unlike matrices,\n-- each row may contain a different number\
  \ of columns.\n-- Given lst, and integer x, find integers x in the table,\n-- and\
  \ return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table is a\
  \ coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially by\
  \ rows in ascending order.\n-- Also, sort coordinates of the row by columns in descending\
  \ order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6},\
  \ {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\n-- >>> get_row({},\
  \ 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}}, 3)\n-- {{2, 2}}\nlocal function\
  \ get_row(lst, x)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
  \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3,\
  \ 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
  \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1,\
  \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4,\
  \ 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
  \ 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4,\
  \ 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0},\
  \ {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
  \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
  \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local row = {}\n  for i = 1, #lst do\n    local row = row\n    for\
    \ j = 1, #lst[i] do\n      if lst[i][j] == x then\n        break\n      else\n\
    \        row = row[j]\n      end\n    end\n  end\n  return row\nend", "  if x\
    \ == 0 then\n    return {}\n  end\n  local row = {}\n  for i = 1, #lst do\n  \
    \  local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        row[j] = i\n        break\n      end\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  return row\nend", "  local row = {}\n  for _, v in pairs(lst)\
    \ do\n    local row2 = {}\n    for _, v2 in pairs(v) do\n      if v == x then\n\
    \        row2 = v2\n        break\n      end\n    end\n    if row2 then\n    \
    \  table.insert(row, row2)\n    end\n  end\n  table.sort(row, function(a, b) return\
    \ a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n\
    \  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    local\
    \ found = false\n    for _, v2 in ipairs(row) do\n      if v == v2 then\n    \
    \    found = true\n        break\n      end\n    end\n    if not found then\n\
    \      table.insert(row, v)\n    end\n  end\n  table.sort(row, function(a, b)\
    \ return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  local\
    \ rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, {x = v, y =\
    \ rows[v]})\n  end\n  table.sort(rows, function(a, b) return a.x < b.x end)\n\
    \  table.sort(rows, function(a, b) return b.x < a.x end)\n  return rows\nend",
  "    local row = {}\n    for i = 1, #lst do\n        local row = row\n        for\
    \ j = 1, #lst[i] do\n            if lst[i][j] == x then\n                row[j]\
    \ = i\n                break\n            end\n        end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    return row\nend", " \
    \ local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n\
    \  table.sort(row, function(a, b) return a < b end)\n  table.sort(row, function(a,\
    \ b) return a > b end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ {x = v, y = rows[v].y})\n  end\n  table.sort(rows, function(a, b) return a.x\
    \ < b.x end)\n  table.sort(rows, function(a, b) return a.x > b.x end)\n  table.sort(rows,\
    \ function(a, b) return a.y < b.y end)\n  table.sort(rows, function(a, b) return\
    \ a.y > b.y end)\n  table.sort(rows, function(a, b) return a.x == b.x end)\n \
    \ table.sort(rows, function(a, b) return a.x <> b.x end)\n  table.sort(rows, function(a,\
    \ b) return a.y == b.y end)\n  table.sort(rows, function(a, b) return a.y <> b.y\
    \ end)\n  return rows\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n       \
    \ break\n      else\n        row = row[j]\n      end\n    end\n  end\n  return\
    \ row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b > a\
    \ end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ {x = v, y = row[v]})\n  end\n  return rows\nend", "  local row = {}\n  for i\
    \ = 1, #lst do\n    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        break\n      else\n        row = row[j]\n      end\n    end\n\
    \  end\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n       \
    \ row = row\n      else\n        row = row[[j]]\n        break\n      end\n  \
    \  end\n  end\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    local found = false\n    for _, v2 in ipairs(row) do\n      if v ==\
    \ v2 then\n        found = true\n        break\n      end\n    end\n    if not\
    \ found then\n      table.insert(row, v)\n    end\n  end\n  table.sort(row, function(a,\
    \ b) return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n \
    \ local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, {x = v,\
    \ y = rows[v]})\n  end\n  return rows\nend", "  local t = {}\n  for i = 1, #lst\
    \ do\n    local row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        table.insert(row, j)\n      end\n    end\n    table.insert(t, row)\n\
    \  end\n  table.sort(t, function(a, b) return a[1] > b[1] end)\n  table.sort(t,\
    \ function(a, b) return a[2] > b[2] end)\n  return t\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    local rows = {}\n    for j = 1, #lst[i] do\n      if\
    \ lst[i][j] == x then\n        rows[#rows + 1] = { i, j }\n      end\n    end\n\
    \    table.sort(rows, function(a, b) return a[1] > b[1] end)\n    table.sort(rows,\
    \ function(a, b) return a[2] > b[2] end)\n    for _, v in ipairs(rows) do\n  \
    \    table.insert(row, v)\n    end\n  end\n  return row\nend", "  local row =\
    \ {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i] do\n \
    \     if lst[i][j] == x then\n        break\n      else\n        row = row[[j\
    \ + 1]]\n      end\n    end\n  end\n  return row\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        row[#row+1] = {i, j}\n      end\n    end\n    table.insert(row,\
    \ #row)\n  end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  return row\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n      if\
    \ lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.insert(row, #row\
    \ - 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 2)\n   \
    \ table.insert(row, #row + 3)\n    table.insert(row, #row + 4)\n    table.insert(row,\
    \ #row + 5)\n    table.insert(row, #row + 6)\n    table.insert(row, #row + 7)\n\
    \    table.insert(row, #row + 8)\n    table.insert(row, #row + 9)\n    table.insert(row,\
    \ #row + 10)\n    table.insert(row, #row + 11)\n    table.insert(row, #row + 12)\n\
    \    table.insert(row, #row + 13)\n    table.insert(row, #row + 14)\n    table.insert(row,\
    \ #row + 15)\n    table.insert(row, #row + 16)\n    table.insert(row, #row + 17)\n\
    \    table.insert(row, #row + 18)\n    table.insert(row, #row + 19)\n    table.insert(row,\
    \ #row + 20)\n    table.insert(row, #row + 21)\n    table.insert(row, #row + 22)\n\
    \    table.insert(row, #row + 23)\n    table.insert(row, #row + 24)\n    table.insert(row,\
    \ #row + 25)\n    table.insert(row, #row + 26)\n    table.insert(row, #row + 27)\n\
    \    table.insert(row, #row + 28)\n    table.insert(row, #row + 29)\n    table.insert(row,\
    \ #row + 30)\n    table.insert(row, #row + 31)\n    table.insert(row, #row + 32)\n\
    \    table.insert(row, #row + 33)\n    table.insert(row, #row + 34)\n    table.insert(row,\
    \ #row + 35)\n    table.insert(row, #row + 36)\n    table.insert(row, #row + 37)\n\
    \    table.insert(row, #row + 38)\n    table.insert(row, #row + 39)\n    table.insert(row,\
    \ #row + 40)\n    table.insert(row, #row + 41)\n    table.insert(row, #row + 42)\n\
    \    table.insert(row, #row + 43)\n    table.insert(row, #row + 44)\n    table.insert(row,\
    \ #row + 45)\n    table.insert(row, #row + ", "  local row = {}\n  for _, v in\
    \ ipairs(lst) do\n    if v == x then\n      table.insert(row, 0)\n    else\n \
    \     local found = false\n      for _, v2 in ipairs(row) do\n        if v ==\
    \ v2 then\n          table.insert(row, v2)\n          found = true\n         \
    \ break\n        end\n      end\n      if not found then\n        table.insert(row,\
    \ v)\n      end\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a,\
    \ b) return b - a end)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    local found = false\n    for _, v2 in ipairs(row) do\n      if v ==\
    \ v2 then\n        found = true\n        break\n      end\n    end\n    if not\
    \ found then\n      table.insert(row, v)\n    end\n  end\n  table.sort(row, function(a,\
    \ b) return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n \
    \ table.sort(row, function(a, b) return a[#a] < b[#b] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] > b[#b] end)\n  table.sort(row, function(a, b) return\
    \ a[#a] == b[#b] end)\n  table.sort(row, function(a, b) return a[#a] <= b[#b]\
    \ end)\n  table.sort(row, function(a, b) return a[#a] >= b[#b] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] < b[#b] end)\n  table.sort(row, function(a, b) return\
    \ a[#a] > b[#b] end)\n  table.sort(row, function(a, b) return a[#a] == b[#b] end)\n\
    \  table.sort(row, function(a, b) return a[#a] <= b[#b] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] >= b[#b] end)\n  table.sort(row, function(a, b)\
    \ return a[#a] < b[#b] end)\n  table.sort(row, function(a, b) return a[#a] > b[#b]\
    \ end)\n  table.sort(row, function(a, b) return a[#a] == b[#b] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] <= b[#b] end)\n  table.sort(row, function(a, b)\
    \ return a[#a] >= b[#b] end)\n  table.sort(row, function(a, b) return a[#a] <\
    \ b[#b] end)\n  table.sort(row, function(a, b) return a[#a] > b[#b] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] == b[#b] end)\n  table.sort(row, function(a, b)\
    \ return a[#a] <= b[#b] end)\n  table.sort(row, function(a, b) return a[#a] >=\
    \ b[#b] end)\n  table.sort(row, function(a, b) return a[#a] < b[#b] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] > b[#b] end)\n  table.sort(row, function(a, b) return\
    \ a[#a] == b[#b] end)\n  table.sort(row, ", "  local row = {}\n  for i = 1, #lst\
    \ do\n    local row_x = lst[i]\n    local row_y = lst[#lst]\n    for j = 1, #row_x\
    \ do\n      if row_x[j] == x then\n        table.insert(row, { i, j })\n     \
    \ end\n    end\n  end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n\
    \  table.sort(row, function(a, b) return a[2] > b[2] end)\n  return row\nend",
  "  local row = {}\n  for i = 1, #lst do\n    local row2 = {}\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        row2 = {i, j}\n        break\n   \
    \   end\n    end\n    if row2 then\n      table.insert(row, row2)\n    end\n \
    \ end\n  table.sort(row)\n  table.sort(row, function(a, b) return a[2] > b[2]\
    \ end)\n  return row\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
