name: HumanEval_87_get_row
language: lua
prompt: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is similar\
  \ to matrix, however, unlike matrices,\n-- each row may contain a different number\
  \ of columns.\n-- Given lst, and integer x, find integers x in the table,\n-- and\
  \ return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table is a\
  \ coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially by\
  \ rows in ascending order.\n-- Also, sort coordinates of the row by columns in descending\
  \ order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6},\
  \ {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\n-- >>> get_row({},\
  \ 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}}, 3)\n-- {{2, 2}}\nlocal function\
  \ get_row(lst, x)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
  \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3,\
  \ 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
  \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1,\
  \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4,\
  \ 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
  \ 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4,\
  \ 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0},\
  \ {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
  \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
  \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local row = {}\n  for i = 1, #lst do\n    local row = row\n    for\
    \ j = 1, #lst[i] do\n      if lst[i][j] == x then\n        break\n      else\n\
    \        row = row[j]\n      end\n    end\n  end\n  return row\nend", "  if x\
    \ == 0 then\n    return {}\n  end\n  local row = {}\n  for i = 1, #lst do\n  \
    \  local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        row[j] = i\n        break\n      end\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  return row\nend", "  local row = {}\n  for _, v in pairs(lst)\
    \ do\n    local row2 = {}\n    for _, v2 in pairs(v) do\n      if v == x then\n\
    \        row2 = v2\n        break\n      end\n    end\n    if row2 then\n    \
    \  table.insert(row, row2)\n    end\n  end\n  table.sort(row, function(a, b) return\
    \ a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n\
    \  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    local\
    \ found = false\n    for _, v2 in ipairs(row) do\n      if v == v2 then\n    \
    \    found = true\n        break\n      end\n    end\n    if not found then\n\
    \      table.insert(row, v)\n    end\n  end\n  table.sort(row, function(a, b)\
    \ return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  local\
    \ rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, {x = v, y =\
    \ rows[v]})\n  end\n  table.sort(rows, function(a, b) return a.x < b.x end)\n\
    \  table.sort(rows, function(a, b) return b.x < a.x end)\n  return rows\nend",
  "    local row = {}\n    for i = 1, #lst do\n        local row = row\n        for\
    \ j = 1, #lst[i] do\n            if lst[i][j] == x then\n                row[j]\
    \ = i\n                break\n            end\n        end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    return row\nend", " \
    \ local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n\
    \  table.sort(row, function(a, b) return a < b end)\n  table.sort(row, function(a,\
    \ b) return a > b end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ {x = v, y = rows[v].y})\n  end\n  table.sort(rows, function(a, b) return a.x\
    \ < b.x end)\n  table.sort(rows, function(a, b) return a.x > b.x end)\n  table.sort(rows,\
    \ function(a, b) return a.y < b.y end)\n  table.sort(rows, function(a, b) return\
    \ a.y > b.y end)\n  table.sort(rows, function(a, b) return a.x == b.x end)\n \
    \ table.sort(rows, function(a, b) return a.x <> b.x end)\n  table.sort(rows, function(a,\
    \ b) return a.y == b.y end)\n  table.sort(rows, function(a, b) return a.y <> b.y\
    \ end)\n  return rows\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n       \
    \ break\n      else\n        row = row[j]\n      end\n    end\n  end\n  return\
    \ row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b > a\
    \ end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ {x = v, y = row[v]})\n  end\n  return rows\nend", "  local row = {}\n  for i\
    \ = 1, #lst do\n    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        break\n      else\n        row = row[j]\n      end\n    end\n\
    \  end\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n       \
    \ row = row\n      else\n        row = row[[j]]\n        break\n      end\n  \
    \  end\n  end\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    local found = false\n    for _, v2 in ipairs(row) do\n      if v ==\
    \ v2 then\n        found = true\n        break\n      end\n    end\n    if not\
    \ found then\n      table.insert(row, v)\n    end\n  end\n  table.sort(row, function(a,\
    \ b) return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n \
    \ local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, {x = v,\
    \ y = rows[v]})\n  end\n  return rows\nend", "  local t = {}\n  for i = 1, #lst\
    \ do\n    local row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        table.insert(row, j)\n      end\n    end\n    table.insert(t, row)\n\
    \  end\n  table.sort(t, function(a, b) return a[1] > b[1] end)\n  table.sort(t,\
    \ function(a, b) return a[2] > b[2] end)\n  return t\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    local rows = {}\n    for j = 1, #lst[i] do\n      if\
    \ lst[i][j] == x then\n        rows[#rows + 1] = { i, j }\n      end\n    end\n\
    \    table.sort(rows, function(a, b) return a[1] > b[1] end)\n    table.sort(rows,\
    \ function(a, b) return a[2] > b[2] end)\n    for _, v in ipairs(rows) do\n  \
    \    table.insert(row, v)\n    end\n  end\n  return row\nend", "  local row =\
    \ {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i] do\n \
    \     if lst[i][j] == x then\n        break\n      else\n        row = row[[j\
    \ + 1]]\n      end\n    end\n  end\n  return row\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        row[#row+1] = {i, j}\n      end\n    end\n    table.insert(row,\
    \ #row)\n  end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  return row\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n      if\
    \ lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.insert(row, #row\
    \ - 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 2)\n   \
    \ table.insert(row, #row + 3)\n    table.insert(row, #row + 4)\n    table.insert(row,\
    \ #row + 5)\n    table.insert(row, #row + 6)\n    table.insert(row, #row + 7)\n\
    \    table.insert(row, #row + 8)\n    table.insert(row, #row + 9)\n    table.insert(row,\
    \ #row + 10)\n    table.insert(row, #row + 11)\n    table.insert(row, #row + 12)\n\
    \    table.insert(row, #row + 13)\n    table.insert(row, #row + 14)\n    table.insert(row,\
    \ #row + 15)\n    table.insert(row, #row + 16)\n    table.insert(row, #row + 17)\n\
    \    table.insert(row, #row + 18)\n    table.insert(row, #row + 19)\n    table.insert(row,\
    \ #row + 20)\n    table.insert(row, #row + 21)\n    table.insert(row, #row + 22)\n\
    \    table.insert(row, #row + 23)\n    table.insert(row, #row + 24)\n    table.insert(row,\
    \ #row + 25)\n    table.insert(row, #row + 26)\n    table.insert(row, #row + 27)\n\
    \    table.insert(row, #row + 28)\n    table.insert(row, #row + 29)\n    table.insert(row,\
    \ #row + 30)\n    table.insert(row, #row + 31)\n    table.insert(row, #row + 32)\n\
    \    table.insert(row, #row + 33)\n    table.insert(row, #row + 34)\n    table.insert(row,\
    \ #row + 35)\n    table.insert(row, #row + 36)\n    table.insert(row, #row + 37)\n\
    \    table.insert(row, #row + 38)\n    table.insert(row, #row + 39)\n    table.insert(row,\
    \ #row + 40)\n    table.insert(row, #row + 41)\n    table.insert(row, #row + 42)\n\
    \    table.insert(row, #row + 43)\n    table.insert(row, #row + 44)\n    table.insert(row,\
    \ #row + 45)\n    table.insert(row, #row + ", "  local row = {}\n  for _, v in\
    \ ipairs(lst) do\n    if v == x then\n      table.insert(row, 0)\n    else\n \
    \     local found = false\n      for _, v2 in ipairs(row) do\n        if v ==\
    \ v2 then\n          table.insert(row, v2)\n          found = true\n         \
    \ break\n        end\n      end\n      if not found then\n        table.insert(row,\
    \ v)\n      end\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a,\
    \ b) return b - a end)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    local found = false\n    for _, v2 in ipairs(row) do\n      if v ==\
    \ v2 then\n        found = true\n        break\n      end\n    end\n    if not\
    \ found then\n      table.insert(row, v)\n    end\n  end\n  table.sort(row, function(a,\
    \ b) return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n \
    \ table.sort(row, function(a, b) return a[#a] < b[#b] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] > b[#b] end)\n  table.sort(row, function(a, b) return\
    \ a[#a] == b[#b] end)\n  table.sort(row, function(a, b) return a[#a] <= b[#b]\
    \ end)\n  table.sort(row, function(a, b) return a[#a] >= b[#b] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] < b[#b] end)\n  table.sort(row, function(a, b) return\
    \ a[#a] > b[#b] end)\n  table.sort(row, function(a, b) return a[#a] == b[#b] end)\n\
    \  table.sort(row, function(a, b) return a[#a] <= b[#b] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] >= b[#b] end)\n  table.sort(row, function(a, b)\
    \ return a[#a] < b[#b] end)\n  table.sort(row, function(a, b) return a[#a] > b[#b]\
    \ end)\n  table.sort(row, function(a, b) return a[#a] == b[#b] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] <= b[#b] end)\n  table.sort(row, function(a, b)\
    \ return a[#a] >= b[#b] end)\n  table.sort(row, function(a, b) return a[#a] <\
    \ b[#b] end)\n  table.sort(row, function(a, b) return a[#a] > b[#b] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] == b[#b] end)\n  table.sort(row, function(a, b)\
    \ return a[#a] <= b[#b] end)\n  table.sort(row, function(a, b) return a[#a] >=\
    \ b[#b] end)\n  table.sort(row, function(a, b) return a[#a] < b[#b] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] > b[#b] end)\n  table.sort(row, function(a, b) return\
    \ a[#a] == b[#b] end)\n  table.sort(row, ", "  local row = {}\n  for i = 1, #lst\
    \ do\n    local row_x = lst[i]\n    local row_y = lst[#lst]\n    for j = 1, #row_x\
    \ do\n      if row_x[j] == x then\n        table.insert(row, { i, j })\n     \
    \ end\n    end\n  end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n\
    \  table.sort(row, function(a, b) return a[2] > b[2] end)\n  return row\nend",
  "  local row = {}\n  for i = 1, #lst do\n    local row2 = {}\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        row2 = {i, j}\n        break\n   \
    \   end\n    end\n    if row2 then\n      table.insert(row, row2)\n    end\n \
    \ end\n  table.sort(row)\n  table.sort(row, function(a, b) return a[2] > b[2]\
    \ end)\n  return row\nend", "  if x == 0 then\n    return {}\n  else\n    local\
    \ row = {}\n    for i = 1, #lst do\n      local row = { row = row }\n      for\
    \ j = 1, #lst[i] do\n        if lst[i][j] == x then\n          table.insert(row,\
    \ { j = j, i = i })\n        end\n      end\n    end\n    table.sort(row)\n  \
    \  table.sort(row, function(a, b) return a[2] > b[2] end)\n    return row\n  end\n\
    end", "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row, v)\n\
    \  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  table.sort(row, function(a, b) return a[1]\
    \ < b[1] end)\n  table.sort(row, function(a, b) return b[1] < a[1] end)\n  local\
    \ rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, v)\n  end\n\
    \  return rows\nend", "  local t = {}\n  for i = 1, #lst do\n    local row = lst[i]\n\
    \    local rowx = row[x]\n    for j = 1, #row do\n      local rowy = row[j]\n\
    \      if rowx > rowy then\n        table.insert(t, {i, j, rowx, rowy})\n    \
    \  end\n    end\n  end\n  table.sort(t, function(a, b) return a[2] > b[2] end)\n\
    \  table.sort(t, function(a, b) return a[2] < b[2] end)\n  return t\nend", " \
    \ local row = {}\n  for _, v in ipairs(lst) do\n    if v == x then\n      table.insert(row,\
    \ 0)\n    else\n      table.insert(row, v)\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n       \
    \ row = row\n      else\n        row = row{lst[i][j]}\n      end\n    end\n  end\n\
    \  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b > a\
    \ end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ {x = x, y = v})\n  end\n  return rows\nend", "  local row = {}\n  for i = 1,\
    \ #lst do\n    local row2 = {}\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        row2 = {i, j}\n        break\n      end\n    end\n    if\
    \ row2 then\n      table.insert(row, row2)\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b[1] - a[1] end)\n  return row\nend",
  "  local row = {}\n  for _, v in ipairs(lst) do\n    local found = false\n    for\
    \ _, v2 in ipairs(row) do\n      if v == v2 then\n        found = true\n     \
    \   break\n      end\n    end\n    if not found then\n      table.insert(row,\
    \ v)\n    end\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  local rows = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(rows, {x = v, y = rows[#rows]})\n  end\n  table.sort(rows,\
    \ function(a, b) return a.x < b.x end)\n  table.sort(rows, function(a, b) return\
    \ b.x < a.x end)\n  return rows\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    if v == x then\n      table.insert(row, 0)\n    else\n      local row\
    \ = row\n      for _, v in ipairs(v) do\n        if v == x then\n          table.insert(row,\
    \ 0)\n        else\n          table.insert(row, row + 1)\n        end\n      end\n\
    \    end\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  return row\nend", "    local row = {}\n\
    \    for _, v in ipairs(lst) do\n        if v == x then\n            table.insert(row,\
    \ 0)\n        else\n            table.insert(row, v)\n        end\n    end\n \
    \   table.sort(row, function(a, b) return a < b end)\n    table.sort(row, function(a,\
    \ b) return b < a end)\n    return row\nend", "  if x == nil then return {} end\n\
    \  local row = {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        row = row\n      else\n        row\
    \ = row{lst[i][j]}\n      end\n    end\n  end\n  return row\nend", "  local row\
    \ = {}\n  for i, v in ipairs(lst) do\n    local row2 = {}\n    for j, w in ipairs(v)\
    \ do\n      if w == x then\n        row2[j] = i\n      end\n    end\n    if row2\
    \ ~= nil then\n      table.insert(row, row2)\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  table.sort(row, function(a, b) return\
    \ a[1] > b[1] end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        row = row\n      else\n        row = row{lst[i][j]}\n      end\n    end\n\
    \  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b - a end)\n\
    \  return row\nend", "  local row = {}\n  for i, v in ipairs(lst) do\n    if v\
    \ == x then\n      table.insert(row, i)\n    end\n  end\n  table.sort(row)\n \
    \ table.sort(row, function(a, b) return b - a end)\n  return row\nend", "    local\
    \ row = {}\n    for i = 1, #lst do\n        local row = row\n        for j = 1,\
    \ #lst[i] do\n            if lst[i][j] == x then\n                row = row\n\
    \                break\n            else\n                row = row[j]\n     \
    \       end\n        end\n    end\n    return row\nend", "  local row = {}\n \
    \ for i = 1, #lst do\n    local row_x = lst[i]\n    local row_y = lst[#lst]\n\
    \    for j = 1, #row_x do\n      if row_x[j] == x then\n        table.insert(row,\
    \ { i, j })\n      end\n    end\n  end\n  table.sort(row, function(a, b) return\
    \ a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row =\
    \ row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        row =\
    \ row\n      else\n        row = row{lst[i][j]}\n      end\n    end\n  end\n \
    \ return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    local\
    \ found = false\n    for _, v2 in ipairs(row) do\n      if v == v2 then\n    \
    \    found = true\n        break\n      end\n    end\n    if not found then\n\
    \      table.insert(row, v)\n    end\n  end\n  table.sort(row, function(a, b)\
    \ return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  table.sort(row,\
    \ function(a, b) return a[#row] > b[#row] end)\n  table.sort(row, function(a,\
    \ b) return b[#row] > a[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ < b[#row] end)\n  table.sort(row, function(a, b) return b[#row] < a[#row] end)\n\
    \  table.sort(row, function(a, b) return a[#row] == b[#row] end)\n  table.sort(row,\
    \ function(a, b) return b[#row] == a[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] <= b[#row] end)\n  table.sort(row, function(a, b) return b[#row]\
    \ <= a[#row] end)\n  table.sort(row, function(a, b) return a[#row] >= b[#row]\
    \ end)\n  table.sort(row, function(a, b) return b[#row] >= a[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] > b[#row] end)\n  table.sort(row, function(a,\
    \ b) return b[#row] > a[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ < b[#row] end)\n  table.sort(row, function(a, b) return b[#row] < a[#row] end)\n\
    \  table.sort(row, function(a, b) return a[#row] == b[#row] end)\n  table.sort(row,\
    \ function(a, b) return b[#row] == a[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] <= b[#row] end)\n  table.sort(row, function(a, b) return b[#row]\
    \ <= a[#row] end)\n  table.sort(row, function(a, b) return a[#row] >= b[#row]\
    \ end)\n  table.sort(row, function(a, b) return b[#row] >= a[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] > b[#row] end)\n  table.sort(row, function(a,\
    \ b) return b[#row] > a[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ < b[#row] end)\n  table.sort(row, ", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    if v == x then\n      table.insert(row, v)\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ rows = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n       \
    \ table.insert(rows, {i, j})\n      end\n    end\n    table.sort(rows)\n    table.sort(rows,\
    \ function(a, b) return b[1] - a[1] end)\n    table.insert(row, rows)\n  end\n\
    \  table.sort(row)\n  table.sort(row, function(a, b) return b[1] - a[1] end)\n\
    \  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    local\
    \ found = false\n    for _, v2 in ipairs(row) do\n      if v == v2 then\n    \
    \    found = true\n        break\n      end\n    end\n    if not found then\n\
    \      table.insert(row, v)\n    end\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b > a end)\n  local coords = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(coords, {v, #row})\n  end\n  table.sort(coords, function(a,\
    \ b) return a[2] > b[2] end)\n  table.sort(coords, function(a, b) return a[1]\
    \ > b[1] end)\n  table.sort(coords, function(a, b) return a[0] > b[0] end)\n \
    \ local result = {}\n  for _, v in ipairs(coords) do\n    table.insert(result,\
    \ lst[v[1]][v[2]])\n  end\n  return result\nend", "  local row = {}\n  for _,\
    \ v in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a,\
    \ b) return a < b end)\n  table.sort(row, function(a, b) return a > b end)\n \
    \ local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, {x = v,\
    \ y = row[v]})\n  end\n  return rows\nend", "  local row = {}\n  for i, v in ipairs(lst)\
    \ do\n    local found = false\n    for _, v2 in ipairs(row) do\n      if v ==\
    \ v2 then\n        found = true\n        break\n      end\n    end\n    if not\
    \ found then\n      table.insert(row, v)\n    end\n  end\n  table.sort(row, function(a,\
    \ b) return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n \
    \ table.sort(row, function(a, b) return a[1] < b[1] end)\n  table.sort(row, function(a,\
    \ b) return b[1] < a[1] end)\n  local rows = {}\n  for i, v in ipairs(row) do\n\
    \    table.insert(rows, {x = i, y = v})\n  end\n  return rows\nend", "  local\
    \ row = {}\n  for _, v in ipairs(lst) do\n    for i = #v, 1, -1 do\n      if v[i]\
    \ == x then\n        table.insert(row, { i, v[i-1] })\n      end\n    end\n  end\n\
    \  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row, function(a,\
    \ b) return a[2] > b[2] end)\n  return row\nend", "    local t = {}\n    for i\
    \ = 1, #lst do\n        local row = lst[i]\n        local row_x = row[x]\n   \
    \     local row_y = row[#row]\n        for j = 1, #row do\n            local col_x\
    \ = row[j]\n            local col_y = row[j + 1]\n            if col_x <= x then\n\
    \                table.insert(t, {i, col_x})\n                table.insert(t,\
    \ {i, col_y})\n            elseif col_x >= x then\n                table.insert(t,\
    \ {i, col_x})\n                table.insert(t, {i, col_y})\n            elseif\
    \ col_y <= x then\n                table.insert(t, {row_x, j})\n             \
    \   table.insert(t, {row_x, j + 1})\n            elseif col_y >= x then\n    \
    \            table.insert(t, {row_x, j})\n                table.insert(t, {row_x,\
    \ j + 1})\n            end\n        end\n    end\n    table.sort(t, function(a,\
    \ b) return a[1] < b[1] end)\n    table.sort(t, function(a, b) return a[2] > b[2]\
    \ end)\n    return t\nend", "  local row = {}\n  for _, v in pairs(lst) do\n \
    \   if v == x then\n      table.insert(row, v)\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n\
    \    local found = false\n    for _, v2 in ipairs(row) do\n      if v == v2 then\n\
    \        found = true\n        break\n      end\n    end\n    if not found then\n\
    \      table.insert(row, v)\n    end\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  local rows = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(rows, {x = v, y = rows[#rows]})\n  end\n  table.sort(rows,\
    \ function(a, b) return a.x > b.x end)\n  return rows\nend", "  local row = {}\n\
    \  for _, v in ipairs(lst) do\n    local found = false\n    for _, v2 in ipairs(row)\
    \ do\n      if v == v2 then\n        found = true\n        break\n      end\n\
    \    end\n    if not found then\n      table.insert(row, v)\n    end\n  end\n\
    \  table.sort(row)\n  table.sort(row, function(a, b) return b > a end)\n  local\
    \ rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, {x = v, y =\
    \ rows[#rows]})\n  end\n  return rows\nend", "  local row = {}\n  for _, v in\
    \ ipairs(lst) do\n    local row2 = {}\n    for _, v2 in ipairs(v) do\n      if\
    \ v == x then\n        row2 = {row2, v2}\n      else\n        row2 = {row2, v2}\n\
    \      end\n    end\n    table.insert(row, row2)\n  end\n  table.sort(row, function(a,\
    \ b) return a[2] > b[2] end)\n  table.sort(row, function(a, b) return a[1] > b[1]\
    \ end)\n  return row\nend", "  local row = {}\n  for i, v in ipairs(lst) do\n\
    \    if v == x then\n      table.insert(row, i)\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b - a end)\n  return row\nend", "  local\
    \ row = {}\n  for i, v in ipairs(lst) do\n    if v == x then\n      table.insert(row,\
    \ i)\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return\
    \ b - a end)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    if v == x then\n      table.insert(row, 0)\n    else\n      local m\
    \ = #v\n      table.insert(row, { 0, #v - 1 })\n      for i = 1, m do\n      \
    \  local j = #row - 1\n        if v[i] > row[j] then\n          row[j], row[i]\
    \ = row[i], row[j]\n        end\n      end\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b[1] - a[1] end)\n  return row\nend",
  "  local row = {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        break\n      else\n        row = row[j]\n\
    \      end\n    end\n  end\n  return row\nend", "  local t = {}\n  for i = 1,\
    \ #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] ==\
    \ x then\n        table.insert(row, i)\n        table.insert(row, j)\n      end\n\
    \    end\n    table.sort(row)\n    table.sort(row, function(a, b) return b - a\
    \ end)\n    table.insert(t, row)\n  end\n  return t\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row_x = lst[i]\n    for j = 1, #row_x do\n  \
    \    if row_x[j] == x then\n        table.insert(row, { i, j })\n      end\n \
    \   end\n  end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  return row\nend", "  local row = {}\n\
    \  for _, v in ipairs(lst) do\n    if v == x then\n      table.insert(row, 0)\n\
    \    else\n      table.insert(row, v)\n    end\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b - a end)\n  return row\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row = { row = row }\n    for j = 1, #lst[i] do\n \
    \     if lst[i][j] == x then\n        row[j] = { row = row, column = j }\n   \
    \   end\n    end\n  end\n  table.sort(row, function(a, b) return a.row > b.row\
    \ end)\n  table.sort(row, function(a, b) return a.column > b.column end)\n  return\
    \ row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    local row2 =\
    \ {}\n    for _, v2 in ipairs(v) do\n      if v2 == x then\n        row2 = {row2,\
    \ v2}\n      end\n    end\n    row = { row, row2 }\n  end\n  table.sort(row, function(a,\
    \ b) return a[1] < b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2]\
    \ end)\n  return row\nend", "  local t = {}\n  for i = 1, #lst do\n    local row\
    \ = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        row[j]\
    \ = 1\n      end\n    end\n    t[#t + 1] = row\n  end\n  table.sort(t, function(a,\
    \ b) return a[1] > b[1] end)\n  table.sort(t, function(a, b) return a[2] > b[2]\
    \ end)\n  return t\nend", "  local row = {}\n  for i = 1, #lst do\n    local row\
    \ = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        break\n\
    \      else\n        row = row[[j + 1]]\n      end\n    end\n  end\n  return row\n\
    end", "  local row = {}\n  for i = 1, #lst do\n    local row = row\n    for j\
    \ = 1, #lst[i] do\n      if lst[i][j] == x then\n        break\n      else\n \
    \       row = row[j]\n      end\n    end\n  end\n  return row\nend", "  if #lst\
    \ == 0 then\n    return {}\n  end\n  local row = {}\n  for i = 1, #lst do\n  \
    \  local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        row[j] = i\n        break\n      end\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b - a end)\n  return row\nend", "  local\
    \ row = {}\n  for _, v in ipairs(lst) do\n    local found = false\n    for _,\
    \ v2 in ipairs(row) do\n      if v == v2 then\n        found = true\n        break\n\
    \      end\n    end\n    if not found then\n      table.insert(row, v)\n    end\n\
    \  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b - a end)\n\
    \  local coords = {}\n  for _, v in ipairs(row) do\n    table.insert(coords, {v,\
    \ x - 1})\n  end\n  table.sort(coords, function(a, b) return a[1] - b[1] end)\n\
    \  return coords\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return a > b end)\n  local rows = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(rows, {x = v, y = rows[#rows]})\n  end\n  table.sort(rows,\
    \ function(a, b) return a.x > b.x end)\n  table.sort(rows, function(a, b) return\
    \ a.x < b.x end)\n  return rows\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        row[#row + 1] = { i, j }\n      end\n    end\n    if #row > 0 then\n\
    \      table.insert(row, { #row, #row - 1 })\n    end\n    table.sort(row)\n \
    \   table.sort(row, function(a, b) return a[1] > b[1] end)\n    table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n    table.insert(row, { #row, #row -\
    \ 1 })\n    table.insert(row, row)\n  end\n  return row\nend", "  local row =\
    \ {}\n  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ {x = x, y = v})\n  end\n  return rows\nend", "  local row = {}\n  for i = 1,\
    \ #lst do\n    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        break\n      else\n        row = row[[j]]\n      end\n  \
    \  end\n  end\n  return row\nend", "  if x == 0 then\n    return {}\n  end\n \
    \ local row = {}\n  for _, v in ipairs(lst) do\n    if v == x then\n      table.insert(row,\
    \ 0)\n    else\n      table.insert(row, v)\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b - a end)\n  table.sort(row, function(a,\
    \ b) return a[b] end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst\
    \ do\n    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x\
    \ then\n        row = row\n      else\n        row = row{lst[i][j]}\n      end\n\
    \    end\n  end\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    local rows = {}\n    for _, v2 in ipairs(v) do\n      if v2 == x then\n\
    \        rows[#rows + 1] = {v, v2}\n      end\n    end\n    table.sort(rows, function(a,\
    \ b) return a[2] > b[2] end)\n    table.sort(rows, function(a, b) return a[1]\
    \ > b[1] end)\n    table.insert(row, rows)\n  end\n  return row\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        break\n      else\n        row = row[j]\n\
    \      end\n    end\n  end\n  return row\nend", "  local row = {}\n  for _, v\
    \ in ipairs(lst) do\n    if v == x then\n      table.insert(row, 0)\n    else\n\
    \      table.insert(row, v)\n    end\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b - a end)\n  return row\nend", "  local row = {}\n  for\
    \ _, v in ipairs(lst) do\n    local found = false\n    for _, v2 in ipairs(row)\
    \ do\n      if v == v2 then\n        found = true\n        break\n      end\n\
    \    end\n    if not found then\n      table.insert(row, v)\n    end\n  end\n\
    \  table.sort(row, function(a, b) return a < b end)\n  table.sort(row, function(a,\
    \ b) return b < a end)\n  local coords = {}\n  for _, v in ipairs(row) do\n  \
    \  table.insert(coords, {v, #row})\n  end\n  table.sort(coords, function(a, b)\
    \ return a[2] < b[2] end)\n  table.sort(coords, function(a, b) return b[2] < a[2]\
    \ end)\n  local result = {}\n  for _, v in ipairs(coords) do\n    table.insert(result,\
    \ lst[v[1]][v[2]])\n  end\n  return result\nend", "  local row = {}\n  for i,\
    \ v in ipairs(lst) do\n    if v == x then\n      table.insert(row, i)\n    end\n\
    \  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b - a end)\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row =\
    \ row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        row =\
    \ row\n      else\n        row = row[[j]]\n      end\n    end\n  end\n  return\
    \ row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    if v == x then\n\
    \      table.insert(row, 0)\n    else\n      table.insert(row, v)\n    end\n \
    \ end\n  table.sort(row)\n  table.sort(row, function(a, b) return b - a end)\n\
    \  return row\nend", "  local t = {}\n  for _, row in ipairs(lst) do\n    local\
    \ row2 = {}\n    for _, v in ipairs(row) do\n      if v == x then\n        table.insert(row2,\
    \ {0, v})\n      else\n        table.insert(row2, {v + 1, v})\n      end\n   \
    \ end\n    table.sort(row2, function(a, b) return a[1] > b[1] end)\n    table.sort(row2,\
    \ function(a, b) return a[2] > b[2] end)\n    table.insert(t, row2)\n  end\n \
    \ return t\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    local found\
    \ = false\n    for _, v2 in ipairs(row) do\n      if v == v2 then\n        found\
    \ = true\n        break\n      end\n    end\n    if not found then\n      table.insert(row,\
    \ v)\n    end\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  local rows = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(rows, {x = v, y = rows[#rows]})\n  end\n  table.sort(rows,\
    \ function(a, b) return a.x < b.x end)\n  table.sort(rows, function(a, b) return\
    \ b.x < a.x end)\n  return rows\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a < b end)\n  table.sort(row, function(a, b) return a > b end)\n  table.sort(row,\
    \ function(a, b) return a[#row] < b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] > b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ == b[#row] end)\n  table.sort(row, function(a, b) return a[#row] <= b[#row]\
    \ end)\n  table.sort(row, function(a, b) return a[#row] >= b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] == b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] <= b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ >= b[#row] end)\n  table.sort(row, function(a, b) return a[#row] == b[#row]\
    \ end)\n  table.sort(row, function(a, b) return a[#row] <= b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] >= b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] == b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ <= b[#row] end)\n  table.sort(row, function(a, b) return a[#row] >= b[#row]\
    \ end)\n  table.sort(row, function(a, b) return a[#row] == b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] <= b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] >= b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ == b[#row] end)\n  table.sort(row, function(a, b) return a[#row] <= b[#row]\
    \ end)\n  table.sort(row, function(a, b) return a[#row] >= b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] == b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] <= b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ >= b[#row] end)\n  table.sort(row, function(a, b) return a[#row] == b[#row]\
    \ end)\n  table.sort(row, function(a, b) return a[#row] <= b[#row] end)\n", " \
    \ local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n\
    \  table.sort(row)\n  table.sort(row, function(a, b)\n    return b - x\n  end)\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row2 =\
    \ {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        row2 =\
    \ {i, j}\n        break\n      end\n    end\n    if row2 ~= nil then\n      table.insert(row,\
    \ row2)\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return\
    \ b[1] < a[1] end)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    if v == x then\n      table.insert(row, 0)\n    else\n      table.insert(row,\
    \ v)\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return\
    \ b - a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n  \
    \  local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        break\n      else\n        row = row[j]\n      end\n    end\n  end\n\
    \  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    if v\
    \ == x then\n      table.insert(row, 0)\n    else\n      local i = 1\n      while\
    \ i <= #row and row[i] < v do\n        i = i + 1\n      end\n      table.insert(row,\
    \ i)\n    end\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  return row\nend", "  local row = {}\n  for\
    \ _, v in ipairs(lst) do\n    for i = #v, 1, -1 do\n      if v[i] == x then\n\
    \        table.insert(row, { i, #v - 1 })\n      end\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  return row\nend", "  if x == 0 then\n    return {}\n  end\n\
    \  local row = {}\n  local i = 1\n  while i <= #lst do\n    local j = i - 1\n\
    \    while j >= 0 and lst[j] == x do\n      j = j - 1\n    end\n    if j >= 0\
    \ then\n      table.insert(row, i)\n      i = j + 1\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b - a end)\n  local rows = {}\n  for\
    \ _, v in ipairs(row) do\n    table.insert(rows, {v, lst[v]})\n  end\n  return\
    \ rows\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    local found\
    \ = false\n    for _, v2 in ipairs(row) do\n      if v == v2 then\n        found\
    \ = true\n        break\n      end\n    end\n    if not found then\n      table.insert(row,\
    \ v)\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return\
    \ b > a end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ {v, 0})\n  end\n  return rows\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        break\n      else\n        row = row[j]\n      end\n    end\n  end\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row =\
    \ row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        break\n\
    \      else\n        row = row[j]\n      end\n    end\n  end\n  return row\nend",
  "  local row = {}\n  for _, v in ipairs(lst) do\n    local found = false\n    for\
    \ _, v2 in ipairs(row) do\n      if v == v2 then\n        found = true\n     \
    \   break\n      end\n    end\n    if not found then\n      table.insert(row,\
    \ v)\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return\
    \ b > a end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ {x = v, y = rows[#rows]})\n  end\n  return rows\nend", "  local row = {}\n \
    \ for i = 1, #lst do\n    local row_x = lst[i]\n    for j = 1, #row_x do\n   \
    \   if row_x[j] == x then\n        table.insert(row, { i, j })\n      end\n  \
    \  end\n  end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  return row\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i] do\n      if\
    \ lst[i][j] == x then\n        row[j] = i\n        break\n      end\n    end\n\
    \  end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  return row\nend", "  local row = {}\n\
    \  for _, v in ipairs(lst) do\n    if v == x then\n      table.insert(row, 0)\n\
    \    else\n      table.insert(row, v)\n    end\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b - a end)\n  return row\nend", "  local row = {}\n  for\
    \ i, v in ipairs(lst) do\n    if v == x then\n      table.insert(row, i)\n   \
    \ end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return a[b]\
    \ ~= b end)\n  return row\nend", "  if lst[x] == nil then\n    return {}\n  end\n\
    \  local row = {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i]\
    \ do\n      row[j] = row[j] or {}\n      row = row[j]\n    end\n  end\n  return\
    \ row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row = row\n  \
    \  for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        row[j] = i\n \
    \       break\n      end\n    end\n  end\n  table.sort(row, function(a, b) return\
    \ a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  return row\n\
    end", "  local row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j =\
    \ 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row, i - 1,\
    \ j - 1)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row - 1, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(", "  if x == 0 then\n    return {}\n  else\n    local row =\
    \ {}\n    for i = 1, #lst do\n      table.insert(row, get_row(lst[i], x - 1))\n\
    \    end\n    table.sort(row)\n    table.sort(row, function(a, b) return b[1]\
    \ < a[1] end)\n    return row\n  end\nend", "  if x == 0 then\n    return {}\n\
    \  end\n  local row = {}\n  for i = 1, #lst do\n    local row = row\n    for j\
    \ = 1, #lst[i] do\n      if lst[i][j] == x then\n        row = { { i, j }, row\
    \ }\n        break\n      end\n    end\n  end\n  table.sort(row, function(a, b)\
    \ return a[1] < b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2]\
    \ end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        row[#row\
    \ + 1] = { i, j }\n      end\n    end\n    table.sort(row)\n    table.sort(row,\
    \ function(a, b) return b[1] < a[1] end)\n    row = {row}\n  end\n  return row\n\
    end", "    local row = {}\n    for _, v in ipairs(lst) do\n        if v == x then\n\
    \            table.insert(row, 0)\n        else\n            table.insert(row,\
    \ v)\n        end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    return row\nend", "  local t = {}\n  for i = 1, #lst\
    \ do\n    local row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        table.insert(row, j)\n      end\n    end\n    table.insert(t, row)\n\
    \  end\n  table.sort(t, function(a, b) return a[1] > b[1] end)\n  table.sort(t,\
    \ function(a, b) return a[2] > b[2] end)\n  return t\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i] do\n      if\
    \ lst[i][j] == x then\n        row = row\n      else\n        row = row[[j]]\n\
    \      end\n    end\n  end\n  return row\nend", "  local row = {}\n  for i = 1,\
    \ #lst do\n    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        break\n      else\n        row = row[j]\n      end\n    end\n\
    \  end\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n\
    \    local found = false\n    for _, v2 in ipairs(row) do\n      if v == v2 then\n\
    \        found = true\n        break\n      end\n    end\n    if not found then\n\
    \      table.insert(row, v)\n    end\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b > a end)\n  local coords = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(coords, {x = v, y = #row})\n  end\n  table.sort(coords,\
    \ function(a, b) return a.x > b.x end)\n  table.sort(coords, function(a, b) return\
    \ a.y > b.y end)\n  local result = {}\n  for _, v in ipairs(coords) do\n    table.insert(result,\
    \ v)\n  end\n  return result\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        break\n      else\n        row = row[j]\n      end\n    end\n  end\n\
    \  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return a > b end)\n  local rows = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(rows, {x = x, y = v})\n  end\n  return rows\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        break\n      else\n        row = row[j]\n\
    \      end\n    end\n  end\n  return row\nend", "  local row = {}\n  for _, v\
    \ in ipairs(lst) do\n    for i = #v, 1, -1 do\n      if v[i] == x then\n     \
    \   table.insert(row, { i, #v - i })\n      end\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a < b end)\n  table.sort(row, function(a, b) return a > b end)\n  table.sort(row,\
    \ function(a, b) return a[#row] > b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] < b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ == b[#row] end)\n  table.sort(row, function(a, b) return a[#row] <= b[#row]\
    \ end)\n  table.sort(row, function(a, b) return a[#row] >= b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] == b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] >= b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ <= b[#row] end)\n  table.sort(row, function(a, b) return a[#row] == b[#row]\
    \ end)\n  table.sort(row, function(a, b) return a[#row] >= b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] <= b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] == b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ >= b[#row] end)\n  table.sort(row, function(a, b) return a[#row] <= b[#row]\
    \ end)\n  table.sort(row, function(a, b) return a[#row] == b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] >= b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] <= b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ == b[#row] end)\n  table.sort(row, function(a, b) return a[#row] >= b[#row]\
    \ end)\n  table.sort(row, function(a, b) return a[#row] <= b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] == b[#row] end)\n  table.sort(row, function(a,\
    \ b) return a[#row] >= b[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ <= b[#row] end)\n  table.sort(row, function(a, b) return a[#row] == b[#row]\
    \ end)\n  table.sort(row, function(a, b) return a[#row] >= b[#row] end)\n", " \
    \ local row = {}\n  for _, v in ipairs(lst) do\n    local found = false\n    for\
    \ _, v2 in ipairs(row) do\n      if v == v2 then\n        found = true\n     \
    \   break\n      end\n    end\n    if not found then\n      table.insert(row,\
    \ v)\n    end\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  table.sort(row, function(a, b) return a[1]\
    \ < b[1] end)\n  table.sort(row, function(a, b) return b[1] < a[1] end)\n  table.sort(row,\
    \ function(a, b) return a[2] < b[2] end)\n  table.sort(row, function(a, b) return\
    \ b[2] < a[2] end)\n  table.sort(row, function(a, b) return a[3] < b[3] end)\n\
    \  table.sort(row, function(a, b) return b[3] < a[3] end)\n  table.sort(row, function(a,\
    \ b) return a[4] < b[4] end)\n  table.sort(row, function(a, b) return b[4] < a[4]\
    \ end)\n  table.sort(row, function(a, b) return a[5] < b[5] end)\n  table.sort(row,\
    \ function(a, b) return b[5] < a[5] end)\n  table.sort(row, function(a, b) return\
    \ a[6] < b[6] end)\n  table.sort(row, function(a, b) return b[6] < a[6] end)\n\
    \  table.sort(row, function(a, b) return a[1] < b[1] end)\n  table.sort(row, function(a,\
    \ b) return b[1] < a[1] end)\n  table.sort(row, function(a, b) return a[2] < b[2]\
    \ end)\n  table.sort(row, function(a, b) return b[2] < a[2] end)\n  table.sort(row,\
    \ function(a, b) return a[3] < b[3] end)\n  table.sort(row, function(a, b) return\
    \ b[3] < a[3] end)\n  table.sort(row, function(a, b) return a[4] < b[4] end)\n\
    \  table.sort(row, function(a, b) return b[4] < a[4] end)\n  table.sort(row, function(a,\
    \ b) return a[5] < b[5] end)\n  table.sort(row, function(a, b) return b[5] < a[5]\
    \ end)\n  table.sort(row, function(a, b) return a[6] < b[6] end)\n  table.sort(row,\
    \ function(a, b) return b[6] < a[6] end)\n  return row\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i] do\n      if\
    \ lst[i][j] == x then\n        break\n      else\n        row = row[j]\n     \
    \ end\n    end\n  end\n  return row\nend", "  local row = {}\n  for i = 1, #lst\
    \ do\n    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x\
    \ then\n        row = row\n      else\n        row = row{lst[i][j]}\n      end\n\
    \    end\n  end\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    if v == x then\n      table.insert(row, 0)\n    else\n      table.insert(row,\
    \ v)\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b)\n  \
    \  return b - a\n  end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst\
    \ do\n    local rows = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x\
    \ then\n        rows[#rows + 1] = {i, j}\n      end\n    end\n    table.sort(rows,\
    \ function(a, b) return a[1] > b[1] end)\n    table.sort(rows, function(a, b)\
    \ return a[2] > b[2] end)\n    table.insert(row, rows)\n  end\n  table.sort(row,\
    \ function(a, b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    local found = false\n    for _, v2 in ipairs(row) do\n      if v ==\
    \ v2 then\n        found = true\n        break\n      end\n    end\n    if not\
    \ found then\n      table.insert(row, v)\n    end\n  end\n  table.sort(row, function(a,\
    \ b) return a < b end)\n  table.sort(row, function(a, b) return a > b end)\n \
    \ table.sort(row, function(a, b) return a[1] < b[1] end)\n  table.sort(row, function(a,\
    \ b) return a[1] > b[1] end)\n  return row\nend", "  local row = {}\n  for _,\
    \ v in ipairs(lst) do\n    local found = false\n    for _, v2 in ipairs(row) do\n\
    \      if v == v2 then\n        found = true\n        break\n      end\n    end\n\
    \    if not found then\n      table.insert(row, v)\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ {x = v, y = rows[#rows]})\n  end\n  table.sort(rows, function(a, b) return a.x\
    \ < b.x end)\n  table.sort(rows, function(a, b) return b.x < a.x end)\n  return\
    \ rows\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return a > b end)\n  local rows = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(rows, {x = v, y = rows[v].y})\n  end\n  table.sort(rows,\
    \ function(a, b) return a.x < b.x end)\n  table.sort(rows, function(a, b) return\
    \ a.x > b.x end)\n  table.sort(rows, function(a, b) return a.y < b.y end)\n  table.sort(rows,\
    \ function(a, b) return a.y > b.y end)\n  return rows\nend", "  local row = {}\n\
    \  for _, v in ipairs(lst) do\n    local found = false\n    for _, v2 in ipairs(row)\
    \ do\n      if v == v2 then\n        found = true\n        break\n      end\n\
    \    end\n    if not found then\n      table.insert(row, v)\n    end\n  end\n\
    \  table.sort(row, function(a, b) return a < b end)\n  table.sort(row, function(a,\
    \ b) return b < a end)\n  table.sort(row, function(a, b) return a[#a] < b[#b]\
    \ end)\n  table.sort(row, function(a, b) return b[#b] < a[#a] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] < b[#b] end)\n  table.sort(row, function(a, b) return\
    \ b[#b] < a[#a] end)\n  table.sort(row, function(a, b) return a[#a] < b[#b] end)\n\
    \  table.sort(row, function(a, b) return b[#b] < a[#a] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] < b[#b] end)\n  table.sort(row, function(a, b) return\
    \ b[#b] < a[#a] end)\n  table.sort(row, function(a, b) return a[#a] < b[#b] end)\n\
    \  table.sort(row, function(a, b) return b[#b] < a[#a] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] < b[#b] end)\n  table.sort(row, function(a, b) return\
    \ b[#b] < a[#a] end)\n  table.sort(row, function(a, b) return a[#a] < b[#b] end)\n\
    \  table.sort(row, function(a, b) return b[#b] < a[#a] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] < b[#b] end)\n  table.sort(row, function(a, b) return\
    \ b[#b] < a[#a] end)\n  table.sort(row, function(a, b) return a[#a] < b[#b] end)\n\
    \  table.sort(row, function(a, b) return b[#b] < a[#a] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] < b[#b] end)\n  table.sort(row, function(a, b) return\
    \ b[#b] < a[#a] end)\n  table.sort(row, function(a, b) return a[#a] < b[#b] end)\n\
    \  table.sort(row, function(a, b) return b[#b] < a[#a] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] < b[#b] end)\n  table.sort(row, function(a, b) return\
    \ b[#b] < ", "  local row = {}\n  for _, v in pairs(lst) do\n    local found =\
    \ false\n    for _, v2 in pairs(row) do\n      if v == v2 then\n        found\
    \ = true\n        break\n      end\n    end\n    if not found then\n      table.insert(row,\
    \ v)\n    end\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  local rows = {}\n  for _, v in pairs(row)\
    \ do\n    table.insert(rows, {x = v, y = rows[#rows]})\n  end\n  return rows\n\
    end", "  local t = {}\n  for i = 1, #lst do\n    local row = {}\n    for j = 1,\
    \ #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row, j)\n   \
    \   end\n    end\n    table.sort(row)\n    table.sort(row, function(a, b) return\
    \ b - a end)\n    table.insert(t, row)\n  end\n  return t\nend", "  local row\
    \ = {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i] do\n\
    \      if lst[i][j] == x then\n        row = row\n      else\n        row = row{lst[i][j]}\n\
    \      end\n    end\n  end\n  return row\nend", "  if #lst == 0 then return {}\
    \ end\n  local row = {}\n  for i = 1, #lst do\n    local row = row\n    for j\
    \ = 1, #lst[i] do\n      if lst[i][j] == x then\n        row = row\n      else\n\
    \        row = row[[j]]\n      end\n    end\n  end\n  return row\nend", "  local\
    \ t = {}\n  for i = 1, #lst do\n    local row = lst[i]\n    local row_x = row[x]\n\
    \    for j = 1, #row do\n      local row_y = row[j]\n      if row_x == x then\n\
    \        table.insert(t, {i, j})\n      end\n    end\n  end\n  table.sort(t, function(a,\
    \ b) return a[1] > b[1] end)\n  table.sort(t, function(a, b) return a[2] > b[2]\
    \ end)\n  return t\nend", "  local row = {}\n  for i = 1, #lst do\n    local row\
    \ = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        break\n\
    \      else\n        row = row[j]\n      end\n    end\n  end\n  return row\nend",
  "  local row = {}\n  for i = 1, #lst do\n    local row_x = lst[i]\n    for j = 1,\
    \ #row_x do\n      if row_x[j] == x then\n        table.insert(row, { i, j })\n\
    \      end\n    end\n  end\n  table.sort(row, function(a, b) return a[1] > b[1]\
    \ end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n  return row\n\
    end", "  local row = {}\n  for i = 1, #lst do\n    local row = row\n    for j\
    \ = 1, #lst[i] do\n      if lst[i][j] == x then\n        row = row\n      else\n\
    \        row = row{lst[i][j]}\n      end\n    end\n  end\n  return row\nend",
  "  local row = {}\n  for i = 1, #lst do\n    local rows = {}\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        rows[#rows + 1] = { i, j }\n     \
    \ end\n    end\n    table.sort(rows, function(a, b) return b[1] - a[1] end)\n\
    \    table.sort(rows, function(a, b) return b[2] - a[2] end)\n    for _, v in\
    \ ipairs(rows) do\n      table.insert(row, v)\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return b[1] - a[1] end)\n  table.sort(row, function(a, b) return\
    \ b[2] - a[2] end)\n  return row\nend", "    local t = {}\n    for i = 1, #lst\
    \ do\n        local row = lst[i]\n        for j = 1, #row do\n            if row[j]\
    \ == x then\n                table.insert(t, {i, j, row})\n            end\n \
    \       end\n    end\n    table.sort(t, function(a, b) return a[2] > b[2] end)\n\
    \    table.sort(t, function(a, b) return a[1] > b[1] end)\n    return t\nend",
  "  if x == 0 then\n    return {}\n  end\n  local row = {}\n  for i = 1, #lst do\n\
    \    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        row = row\n      else\n        row = row..{lst[i][j], 0}\n      end\n\
    \    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b[1]\
    \ < a[1] end)\n  return row\nend", "  if #lst == 0 then return {{}} end\n  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        row[j] = i\n        break\n      end\n\
    \    end\n  end\n  table.sort(row, function(a, b) return a[#a] <= b[#b] end)\n\
    \  table.sort(row, function(a, b) return a[#a] > b[#b] end)\n  return row\nend",
  "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n\
    \  table.sort(row, function(a, b) return a < b end)\n  table.sort(row, function(a,\
    \ b) return b < a end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ {x = v, y = rows[#rows]})\n  end\n  table.sort(rows, function(a, b) return a.x\
    \ < b.x end)\n  table.sort(rows, function(a, b) return b.x < a.x end)\n  return\
    \ rows\nend", "  local row = {}\n  for i = 1, #lst do\n    local row = row\n \
    \   for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        row = row\n \
    \     else\n        row = row[[j]]\n      end\n    end\n  end\n  return row\n\
    end", "  if x == 0 then\n    return {}\n  else\n    local row = {}\n    for i\
    \ = 1, #lst do\n      table.insert(row, get_row(lst[i], x - 1))\n    end\n   \
    \ table.sort(row)\n    table.sort(row, function(a, b) return b[1] < a[1] end)\n\
    \    return row\n  end\nend", "  local t = {}\n  for i = 1, #lst do\n    local\
    \ row = lst[i]\n    local row_x = row[x]\n    for j = 1, #row do\n      local\
    \ row_y = row[j]\n      t[#t + 1] = {row_x, row_y}\n    end\n  end\n  table.sort(t,\
    \ function(a, b) return a[1] > b[1] end)\n  table.sort(t, function(a, b) return\
    \ a[2] > b[2] end)\n  return t\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        row = row\n        break\n      end\n    end\n  end\n  return row\nend",
  "    local row = {}\n    for i = 1, #lst do\n        local rows = {}\n        for\
    \ j = 1, #lst[i] do\n            if lst[i][j] == x then\n                table.insert(rows,\
    \ {i, j})\n            end\n        end\n        table.sort(rows)\n        table.sort(rows,\
    \ function(a, b) return b[1] - a[1] end)\n        table.insert(row, rows)\n  \
    \  end\n    table.sort(row)\n    table.sort(row, function(a, b) return b[1] -\
    \ a[1] end)\n    return row\nend", "  local row = {}\n  for i = 1, #lst do\n \
    \   local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        break\n      else\n        row = row[j]\n      end\n    end\n  end\n\
    \  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  local rows = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(rows, {x = v, y = rows[#rows]})\n  end\n  table.sort(rows,\
    \ function(a, b) return a.x < b.x end)\n  table.sort(rows, function(a, b) return\
    \ b.x < a.x end)\n  return rows\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        row = row\n      else\n        row = row{lst[i][j]}\n      end\n    end\n\
    \  end\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n\
    \    for _, v2 in ipairs(v) do\n      if v2 == x then\n        table.insert(row,\
    \ v)\n      end\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a,\
    \ b) return b[1] < a[1] end)\n  return row\nend", "  local row = {}\n  for i =\
    \ 1, #lst do\n    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        row = row\n      else\n        row = row..{lst[i][j], 0}\n\
    \      end\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b)\
    \ return b[1] > a[1] end)\n  return row\nend", "  local row = {}\n  for i = 1,\
    \ #lst do\n    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        break\n      else\n        row = row[j]\n      end\n    end\n\
    \  end\n  return row\nend", "  local row = {}\n  for _, v in pairs(lst) do\n \
    \   local row2 = {}\n    for _, v2 in pairs(v) do\n      if v == x then\n    \
    \    row2 = {x = v2, y = row2.y}\n      else\n        row2 = {x = row2.x, y =\
    \ v2}\n      end\n    end\n    table.insert(row, row2)\n  end\n  table.sort(row,\
    \ function(a, b) return a.x > b.x end)\n  table.sort(row, function(a, b) return\
    \ a.y > b.y end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row2 = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        row2[j] = i\n      end\n    end\n    table.insert(row, row2)\n  end\n\
    \  table.sort(row, function(a, b) return a[2] > b[2] end)\n  table.sort(row, function(a,\
    \ b) return a[1] > b[1] end)\n  return row\nend", "  local row = {}\n  for i =\
    \ 1, #lst do\n    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        break\n      else\n        row = row[j]\n      end\n    end\n\
    \  end\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n\
    \    local found = false\n    for _, v2 in ipairs(row) do\n      if v == v2 then\n\
    \        found = true\n        break\n      end\n    end\n    if not found then\n\
    \      table.insert(row, v)\n    end\n  end\n  table.sort(row, function(a, b)\
    \ return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  table.sort(row,\
    \ function(a, b) return a[#a] < b[#b] end)\n  table.sort(row, function(a, b) return\
    \ a[#a] > b[#b] end)\n  table.sort(row, function(a, b) return a[#a] == b[#b] end)\n\
    \  table.sort(row, function(a, b) return a[#a] <= b[#b] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] >= b[#b] end)\n  table.sort(row, function(a, b)\
    \ return a[#a] < b[#b] end)\n  table.sort(row, function(a, b) return a[#a] > b[#b]\
    \ end)\n  table.sort(row, function(a, b) return a[#a] == b[#b] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] <= b[#b] end)\n  table.sort(row, function(a, b)\
    \ return a[#a] >= b[#b] end)\n  table.sort(row, function(a, b) return a[#a] <\
    \ b[#b] end)\n  table.sort(row, function(a, b) return a[#a] > b[#b] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] == b[#b] end)\n  table.sort(row, function(a, b)\
    \ return a[#a] <= b[#b] end)\n  table.sort(row, function(a, b) return a[#a] >=\
    \ b[#b] end)\n  table.sort(row, function(a, b) return a[#a] < b[#b] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] > b[#b] end)\n  table.sort(row, function(a, b) return\
    \ a[#a] == b[#b] end)\n  table.sort(row, function(a, b) return a[#a] <= b[#b]\
    \ end)\n  table.sort(row, function(a, b) return a[#a] >= b[#b] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] < b[#b] end)\n  table.sort(row, function(a, b) return\
    \ a[#a] > b[#b] end)\n  table.sort(row, function(a, b) return a[#a] == b[#b] end)\n\
    \  table.sort(row, ", "  local row = {}\n  for i = 1, #lst do\n    local row =\
    \ row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        break\n\
    \      else\n        row = row[j]\n      end\n    end\n  end\n  return row\nend",
  "    local row = {}\n    for i = 1, #lst do\n        local row = row\n        for\
    \ j = 1, #lst[i] do\n            row = row[j]\n        end\n        if row ==\
    \ x then\n            return row\n        end\n    end\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i] do\n      if\
    \ lst[i][j] == x then\n        row = row\n      else\n        row = row{lst[i][j]}\n\
    \      end\n    end\n  end\n  return row\nend", "  if x == 0 then\n    return\
    \ {}\n  end\n  local row = {}\n  for _, v in ipairs(lst) do\n    local found =\
    \ false\n    for _, v2 in ipairs(row) do\n      if v == v2 then\n        found\
    \ = true\n        break\n      end\n    end\n    if not found then\n      table.insert(row,\
    \ v)\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return\
    \ b > a end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ {v, 0})\n  end\n  return rows\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        break\n      else\n        row = row[j]\n      end\n    end\n  end\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row =\
    \ row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        break\n\
    \      else\n        row = row[j]\n      end\n    end\n  end\n  return row\nend",
  "    local t = {}\n    for i = 1, #lst do\n        local row = {}\n        for j\
    \ = 1, #lst[i] do\n            if lst[i][j] == x then\n                table.insert(row,\
    \ j)\n            end\n        end\n        table.insert(t, row)\n    end\n  \
    \  table.sort(t)\n    table.sort(t, function(a, b) return b[1] - a[1] end)\n \
    \   return t\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    local\
    \ found = false\n    for _, v2 in ipairs(row) do\n      if v == v2 then\n    \
    \    found = true\n        break\n      end\n    end\n    if not found then\n\
    \      table.insert(row, v)\n    end\n  end\n  table.sort(row, function(a, b)\
    \ return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  table.sort(row,\
    \ function(a, b) return a[#a] < b[#b] end)\n  table.sort(row, function(a, b) return\
    \ a[#a] > b[#b] end)\n  table.sort(row, function(a, b) return a[#a] == b[#b] end)\n\
    \  table.sort(row, function(a, b) return a[#a] <= b[#b] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] >= b[#b] end)\n  table.sort(row, function(a, b)\
    \ return a[#a] < b[#b] end)\n  table.sort(row, function(a, b) return a[#a] > b[#b]\
    \ end)\n  table.sort(row, function(a, b) return a[#a] == b[#b] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] <= b[#b] end)\n  table.sort(row, function(a, b)\
    \ return a[#a] >= b[#b] end)\n  table.sort(row, function(a, b) return a[#a] <\
    \ b[#b] end)\n  table.sort(row, function(a, b) return a[#a] > b[#b] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] == b[#b] end)\n  table.sort(row, function(a, b)\
    \ return a[#a] <= b[#b] end)\n  table.sort(row, function(a, b) return a[#a] >=\
    \ b[#b] end)\n  table.sort(row, function(a, b) return a[#a] < b[#b] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] > b[#b] end)\n  table.sort(row, function(a, b) return\
    \ a[#a] == b[#b] end)\n  table.sort(row, function(a, b) return a[#a] <= b[#b]\
    \ end)\n  table.sort(row, function(a, b) return a[#a] >= b[#b] end)\n  table.sort(row,\
    \ function(a, b) return a[#a] < b[#b] end)\n  table.sort(row, function(a, b) return\
    \ a[#a] > b[#b] end)\n  table.sort(row, function(a, b) return a[#a] == b[#b] end)\n\
    \  table.sort(row, ", "  local row = {}\n  for i = 1, #lst do\n    local rows\
    \ = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(rows,\
    \ {i, j, true})\n      else\n        table.insert(rows, {i, j, false})\n     \
    \ end\n    end\n    table.sort(rows)\n    table.sort(rows[#rows])\n    table.insert(row,\
    \ rows[#rows])\n  end\n  table.sort(row)\n  table.sort(row[#row])\n  return row\n\
    end", "  local row = {}\n  for _, v in ipairs(lst) do\n    local found = false\n\
    \    for _, v2 in ipairs(row) do\n      if v == v2 then\n        found = true\n\
    \        break\n      end\n    end\n    if not found then\n      table.insert(row,\
    \ v)\n    end\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  table.sort(row, function(a, b) return a[#row]\
    \ > b[#row] end)\n  table.sort(row, function(a, b) return b[#row] > a[#row] end)\n\
    \  table.sort(row, function(a, b) return a[#row] == b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] <= b[#row] end)\n  table.sort(row, function(a,\
    \ b) return b[#row] <= a[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ < b[#row] end)\n  table.sort(row, function(a, b) return b[#row] < a[#row] end)\n\
    \  table.sort(row, function(a, b) return a[#row] == b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] >= b[#row] end)\n  table.sort(row, function(a,\
    \ b) return b[#row] >= a[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ < b[#row] end)\n  table.sort(row, function(a, b) return b[#row] < a[#row] end)\n\
    \  table.sort(row, function(a, b) return a[#row] == b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] <= b[#row] end)\n  table.sort(row, function(a,\
    \ b) return b[#row] <= a[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ < b[#row] end)\n  table.sort(row, function(a, b) return b[#row] < a[#row] end)\n\
    \  table.sort(row, function(a, b) return a[#row] == b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] >= b[#row] end)\n  table.sort(row, function(a,\
    \ b) return b[#row] >= a[#row] end)\n  table.sort(row, function(a, b) return a[#row]\
    \ < b[#row] end)\n  table.sort(row, function(a, b) return b[#row] < a[#row] end)\n\
    \  table.sort(row, function(a, b) return a[#row] == b[#row] end)\n  table.sort(row, ",
  "  local row = {}\n  for _, v in ipairs(lst) do\n    local found = false\n    for\
    \ _, v2 in ipairs(row) do\n      if v == v2 then\n        found = true\n     \
    \   break\n      end\n    end\n    if not found then\n      table.insert(row,\
    \ v)\n    end\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  table.sort(row, function(a, b) return a[#a]\
    \ < b[#b] end)\n  table.sort(row, function(a, b) return b[#b] < a[#a] end)\n \
    \ table.sort(row, function(a, b) return a[#a] < b[#b] end)\n  table.sort(row,\
    \ function(a, b) return b[#b] < a[#a] end)\n  table.sort(row, function(a, b) return\
    \ a[#a] < b[#b] end)\n  table.sort(row, function(a, b) return b[#b] < a[#a] end)\n\
    \  table.sort(row, function(a, b) return a[#a] < b[#b] end)\n  table.sort(row,\
    \ function(a, b) return b[#b] < a[#a] end)\n  table.sort(row, function(a, b) return\
    \ a[#a] < b[#b] end)\n  table.sort(row, function(a, b) return b[#b] < a[#a] end)\n\
    \  table.sort(row, function(a, b) return a[#a] < b[#b] end)\n  table.sort(row,\
    \ function(a, b) return b[#b] < a[#a] end)\n  table.sort(row, function(a, b) return\
    \ a[#a] < b[#b] end)\n  table.sort(row, function(a, b) return b[#b] < a[#a] end)\n\
    \  table.sort(row, function(a, b) return a[#a] < b[#b] end)\n  table.sort(row,\
    \ function(a, b) return b[#b] < a[#a] end)\n  table.sort(row, function(a, b) return\
    \ a[#a] < b[#b] end)\n  table.sort(row, function(a, b) return b[#b] < a[#a] end)\n\
    \  table.sort(row, function(a, b) return a[#a] < b[#b] end)\n  table.sort(row,\
    \ function(a, b) return b[#b] < a[#a] end)\n  table.sort(row, function(a, b) return\
    \ a[#a] < b[#b] end)\n  table.sort(row, function(a, b) return b[#b] < a[#a] end)\n\
    \  table.sort(row, function(a, b) return a[#a] < b[#b] end)\n  table.sort(row,\
    \ function(a, b) return b[#b] < ", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    local row2 = {}\n    for _, v2 in ipairs(v) do\n      if v == x then\n\
    \        row2[1] = v2\n      elseif v2 < x then\n        row2[1] = v2\n      \
    \  row2[2] = v\n      else\n        row2[1] = v\n        row2[2] = v2\n      end\n\
    \    end\n    table.insert(row, row2)\n  end\n  table.sort(row, function(a, b)\
    \ return a[2] < b[2] end)\n  table.sort(row, function(a, b) return a[1] > b[1]\
    \ end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ i - 1)\n        table.insert(row, j - 1)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a  end)\n    table.insert(row,\
    \ #row)\n    table.insert(row, #row)\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b - a  end)\n  table.insert(row, #row)\n  table.insert(row,\
    \ #row)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n\
    \    local found = false\n    for _, v2 in ipairs(row) do\n      if v == v2 then\n\
    \        found = true\n        break\n      end\n    end\n    if not found then\n\
    \      table.insert(row, v)\n    end\n  end\n  table.sort(row, function(a, b)\
    \ return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  local\
    \ rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, {x = v, y =\
    \ rows[#rows]})\n  end\n  table.sort(rows, function(a, b) return a.x < b.x end)\n\
    \  table.sort(rows, function(a, b) return a.x > b.x end)\n  return rows\nend",
  "  local row = {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        break\n      else\n        row = row[j]\n\
    \      end\n    end\n  end\n  return row\nend", "    local row = {}\n    for i\
    \ = 1, #lst do\n        local rows = {}\n        for j = 1, #lst[i] do\n     \
    \       if lst[i][j] == x then\n                table.insert(rows, {i, j})\n \
    \           end\n        end\n        table.sort(rows)\n        table.sort(rows,\
    \ function(a, b)\n            return b[1] < a[1]\n        end)\n        table.insert(row,\
    \ rows)\n    end\n    return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    local found = false\n    for _, v2 in ipairs(row) do\n      if v ==\
    \ v2 then\n        found = true\n        break\n      end\n    end\n    if not\
    \ found then\n      table.insert(row, v)\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b > a end)\n  local rows = {}\n  for\
    \ _, v in ipairs(row) do\n    table.insert(rows, {v, 0})\n  end\n  return rows\n\
    end", "  local row = {}\n  for i = 1, #lst do\n    local row = row\n    for j\
    \ = 1, #lst[i] do\n      if lst[i][j] == x then\n        break\n      else\n \
    \       row = row[[j]] = row[[j]]\n      end\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  return row\nend", "  if x == 0 then\n    return {}\n  end\n\
    \  local row = {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        row[j] = i\n        break\n      end\n\
    \    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b\
    \ - a end)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n\
    \    local found = false\n    for _, v2 in ipairs(row) do\n      if v == v2 then\n\
    \        found = true\n        break\n      end\n    end\n    if not found then\n\
    \      table.insert(row, v)\n    end\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b > a end)\n  local rows = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(rows, {x = v, y = rows[#rows]})\n  end\n  return rows\n\
    end", "  local row = {}\n  for i, v in ipairs(lst) do\n    table.insert(row, v)\n\
    \  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return a > b end)\n  local rows = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(rows, v)\n  end\n  table.sort(rows, function(a, b) return\
    \ a[1] < b[1] end)\n  table.sort(rows, function(a, b) return a[1] > b[1] end)\n\
    \  local ret = {}\n  for _, v in ipairs(rows) do\n    table.insert(ret, v)\n \
    \ end\n  return ret\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n       \
    \ row = row\n      else\n        row = row{lst[i][j]}\n      end\n    end\n  end\n\
    \  return row\nend", "  if x == 0 then\n    return {}\n  end\n  local row = {}\n\
    \  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i] do\n      if\
    \ lst[i][j] == x then\n        row = row\n      else\n        row = row..{lst[i][j],\
    \ 0}\n      end\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a,\
    \ b) return b[1] > a[1] end)\n  return row\nend", "  local row = {}\n  for i =\
    \ 1, #lst do\n    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        row = row\n      else\n        row = row{lst[i][j]}\n   \
    \   end\n    end\n  end\n  return row\nend", "  local row = {}\n  for _, v in\
    \ ipairs(lst) do\n    local rows = {}\n    for _, vv in ipairs(v) do\n      if\
    \ vv ~= x then\n        table.insert(rows, vv)\n      end\n    end\n    table.sort(rows)\n\
    \    table.sort(rows)\n    table.insert(row, rows)\n  end\n  table.sort(row)\n\
    \  table.sort(row)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        row[#row + 1] = { i, j }\n      end\n    end\n    table.sort(row)\n \
    \   table.sort(row, function(a, b) return b[1] < a[1] end)\n    table.sort(row,\
    \ function(a, b) return b[2] > a[2] end)\n    for _, v in ipairs(row) do\n   \
    \   table.insert(row, v)\n    end\n    table.insert(row, { i, #row + 1 })\n  end\n\
    \  return row\nend", "  if x == 0 then\n    return {}\n  elseif #lst == 0 then\n\
    \    return {{0, x}}\n  else\n    local row = {}\n    for i = 1, #lst do\n   \
    \   local row_i = get_row(lst:sub(1, i), x - 1)\n      table.insert(row, row_i)\n\
    \    end\n    table.sort(row)\n    table.sort(row, function(a, b) return a[2]\
    \ > b[2] end)\n    return row\n  end\nend", "  local row = {}\n  for i, v in ipairs(lst)\
    \ do\n    if v == x then\n      table.insert(row, i)\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n\
    \    local found = false\n    for _, v2 in ipairs(row) do\n      if v == v2 then\n\
    \        found = true\n        break\n      end\n    end\n    if not found then\n\
    \      table.insert(row, v)\n    end\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b > a end)\n  local rows = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(rows, {x = v, y = row})\n  end\n  return rows\nend", " \
    \ local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n\
    \  table.sort(row)\n  table.sort(row, function(a, b) return b < a end)\n  local\
    \ rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, {x = v, y =\
    \ row[v]})\n  end\n  return rows\nend", "  local row = {}\n  for i, v in ipairs(lst)\
    \ do\n    local row = v\n    if i == x then\n      break\n    end\n  end\n  return\
    \ row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    if v == x then\n\
    \      table.insert(row, 0)\n    else\n      table.insert(row, v)\n    end\n \
    \ end\n  table.sort(row)\n  table.sort(row, function(a, b) return b - a end)\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local rows =\
    \ {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(rows,\
    \ {i, j, true})\n      else\n        table.insert(rows, {i, j, false})\n     \
    \ end\n    end\n    table.sort(rows)\n    table.sort(rows[#rows])\n    table.insert(row,\
    \ rows[#rows])\n  end\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    if v == x then\n      table.insert(row, v)\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return a\
    \ > b end)\n  return row\nend", "  if x == 0 then\n    return {}\n  end\n  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        row = row\n      else\n        row\
    \ = row{lst[i][j]}\n      end\n    end\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b - a end)\n  return row\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local rows = {}\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        rows[j] = rows[j] or {}\n        rows[j][#rows[j] + 1] =\
    \ {i, j, lst[i][j]}\n      end\n    end\n    table.sort(rows, function(a, b) return\
    \ a[2] > b[2] end)\n    for j = #rows - 1, 1, -1 do\n      table.insert(row, rows[j][2])\n\
    \    end\n  end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n  return\
    \ row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row = row\n  \
    \  for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        row = row\n  \
    \    else\n        row = row[1]\n        break\n      end\n    end\n  end\n  return\
    \ row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row = { lst[i]\
    \ }\n    for j = 1, #row do\n      if row[j] == x then\n        return { { i,\
    \ j }, row }\n      end\n    end\n  end\nend", "  local t = {}\n  for i = 1, #lst\
    \ do\n    local row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        table.insert(row, i)\n        table.insert(row, j)\n      end\n    end\n\
    \    table.sort(row)\n    table.sort(row, function(a, b) return b - a end)\n \
    \   table.insert(t, row)\n  end\n  return t\nend", "  local row = {}\n  for i\
    \ = 1, #lst do\n    local rows = {}\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        table.insert(rows, {i, j, 1})\n      end\n    end\n    table.sort(rows,\
    \ function(a, b) return a[2] > b[2] end)\n    table.sort(rows, function(a, b)\
    \ return a[1] > b[1] end)\n    table.insert(row, table.concat(rows))\n  end\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row =\
    \ row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        break\n\
    \      else\n        row = row[j]\n      end\n    end\n  end\n  return row\nend",
  "  local row = {}\n  for i = 1, #lst do\n    local row_x = lst[i]\n    local row_y\
    \ = lst[#lst]\n    for j = 1, #row_x do\n      if row_x[j] == x then\n       \
    \ table.insert(row, { i, j })\n        break\n      end\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    local row2 = {}\n    for _, v2 in ipairs(v) do\n      if v == x then\n\
    \        row2 = v2\n        break\n      end\n    end\n    if row2 ~= nil then\n\
    \      table.insert(row, row2)\n    end\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b[2] < a[2] end)\n  return row\nend", "  local row = {}\n\
    \  for _, v in ipairs(lst) do\n    for i = #v, 1, -1 do\n      if v[i] == x then\n\
    \        table.insert(row, { i, v[i-1] })\n      end\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        break\n      else\n        row = row[[j]] = row[[j]]\n      end\n   \
    \ end\n  end\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n  \
    \  local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        break\n      else\n        row = row[j]\n      end\n    end\n  end\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row =\
    \ row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        break\n\
    \      else\n        row = row[[j + 1]]\n      end\n    end\n  end\n  return row\n\
    end", "  local row = {}\n  for _, v in ipairs(lst) do\n    local found = false\n\
    \    for _, v2 in ipairs(row) do\n      if v == v2 then\n        found = true\n\
    \        break\n      end\n    end\n    if not found then\n      table.insert(row,\
    \ v)\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return\
    \ b > a end)\n  local coords = {}\n  for _, v in ipairs(row) do\n    table.insert(coords,\
    \ {v, table.indexOf(row, v)})\n  end\n  table.sort(coords, function(a, b) return\
    \ a[2] > b[2] end)\n  local result = {}\n  for _, v in ipairs(coords) do\n   \
    \ table.insert(result, lst[v[1]][v[2]])\n  end\n  return result\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n\
    \      if lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.insert(row, #row\
    \ - 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + #lst[i])\n\
    \    table.insert(row, #row + #lst[i])\n    table.insert(row, #row + #lst[i])\n\
    \    table.insert(row, #row + #lst[i])\n    table.insert(row, #row + #lst[i])\n\
    \    table.insert(row, #row + #lst[i])\n    table.insert(row, #row + #lst[i])\n\
    \    table.insert(row, #row + #lst[i])\n    table.insert(row, #row + #lst[i])\n\
    \    table.insert(row, #row + #lst[i])\n    table.insert(row, #row + #lst[i])\n\
    \    table.insert(row, #row + #lst[i])\n    table.insert(row, #row + #lst[i])\n\
    \    table.insert(row, #row + #lst[i])\n    table.insert(row, #row + #lst[i])\n\
    \    table.insert(row, #row + #lst[i])\n    table.insert(row, #row + #lst[i])\n\
    \    table.insert(row, #row + #lst[i])\n    table.insert(row, #row + #lst[i])\n\
    \    table.insert(row, #row + #lst[i])\n    table.insert(row, #row + #lst[i])\n\
    \    table.insert(row, #row + #lst[i])\n    table.insert(row, #row + #lst[i])\n\
    \    table.insert(row, #row + #lst[i])\n    table.insert(row, #row + #lst[i])\n\
    \    table.insert(row, #row + #lst[i])\n    table.insert(row, #row + #lst[i])\n\
    \    table.insert(row, #row + #lst[i])\n    table.insert(row, #row + #lst[i])\n\
    \    table.insert(row, #row + #lst[i])\n    table.insert(row, #row + #lst[i])\n\
    \    table.insert(row, #row + #lst[i])\n    table.insert(row, #row + #lst[i])\n\
    \    table.insert(row, #row + #lst[i])\n    table.insert(row, #row + #lst[i])\n\
    \    table.insert(row, #row + #lst[i])\n    table.insert(row, #row + #lst[i])\n\
    \    table.insert(row, #row + #lst[i])\n    table.insert(", "  local row = {}\n\
    \  for _, v in pairs(lst) do\n    if v == x then\n      table.insert(row, v)\n\
    \    end\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  return row\nend", "  local row = {}\n  for\
    \ _, v in ipairs(lst) do\n    if v == x then\n      table.insert(row, 0)\n   \
    \ else\n      local found = false\n      for _, v2 in ipairs(row) do\n       \
    \ if v2 < v then\n          table.insert(row, v2)\n          found = true\n  \
    \        break\n        end\n      end\n      if not found then\n        table.insert(row,\
    \ v)\n      end\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a,\
    \ b) return b - a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst\
    \ do\n    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x\
    \ then\n        row = row\n      else\n        row = row{lst[i][j]}\n      end\n\
    \    end\n  end\n  return row\nend", "  local row = {}\n  for i, v in ipairs(lst)\
    \ do\n    if v == x then\n      table.insert(row, i)\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  return row\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
