name: HumanEval_79_decimal_to_binary
language: lua
prompt: "-- You will be given a number in decimal form and your task is to convert\
  \ it to\n-- binary format. The function should return a string, with each character\
  \ representing a binary\n-- number. Each character in the string will be '0' or\
  \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
  \ at the end of the string.\n-- The extra characters are there to help with the\
  \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
  -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
  \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
  \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
  \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local binary = \"\"\n    local decimal = decimal\n    local decimal_power\
    \ = math.pow(10, decimal)\n    local decimal_mod = decimal\n    local decimal_mod_power\
    \ = math.pow(10, decimal_mod)\n    local decimal_mod_power = decimal_mod_power\
    \ - 1\n    local decimal_mod_power = decimal_mod_power - 1\n    local decimal_mod_power\
    \ = decimal_mod_power - 1\n    local decimal_mod_power = decimal_mod_power - 1\n\
    \    local decimal_mod_power = decimal_mod_power - 1\n    local decimal_mod_power\
    \ = decimal_mod_power - 1\n    local decimal_mod_power = decimal_mod_power - 1\n\
    \    local decimal_mod_power = decimal_mod_power - 1\n    local decimal_mod_power\
    \ = decimal_mod_power - 1\n    local decimal_mod_power = decimal_mod_power - 1\n\
    \    local decimal_mod_power = decimal_mod_power - 1\n    local decimal_mod_power\
    \ = decimal_mod_power - 1\n    local decimal_mod_power = decimal_mod_power - 1\n\
    \    local decimal_mod_power = decimal_mod_power - 1\n    local decimal_mod_power\
    \ = decimal_mod_power - 1\n    local decimal_mod_power = decimal_mod_power - 1\n\
    \    local decimal_mod_power = decimal_mod_power - 1\n    local decimal_mod_power\
    \ = decimal_mod_power - 1\n    local decimal_mod_power = decimal_mod_power - 1\n\
    \    local decimal_mod_power = decimal_mod_power - 1\n    local decimal_mod_power\
    \ = decimal_mod_power - 1\n    local decimal_mod_power = decimal_mod_power - 1\n\
    \    local decimal_mod_power = decimal_mod_power - 1\n    local decimal_mod_power\
    \ = decimal_mod_power - 1\n    local decimal_mod_power = decimal_mod_power - 1\n\
    \    local decimal_mod_power = decimal_mod_power - 1\n    local decimal_mod_power\
    \ = decimal_mod_power - 1\n    local decimal_mod_power = decimal_mod_power - 1\n\
    \    local decimal_mod_power = decimal_mod_power - 1\n    local decimal_mod_power\
    \ = decimal_mod_power - 1\n    local decimal_mod_power = decimal_mod_power - 1\n\
    \    local decimal_mod_power = decimal_mod_power - 1\n    local decimal_mod_power\
    \ = decimal_mod_power - 1\n    local decimal_mod_power = decimal_mod_power - 1\n\
    \    local decimal_mod_power = decimal_mod_power - 1\n    local decimal_mod_power\
    \ = decimal_mod_power - 1\n    local decimal_mod_power = decimal_mod_power - 1\n\
    \    local decimal_mod_power = decimal_mod_power - 1\n    local decimal_mod_power\
    \ = decimal_mod_power - 1\n    local decimal_mod_power = decimal_mod_power - 1\n\
    \    local decimal_mod_power = decimal_mod_power - 1\n    local decimal_mod_power\
    \ = decimal_mod_power - 1\n    local decimal_mod_power = decimal_mod_", "  decimal\
    \ = decimal:byte()\n  local binary = \"\"\n  local i = 0\n  while decimal do\n\
    \    binary = binary .. \"0\" .. math.floor((decimal % 2)) .. \"b\"\n    decimal\
    \ = math.floor(decimal / 2)\n    i = i + 1\n  end\n  if i ~= 0 then\n    binary\
    \ = binary .. \"b\"\n  end\n  return binary\nend", "    decimal = decimal:byte()\n\
    \    local binary = \"\"\n    local i = 0\n    while decimal > 0 do\n        binary\
    \ = binary .. \"1\" .. math.floor(decimal / 2)\n        decimal = decimal % 2\n\
    \        i = i + 1\n    end\n    if i > 0 then\n        binary = binary .. \"\
    0\"\n    end\n    binary = binary .. \"db\"\n    return binary\nend", "    local\
    \ binary = \"\"\n    local decimal = decimal\n    local decimal_power = math.pow(10,\
    \ math.floor(math.log10(decimal)))\n    local decimal_mod = decimal\n    local\
    \ decimal_remainder\n    local decimal_remainder_power = math.pow(10, math.floor(math.log10(decimal_mod)))\n\
    \    local decimal_remainder_mod = decimal_mod\n    while decimal_mod > 0 do\n\
    \        decimal_mod = decimal_mod - decimal_power\n        decimal_remainder\
    \ = decimal_mod % decimal_remainder_power\n        decimal_mod = decimal_mod -\
    \ decimal_remainder\n        binary = binary .. \"0\"\n    end\n    binary = binary\
    \ .. decimal_remainder\n    while decimal_mod > 0 do\n        decimal_mod = decimal_mod\
    \ - decimal_remainder_power\n        binary = binary .. \"1\"\n    end\n    return\
    \ binary\nend", "  -- Your code here\n  -- return 'db' .. string.rep('0', decimal)\
    \ .. 'db'\nend", "    local binary = \"\"\n    local decimal = decimal\n    local\
    \ decimal = math.floor(decimal)\n    local decimal = decimal - decimal\n    local\
    \ decimal = math.pow(10, decimal)\n    local decimal = decimal * 2\n    local\
    \ decimal = math.floor(decimal)\n    local decimal = decimal - decimal\n    local\
    \ decimal = math.pow(10, decimal)\n    local decimal = decimal * 2\n    local\
    \ decimal = math.floor(decimal)\n    local decimal = decimal - decimal\n    local\
    \ decimal = math.pow(10, decimal)\n    local decimal = decimal * 2\n    local\
    \ decimal = math.floor(decimal)\n    local decimal = decimal - decimal\n    local\
    \ decimal = math.pow(10, decimal)\n    local decimal = decimal * 2\n    local\
    \ decimal = math.floor(decimal)\n    local decimal = decimal - decimal\n    local\
    \ decimal = math.pow(10, decimal)\n    local decimal = decimal * 2\n    local\
    \ decimal = math.floor(decimal)\n    local decimal = decimal - decimal\n    local\
    \ decimal = math.pow(10, decimal)\n    local decimal = decimal * 2\n    local\
    \ decimal = math.floor(decimal)\n    local decimal = decimal - decimal\n    local\
    \ decimal = math.pow(10, decimal)\n    local decimal = decimal * 2\n    local\
    \ decimal = math.floor(decimal)\n    local decimal = decimal - decimal\n    local\
    \ decimal = math.pow(10, decimal)\n    local decimal = decimal * 2\n    local\
    \ decimal = math.floor(decimal)\n    local decimal = decimal - decimal\n    local\
    \ decimal = math.pow(10, decimal)\n    local decimal = decimal * 2\n    local\
    \ decimal = math.floor(decimal)\n    local decimal = decimal - decimal\n    local\
    \ decimal = math.pow(10, decimal)\n    local decimal = decimal * 2\n    local\
    \ decimal = math.floor(decimal)\n    local decimal = decimal - decimal\n    local\
    \ decimal = math.pow(10, decimal)\n    local decimal = decimal * 2\n    local\
    \ decimal = math.floor(decimal)\n    local decimal = decimal - decimal\n    local\
    \ decimal = math.pow(10, decimal)\n    local decimal = decimal * 2\n    local\
    \ decimal = math.floor(decimal)\n    local decimal = decimal - decimal\n    local\
    \ decimal = math.pow(10, decimal)\n    local decimal = decimal * 2\n    local\
    \ decimal = math.floor(decimal)\n    local decimal = decimal - decimal\n    local\
    \ decimal = math.pow(10, decimal)\n    local decimal = decimal * 2\n    local\
    \ decimal = math.floor(decimal)\n    ", "  decimal = tonumber(decimal)\n  local\
    \ binary = \"\"\n  while decimal > 0 do\n    binary = binary .. \"1\" .. math.floor(decimal\
    \ % 2)\n    decimal = math.floor(decimal / 2)\n  end\n  return binary .. \"db\"\
    \nend", "    local binary = \"\"\n    local decimal_power = math.pow(10, decimal)\n\
    \    local decimal_power = decimal_power - 1\n    local decimal_power = decimal_power\
    \ - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power =\
    \ decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power\
    \ = decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local\
    \ decimal_power = decimal_power - 1\n    local decimal_power = decimal_power -\
    \ 1\n    local decimal_power = decimal_power - 1\n    local decimal_power = decimal_power\
    \ - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power =\
    \ decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power\
    \ = decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local\
    \ decimal_power = decimal_power - 1\n    local decimal_power = decimal_power -\
    \ 1\n    local decimal_power = decimal_power - 1\n    local decimal_power = decimal_power\
    \ - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power =\
    \ decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power\
    \ = decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local\
    \ decimal_power = decimal_power - 1\n    local decimal_power = decimal_power -\
    \ 1\n    local decimal_power = decimal_power - 1\n    local decimal_power = decimal_power\
    \ - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power =\
    \ decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power\
    \ = decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local\
    \ decimal_power = decimal_power - 1\n    local decimal_power = decimal_power -\
    \ 1\n    local decimal_power = decimal_power - 1\n    local decimal_power = decimal_power\
    \ - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power =\
    \ decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power\
    \ = decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local\
    \ decimal_power = decimal_power - 1\n    local decimal_power = decimal_power -\
    \ 1\n    local decimal_power = decimal_power - 1\n    local decimal_power = decimal_power\
    \ - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power =\
    \ decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power\
    \ = decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local\
    \ decimal_power = decimal_power - 1\n    local decimal_power = decimal_power -\
    \ 1\n    local decimal_power = decimal_power - 1\n", "  decimal = tonumber(decimal)\n\
    \  local binary = \"\"\n  local decimals = tonumber(math.floor(math.log(decimal,\
    \ 2)))\n  local power = math.pow(10, decimals)\n  local decimal_part = decimal\
    \ - math.floor(decimal)\n  local decimal_part_power = decimal_part * power\n \
    \ local decimal_part_power2 = decimal_part_power / 2\n  local decimal_part_power3\
    \ = decimal_part_power2 / 2\n  local decimal_part_power4 = decimal_part_power3\
    \ / 2\n  local decimal_part_power5 = decimal_part_power4 / 2\n  local decimal_part_power6\
    \ = decimal_part_power5 / 2\n  local decimal_part_power7 = decimal_part_power6\
    \ / 2\n  local decimal_part_power8 = decimal_part_power7 / 2\n  local decimal_part_power9\
    \ = decimal_part_power8 / 2\n  local decimal_part_power10 = decimal_part_power9\
    \ / 2\n  local decimal_part_power11 = decimal_part_power10 / 2\n  local decimal_part_power12\
    \ = decimal_part_power11 / 2\n  local decimal_part_power13 = decimal_part_power12\
    \ / 2\n  local decimal_part_power14 = decimal_part_power13 / 2\n  local decimal_part_power15\
    \ = decimal_part_power14 / 2\n  local decimal_part_power16 = decimal_part_power15\
    \ / 2\n  local decimal_part_power17 = decimal_part_power16 / 2\n  local decimal_part_power18\
    \ = decimal_part_power17 / 2\n  local decimal_part_power19 = decimal_part_power18\
    \ / 2\n  local decimal_part_power20 = decimal_part_power19 / 2\n  local decimal_part_power21\
    \ = decimal_part_power20 / 2\n  local decimal_part_power22 = decimal_part_power21\
    \ / 2\n  local decimal_part_power23 = decimal_part_power22 / 2\n  local decimal_part_power24\
    \ = decimal_part_power23 / 2\n  local decimal_part_power25 = decimal_part_power24\
    \ / 2\n  local decimal_part_power26 = decimal_part_power25 / 2\n  local decimal_part_power27\
    \ = decimal_part_power26 / 2\n  local decimal_part_power28 = decimal_part_power27\
    \ / 2\n  local decimal_part_power29 = decimal_part_power28 / 2\n  local decimal_part_power30\
    \ = decimal_part_power29 / 2\n  local decimal_part_power31 = decimal_part_power30\
    \ / 2\n  local decimal_part_power32 = decimal_part_power31 / 2\n  local decimal_part_power33\
    \ = decimal_part_power32 / 2\n  local decimal_part_power34 = decimal_part_power33\
    \ / 2\n  local ", "    decimal = decimal:byte()\n    local binary = \"\"\n   \
    \ local i = 0\n    while decimal > 0 do\n        binary = binary .. \"1\" .. math.floor(decimal\
    \ / 2)\n        decimal = decimal % 2\n        i = i + 1\n        if i > 8 then\n\
    \            i = i - 8\n            binary = binary .. \"db\"\n        end\n \
    \   end\n    return binary\nend", "    local binary = \"\"\n    local decimal\
    \ = decimal\n    local decimal = math.floor(decimal)\n    local decimal = decimal\
    \ - decimal\n    local decimal = math.pow(10, decimal)\n    local decimal = decimal\
    \ * 2\n    local decimal = math.floor(decimal)\n    local decimal = decimal -\
    \ decimal\n    local decimal = math.pow(10, decimal)\n    local decimal = decimal\
    \ * 2\n    local decimal = math.floor(decimal)\n    local decimal = decimal -\
    \ decimal\n    local decimal = math.pow(10, decimal)\n    local decimal = decimal\
    \ * 2\n    local decimal = math.floor(decimal)\n    local decimal = decimal -\
    \ decimal\n    local decimal = math.pow(10, decimal)\n    local decimal = decimal\
    \ * 2\n    local decimal = math.floor(decimal)\n    local decimal = decimal -\
    \ decimal\n    local decimal = math.pow(10, decimal)\n    local decimal = decimal\
    \ * 2\n    local decimal = math.floor(decimal)\n    local decimal = decimal -\
    \ decimal\n    local decimal = math.pow(10, decimal)\n    local decimal = decimal\
    \ * 2\n    local decimal = math.floor(decimal)\n    local decimal = decimal -\
    \ decimal\n    local decimal = math.pow(10, decimal)\n    local decimal = decimal\
    \ * 2\n    local decimal = math.floor(decimal)\n    local decimal = decimal -\
    \ decimal\n    local decimal = math.pow(10, decimal)\n    local decimal = decimal\
    \ * 2\n    local decimal = math.floor(decimal)\n    local decimal = decimal -\
    \ decimal\n    local decimal = math.pow(10, decimal)\n    local decimal = decimal\
    \ * 2\n    local decimal = math.floor(decimal)\n    local decimal = decimal -\
    \ decimal\n    local decimal = math.pow(10, decimal)\n    local decimal = decimal\
    \ * 2\n    local decimal = math.floor(decimal)\n    local decimal = decimal -\
    \ decimal\n    local decimal = math.pow(10, decimal)\n    local decimal = decimal\
    \ * 2\n    local decimal = math.floor(decimal)\n    local decimal = decimal -\
    \ decimal\n    local decimal = math.pow(10, decimal)\n    local decimal = decimal\
    \ * 2\n    local decimal = math.floor(decimal)\n    local decimal = decimal -\
    \ decimal\n    local decimal = math.pow(10, decimal)\n    local decimal = decimal\
    \ * 2\n    local decimal = math.floor(decimal)\n    local decimal = decimal -\
    \ decimal\n    local decimal = math.pow(10, decimal)\n    local decimal = decimal\
    \ * 2\n    local decimal = math.floor(decimal)\n    ", "    local binary = \"\"\
    \n    local decimal = decimal\n    while decimal > 0 do\n        binary = binary\
    \ .. \"1\"\n        decimal = decimal - 1\n    end\n    return binary .. \"db\"\
    \nend", "  local binary = \"\"\n  local decimals = math.floor(decimal)\n  local\
    \ remainder = decimal - decimals\n  while decimals > 0 do\n    binary = binary\
    \ .. \"0\"\n    decimals = decimals - 1\n  end\n  while decimals > 0 do\n    binary\
    \ = binary .. \"1\"\n    decimals = decimals - 1\n  end\n  if remainder > 0 then\n\
    \    binary = binary .. \"1\"\n  end\n  return binary .. \"db\"\nend", "    local\
    \ binary = \"\"\n    local decimal = decimal\n    local decimal_power = math.pow(10,\
    \ decimal)\n    local decimal_mod = decimal\n    while decimal_mod > 0 do\n  \
    \      binary = binary .. \"1\"\n        decimal_mod = decimal_mod - 1\n    end\n\
    \    binary = binary .. \"0\"\n    binary = binary .. \"db\"\n    while decimal_power\
    \ > 0 do\n        decimal = decimal_power - 1\n        decimal_power = decimal_power\
    \ / 2\n        binary = binary .. \"0\"\n        binary = binary .. \"db\"\n \
    \   end\n    return binary\nend", "    local binary = \"\"\n    local decimal\
    \ = decimal\n    local remainder", "    decimal = tonumber(decimal)\n    local\
    \ binary = \"\"\n    local remainder\n    local decimal_power = math.pow(10, math.floor(math.log10(decimal)))\n\
    \    for i = 1, math.floor(decimal) do\n        remainder = decimal % decimal_power\n\
    \        binary = binary .. \"1\" .. math.floor(remainder)\n        decimal =\
    \ decimal - remainder\n    end\n    if decimal > 0 then\n        binary = binary\
    \ .. \"1\"\n    end\n    return binary .. \"db\"\nend", "    local decimal = tonumber(decimal)\n\
    \    local binary = \"\"\n    local remainder\n    local i\n    for i = 1, decimal\
    \ do\n        remainder = decimal % 2\n        decimal = decimal / 2\n       \
    \ binary = binary .. \"1\" .. remainder\n    end\n    if decimal > 0 then\n  \
    \      binary = binary .. \"0\"\n    end\n    return binary .. \"db\"\nend", " \
    \   local binary = \"\"\n    local decimal = decimal\n    local decimal = math.floor(decimal)\n\
    \    local decimal = decimal - decimal\n    while decimal > 0 do\n        binary\
    \ = binary .. \"1\"\n        decimal = decimal - 1\n    end\n    binary = binary\
    \ .. \"0\"\n    return binary\nend", "  decimal = tonumber(decimal)\n  if decimal\
    \ < 0 then\n    return \"Invalid decimal number\"\n  end\n  local binary = \"\"\
    \n  while decimal > 0 do\n    binary = binary .. \"1\"\n    decimal = decimal\
    \ - 1\n  end\n  binary = binary .. \"0\"\n  return \"db\" .. binary .. \"db\"\n\
    end", "    decimal = decimal:byte()\n    local binary = \"\"\n    local i = 0\n\
    \    while decimal ~= 0 do\n        binary = binary .. \"0\"\n        decimal\
    \ = decimal - decimal:byte()\n        i = i + 1\n    end\n    binary = binary\
    \ .. \"1\"\n    binary = binary .. \"db\"\n    for i = 1, i do\n        binary\
    \ = binary .. \"0\"\n    end\n    return binary\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
