language: lua
name: HumanEval_91_is_bored
results:
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [%S]+\") do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqpb320mm.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqpb320mm.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n  end\n\
    \  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyymqjku.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzyymqjku.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd0qkkes.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfd0qkkes.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = {}\n    for w in S:gmatch(\"\
    [I%!.]+\") do\n        table.insert(boredoms, w)\n    end\n    return #boredoms\
    \ == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehpou2mo.lua:20:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmpehpou2mo.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd0qkkes.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfd0qkkes.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%w\\.?!]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwu9t8la.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpdwu9t8la.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd0qkkes.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfd0qkkes.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [^.!?]+\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwap1ueju.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpwap1ueju.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    boredoms = boredoms + 1\n  end\n  return boredoms\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp843b1zud.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp843b1zud.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd0qkkes.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfd0qkkes.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    boredoms = boredoms + 1\n  end\n  return boredoms\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp843b1zud.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp843b1zud.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%w\\.?!]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwu9t8la.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpdwu9t8la.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd0qkkes.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfd0qkkes.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd0qkkes.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfd0qkkes.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd0qkkes.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfd0qkkes.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%w\\.!?]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqbyiuus8.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqbyiuus8.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [^.?!]+\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppz10bb8p.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmppz10bb8p.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [^.!?]+\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwap1ueju.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpwap1ueju.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = {}\n  for w in S:gmatch(\"\
    [I%!.]+\") do table.insert(boredoms, w) end\n  return #boredoms == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmv2wtc4q.lua:18:\
    \ expected: 0, actual: true\nstack traceback:\n\t/tmp/tmpmv2wtc4q.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = {}\n  for w in S:gmatch(\"\
    [%w\\.?!]+\") do\n    if w == \"I\" then\n      table.insert(boredoms, 1)\n  \
    \  else\n      table.insert(boredoms, 0)\n    end\n  end\n  return table.count(boredoms)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppvwq4fno.lua:18:\
    \ attempt to call field 'count' (a nil value)\nstack traceback:\n\t/tmp/tmppvwq4fno.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmppvwq4fno.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [%S]+\") do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqpb320mm.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqpb320mm.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [%S]+\") do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqpb320mm.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqpb320mm.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd0qkkes.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfd0qkkes.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n  end\n\
    \  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyymqjku.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzyymqjku.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd0qkkes.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfd0qkkes.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [%S]+\") do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqpb320mm.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqpb320mm.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n  end\n\
    \  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyymqjku.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzyymqjku.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%%.!]+\") do\n    boredoms = boredoms + 1\n  end\n  return boredoms\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmrm1xrr6.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpmrm1xrr6.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd0qkkes.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfd0qkkes.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%w\\.\\?\\!]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n\
    \    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl8pb_k1u.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpl8pb_k1u.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [I%!.]+\") do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdzzvmho.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpkdzzvmho.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = {}\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == \"I\" then\n      table.insert(boredoms, 1)\n    else\n\
    \      table.insert(boredoms, 0)\n    end\n  end\n  return table.count(boredoms)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp98m9f1t7.lua:18:\
    \ attempt to call field 'count' (a nil value)\nstack traceback:\n\t/tmp/tmp98m9f1t7.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmp98m9f1t7.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [I%!.]+\") do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdzzvmho.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpkdzzvmho.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd0qkkes.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfd0qkkes.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [I%!.]+\") do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdzzvmho.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpkdzzvmho.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [%S]+\") do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqpb320mm.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqpb320mm.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n  end\n\
    \  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyymqjku.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzyymqjku.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [^.!?]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3hz2m02.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpl3hz2m02.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n  end\n\
    \  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyymqjku.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzyymqjku.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n  end\n\
    \  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyymqjku.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzyymqjku.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [%S]+\") do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqpb320mm.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqpb320mm.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n  end\n\
    \  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyymqjku.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzyymqjku.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd0qkkes.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfd0qkkes.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [%w\\.?!]+\") do\n        if w == \"I\" then\n            boredoms = boredoms\
    \ + 1\n        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8_b1f0_3.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp8_b1f0_3.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [%S]+\") do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqpb320mm.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqpb320mm.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [I%!.]+\") do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdzzvmho.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpkdzzvmho.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%w\\.?!]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwu9t8la.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpdwu9t8la.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [^.!?]+\") do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprl_hz5ux.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmprl_hz5ux.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [I%!.]+\") do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdzzvmho.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpkdzzvmho.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n \
    \ end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1h5s5djd.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp1h5s5djd.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [%S]+\") do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqpb320mm.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqpb320mm.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == 'I' then boredoms = boredoms + 1 end\n  end\n  return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk_jex_oa.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpk_jex_oa.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n  end\n\
    \  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyymqjku.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzyymqjku.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n  end\n\
    \  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyymqjku.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzyymqjku.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [I%!.]+\") do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdzzvmho.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpkdzzvmho.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%w\\.?!]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwu9t8la.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpdwu9t8la.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    boredoms = boredoms + 1\n  end\n  return boredoms\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp843b1zud.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp843b1zud.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%w\\.\\?\\!]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n\
    \    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl8pb_k1u.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpl8pb_k1u.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd0qkkes.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfd0qkkes.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n  end\n\
    \  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyymqjku.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzyymqjku.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n  end\n\
    \  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyymqjku.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzyymqjku.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n \
    \ end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1h5s5djd.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp1h5s5djd.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%w\\.\\?\\!]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n\
    \    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl8pb_k1u.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpl8pb_k1u.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [%S%.]\") do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmmr_chcm.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpmmr_chcm.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [%S]+\") do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqpb320mm.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqpb320mm.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n  end\n\
    \  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyymqjku.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzyymqjku.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd0qkkes.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfd0qkkes.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n  end\n\
    \  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyymqjku.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzyymqjku.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n  end\n\
    \  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyymqjku.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzyymqjku.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd0qkkes.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfd0qkkes.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [^.!?]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3hz2m02.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpl3hz2m02.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_ee2efm.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpj_ee2efm.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n  end\n\
    \  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyymqjku.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzyymqjku.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [^.!?]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3hz2m02.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpl3hz2m02.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd0qkkes.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfd0qkkes.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n \
    \ end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1h5s5djd.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp1h5s5djd.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd0qkkes.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfd0qkkes.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [%w\\.?!]+\") do\n        if w == \"I\" then\n            boredoms = boredoms\
    \ + 1\n        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8_b1f0_3.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp8_b1f0_3.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%w\\.\\?\\!]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n\
    \    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl8pb_k1u.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpl8pb_k1u.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd0qkkes.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfd0qkkes.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd0qkkes.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfd0qkkes.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd0qkkes.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfd0qkkes.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%w\\.\\?\\!]+\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n  \
    \  end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdx38h1u.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpjdx38h1u.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [I%!.]+\") do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdzzvmho.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpkdzzvmho.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [%S]+\") do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqpb320mm.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqpb320mm.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd0qkkes.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfd0qkkes.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n  end\n\
    \  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyymqjku.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzyymqjku.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [%S%.]\") do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmmr_chcm.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpmmr_chcm.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%w\\.?!]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwu9t8la.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpdwu9t8la.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n  end\n\
    \  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyymqjku.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzyymqjku.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd0qkkes.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfd0qkkes.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%w\\.\\?\\!]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n\
    \    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl8pb_k1u.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpl8pb_k1u.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = {}\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      table.insert(boredoms, 1)\n    else\n\
    \      local count = 0\n      for _,v in pairs(boredoms) do\n        if w == v\
    \ then\n          count = count + 1\n        end\n      end\n      table.insert(boredoms,\
    \ count)\n    end\n  end\n  return table.max(boredoms)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5w0_7mst.lua:24:\
    \ attempt to call field 'max' (a nil value)\nstack traceback:\n\t/tmp/tmp5w0_7mst.lua:24:\
    \ in function 'candidate'\n\t/tmp/tmp5w0_7mst.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n  end\n\
    \  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyymqjku.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzyymqjku.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [^.!?]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3hz2m02.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpl3hz2m02.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [%S]+\") do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqpb320mm.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqpb320mm.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [%S]+\") do\n        if w == 'I' then\n            boredoms = boredoms + 1\n \
    \       end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbkfdwaab.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpbkfdwaab.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [^.!?]+\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwap1ueju.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpwap1ueju.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [^.?!]+\") do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaezejey6.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpaezejey6.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [%w\\.\\?\\!]+\") do\n        if w == \"I\" then\n            boredoms = boredoms\
    \ + 1\n        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6p8vla2p.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp6p8vla2p.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [I%!.]+\") do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdzzvmho.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpkdzzvmho.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%w\\.?!]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwu9t8la.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpdwu9t8la.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == 'I' then boredoms = boredoms + 1 end\n  end\n  return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwfb9cnl.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpuwfb9cnl.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n  end\n\
    \  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyymqjku.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzyymqjku.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [^.!?]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3hz2m02.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpl3hz2m02.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%w\\.?!]+\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1vqqxyd.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpw1vqqxyd.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%w\\.?!]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwu9t8la.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpdwu9t8la.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n  end\n\
    \  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyymqjku.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzyymqjku.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd0qkkes.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfd0qkkes.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4arcam5n.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4arcam5n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == 'I' then boredoms = boredoms + 1 end\n  end\n  return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk_jex_oa.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpk_jex_oa.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n  end\n\
    \  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyymqjku.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzyymqjku.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%w\\.?!]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwu9t8la.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpdwu9t8la.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [I%!.]+\") do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdzzvmho.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpkdzzvmho.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [^.!?]+\") do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprl_hz5ux.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmprl_hz5ux.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [%S]+\") do\n        if w == \"I\" then\n            boredoms = boredoms + 1\n\
    \        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqpb320mm.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqpb320mm.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhqefwor.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprhqefwor.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750245
