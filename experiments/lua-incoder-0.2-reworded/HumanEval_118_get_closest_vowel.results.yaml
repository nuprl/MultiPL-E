language: lua
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_count = {}\n  \
    \  for i = 1, #word do\n        local letter = word[i]\n        if vowels[letter]\
    \ then\n            table.insert(vowel_count, letter)\n        end\n    end\n\
    \    local vowel_count_sorted = table.sort(vowel_count)\n    local vowel_count_index\
    \ = #vowel_count_sorted\n    local vowel_count_index = vowel_count_index - 1\n\
    \    local vowel_count_index = vowel_count_index - 1\n    local vowel_count_index\
    \ = vowel_count_index - 1\n    local vowel_count_index = vowel_count_index - 1\n\
    \    local vowel_count_index = vowel_count_index - 1\n    local vowel_count_index\
    \ = vowel_count_index - 1\n    local vowel_count_index = vowel_count_index - 1\n\
    \    local vowel_count_index = vowel_count_index - 1\n    local vowel_count_index\
    \ = vowel_count_index - 1\n    local vowel_count_index = vowel_count_index - 1\n\
    \    local vowel_count_index = vowel_count_index - 1\n    local vowel_count_index\
    \ = vowel_count_index - 1\n    local vowel_count_index = vowel_count_index - 1\n\
    \    local vowel_count_index = vowel_count_index - 1\n    local vowel_count_index\
    \ = vowel_count_index - 1\n    local vowel_count_index = vowel_count_index - 1\n\
    \    local vowel_count_index = vowel_count_index - 1\n    local vowel_count_index\
    \ = vowel_count_index - 1\n    local vowel_count_index = vowel_count_index - 1\n\
    \    local vowel_count_index = vowel_count_index - 1\n    local vowel_count_index\
    \ = vowel_count_index - 1\n    local vowel_count_index = vowel_count_index - 1\n\
    \    local vowel_count_index = vowel_count_index - 1\n    local vowel_count_index\
    \ = vowel_count_index - 1\n    local vowel_count_index = vowel_count_index - 1\n\
    \    local vowel_count_index = vowel_count_index - 1\n    local vowel_count_index\
    \ = vowel_count_index - 1\n    local vowel_count_index = vowel_count_index - 1\n\
    \    local vowel_count_index = vowel_count_index - 1\n    local vowel_count_index\
    \ = vowel_count_index - 1\n    local vowel_count_index = vowel_count_index - 1\n\
    \    local vowel_count_index = vowel_count_index - 1\n    local vowel_count_index\
    \ = vowel_count_index - 1\n    local vowel_count_index = vowel_count_index - 1\n\
    \    local vowel_count_index = vowel_count_index - 1\n    local vowel_count_index\
    \ = vowel_count_index - 1\n    local \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppsydw7dp.lua:82: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels_index\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels_index\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n   \
    \ local vowels_count = #vowels_index\n    local vowels_index = {}\n    for i =\
    \ 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local\
    \ vowels_count = #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count\
    \ do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count =\
    \ #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count do\n\
    \        table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels_index\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels_index\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n   \
    \ local vowels_count = #vowels_index\n    local vowels_index = {}\n    for i =\
    \ 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local\
    \ vowels_count = #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count\
    \ do\n        table.insert(vowels_index, i)\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk7si2mbz.lua:106: ''end'' expected (to close ''for'' at line
    84) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ vowels_count = #vowels\n    local vowels_index = {}\n    local vowels_index_count\
    \ = 0\n    local vowels_index_index_count = 0\n    local vowels_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_count = 0\n    local vowels_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_count = 0\n    local vowels_index_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_count = 0\n    local\
    \ vowels_index_index_index_index_index_index_count = 0\n    local vowels_index_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_count = 0\n    local\
    \ vowels_index_index_index_index_index_index_count = 0\n    local vowels_index_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_count = 0\n    local\
    \ vowels_index_index_index_index_index_index_count = 0\n    local vowels_index_index_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_index_count = 0\n\
    \    local vowels_index_index_index_index_index_index_index_count = 0\n    local\
    \ vowels_index_index_index_index_index_index_index_count = 0\n    local vowels_index_index_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_index_count = 0\n\
    \    local vowels_index_index_index_index_index_index_index_count = 0\n    local\
    \ vowels_index_index_index_index_index_index_index_count = 0\n    local vowels_index_index_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_index_count = 0\n\
    \    local vowels_index_index_index_index_index_index_index_count = 0\n    local\
    \ vowels_index_index_index_index_index_index_index_count = 0\n    local vowels_index_index_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_index_count = 0\n\
    \    local vowels_index_index_index_index_index_index_index_count = 0\n    local\
    \ vowels_index_index_index_index_index_index_index_count = 0\n    local vowels_index_index_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_index_count = 0\n\
    \    local vowels_index_index_index_index_index_index_index_count = 0\n    local\
    \ vowels_index_index_index_index_index_index_index_count = 0\n    local vowels_index_index_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_index_count = 0\n\
    \    local vowels_index_index_index_index_index_index_index_count = 0\n    local\
    \ vowels_index_index_index_index_index_index_index_count = 0\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9l1_01hv.lua:78: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  local\
    \ vowels_index = 0\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = #vowels\n  local vowels_index_count_min = #vowels\n  local vowels_index_count_min\
    \ = #vowels\n  local vowels_index_count_max = #vowels\n  local vowels_index_count_min\
    \ = #vowels\n  local vowels_index_count_max = #vowels\n  local vowels_index_count_min\
    \ = #vowels\n  local vowels_index_count_max = #vowels\n  local vowels_index_count_min\
    \ = #vowels\n  local vowels_index_count_max = #vowels\n  local vowels_index_count_min\
    \ = #vowels\n  local vowels_index_count_max = #vowels\n  local vowels_index_count_min\
    \ = #vowels\n  local vowels_index_count_max = #vowels\n  local vowels_index_count_min\
    \ = #vowels\n  local vowels_index_count_max = #vowels\n  local vowels_index_count_min\
    \ = #vowels\n  local vowels_index_count_max = #vowels\n  local vowels_index_count_min\
    \ = #vowels\n  local vowels_index_count_max = #vowels\n  local vowels_index_count_min\
    \ = #vowels\n  local vowels_index_count_max = #vowels\n  local vowels_index_count_min\
    \ = #vowels\n  local vowels_index_count_max = #vowels\n  local vowels_index_count_min\
    \ = #vowels\n  local vowels_index_count_max = #vowels\n  local vowels_index_count_min\
    \ = #vowels\n  local vowels_index_count_max = #vowels\n  local vowels_index_count_min\
    \ = #vowels\n  local vowels_index_count_max = #vowels\n  local vowels_index_count_min\
    \ = #vowels\n  local vowels_index_count_max = #vowels\n  local vowels_index_count_min\
    \ = #vowels\n  local vowels_index_count_max = #vowels\n  local vowels_index_count_min\
    \ = #vowels\n  local vowels_index_count_max = #vowels\n  local vowels_index_count_min\
    \ = #vowels\n  local vowels_index_count_max = #vowels\n  local vowels_index_count_min\
    \ = #vowels\n  local vowels_index_count_max = #vowels\n  local vowels_index_count_min\
    \ = #vowels\n  local vowels_index_count_max = #vowels\n  local vowels_index_count_min\
    \ = #vowels\n  local vowels_index_count_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcy8e2hkl.lua:83: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph_aqum6f.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = #word\n  local vowels_index2 = #word\n  local\
    \ vowels_index3 = #word\n  local vowels_index4 = #word\n  local vowels_index5\
    \ = #word\n  local vowels_index6 = #word\n  local vowels_index7 = #word\n  local\
    \ vowels_index8 = #word\n  local vowels_index9 = #word\n  local vowels_index10\
    \ = #word\n  local vowels_index11 = #word\n  local vowels_index12 = #word\n  local\
    \ vowels_index13 = #word\n  local vowels_index14 = #word\n  local vowels_index15\
    \ = #word\n  local vowels_index16 = #word\n  local vowels_index17 = #word\n  local\
    \ vowels_index18 = #word\n  local vowels_index19 = #word\n  local vowels_index20\
    \ = #word\n  local vowels_index21 = #word\n  local vowels_index22 = #word\n  local\
    \ vowels_index23 = #word\n  local vowels_index24 = #word\n  local vowels_index25\
    \ = #word\n  local vowels_index26 = #word\n  local vowels_index27 = #word\n  local\
    \ vowels_index28 = #word\n  local vowels_index29 = #word\n  local vowels_index30\
    \ = #word\n  local vowels_index31 = #word\n  local vowels_index32 = #word\n  local\
    \ vowels_index33 = #word\n  local vowels_index34 = #word\n  local vowels_index35\
    \ = #word\n  local vowels_index36 = #word\n  local vowels_index37 = #word\n  local\
    \ vowels_index38 = #word\n  local vowels_index39 = #word\n  local vowels_index40\
    \ = #word\n  local vowels_index41 = #word\n  local vowels_index42 = #word\n  local\
    \ vowels_index43 = #word\n  local vowels_index44 = #word\n  local vowels_index45\
    \ = #word\n  local vowels_index46 = #word\n  local vowels_index47 = #word\n  local\
    \ vowels_index48 = #word\n  local vowels_index49 = #word\n  \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6e4kfrzd.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','y'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 0\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = 0\n    local vowels_index_count_max_minus_one\
    \ = 0\n    local vowels_index_count_max_minus_two = 0\n    local vowels_index_count_max_minus_three\
    \ = 0\n    local vowels_index_count_max_minus_four = 0\n    local vowels_index_count_max_minus_five\
    \ = 0\n    local vowels_index_count_max_minus_six = 0\n    local vowels_index_count_max_minus_seven\
    \ = 0\n    local vowels_index_count_max_minus_eight = 0\n    local vowels_index_count_max_minus_nine\
    \ = 0\n    local vowels_index_count_minus_one = 0\n    local vowels_index_count_minus_two\
    \ = 0\n    local vowels_index_count_minus_three = 0\n    local vowels_index_count_minus_four\
    \ = 0\n    local vowels_index_count_minus_five = 0\n    local vowels_index_count_minus_six\
    \ = 0\n    local vowels_index_count_minus_seven = 0\n    local vowels_index_count_minus_eight\
    \ = 0\n    local vowels_index_count_minus_nine = 0\n    local vowels_index_count_minus_ten\
    \ = 0\n    local vowels_index_count_minus_eleven = 0\n    local vowels_index_count_minus_twelve\
    \ = 0\n    local vowels_index_count_minus_thirteen = 0\n    local vowels_index_count_minus_fourteen\
    \ = 0\n    local vowels_index_count_minus_fifteen = 0\n    local vowels_index_count_minus_sixteen\
    \ = 0\n    local vowels_index_count_minus_seventeen = 0\n    local vowels_index_count_minus_eighteen\
    \ = 0\n    local vowels_index_count_minus_nineteen = 0\n    local vowels_index_count_minus_twenty\
    \ = 0\n    local vowels_index_count_minus_twenty_one = 0\n    local vowels_index_count_minus_twenty_two\
    \ = 0\n    local vowels_index_count_minus_twenty_three = 0\n    local vowels_index_count_minus_twenty_four\
    \ = 0\n    local vowels_index_count_minus_twenty_five = 0\n    local vowels_index_count_minus_twenty_six\
    \ = 0\n    local vowels_index_count_minus_twenty_seven = 0\n    local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkxpcc7rd.lua:78: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = {}\n\tlocal vowels_index_count = {}\n\tlocal vowels_index_count[1]\
    \ = vowels_count\n\tlocal vowels_index_count[2] = vowels_count\n\tlocal vowels_index_count[3]\
    \ = vowels_count\n\tlocal vowels_index_count[4] = vowels_count\n\tlocal vowels_index_count[5]\
    \ = vowels_count\n\tlocal vowels_index_count[6] = vowels_count\n\tlocal vowels_index_count[7]\
    \ = vowels_count\n\tlocal vowels_index_count[8] = vowels_count\n\tlocal vowels_index_count[9]\
    \ = vowels_count\n\tlocal vowels_index_count[10] = vowels_count\n\tlocal vowels_index_count[11]\
    \ = vowels_count\n\tlocal vowels_index_count[12] = vowels_count\n\tlocal vowels_index_count[13]\
    \ = vowels_count\n\tlocal vowels_index_count[14] = vowels_count\n\tlocal vowels_index_count[15]\
    \ = vowels_count\n\tlocal vowels_index_count[16] = vowels_count\n\tlocal vowels_index_count[17]\
    \ = vowels_count\n\tlocal vowels_index_count[18] = vowels_count\n\tlocal vowels_index_count[19]\
    \ = vowels_count\n\tlocal vowels_index_count[20] = vowels_count\n\tlocal vowels_index_count[21]\
    \ = vowels_count\n\tlocal vowels_index_count[22] = vowels_count\n\tlocal vowels_index_count[23]\
    \ = vowels_count\n\tlocal vowels_index_count[24] = vowels_count\n\tlocal vowels_index_count[25]\
    \ = vowels_count\n\tlocal vowels_index_count[26] = vowels_count\n\tlocal vowels_index_count[27]\
    \ = vowels_count\n\tlocal vowels_index_count[28] = vowels_count\n\tlocal vowels_index_count[29]\
    \ = vowels_count\n\tlocal vowels_index_count[30] = vowels_count\n\tlocal vowels_index_count[31]\
    \ = vowels_count\n\tlocal vowels_index_count[32] = vowels_count\n\tlocal vowels_index_count[33]\
    \ = vowels_count\n\tlocal vowels_index_count[34] = vowels_count\n\tlocal vowels_index_count[35]\
    \ = vowels_count\n\tlocal vowels_index_count[36] = vowels_count\n\tlocal vowels_index_count[37]\
    \ = vowels_count\n\tlocal vowels_index_count[38] = vowels_count\n\tlocal vowels_index_count[39]\
    \ = vowels_count\n\tlocal vowels_index_count[40] = vowels_count\n\tlocal vowels_index_count[41]\
    \ = vowels_count\n\tlocal \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpez7t1ys4.lua:20: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 1\n\tlocal vowels_index_count_prev\
    \ = 1\n\tlocal vowels_index_count_next = 1\n\tlocal vowels_index_count_prev2 =\
    \ 1\n\tlocal vowels_index_count_next2 = 1\n\tlocal vowels_index_count_prev3 =\
    \ 1\n\tlocal vowels_index_count_next3 = 1\n\tlocal vowels_index_count_prev4 =\
    \ 1\n\tlocal vowels_index_count_next4 = 1\n\tlocal vowels_index_count_prev5 =\
    \ 1\n\tlocal vowels_index_count_next5 = 1\n\tlocal vowels_index_count_prev6 =\
    \ 1\n\tlocal vowels_index_count_next6 = 1\n\tlocal vowels_index_count_prev7 =\
    \ 1\n\tlocal vowels_index_count_next7 = 1\n\tlocal vowels_index_count_prev8 =\
    \ 1\n\tlocal vowels_index_count_next8 = 1\n\tlocal vowels_index_count_prev9 =\
    \ 1\n\tlocal vowels_index_count_next9 = 1\n\tlocal vowels_index_count_prev10 =\
    \ 1\n\tlocal vowels_index_count_next10 = 1\n\tlocal vowels_index_count_prev11\
    \ = 1\n\tlocal vowels_index_count_next11 = 1\n\tlocal vowels_index_count_prev12\
    \ = 1\n\tlocal vowels_index_count_next12 = 1\n\tlocal vowels_index_count_prev13\
    \ = 1\n\tlocal vowels_index_count_next13 = 1\n\tlocal vowels_index_count_prev14\
    \ = 1\n\tlocal vowels_index_count_next14 = 1\n\tlocal vowels_index_count_prev15\
    \ = 1\n\tlocal vowels_index_count_next15 = 1\n\tlocal vowels_index_count_prev16\
    \ = 1\n\tlocal vowels_index_count_next16 = 1\n\tlocal vowels_index_count_prev17\
    \ = 1\n\tlocal vowels_index_count_next17 = 1\n\tlocal vowels_index_count_prev18\
    \ = 1\n\tlocal vowels_index_count_next18 = 1\n\tlocal vowels_index_count_prev19\
    \ = 1\n\tlocal vowels_index_count_next19 = 1\n\tlocal vowels_index_count_prev20\
    \ = 1\n\tlocal vowels_index_count_next20 = 1\n\tlocal vowels_index_count_prev21\
    \ = 1\n\tlocal vowels_index_count_next21 = 1\n\tlocal vowels_index_count_prev22\
    \ = 1\n\tlocal vowels_index_count_next22 = 1\n\tlocal vowels_index_count_prev23\
    \ = 1\n\tlocal vowels_index_count_next23 = 1\n\tlocal vowels_index_count_prev24\
    \ = 1\n\tlocal vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprfvt2spo.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_vowel = 0\n    local vowels_index_count_min_vowel\
    \ = 0\n    local vowels_index_count_max_vowel_index = 0\n    local vowels_index_count_min_vowel_index\
    \ = 0\n    local vowels_index_count_max_vowel_vowel = 0\n    local vowels_index_count_min_vowel_vowel\
    \ = 0\n    local vowels_index_count_max_vowel_vowel_index = 0\n    local vowels_index_count_min_vowel_vowel_index\
    \ = 0\n    local vowels_index_count_max_vowel_vowel_vowel = 0\n    local vowels_index_count_min_vowel_vowel_vowel\
    \ = 0\n    local vowels_index_count_max_vowel_vowel_vowel_index = 0\n    local\
    \ vowels_index_count_min_vowel_vowel_vowel_index = 0\n    local vowels_index_count_max_vowel_vowel_vowel_vowel\
    \ = 0\n    local vowels_index_count_min_vowel_vowel_vowel_vowel = 0\n    local\
    \ vowels_index_count_max_vowel_vowel_vowel_vowel_index = 0\n    local vowels_index_count_min_vowel_vowel_vowel_vowel_index\
    \ = 0\n    local vowels_index_count_max_vowel_vowel_vowel_vowel_vowel = 0\n  \
    \  local vowels_index_count_min_vowel_vowel_vowel_vowel_vowel = 0\n    local vowels_index_count_max_vowel_vowel_vowel_vowel_vowel_index\
    \ = 0\n    local vowels_index_count_min_vowel_vowel_vowel_vowel_vowel_index =\
    \ 0\n    local vowels_index_count_max_vowel_vowel_vowel_vowel_vowel_vowel = 0\n\
    \    local vowels_index_count_min_vowel_vowel_vowel_vowel_vowel_vowel = 0\n  \
    \  local vowels_index_count_max_vowel_vowel_vowel_vowel_vowel_vowel_index = 0\n\
    \    local vowels_index_count_min_vowel_vowel_vowel_vowel_vowel_vowel_index =\
    \ 0\n    local vowels_index_count_max_vowel_vowel_vowel_vowel_vowel_vowel_vowel\
    \ = 0\n    local vowels_index_count_min_vowel_vowel_vowel_vowel_vowel_vowel_vowel\
    \ = 0\n    local vowels_index_count_max_vowel_vowel\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr5o_jiae.lua:70: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3rbeav4u.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = { 'a', 'e', 'i', 'o', 'u' }\n\tlocal vowels_count = #vowels\n\
    \tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = #word\n\tlocal vowels_index_count_min_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index = #word\n\tlocal vowels_index_count_min_index_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index_index = #word\n\tlocal vowels_index_count_min_index_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index_index = #word\n\tlocal vowels_index_count_min_index_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index_index = #word\n\tlocal vowels_index_count_min_index_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index_index = #word\n\tlocal vowels_index_count_min_index_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index_index = #word\n\tlocal vowels_index_count_min_index_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index_index = #word\n\tlocal vowels_index_count_min_index_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index_index = #word\n\tlocal vowels_index_count_min_index_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index_index = #word\n\tlocal vowels_index_count_min_index_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index_index = #word\n\tlocal vowels_index_count_min_index_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index_index = #word\n\tlocal vowels_index_count_min_index_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index_index = #word\n\tlocal vowels_index_count_min_index_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index_index = #word\n\tlocal vowels_index_count_min_index_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index_index = #word\n\tlocal vowels_index_count_min_index_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index_index = #word\n\tlocal vowels_index_count_min_index_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index_index = #word\n\tlocal vowels_index_count_min_index_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index_index = #word\n\tlocal vowels_index_count_min_index_index_index\
    \ = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpax2os11k.lua:78: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = #word\n    local vowels_index2 = #word\n    local vowels_index3\
    \ = #word\n    local vowels_index4 = #word\n    local vowels_index5 = #word\n\
    \    local vowels_index6 = #word\n    local vowels_index7 = #word\n    local vowels_index8\
    \ = #word\n    local vowels_index9 = #word\n    local vowels_index10 = #word\n\
    \    local vowels_index11 = #word\n    local vowels_index12 = #word\n    local\
    \ vowels_index13 = #word\n    local vowels_index14 = #word\n    local vowels_index15\
    \ = #word\n    local vowels_index16 = #word\n    local vowels_index17 = #word\n\
    \    local vowels_index18 = #word\n    local vowels_index19 = #word\n    local\
    \ vowels_index20 = #word\n    local vowels_index21 = #word\n    local vowels_index22\
    \ = #word\n    local vowels_index23 = #word\n    local vowels_index24 = #word\n\
    \    local vowels_index25 = #word\n    local vowels_index26 = #word\n    local\
    \ vowels_index27 = #word\n    local vowels_index28 = #word\n    local vowels_index29\
    \ = #word\n    local vowels_index30 = #word\n    local vowels_index31 = #word\n\
    \    local vowels_index32 = #word\n    local vowels_index33 = #word\n    local\
    \ vowels_index34 = #word\n    local vowels_index35 = #word\n    local vowels_index36\
    \ = #word\n    local vowels_index37 = #word\n    local vowels_index38 = #word\n\
    \    local vowels_index39 = #word\n    local vowels_index40 = #word\n    local\
    \ vowels_index41 = #word\n    local vowels_index42 = #word\n    local vowels_index43\
    \ = #word\n    local vowels_index44 = #word\n    local vowels_index45 = #word\n\
    \    local vowels_index46 = #word\n    local vowels_index47 = #word\n    local\
    \ vowels_index48 = #word\n    local vowels_index49 = #word\n    local vowels_index50\
    \ = #word\n    local vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpoz4b2ia7.lua:88: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u'}\n\tlocal vowels_count = #vowels\n\tlocal\
    \ vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\
    \tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\
    \tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\
    \tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\
    \tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\
    \tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\
    \tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\
    \tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\
    \tlocal vowels_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgpfwqc8b.lua:92: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','y'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    local vowels_index_count = 0\n    for i = 1,\
    \ #word do\n        if word:sub(i,i) == vowels[vowels_index] then\n          \
    \  vowels_index[vowels_index_count] = i\n            vowels_index_count = vowels_index_count\
    \ + 1\n        end\n    end\n    local vowels_index_count = vowels_index_count\
    \ - 1\n    local vowels_index_count = vowels_index_count + 1\n    local vowels_index_count\
    \ = vowels_index_count - 1\n    local vowels_index_count = vowels_index_count\
    \ + 1\n    local vowels_index_count = vowels_index_count - 1\n    local vowels_index_count\
    \ = vowels_index_count + 1\n    local vowels_index_count = vowels_index_count\
    \ - 1\n    local vowels_index_count = vowels_index_count + 1\n    local vowels_index_count\
    \ = vowels_index_count - 1\n    local vowels_index_count = vowels_index_count\
    \ + 1\n    local vowels_index_count = vowels_index_count - 1\n    local vowels_index_count\
    \ = vowels_index_count + 1\n    local vowels_index_count = vowels_index_count\
    \ - 1\n    local vowels_index_count = vowels_index_count + 1\n    local vowels_index_count\
    \ = vowels_index_count - 1\n    local vowels_index_count = vowels_index_count\
    \ + 1\n    local vowels_index_count = vowels_index_count - 1\n    local vowels_index_count\
    \ = vowels_index_count + 1\n    local vowels_index_count = vowels_index_count\
    \ - 1\n    local vowels_index_count = vowels_index_count + 1\n    local vowels_index_count\
    \ = vowels_index_count - 1\n    local vowels_index_count = vowels_index_count\
    \ + 1\n    local vowels_index_count = vowels_index_count - 1\n    local vowels_index_count\
    \ = vowels_index_count + 1\n    local vowels_index_count = vowels_index_count\
    \ - 1\n    local vowels_index_count = vowels_index_count + 1\n    local vowels_index_count\
    \ = vowels_index_count - 1\n    local vowels_index_count = vowels_index_count\
    \ + 1\n    local vowels_index_count = vowels_index_count - 1\n    local vowels_index_count\
    \ = vowels_index_count + 1\n    local vowels_index_count = vowels_index_count\
    \ - 1\n    local vowels_index_count = vowels_index_count + 1\n    local vowels_index_count\
    \ = vowels_index_count - 1\n    local vowels_index_count = vowels_index_count\
    \ + 1\n    local vowels_index_count = vowels_index_count - 1\n    local vowel\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1ydsoswy.lua:81: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_min = 0\n\
    \tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\
    \tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\
    \tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\
    \tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\
    \tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\
    \tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\
    \tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = 0\n\tlocal vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg5duuqst.lua:92: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    local vowels_index_count = {}\n    local vowels_index_count[1]\
    \ = 1\n    local vowels_index_count[2] = 2\n    local vowels_index_count[3] =\
    \ 3\n    local vowels_index_count[4] = 4\n    local vowels_index_count[5] = 5\n\
    \    local vowels_index_count[6] = 6\n    local vowels_index_count[7] = 7\n  \
    \  local vowels_index_count[8] = 8\n    local vowels_index_count[9] = 9\n    local\
    \ vowels_index_count[10] = 10\n    local vowels_index_count[11] = 11\n    local\
    \ vowels_index_count[12] = 12\n    local vowels_index_count[13] = 13\n    local\
    \ vowels_index_count[14] = 14\n    local vowels_index_count[15] = 15\n    local\
    \ vowels_index_count[16] = 16\n    local vowels_index_count[17] = 17\n    local\
    \ vowels_index_count[18] = 18\n    local vowels_index_count[19] = 19\n    local\
    \ vowels_index_count[20] = 20\n    local vowels_index_count[21] = 21\n    local\
    \ vowels_index_count[22] = 22\n    local vowels_index_count[23] = 23\n    local\
    \ vowels_index_count[24] = 24\n    local vowels_index_count[25] = 25\n    local\
    \ vowels_index_count[26] = 26\n    local vowels_index_count[27] = 27\n    local\
    \ vowels_index_count[28] = 28\n    local vowels_index_count[29] = 29\n    local\
    \ vowels_index_count[30] = 30\n    local vowels_index_count[31] = 31\n    local\
    \ vowels_index_count[32] = 32\n    local vowels_index_count[33] = 33\n    local\
    \ vowels_index_count[34] = 34\n    local vowels_index_count[35] = 35\n    local\
    \ vowels_index_count[36] = 36\n    local vowels_index_count[37] = 37\n    local\
    \ vowels_index_count[38] = 38\n    local vowels_index_count[39] = 39\n    local\
    \ vowels_index_count[40] = 40\n    local vowels_index_count[41] = 41\n    local\
    \ vowels_index_count[42] = 42\n    local vowels_index_count[43] = 43\n    local\
    \ vowels_index_count[44] = 44\n    local vowels_index_count\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc4pjd024.lua:20: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdpow4a0o.lua:108: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u','y'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdz0o7nhr.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowel_found = false\n\tlocal vowel_start = nil\n\tlocal vowel_end = nil\n\
    \tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc3ehcswy.lua:108: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = 0\n  \
    \  local vowels_index = 0\n    local vowels_index_count = 0\n    local vowels_index_count_min\
    \ = math.min(#word, 2)\n    local vowels_index_count_max = math.max(#word, 2)\n\
    \    local vowels_index_count_min = math.min(#word, 2)\n    local vowels_index_count_max\
    \ = math.max(#word, 2)\n    local vowels_index_count_min = math.min(#word, 2)\n\
    \    local vowels_index_count_max = math.max(#word, 2)\n    local vowels_index_count_min\
    \ = math.min(#word, 2)\n    local vowels_index_count_max = math.max(#word, 2)\n\
    \    local vowels_index_count_min = math.min(#word, 2)\n    local vowels_index_count_max\
    \ = math.max(#word, 2)\n    local vowels_index_count_min = math.min(#word, 2)\n\
    \    local vowels_index_count_max = math.max(#word, 2)\n    local vowels_index_count_min\
    \ = math.min(#word, 2)\n    local vowels_index_count_max = math.max(#word, 2)\n\
    \    local vowels_index_count_min = math.min(#word, 2)\n    local vowels_index_count_max\
    \ = math.max(#word, 2)\n    local vowels_index_count_min = math.min(#word, 2)\n\
    \    local vowels_index_count_max = math.max(#word, 2)\n    local vowels_index_count_min\
    \ = math.min(#word, 2)\n    local vowels_index_count_max = math.max(#word, 2)\n\
    \    local vowels_index_count_min = math.min(#word, 2)\n    local vowels_index_count_max\
    \ = math.max(#word, 2)\n    local vowels_index_count_min = math.min(#word, 2)\n\
    \    local vowels_index_count_max = math.max(#word, 2)\n    local vowels_index_count_min\
    \ = math.min(#word, 2)\n    local vowels_index_count_max = math.max(#word, 2)\n\
    \    local vowels_index_count_min = math.min(#word, 2)\n    local vowels_index_count_max\
    \ = math.max(#word, 2)\n    local vowels_index_count_min = math.min(#word, 2)\n\
    \    local vowels_index_count_max = math.max(#word, 2)\n    local vowels_index_count_min\
    \ = math.min(#word, 2)\n    local vowels_index_count_max = math.max(#word, 2)\n\
    \    local vowels_index_count_min = math.min(#word, 2)\n    local vowels_index_count_max\
    \ = math.max(#word, 2)\n    local vowels_index_count_min = math.min(#word, 2)\n\
    \    local vowels_index_count_max = math.max(#word, 2)\n    local vowels_index_count_min\
    \ = math.min(#word, \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdk0j4ikc.lua:57: '')'' expected (to close ''('' at line 56)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','y'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = 1\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8htb_7se.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 1\n    local vowels_index_count_prev\
    \ = 1\n    local vowels_index_count_next = 1\n    local vowels_index_count_next2\
    \ = 1\n    local vowels_index_count_next3 = 1\n    local vowels_index_count_next4\
    \ = 1\n    local vowels_index_count_next5 = 1\n    local vowels_index_count_next6\
    \ = 1\n    local vowels_index_count_next7 = 1\n    local vowels_index_count_next8\
    \ = 1\n    local vowels_index_count_next9 = 1\n    local vowels_index_count_next10\
    \ = 1\n    local vowels_index_count_next11 = 1\n    local vowels_index_count_next12\
    \ = 1\n    local vowels_index_count_next13 = 1\n    local vowels_index_count_next14\
    \ = 1\n    local vowels_index_count_next15 = 1\n    local vowels_index_count_next16\
    \ = 1\n    local vowels_index_count_next17 = 1\n    local vowels_index_count_next18\
    \ = 1\n    local vowels_index_count_next19 = 1\n    local vowels_index_count_next20\
    \ = 1\n    local vowels_index_count_next21 = 1\n    local vowels_index_count_next22\
    \ = 1\n    local vowels_index_count_next23 = 1\n    local vowels_index_count_next24\
    \ = 1\n    local vowels_index_count_next25 = 1\n    local vowels_index_count_next26\
    \ = 1\n    local vowels_index_count_next27 = 1\n    local vowels_index_count_next28\
    \ = 1\n    local vowels_index_count_next29 = 1\n    local vowels_index_count_next30\
    \ = 1\n    local vowels_index_count_next31 = 1\n    local vowels_index_count_next32\
    \ = 1\n    local vowels_index_count_next33 = 1\n    local vowels_index_count_next34\
    \ = 1\n    local vowels_index_count_next35 = 1\n    local vowels_index_count_next36\
    \ = 1\n    local vowels_index_count_next37 = 1\n    local vowels_index_count_next38\
    \ = 1\n    local vowels_index_count_next39 = 1\n    local vowels_index_count_next40\
    \ = 1\n    local vowels_index_count_next41 = 1\n    local vowels_index_count_next42\
    \ = 1\n    local vowels_index_count_next43 = 1\n    local vowels_index_count_next44\
    \ = 1\n    local vowels_index_count_next45 = 1\n    local vowels_index_count_next46\
    \ = 1\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnz_gwpbz.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    local vowels_index_count = 0\n    local vowels_index_max\
    \ = 0\n    local vowels_index_min = 0\n    local vowels_index_sum = 0\n    local\
    \ vowels_index_sum_max = 0\n    local vowels_index_sum_min = 0\n    local vowels_index_sum_diff\
    \ = 0\n    local vowels_index_sum_diff_max = 0\n    local vowels_index_sum_diff_min\
    \ = 0\n    local vowels_index_sum_diff_sum = 0\n    local vowels_index_sum_diff_sum_max\
    \ = 0\n    local vowels_index_sum_diff_sum_min = 0\n    local vowels_index_sum_diff_sum_diff\
    \ = 0\n    local vowels_index_sum_diff_sum_diff_max = 0\n    local vowels_index_sum_diff_sum_diff_min\
    \ = 0\n    local vowels_index_sum_diff_sum_diff_sum = 0\n    local vowels_index_sum_diff_sum_diff_sum_max\
    \ = 0\n    local vowels_index_sum_diff_sum_diff_sum_min = 0\n    local vowels_index_sum_diff_sum_diff_sum_diff\
    \ = 0\n    local vowels_index_sum_diff_sum_diff_sum_diff_max = 0\n    local vowels_index_sum_diff_sum_diff_sum_diff_min\
    \ = 0\n    local vowels_index_sum_diff_sum_diff_sum_diff_sum = 0\n    local vowels_index_sum_diff_sum_diff_sum_diff_sum_max\
    \ = 0\n    local vowels_index_sum_diff_sum_diff_sum_diff_sum_min = 0\n    local\
    \ vowels_index_sum_diff_sum_diff_sum_diff_sum_diff = 0\n    local vowels_index_sum_diff_sum_diff_sum_diff_sum_diff_max\
    \ = 0\n    local vowels_index_sum_diff_sum_diff_sum_diff_sum_diff_min = 0\n  \
    \  local vowels_index_sum_diff_sum_diff_sum_diff_sum_diff_sum = 0\n    local vowels_index_sum_diff_sum_diff_sum_diff_sum_diff_sum_max\
    \ = 0\n    local vowels_index_sum_diff_sum_diff_sum_diff_sum_diff_min = 0\n  \
    \  local vowels_index_sum_diff_sum_diff_sum_diff_sum_diff_sum_diff = 0\n    local\
    \ vowels_index_sum_diff_sum_diff_sum_diff_sum_diff_sum_max = 0\n    local vowels_index_sum_diff_sum_diff_sum_diff_sum_diff_sum_min\
    \ = 0\n    local vowels_index_sum_diff_sum_diff_sum_diff_sum_diff_sum_diff_sum\
    \ = 0\n    local vowels_index_sum_diff_sum_diff_sum_diff_sum_diff_sum_diff_sum_max\
    \ = 0\n    local vowels_index_sum_diff_sum_diff_sum_diff_sum_diff_sum_diff_min\
    \ = 0\n    local vowels_index_sum_diff_sum_diff_sum_diff_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc_hyeiow.lua:75: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels_index\n  local vowels_index = {}\n\
    \  for i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local\
    \ vowels_count = #vowels_index\n  local vowels_index = {}\n  for i = 1, vowels_count\
    \ do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count = #vowels_index\n\
    \  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels_index\n  local vowels_index = {}\n\
    \  for i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local\
    \ vowels_count = #vowels_index\n  local vowels_index = {}\n  for i = 1, vowels_count\
    \ do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count = #vowels_index\n\
    \  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels_index\n  local vowels_index = {}\n\
    \  for i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local\
    \ vowels_count = #vowels_index\n  local vowels_index = {}\n  for i = 1, vowels_count\
    \ do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count = #vowels_index\n\
    \  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels_index\n  local vowels_index = {}\n\
    \  for i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local\
    \ vowels_count = #vowels_index\n  local vowels_index = {}\n  for i = 1, vowels_count\
    \ do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count = #vowels_index\n\
    \  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels_index\n  local vowels_index = {}\n\
    \  for i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local\
    \ vowels_count = #vowels_index\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp84w7q8if.lua:108: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = 1\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcbp9r77m.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    local vowels_index_count = 0\n    local vowels_index_max\
    \ = 0\n    local vowels_index_min = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_index = 0\n    local vowels_index_max_count = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_value = 0\n\
    \    local vowels_index_min_value = 0\n    local vowels_index_max_value_index\
    \ = 0\n    local vowels_index_min_value_index = 0\n    local vowels_index_max_value_count\
    \ = 0\n    local vowels_index_min_value_count = 0\n    local vowels_index_max_value_min\
    \ = 0\n    local vowels_index_min_value_min = 0\n    local vowels_index_max_value_max\
    \ = 0\n    local vowels_index_min_value_max = 0\n    local vowels_index_max_value_min_index\
    \ = 0\n    local vowels_index_min_value_min_index = 0\n    local vowels_index_max_value_max_index\
    \ = 0\n    local vowels_index_min_value_max_index = 0\n    local vowels_index_max_value_min_count\
    \ = 0\n    local vowels_index_min_value_min_count = 0\n    local vowels_index_max_value_min_min\
    \ = 0\n    local vowels_index_min_value_min_min = 0\n    local vowels_index_max_value_min_max\
    \ = 0\n    local vowels_index_min_value_min_max = 0\n    local vowels_index_max_value_min_min_index\
    \ = 0\n    local vowels_index_min_value_min_min_index = 0\n    local vowels_index_max_value_min_max_index\
    \ = 0\n    local vowels_index_min_value_min_max_index = 0\n    local vowels_index_max_value_min_min_count\
    \ = 0\n    local vowels_index_min_value_min_min_count = 0\n    local vowels_index_max_value_min_min_min\
    \ = 0\n    local vowels_index_min_value_min_min_min = 0\n    local vowels_index_max_value_min_min_max\
    \ = 0\n    local vowels_index_min_value_min_min_max = 0\n    local vowels_index_max_value_min_min_min_index\
    \ = 0\n    local vowels_index_min_value_min_min_min_index = 0\n    local vowels_index_max_value_min_min_max_index\
    \ = 0\n    local vowels_index_min_value_min_min_max_index = 0\n    local vowels_index_max_value_min_min_min_count\
    \ = 0\n    local vowels_index_min_value_min_min_count = 0\n    local vowels_index_max_value_min_min_min\
    \ = 0\n    local vowels_index_min_value_min_min_min = 0\n    local vowels_index_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzp_i3vum.lua:84: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl4nlqfc7.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ vowels[i])\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index\
    \ = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\
    \tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor\
    \ i = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\t\
    end\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i\
    \ = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\tend\n\
    \tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1,\
    \ vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\tend\n\t\
    local vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count\
    \ do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\tend\n\tlocal vowels_count\
    \ = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\
    \ttable.insert(vowels_index, vowels_index[i])\n\tend\n\tlocal vowels_count = #vowels_index\n\
    \tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ vowels_index[i])\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index\
    \ = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\
    \tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor\
    \ i = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\t\
    end\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i\
    \ = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\tend\n\
    \tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1,\
    \ vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\tend\n\t\
    local vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count\
    \ do\n\t\ttable.insert(vowels_index, vowels_index\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp94qvyut6.lua:81: '')'' expected (to close ''('' at line 80)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 1\n\tlocal vowels_index_count_prev\
    \ = 1\n\tlocal vowels_index_count_next = 1\n\tlocal vowels_index_count_next2 =\
    \ 1\n\tlocal vowels_index_count_next3 = 1\n\tlocal vowels_index_count_next4 =\
    \ 1\n\tlocal vowels_index_count_next5 = 1\n\tlocal vowels_index_count_next6 =\
    \ 1\n\tlocal vowels_index_count_next7 = 1\n\tlocal vowels_index_count_next8 =\
    \ 1\n\tlocal vowels_index_count_next9 = 1\n\tlocal vowels_index_count_next10 =\
    \ 1\n\tlocal vowels_index_count_next11 = 1\n\tlocal vowels_index_count_next12\
    \ = 1\n\tlocal vowels_index_count_next13 = 1\n\tlocal vowels_index_count_next14\
    \ = 1\n\tlocal vowels_index_count_next15 = 1\n\tlocal vowels_index_count_next16\
    \ = 1\n\tlocal vowels_index_count_next17 = 1\n\tlocal vowels_index_count_next18\
    \ = 1\n\tlocal vowels_index_count_next19 = 1\n\tlocal vowels_index_count_next20\
    \ = 1\n\tlocal vowels_index_count_next21 = 1\n\tlocal vowels_index_count_next22\
    \ = 1\n\tlocal vowels_index_count_next23 = 1\n\tlocal vowels_index_count_next24\
    \ = 1\n\tlocal vowels_index_count_next25 = 1\n\tlocal vowels_index_count_next26\
    \ = 1\n\tlocal vowels_index_count_next27 = 1\n\tlocal vowels_index_count_next28\
    \ = 1\n\tlocal vowels_index_count_next29 = 1\n\tlocal vowels_index_count_next30\
    \ = 1\n\tlocal vowels_index_count_next31 = 1\n\tlocal vowels_index_count_next32\
    \ = 1\n\tlocal vowels_index_count_next33 = 1\n\tlocal vowels_index_count_next34\
    \ = 1\n\tlocal vowels_index_count_next35 = 1\n\tlocal vowels_index_count_next36\
    \ = 1\n\tlocal vowels_index_count_next37 = 1\n\tlocal vowels_index_count_next38\
    \ = 1\n\tlocal vowels_index_count_next39 = 1\n\tlocal vowels_index_count_next40\
    \ = 1\n\tlocal vowels_index_count_next41 = 1\n\tlocal vowels_index_count_next42\
    \ = 1\n\tlocal vowels_index_count_next43 = 1\n\tlocal vowels_index_count_next44\
    \ = 1\n\tlocal vowels_index_count_next45 = 1\n\tlocal vowels_index_count_next46\
    \ = 1\n\t\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpoukvi_35.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaakduzj9.lua:108: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ vowels[i])\n    end\n    local vowels_count = #word\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, word[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_sc5nkf8.lua:103: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ vowels[i])\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index\
    \ = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels[i])\n\
    \tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor\
    \ i = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels[i])\n\tend\n\t\
    local vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count\
    \ do\n\t\ttable.insert(vowels_index, vowels[i])\n\tend\n\tlocal vowels_count =\
    \ #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\t\
    table.insert(vowels_index, vowels[i])\n\tend\n\tlocal vowels_count = #vowels_index\n\
    \tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ vowels[i])\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index\
    \ = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels[i])\n\
    \tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor\
    \ i = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels[i])\n\tend\n\t\
    local vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count\
    \ do\n\t\ttable.insert(vowels_index, vowels[i])\n\tend\n\tlocal vowels_count =\
    \ #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\t\
    table.insert(vowels_index, vowels[i])\n\tend\n\tlocal vowels_count = #vowels_index\n\
    \tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ vowels[i])\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index\
    \ = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels[i])\n\
    \tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor\
    \ i = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels[i])\n\tend\n\t\
    local vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = \nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5xf6ubzw.lua:85: '','' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_min = #vowels\n    local vowels_index_count_max =\
    \ 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_value = nil\n    local vowels_index_count_max_value\
    \ = nil\n    local vowels_index_count_min_value = nil\n    local vowels_index_count_max_value\
    \ = nil\n    local vowels_index_count_min_value = nil\n    local vowels_index_count_max_value\
    \ = nil\n    local vowels_index_count_min_value = nil\n    local vowels_index_count_max_value\
    \ = nil\n    local vowels_index_count_min_value = nil\n    local vowels_index_count_max_value\
    \ = nil\n    local vowels_index_count_min_value = nil\n    local vowels_index_count_max_value\
    \ = nil\n    local vowels_index_count_min_value = nil\n    local vowels_index_count_max_value\
    \ = nil\n    local vowels_index_count_min_value = nil\n    local vowels_index_count_max_value\
    \ = nil\n    local vowels_index_count_min_value = nil\n    local vowels_index_count_max_value\
    \ = nil\n    local vowels_index_count_min_value = nil\n    local vowels_index_count_max_value\
    \ = nil\n    local vowels_index_count_min_value = nil\n    local vowels_index_count_max_value\
    \ = nil\n    local vowels_index_count_min_value = nil\n    local vowels_index_count_max_value\
    \ = nil\n    local vowels_index_count_min_value = nil\n    local vowels_index_count_max_value\
    \ = nil\n    local vowels_index_count_min_value = nil\n    local vowels_index_count_max_value\
    \ = nil\n    local vowels_index_count_min_value = nil\n    local vowels_index_count_max_value\
    \ = nil\n    local vowels_index_count_min_value = nil\n    local vowels_index_count_max_value\
    \ = nil\n    local vowels_index_count_min_value = nil\n    local vowels_index_count_max_value\
    \ = nil\n    local vowels_index_count_min_value = nil\n    local vowels_index_count_max_value\
    \ = nil\n    local vowels_index_count_min_value = nil\n    local vowels_index_count_max_value\
    \ = nil\n    local vowels_index_count_min_value = nil\n    local vowels_index_count_max_value\
    \ = nil\n    local vowels_index_count_min_value = nil\n    local vowels_index_count_max_value\
    \ = nil\n    local vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplrnyhg7a.lua:86: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels_index\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n   \
    \ local vowels_count = #vowels_index\n    local vowels_index = {}\n    for i =\
    \ 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local\
    \ vowels_count = #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count\
    \ do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count =\
    \ #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count do\n\
    \        table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels_index\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels_index\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n   \
    \ local vowels_count = #vowels_index\n    local vowels_index = {}\n    for i =\
    \ 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local\
    \ vowels_count = #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count\
    \ do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count =\
    \ #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count do\n\
    \        table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels_index\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp2vft74j.lua:108: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 0\n  local vowels_index_count = 0\n  local vowels_index_count_min\
    \ = #vowels\n  local vowels_index_count_max = 0\n  local vowels_index_count_max_min\
    \ = 0\n  local vowels_index_count_max_min_index = 0\n  local vowels_index_count_max_min_index2\
    \ = 0\n  local vowels_index_count_max_min_index3 = 0\n  local vowels_index_count_max_min_index4\
    \ = 0\n  local vowels_index_count_max_min_index5 = 0\n  local vowels_index_count_max_min_index6\
    \ = 0\n  local vowels_index_count_max_min_index7 = 0\n  local vowels_index_count_max_min_index8\
    \ = 0\n  local vowels_index_count_max_min_index9 = 0\n  local vowels_index_count_max_min_index10\
    \ = 0\n  local vowels_index_count_max_min_index11 = 0\n  local vowels_index_count_max_min_index12\
    \ = 0\n  local vowels_index_count_max_min_index13 = 0\n  local vowels_index_count_max_min_index14\
    \ = 0\n  local vowels_index_count_max_min_index15 = 0\n  local vowels_index_count_max_min_index16\
    \ = 0\n  local vowels_index_count_max_min_index17 = 0\n  local vowels_index_count_max_min_index18\
    \ = 0\n  local vowels_index_count_max_min_index19 = 0\n  local vowels_index_count_max_min_index20\
    \ = 0\n  local vowels_index_count_max_min_index21 = 0\n  local vowels_index_count_max_min_index22\
    \ = 0\n  local vowels_index_count_max_min_index23 = 0\n  local vowels_index_count_max_min_index24\
    \ = 0\n  local vowels_index_count_max_min_index25 = 0\n  local vowels_index_count_max_min_index26\
    \ = 0\n  local vowels_index_count_max_min_index27 = 0\n  local vowels_index_count_max_min_index28\
    \ = 0\n  local vowels_index_count_max_min_index29 = 0\n  local vowels_index_count_max_min_index30\
    \ = 0\n  local vowels_index_count_max_min_index31 = 0\n  local vowels_index_count_max_min_index32\
    \ = 0\n  local vowels_index_count_max_min_index33 = 0\n  local vowels_index_count_max_min_index34\
    \ = 0\n  local vowels_index_count_max_min_index35 = 0\n  local vowels_index_count_max_min_index36\
    \ = 0\n  local vowels_index_count_max_min_index37 = 0\n  local vowel\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8vw4sg61.lua:80: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    local vowels_count = 0\n\
    \    local vowel_index = 1\n    local vowel_found = false\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8wui17xi.lua:80: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdm5fkfge.lua:107: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','y'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = {}\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_count = 0\n\tlocal vowels_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_count = 0\n\tlocal vowels_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_count = 0\n\tlocal vowels_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_count = 0\n\tlocal vowels_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_count = 0\n\tlocal vowels_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_count = 0\n\tlocal vowels_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_count = 0\n\tlocal vowels_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_count = 0\n\tlocal vowels_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_count = 0\n\tlocal vowels_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_count = 0\n\tlocal vowels_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_count = 0\n\tlocal vowels_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_count = 0\n\tlocal vowels_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_count = 0\n\tlocal vowels_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_count = 0\n\tlocal vowels_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_count = 0\n\tlocal vowels_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_count = 0\n\tlocal vowels_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_count = 0\n\tlocal vowels_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_count = 0\n\tlocal vowels_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_count = 0\n\tlocal vowels_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_count = 0\n\tlocal vowels_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_count = 0\n\tlocal vowels_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpoq7pwveb.lua:83: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u'}\n  local vowels_count = #vowels\n  local\
    \ vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = 1\n  local vowels_index_count_max_minus_1\
    \ = #word-1\n  local vowels_index_count_max_minus_2 = #word-2\n  local vowels_index_count_max_minus_3\
    \ = #word-3\n  local vowels_index_count_max_minus_4 = #word-4\n  local vowels_index_count_max_minus_5\
    \ = #word-5\n  local vowels_index_count_max_minus_6 = #word-6\n  local vowels_index_count_max_minus_7\
    \ = #word-7\n  local vowels_index_count_max_minus_8 = #word-8\n  local vowels_index_count_max_minus_9\
    \ = #word-9\n  local vowels_index_count_max_minus_10 = #word-10\n  local vowels_index_count_max_minus_11\
    \ = #word-11\n  local vowels_index_count_max_minus_12 = #word-12\n  local vowels_index_count_max_minus_13\
    \ = #word-13\n  local vowels_index_count_max_minus_14 = #word-14\n  local vowels_index_count_max_minus_15\
    \ = #word-15\n  local vowels_index_count_max_minus_16 = #word-16\n  local vowels_index_count_max_minus_17\
    \ = #word-17\n  local vowels_index_count_max_minus_18 = #word-18\n  local vowels_index_count_max_minus_19\
    \ = #word-19\n  local vowels_index_count_max_minus_20 = #word-20\n  local vowels_index_count_max_minus_21\
    \ = #word-21\n  local vowels_index_count_max_minus_22 = #word-22\n  local vowels_index_count_max_minus_23\
    \ = #word-23\n  local vowels_index_count_max_minus_24 = #word-24\n  local vowels_index_count_max_minus_25\
    \ = #word-25\n  local vowels_index_count_max_minus_26 = #word-26\n  local vowels_index_count_max_minus_27\
    \ = #word-27\n  local vowels_index_count_max_minus_28 = #word-28\n  local vowels_index_count_max_minus_29\
    \ = #word-29\n  local vowels_index_count_max_minus_30 = #word-30\n  local vowels_index_count_max_minus_31\
    \ = #word-31 \n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe2kcqmwy.lua:73: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = 1\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiuxgsf88.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpluzjfarg.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = 0\n  \
    \  local vowels_index = 0\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = #vowels\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = #vowels\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = #vowels\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = #vowels\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = #vowels\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = #vowels\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = #vowels\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = #vowels\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = #vowels\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = #vowels\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = #vowels\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = #vowels\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = #vowels\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = #vowels\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = #vowels\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = #vowels\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = #vowels\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = #vowels\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = #vowels\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = #vowels\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = #\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6p8st9t8.lua:64: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcegj_fjp.lua:108: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_min = #vowels\n    local vowels_index_count_max =\
    \ 0\n    local vowels_index_count_max_min = 0\n    local vowels_index_count_max_min_index\
    \ = 0\n    local vowels_index_count_max_min_index2 = 0\n    local vowels_index_count_max_min_index3\
    \ = 0\n    local vowels_index_count_max_min_index4 = 0\n    local vowels_index_count_max_min_index5\
    \ = 0\n    local vowels_index_count_max_min_index6 = 0\n    local vowels_index_count_max_min_index7\
    \ = 0\n    local vowels_index_count_max_min_index8 = 0\n    local vowels_index_count_max_min_index9\
    \ = 0\n    local vowels_index_count_max_min_index10 = 0\n    local vowels_index_count_max_min_index11\
    \ = 0\n    local vowels_index_count_max_min_index12 = 0\n    local vowels_index_count_max_min_index13\
    \ = 0\n    local vowels_index_count_max_min_index14 = 0\n    local vowels_index_count_max_min_index15\
    \ = 0\n    local vowels_index_count_max_min_index16 = 0\n    local vowels_index_count_max_min_index17\
    \ = 0\n    local vowels_index_count_max_min_index18 = 0\n    local vowels_index_count_max_min_index19\
    \ = 0\n    local vowels_index_count_max_min_index20 = 0\n    local vowels_index_count_max_min_index21\
    \ = 0\n    local vowels_index_count_max_min_index22 = 0\n    local vowels_index_count_max_min_index23\
    \ = 0\n    local vowels_index_count_max_min_index24 = 0\n    local vowels_index_count_max_min_index25\
    \ = 0\n    local vowels_index_count_max_min_index26 = 0\n    local vowels_index_count_max_min_index27\
    \ = 0\n    local vowels_index_count_max_min_index28 = 0\n    local vowels_index_count_max_min_index29\
    \ = 0\n    local vowels_index_count_max_min_index30 = 0\n    local vowels_index_count_max_min_index31\
    \ = 0\n    local vowels_index_count_max_min_index32 = 0\n    local vowels_index_count_max_min_index33\
    \ = 0\n    local vowels_index_count_max_min_index34 = 0\n    local vowels_index_count_max_min_index35\
    \ = 0\n    local vowels_index_count_max_min_index36 = 0\n    local vowel\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfcf___eu.lua:79: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = 0\n  \
    \  local vowels_count_max = 3\n    local vowels_count_min = 1\n    local vowels_count_max\
    \ = #vowels\n    local vowels_count_min = #vowels\n    local vowels_count_min\
    \ = #vowels\n    local vowels_count_max = #vowels\n    local vowels_count_min\
    \ = #vowels\n    local vowels_count_max = #vowels\n    local vowels_count_min\
    \ = #vowels\n    local vowels_count_max = #vowels\n    local vowels_count_min\
    \ = #vowels\n    local vowels_count_max = #vowels\n    local vowels_count_min\
    \ = #vowels\n    local vowels_count_max = #vowels\n    local vowels_count_min\
    \ = #vowels\n    local vowels_count_max = #vowels\n    local vowels_count_min\
    \ = #vowels\n    local vowels_count_max = #vowels\n    local vowels_count_min\
    \ = #vowels\n    local vowels_count_max = #vowels\n    local vowels_count_min\
    \ = #vowels\n    local vowels_count_max = #vowels\n    local vowels_count_min\
    \ = #vowels\n    local vowels_count_max = #vowels\n    local vowels_count_min\
    \ = #vowels\n    local vowels_count_max = #vowels\n    local vowels_count_min\
    \ = #vowels\n    local vowels_count_max = #vowels\n    local vowels_count_min\
    \ = #vowels\n    local vowels_count_max = #vowels\n    local vowels_count_min\
    \ = #vowels\n    local vowels_count_max = #vowels\n    local vowels_count_min\
    \ = #vowels\n    local vowels_count_max = #vowels\n    local vowels_count_min\
    \ = #vowels\n    local vowels_count_max = #vowels\n    local vowels_count_min\
    \ = #vowels\n    local vowels_count_max = #vowels\n    local vowels_count_min\
    \ = #vowels\n    local vowels_count_max = #vowels\n    local vowels_count_min\
    \ = #vowels\n    local vowels_count_max = #vowels\n    local vowels_count_min\
    \ = #vowels\n    local vowels_count_max = #vowels\n    local vowels_count_min\
    \ = #vowels\n    local vowels_count_max = #vowels\n    local vowels_count_min\
    \ = #vowels\n    local vowels_count_max = #vowels\n    local vowels_count_min\
    \ = #vowels\n    local vowels_count_max = #\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprs98y379.lua:68: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 1\n\tlocal vowels_index_count_prev\
    \ = 1\n\tlocal vowels_index_count_next = 1\n\tlocal vowels_index_count_next2 =\
    \ 1\n\tlocal vowels_index_count_next3 = 1\n\tlocal vowels_index_count_next4 =\
    \ 1\n\tlocal vowels_index_count_next5 = 1\n\tlocal vowels_index_count_next6 =\
    \ 1\n\tlocal vowels_index_count_next7 = 1\n\tlocal vowels_index_count_next8 =\
    \ 1\n\tlocal vowels_index_count_next9 = 1\n\tlocal vowels_index_count_next10 =\
    \ 1\n\tlocal vowels_index_count_next11 = 1\n\tlocal vowels_index_count_next12\
    \ = 1\n\tlocal vowels_index_count_next13 = 1\n\tlocal vowels_index_count_next14\
    \ = 1\n\tlocal vowels_index_count_next15 = 1\n\tlocal vowels_index_count_next16\
    \ = 1\n\tlocal vowels_index_count_next17 = 1\n\tlocal vowels_index_count_next18\
    \ = 1\n\tlocal vowels_index_count_next19 = 1\n\tlocal vowels_index_count_next20\
    \ = 1\n\tlocal vowels_index_count_next21 = 1\n\tlocal vowels_index_count_next22\
    \ = 1\n\tlocal vowels_index_count_next23 = 1\n\tlocal vowels_index_count_next24\
    \ = 1\n\tlocal vowels_index_count_next25 = 1\n\tlocal vowels_index_count_next26\
    \ = 1\n\tlocal vowels_index_count_next27 = 1\n\tlocal vowels_index_count_next28\
    \ = 1\n\tlocal vowels_index_count_next29 = 1\n\tlocal vowels_index_count_next30\
    \ = 1\n\tlocal vowels_index_count_next31 = 1\n\tlocal vowels_index_count_next32\
    \ = 1\n\tlocal vowels_index_count_next33 = 1\n\tlocal vowels_index_count_next34\
    \ = 1\n\tlocal vowels_index_count_next35 = 1\n\tlocal vowels_index_count_next36\
    \ = 1\n\tlocal vowels_index_count_next37 = 1\n\tlocal vowels_index_count_next38\
    \ = 1\n\tlocal vowels_index_count_next39 = 1\n\tlocal vowels_index_count_next40\
    \ = 1\n\tlocal vowels_index_count_next41 = 1\n\tlocal vowels_index_count_next42\
    \ = 1\n\tlocal vowels_index_count_next43 = 1\n\tlocal vowels_index_count_next44\
    \ = 1\n\tlocal vowels_index_count_next45 = 1\n\tlocal vowels_index_count_next46\
    \ = 1\n\t\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpoukvi_35.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = 0\n  \
    \  local vowel_start = 0\n    local vowel_end = 0\n    local vowel_found = false\n\
    \    local vowel_found2 = false\n    local vowel_found3 = false\n    local vowel_found4\
    \ = false\n    local vowel_found5 = false\n    local vowel_found6 = false\n  \
    \  local vowel_found7 = false\n    local vowel_found8 = false\n    local vowel_found9\
    \ = false\n    local vowel_found10 = false\n    local vowel_found11 = false\n\
    \    local vowel_found12 = false\n    local vowel_found13 = false\n    local vowel_found14\
    \ = false\n    local vowel_found15 = false\n    local vowel_found16 = false\n\
    \    local vowel_found17 = false\n    local vowel_found18 = false\n    local vowel_found19\
    \ = false\n    local vowel_found20 = false\n    local vowel_found21 = false\n\
    \    local vowel_found22 = false\n    local vowel_found23 = false\n    local vowel_found24\
    \ = false\n    local vowel_found25 = false\n    local vowel_found26 = false\n\
    \    local vowel_found27 = false\n    local vowel_found28 = false\n    local vowel_found29\
    \ = false\n    local vowel_found30 = false\n    local vowel_found31 = false\n\
    \    local vowel_found32 = false\n    local vowel_found33 = false\n    local vowel_found34\
    \ = false\n    local vowel_found35 = false\n    local vowel_found36 = false\n\
    \    local vowel_found37 = false\n    local vowel_found38 = false\n    local vowel_found39\
    \ = false\n    local vowel_found40 = false\n    local vowel_found41 = false\n\
    \    local vowel_found42 = false\n    local vowel_found43 = false\n    local vowel_found44\
    \ = false\n    local vowel_found45 = false\n    local vowel_found46 = false\n\
    \    local vowel_found47 = false\n    local vowel_found48 = false\n    local vowel_found49\
    \ = false\n    local vowel_found50 = false\n    local vowel_found51 = false\n\
    \    local vowel_found52 = false\n    local vowel_found53 = false\n    local vowel_found54\
    \ = false\n    local vowel_found55 = false\n    local vowel_found56 = false\n\
    \    local vowel_found57 = false\n    local vowel_found58 = false\n    local vowel_found59\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcm7lt5ef.lua:98: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    local vowels_index_count = {}\n    local vowels_index_count[1]\
    \ = 1\n    local vowels_index_count[2] = 2\n    local vowels_index_count[3] =\
    \ 3\n    local vowels_index_count[4] = 4\n    local vowels_index_count[5] = 5\n\
    \    local vowels_index_count[6] = 6\n    local vowels_index_count[7] = 7\n  \
    \  local vowels_index_count[8] = 8\n    local vowels_index_count[9] = 9\n    local\
    \ vowels_index_count[10] = 10\n    local vowels_index_count[11] = 11\n    local\
    \ vowels_index_count[12] = 12\n    local vowels_index_count[13] = 13\n    local\
    \ vowels_index_count[14] = 14\n    local vowels_index_count[15] = 15\n    local\
    \ vowels_index_count[16] = 16\n    local vowels_index_count[17] = 17\n    local\
    \ vowels_index_count[18] = 18\n    local vowels_index_count[19] = 19\n    local\
    \ vowels_index_count[20] = 20\n    local vowels_index_count[21] = 21\n    local\
    \ vowels_index_count[22] = 22\n    local vowels_index_count[23] = 23\n    local\
    \ vowels_index_count[24] = 24\n    local vowels_index_count[25] = 25\n    local\
    \ vowels_index_count[26] = 26\n    local vowels_index_count[27] = 27\n    local\
    \ vowels_index_count[28] = 28\n    local vowels_index_count[29] = 29\n    local\
    \ vowels_index_count[30] = 30\n    local vowels_index_count[31] = 31\n    local\
    \ vowels_index_count[32] = 32\n    local vowels_index_count[33] = 33\n    local\
    \ vowels_index_count[34] = 34\n    local vowels_index_count[35] = 35\n    local\
    \ vowels_index_count[36] = 36\n    local vowels_index_count[37] = 37\n    local\
    \ vowels_index_count[38] = 38\n    local vowels_index_count[39] = 39\n    local\
    \ vowels_index_count[40] = 40\n    local vowels_index_count[41] = 41\n    local\
    \ vowels_index_count[42] = 42\n    local vowels_index_count[43] = 43\n    local\
    \ vowels_index_count[44] = 44\n    local vowels_index_count\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc4pjd024.lua:20: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbixqxi85.lua:86: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmsk91bs9.lua:109: ''end'' expected (to close ''for'' at line
    89) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n\tlocal vowels_count = #vowels\n\
    \tlocal vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_min\
    \ = 0\n\tlocal vowels_index_count_max_min_index = 0\n\tlocal vowels_index_count_max_min_count\
    \ = 0\n\tlocal vowels_index_count_max_min_count_max = #vowels\n\tlocal vowels_index_count_max_min_count_min\
    \ = 0\n\tlocal vowels_index_count_max_min_count_min_index = 0\n\tlocal vowels_index_count_max_min_count_min_count\
    \ = 0\n\tlocal vowels_index_count_max_min_count_min_count_max = #vowels\n\tlocal\
    \ vowels_index_count_max_min_count_min_count_min = 0\n\tlocal vowels_index_count_max_min_count_min_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_min_count_min_count_min_count = 0\n\tlocal\
    \ vowels_index_count_max_min_count_min_count_min_count_max = #vowels\n\tlocal\
    \ vowels_index_count_max_min_count_min_count_min_count_min = 0\n\tlocal vowels_index_count_max_min_count_min_count_min_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_min_count_min_count_min_count_min_count\
    \ = 0\n\tlocal vowels_index_count_max_min_count_min_count_min_count_min_count_max\
    \ = #vowels\n\tlocal vowels_index_count_max_min_count_min_count_min_count_min_count_min\
    \ = 0\n\tlocal vowels_index_count_max_min_count_min_count_min_count_min_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_min_count_min_count_min_count_min_count_min_count\
    \ = 0\n\tlocal vowels_index_count_max_min_count_min_count_min_count_min_count_min_count_max\
    \ = #vowels\n\tlocal vowels_index_count_max_min_count_min_count_min_count_min_count_min_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_min_count_min_count_min_count_min_count_min_count_min_count_max\
    \ = #vowels\n\tlocal vowels_index_count_max_min_count_min_count_min_count_min_count_min_count_min_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_min_count_min_count_min_count_min_count_min_count_min_count_min_count_max\
    \ = #vowels\n\tlocal vowels_index_count_max_min_count_min_count_min_count_min_count_min_count_min_count_min_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_min_count_min_count_min_count_min_count_min_count_min_count_min_count_min_count_max\
    \ = #vowels\n\tlocal vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1ll6m_x5.lua:68: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u'}\n\tlocal vowels_count = #vowels\n\tlocal\
    \ vowels_index = 1\n\tlocal vowels_index_count = 1\n\tlocal vowels_index_count_2\
    \ = 1\n\tlocal vowels_index_count_3 = 1\n\tlocal vowels_index_count_4 = 1\n\t\
    local vowels_index_count_5 = 1\n\tlocal vowels_index_count_6 = 1\n\tlocal vowels_index_count_7\
    \ = 1\n\tlocal vowels_index_count_8 = 1\n\tlocal vowels_index_count_9 = 1\n\t\
    local vowels_index_count_10 = 1\n\tlocal vowels_index_count_11 = 1\n\tlocal vowels_index_count_12\
    \ = 1\n\tlocal vowels_index_count_13 = 1\n\tlocal vowels_index_count_14 = 1\n\t\
    local vowels_index_count_15 = 1\n\tlocal vowels_index_count_16 = 1\n\tlocal vowels_index_count_17\
    \ = 1\n\tlocal vowels_index_count_18 = 1\n\tlocal vowels_index_count_19 = 1\n\t\
    local vowels_index_count_20 = 1\n\tlocal vowels_index_count_21 = 1\n\tlocal vowels_index_count_22\
    \ = 1\n\tlocal vowels_index_count_23 = 1\n\tlocal vowels_index_count_24 = 1\n\t\
    local vowels_index_count_25 = 1\n\tlocal vowels_index_count_26 = 1\n\tlocal vowels_index_count_27\
    \ = 1\n\tlocal vowels_index_count_28 = 1\n\tlocal vowels_index_count_29 = 1\n\t\
    local vowels_index_count_30 = 1\n\tlocal vowels_index_count_31 = 1\n\tlocal vowels_index_count_32\
    \ = 1\n\tlocal vowels_index_count_33 = 1\n\tlocal vowels_index_count_34 = 1\n\t\
    local vowels_index_count_35 = 1\n\tlocal vowels_index_count_36 = 1\n\tlocal vowels_index_count_37\
    \ = 1\n\tlocal vowels_index_count_38 = 1\n\tlocal vowels_index_count_39 = 1\n\t\
    local vowels_index_count_40 = 1\n\tlocal vowels_index_count_41 = 1\n\tlocal vowels_index_count_42\
    \ = 1\n\tlocal vowels_index_count_43 = 1\n\tlocal vowels_index_count_44 = 1\n\t\
    local vowels_index_count_45 = 1\n\tlocal vowels_index_count_46 = 1\n\tlocal vowels_index_count_47\
    \ = 1\n\tlocal vowels_index_count_48 = 1\n\tlocal vowels_index_count_49 = 1\n\t\
    local vowels_index_count_50 = 1\n\tlocal vowels_index_count_51 = 1\n\tlocal vowels_index_count_52\
    \ = 1\n\tlocal vowels_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7843l5vz.lua:91: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n  local\
    \ vowels_count = #vowels\n  local vowels_index = #word\n  local vowels_index2\
    \ = #word\n  local vowels_index3 = #word\n  local vowels_index4 = #word\n  local\
    \ vowels_index5 = #word\n  local vowels_index6 = #word\n  local vowels_index7\
    \ = #word\n  local vowels_index8 = #word\n  local vowels_index9 = #word\n  local\
    \ vowels_index10 = #word\n  local vowels_index11 = #word\n  local vowels_index12\
    \ = #word\n  local vowels_index13 = #word\n  local vowels_index14 = #word\n  local\
    \ vowels_index15 = #word\n  local vowels_index16 = #word\n  local vowels_index17\
    \ = #word\n  local vowels_index18 = #word\n  local vowels_index19 = #word\n  local\
    \ vowels_index20 = #word\n  local vowels_index21 = #word\n  local vowels_index22\
    \ = #word\n  local vowels_index23 = #word\n  local vowels_index24 = #word\n  local\
    \ vowels_index25 = #word\n  local vowels_index26 = #word\n  local vowels_index27\
    \ = #word\n  local vowels_index28 = #word\n  local vowels_index29 = #word\n  local\
    \ vowels_index30 = #word\n  local vowels_index31 = #word\n  local vowels_index32\
    \ = #word\n  local vowels_index33 = #word\n  local vowels_index34 = #word\n  local\
    \ vowels_index35 = #word\n  local vowels_index36 = #word\n  local vowels_index37\
    \ = #word\n  local vowels_index38 = #word\n  local vowels_index39 = #word\n  local\
    \ vowels_index40 = #word\n  local vowels_index41 = #word\n  local vowels_index42\
    \ = #word\n  local vowels_index43 = #word\n  local vowels_index44 = #word\n  local\
    \ vowels_index45 = #word\n  local vowels_index46 = #word\n  local vowels_index47\
    \ = #word\n  local vowels_index48 = #word\n  local vowels_index49 = #word\n  local\
    \ vowels_index50\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptzqjzj_5.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_min\
    \ = 0\n\tlocal vowels_index_count_max_min_index = 0\n\tlocal vowels_index_count_max_min_index2\
    \ = 0\n\tlocal vowels_index_count_max_min_index3 = 0\n\tlocal vowels_index_count_max_min_index4\
    \ = 0\n\tlocal vowels_index_count_max_min_index5 = 0\n\tlocal vowels_index_count_max_min_index6\
    \ = 0\n\tlocal vowels_index_count_max_min_index7 = 0\n\tlocal vowels_index_count_max_min_index8\
    \ = 0\n\tlocal vowels_index_count_max_min_index9 = 0\n\tlocal vowels_index_count_max_min_index10\
    \ = 0\n\tlocal vowels_index_count_max_min_index11 = 0\n\tlocal vowels_index_count_max_min_index12\
    \ = 0\n\tlocal vowels_index_count_max_min_index13 = 0\n\tlocal vowels_index_count_max_min_index14\
    \ = 0\n\tlocal vowels_index_count_max_min_index15 = 0\n\tlocal vowels_index_count_max_min_index16\
    \ = 0\n\tlocal vowels_index_count_max_min_index17 = 0\n\tlocal vowels_index_count_max_min_index18\
    \ = 0\n\tlocal vowels_index_count_max_min_index19 = 0\n\tlocal vowels_index_count_max_min_index20\
    \ = 0\n\tlocal vowels_index_count_max_min_index21 = 0\n\tlocal vowels_index_count_max_min_index22\
    \ = 0\n\tlocal vowels_index_count_max_min_index23 = 0\n\tlocal vowels_index_count_max_min_index24\
    \ = 0\n\tlocal vowels_index_count_max_min_index25 = 0\n\tlocal vowels_index_count_max_min_index26\
    \ = 0\n\tlocal vowels_index_count_max_min_index27 = 0\n\tlocal vowels_index_count_max_min_index28\
    \ = 0\n\tlocal vowels_index_count_max_min_index29 = 0\n\tlocal vowels_index_count_max_min_index30\
    \ = 0\n\tlocal vowels_index_count_max_min_index31 = 0\n\tlocal vowels_index_count_max_min_index32\
    \ = 0\n\tlocal vowels_index_count_max_min_index33 = 0\n\tlocal vowels_index_count_max_min_index34\
    \ = 0\n\tlocal vowels_index_count_max_min_index35 = 0\n\tlocal vowels_index_count_max_min_index36\
    \ = 0\n\tlocal vowels_index_count_max_min_index37 = 0\n\tlocal vowels_index_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx5i09iki.lua:80: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = {}\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_max\
    \ = 0\n\tlocal vowels_index_min = 0\n\tlocal vowels_index_sum = 0\n\tlocal vowels_index_sum_max\
    \ = 0\n\tlocal vowels_index_sum_min = 0\n\tlocal vowels_index_sum_sum = 0\n\t\
    local vowels_index_sum_sum_max = 0\n\tlocal vowels_index_sum_sum_min = 0\n\tlocal\
    \ vowels_index_sum_sum_sum = 0\n\tlocal vowels_index_sum_sum_sum_max = 0\n\tlocal\
    \ vowels_index_sum_sum_sum_min = 0\n\tlocal vowels_index_sum_sum_sum_sum = 0\n\
    \tlocal vowels_index_sum_sum_sum_sum_max = 0\n\tlocal vowels_index_sum_sum_sum_sum_min\
    \ = 0\n\tlocal vowels_index_sum_sum_sum_sum_sum = 0\n\tlocal vowels_index_sum_sum_sum_sum_sum_max\
    \ = 0\n\tlocal vowels_index_sum_sum_sum_sum_sum_min = 0\n\tlocal vowels_index_sum_sum_sum_sum_sum_sum\
    \ = 0\n\tlocal vowels_index_sum_sum_sum_sum_sum_max = 0\n\tlocal vowels_index_sum_sum_sum_sum_sum_min\
    \ = 0\n\tlocal vowels_index_sum_sum_sum_sum_sum_sum = 0\n\tlocal vowels_index_sum_sum_sum_sum_sum_sum_max\
    \ = 0\n\tlocal vowels_index_sum_sum_sum_sum_sum_min = 0\n\tlocal vowels_index_sum_sum_sum_sum_sum_sum_sum\
    \ = 0\n\tlocal vowels_index_sum_sum_sum_sum_sum_sum_max = 0\n\tlocal vowels_index_sum_sum_sum_sum_sum_sum_min\
    \ = 0\n\tlocal vowels_index_sum_sum_sum_sum_sum_sum_sum = 0\n\tlocal vowels_index_sum_sum_sum_sum_sum_sum_max\
    \ = 0\n\tlocal vowels_index_sum_sum_sum_sum_sum_sum_min = 0\n\tlocal vowels_index_sum_sum_sum_sum_sum_sum_sum\
    \ = 0\n\tlocal vowels_index_sum_sum_sum_sum_sum_sum_max = 0\n\tlocal vowels_index_sum_sum_sum_sum_sum_sum_min\
    \ = 0\n\tlocal vowels_index_sum_sum_sum_sum_sum_sum_sum = 0\n\tlocal vowels_index_sum_sum_sum_sum_sum_sum_max\
    \ = 0\n\tlocal vowels_index_sum_sum_sum_sum_sum_sum_min = 0\n\tlocal vowels_index_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0\n\tlocal vowels_index_sum_sum_sum_sum_sum_sum_sum_max = 0\n\tlocal vowels_index_sum_sum_sum_sum_sum_sum_min\
    \ = 0\n\tlocal vowels_index_sum_sum_sum_sum_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpre_xa5xp.lua:78: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ vowels_count = #vowels\n    local vowels_index = #word\n    local vowels_index2\
    \ = #word - 1\n    local vowels_index3 = #word - 2\n    local vowels_index4 =\
    \ #word - 3\n    local vowels_index5 = #word - 4\n    local vowels_index6 = #word\
    \ - 5\n    local vowels_index7 = #word - 6\n    local vowels_index8 = #word -\
    \ 7\n    local vowels_index9 = #word - 8\n    local vowels_index10 = #word - 9\n\
    \    local vowels_index11 = #word - 10\n    local vowels_index12 = #word - 11\n\
    \    local vowels_index13 = #word - 12\n    local vowels_index14 = #word - 13\n\
    \    local vowels_index15 = #word - 14\n    local vowels_index16 = #word - 15\n\
    \    local vowels_index17 = #word - 16\n    local vowels_index18 = #word - 17\n\
    \    local vowels_index19 = #word - 18\n    local vowels_index20 = #word - 19\n\
    \    local vowels_index21 = #word - 20\n    local vowels_index22 = #word - 21\n\
    \    local vowels_index23 = #word - 22\n    local vowels_index24 = #word - 23\n\
    \    local vowels_index25 = #word - 24\n    local vowels_index26 = #word - 25\n\
    \    local vowels_index27 = #word - 26\n    local vowels_index28 = #word - 27\n\
    \    local vowels_index29 = #word - 28\n    local vowels_index30 = #word - 29\n\
    \    local vowels_index31 = #word - 30\n    local vowels_index32 = #word - 31\n\
    \    local vowels_index33 = #word - 32\n    local vowels_index34 = #word - 33\n\
    \    local vowels_index35 = #word - 34\n    local vowels_index36 = #word - 35\n\
    \    local vowels_index37 = #word - 36\n    local vowels_index38 = #word - 37\n\
    \    local vowels_index39 = #word - 38\n    local vowels_index40 = #word - 39\n\
    \    local vowels_index41 = #word - 40\n    local vowels_index42 = \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps97ltl2l.lua:60: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ vowels[i])\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index\
    \ = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\
    \tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor\
    \ i = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\t\
    end\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i\
    \ = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\tend\n\
    \tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1,\
    \ vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\tend\n\t\
    local vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count\
    \ do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\tend\n\tlocal vowels_count\
    \ = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\
    \ttable.insert(vowels_index, vowels_index[i])\n\tend\n\tlocal vowels_count = #vowels_index\n\
    \tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ vowels_index[i])\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index\
    \ = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\
    \tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor\
    \ i = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\t\
    end\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i\
    \ = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\tend\n\
    \tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1,\
    \ vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\tend\n\t\
    local vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count\
    \ do\n\t\ttable.insert(vowels_index, vowels_index\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp94qvyut6.lua:81: '')'' expected (to close ''('' at line 80)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = 1\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min\
    \ = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min = 1\n\
    \tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min = 1\n\tlocal\
    \ vowels_index_count_max = 1\n\tlocal vowels_index_count_min = 1\n\tlocal vowels_index_count_max\
    \ = 1\n\tlocal vowels_index_count_min = 1\n\tlocal vowels_index_count_max = 1\n\
    \tlocal vowels_index_count_min = 1\n\tlocal vowels_index_count_max = 1\n\tlocal\
    \ vowels_index_count_min = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min\
    \ = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min = 1\n\
    \tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min = 1\n\tlocal\
    \ vowels_index_count_max = 1\n\tlocal vowels_index_count_min = 1\n\tlocal vowels_index_count_max\
    \ = 1\n\tlocal vowels_index_count_min = 1\n\tlocal vowels_index_count_max = 1\n\
    \tlocal vowels_index_count_min = 1\n\tlocal vowels_index_count_max = 1\n\tlocal\
    \ vowels_index_count_min = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min\
    \ = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min = 1\n\
    \tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min = 1\n\tlocal\
    \ vowels_index_count_max = 1\n\tlocal vowels_index_count_min = 1\n\tlocal vowels_index_count_max\
    \ = 1\n\tlocal vowels_index_count_min = 1\n\tlocal vowels_index_count_max = 1\n\
    \tlocal vowels_index_count_min = 1\n\tlocal vowels_index_count_max = 1\n\tlocal\
    \ vowels_index_count_min = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min\
    \ = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min = 1\n\
    \tlocal vowels_index_count_max = 1\n\tlocal vowels_index_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6vx5k631.lua:92: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2d41twfl.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = 0\n  \
    \  local vowels_index = 0\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = 0\n    local vowels_index_count_max_minus_1\
    \ = #vowels-1\n    local vowels_index_count_max_minus_2 = #vowels-2\n    local\
    \ vowels_index_count_max_minus_3 = #vowels-3\n    local vowels_index_count_max_minus_4\
    \ = #vowels-4\n    local vowels_index_count_max_minus_5 = #vowels-5\n    local\
    \ vowels_index_count_max_minus_6 = #vowels-6\n    local vowels_index_count_max_minus_7\
    \ = #vowels-7\n    local vowels_index_count_max_minus_8 = #vowels-8\n    local\
    \ vowels_index_count_max_minus_9 = #vowels-9\n    local vowels_index_count_max_minus_10\
    \ = #vowels-10\n    local vowels_index_count_max_minus_11 = #vowels-11\n    local\
    \ vowels_index_count_max_minus_12 = #vowels-12\n    local vowels_index_count_max_minus_13\
    \ = #vowels-13\n    local vowels_index_count_max_minus_14 = #vowels-14\n    local\
    \ vowels_index_count_max_minus_15 = #vowels-15\n    local vowels_index_count_max_minus_16\
    \ = #vowels-16\n    local vowels_index_count_max_minus_17 = #vowels-17\n    local\
    \ vowels_index_count_max_minus_18 = #vowels-18\n    local vowels_index_count_max_minus_19\
    \ = #vowels-19\n    local vowels_index_count_max_minus_20 = #vowels-20\n    local\
    \ vowels_index_count_max_minus_21 = #vowels-21\n    local vowels_index_count_max_minus_22\
    \ = #vowels-22\n    local vowels_index_count_max_minus_23 = #vowels-23\n    local\
    \ vowels_index_count_max_minus_24 = #vowels-24\n    local vowels_index_count_max_minus_25\
    \ = #vowels-25\n    local vowels_index_count_max_minus_26 = #vowels-26\n    local\
    \ vowels_index_count_max_minus_27 = #vowels-27\n    local vowels_index_count_max_minus_28\
    \ = #vowels-28\n    local vowels_index_count_max_minus_29 = #vowels-29\n    local\
    \ vowels_index_count_max_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp27v39tvg.lua:71: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = 1\n    local vowels_index_count_max_minus_1\
    \ = #word - 1\n    local vowels_index_count_max_minus_2 = #word - 2\n    local\
    \ vowels_index_count_max_minus_3 = #word - 3\n    local vowels_index_count_max_minus_4\
    \ = #word - 4\n    local vowels_index_count_max_minus_5 = #word - 5\n    local\
    \ vowels_index_count_max_minus_6 = #word - 6\n    local vowels_index_count_max_minus_7\
    \ = #word - 7\n    local vowels_index_count_max_minus_8 = #word - 8\n    local\
    \ vowels_index_count_max_minus_9 = #word - 9\n    local vowels_index_count_max_minus_10\
    \ = #word - 10\n    local vowels_index_count_max_minus_11 = #word - 11\n    local\
    \ vowels_index_count_max_minus_12 = #word - 12\n    local vowels_index_count_max_minus_13\
    \ = #word - 13\n    local vowels_index_count_max_minus_14 = #word - 14\n    local\
    \ vowels_index_count_max_minus_15 = #word - 15\n    local vowels_index_count_max_minus_16\
    \ = #word - 16\n    local vowels_index_count_max_minus_17 = #word - 17\n    local\
    \ vowels_index_count_max_minus_18 = #word - 18\n    local vowels_index_count_max_minus_19\
    \ = #word - 19\n    local vowels_index_count_max_minus_20 = #word - 20\n    local\
    \ vowels_index_count_max_minus_21 = #word - 21\n    local vowels_index_count_max_minus_22\
    \ = #word - 22\n    local vowels_index_count_max_minus_23 = #word - 23\n    local\
    \ vowels_index_count_max_minus_24 = #word - 24\n    local vowels_index_count_max_minus_25\
    \ = #word - 25\n    local vowels_index_count_max_minus_26 = #word - 26\n    local\
    \ vowels_index_count_max_minus_27 = #word - 27\n    local vowels_index_count_max_minus_28\
    \ = #word - 28\n    local vowels_index_count_max_minus_29 = #word - 29\n    local\
    \ vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4hkstz2t.lua:71: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjcx7ir5_.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    local vowels_index_count = 0\n    for i = 1,\
    \ #word do\n        if word:sub(i, i) == vowels[vowels_index] then\n         \
    \   vowels_index_count = vowels_index_count + 1\n        end\n    end\n    if\
    \ vowels_index_count > 1 then\n        local vowels_index_min = math.min(vowels_index_count,\
    \ vowels_count)\n        local vowels_index_max = math.max(vowels_index_count,\
    \ vowels_count)\n        for i = 1, vowels_index_min do\n            local vowels_index_value\
    \ = vowels_index[i]\n            if vowels[vowels_index_value] == word:sub((i\
    \ - 1), i) then\n                return word:sub((i - 1), i)\n            end\n\
    \        end\n        for i = 1, vowels_index_max do\n            local vowels_index_value\
    \ = vowels_index[i]\n            if vowels[vowels_index_value] == word:sub((i\
    \ - 1), i) then\n                return word:sub((i - 1), i)\n            end\n\
    \        end\n    end\n    return ''\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1swnalg8.lua:47:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp1swnalg8.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_max\
    \ = 0\n  local vowels_index_min = 0\n  local vowels_index_min_index = 0\n  local\
    \ vowels_index_max_index = 0\n  local vowels_index_min_count = 1\n  local vowels_index_max_count\
    \ = 1\n  local vowels_index_min_count_index = 1\n  local vowels_index_max_count_index\
    \ = 1\n  local vowels_index_min_count_index = 1\n  local vowels_index_max_count_index\
    \ = 1\n  local vowels_index_min_count_index = 1\n  local vowels_index_max_count_index\
    \ = 1\n  local vowels_index_min_count_index = 1\n  local vowels_index_max_count_index\
    \ = 1\n  local vowels_index_min_count_index = 1\n  local vowels_index_max_count_index\
    \ = 1\n  local vowels_index_min_count_index = 1\n  local vowels_index_max_count_index\
    \ = 1\n  local vowels_index_min_count_index = 1\n  local vowels_index_max_count_index\
    \ = 1\n  local vowels_index_min_count_index = 1\n  local vowels_index_max_count_index\
    \ = 1\n  local vowels_index_min_count_index = 1\n  local vowels_index_max_count_index\
    \ = 1\n  local vowels_index_min_count_index = 1\n  local vowels_index_max_count_index\
    \ = 1\n  local vowels_index_min_count_index = 1\n  local vowels_index_max_count_index\
    \ = 1\n  local vowels_index_min_count_index = 1\n  local vowels_index_max_count_index\
    \ = 1\n  local vowels_index_min_count_index = 1\n  local vowels_index_max_count_index\
    \ = 1\n  local vowels_index_min_count_index = 1\n  local vowels_index_max_count_index\
    \ = 1\n  local vowels_index_min_count_index = 1\n  local vowels_index_max_count_index\
    \ = 1\n  local vowels_index_min_count_index = 1\n  local vowels_index_max_count_index\
    \ = 1\n  local vowels_index_min_count_index = 1\n  local vowels_index_max_count_index\
    \ = 1\n  local vowels_index_min_count_index = 1\n  local vowels_index_max_count_index\
    \ = 1\n  local vowels_index_min_count_index = 1\n  local vowels_index_max_count_index\
    \ = 1\n  local vowels_index_min_count_index = 1\n  local vowels_index_max_count_index\
    \ = 1\n  local vowels_index_min_count_index = 1\n  local vowels_index_max_count_index\
    \ = 1\n  local vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpys42rm3u.lua:88: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcegj_fjp.lua:108: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = {}\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_max\
    \ = 0\n\tlocal vowels_index_min = 0\n\tlocal vowels_index_current = 0\n\tlocal\
    \ vowels_index_current_max = 0\n\tlocal vowels_index_current_min = 0\n\tlocal\
    \ vowels_index_current_index = 0\n\tlocal vowels_index_current_count = 0\n\tlocal\
    \ vowels_index_current_max = 0\n\tlocal vowels_index_current_min = 0\n\tlocal\
    \ vowels_index_current_index = 0\n\tlocal vowels_index_current_count = 0\n\tlocal\
    \ vowels_index_current_max = 0\n\tlocal vowels_index_current_min = 0\n\tlocal\
    \ vowels_index_current_index = 0\n\tlocal vowels_index_current_count = 0\n\tlocal\
    \ vowels_index_current_max = 0\n\tlocal vowels_index_current_min = 0\n\tlocal\
    \ vowels_index_current_index = 0\n\tlocal vowels_index_current_count = 0\n\tlocal\
    \ vowels_index_current_max = 0\n\tlocal vowels_index_current_min = 0\n\tlocal\
    \ vowels_index_current_index = 0\n\tlocal vowels_index_current_count = 0\n\tlocal\
    \ vowels_index_current_max = 0\n\tlocal vowels_index_current_min = 0\n\tlocal\
    \ vowels_index_current_index = 0\n\tlocal vowels_index_current_count = 0\n\tlocal\
    \ vowels_index_current_max = 0\n\tlocal vowels_index_current_min = 0\n\tlocal\
    \ vowels_index_current_index = 0\n\tlocal vowels_index_current_count = 0\n\tlocal\
    \ vowels_index_current_max = 0\n\tlocal vowels_index_current_min = 0\n\tlocal\
    \ vowels_index_current_index = 0\n\tlocal vowels_index_current_count = 0\n\tlocal\
    \ vowels_index_current_max = 0\n\tlocal vowels_index_current_min = 0\n\tlocal\
    \ vowels_index_current_index = 0\n\tlocal vowels_index_current_count = 0\n\tlocal\
    \ vowels_index_current_max = 0\n\tlocal vowels_index_current_min = 0\n\tlocal\
    \ vowels_index_current_index = 0\n\tlocal vowels_index_current_count = 0\n\tlocal\
    \ vowels_index_current_max = 0\n\tlocal vowels_index_current_min = 0\n\tlocal\
    \ vowels_index_current_index = 0\n\tlocal vowels_index_current_count = 0\n\tlocal\
    \ vowels_index_current_max = 0\n\tlocal vowels_index_current_min = 0\n\tlocal\
    \ vowels_index_current_index = 0\n\tlocal vowels_index_current_count = 0\n\tlocal\
    \ vowels_index_current_max = 0\n\tlocal vowels_index_current_min = 0\n\tlocal\
    \ vowels_index_current_index = 0\n\tlocal vowels_index_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfkobrhtz.lua:94: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u'}\n\tlocal vowels_count = #vowels\n\tlocal\
    \ vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp59gz20tk.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = 0\n\tlocal\
    \ vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_min\
    \ = math.min(#vowels, #word)\n\tlocal vowels_index_count_max = math.max(#vowels,\
    \ #word)\n\tlocal vowels_index_count_min = math.min(#vowels, #word)\n\tlocal vowels_index_count_max\
    \ = math.max(#vowels, #word)\n\tlocal vowels_index_count_min = math.min(#vowels,\
    \ #word)\n\tlocal vowels_index_count_max = math.max(#vowels, #word)\n\tlocal vowels_index_count_min\
    \ = math.min(#vowels, #word)\n\tlocal vowels_index_count_max = math.max(#vowels,\
    \ #word)\n\tlocal vowels_index_count_min = math.min(#vowels, #word)\n\tlocal vowels_index_count_max\
    \ = math.max(#vowels, #word)\n\tlocal vowels_index_count_min = math.min(#vowels,\
    \ #word)\n\tlocal vowels_index_count_max = math.max(#vowels, #word)\n\tlocal vowels_index_count_min\
    \ = math.min(#vowels, #word)\n\tlocal vowels_index_count_max = math.max(#vowels,\
    \ #word)\n\tlocal vowels_index_count_min = math.min(#vowels, #word)\n\tlocal vowels_index_count_max\
    \ = math.max(#vowels, #word)\n\tlocal vowels_index_count_min = math.min(#vowels,\
    \ #word)\n\tlocal vowels_index_count_max = math.max(#vowels, #word)\n\tlocal vowels_index_count_min\
    \ = math.min(#vowels, #word)\n\tlocal vowels_index_count_max = math.max(#vowels,\
    \ #word)\n\tlocal vowels_index_count_min = math.min(#vowels, #word)\n\tlocal vowels_index_count_max\
    \ = math.max(#vowels, #word)\n\tlocal vowels_index_count_min = math.min(#vowels,\
    \ #word)\n\tlocal vowels_index_count_max = math.max(#vowels, #word)\n\tlocal vowels_index_count_min\
    \ = math.min(#vowels, #word)\n\tlocal vowels_index_count_max = math.max(#vowels,\
    \ #word)\n\tlocal vowels_index_count_min = math.min(#vowels, #word)\n\tlocal vowels_index_count_max\
    \ = math.max(#vowels, #word)\n\tlocal vowels_index_count_min = math.min(#vowels,\
    \ #word)\n\tlocal vowels_index_count_max = math.max(#vowels, #word)\n\tlocal vowels_index_count_min\
    \ = math.min(#vowels, #word)\n\tlocal vowels_index_count_max = math.max(#vowels,\
    \ #word)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp37w3jn7p.lua:71: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_count = {}\n  \
    \  for i = 1, #word do\n        local letter = word[i]\n        if vowels[letter]\
    \ then\n            table.insert(vowel_count, letter)\n        end\n    end\n\
    \    local vowel_count_sorted = table.sort(vowel_count)\n    local vowel_count_index\
    \ = #vowel_count_sorted\n    local vowel_count_index = vowel_count_index - 1\n\
    \    local vowel_count_index = vowel_count_index - 1\n    local vowel_count_index\
    \ = vowel_count_index - 1\n    local vowel_count_index = vowel_count_index - 1\n\
    \    local vowel_count_index = vowel_count_index - 1\n    local vowel_count_index\
    \ = vowel_count_index - 1\n    local vowel_count_index = vowel_count_index - 1\n\
    \    local vowel_count_index = vowel_count_index - 1\n    local vowel_count_index\
    \ = vowel_count_index - 1\n    local vowel_count_index = vowel_count_index - 1\n\
    \    local vowel_count_index = vowel_count_index - 1\n    local vowel_count_index\
    \ = vowel_count_index - 1\n    local vowel_count_index = vowel_count_index - 1\n\
    \    local vowel_count_index = vowel_count_index - 1\n    local vowel_count_index\
    \ = vowel_count_index - 1\n    local vowel_count_index = vowel_count_index - 1\n\
    \    local vowel_count_index = vowel_count_index - 1\n    local vowel_count_index\
    \ = vowel_count_index - 1\n    local vowel_count_index = vowel_count_index - 1\n\
    \    local vowel_count_index = vowel_count_index - 1\n    local vowel_count_index\
    \ = vowel_count_index - 1\n    local vowel_count_index = vowel_count_index - 1\n\
    \    local vowel_count_index = vowel_count_index - 1\n    local vowel_count_index\
    \ = vowel_count_index - 1\n    local vowel_count_index = vowel_count_index - 1\n\
    \    local vowel_count_index = vowel_count_index - 1\n    local vowel_count_index\
    \ = vowel_count_index - 1\n    local vowel_count_index = vowel_count_index - 1\n\
    \    local vowel_count_index = vowel_count_index - 1\n    local vowel_count_index\
    \ = vowel_count_index - 1\n    local vowel_count_index = vowel_count_index - 1\n\
    \    local vowel_count_index = vowel_count_index - 1\n    local vowel_count_index\
    \ = vowel_count_index - 1\n    local vowel_count_index = vowel_count_index - 1\n\
    \    local vowel_count_index = vowel_count_index - 1\n    local vowel_count_index\
    \ = vowel_count_index - 1\n    local \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppsydw7dp.lua:82: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n  local\
    \ vowels_count = #vowels\n  local vowels_index = {}\n  local vowels_index_count\
    \ = {}\n  for i = 1, #word do\n    local vowel = word:sub(i,i)\n    vowels_index[vowel]\
    \ = true\n    vowels_index_count[vowel] = vowels_count\n  end\n  local vowels_index_sorted\
    \ = {}\n  for i = 1, #vowels_index do\n    table.insert(vowels_index_sorted, i)\n\
    \  end\n  table.sort(vowels_index_sorted)\n  local vowels_index_sorted_count =\
    \ #vowels_index_sorted\n  local vowels_index_sorted_index = {}\n  for i = 1, vowels_index_sorted_count\
    \ do\n    table.insert(vowels_index_sorted_index, i)\n  end\n  local vowels_index_sorted_index_count\
    \ = #vowels_index_sorted_index\n  local vowels_index_sorted_index_index = {}\n\
    \  for i = 1, vowels_index_sorted_index_count do\n    table.insert(vowels_index_sorted_index_index,\
    \ i)\n  end\n  local vowels_index_sorted_index_index_count = #vowels_index_sorted_index_index\n\
    \  local vowels_index_sorted_index_index_index = {}\n  for i = 1, vowels_index_sorted_index_index_count\
    \ do\n    table.insert(vowels_index_sorted_index_index_index, i)\n  end\n  local\
    \ vowels_index_sorted_index_index_index_count = #vowels_index_sorted_index_index_index\n\
    \  local vowels_index_sorted_index_index_index_index = {}\n  for i = 1, vowels_index_sorted_index_index_index_count\
    \ do\n    table.insert(vowels_index_sorted_index_index_index_index, i)\n  end\n\
    \  local vowels_index_sorted_index_index_index_index_count = #vowels_index_sorted_index_index_index_index\n\
    \  local vowels_index_sorted_index_index_index_index_index = {}\n  for i = 1,\
    \ vowels_index_sorted_index_index_index_index_count do\n    table.insert(vowels_index_sorted_index_index_index_index_index,\
    \ i)\n  end\n  local vowels_index_sorted_index_index_index_index_index_count =\
    \ #vowels_index_sorted_index_index_index_index_index\n  local vowels_index_sorted_index_index_index_index_index_index\
    \ = {}\n  for i = 1, vowels_index_sorted_index_index_index_index_index_count do\n\
    \    table.insert(vowels_index_sorted_index_index_index_index_index_index, i)\n\
    \  end\n  local vowels_index_sorted_index_index_index_index_index_index_count\
    \ = #vowels_index_sorted_index_index_index_index_index_index\n  local vowels_index_sorted_index_index_index_index_index_index_index\
    \ = {}\n  for i = 1, vowels_index_sorted_index_index_index_index_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp44nxoxmv.lua:63: ''do'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_min = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_max_min = #vowels\n\tlocal vowels_index_count_max_min_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count = 0\n\tlocal vowels_index_count_max_min_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max_min_index_count_max = #vowels\n\t\
    local vowels_index_count_max_min_index_count_max_min = #vowels\n\tlocal vowels_index_count_max_min_index_count_max_min_index\
    \ = #vowels\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count_max\
    \ = #vowels\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count_max_min_index\
    \ = #vowels\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count_max_min_index_count\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count_max_min_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max\
    \ = #vowels\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max_min_index\
    \ = #vowels\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max_min_index_count\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max_min_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max\
    \ = #vowels\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max_min_index\
    \ = #vowels\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max\
    \ = #vowels\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max\
    \ = #vowels\n\tlocal vowels_index_count_max_min_index_count_max_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphe3z7h4h.lua:63: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u'}\n  local vowels_count = #vowels\n  local\
    \ vowels_index = 1\n  local vowels_index_count = 1\n  local vowels_index_count_2\
    \ = 1\n  local vowels_index_count_3 = 1\n  local vowels_index_count_4 = 1\n  local\
    \ vowels_index_count_5 = 1\n  local vowels_index_count_6 = 1\n  local vowels_index_count_7\
    \ = 1\n  local vowels_index_count_8 = 1\n  local vowels_index_count_9 = 1\n  local\
    \ vowels_index_count_10 = 1\n  local vowels_index_count_11 = 1\n  local vowels_index_count_12\
    \ = 1\n  local vowels_index_count_13 = 1\n  local vowels_index_count_14 = 1\n\
    \  local vowels_index_count_15 = 1\n  local vowels_index_count_16 = 1\n  local\
    \ vowels_index_count_17 = 1\n  local vowels_index_count_18 = 1\n  local vowels_index_count_19\
    \ = 1\n  local vowels_index_count_20 = 1\n  local vowels_index_count_21 = 1\n\
    \  local vowels_index_count_22 = 1\n  local vowels_index_count_23 = 1\n  local\
    \ vowels_index_count_24 = 1\n  local vowels_index_count_25 = 1\n  local vowels_index_count_26\
    \ = 1\n  local vowels_index_count_27 = 1\n  local vowels_index_count_28 = 1\n\
    \  local vowels_index_count_29 = 1\n  local vowels_index_count_30 = 1\n  local\
    \ vowels_index_count_31 = 1\n  local vowels_index_count_32 = 1\n  local vowels_index_count_33\
    \ = 1\n  local vowels_index_count_34 = 1\n  local vowels_index_count_35 = 1\n\
    \  local vowels_index_count_36 = 1\n  local vowels_index_count_37 = 1\n  local\
    \ vowels_index_count_38 = 1\n  local vowels_index_count_39 = 1\n  local vowels_index_count_40\
    \ = 1\n  local vowels_index_count_41 = 1\n  local vowels_index_count_42 = 1\n\
    \  local vowels_index_count_43 = 1\n  local vowels_index_count_44 = 1\n  local\
    \ vowels_index_count_45 = 1\n  local vowels_index_count_46 = 1\n  local vowels_index_count_47\
    \ = 1\n  local vowels_index_count_48 = 1\n  local vowels_index_count_49 = 1\n\
    \  local vowels_index_count_50 = 1\n  local vowels_index_count_51 = 1\n  local\
    \ vowels_index_count_52 = 1\n  local vowels_index_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjhd46ux3.lua:91: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\tlocal vowels_count\
    \ = 0\n\tlocal vowels_index = {}\n\tfor i = 1, #word do\n\t\tif word:sub(i, i)\
    \ == vowels[vowels_count] then\n\t\t\ttable.insert(vowels_index, i)\n\t\t\tvowels_count\
    \ = vowels_count + 1\n\t\tend\n\tend\n\tlocal vowels_count = #vowels_index\n\t\
    if vowels_count > 1 then\n\t\tlocal vowels_index = vowels_index[1]\n\t\tlocal\
    \ vowels_count = #vowels_index\n\t\tlocal vowels_index = vowels_index[vowels_count]\n\
    \t\tlocal vowels_count = #vowels_index\n\t\tlocal vowels_index = vowels_index[vowels_count]\n\
    \t\tlocal vowels_count = #vowels_index\n\t\tlocal vowels_index = vowels_index[vowels_count]\n\
    \t\tlocal vowels_count = #vowels_index\n\t\tlocal vowels_index = vowels_index[vowels_count]\n\
    \t\tlocal vowels_count = #vowels_index\n\t\tlocal vowels_index = vowels_index[vowels_count]\n\
    \t\tlocal vowels_count = #vowels_index\n\t\tlocal vowels_index = vowels_index[vowels_count]\n\
    \t\tlocal vowels_count = #vowels_index\n\t\tlocal vowels_index = vowels_index[vowels_count]\n\
    \t\tlocal vowels_count = #vowels_index\n\t\tlocal vowels_index = vowels_index[vowels_count]\n\
    \t\tlocal vowels_count = #vowels_index\n\t\tlocal vowels_index = vowels_index[vowels_count]\n\
    \t\tlocal vowels_count = #vowels_index\n\t\tlocal vowels_index = vowels_index[vowels_count]\n\
    \t\tlocal vowels_count = #vowels_index\n\t\tlocal vowels_index = vowels_index[vowels_count]\n\
    \t\tlocal vowels_count = #vowels_index\n\t\tlocal vowels_index = vowels_index[vowels_count]\n\
    \t\tlocal vowels_count = #vowels_index\n\t\tlocal vowels_index = vowels_index[vowels_count]\n\
    \t\tlocal vowels_count = #vowels_index\n\t\tlocal vowels_index = vowels_index[vowels_count]\n\
    \t\tlocal vowels_count = #vowels_index\n\t\tlocal vowels_index = vowels_index[vowels_count]\n\
    \t\tlocal vowels_count = #vowels_index\n\t\tlocal vowels_index = vowels_index[vowels_count]\n\
    \t\tlocal vowels_count = #vowels_index\n\t\tlocal vowels_index = vowels_index[vowels_count]\n\
    \t\tlocal vowels_count = #vowels_index\n\t\tlocal vowels_index = vowel\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1_hu62ch.lua:83: ''end'' expected (to close ''if'' at line
    26) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = 1\n\tlocal vowels_index_count_max_index\
    \ = #word\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_max_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg22vo8e8.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpenx3ctwz.lua:85: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 0\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9r63gjvf.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdpow4a0o.lua:108: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ vowels[i])\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index\
    \ = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\
    \tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor\
    \ i = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\t\
    end\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i\
    \ = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\tend\n\
    \tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1,\
    \ vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\tend\n\t\
    local vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count\
    \ do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\tend\n\tlocal vowels_count\
    \ = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\
    \ttable.insert(vowels_index, vowels_index[i])\n\tend\n\tlocal vowels_count = #vowels_index\n\
    \tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ vowels_index[i])\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index\
    \ = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\
    \tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor\
    \ i = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\t\
    end\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i\
    \ = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\tend\n\
    \tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1,\
    \ vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\tend\n\t\
    local vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfwcvl_1b.lua:80: ''do'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl4nlqfc7.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmsk91bs9.lua:109: ''end'' expected (to close ''for'' at line
    89) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ vowels_count = #vowels\n    local vowels_index = 1\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_max_minus_one = #word\n    local vowels_index_count_max_minus_two\
    \ = #word\n    local vowels_index_count_max_minus_three = #word\n    local vowels_index_count_max_minus_four\
    \ = #word\n    local vowels_index_count_max_minus_five = #word\n    local vowels_index_count_max_minus_six\
    \ = #word\n    local vowels_index_count_max_minus_seven = #word\n    local vowels_index_count_max_minus_eight\
    \ = #word\n    local vowels_index_count_max_minus_nine = #word\n    local vowels_index_count_max_minus_ten\
    \ = #word\n    local vowels_index_count_max_minus_eleven = #word\n    local vowels_index_count_max_minus_twelve\
    \ = #word\n    local vowels_index_count_max_minus_thirteen = #word\n    local\
    \ vowels_index_count_max_minus_fourteen = #word\n    local vowels_index_count_max_minus_fifteen\
    \ = #word\n    local vowels_index_count_max_minus_sixteen = #word\n    local vowels_index_count_max_minus_seventeen\
    \ = #word\n    local vowels_index_count_max_minus_eighteen = #word\n    local\
    \ vowels_index_count_max_minus_nineteen = #word\n    local vowels_index_count_max_minus_twenty\
    \ = #word\n    local vowels_index_count_max_minus_twenty_one = #word\n    local\
    \ vowels_index_count_max_minus_twenty_two = #word\n    local vowels_index_count_max_minus_twenty_three\
    \ = #word\n    local vowels_index_count_max_minus_twenty_four = #word\n    local\
    \ vowels_index_count_max_minus_twenty_five = #word\n    local vowels_index_count_max_minus_twenty_six\
    \ = #word\n    local vowels_index_count_max_minus_twenty_seven = #word\n    local\
    \ vowels_index_count_max_minus_twenty_eight = #word\n    local vowels_index_count_max_minus_twenty_n\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppjvwl8yw.lua:70: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = 1\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjsyvyj2b.lua:86: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = #word\n    local vowels_index_count_min = 1\n\
    \    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = #word\n    local vowels_index_count_max_index\n    local vowels_index_count_min_index\n\
    \    local vowels_index_count_max\n    local vowels_index_count_min\n    local\
    \ vowels_index_count_max_index\n    local vowels_index_count_min_index\n    local\
    \ vowels_index_count_max_index\n    local vowels_index_count_min_index\n    local\
    \ vowels_index_count_min_index\n    local vowels_index_count_min_index\n    local\
    \ vowels_index_count_min_index\n    local vowels_index_count_min_index\n    local\
    \ vowels_index_count_min_index\n    local vowels_index_count_min_index\n    local\
    \ vowels_index_count_min_index\n    local vowels_index_count_min_index\n    local\
    \ vowels_index_count_min_index\n    local vowels_index_count_min_index\n    local\
    \ vowels_index_count_min_index\n    local vowels_index_count_min_index\n    local\
    \ vowels_index_count_min_index\n    local vowels_index_count_min_index\n    local\
    \ vowels_index_count_min_index\n    local vowels_index_count_min_index\n    local\
    \ vowels_index_count_min_index\n    local vowels_index_count_min_index\n    local\
    \ vowels_index_count_min_index\n    local vowels_index_count_min_index\n    local\
    \ vowels_index_count_min_index\n    local vowels_index_count_min_index\n    local\
    \ vowels_index_count_min_index\n    local vowels_index_count_min_index\n    local\
    \ vowels_index_count_min_index\n    local vowels_index_count_min_index\n    local\
    \ vowels_index_count_min_index\n    local vowels_index_count_min_index\n    local\
    \ vowels_index_count_min_index\n    local vowels_index_count_min_index\n    local\
    \ vowels_index_count_min_index\n    local vowels_index_count_min_index\n    local\
    \ vowels_index_count_min_index\n    local vowels_index_count_min_index\n    local\
    \ vowels_index_count_min_index\n    local vowels_index_count_min_index\n    local\
    \ vowels_index_count_min_index\n    local vowels_index_count_min_index\n    local\
    \ vowels_index_count_min_index\n    local \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgmo7l7kr.lua:91: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu872_l99.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5dd1ofec.lua:86: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptrs8ai21.lua:109: ''end'' expected (to close ''for'' at line
    89) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ vowels_count = #vowels\n    local vowels_index = 1\n    local vowels_index_count\
    \ = 1\n    local vowels_index_count_2 = 1\n    local vowels_index_count_3 = 1\n\
    \    local vowels_index_count_4 = 1\n    local vowels_index_count_5 = 1\n    local\
    \ vowels_index_count_6 = 1\n    local vowels_index_count_7 = 1\n    local vowels_index_count_8\
    \ = 1\n    local vowels_index_count_9 = 1\n    local vowels_index_count_10 = 1\n\
    \    local vowels_index_count_11 = 1\n    local vowels_index_count_12 = 1\n  \
    \  local vowels_index_count_13 = 1\n    local vowels_index_count_14 = 1\n    local\
    \ vowels_index_count_15 = 1\n    local vowels_index_count_16 = 1\n    local vowels_index_count_17\
    \ = 1\n    local vowels_index_count_18 = 1\n    local vowels_index_count_19 =\
    \ 1\n    local vowels_index_count_20 = 1\n    local vowels_index_count_21 = 1\n\
    \    local vowels_index_count_22 = 1\n    local vowels_index_count_23 = 1\n  \
    \  local vowels_index_count_24 = 1\n    local vowels_index_count_25 = 1\n    local\
    \ vowels_index_count_26 = 1\n    local vowels_index_count_27 = 1\n    local vowels_index_count_28\
    \ = 1\n    local vowels_index_count_29 = 1\n    local vowels_index_count_30 =\
    \ 1\n    local vowels_index_count_31 = 1\n    local vowels_index_count_32 = 1\n\
    \    local vowels_index_count_33 = 1\n    local vowels_index_count_34 = 1\n  \
    \  local vowels_index_count_35 = 1\n    local vowels_index_count_36 = 1\n    local\
    \ vowels_index_count_37 = 1\n    local vowels_index_count_38 = 1\n    local vowels_index_count_39\
    \ = 1\n    local vowels_index_count_40 = 1\n    local vowels_index_count_41 =\
    \ 1\n    local vowels_index_count_42 = 1\n    local vowels_index_count_43 = 1\n\
    \    local vowels_index_count_44 = 1\n    local vowels_index_count_45 = 1\n  \
    \  local vowels_index_count_46 = 1\n    local vowels_index_count_47 = 1\n    local\
    \ vowels_index_count_48 = 1\n    local vowels_index_count_49 = 1\n    local vowels_index_count_50\
    \ = 1\n    local vowels_index_count_51 = 1\n    local vowels_index_count_52 =\
    \ 1\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc4ogyfpd.lua:91: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 0\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max_index\
    \ = 0\n  local vowels_index_count_min_index = 0\n  local vowels_index_count_max_index\
    \ = 0\n  local vowels_index_count_min_index = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max_index\
    \ = 0\n  local vowels_index_count_min_index = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max_index\
    \ = 0\n  local vowels_index_count_min_index = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max_index\
    \ = 0\n  local vowels_index_count_min_index = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max_index\
    \ = 0\n  local vowels_index_count_min_index = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max_index\
    \ = 0\n  local vowels_index_count_min_index = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max_index\
    \ = 0\n  local vowels_index_count_min_index = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max_index\
    \ = 0\n  local vowels_index_count_min_index = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max_index\
    \ = 0\n  local vowels_index_count_min_index = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max_index\
    \ = 0\n  local vowels_index_count_min_index = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max_index\
    \ = 0\n  local vowels_index_count_min_index = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max_index\
    \ = 0\n  local vowels_index_count_min_index = 0\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_n5fwykq.lua:90: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    local vowels_index_count = 0\n    local vowels_index_max\
    \ = 0\n    local vowels_index_min = 0\n    local vowels_index_sum = 0\n    local\
    \ vowels_index_sum2 = 0\n    local vowels_index_sum3 = 0\n    local vowels_index_sum4\
    \ = 0\n    local vowels_index_sum5 = 0\n    local vowels_index_sum6 = 0\n    local\
    \ vowels_index_sum7 = 0\n    local vowels_index_sum8 = 0\n    local vowels_index_sum9\
    \ = 0\n    local vowels_index_sum10 = 0\n    local vowels_index_sum11 = 0\n  \
    \  local vowels_index_sum12 = 0\n    local vowels_index_sum13 = 0\n    local vowels_index_sum14\
    \ = 0\n    local vowels_index_sum15 = 0\n    local vowels_index_sum16 = 0\n  \
    \  local vowels_index_sum17 = 0\n    local vowels_index_sum18 = 0\n    local vowels_index_sum19\
    \ = 0\n    local vowels_index_sum20 = 0\n    local vowels_index_sum21 = 0\n  \
    \  local vowels_index_sum22 = 0\n    local vowels_index_sum23 = 0\n    local vowels_index_sum24\
    \ = 0\n    local vowels_index_sum25 = 0\n    local vowels_index_sum26 = 0\n  \
    \  local vowels_index_sum27 = 0\n    local vowels_index_sum28 = 0\n    local vowels_index_sum29\
    \ = 0\n    local vowels_index_sum30 = 0\n    local vowels_index_sum31 = 0\n  \
    \  local vowels_index_sum32 = 0\n    local vowels_index_sum33 = 0\n    local vowels_index_sum34\
    \ = 0\n    local vowels_index_sum35 = 0\n    local vowels_index_sum36 = 0\n  \
    \  local vowels_index_sum37 = 0\n    local vowels_index_sum38 = 0\n    local vowels_index_sum39\
    \ = 0\n    local vowels_index_sum40 = 0\n    local vowels_index_sum41 = 0\n  \
    \  local vowels_index_sum42 = 0\n    local vowels_index_sum43 = 0\n    local vowels_index_sum44\
    \ = 0\n    local vowels_index_sum45 = 0\n    local vowels_index_sum46 = 0\n  \
    \  local vowels_index_sum47 = 0\n    local vowels_index_sum48 = 0\n    local vowels_index_sum49\
    \ = 0\n    local vowels_index_sum50 = 0\n    local vowels_index_sum51 = 0\n  \
    \  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplkwrohzp.lua:93: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word - 1\n    local vowels_index_count_min = #word - vowels_count + 1\n \
    \   local vowels_index_count_min = #word - vowels_count + 1\n    local vowels_index_count_max\
    \ = #word - 1\n    local vowels_index_count_min = #word - vowels_count + 1\n \
    \   local vowels_index_count_max = #word - 1\n    local vowels_index_count_min\
    \ = #word - vowels_count + 1\n    local vowels_index_count_max = #word - 1\n \
    \   local vowels_index_count_min = #word - vowels_count + 1\n    local vowels_index_count_max\
    \ = #word - 1\n    local vowels_index_count_min = #word - vowels_count + 1\n \
    \   local vowels_index_count_max = #word - 1\n    local vowels_index_count_min\
    \ = #word - vowels_count + 1\n    local vowels_index_count_max = #word - 1\n \
    \   local vowels_index_count_min = #word - vowels_count + 1\n    local vowels_index_count_max\
    \ = #word - 1\n    local vowels_index_count_min = #word - vowels_count + 1\n \
    \   local vowels_index_count_max = #word - 1\n    local vowels_index_count_min\
    \ = #word - vowels_count + 1\n    local vowels_index_count_max = #word - 1\n \
    \   local vowels_index_count_min = #word - vowels_count + 1\n    local vowels_index_count_max\
    \ = #word - 1\n    local vowels_index_count_min = #word - vowels_count + 1\n \
    \   local vowels_index_count_max = #word - 1\n    local vowels_index_count_min\
    \ = #word - vowels_count + 1\n    local vowels_index_count_max = #word - 1\n \
    \   local vowels_index_count_min = #word - vowels_count + 1\n    local vowels_index_count_max\
    \ = #word - 1\n    local vowels_index_count_min = #word - vowels_count + 1\n \
    \   local vowels_index_count_max = #word - 1\n    local vowels_index_count_min\
    \ = #word - vowels_count + 1\n    local vowels_index_count_max = #word - 1\n \
    \   local vowels_index_count_min = #word - vowels_count + 1\n    local vowels_index_count_max\
    \ = #word - 1\n    local vowels_index_count_min = #word - vowels_count + 1\n \
    \   local vowels_index_count_max = #word - 1\n    local vowels_index_count_min\
    \ = #\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw4li0uc5.lua:57: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    local vowels_index_count = 0\n    for i = 1,\
    \ #word do\n        if word:sub(i, i) == vowels[vowels_index] then\n         \
    \   vowels_index_count = vowels_index_count + 1\n            table.insert(vowels_index,\
    \ i)\n        end\n    end\n    if vowels_index_count > vowels_count then\n  \
    \      return ''\n    end\n    local vowels_index_min = math.min(vowels_index,\
    \ #vowels_index)\n    local vowels_index_max = math.max(vowels_index, #vowels_index)\n\
    \    local vowels_index_mid = math.floor(#vowels_index/2)\n    local vowels_index_mid_min\
    \ = math.min(vowels_index_mid, #vowels_index)\n    local vowels_index_mid_max\
    \ = math.max(vowels_index_mid, #vowels_index)\n    local vowels_index_mid_mid\
    \ = math.floor(#vowels_index/4)\n    local vowels_index_mid_mid_min = math.min(vowels_index_mid_mid,\
    \ #vowels_index)\n    local vowels_index_mid_mid_max = math.max(vowels_index_mid_mid,\
    \ #vowels_index)\n    local vowels_index_mid_mid_mid = math.floor(#vowels_index/8)\n\
    \    local vowels_index_mid_mid_mid_min = math.min(vowels_index_mid_mid_mid, #vowels_index)\n\
    \    local vowels_index_mid_mid_mid_max = math.max(vowels_index_mid_mid_mid, #vowels_index)\n\
    \    local vowels_index_mid_mid_mid_mid = math.floor(#vowels_index/16)\n    local\
    \ vowels_index_mid_mid_mid_mid_min = math.min(vowels_index_mid_mid_mid_mid, #vowels_index)\n\
    \    local vowels_index_mid_mid_mid_max = math.max(vowels_index_mid_mid_mid_mid,\
    \ #vowels_index)\n    local vowels_index_mid_mid_mid_mid = math.floor(#vowels_index/32)\n\
    \    local vowels_index_mid_mid_mid_mid_min = math.min(vowels_index_mid_mid_mid_mid,\
    \ #vowels_index)\n    local vowels_index_mid_mid_mid_max = math.max(vowels_index_mid_mid_mid_mid,\
    \ #vowels_index)\n    local vowels_index_mid_mid_mid_mid = math.floor(#vowels_index/64)\n\
    \    local vowels_index_mid_mid_mid_mid_min = math.min(vowels_index_mid_mid_mid_mid,\
    \ #vowels_index)\n    local vowels_index_mid_mid_mid_max = math.max(vowels_index_mid_mid_mid_mid,\
    \ #vowels_index)\n    local vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwfrb4hgg.lua:69: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n\tlocal vowels_count = #vowels\n\
    \tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = 1\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpza1mlxo2.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = #word\n    local vowels_index2 = #word\n\
    \    local vowels_index3 = #word\n    local vowels_index4 = #word\n    local vowels_index5\
    \ = #word\n    local vowels_index6 = #word\n    local vowels_index7 = #word\n\
    \    local vowels_index8 = #word\n    local vowels_index9 = #word\n    local vowels_index10\
    \ = #word\n    local vowels_index11 = #word\n    local vowels_index12 = #word\n\
    \    local vowels_index13 = #word\n    local vowels_index14 = #word\n    local\
    \ vowels_index15 = #word\n    local vowels_index16 = #word\n    local vowels_index17\
    \ = #word\n    local vowels_index18 = #word\n    local vowels_index19 = #word\n\
    \    local vowels_index20 = #word\n    local vowels_index21 = #word\n    local\
    \ vowels_index22 = #word\n    local vowels_index23 = #word\n    local vowels_index24\
    \ = #word\n    local vowels_index25 = #word\n    local vowels_index26 = #word\n\
    \    local vowels_index27 = #word\n    local vowels_index28 = #word\n    local\
    \ vowels_index29 = #word\n    local vowels_index30 = #word\n    local vowels_index31\
    \ = #word\n    local vowels_index32 = #word\n    local vowels_index33 = #word\n\
    \    local vowels_index34 = #word\n    local vowels_index35 = #word\n    local\
    \ vowels_index36 = #word\n    local vowels_index37 = #word\n    local vowels_index38\
    \ = #word\n    local vowels_index39 = #word\n    local vowels_index40 = #word\n\
    \    local vowels_index41 = #word\n    local vowels_index42 = #word\n    local\
    \ vowels_index43 = #word\n    local vowels_index44 = #word\n    local vowels_index45\
    \ = #word\n    local vowels_index46 = #word\n    local vowels_index47 = #word\n\
    \    local vowels_index48 = #word\n    local vowels_index49 = #word\n    \nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwc2ye5u8.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = #word\n    local vowels_index_count_min = #word\n\
    \    local vowels_index_count_min = #word\n    local vowels_index_count_max =\
    \ #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpimt8vs1h.lua:86: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = 1\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdr5whs65.lua:82: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u'}\n\tlocal vowels_count = 0\n\tlocal vowel_index\
    \ = 1\n\tlocal vowel_found = false\n\tlocal vowel_found2 = false\n\tlocal vowel_found3\
    \ = false\n\tlocal vowel_found4 = false\n\tlocal vowel_found5 = false\n\tlocal\
    \ vowel_found6 = false\n\tlocal vowel_found7 = false\n\tlocal vowel_found8 = false\n\
    \tlocal vowel_found9 = false\n\tlocal vowel_found10 = false\n\tlocal vowel_found11\
    \ = false\n\tlocal vowel_found12 = false\n\tlocal vowel_found13 = false\n\tlocal\
    \ vowel_found14 = false\n\tlocal vowel_found15 = false\n\tlocal vowel_found16\
    \ = false\n\tlocal vowel_found17 = false\n\tlocal vowel_found18 = false\n\tlocal\
    \ vowel_found19 = false\n\tlocal vowel_found20 = false\n\tlocal vowel_found21\
    \ = false\n\tlocal vowel_found22 = false\n\tlocal vowel_found23 = false\n\tlocal\
    \ vowel_found24 = false\n\tlocal vowel_found25 = false\n\tlocal vowel_found26\
    \ = false\n\tlocal vowel_found27 = false\n\tlocal vowel_found28 = false\n\tlocal\
    \ vowel_found29 = false\n\tlocal vowel_found30 = false\n\tlocal vowel_found31\
    \ = false\n\tlocal vowel_found32 = false\n\tlocal vowel_found33 = false\n\tlocal\
    \ vowel_found34 = false\n\tlocal vowel_found35 = false\n\tlocal vowel_found36\
    \ = false\n\tlocal vowel_found37 = false\n\tlocal vowel_found38 = false\n\tlocal\
    \ vowel_found39 = false\n\tlocal vowel_found40 = false\n\tlocal vowel_found41\
    \ = false\n\tlocal vowel_found42 = false\n\tlocal vowel_found43 = false\n\tlocal\
    \ vowel_found44 = false\n\tlocal vowel_found45 = false\n\tlocal vowel_found46\
    \ = false\n\tlocal vowel_found47 = false\n\tlocal vowel_found48 = false\n\tlocal\
    \ vowel_found49 = false\n\tlocal vowel_found50 = false\n\tlocal vowel_found51\
    \ = false\n\tlocal vowel_found52 = false\n\tlocal vowel_found53 = false\n\tlocal\
    \ vowel_found54 = false\n\tlocal vowel_found55 = false\n\tlocal vowel_found56\
    \ = false\n\tlocal vowel_found57 = false\n\tlocal vowel_found58 = false\n\tlocal\
    \ vowel_found59 = false\n\tlocal vowel_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_17t_mwm.lua:98: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = 1\n\tlocal\
    \ vowels_index_count_max_minus_one = #word-1\n\tlocal vowels_index_count_max_minus_one_minus_one\
    \ = #word-2\n\tlocal vowels_index_count_max_minus_one_minus_one_minus_one = #word-3\n\
    \tlocal vowels_index_count_max_minus_one_minus_one_minus_one_minus_one = #word-4\n\
    \tlocal vowels_index_count_max_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ = #word-5\n\tlocal vowels_index_count_max_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ = #word-6\n\tlocal vowels_index_count_max_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ = #word-7\n\tlocal vowels_index_count_max_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ = #word-8\n\tlocal vowels_index_count_max_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ = #word-9\n\tlocal vowels_index_count_max_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ = #word-10\n\tlocal vowels_index_count_max_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ = #word-11\n\tlocal vowels_index_count_max_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ = #word-12\n\tlocal vowels_index_count_max_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ = #word-13\n\tlocal vowels_index_count_max_minus_one_minus_one_minus_one_minus_one_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1jjikkry.lua:55: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u'}\n\tlocal vowels_count = #vowels\n\tlocal\
    \ vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbu4tly2s.lua:107: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n\tlocal vowels_count = #vowels\n\
    \tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqqna3xqm.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgras4y4_.lua:85: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmsk91bs9.lua:109: ''end'' expected (to close ''for'' at line
    89) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u'}\n  local vowels_count = #vowels\n  local\
    \ vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = 1\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphyav6zhd.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 1\n  local vowels_index_count_min\
    \ = #vowels\n  local vowels_index_count_max = #vowels\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = #vowels\n  local vowels_index_count_min_index_index\
    \ = 1\n  local vowels_index_count_max_index_index = #vowels\n  local vowels_index_count_min_index_index_index\
    \ = 1\n  local vowels_index_count_max_index_index = 1\n  local vowels_index_count_min_index_index\
    \ = 1\n  local vowels_index_count_max_index_index = 1\n  local vowels_index_count_min_index_index\
    \ = 1\n  local vowels_index_count_max_index_index = 1\n  local vowels_index_count_min_index_index\
    \ = 1\n  local vowels_index_count_max_index_index = 1\n  local vowels_index_count_min_index_index\
    \ = 1\n  local vowels_index_count_max_index_index = 1\n  local vowels_index_count_min_index_index\
    \ = 1\n  local vowels_index_count_max_index_index = 1\n  local vowels_index_count_min_index_index\
    \ = 1\n  local vowels_index_count_max_index_index = 1\n  local vowels_index_count_min_index_index\
    \ = 1\n  local vowels_index_count_max_index_index = 1\n  local vowels_index_count_min_index_index\
    \ = 1\n  local vowels_index_count_max_index_index = 1\n  local vowels_index_count_min_index_index\
    \ = 1\n  local vowels_index_count_max_index_index = 1\n  local vowels_index_count_min_index_index\
    \ = 1\n  local vowels_index_count_max_index_index = 1\n  local vowels_index_count_min_index_index\
    \ = 1\n  local vowels_index_count_max_index_index = 1\n  local vowels_index_count_min_index_index\
    \ = 1\n  local vowels_index_count_max_index_index = 1\n  local vowels_index_count_min_index_index\
    \ = 1\n  local vowels_index_count_max_index_index = 1\n  local vowels_index_count_min_index_index\
    \ = 1\n  local vowels_index_count_max_index_index = 1\n  local vowels_index_count_min_index_index\
    \ = 1\n  local vowels_index_count_max_index_index = 1\n  local vowels_index_count_min_index_index\
    \ = 1\n  local vowels_index_count_max_index_index = 1\n  local vowels_index_count_min_index_index\
    \ = 1\n  local vowels_index_count_max_index_index = 1\n  local vowels_index_count_min_index_index\
    \ = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl5itu1o4.lua:82: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = #word\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5ym0xk92.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 0\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_max_count\
    \ = 0\n    local vowels_index_count_max_count_max = 0\n    local vowels_index_count_max_count_min\
    \ = 0\n    local vowels_index_count_max_count_min_index = 0\n    local vowels_index_count_max_count_max_index\
    \ = 0\n    local vowels_index_count_max_count_max_count = 0\n    local vowels_index_count_max_count_max_count_max\
    \ = 0\n    local vowels_index_count_max_count_max_min = 0\n    local vowels_index_count_max_count_max_min_index\
    \ = 0\n    local vowels_index_count_max_count_max_count_max = 0\n    local vowels_index_count_max_count_max_count_min\
    \ = 0\n    local vowels_index_count_max_count_max_count_min_index = 0\n    local\
    \ vowels_index_count_max_count_max_count_max_index = 0\n    local vowels_index_count_max_count_max_count_max_count\
    \ = 0\n    local vowels_index_count_max_count_max_count_max_min = 0\n    local\
    \ vowels_index_count_max_count_max_count_max_min_index = 0\n    local vowels_index_count_max_count_max_count_max_count_max\
    \ = 0\n    local vowels_index_count_max_count_max_count_max_min = 0\n    local\
    \ vowels_index_count_max_count_max_count_max_min_index = 0\n    local vowels_index_count_max_count_max_count_max_count_max\
    \ = 0\n    local vowels_index_count_max_count_max_count_max_min_index = 0\n  \
    \  local vowels_index_count_max_count_max_count_max_count_min = 0\n    local vowels_index_count_max_count_max_count_max_count_min_index\
    \ = 0\n    local vowels_index_count_max_count_max_count_max_count_max_count =\
    \ 0\n    local vowels_index_count_max_count_max_count_max_count_min = 0\n    local\
    \ vowels_index_count_max_count_max_count_max_count_min_index = 0\n    local vowels_index_count_max_count_max_count_max_count_max_count\
    \ = 0\n    local vowels_index_count_max_count_max_count_max_count_max_min = 0\n\
    \    local vowels_index_count_max_count_max_count_max_count_max_min_index = 0\n\
    \    local vowels_index_count_max_count_max_count_max_count_max_count_max = 0\n\
    \    local vowels_index_count_max_count_max_count_max_count_max_min = 0\n    local\
    \ vowels_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxvsv_bas.lua:75: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min = 0\n\tlocal vowels_index_count_max_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count = 0\n\tlocal\
    \ vowels_index_count_max_index_count_min_index_count_max = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_max_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_max_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_max_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_max_index_count_min_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index_count_min_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index_count_min\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpb87sje_8.lua:64: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_min = math.min(#word,vowels_count)\n\tlocal vowels_index_count_max\
    \ = math.max(#word,vowels_count)\n\tlocal vowels_index_count_min = math.min(#word,vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(#word,vowels_count)\n\tlocal vowels_index_count_min\
    \ = math.min(#word,vowels_count)\n\tlocal vowels_index_count_max = math.max(#word,vowels_count)\n\
    \tlocal vowels_index_count_min = math.min(#word,vowels_count)\n\tlocal vowels_index_count_max\
    \ = math.max(#word,vowels_count)\n\tlocal vowels_index_count_min = math.min(#word,vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(#word,vowels_count)\n\tlocal vowels_index_count_min\
    \ = math.min(#word,vowels_count)\n\tlocal vowels_index_count_max = math.max(#word,vowels_count)\n\
    \tlocal vowels_index_count_min = math.min(#word,vowels_count)\n\tlocal vowels_index_count_max\
    \ = math.max(#word,vowels_count)\n\tlocal vowels_index_count_min = math.min(#word,vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(#word,vowels_count)\n\tlocal vowels_index_count_min\
    \ = math.min(#word,vowels_count)\n\tlocal vowels_index_count_max = math.max(#word,vowels_count)\n\
    \tlocal vowels_index_count_min = math.min(#word,vowels_count)\n\tlocal vowels_index_count_max\
    \ = math.max(#word,vowels_count)\n\tlocal vowels_index_count_min = math.min(#word,vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(#word,vowels_count)\n\tlocal vowels_index_count_min\
    \ = math.min(#word,vowels_count)\n\tlocal vowels_index_count_max = math.max(#word,vowels_count)\n\
    \tlocal vowels_index_count_min = math.min(#word,vowels_count)\n\tlocal vowels_index_count_max\
    \ = math.max(#word,vowels_count)\n\tlocal vowels_index_count_min = math.min(#word,vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(#word,vowels_count)\n\tlocal vowels_index_count_min\
    \ = math.min(#word,vowels_count)\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprbpj8zne.lua:69: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels_index\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n   \
    \ local vowels_count = #vowels_index\n    local vowels_index = {}\n    for i =\
    \ 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local\
    \ vowels_count = #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count\
    \ do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count =\
    \ #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count do\n\
    \        table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels_index\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels_index\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n   \
    \ local vowels_count = #vowels_index\n    local vowels_index = {}\n    for i =\
    \ 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local\
    \ vowels_count = #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count\
    \ do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count =\
    \ #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count do\n\
    \        table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxhmd_gr2.lua:107: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdpow4a0o.lua:108: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 1\n    local vowels_index_count_2\
    \ = 1\n    local vowels_index_count_3 = 1\n    local vowels_index_count_4 = 1\n\
    \    local vowels_index_count_5 = 1\n    local vowels_index_count_6 = 1\n    local\
    \ vowels_index_count_7 = 1\n    local vowels_index_count_8 = 1\n    local vowels_index_count_9\
    \ = 1\n    local vowels_index_count_10 = 1\n    local vowels_index_count_11 =\
    \ 1\n    local vowels_index_count_12 = 1\n    local vowels_index_count_13 = 1\n\
    \    local vowels_index_count_14 = 1\n    local vowels_index_count_15 = 1\n  \
    \  local vowels_index_count_16 = 1\n    local vowels_index_count_17 = 1\n    local\
    \ vowels_index_count_18 = 1\n    local vowels_index_count_19 = 1\n    local vowels_index_count_20\
    \ = 1\n    local vowels_index_count_21 = 1\n    local vowels_index_count_22 =\
    \ 1\n    local vowels_index_count_23 = 1\n    local vowels_index_count_24 = 1\n\
    \    local vowels_index_count_25 = 1\n    local vowels_index_count_26 = 1\n  \
    \  local vowels_index_count_27 = 1\n    local vowels_index_count_28 = 1\n    local\
    \ vowels_index_count_29 = 1\n    local vowels_index_count_30 = 1\n    local vowels_index_count_31\
    \ = 1\n    local vowels_index_count_32 = 1\n    local vowels_index_count_33 =\
    \ 1\n    local vowels_index_count_34 = 1\n    local vowels_index_count_35 = 1\n\
    \    local vowels_index_count_36 = 1\n    local vowels_index_count_37 = 1\n  \
    \  local vowels_index_count_38 = 1\n    local vowels_index_count_39 = 1\n    local\
    \ vowels_index_count_40 = 1\n    local vowels_index_count_41 = 1\n    local vowels_index_count_42\
    \ = 1\n    local vowels_index_count_43 = 1\n    local vowels_index_count_44 =\
    \ 1\n    local vowels_index_count_45 = 1\n    local vowels_index_count_46 = 1\n\
    \    local vowels_index_count_47 = 1\n    local vowels_index_count_48 = 1\n  \
    \  local vowels_index_count_49 = 1\n    local vowels_index_count_50 = 1\n    local\
    \ vowels_index_count_51 = 1\n    local vowels_index_count_52 = 1\n    local vowels_index_count_53\
    \ = \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbpwuz9ni.lua:72: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 1\n  local vowels_index_count_minus_1\
    \ = vowels_count - 1\n  local vowels_index_count_minus_2 = vowels_count - 2\n\
    \  local vowels_index_count_minus_3 = vowels_count - 3\n  local vowels_index_count_minus_4\
    \ = vowels_count - 4\n  local vowels_index_count_minus_5 = vowels_count - 5\n\
    \  local vowels_index_count_minus_6 = vowels_count - 6\n  local vowels_index_count_minus_7\
    \ = vowels_count - 7\n  local vowels_index_count_minus_8 = vowels_count - 8\n\
    \  local vowels_index_count_minus_9 = vowels_count - 9\n  local vowels_index_count_minus_10\
    \ = vowels_count - 10\n  local vowels_index_count_minus_11 = vowels_count - 11\n\
    \  local vowels_index_count_minus_12 = vowels_count - 12\n  local vowels_index_count_minus_13\
    \ = vowels_count - 13\n  local vowels_index_count_minus_14 = vowels_count - 14\n\
    \  local vowels_index_count_minus_15 = vowels_count - 15\n  local vowels_index_count_minus_16\
    \ = vowels_count - 16\n  local vowels_index_count_minus_17 = vowels_count - 17\n\
    \  local vowels_index_count_minus_18 = vowels_count - 18\n  local vowels_index_count_minus_19\
    \ = vowels_count - 19\n  local vowels_index_count_minus_20 = vowels_count - 20\n\
    \  local vowels_index_count_minus_21 = vowels_count - 21\n  local vowels_index_count_minus_22\
    \ = vowels_count - 22\n  local vowels_index_count_minus_23 = vowels_count - 23\n\
    \  local vowels_index_count_minus_24 = vowels_count - 24\n  local vowels_index_count_minus_25\
    \ = vowels_count - 25\n  local vowels_index_count_minus_26 = vowels_count - 26\n\
    \  local vowels_index_count_minus_27 = vowels_count - 27\n  local vowels_index_count_minus_28\
    \ = vowels_count - 28\n  local vowels_index_count_minus_29 = vowels_count - 29\n\
    \  local vowels_index_count_minus_30 = vowels_count - 30\n  local vowels_index_count_minus_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq4puzl3p.lua:70: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp97vp_1n9.lua:89: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = #word\n\tlocal vowels_index2 = #word\n\tlocal vowels_index3\
    \ = #word\n\tlocal vowels_index4 = #word\n\tlocal vowels_index5 = #word\n\tlocal\
    \ vowels_index6 = #word\n\tlocal vowels_index7 = #word\n\tlocal vowels_index8\
    \ = #word\n\tlocal vowels_index9 = #word\n\tlocal vowels_index10 = #word\n\tlocal\
    \ vowels_index11 = #word\n\tlocal vowels_index12 = #word\n\tlocal vowels_index13\
    \ = #word\n\tlocal vowels_index14 = #word\n\tlocal vowels_index15 = #word\n\t\
    local vowels_index16 = #word\n\tlocal vowels_index17 = #word\n\tlocal vowels_index18\
    \ = #word\n\tlocal vowels_index19 = #word\n\tlocal vowels_index20 = #word\n\t\
    local vowels_index21 = #word\n\tlocal vowels_index22 = #word\n\tlocal vowels_index23\
    \ = #word\n\tlocal vowels_index24 = #word\n\tlocal vowels_index25 = #word\n\t\
    local vowels_index26 = #word\n\tlocal vowels_index27 = #word\n\tlocal vowels_index28\
    \ = #word\n\tlocal vowels_index29 = #word\n\tlocal vowels_index30 = #word\n\t\
    local vowels_index31 = #word\n\tlocal vowels_index32 = #word\n\tlocal vowels_index33\
    \ = #word\n\tlocal vowels_index34 = #word\n\tlocal vowels_index35 = #word\n\t\
    local vowels_index36 = #word\n\tlocal vowels_index37 = #word\n\tlocal vowels_index38\
    \ = #word\n\tlocal vowels_index39 = #word\n\tlocal vowels_index40 = #word\n\t\
    local vowels_index41 = #word\n\tlocal vowels_index42 = #word\n\tlocal vowels_index43\
    \ = #word\n\tlocal vowels_index44 = #word\n\tlocal vowels_index45 = #word\n\t\
    local vowels_index46 = #word\n\tlocal vowels_index47 = #word\n\tlocal vowels_index48\
    \ = #word\n\tlocal vowels_index49 = #word\n\tlocal vowels_index50 = #word\n\t\
    local vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppfpddx2r.lua:88: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 1\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgmv3vung.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = 1\n  local vowels_index_count = 1\n  local\
    \ vowels_index_count_minus_one = #vowels - 1\n  local vowels_index_count_minus_two\
    \ = #vowels - 2\n  local vowels_index_count_minus_three = #vowels - 3\n  local\
    \ vowels_index_count_minus_four = #vowels - 4\n  local vowels_index_count_minus_five\
    \ = #vowels - 5\n  local vowels_index_count_minus_six = #vowels - 6\n  local vowels_index_count_minus_seven\
    \ = #vowels - 7\n  local vowels_index_count_minus_eight = #vowels - 8\n  local\
    \ vowels_index_count_minus_nine = #vowels - 9\n  local vowels_index_count_minus_ten\
    \ = #vowels - 10\n  local vowels_index_count_minus_eleven = #vowels - 11\n  local\
    \ vowels_index_count_minus_twelve = #vowels - 12\n  local vowels_index_count_minus_thirteen\
    \ = #vowels - 13\n  local vowels_index_count_minus_fourteen = #vowels - 14\n \
    \ local vowels_index_count_minus_fifteen = #vowels - 15\n  local vowels_index_count_minus_sixteen\
    \ = #vowels - 16\n  local vowels_index_count_minus_seventeen = #vowels - 17\n\
    \  local vowels_index_count_minus_eighteen = #vowels - 18\n  local vowels_index_count_minus_nineteen\
    \ = #vowels - 19\n  local vowels_index_count_minus_twenty = #vowels - 20\n  local\
    \ vowels_index_count_minus_twenty_one = #vowels - 21\n  local vowels_index_count_minus_twenty_two\
    \ = #vowels - 22\n  local vowels_index_count_minus_twenty_three = #vowels - 23\n\
    \  local vowels_index_count_minus_twenty_four = #vowels - 24\n  local vowels_index_count_minus_twenty_five\
    \ = #vowels - 25\n  local vowels_index_count_minus_twenty_six = #vowels - 26\n\
    \  local vowels_index_count_minus_twenty_seven = #vowels - 27\n  local vowels_index_count_minus_twenty_eight\
    \ = #vowels - \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf0t4760v.lua:48: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count2\
    \ = 0\n    local vowels_index_count3 = 0\n    local vowels_index_count4 = 0\n\
    \    local vowels_index_count5 = 0\n    local vowels_index_count6 = 0\n    local\
    \ vowels_index_count7 = 0\n    local vowels_index_count8 = 0\n    local vowels_index_count9\
    \ = 0\n    local vowels_index_count10 = 0\n    local vowels_index_count11 = 0\n\
    \    local vowels_index_count12 = 0\n    local vowels_index_count13 = 0\n    local\
    \ vowels_index_count14 = 0\n    local vowels_index_count15 = 0\n    local vowels_index_count16\
    \ = 0\n    local vowels_index_count17 = 0\n    local vowels_index_count18 = 0\n\
    \    local vowels_index_count19 = 0\n    local vowels_index_count20 = 0\n    local\
    \ vowels_index_count21 = 0\n    local vowels_index_count22 = 0\n    local vowels_index_count23\
    \ = 0\n    local vowels_index_count24 = 0\n    local vowels_index_count25 = 0\n\
    \    local vowels_index_count26 = 0\n    local vowels_index_count27 = 0\n    local\
    \ vowels_index_count28 = 0\n    local vowels_index_count29 = 0\n    local vowels_index_count30\
    \ = 0\n    local vowels_index_count31 = 0\n    local vowels_index_count32 = 0\n\
    \    local vowels_index_count33 = 0\n    local vowels_index_count34 = 0\n    local\
    \ vowels_index_count35 = 0\n    local vowels_index_count36 = 0\n    local vowels_index_count37\
    \ = 0\n    local vowels_index_count38 = 0\n    local vowels_index_count39 = 0\n\
    \    local vowels_index_count40 = 0\n    local vowels_index_count41 = 0\n    local\
    \ vowels_index_count42 = 0\n    local vowels_index_count43 = 0\n    local vowels_index_count44\
    \ = 0\n    local vowels_index_count45 = 0\n    local vowels_index_count46 = 0\n\
    \    local vowels_index_count47 = 0\n    local vowels_index_count48 = 0\n    local\
    \ vowels_index_count49 = 0\n    local vowels_index_count50 = 0\n    local vowels_index_count51\
    \ = 0\n    local vowels_index_count52 = 0\n    local vowels_index_count53 = 0\n\
    \    local vowels_index_count54 = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy4xhbt2r.lua:92: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count2 = 0\n\tlocal vowels_index_count3 = 0\n\tlocal vowels_index_count4\
    \ = 0\n\tlocal vowels_index_count5 = 0\n\tlocal vowels_index_count6 = 0\n\tlocal\
    \ vowels_index_count7 = 0\n\tlocal vowels_index_count8 = 0\n\tlocal vowels_index_count9\
    \ = 0\n\tlocal vowels_index_count10 = 0\n\tlocal vowels_index_count11 = 0\n\t\
    local vowels_index_count12 = 0\n\tlocal vowels_index_count13 = 0\n\tlocal vowels_index_count14\
    \ = 0\n\tlocal vowels_index_count15 = 0\n\tlocal vowels_index_count16 = 0\n\t\
    local vowels_index_count17 = 0\n\tlocal vowels_index_count18 = 0\n\tlocal vowels_index_count19\
    \ = 0\n\tlocal vowels_index_count20 = 0\n\tlocal vowels_index_count21 = 0\n\t\
    local vowels_index_count22 = 0\n\tlocal vowels_index_count23 = 0\n\tlocal vowels_index_count24\
    \ = 0\n\tlocal vowels_index_count25 = 0\n\tlocal vowels_index_count26 = 0\n\t\
    local vowels_index_count27 = 0\n\tlocal vowels_index_count28 = 0\n\tlocal vowels_index_count29\
    \ = 0\n\tlocal vowels_index_count30 = 0\n\tlocal vowels_index_count31 = 0\n\t\
    local vowels_index_count32 = 0\n\tlocal vowels_index_count33 = 0\n\tlocal vowels_index_count34\
    \ = 0\n\tlocal vowels_index_count35 = 0\n\tlocal vowels_index_count36 = 0\n\t\
    local vowels_index_count37 = 0\n\tlocal vowels_index_count38 = 0\n\tlocal vowels_index_count39\
    \ = 0\n\tlocal vowels_index_count40 = 0\n\tlocal vowels_index_count41 = 0\n\t\
    local vowels_index_count42 = 0\n\tlocal vowels_index_count43 = 0\n\tlocal vowels_index_count44\
    \ = 0\n\tlocal vowels_index_count45 = 0\n\tlocal vowels_index_count46 = 0\n\t\
    local vowels_index_count47 = 0\n\tlocal vowels_index_count48 = 0\n\tlocal vowels_index_count49\
    \ = 0\n\tlocal vowels_index_count50 = 0\n\tlocal vowels_index_count51 = 0\n\t\
    local vowels_index_count52 = 0\n\tlocal vowels_index_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaptvgh9l.lua:91: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = 0\n\tlocal\
    \ vowel_found = false\n\tlocal vowel_start = nil\n\tlocal vowel_end = nil\n\t\
    local vowel_length = nil\n\tlocal vowel_middle = nil\n\tlocal vowel_middle_index\
    \ = nil\n\tlocal vowel_middle_index = nil\n\tlocal vowel_middle_index = nil\n\t\
    local vowel_middle_index = nil\n\tlocal vowel_middle_index = nil\n\tlocal vowel_middle_index\
    \ = nil\n\tlocal vowel_middle_index = nil\n\tlocal vowel_middle_index = nil\n\t\
    local vowel_middle_index = nil\n\tlocal vowel_middle_index = nil\n\tlocal vowel_middle_index\
    \ = nil\n\tlocal vowel_middle_index = nil\n\tlocal vowel_middle_index = nil\n\t\
    local vowel_middle_index = nil\n\tlocal vowel_middle_index = nil\n\tlocal vowel_middle_index\
    \ = nil\n\tlocal vowel_middle_index = nil\n\tlocal vowel_middle_index = nil\n\t\
    local vowel_middle_index = nil\n\tlocal vowel_middle_index = nil\n\tlocal vowel_middle_index\
    \ = nil\n\tlocal vowel_middle_index = nil\n\tlocal vowel_middle_index = nil\n\t\
    local vowel_middle_index = nil\n\tlocal vowel_middle_index = nil\n\tlocal vowel_middle_index\
    \ = nil\n\tlocal vowel_middle_index = nil\n\tlocal vowel_middle_index = nil\n\t\
    local vowel_middle_index = nil\n\tlocal vowel_middle_index = nil\n\tlocal vowel_middle_index\
    \ = nil\n\tlocal vowel_middle_index = nil\n\tlocal vowel_middle_index = nil\n\t\
    local vowel_middle_index = nil\n\tlocal vowel_middle_index = nil\n\tlocal vowel_middle_index\
    \ = nil\n\tlocal vowel_middle_index = nil\n\tlocal vowel_middle_index = nil\n\t\
    local vowel_middle_index = nil\n\tlocal vowel_middle_index = nil\n\tlocal vowel_middle_index\
    \ = nil\n\tlocal vowel_middle_index = nil\n\tlocal vowel_middle_index = nil\n\t\
    local vowel_middle_index = nil\n\tlocal vowel_middle_index = nil\n\tlocal vowel_middle_index\
    \ = nil\n\tlocal vowel_middle_index = nil\n\tlocal vowel_middle_index = nil\n\t\
    local vowel_middle_index = nil\n\tlocal vowel_middle_index = nil\n\tlocal vowel_middle_index\
    \ = nil\n\tlocal vowel_middle_index = nil\n\tlocal vowel_middle_index = nil\n\t\
    local vowel_middle_index = nil\n\tlocal vowel_middle_index = nil\n\tlocal vowel_middle_index\
    \ = nil\n\tlocal vowel_middle_index = nil\n\t\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwx_v4thi.lua:100: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 1\n    local vowels_index_count_prev\
    \ = 1\n    local vowels_index_count_next = 1\n    local vowels_index_count_next2\
    \ = 0\n    local vowels_index_count_next3 = 0\n    local vowels_index_count_next4\
    \ = 0\n    local vowels_index_count_next5 = 0\n    local vowels_index_count_next6\
    \ = 0\n    local vowels_index_count_next7 = 0\n    local vowels_index_count_next8\
    \ = 0\n    local vowels_index_count_next9 = 0\n    local vowels_index_count_next10\
    \ = 0\n    local vowels_index_count_next11 = 0\n    local vowels_index_count_next12\
    \ = 0\n    local vowels_index_count_next13 = 0\n    local vowels_index_count_next14\
    \ = 0\n    local vowels_index_count_next15 = 0\n    local vowels_index_count_next16\
    \ = 0\n    local vowels_index_count_next17 = 0\n    local vowels_index_count_next18\
    \ = 0\n    local vowels_index_count_next19 = 0\n    local vowels_index_count_next20\
    \ = 0\n    local vowels_index_count_next21 = 0\n    local vowels_index_count_next22\
    \ = 0\n    local vowels_index_count_next23 = 0\n    local vowels_index_count_next24\
    \ = 0\n    local vowels_index_count_next25 = 0\n    local vowels_index_count_next26\
    \ = 0\n    local vowels_index_count_next27 = 0\n    local vowels_index_count_next28\
    \ = 0\n    local vowels_index_count_next29 = 0\n    local vowels_index_count_next30\
    \ = 0\n    local vowels_index_count_next31 = 0\n    local vowels_index_count_next32\
    \ = 0\n    local vowels_index_count_next33 = 0\n    local vowels_index_count_next34\
    \ = 0\n    local vowels_index_count_next35 = 0\n    local vowels_index_count_next36\
    \ = 0\n    local vowels_index_count_next37 = 0\n    local vowels_index_count_next38\
    \ = 0\n    local vowels_index_count_next39 = 0\n    local vowels_index_count_next40\
    \ = 0\n    local vowels_index_count_next41 = 0\n    local vowels_index_count_next42\
    \ = 0\n    local vowels_index_count_next43 = 0\n    local vowels_index_count_next44\
    \ = 0\n    local vowels_index_count_next45 = 0\n    local vowels_index_count_next46\
    \ = 0\n    local vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmped_74jkl.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdpow4a0o.lua:108: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\tlocal vowels_count\
    \ = 0\n\tlocal vowel_found = false\n\tlocal vowel_found2 = false\n\tlocal vowel_found3\
    \ = false\n\tlocal vowel_found4 = false\n\tlocal vowel_found5 = false\n\tlocal\
    \ vowel_found6 = false\n\tlocal vowel_found7 = false\n\tlocal vowel_found8 = false\n\
    \tlocal vowel_found9 = false\n\tlocal vowel_found10 = false\n\tlocal vowel_found11\
    \ = false\n\tlocal vowel_found12 = false\n\tlocal vowel_found13 = false\n\tlocal\
    \ vowel_found14 = false\n\tlocal vowel_found15 = false\n\tlocal vowel_found16\
    \ = false\n\tlocal vowel_found17 = false\n\tlocal vowel_found18 = false\n\tlocal\
    \ vowel_found19 = false\n\tlocal vowel_found20 = false\n\tlocal vowel_found21\
    \ = false\n\tlocal vowel_found22 = false\n\tlocal vowel_found23 = false\n\tlocal\
    \ vowel_found24 = false\n\tlocal vowel_found25 = false\n\tlocal vowel_found26\
    \ = false\n\tlocal vowel_found27 = false\n\tlocal vowel_found28 = false\n\tlocal\
    \ vowel_found29 = false\n\tlocal vowel_found30 = false\n\tlocal vowel_found31\
    \ = false\n\tlocal vowel_found32 = false\n\tlocal vowel_found33 = false\n\tlocal\
    \ vowel_found34 = false\n\tlocal vowel_found35 = false\n\tlocal vowel_found36\
    \ = false\n\tlocal vowel_found37 = false\n\tlocal vowel_found38 = false\n\tlocal\
    \ vowel_found39 = false\n\tlocal vowel_found40 = false\n\tlocal vowel_found41\
    \ = false\n\tlocal vowel_found42 = false\n\tlocal vowel_found43 = false\n\tlocal\
    \ vowel_found44 = false\n\tlocal vowel_found45 = false\n\tlocal vowel_found46\
    \ = false\n\tlocal vowel_found47 = false\n\tlocal vowel_found48 = false\n\tlocal\
    \ vowel_found49 = false\n\tlocal vowel_found50 = false\n\tlocal vowel_found51\
    \ = false\n\tlocal vowel_found52 = false\n\tlocal vowel_found53 = false\n\tlocal\
    \ vowel_found54 = false\n\tlocal vowel_found55 = false\n\tlocal vowel_found56\
    \ = false\n\tlocal vowel_found57 = false\n\tlocal vowel_found58 = false\n\tlocal\
    \ vowel_found59 = false\n\tlocal vowel_found\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp20fasz3m.lua:97: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdpow4a0o.lua:108: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = {}\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count2 = 0\n\tlocal vowels_index_count3 = 0\n\tlocal vowels_index_count4\
    \ = 0\n\tlocal vowels_index_count5 = 0\n\tlocal vowels_index_count6 = 0\n\tlocal\
    \ vowels_index_count7 = 0\n\tlocal vowels_index_count8 = 0\n\tlocal vowels_index_count9\
    \ = 0\n\tlocal vowels_index_count10 = 0\n\tlocal vowels_index_count11 = 0\n\t\
    local vowels_index_count12 = 0\n\tlocal vowels_index_count13 = 0\n\tlocal vowels_index_count14\
    \ = 0\n\tlocal vowels_index_count15 = 0\n\tlocal vowels_index_count16 = 0\n\t\
    local vowels_index_count17 = 0\n\tlocal vowels_index_count18 = 0\n\tlocal vowels_index_count19\
    \ = 0\n\tlocal vowels_index_count20 = 0\n\tlocal vowels_index_count21 = 0\n\t\
    local vowels_index_count22 = 0\n\tlocal vowels_index_count23 = 0\n\tlocal vowels_index_count24\
    \ = 0\n\tlocal vowels_index_count25 = 0\n\tlocal vowels_index_count26 = 0\n\t\
    local vowels_index_count27 = 0\n\tlocal vowels_index_count28 = 0\n\tlocal vowels_index_count29\
    \ = 0\n\tlocal vowels_index_count30 = 0\n\tlocal vowels_index_count31 = 0\n\t\
    local vowels_index_count32 = 0\n\tlocal vowels_index_count33 = 0\n\tlocal vowels_index_count34\
    \ = 0\n\tlocal vowels_index_count35 = 0\n\tlocal vowels_index_count36 = 0\n\t\
    local vowels_index_count37 = 0\n\tlocal vowels_index_count38 = 0\n\tlocal vowels_index_count39\
    \ = 0\n\tlocal vowels_index_count40 = 0\n\tlocal vowels_index_count41 = 0\n\t\
    local vowels_index_count42 = 0\n\tlocal vowels_index_count43 = 0\n\tlocal vowels_index_count44\
    \ = 0\n\tlocal vowels_index_count45 = 0\n\tlocal vowels_index_count46 = 0\n\t\
    local vowels_index_count47 = 0\n\tlocal vowels_index_count48 = 0\n\tlocal vowels_index_count49\
    \ = 0\n\tlocal vowels_index_count50 = 0\n\tlocal vowels_index_count51 = 0\n\t\
    local vowels_index_count52 = 0\n\tlocal vowels_index_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1mzjs4fb.lua:91: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  \n  local vowels_count = #word\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  \n  local\
    \ vowels_count = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count\
    \ do\n    table.insert(vowels_index, i)\n  end\n  \n  local vowels_count = #word\n\
    \  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  \n  local vowels_count = #vowels\n  local vowels_index = {}\n \
    \ for i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  \n \
    \ local vowels_count = #word\n  local vowels_index = {}\n  for i = 1, vowels_count\
    \ do\n    table.insert(vowels_index, i)\n  end\n  \n  local vowels_count = #vowels\n\
    \  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  \n  local vowels_count = #word\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  \n  local\
    \ vowels_count = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count\
    \ do\n    table.insert(vowels_index, i)\n  end\n  \n  local vowels_count = #word\n\
    \  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  \n  local vowels_count = #vowels\n  local vowels_index = {}\n \
    \ for i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  \n \
    \ local vowels_count = #word\n  local vowels_index = {}\n  for i = 1, vowels_count\
    \ do\n    table.insert(vowels_index, i)\n  end\n  \n  local vowels_count = #vowels\n\
    \  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  \n  local vowels_count = #word\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  \n  local\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsio3t6xt.lua:121: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 0\n    local vowels_index_count = 0\n    local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n    local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n    local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \    local vowels_index_count_max = math.max(#word, vowels_count)\n    local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n    local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n    local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \    local vowels_index_count_max = math.max(#word, vowels_count)\n    local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n    local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n    local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \    local vowels_index_count_max = math.max(#word, vowels_count)\n    local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n    local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n    local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \    local vowels_index_count_max = math.max(#word, vowels_count)\n    local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n    local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n    local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \    local vowels_index_count_max = math.max(#word, vowels_count)\n    local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n    local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n    local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \    local vowels_index_count_max = math.max(#word, vowels_count)\n    local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n    local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n    local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \    local vowels_index_count_max = math.max(#word, vowels_count)\n    local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n    local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n    local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \    local vowels_index_count_max = math.max(#word, \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfszzl0hu.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_min = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = #vowels\n\tlocal vowels_index_count_max = #vowels\n\
    \tlocal vowels_index_count_min = #vowels\n\tlocal vowels_index_count_max = #vowels\n\
    \tlocal vowels_index_count_min = #vowels\n\tlocal vowels_index_count_max = #vowels\n\
    \tlocal vowels_index_count_min = #vowels\n\tlocal vowels_index_count_max = #vowels\n\
    \tlocal vowels_index_count_min = #vowels\n\tlocal vowels_index_count_max = #vowels\n\
    \tlocal vowels_index_count_min = #vowels\n\tlocal vowels_index_count_max = #vowels\n\
    \tlocal vowels_index_count_min = #vowels\n\tlocal vowels_index_count_max = #vowels\n\
    \tlocal vowels_index_count_min = #vowels\n\tlocal vowels_index_count_max = #vowels\n\
    \tlocal vowels_index_count_min = #vowels\n\tlocal vowels_index_count_max = #vowels\n\
    \tlocal vowels_index_count_min = #vowels\n\tlocal vowels_index_count_max = #vowels\n\
    \tlocal vowels_index_count_min = #vowels\n\tlocal vowels_index_count_max = #vowels\n\
    \tlocal vowels_index_count_min = #vowels\n\tlocal vowels_index_count_max = #vowels\n\
    \tlocal vowels_index_count_min = #vowels\n\tlocal vowels_index_count_max = #vowels\n\
    \tlocal vowels_index_count_min = #vowels\n\tlocal vowels_index_count_max = #vowels\n\
    \tlocal vowels_index_count_min = #vowels\n\tlocal vowels_index_count_max = #vowels\n\
    \tlocal vowels_index_count_min = #vowels\n\tlocal vowels_index_count_max = #vowels\n\
    \tlocal vowels_index_count_min = #vowels\n\tlocal vowels_index_count_max = #vowels\n\
    \tlocal vowels_index_count_min = #vowels\n\tlocal vowels_index_count_max = #vowels\n\
    \tlocal vowels_index_count_min = #vowels\n\tlocal vowels_index_count_max = #vowels\n\
    \tlocal vowels_index_count_min = #vowels\n\tlocal vowels_index_count_max = #vowels\n\
    \tlocal vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo__ibfv3.lua:82: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpluzjfarg.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = {}\n  local vowels_index_count = 0\n  for i = 1, #word\
    \ do\n    local letter = word:sub(i,i)\n    if letter:sub(1,1) ~= letter then\n\
    \      vowels_index[letter] = true\n      vowels_index_count = vowels_index_count\
    \ + 1\n    end\n  end\n  local vowels_index_sorted = {}\n  for i = 1, vowels_index_count\
    \ do\n    table.insert(vowels_index_sorted, i)\n  end\n  table.sort(vowels_index_sorted)\n\
    \  local vowels_index_sorted_count = #vowels_index_sorted\n  local vowels_index_sorted_index\
    \ = 1\n  local vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_index]\n\
    \  local vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_index]\n\
    \  local vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_index]\n\
    \  local vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_index]\n\
    \  local vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_index]\n\
    \  local vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_index]\n\
    \  local vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_index]\n\
    \  local vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_index]\n\
    \  local vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_index]\n\
    \  local vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_index]\n\
    \  local vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_index]\n\
    \  local vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_index]\n\
    \  local vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_index]\n\
    \  local vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_index]\n\
    \  local vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_index]\n\
    \  local vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_index]\n\
    \  local vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_index]\n\
    \  local vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_index]\n\
    \  local vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_index]\n\
    \  local vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_index]\n\
    \  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo2ez50v9.lua:74: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u'}\n    local vowels_count = 0\n    local\
    \ vowels_count_max = 3\n    local vowels_count_min = 1\n    local vowels_count_max\
    \ = #vowels\n    local vowels_count_min = #vowels-1\n    local vowels_count_max\
    \ = #vowels\n    local vowels_count_min = #vowels-1\n    local vowels_count_max\
    \ = #vowels\n    local vowels_count_min = #vowels-1\n    local vowels_count_max\
    \ = #vowels\n    local vowels_count_min = #vowels-1\n    local vowels_count_max\
    \ = #vowels\n    local vowels_count_min = #vowels-1\n    local vowels_count_max\
    \ = #vowels\n    local vowels_count_min = #vowels-1\n    local vowels_count_max\
    \ = #vowels\n    local vowels_count_min = #vowels-1\n    local vowels_count_max\
    \ = #vowels\n    local vowels_count_min = #vowels-1\n    local vowels_count_max\
    \ = #vowels\n    local vowels_count_min = #vowels-1\n    local vowels_count_max\
    \ = #vowels\n    local vowels_count_min = #vowels-1\n    local vowels_count_max\
    \ = #vowels\n    local vowels_count_min = #vowels-1\n    local vowels_count_max\
    \ = #vowels\n    local vowels_count_min = #vowels-1\n    local vowels_count_max\
    \ = #vowels\n    local vowels_count_min = #vowels-1\n    local vowels_count_max\
    \ = #vowels\n    local vowels_count_min = #vowels-1\n    local vowels_count_max\
    \ = #vowels\n    local vowels_count_min = #vowels-1\n    local vowels_count_max\
    \ = #vowels\n    local vowels_count_min = #vowels-1\n    local vowels_count_max\
    \ = #vowels\n    local vowels_count_min = #vowels-1\n    local vowels_count_max\
    \ = #vowels\n    local vowels_count_min = #vowels-1\n    local vowels_count_max\
    \ = #vowels\n    local vowels_count_min = #vowels-1\n    local vowels_count_max\
    \ = #vowels\n    local vowels_count_min = #vowels-1\n    local vowels_count_max\
    \ = #vowels\n    local vowels_count_min = #vowels-1\n    local vowels_count_max\
    \ = #vowels\n    local vowels_count_min = #vowels-1\n    local vowels_count_max\
    \ = #vowels\n    local vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw1a8_x50.lua:85: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_count = {}\n  \
    \  for i = 1, #word do\n        local vowel = word:sub(i,i)\n        if vowel:sub(1,1)\
    \ ~= vowel:sub(#vowel,1) then\n            vowel_count[vowel] = vowel_count[vowel]\
    \ + 1\n        end\n    end\n    local vowel_count_sorted = {}\n    for vowel,\
    \ count in pairs(vowel_count) do\n        vowel_count_sorted[count] = vowel\n\
    \    end\n    local vowel_count_sorted = table.sort(vowel_count_sorted)\n    for\
    \ i = 1, #vowel_count_sorted do\n        if vowel_count_sorted[i] ~= vowel_count_sorted[#vowel_count_sorted]\
    \ then\n            return vowel_count_sorted[i]\n        end\n    end\n    return\
    \ ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnlwaxqfo.lua:29:\
    \ attempt to get length of local 'vowel_count_sorted' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpnlwaxqfo.lua:29: in function 'candidate'\n\t/tmp/tmpnlwaxqfo.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #word\n    local vowels_index = {}\n \
    \   for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, vowels[i])\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, vowels[i])\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, vowels[i])\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, vowels[i])\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, vowels[i])\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, vowels[i])\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, vowels[i])\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, vowels[i])\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, vowels[i])\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, vowels[i])\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, vowels[i])\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, vowels[i])\n    end\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp75h8plbg.lua:107: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count = 0\n\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcegj_fjp.lua:108: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = 0\n  \
    \  local vowels_index = {}\n    for i = 1, #word do\n        if string.sub(word,\
    \ i, i) == string.sub(word, i - 1, i) then\n            vowels_count = vowels_count\
    \ + 1\n            table.insert(vowels_index, i)\n        end\n    end\n    if\
    \ vowels_count > 1 then\n        local vowels_index = table.sort(vowels_index)\n\
    \        local vowels_index_1 = vowels_index[1]\n        local vowels_index_2\
    \ = vowels_index[#vowels_index]\n        local vowels_index_3 = vowels_index[#vowels_index\
    \ - 1]\n        if vowels_index_2 > vowels_index_1 then\n            if vowels_index_2\
    \ > vowels_index_3 then\n                return string.sub(word, vowels_index_2,\
    \ vowels_index_2)\n            else\n                return string.sub(word, vowels_index_2,\
    \ vowels_index_3)\n            end\n        else\n            if vowels_index_1\
    \ > vowels_index_3 then\n                return string.sub(word, vowels_index_1,\
    \ vowels_index_1)\n            else\n                return string.sub(word, vowels_index_1,\
    \ vowels_index_3)\n            end\n        end\n    else\n        return ''\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7bqdjfx_.lua:51:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp7bqdjfx_.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_max\
    \ = 0\n    local vowels_index_min = 0\n    local vowels_index_max_count = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_index = 0\n    local vowels_index_max_count = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_index = 0\n    local vowels_index_max_count = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_index = 0\n    local vowels_index_max_count = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp916nqli9.lua:96: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_max_min\
    \ = #vowels\n    local vowels_index_count_max_min_index = 1\n    local vowels_index_count_max_min_index_count\
    \ = 0\n    local vowels_index_count_max_min_index_count_min = 1\n    local vowels_index_count_max_min_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_min_index_count_min_index_count = 0\n\
    \    local vowels_index_count_max_min_index_count_min_index_count_min = 1\n  \
    \  local vowels_index_count_max_min_index_count_min_index_count_min_index = 1\n\
    \    local vowels_index_count_max_min_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min\
    \ = 1\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = 1\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = 1\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = 1\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = 1\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 1\n    local vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcb4pn7_y.lua:64: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdpow4a0o.lua:108: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptrs8ai21.lua:109: ''end'' expected (to close ''for'' at line
    89) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','y'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_count_2 = #vowels-1\n\tlocal vowels_count_3 = #vowels-2\n\tlocal\
    \ vowels_count_4 = #vowels-3\n\tlocal vowels_count_5 = #vowels-4\n\tlocal vowels_count_6\
    \ = #vowels-5\n\tlocal vowels_count_7 = #vowels-6\n\tlocal vowels_count_8 = #vowels-7\n\
    \tlocal vowels_count_9 = #vowels-8\n\tlocal vowels_count_10 = #vowels-9\n\tlocal\
    \ vowels_count_11 = #vowels-10\n\tlocal vowels_count_12 = #vowels-11\n\tlocal\
    \ vowels_count_13 = #vowels-12\n\tlocal vowels_count_14 = #vowels-13\n\tlocal\
    \ vowels_count_15 = #vowels-14\n\tlocal vowels_count_16 = #vowels-15\n\tlocal\
    \ vowels_count_17 = #vowels-16\n\tlocal vowels_count_18 = #vowels-17\n\tlocal\
    \ vowels_count_19 = #vowels-18\n\tlocal vowels_count_20 = #vowels-19\n\tlocal\
    \ vowels_count_21 = #vowels-20\n\tlocal vowels_count_22 = #vowels-21\n\tlocal\
    \ vowels_count_23 = #vowels-22\n\tlocal vowels_count_24 = #vowels-23\n\tlocal\
    \ vowels_count_25 = #vowels-24\n\tlocal vowels_count_26 = #vowels-25\n\tlocal\
    \ vowels_count_27 = #vowels-26\n\tlocal vowels_count_28 = #vowels-27\n\tlocal\
    \ vowels_count_29 = #vowels-28\n\tlocal vowels_count_30 = #vowels-29\n\tlocal\
    \ vowels_count_31 = #vowels-30\n\tlocal vowels_count_32 = #vowels-31\n\tlocal\
    \ vowels_count_33 = #vowels-32\n\tlocal vowels_count_34 = #vowels-33\n\tlocal\
    \ vowels_count_35 = #vowels-34\n\tlocal vowels_count_36 = #vowels-35\n\tlocal\
    \ vowels_count_37 = #vowels-36\n\tlocal vowels_count_38 = #vowels-37\n\tlocal\
    \ vowels_count_39 = #vowels-38\n\tlocal vowels_count_40 = #vowels-39\n\tlocal\
    \ vowels_count_41 = #vowels-40\n\tlocal vowels_count_42 = #vowels-41\n\tlocal\
    \ vowels_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqk2pf1uu.lua:79: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','y'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = 1\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = 1\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = 1\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_max = 1\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_max = 1\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_max = 1\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_max = 1\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_max = 1\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_max = 1\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_max = 1\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_max = 1\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_max = 1\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_max = 1\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_max = 1\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_max = 1\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_max = 1\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_max = 1\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_max = 1\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_max = 1\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_max = 1\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_max = 1\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_max = 1\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_max = 1\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_max = 1\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_max = 1\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_max = 1\n    \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpix2jk3zp.lua:92: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 0\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkvq9du_j.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','y'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7z9572e6.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaakduzj9.lua:108: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','y'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = {}\n\tlocal vowels_index_count = 0\n\tfor i = 1, #word do\n\
    \t\tlocal vowel = word:sub(i,i)\n\t\tif vowel:sub(1,1) ~= vowel then\n\t\t\tvowels_index[vowel]\
    \ = vowels_index_count\n\t\t\tvowels_index_count = vowels_index_count + 1\n\t\t\
    end\n\tend\n\tlocal vowels_index_max = #vowels_index\n\tlocal vowels_index_min\
    \ = #vowels_index\n\tfor i = 1, vowels_index_max do\n\t\tif vowels_index[i] >\
    \ vowels_index_min then\n\t\t\tvowels_index_min = i\n\t\tend\n\tend\n\tlocal vowels_index_min\
    \ = vowels_index[vowels_index_min]\n\tlocal vowels_index_max = vowels_index[vowels_index_max]\n\
    \tlocal vowels_index_mid = vowels_index_min + ((vowels_index_max - vowels_index_min)\
    \ / 2)\n\tlocal vowels_index_mid_1 = vowels_index_mid - 1\n\tlocal vowels_index_mid_2\
    \ = vowels_index_mid + 1\n\tlocal vowels_index_mid_3 = vowels_index_mid + 2\n\t\
    local vowels_index_mid_4 = vowels_index_mid + 3\n\tlocal vowels_index_mid_5 =\
    \ vowels_index_mid + 4\n\tlocal vowels_index_mid_6 = vowels_index_mid + 5\n\t\
    local vowels_index_mid_7 = vowels_index_mid + 6\n\tlocal vowels_index_mid_8 =\
    \ vowels_index_mid + 7\n\tlocal vowels_index_mid_9 = vowels_index_mid + 8\n\t\
    local vowels_index_mid_10 = vowels_index_mid + 9\n\tlocal vowels_index_mid_11\
    \ = vowels_index_mid + 10\n\tlocal vowels_index_mid_12 = vowels_index_mid + 11\n\
    \tlocal vowels_index_mid_13 = vowels_index_mid + 12\n\tlocal vowels_index_mid_14\
    \ = vowels_index_mid + 13\n\tlocal vowels_index_mid_15 = vowels_index_mid + 14\n\
    \tlocal vowels_index_mid_16 = vowels_index_mid + 15\n\tlocal vowels_index_mid_17\
    \ = vowels_index_mid + 16\n\tlocal vowels_index_mid_18 = vowels_index_mid + 17\n\
    \tlocal vowels_index_mid_19 = vowels_index_mid + 18\n\tlocal vowels_index_mid_20\
    \ = vowels_index_mid + 19\n\tlocal vowels_index_mid_21 = vowels_index_mid + 20\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpeshvq7pk.lua:77: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word - 1\n\tlocal vowels_index_count_min = #word - 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = #word\n\tlocal vowels_index_count_min_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index = #word\n\tlocal vowels_index_count_min_index_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index = 1\n\tlocal vowels_index_count_min_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index = 1\n\tlocal vowels_index_count_min_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index = 1\n\tlocal vowels_index_count_min_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index = 1\n\tlocal vowels_index_count_min_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index = 1\n\tlocal vowels_index_count_min_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index = 1\n\tlocal vowels_index_count_min_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index = 1\n\tlocal vowels_index_count_min_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index = 1\n\tlocal vowels_index_count_min_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index = 1\n\tlocal vowels_index_count_min_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index = 1\n\tlocal vowels_index_count_min_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index = 1\n\tlocal vowels_index_count_min_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index = 1\n\tlocal vowels_index_count_min_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index = 1\n\tlocal vowels_index_count_min_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index = 1\n\tlocal vowels_index_count_min_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index = 1\n\tlocal vowels_index_count_min_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index = 1\n\tlocal vowels_index_count_min_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index = 1\n\tlocal vowels_index_count_min_index_index\
    \ = 1\n\tlocal vowels_index_count_max_index_index = 1\n\tlocal vowels_index_count_min_index_index\
    \ = 1\n\tlocal \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz4ntzzh2.lua:83: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = 0\n\tlocal\
    \ vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\
    \tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\
    \tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\
    \tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\
    \tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\
    \tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\
    \tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\
    \tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\
    \tlocal vowels_index_count_max = 0\n\tlocal \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp73fq96ub.lua:93: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ vowels_count = 0\n    local vowels_index = 0\n    local vowels_index2 = 0\n\
    \    local vowels_index3 = 0\n    local vowels_index4 = 0\n    local vowels_index5\
    \ = 0\n    local vowels_index6 = 0\n    local vowels_index7 = 0\n    local vowels_index8\
    \ = 0\n    local vowels_index9 = 0\n    local vowels_index10 = 0\n    local vowels_index11\
    \ = 0\n    local vowels_index12 = 0\n    local vowels_index13 = 0\n    local vowels_index14\
    \ = 0\n    local vowels_index15 = 0\n    local vowels_index16 = 0\n    local vowels_index17\
    \ = 0\n    local vowels_index18 = 0\n    local vowels_index19 = 0\n    local vowels_index20\
    \ = 0\n    local vowels_index21 = 0\n    local vowels_index22 = 0\n    local vowels_index23\
    \ = 0\n    local vowels_index24 = 0\n    local vowels_index25 = 0\n    local vowels_index26\
    \ = 0\n    local vowels_index27 = 0\n    local vowels_index28 = 0\n    local vowels_index29\
    \ = 0\n    local vowels_index30 = 0\n    local vowels_index31 = 0\n    local vowels_index32\
    \ = 0\n    local vowels_index33 = 0\n    local vowels_index34 = 0\n    local vowels_index35\
    \ = 0\n    local vowels_index36 = 0\n    local vowels_index37 = 0\n    local vowels_index38\
    \ = 0\n    local vowels_index39 = 0\n    local vowels_index40 = 0\n    local vowels_index41\
    \ = 0\n    local vowels_index42 = 0\n    local vowels_index43 = 0\n    local vowels_index44\
    \ = 0\n    local vowels_index45 = 0\n    local vowels_index46 = 0\n    local vowels_index47\
    \ = 0\n    local vowels_index48 = 0\n    local vowels_index49 = 0\n    local vowels_index50\
    \ = 0\n    local vowels_index51 = 0\n    local vowels_index52 = 0\n    local vowels_index53\
    \ = 0\n    local vowels_index54 = 0\n    local vowels_index55 = 0\n    local vowels_index56\
    \ = 0\n    local vowels_index57 = 0\n    local vowels_index58 = 0\n    local vowels_index59\
    \ = 0\n    local vowels_index60 = 0\n    local vowels_index61 = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8tpezm0z.lua:98: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','y'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ vowels[i])\n    end\n    local vowels_count = #word\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, word[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9omwdpok.lua:102: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = 1\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplv9hq2aj.lua:68: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count2 = 0\n    local vowels_index_count3 = 0\n    local\
    \ vowels_index_count4 = 0\n    local vowels_index_count5 = 0\n    local vowels_index_count6\
    \ = 0\n    local vowels_index_count7 = 0\n    local vowels_index_count8 = 0\n\
    \    local vowels_index_count9 = 0\n    local vowels_index_count10 = 0\n    local\
    \ vowels_index_count11 = 0\n    local vowels_index_count12 = 0\n    local vowels_index_count13\
    \ = 0\n    local vowels_index_count14 = 0\n    local vowels_index_count15 = 0\n\
    \    local vowels_index_count16 = 0\n    local vowels_index_count17 = 0\n    local\
    \ vowels_index_count18 = 0\n    local vowels_index_count19 = 0\n    local vowels_index_count20\
    \ = 0\n    local vowels_index_count21 = 0\n    local vowels_index_count22 = 0\n\
    \    local vowels_index_count23 = 0\n    local vowels_index_count24 = 0\n    local\
    \ vowels_index_count25 = 0\n    local vowels_index_count26 = 0\n    local vowels_index_count27\
    \ = 0\n    local vowels_index_count28 = 0\n    local vowels_index_count29 = 0\n\
    \    local vowels_index_count30 = 0\n    local vowels_index_count31 = 0\n    local\
    \ vowels_index_count32 = 0\n    local vowels_index_count33 = 0\n    local vowels_index_count34\
    \ = 0\n    local vowels_index_count35 = 0\n    local vowels_index_count36 = 0\n\
    \    local vowels_index_count37 = 0\n    local vowels_index_count38 = 0\n    local\
    \ vowels_index_count39 = 0\n    local vowels_index_count40 = 0\n    local vowels_index_count41\
    \ = 0\n    local vowels_index_count42 = 0\n    local vowels_index_count43 = 0\n\
    \    local vowels_index_count44 = 0\n    local vowels_index_count45 = 0\n    local\
    \ vowels_index_count46 = 0\n    local vowels_index_count47 = 0\n    local vowels_index_count48\
    \ = 0\n    local vowels_index_count49 = 0\n    local vowels_index_count50 = 0\n\
    \    local vowels_index_count51 = 0\n    local vowels_index_count52 = 0\n    local\
    \ vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkxave18s.lua:91: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count2\
    \ = 0\n  local vowels_index_count3 = 0\n  local vowels_index_count4 = 0\n  local\
    \ vowels_index_count5 = 0\n  local vowels_index_count6 = 0\n  local vowels_index_count7\
    \ = 0\n  local vowels_index_count8 = 0\n  local vowels_index_count9 = 0\n  local\
    \ vowels_index_count10 = 0\n  local vowels_index_count11 = 0\n  local vowels_index_count12\
    \ = 0\n  local vowels_index_count13 = 0\n  local vowels_index_count14 = 0\n  local\
    \ vowels_index_count15 = 0\n  local vowels_index_count16 = 0\n  local vowels_index_count17\
    \ = 0\n  local vowels_index_count18 = 0\n  local vowels_index_count19 = 0\n  local\
    \ vowels_index_count20 = 0\n  local vowels_index_count21 = 0\n  local vowels_index_count22\
    \ = 0\n  local vowels_index_count23 = 0\n  local vowels_index_count24 = 0\n  local\
    \ vowels_index_count25 = 0\n  local vowels_index_count26 = 0\n  local vowels_index_count27\
    \ = 0\n  local vowels_index_count28 = 0\n  local vowels_index_count29 = 0\n  local\
    \ vowels_index_count30 = 0\n  local vowels_index_count31 = 0\n  local vowels_index_count32\
    \ = 0\n  local vowels_index_count33 = 0\n  local vowels_index_count34 = 0\n  local\
    \ vowels_index_count35 = 0\n  local vowels_index_count36 = 0\n  local vowels_index_count37\
    \ = 0\n  local vowels_index_count38 = 0\n  local vowels_index_count39 = 0\n  local\
    \ vowels_index_count40 = 0\n  local vowels_index_count41 = 0\n  local vowels_index_count42\
    \ = 0\n  local vowels_index_count43 = 0\n  local vowels_index_count44 = 0\n  local\
    \ vowels_index_count45 = 0\n  local vowels_index_count46 = 0\n  local vowels_index_count47\
    \ = 0\n  local vowels_index_count48 = 0\n  local vowels_index_count49 = 0\n  local\
    \ vowels_index_count50 = 0\n  local vowels_index_count51 = 0\n  local vowels_index_count52\
    \ = 0\n  local vowels_index_count53 = 0\n  local vowels_index_count54 = 0\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmfna4lr_.lua:92: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowel_met_count = 0\n    local vowel_met_index = 0\n    local vowel_met_index2\
    \ = 0\n    local vowel_met_index3 = 0\n    local vowel_met_index4 = 0\n    local\
    \ vowel_met_index5 = 0\n    local vowel_met_index6 = 0\n    local vowel_met_index7\
    \ = 0\n    local vowel_met_index8 = 0\n    local vowel_met_index9 = 0\n    local\
    \ vowel_met_index10 = 0\n    local vowel_met_index11 = 0\n    local vowel_met_index12\
    \ = 0\n    local vowel_met_index13 = 0\n    local vowel_met_index14 = 0\n    local\
    \ vowel_met_index15 = 0\n    local vowel_met_index16 = 0\n    local vowel_met_index17\
    \ = 0\n    local vowel_met_index18 = 0\n    local vowel_met_index19 = 0\n    local\
    \ vowel_met_index20 = 0\n    local vowel_met_index21 = 0\n    local vowel_met_index22\
    \ = 0\n    local vowel_met_index23 = 0\n    local vowel_met_index24 = 0\n    local\
    \ vowel_met_index25 = 0\n    local vowel_met_index26 = 0\n    local vowel_met_index27\
    \ = 0\n    local vowel_met_index28 = 0\n    local vowel_met_index29 = 0\n    local\
    \ vowel_met_index30 = 0\n    local vowel_met_index31 = 0\n    local vowel_met_index32\
    \ = 0\n    local vowel_met_index33 = 0\n    local vowel_met_index34 = 0\n    local\
    \ vowel_met_index35 = 0\n    local vowel_met_index36 = 0\n    local vowel_met_index37\
    \ = 0\n    local vowel_met_index38 = 0\n    local vowel_met_index39 = 0\n    local\
    \ vowel_met_index40 = 0\n    local vowel_met_index41 = 0\n    local vowel_met_index42\
    \ = 0\n    local vowel_met_index43 = 0\n    local vowel_met_index44 = 0\n    local\
    \ vowel_met_index45 = 0\n    local vowel_met_index46 = 0\n    local vowel_met_index47\
    \ = 0\n    local vowel_met_index48 = 0\n    local vowel\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpklqjipm2.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowel_found = false\n    local vowel_position = -1\n    local vowel_position_count\
    \ = 0\n    local vowel_position_count2 = 0\n    local vowel_position_count3 =\
    \ 0\n    local vowel_position_count4 = 0\n    local vowel_position_count5 = 0\n\
    \    local vowel_position_count6 = 0\n    local vowel_position_count7 = 0\n  \
    \  local vowel_position_count8 = 0\n    local vowel_position_count9 = 0\n    local\
    \ vowel_position_count10 = 0\n    local vowel_position_count11 = 0\n    local\
    \ vowel_position_count12 = 0\n    local vowel_position_count13 = 0\n    local\
    \ vowel_position_count14 = 0\n    local vowel_position_count15 = 0\n    local\
    \ vowel_position_count16 = 0\n    local vowel_position_count17 = 0\n    local\
    \ vowel_position_count18 = 0\n    local vowel_position_count19 = 0\n    local\
    \ vowel_position_count20 = 0\n    local vowel_position_count21 = 0\n    local\
    \ vowel_position_count22 = 0\n    local vowel_position_count23 = 0\n    local\
    \ vowel_position_count24 = 0\n    local vowel_position_count25 = 0\n    local\
    \ vowel_position_count26 = 0\n    local vowel_position_count27 = 0\n    local\
    \ vowel_position_count28 = 0\n    local vowel_position_count29 = 0\n    local\
    \ vowel_position_count30 = 0\n    local vowel_position_count31 = 0\n    local\
    \ vowel_position_count32 = 0\n    local vowel_position_count33 = 0\n    local\
    \ vowel_position_count34 = 0\n    local vowel_position_count35 = 0\n    local\
    \ vowel_position_count36 = 0\n    local vowel_position_count37 = 0\n    local\
    \ vowel_position_count38 = 0\n    local vowel_position_count39 = 0\n    local\
    \ vowel_position_count40 = 0\n    local vowel_position_count41 = 0\n    local\
    \ vowel_position_count42 = 0\n    local vowel_position_count43 = 0\n    local\
    \ vowel_position_count44 = 0\n    local vowel_position_count45 = 0\n    local\
    \ vowel_position_count46 = 0\n    local vowel_position_count47 = 0\n    local\
    \ vowel_position_count48 = 0\n    local vowel_position_count49 = 0\n    local\
    \ vowel_position_count50 = 0\n    local vowel_position_count51 = 0\n    local\
    \ vowel_position_count52 = 0\n    local vowel_position_count53 = 0\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjrbnu_si.lua:93: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n\tlocal vowels_count = #vowels\n\
    \tlocal vowels_index = 1\n\tlocal vowels_index_count = 1\n\tlocal vowels_index_count_2\
    \ = 1\n\tlocal vowels_index_count_3 = 1\n\tlocal vowels_index_count_4 = 1\n\t\
    local vowels_index_count_5 = 1\n\tlocal vowels_index_count_6 = 1\n\tlocal vowels_index_count_7\
    \ = 1\n\tlocal vowels_index_count_8 = 1\n\tlocal vowels_index_count_9 = 1\n\t\
    local vowels_index_count_10 = 1\n\tlocal vowels_index_count_11 = 1\n\tlocal vowels_index_count_12\
    \ = 1\n\tlocal vowels_index_count_13 = 1\n\tlocal vowels_index_count_14 = 1\n\t\
    local vowels_index_count_15 = 1\n\tlocal vowels_index_count_16 = 1\n\tlocal vowels_index_count_17\
    \ = 1\n\tlocal vowels_index_count_18 = 1\n\tlocal vowels_index_count_19 = 1\n\t\
    local vowels_index_count_20 = 1\n\tlocal vowels_index_count_21 = 1\n\tlocal vowels_index_count_22\
    \ = 1\n\tlocal vowels_index_count_23 = 1\n\tlocal vowels_index_count_24 = 1\n\t\
    local vowels_index_count_25 = 1\n\tlocal vowels_index_count_26 = 1\n\tlocal vowels_index_count_27\
    \ = 1\n\tlocal vowels_index_count_28 = 1\n\tlocal vowels_index_count_29 = 1\n\t\
    local vowels_index_count_30 = 1\n\tlocal vowels_index_count_31 = 1\n\tlocal vowels_index_count_32\
    \ = 1\n\tlocal vowels_index_count_33 = 1\n\tlocal vowels_index_count_34 = 1\n\t\
    local vowels_index_count_35 = 1\n\tlocal vowels_index_count_36 = 1\n\tlocal vowels_index_count_37\
    \ = 1\n\tlocal vowels_index_count_38 = 1\n\tlocal vowels_index_count_39 = 1\n\t\
    local vowels_index_count_40 = 1\n\tlocal vowels_index_count_41 = 1\n\tlocal vowels_index_count_42\
    \ = 1\n\tlocal vowels_index_count_43 = 1\n\tlocal vowels_index_count_44 = 1\n\t\
    local vowels_index_count_45 = 1\n\tlocal vowels_index_count_46 = 1\n\tlocal vowels_index_count_47\
    \ = 1\n\tlocal vowels_index_count_48 = 1\n\tlocal vowels_index_count_49 = 1\n\t\
    local vowels_index_count_50 = 1\n\tlocal vowels_index_count_51 = 1\n\tlocal vowels_index_count_52\
    \ = 1\n\tlocal vowels_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxx1sk2u9.lua:91: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpt3ffm5jg.lua:86: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n  local\
    \ vowels_count = #vowels\n  local vowels_index = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count_minus_one = 0\n  local vowels_index_count_minus_two\
    \ = 0\n  local vowels_index_count_minus_three = 0\n  local vowels_index_count_minus_four\
    \ = 0\n  local vowels_index_count_minus_five = 0\n  local vowels_index_count_minus_six\
    \ = 0\n  local vowels_index_count_minus_seven = 0\n  local vowels_index_count_minus_eight\
    \ = 0\n  local vowels_index_count_minus_nine = 0\n  local vowels_index_count_minus_ten\
    \ = 0\n  local vowels_index_count_minus_eleven = 0\n  local vowels_index_count_minus_twelve\
    \ = 0\n  local vowels_index_count_minus_thirteen = 0\n  local vowels_index_count_minus_fourteen\
    \ = 0\n  local vowels_index_count_minus_fifteen = 0\n  local vowels_index_count_minus_sixteen\
    \ = 0\n  local vowels_index_count_minus_seventeen = 0\n  local vowels_index_count_minus_eighteen\
    \ = 0\n  local vowels_index_count_minus_nineteen = 0\n  local vowels_index_count_minus_twenty\
    \ = 0\n  local vowels_index_count_minus_thirty = 0\n  local vowels_index_count_minus_forty\
    \ = 0\n  local vowels_index_count_minus_fifty = 0\n  local vowels_index_count_minus_sixty\
    \ = 0\n  local vowels_index_count_minus_seventy = 0\n  local vowels_index_count_minus_eighty\
    \ = 0\n  local vowels_index_count_minus_ninety = 0\n  local vowels_index_count_minus_hundred\
    \ = 0\n  local vowels_index_count_minus_thousand = 0\n  local vowels_index_count_minus_million\
    \ = 0\n  local vowels_index_count_minus_billion = 0\n  local vowels_index_count_minus_trillion\
    \ = 0\n  local vowels_index_count_minus_quadrillion = 0\n  local vowels_index_count_minus_quintillion\
    \ = 0\n  local vowels_index_count_minus_sextillion = 0\n  local vowels_index_count_minus_septillion\
    \ = 0\n  local vowels_index_count_minus_octillion = 0\n  local vowels_index_count_minus_nonilli\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0alw07e8.lua:77: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u'}\n\tlocal vowels_count = #vowels\n\tlocal\
    \ vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_max =\
    \ 0\n\tlocal vowels_index_min = 0\n\tlocal vowels_index_min_count = 0\n\tlocal\
    \ vowels_index_max_count = 0\n\tlocal vowels_index_max_count = 0\n\tlocal vowels_index_min_count\
    \ = 0\n\tlocal vowels_index_max_count = 0\n\tlocal vowels_index_min_count = 0\n\
    \tlocal vowels_index_max_count = 0\n\tlocal vowels_index_min_count = 0\n\tlocal\
    \ vowels_index_max_count = 0\n\tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_count\
    \ = 0\n\tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_count = 0\n\
    \tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_count = 0\n\tlocal\
    \ vowels_index_min_count = 0\n\tlocal vowels_index_max_count = 0\n\tlocal vowels_index_min_count\
    \ = 0\n\tlocal vowels_index_max_count = 0\n\tlocal vowels_index_min_count = 0\n\
    \tlocal vowels_index_max_count = 0\n\tlocal vowels_index_min_count = 0\n\tlocal\
    \ vowels_index_max_count = 0\n\tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_count\
    \ = 0\n\tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_count = 0\n\
    \tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_count = 0\n\tlocal\
    \ vowels_index_min_count = 0\n\tlocal vowels_index_max_count = 0\n\tlocal vowels_index_min_count\
    \ = 0\n\tlocal vowels_index_max_count = 0\n\tlocal vowels_index_min_count = 0\n\
    \tlocal vowels_index_max_count = 0\n\tlocal vowels_index_min_count = 0\n\tlocal\
    \ vowels_index_max_count = 0\n\tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_count\
    \ = 0\n\tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_count = 0\n\
    \tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_count = 0\n\tlocal\
    \ vowels_index_min_count = 0\n\tlocal vowels_index_max_count = 0\n\tlocal vowels_index_min_count\
    \ = 0\n\tlocal vowels_index_max_count = 0\n\tlocal vowels_index_min_count = 0\n\
    \tlocal vowels_index_max_count = 0\n\tlocal vowels_index_min_count = 0\n\tlocal\
    \ vowels_index_max_count = 0\n\tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_count\
    \ = 0\n\tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_count = 0\n\
    \tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_count = 0\n\tlocal\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp84ofo8nr.lua:99: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 1\n    local vowels_index_count_min\
    \ = math.min(#word, vowels_index)\n    local vowels_index_count_max = math.max(#word,\
    \ vowels_index)\n    local vowels_index_count_min = math.min(#word, vowels_index)\n\
    \    local vowels_index_count_max = math.max(#word, vowels_index)\n    local vowels_index_count_min\
    \ = math.min(#word, vowels_index)\n    local vowels_index_count_max = math.max(#word,\
    \ vowels_index)\n    local vowels_index_count_min = math.min(#word, vowels_index)\n\
    \    local vowels_index_count_max = math.max(#word, vowels_index)\n    local vowels_index_count_min\
    \ = math.min(#word, vowels_index)\n    local vowels_index_count_max = math.max(#word,\
    \ vowels_index)\n    local vowels_index_count_min = math.min(#word, vowels_index)\n\
    \    local vowels_index_count_max = math.max(#word, vowels_index)\n    local vowels_index_count_min\
    \ = math.min(#word, vowels_index)\n    local vowels_index_count_max = math.max(#word,\
    \ vowels_index)\n    local vowels_index_count_min = math.min(#word, vowels_index)\n\
    \    local vowels_index_count_max = math.max(#word, vowels_index)\n    local vowels_index_count_min\
    \ = math.min(#word, vowels_index)\n    local vowels_index_count_max = math.max(#word,\
    \ vowels_index)\n    local vowels_index_count_min = math.min(#word, vowels_index)\n\
    \    local vowels_index_count_max = math.max(#word, vowels_index)\n    local vowels_index_count_min\
    \ = math.min(#word, vowels_index)\n    local vowels_index_count_max = math.max(#word,\
    \ vowels_index)\n    local vowels_index_count_min = math.min(#word, vowels_index)\n\
    \    local vowels_index_count_max = math.max(#word, vowels_index)\n    local vowels_index_count_min\
    \ = math.min(#word, vowels_index)\n    local vowels_index_count_max = math.max(#word,\
    \ vowels_index)\n    local vowels_index_count_min = math.min(#word, vowels_index)\n\
    \    local vowels_index_count_max = math.max(#word, vowels_index)\n    local vowels_index_count_min\
    \ = math.min(#word, vowels_index)\n    local vowels_index_count_max = math.max(#word,\
    \ vowels_index)\n    local vowels_index_count_min = math.min(#word, vowels_index)\n\
    \    local vowels_index_count_max = math.max(#\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbnqnezdp.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = 1\n  local vowels_index_count = 1\n  local\
    \ vowels_index_count_2 = 1\n  local vowels_index_count_3 = 1\n  local vowels_index_count_4\
    \ = 1\n  local vowels_index_count_5 = 1\n  local vowels_index_count_6 = 1\n  local\
    \ vowels_index_count_7 = 1\n  local vowels_index_count_8 = 1\n  local vowels_index_count_9\
    \ = 1\n  local vowels_index_count_10 = 1\n  local vowels_index_count_11 = 1\n\
    \  local vowels_index_count_12 = 1\n  local vowels_index_count_13 = 1\n  local\
    \ vowels_index_count_14 = 1\n  local vowels_index_count_15 = 1\n  local vowels_index_count_16\
    \ = 1\n  local vowels_index_count_17 = 1\n  local vowels_index_count_18 = 1\n\
    \  local vowels_index_count_19 = 1\n  local vowels_index_count_20 = 1\n  local\
    \ vowels_index_count_21 = 1\n  local vowels_index_count_22 = 1\n  local vowels_index_count_23\
    \ = 1\n  local vowels_index_count_24 = 1\n  local vowels_index_count_25 = 1\n\
    \  local vowels_index_count_26 = 1\n  local vowels_index_count_27 = 1\n  local\
    \ vowels_index_count_28 = 1\n  local vowels_index_count_29 = 1\n  local vowels_index_count_30\
    \ = 1\n  local vowels_index_count_31 = 1\n  local vowels_index_count_32 = 1\n\
    \  local vowels_index_count_33 = 1\n  local vowels_index_count_34 = 1\n  local\
    \ vowels_index_count_35 = 1\n  local vowels_index_count_36 = 1\n  local vowels_index_count_37\
    \ = 1\n  local vowels_index_count_38 = 1\n  local vowels_index_count_39 = 1\n\
    \  local vowels_index_count_40 = 1\n  local vowels_index_count_41 = 1\n  local\
    \ vowels_index_count_42 = 1\n  local vowels_index_count_43 = 1\n  local vowels_index_count_44\
    \ = 1\n  local vowels_index_count_45 = 1\n  local vowels_index_count_46 = 1\n\
    \  local vowels_index_count_47 = 1\n  local vowels_index_count_48 = 1\n  local\
    \ vowels_index_count_49 = 1\n  local vowels_index_count_50 = 1\n  local vowels_index_count_51\
    \ = 1\n  local vowels_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_frqhofl.lua:90: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptrs8ai21.lua:109: ''end'' expected (to close ''for'' at line
    89) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = 0\n    local vowels_index_count_max_min\
    \ = 0\n    local vowels_index_count_max_min_index = 0\n    local vowels_index_count_max_min_index_index\
    \ = 0\n    local vowels_index_count_max_min_index_index = 0\n    local vowels_index_count_max_min_index_index\
    \ = 0\n    local vowels_index_count_max_min_index_index = 0\n    local vowels_index_count_max_min_index_index\
    \ = 0\n    local vowels_index_count_max_min_index_index = 0\n    local vowels_index_count_max_min_index_index\
    \ = 0\n    local vowels_index_count_max_min_index_index = 0\n    local vowels_index_count_max_min_index_index\
    \ = 0\n    local vowels_index_count_max_min_index_index = 0\n    local vowels_index_count_max_min_index_index\
    \ = 0\n    local vowels_index_count_max_min_index_index = 0\n    local vowels_index_count_max_min_index_index\
    \ = 0\n    local vowels_index_count_max_min_index_index = 0\n    local vowels_index_count_max_min_index_index\
    \ = 0\n    local vowels_index_count_max_min_index_index = 0\n    local vowels_index_count_max_min_index_index\
    \ = 0\n    local vowels_index_count_max_min_index_index = 0\n    local vowels_index_count_max_min_index_index\
    \ = 0\n    local vowels_index_count_max_min_index_index = 0\n    local vowels_index_count_max_min_index_index\
    \ = 0\n    local vowels_index_count_max_min_index_index = 0\n    local vowels_index_count_max_min_index_index\
    \ = 0\n    local vowels_index_count_max_min_index_index = 0\n    local vowels_index_count_max_min_index_index\
    \ = 0\n    local vowels_index_count_max_min_index_index = 0\n    local vowels_index_count_max_min_index_index\
    \ = 0\n    local vowels_index_count_max_min_index_index = 0\n    local vowels_index_count_max_min_index_index\
    \ = 0\n    local vowels_index_count_max_min_index_index = 0\n    local vowels_index_count_max_min_index_index\
    \ = 0\n    local vowels_index_count_max_min_index_index = 0\n    local vowels_index_count_max_min_index_index\
    \ = 0\n    local vowels_index_count_max_min_index_index = 0\n    local vowels_index_count_max_min_index_index\
    \ = 0\n    local vowels_index_count_max_min_index_index = 0\n    local vowels_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj_wry7ku.lua:80: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = #word\n    local vowels_index2 = #word\n    local vowels_index3\
    \ = #word\n    local vowels_index4 = #word\n    local vowels_index5 = #word\n\
    \    local vowels_index6 = #word\n    local vowels_index7 = #word\n    local vowels_index8\
    \ = #word\n    local vowels_index9 = #word\n    local vowels_index10 = #word\n\
    \    local vowels_index11 = #word\n    local vowels_index12 = #word\n    local\
    \ vowels_index13 = #word\n    local vowels_index14 = #word\n    local vowels_index15\
    \ = #word\n    local vowels_index16 = #word\n    local vowels_index17 = #word\n\
    \    local vowels_index18 = #word\n    local vowels_index19 = #word\n    local\
    \ vowels_index20 = #word\n    local vowels_index21 = #word\n    local vowels_index22\
    \ = #word\n    local vowels_index23 = #word\n    local vowels_index24 = #word\n\
    \    local vowels_index25 = #word\n    local vowels_index26 = #word\n    local\
    \ vowels_index27 = #word\n    local vowels_index28 = #word\n    local vowels_index29\
    \ = #word\n    local vowels_index30 = #word\n    local vowels_index31 = #word\n\
    \    local vowels_index32 = #word\n    local vowels_index33 = #word\n    local\
    \ vowels_index34 = #word\n    local vowels_index35 = #word\n    local vowels_index36\
    \ = #word\n    local vowels_index37 = #word\n    local vowels_index38 = #word\n\
    \    local vowels_index39 = #word\n    local vowels_index40 = #word\n    local\
    \ vowels_index41 = #word\n    local vowels_index42 = #word\n    local vowels_index43\
    \ = #word\n    local vowels_index44 = #word\n    local vowels_index45 = #word\n\
    \    local vowels_index46 = #word\n    local vowels_index47 = #word\n    local\
    \ vowels_index48 = #word\n    local vowels_index49 = #word\n    local vowels_index50\
    \ = #word\n    local vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpoz4b2ia7.lua:88: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','y'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjrk6nysb.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  local\
    \ vowels_index = 0\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_min_index\
    \ = 0\n  local vowels_index_count_max_index = 0\n  local vowels_index_count_max_index_count\
    \ = 0\n  local vowels_index_count_max_index_count_min = 0\n  local vowels_index_count_max_index_count_min_index\
    \ = 0\n  local vowels_index_count_max_index_count_min_index_count = 0\n  local\
    \ vowels_index_count_max_index_count_min_index_count_max = 0\n  local vowels_index_count_max_index_count_min_index_count_max_index\
    \ = 0\n  local vowels_index_count_max_index_count_min_index_count_max_index_count\
    \ = 0\n  local vowels_index_count_max_index_count_min_index_count_max_index_count_min\
    \ = 0\n  local vowels_index_count_max_index_count_min_index_count_max_index_count_min_index\
    \ = 0\n  local vowels_index_count_max_index_count_min_index_count_max_index_count_min_index_count\
    \ = 0\n  local vowels_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max\
    \ = 0\n  local vowels_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index\
    \ = 0\n  local vowels_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index_count\
    \ = 0\n  local vowels_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index_count_min\
    \ = 0\n  local vowels_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index_count_min_index\
    \ = 0\n  local vowels_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max\
    \ = 0\n  local vowels_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index\
    \ = 0\n  local vowels_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index_count\
    \ = 0\n  local vowels_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index_count_min\
    \ = 0\n  local vowels_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index_count_min_index\
    \ = 0\n  local vowels_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max_index_count_min_index_count_max\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu7y9dihb.lua:64: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = #word\n    local vowels_index_count_min = 1\n\
    \    local vowels_index_count_min = #word\n    local vowels_index_count_max =\
    \ #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp23mrpy0e.lua:86: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp07s8_cyb.lua:108: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = 1\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = 1\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvrc0qvwn.lua:86: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n  local\
    \ vowels_count = #vowels\n  local vowels_index = #word\n  local vowels_index2\
    \ = #word\n  local vowels_index3 = #word\n  local vowels_index4 = #word\n  local\
    \ vowels_index5 = #word\n  local vowels_index6 = #word\n  local vowels_index7\
    \ = #word\n  local vowels_index8 = #word\n  local vowels_index9 = #word\n  local\
    \ vowels_index10 = #word\n  local vowels_index11 = #word\n  local vowels_index12\
    \ = #word\n  local vowels_index13 = #word\n  local vowels_index14 = #word\n  local\
    \ vowels_index15 = #word\n  local vowels_index16 = #word\n  local vowels_index17\
    \ = #word\n  local vowels_index18 = #word\n  local vowels_index19 = #word\n  local\
    \ vowels_index20 = #word\n  local vowels_index21 = #word\n  local vowels_index22\
    \ = #word\n  local vowels_index23 = #word\n  local vowels_index24 = #word\n  local\
    \ vowels_index25 = #word\n  local vowels_index26 = #word\n  local vowels_index27\
    \ = #word\n  local vowels_index28 = #word\n  local vowels_index29 = #word\n  local\
    \ vowels_index30 = #word\n  local vowels_index31 = #word\n  local vowels_index32\
    \ = #word\n  local vowels_index33 = #word\n  local vowels_index34 = #word\n  local\
    \ vowels_index35 = #word\n  local vowels_index36 = #word\n  local vowels_index37\
    \ = #word\n  local vowels_index38 = #word\n  local vowels_index39 = #word\n  local\
    \ vowels_index40 = #word\n  local vowels_index41 = #word\n  local vowels_index42\
    \ = #word\n  local vowels_index43 = #word\n  local vowels_index44 = #word\n  local\
    \ vowels_index45 = #word\n  local vowels_index46 = #word\n  local vowels_index47\
    \ = #word\n  local vowels_index48 = #word\n  local vowels_index49 = #word\n  local\
    \ vowels_index50\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptzqjzj_5.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  local\
    \ vowels_index = 0\n  local vowels_index2 = 0\n  local vowels_index3 = 0\n  local\
    \ vowels_index4 = 0\n  local vowels_index5 = 0\n  local vowels_index6 = 0\n  local\
    \ vowels_index7 = 0\n  local vowels_index8 = 0\n  local vowels_index9 = 0\n  local\
    \ vowels_index10 = 0\n  local vowels_index11 = 0\n  local vowels_index12 = 0\n\
    \  local vowels_index13 = 0\n  local vowels_index14 = 0\n  local vowels_index15\
    \ = 0\n  local vowels_index16 = 0\n  local vowels_index17 = 0\n  local vowels_index18\
    \ = 0\n  local vowels_index19 = 0\n  local vowels_index20 = 0\n  local vowels_index21\
    \ = 0\n  local vowels_index22 = 0\n  local vowels_index23 = 0\n  local vowels_index24\
    \ = 0\n  local vowels_index25 = 0\n  local vowels_index26 = 0\n  local vowels_index27\
    \ = 0\n  local vowels_index28 = 0\n  local vowels_index29 = 0\n  local vowels_index30\
    \ = 0\n  local vowels_index31 = 0\n  local vowels_index32 = 0\n  local vowels_index33\
    \ = 0\n  local vowels_index34 = 0\n  local vowels_index35 = 0\n  local vowels_index36\
    \ = 0\n  local vowels_index37 = 0\n  local vowels_index38 = 0\n  local vowels_index39\
    \ = 0\n  local vowels_index40 = 0\n  local vowels_index41 = 0\n  local vowels_index42\
    \ = 0\n  local vowels_index43 = 0\n  local vowels_index44 = 0\n  local vowels_index45\
    \ = 0\n  local vowels_index46 = 0\n  local vowels_index47 = 0\n  local vowels_index48\
    \ = 0\n  local vowels_index49 = 0\n  local vowels_index50 = 0\n  local vowels_index51\
    \ = 0\n  local vowels_index52 = 0\n  local vowels_index53 = 0\n  local vowels_index54\
    \ = 0\n  local vowels_index55 = 0\n  local vowels_index56 = 0\n  local vowels_index57\
    \ = 0\n  local vowels_index58 = 0\n  local vowels_index59 = 0\n  local vowels_index60\
    \ = 0\n  local vowels_index61 = 0\n  local vowels_index62\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3wsg6jn2.lua:99: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\
    \tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal\
    \ vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count\
    \ do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal vowels_count = #vowels_index\n\
    \tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\
    \tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal\
    \ vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count\
    \ do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal vowels_count = #vowels_index\n\
    \tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\
    \tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal\
    \ vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count\
    \ do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal vowels_count = #vowels_index\n\
    \tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\
    \tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal\
    \ vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count\
    \ do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal vowels_count = #vowels_index\n\
    \tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\
    \tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index, i)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpodo4tv15.lua:105: ''end'' expected (to close ''for'' at line
    84) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_min\
    \ = 0\n\tlocal vowels_index_count_max_min_index = 0\n\tlocal vowels_index_count_max_min_index2\
    \ = 0\n\tlocal vowels_index_count_max_min_index3 = 0\n\tlocal vowels_index_count_max_min_index4\
    \ = 0\n\tlocal vowels_index_count_max_min_index5 = 0\n\tlocal vowels_index_count_max_min_index6\
    \ = 0\n\tlocal vowels_index_count_max_min_index7 = 0\n\tlocal vowels_index_count_max_min_index8\
    \ = 0\n\tlocal vowels_index_count_max_min_index9 = 0\n\tlocal vowels_index_count_max_min_index10\
    \ = 0\n\tlocal vowels_index_count_max_min_index11 = 0\n\tlocal vowels_index_count_max_min_index12\
    \ = 0\n\tlocal vowels_index_count_max_min_index13 = 0\n\tlocal vowels_index_count_max_min_index14\
    \ = 0\n\tlocal vowels_index_count_max_min_index15 = 0\n\tlocal vowels_index_count_max_min_index16\
    \ = 0\n\tlocal vowels_index_count_max_min_index17 = 0\n\tlocal vowels_index_count_max_min_index18\
    \ = 0\n\tlocal vowels_index_count_max_min_index19 = 0\n\tlocal vowels_index_count_max_min_index20\
    \ = 0\n\tlocal vowels_index_count_max_min_index21 = 0\n\tlocal vowels_index_count_max_min_index22\
    \ = 0\n\tlocal vowels_index_count_max_min_index23 = 0\n\tlocal vowels_index_count_max_min_index24\
    \ = 0\n\tlocal vowels_index_count_max_min_index25 = 0\n\tlocal vowels_index_count_max_min_index26\
    \ = 0\n\tlocal vowels_index_count_max_min_index27 = 0\n\tlocal vowels_index_count_max_min_index28\
    \ = 0\n\tlocal vowels_index_count_max_min_index29 = 0\n\tlocal vowels_index_count_max_min_index30\
    \ = 0\n\tlocal vowels_index_count_max_min_index31 = 0\n\tlocal vowels_index_count_max_min_index32\
    \ = 0\n\tlocal vowels_index_count_max_min_index33 = 0\n\tlocal vowels_index_count_max_min_index34\
    \ = 0\n\tlocal vowels_index_count_max_min_index35 = 0\n\tlocal vowels_index_count_max_min_index36\
    \ = 0\n\tlocal vowels_index_count_max_min_index37 = 0\n\tlocal vowels_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx4yjv5bs.lua:80: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = #word\n\tlocal vowels_index2 = #word\n\tlocal vowels_index3\
    \ = #word\n\tlocal vowels_index4 = #word\n\tlocal vowels_index5 = #word\n\tlocal\
    \ vowels_index6 = #word\n\tlocal vowels_index7 = #word\n\tlocal vowels_index8\
    \ = #word\n\tlocal vowels_index9 = #word\n\tlocal vowels_index10 = #word\n\tlocal\
    \ vowels_index11 = #word\n\tlocal vowels_index12 = #word\n\tlocal vowels_index13\
    \ = #word\n\tlocal vowels_index14 = #word\n\tlocal vowels_index15 = #word\n\t\
    local vowels_index16 = #word\n\tlocal vowels_index17 = #word\n\tlocal vowels_index18\
    \ = #word\n\tlocal vowels_index19 = #word\n\tlocal vowels_index20 = #word\n\t\
    local vowels_index21 = #word\n\tlocal vowels_index22 = #word\n\tlocal vowels_index23\
    \ = #word\n\tlocal vowels_index24 = #word\n\tlocal vowels_index25 = #word\n\t\
    local vowels_index26 = #word\n\tlocal vowels_index27 = #word\n\tlocal vowels_index28\
    \ = #word\n\tlocal vowels_index29 = #word\n\tlocal vowels_index30 = #word\n\t\
    local vowels_index31 = #word\n\tlocal vowels_index32 = #word\n\tlocal vowels_index33\
    \ = #word\n\tlocal vowels_index34 = #word\n\tlocal vowels_index35 = #word\n\t\
    local vowels_index36 = #word\n\tlocal vowels_index37 = #word\n\tlocal vowels_index38\
    \ = #word\n\tlocal vowels_index39 = #word\n\tlocal vowels_index40 = #word\n\t\
    local vowels_index41 = #word\n\tlocal vowels_index42 = #word\n\tlocal vowels_index43\
    \ = #word\n\tlocal vowels_index44 = #word\n\tlocal vowels_index45 = #word\n\t\
    local vowels_index46 = #word\n\tlocal vowels_index47 = #word\n\tlocal vowels_index48\
    \ = #word\n\tlocal vowels_index49 = #word\n\tlocal vowels_index50 = #word\n\t\
    local vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppfpddx2r.lua:88: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count\
    \ do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count =\
    \ #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count do\n\
    \        table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels_index\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels_index\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n   \
    \ local vowels_count = #vowels_index\n    local vowels_index = {}\n    for i =\
    \ 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local\
    \ vowels_count = #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count\
    \ do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count =\
    \ #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count do\n\
    \        table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels_index\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels_index\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n   \
    \ local vowels_count = #vowels_index\n    local vowels_index = {}\n    for i =\
    \ 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local\
    \ vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy2veq_xb.lua:107: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn098p34v.lua:92: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = #word\n  local vowels_index2 = #word\n  local vowels_index3\
    \ = #word\n  local vowels_index4 = #word\n  local vowels_index5 = #word\n  local\
    \ vowels_index6 = #word\n  local vowels_index7 = #word\n  local vowels_index8\
    \ = #word\n  local vowels_index9 = #word\n  local vowels_index10 = #word\n  local\
    \ vowels_index11 = #word\n  local vowels_index12 = #word\n  local vowels_index13\
    \ = #word\n  local vowels_index14 = #word\n  local vowels_index15 = #word\n  local\
    \ vowels_index16 = #word\n  local vowels_index17 = #word\n  local vowels_index18\
    \ = #word\n  local vowels_index19 = #word\n  local vowels_index20 = #word\n  local\
    \ vowels_index21 = #word\n  local vowels_index22 = #word\n  local vowels_index23\
    \ = #word\n  local vowels_index24 = #word\n  local vowels_index25 = #word\n  local\
    \ vowels_index26 = #word\n  local vowels_index27 = #word\n  local vowels_index28\
    \ = #word\n  local vowels_index29 = #word\n  local vowels_index30 = #word\n  local\
    \ vowels_index31 = #word\n  local vowels_index32 = #word\n  local vowels_index33\
    \ = #word\n  local vowels_index34 = #word\n  local vowels_index35 = #word\n  local\
    \ vowels_index36 = #word\n  local vowels_index37 = #word\n  local vowels_index38\
    \ = #word\n  local vowels_index39 = #word\n  local vowels_index40 = #word\n  local\
    \ vowels_index41 = #word\n  local vowels_index42 = #word\n  local vowels_index43\
    \ = #word\n  local vowels_index44 = #word\n  local vowels_index45 = #word\n  local\
    \ vowels_index46 = #word\n  local vowels_index47 = #word\n  local vowels_index48\
    \ = #word\n  local vowels_index49 = #word\n  local vowels_index50 = #word\n  local\
    \ vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg1cd_m36.lua:88: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index = 0\n\
    \tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk7k7ppxg.lua:86: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaakduzj9.lua:108: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptrs8ai21.lua:109: ''end'' expected (to close ''for'' at line
    89) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = #word\n    local vowels_index_count_min = #word\n\
    \    local vowels_index_count_min = #word\n    local vowels_index_count_max =\
    \ #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpimt8vs1h.lua:86: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = 1\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe2qiwddx.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = #word - vowels_count + 1\n  local vowels_index_count_min = vowels_count +\
    \ 1\n  local vowels_index_count_min = #word - vowels_count + 1\n  local vowels_index_count_max\
    \ = #word - vowels_count + 1\n  local vowels_index_count_min = vowels_count +\
    \ 1\n  local vowels_index_count_max = #word - vowels_count + 1\n  local vowels_index_count_min\
    \ = vowels_count + 1\n  local vowels_index_count_max = #word - vowels_count +\
    \ 1\n  local vowels_index_count_min = vowels_count + 1\n  local vowels_index_count_max\
    \ = #word - vowels_count + 1\n  local vowels_index_count_min = vowels_count +\
    \ 1\n  local vowels_index_count_max = #word - vowels_count + 1\n  local vowels_index_count_min\
    \ = vowels_count + 1\n  local vowels_index_count_max = #word - vowels_count +\
    \ 1\n  local vowels_index_count_min = vowels_count + 1\n  local vowels_index_count_max\
    \ = #word - vowels_count + 1\n  local vowels_index_count_min = vowels_count +\
    \ 1\n  local vowels_index_count_max = #word - vowels_count + 1\n  local vowels_index_count_min\
    \ = vowels_count + 1\n  local vowels_index_count_max = #word - vowels_count +\
    \ 1\n  local vowels_index_count_min = vowels_count + 1\n  local vowels_index_count_max\
    \ = #word - vowels_count + 1\n  local vowels_index_count_min = vowels_count +\
    \ 1\n  local vowels_index_count_max = #word - vowels_count + 1\n  local vowels_index_count_min\
    \ = vowels_count + 1\n  local vowels_index_count_max = #word - vowels_count +\
    \ 1\n  local vowels_index_count_min = vowels_count + 1\n  local vowels_index_count_max\
    \ = #word - vowels_count + 1\n  local vowels_index_count_min = vowels_count +\
    \ 1\n  local vowels_index_count_max = #word - vowels_count + 1\n  local vowels_index_count_min\
    \ = vowels_count + 1\n  local vowels_index_count_max = #word - vowels_count +\
    \ 1\n  local vowels_index_count_min = vowels_count + 1\n  local vowels_index_count_max\
    \ = #word - vowels_count + 1\n  local vowels_index_count_min = vowels_count +\
    \ 1\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp37eivbx0.lua:75: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 1\n    local vowels_index_count_minus_1\
    \ = vowels_count - 1\n    local vowels_index_count_minus_2 = vowels_count - 2\n\
    \    local vowels_index_count_minus_3 = vowels_count - 3\n    local vowels_index_count_minus_4\
    \ = vowels_count - 4\n    local vowels_index_count_minus_5 = vowels_count - 5\n\
    \    local vowels_index_count_minus_6 = vowels_count - 6\n    local vowels_index_count_minus_7\
    \ = vowels_count - 7\n    local vowels_index_count_minus_8 = vowels_count - 8\n\
    \    local vowels_index_count_minus_9 = vowels_count - 9\n    local vowels_index_count_minus_10\
    \ = vowels_count - 10\n    local vowels_index_count_minus_11 = vowels_count -\
    \ 11\n    local vowels_index_count_minus_12 = vowels_count - 12\n    local vowels_index_count_minus_13\
    \ = vowels_count - 13\n    local vowels_index_count_minus_14 = vowels_count -\
    \ 14\n    local vowels_index_count_minus_15 = vowels_count - 15\n    local vowels_index_count_minus_16\
    \ = vowels_count - 16\n    local vowels_index_count_minus_17 = vowels_count -\
    \ 17\n    local vowels_index_count_minus_18 = vowels_count - 18\n    local vowels_index_count_minus_19\
    \ = vowels_count - 19\n    local vowels_index_count_minus_20 = vowels_count -\
    \ 20\n    local vowels_index_count_minus_21 = vowels_count - 21\n    local vowels_index_count_minus_22\
    \ = vowels_count - 22\n    local vowels_index_count_minus_23 = vowels_count -\
    \ 23\n    local vowels_index_count_minus_24 = vowels_count - 24\n    local vowels_index_count_minus_25\
    \ = vowels_count - 25\n    local vowels_index_count_minus_26 = vowels_count -\
    \ 26\n    local vowels_index_count_minus_27 = vowels_count - 27\n    local vowels_index_count_minus_28\
    \ = vowels_count - 28\n    local vowels_index_count_minus_29 = vowels_count -\
    \ 29\n    local vowels_index_count_minus_30 = vowels_count - 30\n    local vowels_index_count_minus_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpey8jhd88.lua:70: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbfvre1hb.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 0\n    local vowels_index_count = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_max_min\
    \ = #vowels\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index_index = 0\n    local vowels_index_count_max_index_index\
    \ = 0\n    local vowels_index_count_min_index_count = 0\n    local vowels_index_count_max_index_count\
    \ = 0\n    local vowels_index_count_min_index_count_min = 0\n    local vowels_index_count_max_index_count_min\
    \ = 0\n    local vowels_index_count_min_index_count_max = 0\n    local vowels_index_count_max_index_count_max\
    \ = 0\n    local vowels_index_count_min_index_count_min_index = 0\n    local vowels_index_count_max_index_count_min_index\
    \ = 0\n    local vowels_index_count_min_index_count_max_index = 0\n    local vowels_index_count_max_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index_count_min_index_count = 0\n    local\
    \ vowels_index_count_max_index_count_min_index_count = 0\n    local vowels_index_count_min_index_count_max_index_count\
    \ = 0\n    local vowels_index_count_max_index_count_max_index_count = 0\n    local\
    \ vowels_index_count_min_index_count_min_index_count_min = 0\n    local vowels_index_count_max_index_count_min_index_count_min\
    \ = 0\n    local vowels_index_count_min_index_count_max_index_count_min = 0\n\
    \    local vowels_index_count_max_index_count_max_index_count_min = 0\n    local\
    \ vowels_index_count_min_index_count_min_index_count_max = 0\n    local vowels_index_count_max_index_count_min_index_count_max\
    \ = 0\n    local vowels_index_count_min_index_count_max_index_count_max = 0\n\
    \    local vowels_index_count_max_index_count_max_index_count_max = 0\n    local\
    \ vowels_index_count_min_index_count_min_index_count_min_index = 0\n    local\
    \ vowels_index_count_max_index_count_min_index_count_min_index = 0\n    local\
    \ vowels_index_count_min_index_count_max_index_count_min_index = 0\n    local\
    \ vowels_index_count_max_index_count_max_index_count_min_index = 0\n    local\
    \ vowels_index_count_min_index_count_min_index_count_max_index = 0\n    local\
    \ vowels_index_count_max_index_count_min_index_count_max_index = 0\n    local\
    \ vowels_index_count_min_index_count_max_index_count_max_index\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpks4sakhw.lua:75: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdpow4a0o.lua:108: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = { 'a', 'e', 'i', 'o', 'u' }\n\tlocal vowels_count = 0\n\tlocal\
    \ vowels_index = 1\n\tlocal vowels_index_end\n\tlocal vowels_index_start\n\tlocal\
    \ vowels_index_start_end\n\tlocal vowels_index_start_end_end\n\tlocal vowels_index_start_end_end_end\n\
    \tlocal vowels_index_start_end_end_end_end\n\tlocal vowels_index_start_end_end_end_end_end\n\
    \tlocal vowels_index_start_end_end_end_end_end_end\n\tlocal vowels_index_start_end_end_end_end_end_end_end\n\
    \tlocal vowels_index_start_end_end_end_end_end_end_end_end\n\tlocal vowels_index_start_end_end_end_end_end_end_end_end_end\n\
    \tlocal vowels_index_start_end_end_end_end_end_end_end_end_end_end\n\tlocal vowels_index_start_end_end_end_end_end_end_end_end_end_end_end\n\
    \tlocal vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end\n\t\
    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end\n\tlocal\
    \ vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end\n\tlocal\
    \ vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \tlocal vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \tlocal vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \tlocal vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \tlocal vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \tlocal vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \tlocal vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \tlocal vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \tlocal vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \tlocal vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \tlocal vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \tlocal vowels_index_start_end_end_end_end_end_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxhzyqceh.lua:66: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = #word\n    local vowels_index_count_min = #word\n\
    \    local vowels_index_count_min = #word\n    local vowels_index_count_max =\
    \ #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptltg80ys.lua:86: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = 0\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpidpgcq8n.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','y'}\n\tlocal vowels_count = 0\n\tlocal\
    \ vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #vowels\n\tlocal vowels_index_count_min = #vowels-1\n\tlocal vowels_index_count_min\
    \ = #vowels-1\n\tlocal vowels_index_count_max = #vowels-1\n\tlocal vowels_index_count_min\
    \ = #vowels-1\n\tlocal vowels_index_count_max = #vowels-1\n\tlocal vowels_index_count_min\
    \ = #vowels-1\n\tlocal vowels_index_count_max = #vowels-1\n\tlocal vowels_index_count_min\
    \ = #vowels-1\n\tlocal vowels_index_count_max = #vowels-1\n\tlocal vowels_index_count_min\
    \ = #vowels-1\n\tlocal vowels_index_count_max = #vowels-1\n\tlocal vowels_index_count_min\
    \ = #vowels-1\n\tlocal vowels_index_count_max = #vowels-1\n\tlocal vowels_index_count_min\
    \ = #vowels-1\n\tlocal vowels_index_count_max = #vowels-1\n\tlocal vowels_index_count_min\
    \ = #vowels-1\n\tlocal vowels_index_count_max = #vowels-1\n\tlocal vowels_index_count_min\
    \ = #vowels-1\n\tlocal vowels_index_count_max = #vowels-1\n\tlocal vowels_index_count_min\
    \ = #vowels-1\n\tlocal vowels_index_count_max = #vowels-1\n\tlocal vowels_index_count_min\
    \ = #vowels-1\n\tlocal vowels_index_count_max = #vowels-1\n\tlocal vowels_index_count_min\
    \ = #vowels-1\n\tlocal vowels_index_count_max = #vowels-1\n\tlocal vowels_index_count_min\
    \ = #vowels-1\n\tlocal vowels_index_count_max = #vowels-1\n\tlocal vowels_index_count_min\
    \ = #vowels-1\n\tlocal vowels_index_count_max = #vowels-1\n\tlocal vowels_index_count_min\
    \ = #vowels-1\n\tlocal vowels_index_count_max = #vowels-1\n\tlocal vowels_index_count_min\
    \ = #vowels-1\n\tlocal vowels_index_count_max = #vowels-1\n\tlocal vowels_index_count_min\
    \ = #vowels-1\n\tlocal vowels_index_count_max = #vowels-1\n\tlocal vowels_index_count_min\
    \ = #vowels-1\n\tlocal vowels_index_count_max = #vowels-1\n\tlocal vowels_index_count_min\
    \ = #vowels-1\n\tlocal vowels_index_count_max = #\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz89nq6zx.lua:60: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    local vowels_count\
    \ = #vowels\n    local vowel_met_count = 0\n    local vowel_met_index = 0\n  \
    \  local vowel_met_index2 = 0\n    local vowel_met_index3 = 0\n    local vowel_met_index4\
    \ = 0\n    local vowel_met_index5 = 0\n    local vowel_met_index6 = 0\n    local\
    \ vowel_met_index7 = 0\n    local vowel_met_index8 = 0\n    local vowel_met_index9\
    \ = 0\n    local vowel_met_index10 = 0\n    local vowel_met_index11 = 0\n    local\
    \ vowel_met_index12 = 0\n    local vowel_met_index13 = 0\n    local vowel_met_index14\
    \ = 0\n    local vowel_met_index15 = 0\n    local vowel_met_index16 = 0\n    local\
    \ vowel_met_index17 = 0\n    local vowel_met_index18 = 0\n    local vowel_met_index19\
    \ = 0\n    local vowel_met_index20 = 0\n    local vowel_met_index21 = 0\n    local\
    \ vowel_met_index22 = 0\n    local vowel_met_index23 = 0\n    local vowel_met_index24\
    \ = 0\n    local vowel_met_index25 = 0\n    local vowel_met_index26 = 0\n    local\
    \ vowel_met_index27 = 0\n    local vowel_met_index28 = 0\n    local vowel_met_index29\
    \ = 0\n    local vowel_met_index30 = 0\n    local vowel_met_index31 = 0\n    local\
    \ vowel_met_index32 = 0\n    local vowel_met_index33 = 0\n    local vowel_met_index34\
    \ = 0\n    local vowel_met_index35 = 0\n    local vowel_met_index36 = 0\n    local\
    \ vowel_met_index37 = 0\n    local vowel_met_index38 = 0\n    local vowel_met_index39\
    \ = 0\n    local vowel_met_index40 = 0\n    local vowel_met_index41 = 0\n    local\
    \ vowel_met_index42 = 0\n    local vowel_met_index43 = 0\n    local vowel_met_index44\
    \ = 0\n    local vowel_met_index45 = 0\n    local vowel_met_index46 = 0\n    local\
    \ vowel_met_index47 = 0\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8l2g_0n5.lua:86: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = {}\n  local vowels_index_count = 0\n  for i = 1, #word\
    \ do\n    if word:sub(i,i) == vowels[vowels_index] then\n      table.insert(vowels_index,\
    \ i)\n      vowels_index_count = vowels_index_count + 1\n    end\n  end\n  if\
    \ vowels_index_count > 1 then\n    local vowels_index_min = math.min(vowels_index)\n\
    \    local vowels_index_max = math.max(vowels_index)\n    local vowels_index_mid\
    \ = math.floor(vowels_index_min + (vowels_index_max - vowels_index_min) / 2)\n\
    \    local vowels_index_mid_value = word:sub(vowels_index_mid, vowels_index_mid)\n\
    \    if vowels_index_mid_value ~= vowels[vowels_index_mid] then\n      return\
    \ ''\n    end\n  end\n  return vowels[vowels_index_mid]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcaqh2oap.lua:41:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpcaqh2oap.lua:41: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = 1\n\tlocal\
    \ vowels_index_count_max_minus_1 = #word-1\n\tlocal vowels_index_count_max_minus_2\
    \ = #word-2\n\tlocal vowels_index_count_max_minus_3 = #word-3\n\tlocal vowels_index_count_max_minus_4\
    \ = #word-4\n\tlocal vowels_index_count_max_minus_5 = #word-5\n\tlocal vowels_index_count_max_minus_6\
    \ = #word-6\n\tlocal vowels_index_count_max_minus_7 = #word-7\n\tlocal vowels_index_count_max_minus_8\
    \ = #word-8\n\tlocal vowels_index_count_max_minus_9 = #word-9\n\tlocal vowels_index_count_max_minus_10\
    \ = #word-10\n\tlocal vowels_index_count_max_minus_11 = #word-11\n\tlocal vowels_index_count_max_minus_12\
    \ = #word-12\n\tlocal vowels_index_count_max_minus_13 = #word-13\n\tlocal vowels_index_count_max_minus_14\
    \ = #word-14\n\tlocal vowels_index_count_max_minus_15 = #word-15\n\tlocal vowels_index_count_max_minus_16\
    \ = #word-16\n\tlocal vowels_index_count_max_minus_17 = #word-17\n\tlocal vowels_index_count_max_minus_18\
    \ = #word-18\n\tlocal vowels_index_count_max_minus_19 = #word-19\n\tlocal vowels_index_count_max_minus_20\
    \ = #word-20\n\tlocal vowels_index_count_max_minus_21 = #word-21\n\tlocal vowels_index_count_max_minus_22\
    \ = #word-22\n\tlocal vowels_index_count_max_minus_23 = #word-23\n\tlocal vowels_index_count_max_minus_24\
    \ = #word-24\n\tlocal vowels_index_count_max_minus_25 = #word-25\n\tlocal vowels_index_count_max_minus_26\
    \ = #word-26\n\tlocal vowels_index_count_max_minus_27 = #word-27\n\tlocal vowels_index_count_max_minus_28\
    \ = #word-28\n\tlocal vowels_index_count_max_minus_29 = #word-29\n\tlocal vowels_index_count_max_minus_30\
    \ = #word-30\n\tlocal vowels_index_count_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpunzk3_1y.lua:72: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u','y'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 0\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfrstnws5.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','y'}\n\tlocal vowels_count = 0\n\tlocal\
    \ vowels_count_prev = 0\n\tlocal vowels_count_next = 0\n\tlocal vowels_count_prev2\
    \ = 0\n\tlocal vowels_count_next2 = 0\n\tlocal vowels_count_prev3 = 0\n\tlocal\
    \ vowels_count_next3 = 0\n\tlocal vowels_count_prev4 = 0\n\tlocal vowels_count_next4\
    \ = 0\n\tlocal vowels_count_prev5 = 0\n\tlocal vowels_count_next5 = 0\n\tlocal\
    \ vowels_count_prev6 = 0\n\tlocal vowels_count_next6 = 0\n\tlocal vowels_count_prev7\
    \ = 0\n\tlocal vowels_count_next7 = 0\n\tlocal vowels_count_prev8 = 0\n\tlocal\
    \ vowels_count_next8 = 0\n\tlocal vowels_count_prev9 = 0\n\tlocal vowels_count_next9\
    \ = 0\n\tlocal vowels_count_prev10 = 0\n\tlocal vowels_count_next10 = 0\n\tlocal\
    \ vowels_count_prev11 = 0\n\tlocal vowels_count_next11 = 0\n\tlocal vowels_count_prev12\
    \ = 0\n\tlocal vowels_count_next12 = 0\n\tlocal vowels_count_prev13 = 0\n\tlocal\
    \ vowels_count_next13 = 0\n\tlocal vowels_count_prev14 = 0\n\tlocal vowels_count_next14\
    \ = 0\n\tlocal vowels_count_prev15 = 0\n\tlocal vowels_count_next15 = 0\n\tlocal\
    \ vowels_count_prev16 = 0\n\tlocal vowels_count_next16 = 0\n\tlocal vowels_count_prev17\
    \ = 0\n\tlocal vowels_count_next17 = 0\n\tlocal vowels_count_prev18 = 0\n\tlocal\
    \ vowels_count_next18 = 0\n\tlocal vowels_count_prev19 = 0\n\tlocal vowels_count_next19\
    \ = 0\n\tlocal vowels_count_prev20 = 0\n\tlocal vowels_count_next20 = 0\n\tlocal\
    \ vowels_count_prev21 = 0\n\tlocal vowels_count_next21 = 0\n\tlocal vowels_count_prev22\
    \ = 0\n\tlocal vowels_count_next22 = 0\n\tlocal vowels_count_prev23 = 0\n\tlocal\
    \ vowels_count_next23 = 0\n\tlocal vowels_count_prev24 = 0\n\tlocal vowels_count_next24\
    \ = 0\n\tlocal vowels_count_prev25 = 0\n\tlocal vowels_count_next25 = 0\n\tlocal\
    \ vowels_count_prev26 = 0\n\tlocal vowels_count_next26 = 0\n\tlocal vowels_count_prev27\
    \ = 0\n\tlocal vowels_count_next27 = 0\n\tlocal vowels_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn7_9fn3x.lua:92: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 1\n\tlocal vowels_index_count_2\
    \ = 1\n\tlocal vowels_index_count_3 = 1\n\tlocal vowels_index_count_4 = 1\n\t\
    local vowels_index_count_5 = 1\n\tlocal vowels_index_count_6 = 1\n\tlocal vowels_index_count_7\
    \ = 1\n\tlocal vowels_index_count_8 = 1\n\tlocal vowels_index_count_9 = 1\n\t\
    local vowels_index_count_10 = 1\n\tlocal vowels_index_count_11 = 1\n\tlocal vowels_index_count_12\
    \ = 1\n\tlocal vowels_index_count_13 = 1\n\tlocal vowels_index_count_14 = 1\n\t\
    local vowels_index_count_15 = 1\n\tlocal vowels_index_count_16 = 1\n\tlocal vowels_index_count_17\
    \ = 1\n\tlocal vowels_index_count_18 = 1\n\tlocal vowels_index_count_19 = 1\n\t\
    local vowels_index_count_20 = 1\n\tlocal vowels_index_count_21 = 1\n\tlocal vowels_index_count_22\
    \ = 1\n\tlocal vowels_index_count_23 = 1\n\tlocal vowels_index_count_24 = 1\n\t\
    local vowels_index_count_25 = 1\n\tlocal vowels_index_count_26 = 1\n\tlocal vowels_index_count_27\
    \ = 1\n\tlocal vowels_index_count_28 = 1\n\tlocal vowels_index_count_29 = 1\n\t\
    local vowels_index_count_30 = 1\n\tlocal vowels_index_count_31 = 1\n\tlocal vowels_index_count_32\
    \ = 1\n\tlocal vowels_index_count_33 = 1\n\tlocal vowels_index_count_34 = 1\n\t\
    local vowels_index_count_35 = 1\n\tlocal vowels_index_count_36 = 1\n\tlocal vowels_index_count_37\
    \ = 1\n\tlocal vowels_index_count_38 = 1\n\tlocal vowels_index_count_39 = 1\n\t\
    local vowels_index_count_40 = 1\n\tlocal vowels_index_count_41 = 1\n\tlocal vowels_index_count_42\
    \ = 1\n\tlocal vowels_index_count_43 = 1\n\tlocal vowels_index_count_44 = 1\n\t\
    local vowels_index_count_45 = 1\n\tlocal vowels_index_count_46 = 1\n\tlocal vowels_index_count_47\
    \ = 1\n\tlocal vowels_index_count_48 = 1\n\tlocal vowels_index_count_49 = 1\n\t\
    local vowels_index_count_50 = 1\n\tlocal vowels_index_count_51 = 1\n\tlocal vowels_index_count_52\
    \ = 1\n\tlocal vowels_index_count_53 = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpykkznehj.lua:72: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowel_found = false\n    local vowel_position = -1\n    local vowel_position_count\
    \ = 0\n    local vowel_position_count2 = 0\n    local vowel_position_count3 =\
    \ 0\n    local vowel_position_count4 = 0\n    local vowel_position_count5 = 0\n\
    \    local vowel_position_count6 = 0\n    local vowel_position_count7 = 0\n  \
    \  local vowel_position_count8 = 0\n    local vowel_position_count9 = 0\n    local\
    \ vowel_position_count10 = 0\n    local vowel_position_count11 = 0\n    local\
    \ vowel_position_count12 = 0\n    local vowel_position_count13 = 0\n    local\
    \ vowel_position_count14 = 0\n    local vowel_position_count15 = 0\n    local\
    \ vowel_position_count16 = 0\n    local vowel_position_count17 = 0\n    local\
    \ vowel_position_count18 = 0\n    local vowel_position_count19 = 0\n    local\
    \ vowel_position_count20 = 0\n    local vowel_position_count21 = 0\n    local\
    \ vowel_position_count22 = 0\n    local vowel_position_count23 = 0\n    local\
    \ vowel_position_count24 = 0\n    local vowel_position_count25 = 0\n    local\
    \ vowel_position_count26 = 0\n    local vowel_position_count27 = 0\n    local\
    \ vowel_position_count28 = 0\n    local vowel_position_count29 = 0\n    local\
    \ vowel_position_count30 = 0\n    local vowel_position_count31 = 0\n    local\
    \ vowel_position_count32 = 0\n    local vowel_position_count33 = 0\n    local\
    \ vowel_position_count34 = 0\n    local vowel_position_count35 = 0\n    local\
    \ vowel_position_count36 = 0\n    local vowel_position_count37 = 0\n    local\
    \ vowel_position_count38 = 0\n    local vowel_position_count39 = 0\n    local\
    \ vowel_position_count40 = 0\n    local vowel_position_count41 = 0\n    local\
    \ vowel_position_count42 = 0\n    local vowel_position_count43 = 0\n    local\
    \ vowel_position_count44 = 0\n    local vowel_position_count45 = 0\n    local\
    \ vowel_position_count46 = 0\n    local vowel_position_count47 = 0\n    local\
    \ vowel_position_count48 = 0\n    local vowel_position_count49 = 0\n    local\
    \ vowel_position_count50 = 0\n    local vowel_position_count51 = 0\n    local\
    \ vowel_position_count52 = 0\n    local vowel_position_count53 = 0\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjrbnu_si.lua:93: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #vowels\n    for i = 1, #word do\n        local vowel = word:sub(i, i)\n \
    \       if vowel:sub(1, 1) ~= vowel:sub(1, 1) then\n            vowels_index[vowel]\
    \ = vowels_index[vowel] + 1\n            if vowels_index[vowel] > vowels_index_count_max\
    \ then\n                vowels_index_count_max = vowels_index[vowel]\n       \
    \     end\n        end\n    end\n    for i = 1, vowels_index_count_max do\n  \
    \      if vowels_index[i] > 0 then\n            vowels_index_count = i\n     \
    \       break\n        end\n    end\n    if vowels_index_count > 0 then\n    \
    \    local vowel_start = word:sub((vowels_index_count - 1), (vowels_index_count\
    \ - 1))\n        local vowel_end = word:sub((vowels_index_count), (vowels_index_count))\n\
    \        if vowel_start:sub(1, 1) ~= vowel_start:sub(1, 1) then\n            vowel_start\
    \ = vowel_start:sub(1, 1)\n        end\n        if vowel_end:sub(1, 1) ~= vowel_end:sub(1,\
    \ 1) then\n            vowel_end = vowel_end:sub(1, 1)\n        end\n        if\
    \ vowel_start ~= vowel_end then\n            local vowel_start_index = vowels_index[vowel_start]\n\
    \            local vowel_end_index = vowels_index[vowel_end]\n            if vowel_start_index\
    \ > vowel_end_index then\n                vowel_start_index = vowel_start_index\
    \ - 1\n            end\n            if vowel_end_index > vowel_start_index then\n\
    \                vowel_end_index = vowel_end_index - 1\n            end\n    \
    \        if vowel_start_index == vowel_end_index then\n                return\
    \ vowel\n            end\n        end\n    end\n    return ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd0dd1ytk.lua:31:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpd0dd1ytk.lua:31:\
    \ in function 'candidate'\n\t/tmp/tmpd0dd1ytk.lua:65: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u'}\n  local vowels_count = #vowels\n  local\
    \ vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = 0\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprxagq6zq.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = {}\n  local vowels_index_count = 0\n  for i = 1, #word\
    \ do\n    if vowels[word[i]] then\n      table.insert(vowels_index, word[i])\n\
    \      vowels_index_count = vowels_index_count + 1\n    end\n  end\n  if vowels_index_count\
    \ > 1 then\n    local vowels_index_sorted = table.sort(vowels_index)\n    local\
    \ vowels_index_sorted_count = #vowels_index_sorted\n    if vowels_index_sorted_count\
    \ > 1 then\n      local vowels_index_sorted_index = vowels_index_sorted[1]\n \
    \     local vowels_index_sorted_index_count = #vowels_index_sorted_index\n   \
    \   if vowels_index_sorted_index_count > 1 then\n        local vowels_index_sorted_index_index_count\
    \ = #vowels_index_sorted_index[1]\n        if vowels_index_sorted_index_index_count\
    \ > 1 then\n          local vowels_index_sorted_index_index_index_count = #vowels_index_sorted_index[1][1]\n\
    \          if vowels_index_sorted_index_index_count > 1 then\n            local\
    \ vowels_index_sorted_index_index_index_count_2 = #vowels_index_sorted_index[1][1][1]\n\
    \            if vowels_index_sorted_index_index_count_2 > 1 then\n           \
    \   local vowels_index_sorted_index_index_count_3 = #vowels_index_sorted_index[1][1][1][1]\n\
    \              if vowels_index_sorted_index_index_count_3 > 1 then\n         \
    \       local vowels_index_sorted_index_index_count_4 = #vowels_index_sorted_index[1][1][1][1][1]\n\
    \                if vowels_index_sorted_index_index_count_4 > 1 then\n       \
    \           local vowels_index_sorted_index_index_count_5 = #vowels_index_sorted_index[1][1][1][1][1][1]\n\
    \                  if vowels_index_sorted_index_index_count_5 > 1 then\n     \
    \               local vowels_index_sorted_index_index_count_6 = #vowels_index_sorted_index[1][1][1][1][1][1]\n\
    \                    if vowels_index_sorted_index_index_count_6 > 1 then\n   \
    \                   local vowels_index_sorted_index_index_count_7 = #vowels_index_sorted_index[1][1][1][1][1][1][1]\n\
    \                      if vowels_index_sorted_index_index_count_7 > 1 then\n \
    \                       local vowels_index_sorted_index_index_count_8 = #vowels_index_sorted_index[1][1][1][1][1][1][1]\n\
    \                        if vowels_index_sorted_index_index_count_8 > 1 then\n\
    \                          local vowels_index_sorted_index_index_count_9 = #vowels_index_sorted_index[1][1][1][1][1][1][1][1]\n\
    \                          return vowels_index_sorted_index_index_count_9\n  \
    \                      end\n                      end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_bj3h7sm.lua:74: ''end'' expected (to close ''if'' at line
    46) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_min = 1\n    local vowels_index_count_max = #word\n\
    \    local vowels_index_count_max\n    local vowels_index_count_min\n    local\
    \ vowels_index_count_max\n    local vowels_index_count_min\n    local vowels_index_count_max\n\
    \    local vowels_index_count_min\n    local vowels_index_count_max\n    local\
    \ vowels_index_count_min\n    local vowels_index_count_max\n    local vowels_index_count_min\n\
    \    local vowels_index_count_max\n    local vowels_index_count_min\n    local\
    \ vowels_index_count_max\n    local vowels_index_count_min\n    local vowels_index_count_max\n\
    \    local vowels_index_count_min\n    local vowels_index_count_max\n    local\
    \ vowels_index_count_min\n    local vowels_index_count_max\n    local vowels_index_count_min\n\
    \    local vowels_index_count_max\n    local vowels_index_count_min\n    local\
    \ vowels_index_count_max\n    local vowels_index_count_min\n    local vowels_index_count_max\n\
    \    local vowels_index_count_min\n    local vowels_index_count_max\n    local\
    \ vowels_index_count_min\n    local vowels_index_count_max\n    local vowels_index_count_min\n\
    \    local vowels_index_count_max\n    local vowels_index_count_min\n    local\
    \ vowels_index_count_max\n    local vowels_index_count_min\n    local vowels_index_count_max\n\
    \    local vowels_index_count_min\n    local vowels_index_count_max\n    local\
    \ vowels_index_count_min\n    local vowels_index_count_max\n    local vowels_index_count_min\n\
    \    local vowels_index_count_max\n    local vowels_index_count_min\n    local\
    \ vowels_index_count_max\n    local vowels_index_count_min\n    local vowels_index_count_max\n\
    \    local vowels_index_count_min\n    local vowels_index_count_max\n    local\
    \ vowels_index_count_min\n    local vowels_index_count_max\n    local vowels_index_count_min\n\
    \    local vowels_index_count_max\n    local vowels_index_count_min\n    local\
    \ vowels_index_count_max\n    local vowels_index_count_min\n    local vowels_index_count_max\n\
    \    local vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_chwwjwx.lua:97: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
