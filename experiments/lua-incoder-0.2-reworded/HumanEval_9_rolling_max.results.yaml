language: lua
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local\
    \ max_index = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > max_value\
    \ then\n      rolling_max:insert(max_value)\n      max_value = numbers[i]\n  \
    \    max_index = i\n    else\n      rolling_max:insert(numbers[i])\n    end\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw_imc2xu.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpw_imc2xu.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpw_imc2xu.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local max_element = numbers[i]\n\
    \    for j = i - 1, 1, -1 do\n      if numbers[j] > max_element then\n       \
    \ max_element = numbers[j]\n      end\n    end\n    table.insert(rolling_max,\
    \ max_element)\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_value = numbers[i]\n    local max_index = i\n    for j = i + 1,\
    \ #numbers do\n      if numbers[j] > max_value then\n        max_value = numbers[j]\n\
    \        max_index = j\n      end\n    end\n    rolling_max:insert(max_value)\n\
    \    i = max_index + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwj90z8gk.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpwj90z8gk.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpwj90z8gk.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  for i\
    \ = 2, #numbers do\n    if numbers[i] > max_value then\n      rolling_max = numbers:sub(1,\
    \ i)\n      max_value = numbers[i]\n    end\n  end\n  return rolling_max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8vhlkdmr.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp8vhlkdmr.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp8vhlkdmr.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local\
    \ max_index = 1\n  for i = 2, #numbers do\n    if numbers[i] ~= max_value then\n\
    \      rolling_max:insert(max_value)\n      max_value = numbers[i]\n      max_index\
    \ = i\n    end\n  end\n  rolling_max:insert(max_value)\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq55ti_rv.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpq55ti_rv.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpq55ti_rv.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local index = 1\n  local max_value = numbers[1]\n\
    \  rolling_max[1] = max_value\n  for i = 2, #numbers do\n    if numbers[i] ~=\
    \ max_value then\n      max_value = numbers[i]\n      rolling_max[index] = max_value\n\
    \      index = index + 1\n    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpne04yuwb.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpne04yuwb.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpne04yuwb.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local i = 1\n  while i <= #numbers do\n    local\
    \ value = numbers[i]\n    if max_value ~= nil and value > max_value then\n   \
    \   rolling_max:insert(max_value)\n      max_value = nil\n      max_index = nil\n\
    \    end\n    if max_value == nil then\n      max_value = value\n      max_index\
    \ = i\n    end\n    rolling_max:insert(value)\n    i = i + 1\n  end\n  return\
    \ rolling_max, max_index, max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppd4zbn7n.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmppd4zbn7n.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmppd4zbn7n.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local i = 1\n  while i <= #numbers do\n    local\
    \ value = numbers[i]\n    if value > max_value then\n      max_value = value\n\
    \      max_index = i\n    end\n    rolling_max:insert(max_value)\n    rolling_max:insert(max_index)\n\
    \    i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprqev5dkq.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmprqev5dkq.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmprqev5dkq.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_value = numbers[i]\n    local max_index = i\n    for j = i + 1,\
    \ #numbers do\n      if numbers[j] > max_value then\n        max_value = numbers[j]\n\
    \        max_index = j\n      end\n    end\n    rolling_max[max_index] = max_value\n\
    \    i = max_index + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7zxpfrs9.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp7zxpfrs9.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp7zxpfrs9.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    rolling_max:insert(numbers[i])\n    i = i + 1\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1khmncnt.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp1khmncnt.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp1khmncnt.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:set(rolling_max_index, rolling_max_value)\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsul51fq0.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpsul51fq0.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpsul51fq0.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local last_number = nil\n  local last_max_number\
    \ = nil\n  for i = 1, #numbers do\n    if numbers[i] ~= last_number then\n   \
    \   rolling_max:insert(numbers[i])\n      last_number = numbers[i]\n    end\n\
    \    if numbers[i] > last_max_number then\n      last_max_number = numbers[i]\n\
    \    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaefgkgel.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpaefgkgel.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpaefgkgel.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local\
    \ max_index = 1\n  for i = 2, #numbers do\n    if numbers[i] ~= max_value then\n\
    \      rolling_max:insert(max_value)\n      max_value = numbers[i]\n      max_index\
    \ = i\n    end\n  end\n  rolling_max:insert(max_value)\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq55ti_rv.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpq55ti_rv.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpq55ti_rv.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    rolling_max[i] = numbers[i]\n    i = i + 1\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgtmv820n.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpgtmv820n.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpgtmv820n.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_value = numbers[i]\n    local max_index = i\n    for j = i + 1,\
    \ #numbers do\n      if numbers[j] > max_value then\n        max_value = numbers[j]\n\
    \        max_index = j\n      end\n    end\n    rolling_max[max_index] = max_value\n\
    \    i = max_index + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7zxpfrs9.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp7zxpfrs9.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp7zxpfrs9.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local last_value = numbers.last()\n  local\
    \ last_index = #numbers - 1\n  local current_value = numbers[last_index]\n  local\
    \ current_index = last_index\n  while current_index do\n    local next_value =\
    \ numbers[current_index + 1]\n    if next_value > current_value then\n      rolling_max:insert(current_value)\n\
    \      last_value = current_value\n      last_index = current_index\n      current_value\
    \ = next_value\n      current_index = current_index + 1\n    else\n      current_value\
    \ = next_value\n      current_index = current_index + 1\n    end\n  end\n  rolling_max:insert(last_value)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxn3z7284.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpxn3z7284.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpxn3z7284.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local max_value = nil\n  for i = 1, #numbers do\n\
    \    if max_value == nil then\n      max_value = numbers[i]\n      rolling_max[i]\
    \ = numbers[i]\n    else\n      if numbers[i] > max_value then\n        max_value\
    \ = numbers[i]\n        rolling_max[i] = numbers[i]\n      else\n        rolling_max[i]\
    \ = max_value\n      end\n    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_value = numbers[i]\n    local max_index = i\n    for j = i + 1,\
    \ #numbers do\n      if numbers[j] > max_value then\n        max_value = numbers[j]\n\
    \        max_index = j\n      end\n    end\n    rolling_max[max_index] = max_value\n\
    \    i = max_index + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7zxpfrs9.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp7zxpfrs9.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp7zxpfrs9.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeljo383l.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpeljo383l.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpeljo383l.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeljo383l.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpeljo383l.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpeljo383l.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local max_element\n  for _, number in ipairs(numbers)\
    \ do\n    if max_element and number > max_element then\n      rolling_max[#rolling_max\
    \ + 1] = max_element\n      max_element = nil\n    else\n      max_element = number\n\
    \    end\n  end\n  if max_element then\n    rolling_max[#rolling_max + 1] = max_element\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctzzhzbj.lua:26:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 3}\nstack traceback:\n\t/tmp/tmpctzzhzbj.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local\
    \ max_index = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= max_value\
    \ then\n      rolling_max:insert(max_value)\n      max_value = numbers[i]\n  \
    \    max_index = i\n    end\n  end\n  rolling_max:insert(max_value)\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9uiscl5j.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp9uiscl5j.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp9uiscl5j.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local value = numbers[i]\n    rolling_max[#rolling_max + 1] = value\n   \
    \ i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9yexbui8.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp9yexbui8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp9yexbui8.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local index = 1\n  local max_value = numbers[1]\n\
    \  local max_index = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~=\
    \ max_value then\n      rolling_max:insert(max_value)\n      max_value = numbers[i]\n\
    \      max_index = i\n    end\n    rolling_max:insert(numbers[i])\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphdg1kuep.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmphdg1kuep.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmphdg1kuep.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_value = numbers[i]\n    local max_index = i\n    for j = i + 1,\
    \ #numbers do\n      if numbers[j] > max_value then\n        max_value = numbers[j]\n\
    \        max_index = j\n      end\n    end\n    rolling_max[max_index] = max_value\n\
    \    i = max_index + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7zxpfrs9.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp7zxpfrs9.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp7zxpfrs9.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local max_index2 = numbers.new()\n  local max_index3\
    \ = numbers.new()\n  local max_index4 = numbers.new()\n  local max_index5 = numbers.new()\n\
    \  local max_index6 = numbers.new()\n  local max_index7 = numbers.new()\n  local\
    \ max_index8 = numbers.new()\n  local max_index9 = numbers.new()\n  local max_index10\
    \ = numbers.new()\n  local max_index11 = numbers.new()\n  local max_index12 =\
    \ numbers.new()\n  local max_index13 = numbers.new()\n  local max_index14 = numbers.new()\n\
    \  local max_index15 = numbers.new()\n  local max_index16 = numbers.new()\n  local\
    \ max_index17 = numbers.new()\n  local max_index18 = numbers.new()\n  local max_index19\
    \ = numbers.new()\n  local max_index20 = numbers.new()\n  local max_index21 =\
    \ numbers.new()\n  local max_index22 = numbers.new()\n  local max_index23 = numbers.new()\n\
    \  local max_index24 = numbers.new()\n  local max_index25 = numbers.new()\n  local\
    \ max_index26 = numbers.new()\n  local max_index27 = numbers.new()\n  local max_index28\
    \ = numbers.new()\n  local max_index29 = numbers.new()\n  local max_index30 =\
    \ numbers.new()\n  local max_index31 = numbers.new()\n  local max_index32 = numbers.new()\n\
    \  local max_index33 = numbers.new()\n  local max_index34 = numbers.new()\n  local\
    \ max_index35 = numbers.new()\n  local max_index36 = numbers.new()\n  local max_index37\
    \ = numbers.new()\n  local max_index38 = numbers.new()\n  local max_index39 =\
    \ numbers.new()\n  local max_index40 = numbers.new()\n  local max_index41 = numbers.new()\n\
    \  local max_index42 = numbers.new()\n  local max_index43 = numbers.new()\n  local\
    \ max_index44 = numbers.new()\n  local max_index45 = numbers.new()\n  local max_index46\
    \ = numbers.new()\n  local max_index47 = numbers.new()\n  local max_index48 =\
    \ numbers.new()\n  local max_index49 = numbers.new()\n  local max_index50 = numbers.new()\n\
    \  local max_index51 = numbers.new\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpt3hh692y.lua:69: ''end'' expected (to close ''function'' at
    line 5) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local i = 1\n  while i <= #numbers do\n    local\
    \ max_element = numbers[i]\n    for j = i - 1, -1, -1 do\n      if numbers[j]\
    \ > max_element then\n        max_element = numbers[j]\n      end\n    end\n \
    \   table.insert(rolling_max, max_element)\n    i = i + 1\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptx3oac91.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmptx3oac91.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmptx3oac91.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local max_element = numbers[i]\n\
    \    for j = i - 1, -1, -1 do\n      if numbers[j] > max_element then\n      \
    \  max_element = numbers[j]\n      end\n    end\n    table.insert(rolling_max,\
    \ max_element)\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwy6tqv1l.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpwy6tqv1l.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpwy6tqv1l.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local\
    \ max_index = 1\n  for i = 2, #numbers do\n    if numbers[i] > max_value then\n\
    \      max_value = numbers[i]\n      max_index = i\n    end\n  end\n  rolling_max:insert(max_value)\n\
    \  rolling_max:insert(max_index)\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp97172s4y.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp97172s4y.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp97172s4y.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local i = 1\n  while i <= numbers.n do\n    local\
    \ value = numbers[i]\n    if value > max_value then\n      max_value = value\n\
    \      max_index = i\n    end\n    rolling_max:insert(max_value)\n    rolling_max:insert(max_index)\n\
    \    i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp691ed58x.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp691ed58x.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp691ed58x.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers.first()\n  local\
    \ max_index = nil\n  for i = 1, numbers.n do\n    if numbers[i] ~= max_value then\n\
    \      rolling_max:insert(max_value)\n      max_value = numbers[i]\n      max_index\
    \ = i\n    end\n  end\n  if max_index ~= numbers.n then\n    rolling_max:insert(max_value)\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjkscy6jd.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpjkscy6jd.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpjkscy6jd.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local\
    \ max_index = 1\n  for i = 2, #numbers do\n    if numbers[i] > max_value then\n\
    \      rolling_max[max_index] = max_value\n      max_value = numbers[i]\n    \
    \  max_index = i\n    end\n  end\n  rolling_max[max_index] = max_value\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt63ijial.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpt63ijial.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpt63ijial.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  for i = 1, rolling_max_index\
    \ do\n    rolling_max:insert(numbers[i])\n  end\n  return rolling_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsqi6yqyw.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpsqi6yqyw.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpsqi6yqyw.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 1\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6br1hs_b.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp6br1hs_b.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp6br1hs_b.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local value = numbers[i]\n    rolling_max:insert(value)\n    i = i + 1\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzkikcafv.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpzkikcafv.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpzkikcafv.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_value = numbers[i]\n    for j = i - 1, i - 1, -1 do\n      if numbers[j]\
    \ > max_value then\n        max_value = numbers[j]\n      end\n    end\n    rolling_max:insert(max_value)\n\
    \    i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi6xvvdit.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpi6xvvdit.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpi6xvvdit.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:resize(#numbers)\n  for i = 1, #numbers do\n    rolling_max[rolling_max_index]\
    \ = numbers[i]\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpth1x6ze8.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpth1x6ze8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpth1x6ze8.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local i = 1\n  while i <= #numbers do\n    local\
    \ value = numbers[i]\n    local index = i\n    while i + 1 < #numbers do\n   \
    \   local next_value = numbers[i + 1]\n      if next_value > value then\n    \
    \    value = next_value\n        index = i + 1\n      else\n        i = i + 1\n\
    \      end\n    end\n    rolling_max:insert(value)\n    max_value:insert(value)\n\
    \    max_index:insert(index)\n  end\n  return rolling_max, max_value, max_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdxipvwg0.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpdxipvwg0.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpdxipvwg0.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_value)\n\
    \  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_value)\n\
    \  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_value)\n\
    \  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_value)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbhx1ic9e.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpbhx1ic9e.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpbhx1ic9e.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  local rolling_max_count = 0\n  for i = 2, #numbers do\n    if\
    \ numbers[i] ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_index = i\n      rolling_max_count = rolling_max_count + 1\n\
    \    end\n  end\n  rolling_max:resize(rolling_max_count)\n  for i = 1, rolling_max_count\
    \ do\n    rolling_max[i] = numbers[rolling_max_index + i]\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmfy7n85m.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpmfy7n85m.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpmfy7n85m.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local value = numbers[i]\n    rolling_max[#rolling_max + 1] = value\n   \
    \ i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9yexbui8.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp9yexbui8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp9yexbui8.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  for i = 1, rolling_max_index\
    \ do\n    rolling_max:insert(numbers[i])\n  end\n  return rolling_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsqi6yqyw.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpsqi6yqyw.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpsqi6yqyw.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 1\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6br1hs_b.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp6br1hs_b.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp6br1hs_b.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_index = 0\n  local max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > max_value then\n\
    \      rolling_max[max_index] = max_value\n      max_value = numbers[i]\n    \
    \  max_index = i\n    end\n  end\n  rolling_max[max_index] = max_value\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_0xjia2_.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp_0xjia2_.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp_0xjia2_.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 1\n  for i =\
    \ 1, #numbers do\n    local max_element = numbers[i]\n    local max_element_index\
    \ = i\n    while rolling_max_index > 0 do\n      local current_element = numbers[rolling_max_index]\n\
    \      if current_element > max_element then\n        rolling_max_index = rolling_max_index\
    \ - 1\n      else\n        rolling_max[rolling_max_index] = current_element\n\
    \        break\n      end\n    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuiimg2b8.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpuiimg2b8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpuiimg2b8.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local value = numbers[i]\n    rolling_max[#rolling_max + 1] = value\n   \
    \ i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9yexbui8.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp9yexbui8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp9yexbui8.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_index = 0\n  local max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= max_value then\n\
    \      rolling_max[max_index] = max_value\n      max_value = numbers[i]\n    \
    \  max_index = i\n    end\n  end\n  rolling_max[max_index] = max_value\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplbygnxy3.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmplbygnxy3.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmplbygnxy3.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local max_value = numbers[1]\n  for i = 2, #numbers\
    \ do\n    if numbers[i] ~= max_value then\n      table.insert(rolling_max, max_value)\n\
    \      max_value = numbers[i]\n    end\n  end\n  table.insert(rolling_max, max_value)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vs0d3w7.lua:23:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 3, 2, 1}\nstack traceback:\n\t/tmp/tmp0vs0d3w7.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_value = numbers[i]\n    local max_index = i\n    for j = i + 1,\
    \ #numbers do\n      if numbers[j] > max_value then\n        max_value = numbers[j]\n\
    \        max_index = j\n      end\n    end\n    rolling_max[max_index] = max_value\n\
    \    i = max_index + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7zxpfrs9.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp7zxpfrs9.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp7zxpfrs9.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local value = numbers[i]\n    local max_value = rolling_max[#rolling_max]\n\
    \    if value > max_value then\n      rolling_max[#rolling_max] = value\n    end\n\
    \    i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcvdveb9c.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpcvdveb9c.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpcvdveb9c.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = nil\n  local i = 1\n  while i <= #numbers do\n    if numbers[i]\
    \ ~= max_value then\n      max_value = numbers[i]\n      max_index = i\n    end\n\
    \    i = i + 1\n  end\n  rolling_max:set(max_index, max_value)\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_1jtb8ns.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp_1jtb8ns.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp_1jtb8ns.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local value = numbers[i]\n    rolling_max[#rolling_max + 1] = value\n   \
    \ i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9yexbui8.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp9yexbui8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp9yexbui8.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local value = numbers[i]\n    local max_value = rolling_max[i - 1]\n    if\
    \ max_value == nil then\n      rolling_max[i - 1] = value\n    else\n      if\
    \ value > max_value then\n        rolling_max[i - 1] = value\n      end\n    end\n\
    \    i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp17ij2_xb.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp17ij2_xb.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp17ij2_xb.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local\
    \ max_index = 1\n  for i = 2, #numbers do\n    if numbers[i] > max_value then\n\
    \      rolling_max[max_index] = max_value\n      max_value = numbers[i]\n    \
    \  max_index = i\n    end\n  end\n  rolling_max[max_index] = max_value\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt63ijial.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpt63ijial.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpt63ijial.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 1\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6br1hs_b.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp6br1hs_b.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp6br1hs_b.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local\
    \ max_index = 1\n  for i = 2, #numbers do\n    if numbers[i] > max_value then\n\
    \      rolling_max[max_index] = max_value\n      max_value = numbers[i]\n    \
    \  max_index = i\n    end\n  end\n  rolling_max[max_index] = max_value\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt63ijial.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpt63ijial.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpt63ijial.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local i = 1\n  while i <= #numbers do\n    local\
    \ value = numbers[i]\n    if value == nil then\n      break\n    end\n    local\
    \ index = i - 1\n    while index >= 0 do\n      if numbers[index] > value then\n\
    \        rolling_max:insert(value)\n        max_value:insert(value)\n        max_index:insert(index)\n\
    \        break\n      else\n        index = index - 1\n      end\n    end\n  \
    \  i = i + 1\n  end\n  return rolling_max, max_value, max_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwxr3z5ny.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpwxr3z5ny.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpwxr3z5ny.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: -1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local i = 1\n  while i <= #numbers do\n    local\
    \ max_element = numbers[i]\n    local max_element_index = i\n    while i + 1 <\
    \ #numbers do\n      if numbers[i + 1] > max_element then\n        max_element\
    \ = numbers[i + 1]\n        max_element_index = i + 1\n      end\n      i = i\
    \ + 1\n    end\n    table.insert(rolling_max, max_element)\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750369
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local value = numbers[i]\n    rolling_max[#rolling_max + 1] = value\n   \
    \ i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9yexbui8.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp9yexbui8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp9yexbui8.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local i = 1\n  while i <= numbers.n do\n    local\
    \ value = numbers[i]\n    local index = i\n    while i + 1 < numbers.n and numbers[i\
    \ + 1] > value do\n      i = i + 1\n    end\n    rolling_max:insert(value)\n \
    \   max_value:insert(value)\n    max_index:insert(index)\n    i = i + 1\n  end\n\
    \  return rolling_max, max_value, max_index\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy_g39xiw.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpy_g39xiw.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpy_g39xiw.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local last_element = numbers.last()\n\
    \  local last_element_index = #numbers - 1\n  local current_element = numbers[last_element_index]\n\
    \  local current_element_index = last_element_index - 1\n  while current_element_index\
    \ > 0 do\n    local next_element = numbers[current_element_index]\n    if next_element\
    \ > current_element then\n      rolling_max:insert(current_element)\n      current_element\
    \ = next_element\n    else\n      current_element = current_element - 1\n    end\n\
    \    current_element_index = current_element_index - 1\n  end\n  rolling_max:insert(current_element)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp59c1p2ef.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp59c1p2ef.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp59c1p2ef.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local\
    \ max_index = 1\n  for i = 2, #numbers do\n    if numbers[i] > max_value then\n\
    \      rolling_max:insert(max_value)\n      max_value = numbers[i]\n      max_index\
    \ = i\n    end\n    rolling_max:insert(numbers[i])\n  end\n  rolling_max:insert(max_value)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzny19te0.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpzny19te0.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpzny19te0.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local\
    \ max_index = 1\n  for i = 2, #numbers do\n    if numbers[i] ~= max_value then\n\
    \      rolling_max[max_index] = max_value\n      max_value = numbers[i]\n    \
    \  max_index = i\n    end\n  end\n  rolling_max[max_index] = max_value\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpomslxfgg.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpomslxfgg.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpomslxfgg.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 1\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  for i = 1, rolling_max_index\
    \ do\n    rolling_max:insert(numbers[i])\n  end\n  return rolling_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplvuwpmem.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmplvuwpmem.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmplvuwpmem.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local last_number = numbers[1]\n  for\
    \ i = 2, #numbers do\n    if numbers[i] ~= last_number then\n      rolling_max:insert(last_number)\n\
    \      last_number = numbers[i]\n    end\n  end\n  rolling_max:insert(last_number)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg4qdudc9.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpg4qdudc9.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpg4qdudc9.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local value = numbers[i]\n    rolling_max[#rolling_max + 1] = value\n   \
    \ i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9yexbui8.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp9yexbui8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp9yexbui8.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_element = numbers[i]\n    local max_index = i\n    for j = i +\
    \ 1, #numbers do\n      if numbers[j] > max_element then\n        max_element\
    \ = numbers[j]\n        max_index = j\n      end\n    end\n    rolling_max[max_index]\
    \ = max_element\n    i = max_index + 1\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbp8lbjzz.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpbp8lbjzz.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpbp8lbjzz.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_index = 0\n  for i = 1, #numbers\
    \ do\n    local index = i - 1\n    if numbers[index] > numbers[i] then\n     \
    \ rolling_max[max_index] = numbers[index]\n      max_index = index\n    end\n\
    \  end\n  rolling_max[max_index] = numbers[#numbers]\n  return rolling_max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8b4o6ih5.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp8b4o6ih5.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp8b4o6ih5.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:resize(#numbers)\n  for i = 1, #numbers do\n    rolling_max[i]\
    \ = numbers[rolling_max_index]\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwuexuf8z.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpwuexuf8z.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpwuexuf8z.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 1\n  for i =\
    \ 1, #numbers do\n    local max_value = numbers[i]\n    while rolling_max_index\
    \ > 0 and\n           max_value < numbers[rolling_max_index] do\n      rolling_max_index\
    \ = rolling_max_index - 1\n    end\n    rolling_max[rolling_max_index] = max_value\n\
    \    rolling_max_index = rolling_max_index + 1\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpekm99zzh.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpekm99zzh.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpekm99zzh.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_value)\n\
    \  for i = 2, #numbers do\n    rolling_max:insert(numbers[i])\n    rolling_max:insert(numbers[i])\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyff634z.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmphyff634z.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmphyff634z.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  local rolling_max_time = numbers[1]\n  for i = 2, #numbers do\n\
    \    if numbers[i] ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_time = i\n    end\n  end\n  rolling_max_index = rolling_max_time\n\
    \  rolling_max:resize(#numbers)\n  for i = 1, #numbers do\n    rolling_max[i]\
    \ = numbers[i]\n    if rolling_max_index == i then\n      rolling_max[i] = rolling_max_value\n\
    \      rolling_max_index = i + 1\n    end\n  end\n  return rolling_max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqg5_jtbg.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpqg5_jtbg.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpqg5_jtbg.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local value = numbers[i]\n    rolling_max[#rolling_max + 1] = value\n   \
    \ i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9yexbui8.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp9yexbui8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp9yexbui8.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  for i = 1, rolling_max_index\
    \ do\n    rolling_max:insert(numbers[i])\n  end\n  return rolling_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsqi6yqyw.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpsqi6yqyw.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpsqi6yqyw.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local\
    \ max_index = 1\n  for i = 2, #numbers do\n    if numbers[i] > max_value then\n\
    \      max_value = numbers[i]\n      max_index = i\n    end\n  end\n  rolling_max:insert(max_value)\n\
    \  rolling_max:insert(max_index)\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp97172s4y.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp97172s4y.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp97172s4y.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local i = 1\n  while i <= numbers.n do\n    local\
    \ value = numbers[i]\n    local index = i\n    while i + 1 < numbers.n and numbers[i\
    \ + 1] > value do\n      i = i + 1\n    end\n    rolling_max[index] = value\n\
    \    max_value[index] = value\n    max_index[index] = i\n    i = i + 1\n  end\n\
    \  return rolling_max, max_value, max_index\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp57spr736.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp57spr736.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp57spr736.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_element = numbers[i]\n    local max_element_index = i\n    while\
    \ i + 1 < #numbers and numbers[i + 1] > max_element do\n      i = i + 1\n    end\n\
    \    rolling_max[max_element_index] = max_element\n    i = i + 1\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5krjg1hx.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp5krjg1hx.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp5krjg1hx.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_value = numbers[i]\n    for j = i - 1, i - 2, i - 3, i - 4, i -\
    \ 5, i - 6, i - 7, i - 8, i - 9, i - 10, i - 11, i - 12, i - 13, i - 14, i - 15,\
    \ i - 16, i - 17, i - 18, i - 19, i - 20, i - 21, i - 22, i - 23, i - 24, i -\
    \ 25, i - 26, i - 27, i - 28, i - 29, i - 30, i - 31, i - 32, i - 33, i - 34,\
    \ i - 35, i - 36, i - 37, i - 38, i - 39, i - 40, i - 41, i - 42, i - 43, i -\
    \ 44, i - 45, i - 46, i - 47, i - 48, i - 49, i - 50, i - 51, i - 52, i - 53,\
    \ i - 54, i - 55, i - 56, i - 57, i - 58, i - 59, i - 60, i - 61, i - 62, i -\
    \ 63, i - 64, i - 65, i - 66, i - 67, i - 68, i - 69, i - 70, i - 71, i - 72,\
    \ i - 73, i - 74, i - 75, i - 76, i - 77, i - 78, i - 79, i - 80, i - 81, i -\
    \ 82, i - 83, i - 84, i - 85, i - 86, i - 87, i - 88, i - 89, i - 90, i - 91,\
    \ i - 92, i - 93, i - 94, i - 95, i - 96, i - 97, i - 98, i - 99, i - 100, i -\
    \ 101, i - 102, i - 103, i - 104, i - 105, i - 106, i - 107, i - 108, i - 109,\
    \ i - 110, i - 111, i - 112, i - 113, i - 114, i - 115, i - 116, i - 117, i -\
    \ 118, i - 119, i - 120, i - 121, i - 122, i - 123, i - 124, i - 125, i - 126,\
    \ i - 127, i - 128, i - 129, i - 130, i - 131, i - 132, i - 133, i - 134, i -\
    \ 135, i - 136, i - 137, i - 138, i - 139, i - 140, i - 141, i - 142, i - 143,\
    \ i - 144, i - 145, i - 146, i - 147, i - 148, i - 149, i - 150, i - 151, i -\
    \ 152, i - 153, i - 154, i - 155, i - 156, i - 157, i - 158, i - 159, i - 160,\
    \ i - 161, i - 162, i - 163, i - 164, i - 165, i - 166, i - 167, i - 168, i -\
    \ 169, i - 170, i - 171, i - 172, i - 173, i - 174, i - 175, i - 176, i - 177,\
    \ i - 178, i - 179, i - 180, i - 181, i - 182, i - 183, i - 184, i - 185, i -\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprj_kmo95.lua:10: ''do'' expected near '',''

    '
  stdout: ''
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local element = numbers[i]\n    rolling_max[#rolling_max + 1] = element\n\
    \    i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8rxvl_k2.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp8rxvl_k2.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp8rxvl_k2.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local\
    \ max_index = 1\n  for i = 2, #numbers do\n    if numbers[i] ~= max_value then\n\
    \      rolling_max[max_index] = max_value\n      max_value = numbers[i]\n    \
    \  max_index = i\n    end\n  end\n  rolling_max[max_index] = max_value\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpomslxfgg.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpomslxfgg.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpomslxfgg.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local max_index = 0\n  local max_value = numbers[1]\n\
    \  for i = 2, #numbers do\n    if numbers[i] > max_value then\n      max_value\
    \ = numbers[i]\n      max_index = i\n    end\n  end\n  rolling_max[max_index]\
    \ = max_value\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl4w42u15.lua:23:\
    \ expected: {1, 2, 3, 4}\nactual: {4=4}\nstack traceback:\n\t/tmp/tmpl4w42u15.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local index = 1\n  while true do\n   \
    \ local element = numbers[index]\n    index = index + 1\n    if element > rolling_max[#rolling_max]\
    \ then\n      rolling_max[#rolling_max] = element\n    end\n    if index > #numbers\
    \ then\n      break\n    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt48x_ndy.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpt48x_ndy.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpt48x_ndy.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local value = numbers[i]\n    rolling_max:insert(value)\n    i = i + 1\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzkikcafv.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpzkikcafv.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpzkikcafv.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_element = numbers[i]\n    local max_element_index = i\n    while\
    \ i + 1 < #numbers do\n      if numbers[i + 1] > max_element then\n        max_element\
    \ = numbers[i + 1]\n        max_element_index = i + 1\n      end\n      i = i\
    \ + 1\n    end\n    rolling_max:insert(max_element)\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcextimg7.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpcextimg7.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpcextimg7.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local\
    \ max_index = 1\n  for i = 2, #numbers do\n    if numbers[i] > max_value then\n\
    \      rolling_max:insert(max_value)\n      max_value = numbers[i]\n      max_index\
    \ = i\n    end\n  end\n  rolling_max:insert(max_value)\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeh4vbde3.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpeh4vbde3.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpeh4vbde3.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local last_value = numbers.last()\n  local\
    \ last_index = #numbers - 1\n  local current_value = numbers[last_index]\n  local\
    \ current_index = last_index\n  while current_index > 1 do\n    current_value\
    \ = numbers[current_index]\n    if current_value > last_value then\n      rolling_max:insert(current_value)\n\
    \    end\n    last_value = current_value\n    last_index = current_index - 1\n\
    \    current_index = current_index - 1\n  end\n  rolling_max:insert(last_value)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3y9m5d88.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp3y9m5d88.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp3y9m5d88.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local value = numbers[i]\n    rolling_max[#rolling_max + 1] = value\n   \
    \ i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9yexbui8.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp9yexbui8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp9yexbui8.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local value = numbers[i]\n    rolling_max[#rolling_max + 1] = value\n   \
    \ i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9yexbui8.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp9yexbui8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp9yexbui8.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local\
    \ max_index = 1\n  for i = 2, #numbers do\n    if numbers[i] ~= max_value then\n\
    \      rolling_max[max_index] = numbers[i]\n      max_value = numbers[i]\n   \
    \   max_index = i\n    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpclotatbq.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpclotatbq.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpclotatbq.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_element = numbers[i]\n    local max_index = i\n    for j = i +\
    \ 1, #numbers do\n      if numbers[j] > max_element then\n        max_element\
    \ = numbers[j]\n        max_index = j\n      end\n    end\n    rolling_max[max_index]\
    \ = max_element\n    i = max_index + 1\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbp8lbjzz.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpbp8lbjzz.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpbp8lbjzz.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_value = numbers[i]\n    local max_index = i\n    for j = i + 1,\
    \ #numbers do\n      if numbers[j] > max_value then\n        max_value = numbers[j]\n\
    \        max_index = j\n      end\n    end\n    rolling_max[max_index] = max_value\n\
    \    i = max_index + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7zxpfrs9.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp7zxpfrs9.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp7zxpfrs9.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    rolling_max[i] = numbers[i]\n    i = i + 1\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgtmv820n.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpgtmv820n.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpgtmv820n.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] < rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0owrsetw.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp0owrsetw.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp0owrsetw.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  for i\
    \ = 2, #numbers do\n    if numbers[i] > max_value then\n      rolling_max = numbers:copy(i,\
    \ i - 1)\n      max_value = numbers[i]\n    end\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf0pviq72.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpf0pviq72.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpf0pviq72.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_value = numbers[i]\n    for j = i - 1, i - 1, -1 do\n      if numbers[j]\
    \ > max_value then\n        max_value = numbers[j]\n      end\n    end\n    rolling_max:insert(max_value)\n\
    \    i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi6xvvdit.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpi6xvvdit.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpi6xvvdit.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local i = 1\n  while i <= #numbers do\n    local\
    \ value = numbers[i]\n    if value > max_value then\n      rolling_max:insert(max_value)\n\
    \      max_value:copy(max_value)\n      max_index:copy(i)\n    end\n    max_value\
    \ = math.max(max_value, value)\n    i = i + 1\n  end\n  return rolling_max, max_value,\
    \ max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxx1n0was.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpxx1n0was.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpxx1n0was.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local element = numbers[i]\n    rolling_max[#rolling_max + 1] = element\n\
    \    i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8rxvl_k2.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp8rxvl_k2.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp8rxvl_k2.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_value = numbers[i]\n    local max_index = i\n    for j = i + 1,\
    \ #numbers do\n      if numbers[j] > max_value then\n        max_value = numbers[j]\n\
    \        max_index = j\n      end\n    end\n    rolling_max[max_index] = max_value\n\
    \    i = max_index + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7zxpfrs9.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp7zxpfrs9.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp7zxpfrs9.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_value)\n\
    \  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_value)\n\
    \  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_value)\n\
    \  rolling_max:insert(rolling_max_value)\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbbmr90sy.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpbbmr90sy.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpbbmr90sy.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local element = numbers[i]\n    rolling_max[#rolling_max + 1] = element\n\
    \    i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8rxvl_k2.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp8rxvl_k2.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp8rxvl_k2.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max[rolling_max_index] = rolling_max_value\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max[rolling_max_index]\
    \ = rolling_max_value\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp22cqzfm2.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp22cqzfm2.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp22cqzfm2.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local\
    \ max_index = 1\n  local max_index2 = 0\n  for i = 2, #numbers do\n    if numbers[i]\
    \ ~= max_value then\n      rolling_max:insert(max_value)\n      max_value = numbers[i]\n\
    \      max_index = i\n      max_index2 = i\n    end\n  end\n  rolling_max:insert(max_value)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2oqn3_r6.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp2oqn3_r6.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp2oqn3_r6.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local index = 1\n  local max_value = numbers[1]\n\
    \  local max_index = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~=\
    \ max_value then\n      rolling_max:insert(max_value)\n      max_value = numbers[i]\n\
    \      max_index = i\n    end\n    rolling_max:insert(numbers[i])\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphdg1kuep.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmphdg1kuep.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmphdg1kuep.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  local rolling_max_time = numbers[1]\n  for i = 2, #numbers do\n\
    \    if numbers[i] ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_time = i\n    end\n  end\n  rolling_max_index = rolling_max_time\n\
    \  for i = 1, #numbers do\n    if numbers[i] ~= rolling_max_value then\n     \
    \ rolling_max_value = numbers[i]\n      rolling_max_time = i\n    end\n  end\n\
    \  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_time)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc07mqios.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpc07mqios.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpc07mqios.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_value = numbers[i]\n    local max_index = i\n    for j = i + 1,\
    \ #numbers do\n      if numbers[j] > max_value then\n        max_value = numbers[j]\n\
    \        max_index = j\n      end\n    end\n    rolling_max[max_index] = max_value\n\
    \    i = max_index + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7zxpfrs9.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp7zxpfrs9.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp7zxpfrs9.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local last_value = numbers[1]\n  for i\
    \ = 2, #numbers do\n    local value = numbers[i]\n    if value > last_value then\n\
    \      rolling_max:insert(last_value)\n      last_value = value\n    else\n  \
    \    last_value = value\n    end\n  end\n  rolling_max:insert(last_value)\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqbe9_2hz.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpqbe9_2hz.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpqbe9_2hz.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  for i\
    \ = 2, #numbers do\n    if numbers[i] > max_value then\n      rolling_max:insert(max_value)\n\
    \      max_value = numbers[i]\n    else\n      rolling_max:insert(numbers[i])\n\
    \    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl5nrycdw.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpl5nrycdw.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpl5nrycdw.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local value = numbers[i]\n    rolling_max[#rolling_max + 1] = value\n   \
    \ i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9yexbui8.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp9yexbui8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp9yexbui8.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local\
    \ max_index = 1\n  for i = 2, #numbers do\n    if numbers[i] > max_value then\n\
    \      max_value = numbers[i]\n      max_index = i\n    end\n  end\n  rolling_max:insert(max_value)\n\
    \  rolling_max:insert(max_index)\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp97172s4y.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp97172s4y.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp97172s4y.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 1\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6br1hs_b.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp6br1hs_b.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp6br1hs_b.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max[rolling_max_index] = rolling_max_value\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max[rolling_max_index]\
    \ = rolling_max_value\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp22cqzfm2.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp22cqzfm2.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp22cqzfm2.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local\
    \ max_index = 1\n  for i = 2, #numbers do\n    if numbers[i] > max_value then\n\
    \      max_value = numbers[i]\n      max_index = i\n    end\n  end\n  rolling_max:insert(max_value)\n\
    \  rolling_max:insert(max_index)\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp97172s4y.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp97172s4y.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp97172s4y.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local last_value = numbers.last()\n  local\
    \ last_index = #numbers - 1\n  local current_index = 1\n  local current_value\
    \ = numbers[current_index]\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppl3kjv0v.lua:21: ''end'' expected (to close ''function'' at
    line 5) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local last_element\n  for i = 1, #numbers\
    \ do\n    if last_element and last_element < numbers[i] then\n      rolling_max:insert(last_element)\n\
    \    else\n      rolling_max:insert(numbers[i])\n    end\n    last_element = numbers[i]\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk2n2puz6.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpk2n2puz6.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpk2n2puz6.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local index = 1\n  local max_value = numbers[1]\n\
    \  local max_index = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~=\
    \ max_value then\n      rolling_max:insert(max_value)\n      index = i\n     \
    \ max_value = numbers[i]\n      max_index = numbers[i]\n    else\n      max_value\
    \ = max_value + numbers[i]\n      index = index + 1\n    end\n  end\n  rolling_max:insert(max_value)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf9uc7krl.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpf9uc7krl.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpf9uc7krl.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  for i\
    \ = 2, #numbers do\n    if numbers[i] > max_value then\n      rolling_max = numbers:copy(i,\
    \ #numbers)\n      max_value = numbers[i]\n    end\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6t0tqk_d.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp6t0tqk_d.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp6t0tqk_d.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:resize(#numbers)\n  for i = 1, #numbers do\n    rolling_max[rolling_max_index]\
    \ = numbers[i]\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpth1x6ze8.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpth1x6ze8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpth1x6ze8.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local i = 1\n  while i <= #numbers do\n    local\
    \ value = numbers[i]\n    local index = i\n    while i + 1 < #numbers do\n   \
    \   local next_value = numbers[i + 1]\n      if next_value > value then\n    \
    \    value = next_value\n        index = i + 1\n      else\n        break\n  \
    \    end\n      i = i + 1\n    end\n    rolling_max:insert(value)\n    max_value:insert(value)\n\
    \    max_index:insert(index)\n  end\n  return rolling_max, max_value, max_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ag8unsl.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp4ag8unsl.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp4ag8unsl.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_element = numbers[i]\n    local max_index = i\n    for j = i +\
    \ 1, #numbers do\n      if numbers[j] > max_element then\n        max_element\
    \ = numbers[j]\n        max_index = j\n      end\n    end\n    rolling_max[max_index]\
    \ = max_element\n    i = max_index + 1\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbp8lbjzz.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpbp8lbjzz.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpbp8lbjzz.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local index = 1\n  local max_value = numbers[1]\n\
    \  local max_index = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~=\
    \ max_value then\n      rolling_max:insert(max_value)\n      index = i\n     \
    \ max_value = numbers[i]\n      max_index = numbers[i]\n    else\n      max_value\
    \ = max_value + numbers[i]\n      rolling_max:insert(max_value)\n    end\n  end\n\
    \  rolling_max:insert(max_value)\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe47lt8ey.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpe47lt8ey.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpe47lt8ey.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_element = numbers[i]\n    local max_element_index = i\n    while\
    \ i + 1 < #numbers and numbers[i + 1] > max_element do\n      i = i + 1\n    end\n\
    \    rolling_max[max_element_index] = max_element\n    i = i + 1\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5krjg1hx.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp5krjg1hx.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp5krjg1hx.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_element = numbers[i]\n    local max_element_index = i\n    for\
    \ j = i + 1, #numbers do\n      if numbers[j] > max_element then\n        max_element\
    \ = numbers[j]\n        max_element_index = j\n      end\n    end\n    rolling_max[max_element_index]\
    \ = max_element\n    i = max_element_index + 1\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt24lszgg.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpt24lszgg.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpt24lszgg.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local\
    \ max_index = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > max_value\
    \ then\n      max_value = numbers[i]\n      max_index = i\n    end\n  end\n  rolling_max:insert(max_value)\n\
    \  rolling_max:insert(max_index)\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps_9_72ll.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmps_9_72ll.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmps_9_72ll.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  for i\
    \ = 2, #numbers do\n    if numbers[i] > max_value then\n      rolling_max = numbers[i]\n\
    \      max_value = numbers[i]\n    end\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeqytq6ds.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpeqytq6ds.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpeqytq6ds.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  for i = 1, rolling_max_index\
    \ do\n    rolling_max:insert(numbers[i])\n  end\n  return rolling_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsqi6yqyw.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpsqi6yqyw.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpsqi6yqyw.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local max_value = nil\n  for _, value in ipairs(numbers)\
    \ do\n    if max_value == nil then\n      max_value = value\n    else\n      if\
    \ value > max_value then\n        max_value = value\n      end\n    end\n    table.insert(rolling_max,\
    \ max_value)\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_value = numbers[i]\n    local max_index = i\n    for j = i + 1,\
    \ #numbers do\n      if numbers[j] > max_value then\n        max_value = numbers[j]\n\
    \        max_index = j\n      end\n    end\n    rolling_max[max_index] = max_value\n\
    \    i = max_index + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7zxpfrs9.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp7zxpfrs9.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp7zxpfrs9.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local max_value = numbers[1]\n  for i = 2, #numbers\
    \ do\n    if numbers[i] ~= max_value then\n      rolling_max[max_value] = max_value\n\
    \      max_value = numbers[i]\n    else\n      rolling_max[numbers[i]] = numbers[i]\n\
    \    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyfg3nmkn.lua:23:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 2, 3}\nstack traceback:\n\t/tmp/tmpyfg3nmkn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  for i\
    \ = 2, #numbers do\n    if numbers[i] > max_value then\n      rolling_max:insert(max_value)\n\
    \      max_value = numbers[i]\n    else\n      max_value = max_value .. \", \"\
    \ .. numbers[i]\n    end\n  end\n  rolling_max:insert(max_value)\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfa2or2dx.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpfa2or2dx.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpfa2or2dx.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local\
    \ max_index = 1\n  for i = 2, #numbers do\n    if numbers[i] ~= max_value then\n\
    \      rolling_max:insert(max_value)\n      max_value = numbers[i]\n      max_index\
    \ = i\n    end\n  end\n  rolling_max:insert(max_value)\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq55ti_rv.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpq55ti_rv.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpq55ti_rv.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local max_value = numbers[i]\n\
    \    for j = i - 1, -1, -1 do\n      if numbers[j] > max_value then\n        max_value\
    \ = numbers[j]\n      end\n    end\n    table.insert(rolling_max, max_value)\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpymmk7ooc.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpymmk7ooc.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpymmk7ooc.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local element = numbers[i]\n    rolling_max[i] = element\n    i = i + 1\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnofbgoa6.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpnofbgoa6.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpnofbgoa6.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local\
    \ max_index = 1\n  for i = 2, #numbers do\n    if numbers[i] ~= max_value then\n\
    \      rolling_max:insert(max_value)\n      max_value = numbers[i]\n      max_index\
    \ = i\n    end\n  end\n  rolling_max:insert(max_value)\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq55ti_rv.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpq55ti_rv.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpq55ti_rv.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local value = numbers[i]\n    rolling_max:insert(value)\n    i = i + 1\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzkikcafv.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpzkikcafv.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpzkikcafv.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local last_value\n  local last_index\n\
    \  for i = 1, #numbers do\n    if numbers[i] ~= last_value then\n      rolling_max:insert(numbers[i])\n\
    \      last_value = numbers[i]\n      last_index = i\n    end\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcjmu_h9i.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpcjmu_h9i.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpcjmu_h9i.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local i = 1\n  while i <= #numbers do\n    local\
    \ value = numbers[i]\n    if value > max_value then\n      max_value = value\n\
    \      max_index = i\n    end\n    rolling_max:insert(max_value)\n    rolling_max:insert(max_index)\n\
    \    i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprqev5dkq.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmprqev5dkq.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmprqev5dkq.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 1\n  local max_element\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > max_element then\n\
    \      rolling_max_index = i\n      max_element = numbers[i]\n    end\n    rolling_max[rolling_max_index]\
    \ = max_element\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphouo76v1.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmphouo76v1.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmphouo76v1.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_element = numbers[i]\n    for j = i - 1, i - 1, -1 do\n      if\
    \ numbers[j] > max_element then\n        max_element = numbers[j]\n      end\n\
    \    end\n    rolling_max:insert(max_element)\n    i = i + 1\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2y2varir.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp2y2varir.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp2y2varir.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local\
    \ max_index = 1\n  for i = 2, #numbers do\n    if numbers[i] > max_value then\n\
    \      rolling_max:insert(max_value)\n      max_value = numbers[i]\n      max_index\
    \ = i\n    end\n    rolling_max:insert(numbers[i])\n  end\n  rolling_max:insert(max_value)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzny19te0.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpzny19te0.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpzny19te0.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_element = numbers[i]\n    for j = i - 1, i - 1, -1 do\n      if\
    \ numbers[j] > max_element then\n        max_element = numbers[j]\n      end\n\
    \    end\n    rolling_max:insert(max_element)\n    i = i + 1\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2y2varir.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp2y2varir.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp2y2varir.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local last_element\n  for i = 1, #numbers\
    \ do\n    local element = numbers[i]\n    if last_element then\n      rolling_max[#rolling_max\
    \ + 1] = element > last_element and element or last_element\n    end\n    last_element\
    \ = element\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3r3mfhwx.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp3r3mfhwx.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp3r3mfhwx.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers.first()\n  local\
    \ max_index = nil\n  for i = 1, numbers.n do\n    if numbers[i] ~= max_value then\n\
    \      rolling_max:insert(max_value)\n      max_value = numbers[i]\n      max_index\
    \ = i\n    end\n  end\n  if max_index then\n    rolling_max:insert(max_value)\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4604hst7.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp4604hst7.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp4604hst7.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local index = 1\n  local max_value = numbers[1]\n\
    \  rolling_max:insert(numbers[1])\n  for i = 2, #numbers do\n    if numbers[i]\
    \ ~= max_value then\n      rolling_max:insert(numbers[i])\n      index = i\n \
    \     max_value = numbers[i]\n    end\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp073mfd1t.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp073mfd1t.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp073mfd1t.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  for i\
    \ = 2, #numbers do\n    if numbers[i] > max_value then\n      rolling_max = numbers[i\
    \ - 1], max_value\n    else\n      rolling_max = numbers[i], max_value\n    end\n\
    \    max_value = rolling_max\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsnyauonc.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpsnyauonc.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpsnyauonc.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_element = numbers[i]\n    local max_element_index = i\n    while\
    \ i + 1 < #numbers do\n      if numbers[i + 1] > max_element then\n        max_element\
    \ = numbers[i + 1]\n        max_element_index = i + 1\n      end\n      i = i\
    \ + 1\n    end\n    rolling_max:insert(max_element)\n    i = max_element_index\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5cbp9rkn.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp5cbp9rkn.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp5cbp9rkn.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 1\n  local rolling_max_value\
    \ = numbers[1]\n  local rolling_max_count = 0\n  for i = 2, #numbers do\n    if\
    \ numbers[i] ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_index = i\n      rolling_max_count = rolling_max_count + 1\n\
    \    end\n  end\n  rolling_max:resize(rolling_max_index)\n  for i = 1, rolling_max_count\
    \ do\n    rolling_max[rolling_max_index - i] = rolling_max_value\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps5p3tyg2.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmps5p3tyg2.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmps5p3tyg2.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  for i\
    \ = 2, #numbers do\n    if numbers[i] > max_value then\n      rolling_max:insert(max_value)\n\
    \      max_value = numbers[i]\n    else\n      max_value = max_value .. \", \"\
    \ .. numbers[i]\n    end\n  end\n  rolling_max:insert(max_value)\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfa2or2dx.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpfa2or2dx.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpfa2or2dx.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 1\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6br1hs_b.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp6br1hs_b.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp6br1hs_b.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers.first()\n  for\
    \ i = 1, numbers.next() do\n    local value = numbers[i]\n    if value > max_value\
    \ then\n      rolling_max = rolling_max.new()\n      max_value = value\n    end\n\
    \    rolling_max:insert(value)\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8nfuzz16.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp8nfuzz16.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp8nfuzz16.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local max_value = nil\n  for i = 1, #numbers do\n\
    \    if max_value == nil then\n      max_value = numbers[i]\n    else\n      if\
    \ numbers[i] > max_value then\n        max_value = numbers[i]\n      end\n   \
    \ end\n    table.insert(rolling_max, max_value)\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local last_value\n  for i = 1, #numbers\
    \ do\n    if numbers[i] ~= last_value then\n      rolling_max:insert(numbers[i])\n\
    \      last_value = numbers[i]\n    end\n  end\n  return rolling_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5eb5o6g2.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp5eb5o6g2.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp5eb5o6g2.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  for i\
    \ = 2, #numbers do\n    if numbers[i] > max_value then\n      rolling_max:insert(max_value)\n\
    \      max_value = numbers[i]\n    else\n      max_value = max_value .. \", \"\
    \ .. numbers[i]\n    end\n  end\n  rolling_max:insert(max_value)\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfa2or2dx.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpfa2or2dx.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpfa2or2dx.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_element = numbers[i]\n    for j = i - 1, i - 2, i - 3, i - 4, i\
    \ - 5, i - 6, i - 7, i - 8, i - 9, i - 10, i - 11, i - 12, i - 13, i - 14, i -\
    \ 15, i - 16, i - 17, i - 18, i - 19, i - 20, i - 21, i - 22, i - 23, i - 24,\
    \ i - 25, i - 26, i - 27, i - 28, i - 29, i - 30, i - 31, i - 32, i - 33, i -\
    \ 34, i - 35, i - 36, i - 37, i - 38, i - 39, i - 40, i - 41, i - 42, i - 43,\
    \ i - 44, i - 45, i - 46, i - 47, i - 48, i - 49, i - 50, i - 51, i - 52, i -\
    \ 53, i - 54, i - 55, i - 56, i - 57, i - 58, i - 59, i - 60, i - 61, i - 62,\
    \ i - 63, i - 64, i - 65, i - 66, i - 67, i - 68, i - 69, i - 70, i - 71, i -\
    \ 72, i - 73, i - 74, i - 75, i - 76, i - 77, i - 78, i - 79, i - 80, i - 81,\
    \ i - 82, i - 83, i - 84, i - 85, i - 86, i - 87, i - 88, i - 89, i - 90, i -\
    \ 91, i - 92, i - 93, i - 94, i - 95, i - 96, i - 97, i - 98, i - 99, i - 100,\
    \ i - 101, i - 102, i - 103, i - 104, i - 105, i - 106, i - 107, i - 108, i -\
    \ 109, i - 110, i - 111, i - 112, i - 113, i - 114, i - 115, i - 116, i - 117,\
    \ i - 118, i - 119, i - 120, i - 121, i - 122, i - 123, i - 124, i - 125, i -\
    \ 126, i - 127, i - 128, i - 129, i - 130, i - 131, i - 132, i - 133, i - 134,\
    \ i - 135, i - 136, i - 137, i - 138, i - 139, i - 140, i - 141, i - 142, i -\
    \ 143, i - 144, i - 145, i - 146, i - 147, i - 148, i - 149, i - 150, i - 151,\
    \ i - 152, i - 153, i - 154, i - 155, i - 156, i - 157, i - 158, i - 159, i -\
    \ 160, i - 161, i - 162, i - 163, i - 164, i - 165, i - 166, i - 167, i - 168,\
    \ i - 169, i - 170, i - 171, i - 172, i - 173, i - 174, i - 175, i - 176, i -\
    \ 177, i - 178, i - 179, i - 180, i - 181, i - 182, i - 183, i - 184, i - 185,\
    \ i - \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxpcv1ahi.lua:10: ''do'' expected near '',''

    '
  stdout: ''
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    rolling_max:insert(numbers[i])\n    i = i + 1\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1khmncnt.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp1khmncnt.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp1khmncnt.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_element = numbers[i]\n    for j = i - 1, i - 2, i - 3, i - 4, i\
    \ - 5, i - 6, i - 7, i - 8, i - 9, i - 10, i - 11, i - 12, i - 13, i - 14, i -\
    \ 15, i - 16, i - 17, i - 18, i - 19, i - 20, i - 21, i - 22, i - 23, i - 24,\
    \ i - 25, i - 26, i - 27, i - 28, i - 29, i - 30, i - 31, i - 32, i - 33, i -\
    \ 34, i - 35, i - 36, i - 37, i - 38, i - 39, i - 40, i - 41, i - 42, i - 43,\
    \ i - 44, i - 45, i - 46, i - 47, i - 48, i - 49, i - 50, i - 51, i - 52, i -\
    \ 53, i - 54, i - 55, i - 56, i - 57, i - 58, i - 59, i - 60, i - 61, i - 62,\
    \ i - 63, i - 64, i - 65, i - 66, i - 67, i - 68, i - 69, i - 70, i - 71, i -\
    \ 72, i - 73, i - 74, i - 75, i - 76, i - 77, i - 78, i - 79, i - 80, i - 81,\
    \ i - 82, i - 83, i - 84, i - 85, i - 86, i - 87, i - 88, i - 89, i - 90, i -\
    \ 91, i - 92, i - 93, i - 94, i - 95, i - 96, i - 97, i - 98, i - 99, i - 100,\
    \ i - 101, i - 102, i - 103, i - 104, i - 105, i - 106, i - 107, i - 108, i -\
    \ 109, i - 110, i - 111, i - 112, i - 113, i - 114, i - 115, i - 116, i - 117,\
    \ i - 118, i - 119, i - 120, i - 121, i - 122, i - 123, i - 124, i - 125, i -\
    \ 126, i - 127, i - 128, i - 129, i - 130, i - 131, i - 132, i - 133, i - 134,\
    \ i - 135, i - 136, i - 137, i - 138, i - 139, i - 140, i - 141, i - 142, i -\
    \ 143, i - 144, i - 145, i - 146, i - 147, i - 148, i - 149, i - 150, i - 151,\
    \ i - 152, i - 153, i - 154, i - 155, i - 156, i - 157, i - 158, i - 159, i -\
    \ 160, i - 161, i - 162, i - 163, i - 164, i - 165, i - 166, i - 167, i - 168,\
    \ i - 169, i - 170, i - 171, i - 172, i - 173, i - 174, i - 175, i - 176, i -\
    \ 177, i - 178, i - 179, i - 180, i - 181, i - 182, i - 183, i - 184, i - 185,\
    \ i - \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxpcv1ahi.lua:10: ''do'' expected near '',''

    '
  stdout: ''
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local element = numbers[i]\n    rolling_max[#rolling_max + 1] = element\n\
    \    i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8rxvl_k2.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp8rxvl_k2.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp8rxvl_k2.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local max_time = numbers.new()\n  local max_value\
    \ = numbers.new()\n  local max_index = numbers.new()\n  local max_time = numbers.new()\n\
    \  local max_value = numbers.new()\n  local max_index = numbers.new()\n  local\
    \ max_time = numbers.new()\n  local max_value = numbers.new()\n  local max_index\
    \ = numbers.new()\n  local max_time = numbers.new()\n  local max_value = numbers.new()\n\
    \  local max_index = numbers.new()\n  local max_time = numbers.new()\n  local\
    \ max_value = numbers.new()\n  local max_index = numbers.new()\n  local max_time\
    \ = numbers.new()\n  local max_value = numbers.new()\n  local max_index = numbers.new()\n\
    \  local max_time = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local max_time = numbers.new()\n  local max_value\
    \ = numbers.new()\n  local max_index = numbers.new()\n  local max_time = numbers.new()\n\
    \  local max_value = numbers.new()\n  local max_index = numbers.new()\n  local\
    \ max_time = numbers.new()\n  local max_value = numbers.new()\n  local max_index\
    \ = numbers.new()\n  local max_time = numbers.new()\n  local max_value = numbers.new()\n\
    \  local max_index = numbers.new()\n  local max_time = numbers.new()\n  local\
    \ max_value = numbers.new()\n  local max_index = numbers.new()\n  local max_time\
    \ = numbers.new()\n  local max_value = numbers.new()\n  local max_index = numbers.new()\n\
    \  local max_time = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local max_time = numbers.new()\n  local max_value\
    \ = numbers.new()\n  local max_index = numbers.new()\n  local max_time = numbers.new()\n\
    \  local max_value = numbers.new()\n  local max_index = numbers.new()\n  local\
    \ max_time = numbers.new()\n  local max_value = numbers.new()\n  local max_index\
    \ = numbers.new()\n  local max_time = numbers.new()\n  local max_value = numbers.new()\n\
    \  local max_index = numbers.new()\n  local max_time = numbers.new()\n  local\
    \ max_value = numbers.new()\n  local max_index = numbers.new()\n  local max_time\
    \ = numbers.new()\n  local max_value = numbers.new()\n  local max_index = numbers.new()\n\
    \  local max_time = numbers.new()\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptbr71k2w.lua:80: ''end'' expected (to close ''function'' at
    line 5) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local value = numbers[i]\n    rolling_max[#rolling_max + 1] = value\n   \
    \ i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9yexbui8.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp9yexbui8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp9yexbui8.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local\
    \ max_index = 1\n  for i = 2, #numbers do\n    if numbers[i] > max_value then\n\
    \      rolling_max[max_index] = max_value\n      max_value = numbers[i]\n    \
    \  max_index = i\n    end\n  end\n  rolling_max[max_index] = max_value\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt63ijial.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpt63ijial.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpt63ijial.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_value = numbers[i]\n    local max_index = i\n    for j = i + 1,\
    \ #numbers do\n      if numbers[j] > max_value then\n        max_value = numbers[j]\n\
    \        max_index = j\n      end\n    end\n    rolling_max:insert(max_value)\n\
    \    i = max_index + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwj90z8gk.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpwj90z8gk.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpwj90z8gk.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max[rolling_max_index] = rolling_max_value\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max[rolling_max_index]\
    \ = rolling_max_value\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcsqi1_dw.lua:24:\
    \ expected: {1, 2, 3, 4}\nactual: {0=1, 2=2, 3=3, 4=4}\nstack traceback:\n\t/tmp/tmpcsqi1_dw.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_value = numbers[i]\n    local max_index = i\n    for j = i + 1,\
    \ #numbers do\n      if numbers[j] > max_value then\n        max_value = numbers[j]\n\
    \        max_index = j\n      end\n    end\n    rolling_max[max_index] = max_value\n\
    \    i = max_index + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7zxpfrs9.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp7zxpfrs9.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp7zxpfrs9.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  for i\
    \ = 2, #numbers do\n    if numbers[i] > max_value then\n      rolling_max = rolling_max.new(max_value)\n\
    \      max_value = numbers[i]\n    end\n    rolling_max = rolling_max.new(numbers[i])\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv78h0yt9.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpv78h0yt9.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpv78h0yt9.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  for i\
    \ = 2, #numbers do\n    if numbers[i] > max_value then\n      rolling_max = numbers[i]\n\
    \      max_value = numbers[i]\n    else\n      rolling_max = rolling_max .. \"\
    , \" .. numbers[i]\n    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc3virxr1.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpc3virxr1.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpc3virxr1.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_element = numbers[i]\n    local max_element_index = i\n    while\
    \ i + 1 < #numbers and numbers[i + 1] > max_element do\n      i = i + 1\n    end\n\
    \    rolling_max[max_element_index] = max_element\n    i = i + 1\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5krjg1hx.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp5krjg1hx.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp5krjg1hx.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_element = numbers[i]\n    local max_index = i\n    for j = i +\
    \ 1, #numbers do\n      if numbers[j] > max_element then\n        max_element\
    \ = numbers[j]\n        max_index = j\n      end\n    end\n    rolling_max[max_index]\
    \ = max_element\n    i = max_index + 1\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbp8lbjzz.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpbp8lbjzz.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpbp8lbjzz.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local index = 1\n  local max_value = numbers[1]\n\
    \  rolling_max:insert(max_value)\n  for i = 2, #numbers do\n    if numbers[i]\
    \ ~= max_value then\n      rolling_max:insert(numbers[i])\n      index = i\n \
    \     max_value = numbers[i]\n    end\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5mhj7blz.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp5mhj7blz.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp5mhj7blz.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeljo383l.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpeljo383l.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpeljo383l.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local index = 1\n  local max_value = numbers[1]\n\
    \  local max_index = numbers[1]\n  local max_number = numbers[1]\n  for i = 2,\
    \ #numbers do\n    if numbers[i] ~= max_number then\n      rolling_max:insert(max_number)\n\
    \      index = index + 1\n      max_value = numbers[i]\n      max_index = i\n\
    \      max_number = numbers[i]\n    else\n      rolling_max:insert(numbers[i])\n\
    \    end\n  end\n  rolling_max:insert(max_number)\n  return rolling_max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf_j0fjp8.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpf_j0fjp8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpf_j0fjp8.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_value = numbers[i]\n    for j = i - 1, i - 1, -1 do\n      if numbers[j]\
    \ > max_value then\n        max_value = numbers[j]\n      end\n    end\n    rolling_max:insert(max_value)\n\
    \    i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi6xvvdit.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpi6xvvdit.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpi6xvvdit.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 1\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6br1hs_b.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp6br1hs_b.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp6br1hs_b.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_value = numbers[i]\n    for j = i - 1, i - 1, -1 do\n      if numbers[j]\
    \ > max_value then\n        max_value = numbers[j]\n      end\n    end\n    rolling_max:insert(max_value)\n\
    \    i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi6xvvdit.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpi6xvvdit.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpi6xvvdit.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local max_index = 0\n  local max_value = numbers[1]\n\
    \  for i = 2, #numbers do\n    if numbers[i] > max_value then\n      rolling_max[max_index]\
    \ = max_value\n      max_index = i\n      max_value = numbers[i]\n    else\n \
    \     rolling_max[max_index] = numbers[i]\n    end\n  end\n  rolling_max[max_index]\
    \ = max_value\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp63ui5c2.lua:26:\
    \ expected: {1, 2, 3, 4}\nactual: {0=1, 2=2, 3=3, 4=4}\nstack traceback:\n\t/tmp/tmpp63ui5c2.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local last_value = numbers[1]\n  for i\
    \ = 2, #numbers do\n    if numbers[i] ~= last_value then\n      rolling_max:insert(last_value)\n\
    \      last_value = numbers[i]\n    end\n  end\n  return rolling_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq58ymiag.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpq58ymiag.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpq58ymiag.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  for i = 1, rolling_max_index\
    \ do\n    rolling_max:insert(numbers[i])\n  end\n  return rolling_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsqi6yqyw.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpsqi6yqyw.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpsqi6yqyw.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local element = numbers[i]\n    rolling_max[#rolling_max + 1] = element\n\
    \    i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8rxvl_k2.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp8rxvl_k2.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp8rxvl_k2.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local element = numbers[i]\n    rolling_max[#rolling_max + 1] = element\n\
    \    i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8rxvl_k2.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp8rxvl_k2.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp8rxvl_k2.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeljo383l.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpeljo383l.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpeljo383l.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local element = numbers[i]\n    rolling_max[#rolling_max + 1] = element\n\
    \    i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8rxvl_k2.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp8rxvl_k2.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp8rxvl_k2.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local\
    \ max_index = 1\n  for i = 2, #numbers do\n    if numbers[i] ~= max_value then\n\
    \      rolling_max[max_index] = max_value\n      max_value = numbers[i]\n    \
    \  max_index = i\n    end\n  end\n  rolling_max[max_index] = max_value\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpomslxfgg.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpomslxfgg.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpomslxfgg.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeljo383l.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpeljo383l.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpeljo383l.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_value = numbers[i]\n    for j = i - 1, i - 2, i - 3, i - 4, i -\
    \ 5, i - 6, i - 7, i - 8, i - 9, i - 10, i - 11, i - 12, i - 13, i - 14, i - 15,\
    \ i - 16, i - 17, i - 18, i - 19, i - 20, i - 21, i - 22, i - 23, i - 24, i -\
    \ 25, i - 26, i - 27, i - 28, i - 29, i - 30, i - 31, i - 32, i - 33, i - 34,\
    \ i - 35, i - 36, i - 37, i - 38, i - 39, i - 40, i - 41, i - 42, i - 43, i -\
    \ 44, i - 45, i - 46, i - 47, i - 48, i - 49, i - 50, i - 51, i - 52, i - 53,\
    \ i - 54, i - 55, i - 56, i - 57, i - 58, i - 59, i - 60, i - 61, i - 62, i -\
    \ 63, i - 64, i - 65, i - 66, i - 67, i - 68, i - 69, i - 70, i - 71, i - 72,\
    \ i - 73, i - 74, i - 75, i - 76, i - 77, i - 78, i - 79, i - 80, i - 81, i -\
    \ 82, i - 83, i - 84, i - 85, i - 86, i - 87, i - 88, i - 89, i - 90, i - 91,\
    \ i - 92, i - 93, i - 94, i - 95, i - 96, i - 97, i - 98, i - 99, i - 100, i -\
    \ 101, i - 102, i - 103, i - 104, i - 105, i - 106, i - 107, i - 108, i - 109,\
    \ i - 110, i - 111, i - 112, i - 113, i - 114, i - 115, i - 116, i - 117, i -\
    \ 118, i - 119, i - 120, i - 121, i - 122, i - 123, i - 124, i - 125, i - 126,\
    \ i - 127, i - 128, i - 129, i - 130, i - 131, i - 132, i - 133, i - 134, i -\
    \ 135, i - 136, i - 137, i - 138, i - 139, i - 140, i - 141, i - 142, i - 143,\
    \ i - 144, i - 145, i - 146, i - 147, i - 148, i - 149, i - 150, i - 151, i -\
    \ 152, i - 153, i - 154, i - 155, i - 156, i - 157, i - 158, i - 159, i - 160,\
    \ i - 161, i - 162, i - 163, i - 164, i - 165, i - 166, i - 167, i - 168, i -\
    \ 169, i - 170, i - 171, i - 172, i - 173, i - 174, i - 175, i - 176, i - 177,\
    \ i - 178, i - 179, i - 180, i - 181, i - 182, i - 183, i - 184, i - 185, i -\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprj_kmo95.lua:10: ''do'' expected near '',''

    '
  stdout: ''
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local index = 1\n  local max_value = numbers[1]\n\
    \  rolling_max[1] = max_value\n  for i = 2, #numbers do\n    if numbers[i] ~=\
    \ max_value then\n      max_value = numbers[i]\n      rolling_max[index] = max_value\n\
    \      index = index + 1\n    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpne04yuwb.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpne04yuwb.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpne04yuwb.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_value = numbers[i]\n    for j = i - 1, i - 1, -1 do\n      if numbers[j]\
    \ > max_value then\n        max_value = numbers[j]\n      end\n    end\n    rolling_max:insert(max_value)\n\
    \    i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi6xvvdit.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpi6xvvdit.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpi6xvvdit.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_element = numbers[i]\n    local max_index = i\n    for j = i +\
    \ 1, #numbers do\n      if numbers[j] > max_element then\n        max_element\
    \ = numbers[j]\n        max_index = j\n      end\n    end\n    rolling_max[max_index]\
    \ = max_element\n    i = max_index + 1\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbp8lbjzz.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpbp8lbjzz.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpbp8lbjzz.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  for i\
    \ = 2, #numbers do\n    if numbers[i] > max_value then\n      rolling_max:insert(max_value)\n\
    \      max_value = numbers[i]\n    else\n      max_value = max_value .. \", \"\
    \ .. numbers[i]\n    end\n  end\n  rolling_max:insert(max_value)\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfa2or2dx.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpfa2or2dx.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpfa2or2dx.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeljo383l.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpeljo383l.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpeljo383l.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  for i\
    \ = 2, #numbers do\n    if numbers[i] ~= max_value then\n      rolling_max:insert(max_value)\n\
    \      max_value = numbers[i]\n    end\n  end\n  rolling_max:insert(max_value)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuqq0t_od.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpuqq0t_od.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpuqq0t_od.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  for i\
    \ = 2, #numbers do\n    if numbers[i] > max_value then\n      rolling_max = table.concat(rolling_max,\
    \ \", \")\n      rolling_max = table.concat(rolling_max, numbers[i])\n      max_value\
    \ = numbers[i]\n    else\n      rolling_max = table.concat(rolling_max, numbers[i])\n\
    \    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgalf5zln.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpgalf5zln.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpgalf5zln.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  for i = 1, rolling_max_index\
    \ do\n    rolling_max:insert(numbers[i])\n  end\n  return rolling_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsqi6yqyw.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpsqi6yqyw.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpsqi6yqyw.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_value = numbers[i]\n    for j = i - 1, i - 1, -1 do\n      if numbers[j]\
    \ > max_value then\n        max_value = numbers[j]\n      end\n    end\n    rolling_max:insert(max_value)\n\
    \    i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi6xvvdit.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpi6xvvdit.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpi6xvvdit.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local max_index_value = numbers.new()\n  for i\
    \ = 1, numbers.n do\n    max_value = max_value[1] or numbers[i]\n    max_index\
    \ = max_index[1] or i\n    max_index_value = max_index_value[1] or max_value\n\
    \    rolling_max[i] = max_value\n  end\n  local i = numbers.n - 1\n  while i >=\
    \ 1 do\n    max_value = max_value[1] or numbers[i]\n    max_index = max_index[1]\
    \ or i\n    max_index_value = max_index_value[1] or max_value\n    rolling_max[i]\
    \ = max_value\n    i = i - 1\n  end\n  rolling_max[numbers.n] = max_index_value\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8re5omsf.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp8re5omsf.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp8re5omsf.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:resize(#numbers)\n  for i = 1, #numbers do\n    rolling_max[rolling_max_index]\
    \ = numbers[i]\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpth1x6ze8.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpth1x6ze8.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpth1x6ze8.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local max_value = numbers.new()\n  local max_index\
    \ = numbers.new()\n  local max_value = numbers.new()\n  local max_index = numbers.new()\n\
    \  local max_value = numbers.new()\n  local max_index = numbers.new()\n  local\
    \ max_value = numbers.new()\n  local max_index = numbers.new()\n  local max_value\
    \ = numbers.new()\n  local max_index = numbers.new()\n  local max_value = numbers.new()\n\
    \  local max_index = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local max_value = numbers.new()\n  local max_index\
    \ = numbers.new()\n  local max_value = numbers.new()\n  local max_index = numbers.new()\n\
    \  local max_value = numbers.new()\n  local max_index = numbers.new()\n  local\
    \ max_value = numbers.new()\n  local max_index = numbers.new()\n  local max_value\
    \ = numbers.new()\n  local max_index = numbers.new()\n  local max_value = numbers.new()\n\
    \  local max_index = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local max_value = numbers.new()\n  local max_index\
    \ = numbers.new()\n  local max_value = numbers.new()\n  local max_index = numbers.new()\n\
    \  local max_value = numbers.new()\n  local max_index = numbers.new()\n  local\
    \ max_value = numbers.new()\n  local max_index = numbers.new()\n  local max_value\
    \ = numbers.new()\n  local max_index = numbers.new()\n  local max_value = numbers.new()\n\
    \  local max_index = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local max_value = numbers.new()\n  local max_index\
    \ = numbers.new()\n  local max_value = numbers.new()\n  local max_index = numbers.new()\n\
    \  local max_value = numbers.new()\n  local max_index = numbers.new()\n  local\
    \ max_value = numbers.new()\n  local max_index = numbers.new()\n  local max_value\
    \ = numbers.new()\n  local max_index = numbers.new()\n  local max_value = numbers.new()\n\
    \  local max_index = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local max_value = numbers.new()\n  local max_index\
    \ = numbers.new()\n  local max_value = numbers.new()\n  local max_index = numbers.new()\n\
    \  local max_value = numbers.new()\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9ipgcx3d.lua:80: ''end'' expected (to close ''function'' at
    line 5) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:resize(#numbers)\n  for i = 1, #numbers do\n    rolling_max[i]\
    \ = numbers[rolling_max_index]\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwuexuf8z.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpwuexuf8z.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpwuexuf8z.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_value = numbers[i]\n    for j = i - 1, i - 1, -1 do\n      if numbers[j]\
    \ > max_value then\n        max_value = numbers[j]\n      end\n    end\n    rolling_max:insert(max_value)\n\
    \    i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi6xvvdit.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpi6xvvdit.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpi6xvvdit.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local last_value = numbers[1]\n  for i\
    \ = 2, #numbers do\n    local value = numbers[i]\n    if value > last_value then\n\
    \      rolling_max:insert(last_value)\n      last_value = value\n    else\n  \
    \    last_value = value\n    end\n  end\n  rolling_max:insert(last_value)\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqbe9_2hz.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpqbe9_2hz.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpqbe9_2hz.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_element = numbers[i]\n    local max_index = i\n    for j = i +\
    \ 1, #numbers do\n      if numbers[j] > max_element then\n        max_element\
    \ = numbers[j]\n        max_index = j\n      end\n    end\n    rolling_max[max_index]\
    \ = max_element\n    i = max_index + 1\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbp8lbjzz.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpbp8lbjzz.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpbp8lbjzz.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local\
    \ max_index = 1\n  for i = 2, #numbers do\n    if numbers[i] > max_value then\n\
    \      rolling_max:insert(max_value)\n      max_value = numbers[i]\n      max_index\
    \ = i\n    end\n    rolling_max:insert(numbers[i])\n  end\n  rolling_max:insert(max_value)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzny19te0.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpzny19te0.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpzny19te0.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local index = 1\n  local max_value = numbers[1]\n\
    \  local max_index = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~=\
    \ max_value then\n      rolling_max:insert(max_value)\n      index = i\n     \
    \ max_value = numbers[i]\n      max_index = numbers[i]\n    end\n  end\n  rolling_max:insert(max_value)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp38q56kiz.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp38q56kiz.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp38q56kiz.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750364
