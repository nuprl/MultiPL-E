name: HumanEval_126_is_sorted
language: lua
prompt: "-- Given a table of numbers, return whether or not they are sorted\n-- in\
  \ ascending order. If table has more than 1 duplicate of the same\n-- number, return\
  \ false. Assume no negative numbers and only integers.\n-- Examples\n-- >>> is_sorted({5})\n\
  -- true\n-- >>> is_sorted({1, 2, 3, 4, 5})\n-- true\n-- >>> is_sorted({1, 3, 2,\
  \ 4, 5})\n-- false\n-- >>> is_sorted({1, 2, 3, 4, 5, 6})\n-- true\n-- >>> is_sorted({1,\
  \ 2, 3, 4, 5, 6, 7})\n-- true\n-- >>> is_sorted({1, 3, 2, 4, 5, 6, 7})\n-- false\n\
  -- >>> is_sorted({1, 2, 2, 3, 3, 4})\n-- true\n-- >>> is_sorted({1, 2, 2, 2, 3,\
  \ 4})\n-- false\nlocal function is_sorted(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n\
  \    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2,\
  \ 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n   \
  \ lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}),\
  \ false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}),\
  \ true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1,\
  \ 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n\
  \    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local last_val = lst[1]\n  for i = 2, #lst do\n    if lst[i] ~= last_val\
    \ then\n      return false\n    end\n    last_val = lst[i]\n  end\n  return true\n\
    end", "  local last_val = lst[1]\n  for i = 2, #lst do\n    if lst[i] ~= last_val\
    \ then\n      return false\n    end\n    last_val = lst[i]\n  end\n  return true\n\
    end", "  local last_value = lst[1]\n  for i = 2, #lst do\n    if lst[i] ~= last_value\
    \ then\n      return false\n    end\n    last_value = lst[i]\n  end\n  return\
    \ true\nend", "  local i = 1\n  while i <= #lst do\n    local j = i\n    while\
    \ j < #lst and lst[j] == lst[i] do\n      j = j + 1\n    end\n    if j == #lst\
    \ then\n      return true\n    end\n    if lst[i] < lst[j] then\n      return\
    \ false\n    end\n    i = j + 1\n  end\n  return true\nend", "  local last_value\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] ~= last_value then\n      return\
    \ false\n    end\n    last_value = lst[i]\n  end\n  return true\nend", "  local\
    \ last_value = lst[1]\n  for i = 2, #lst do\n    if lst[i] ~= last_value then\n\
    \      return false\n    end\n    last_value = lst[i]\n  end\n  return true\n\
    end", "  local last_value = lst[1]\n  for i = 2, #lst do\n    if lst[i] ~= last_value\
    \ then\n      return false\n    end\n    last_value = lst[i]\n  end\n  return\
    \ true\nend", "  local sorted = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted,\
    \ v)\n  end\n  table.sort(sorted)\n  return #sorted == #lst\nend", "  local sorted\
    \ = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted, v)\n  end\n  table.sort(sorted)\n\
    \  return #sorted == #lst\nend", "  local last_value = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] ~= last_value then\n      return false\n    end\n    last_value\
    \ = lst[i]\n  end\n  return true\nend", "  -- If table is empty, return true\n\
    \  if #lst == 0 then\n    return true\n  end", "  local last_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] ~= last_value then\n      return false\n\
    \    end\n    last_value = lst[i]\n  end\n  return true\nend", "  local i = 1\n\
    \  while i <= #lst do\n    if lst[i] ~= lst[i - 1] + 1 then\n      return false\n\
    \    end\n    i = i + 1\n  end\n  return true\nend", "  local last_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] ~= last_value then\n      return false\n\
    \    end\n    last_value = lst[i]\n  end\n  return true\nend", "  local last_val\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] ~= last_val then\n      return\
    \ false\n    end\n    last_val = lst[i]\n  end\n  return true\nend", "  -- If\
    \ table has only one unique number, return true\n  if #lst == 1 then\n    return\
    \ true\n  end", "  local last_val = lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ ~= last_val then\n      return false\n    end\n    last_val = lst[i]\n  end\n\
    \  return true\nend", "  local i = 1\n  while i <= #lst do\n    if lst[i] ~= lst[i\
    \ - 1] then\n      return false\n    end\n    i = i + 1\n  end\n  return true\n\
    end", "  local last_value = lst[1]\n  for i = 2, #lst do\n    if lst[i] ~= last_value\
    \ then\n      return false\n    end\n    last_value = lst[i]\n  end\n  return\
    \ true\nend", "  local last_val = lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ ~= last_val then\n      return false\n    end\n    last_val = lst[i]\n  end\n\
    \  return true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
