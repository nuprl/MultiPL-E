name: HumanEval_100_make_a_pile
language: lua
prompt: "-- Given a positive integer n, you have to make a pile of n levels of stones.\n\
  -- The first level has n stones.\n-- The number of stones in the next level is:\n\
  -- - the next odd number if n is odd.\n-- - the next even number if n is even.\n\
  -- Return the number of stones in each level in a table, where element at index\n\
  -- i represents the number of stones in the level (i+1).\n-- Examples:\n-- >>> make_a_pile(3)\n\
  -- {3, 5, 7}\nlocal function make_a_pile(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_a_pile\n\
  \    lu.assertEquals(candidate(3), {3, 5, 7})\n    lu.assertEquals(candidate(4),\
  \ {4, 6, 8, 10})\n    lu.assertEquals(candidate(5), {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6),\
  \ {6, 8, 10, 12, 14, 16})\n    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16,\
  \ 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local pile = {}\n  local next_odd\n  local next_even\n  if n then\n\
    \    if n % 2 == 0 then\n      next_even = n / 2\n    else\n      next_odd = math.floor(n/2)\n\
    \    end\n    pile[1] = next_odd\n    for i = 2, n do\n      pile[i] = pile[i-1]\
    \ + next_even\n    end\n  end\n  return pile\nend", "  local pile = {}\n  local\
    \ i = 1\n  while i <= n do\n    pile[i] = i\n    i = 2 * i\n  end\n  return pile\n\
    end", "  local pile = {}\n  for i = 1, n do\n    pile[i] = (i + 1) % 2 == 0 and\
    \ i + 1 or i\n  end\n  return pile\nend", "  local pile = {}\n  local i = 1\n\
    \  while i <= n do\n    if i % 2 == 1 then\n      pile[i] = n\n      i = i + 1\n\
    \    else\n      pile[i] = i/2\n      i = i + 1\n    end\n  end\n  return pile\n\
    end", "  local pile = {}\n  for i = 1, n do\n    pile[i] = (i + 1) % 2 == 0 and\
    \ n or i\n  end\n  return pile\nend", "  local pile = {}\n  local next_odd\n \
    \ local next_even\n  if n <= 0 then\n    return pile\n  elseif n % 2 == 0 then\n\
    \    next_odd = n\n    next_even = n - 1\n  else\n    next_odd = n - 1\n    next_even\
    \ = n\n  end\n  local pile = {}\n  for i = 1, next_odd do\n    table.insert(pile,\
    \ i + 1)\n  end\n  for i = 1, next_even do\n    table.insert(pile, i + 2)\n  end\n\
    \  return pile\nend", "  local pile = {}\n  for i = 1, n do\n    if n % 2 == 0\
    \ then\n      pile[i] = n\n      n = n/2\n    else\n      pile[i] = n + 1\n  \
    \    n = n/2\n    end\n  end\n  return pile\nend", "  local pile = {}\n  local\
    \ next_odd\n  local next_even\n  if n % 2 == 0 then\n    next_odd = n\n    next_even\
    \ = n + 1\n  else\n    next_odd = n + 1\n    next_even = n\n  end\n  for i = 1,\
    \ next_odd do\n    pile[i] = next_odd\n    next_odd = next_odd + 1\n  end\n  for\
    \ i = 1, next_even do\n    pile[i] = next_even\n    next_even = next_even + 1\n\
    \  end\n  return pile\nend", "  local pile = {}\n  local i = 1\n  while i <= n\
    \ do\n    pile[i] = i\n    i = i * 2 + 1\n  end\n  return pile\nend", "  local\
    \ pile = {}\n  local next_odd\n  local next_even\n  if n then\n    if n % 2 ==\
    \ 0 then\n      next_even = math.floor(n/2)\n    else\n      next_odd = math.floor(n/2)\n\
    \    end\n    pile[1] = n\n    for i = 2, next_even do\n      pile[i] = pile[i-1]\
    \ + 2\n    end\n    for i = next_odd, next_even do\n      pile[i] = pile[i-1]\
    \ + 1\n    end\n  end\n  return pile\nend", "  local pile = {}\n  local next_odd\n\
    \  local next_even\n  if n <= 0 then\n    return pile\n  elseif n % 2 == 0 then\n\
    \    next_odd = n\n    next_even = n - 1\n  else\n    next_odd = n - 1\n    next_even\
    \ = n\n  end\n  for i = 1, next_odd do\n    table.insert(pile, i)\n  end\n  for\
    \ i = 1, next_even do\n    table.insert(pile, i + 1)\n  end\n  return pile\nend",
  "  local pile = {}\n  local next_odd\n  local next_even\n  if n <= 0 then\n    return\
    \ pile\n  elseif n % 2 == 0 then\n    next_odd = n\n  else\n    next_even = n\n\
    \  end\n  local i = 1\n  repeat\n    pile[i] = next_odd\n    next_odd = next_odd\
    \ + 1\n    i = i + 1\n  until next_odd > next_even\n  repeat\n    pile[i] = next_even\n\
    \    next_even = next_even + 1\n    i = i + 1\n  until next_even > next_odd\n\
    \  return pile\nend", "  local pile = {}\n  local next_odd\n  local next_even\n\
    \  local i = 1\n  while i <= n do\n    if i % 2 == 0 then\n      next_even = i\n\
    \    else\n      next_odd = i\n    end\n    pile[i] = next_odd\n    i = i + 1\n\
    \  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i]\
    \ = (i + 1) % (i + 2)\n  end\n  return pile\nend", "  if n == 0 then\n    return\
    \ {}\n  elseif n == 1 then\n    return {1}\n  else\n    local pile = {}\n    local\
    \ next_odd_number = math.floor(n/2) + 1\n    local next_even_number = math.floor(n/2)\
    \ + 2\n    for i = 1, n do\n      pile[i] = next_odd_number\n      if n % 2 ==\
    \ 0 then\n        next_odd_number = next_odd_number + 1\n      else\n        next_even_number\
    \ = next_even_number + 1\n      end\n    end\n    return pile\n  end\nend", " \
    \ local pile = {}\n  local level = 1\n  while n >= level do\n    pile[level] =\
    \ n\n    n = math.floor(n/2) + (n % 2 == 0 and 1 or 0)\n    level = level + 1\n\
    \  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i]\
    \ = (i + 1) * (i + 1)\n  end\n  return pile\nend", "  if n == 0 then\n    return\
    \ {}\n  elseif n == 1 then\n    return {1}\n  else\n    local pile = {}\n    local\
    \ next_odd = math.floor(n/2)\n    local next_even = n - next_odd\n    pile[1]\
    \ = next_odd\n    if next_even % 2 == 0 then\n      pile[2] = next_even\n    else\n\
    \      pile[2] = next_even + 1\n    end\n    return pile\n  end\nend", "  local\
    \ pile = {}\n  for i = 1, n do\n    pile[i] = (i + 1) * (i + 1) -- odd or even\n\
    \  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i]\
    \ = (i + 1) * (i + 1)\n  end\n  return pile\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
