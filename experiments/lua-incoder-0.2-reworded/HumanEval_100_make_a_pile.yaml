name: HumanEval_100_make_a_pile
language: lua
prompt: "-- Given a positive integer n, you have to make a pile of n levels of stones.\n\
  -- The first level has n stones.\n-- The number of stones in the next level is:\n\
  -- - the next odd number if n is odd.\n-- - the next even number if n is even.\n\
  -- Return the number of stones in each level in a table, where element at index\n\
  -- i represents the number of stones in the level (i+1).\n-- Examples:\n-- >>> make_a_pile(3)\n\
  -- {3, 5, 7}\nlocal function make_a_pile(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_a_pile\n\
  \    lu.assertEquals(candidate(3), {3, 5, 7})\n    lu.assertEquals(candidate(4),\
  \ {4, 6, 8, 10})\n    lu.assertEquals(candidate(5), {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6),\
  \ {6, 8, 10, 12, 14, 16})\n    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16,\
  \ 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local pile = {}\n  local next_odd\n  local next_even\n  if n then\n\
    \    if n % 2 == 0 then\n      next_even = n / 2\n    else\n      next_odd = math.floor(n/2)\n\
    \    end\n    pile[1] = next_odd\n    for i = 2, n do\n      pile[i] = pile[i-1]\
    \ + next_even\n    end\n  end\n  return pile\nend", "  local pile = {}\n  local\
    \ i = 1\n  while i <= n do\n    pile[i] = i\n    i = 2 * i\n  end\n  return pile\n\
    end", "  local pile = {}\n  for i = 1, n do\n    pile[i] = (i + 1) % 2 == 0 and\
    \ i + 1 or i\n  end\n  return pile\nend", "  local pile = {}\n  local i = 1\n\
    \  while i <= n do\n    if i % 2 == 1 then\n      pile[i] = n\n      i = i + 1\n\
    \    else\n      pile[i] = i/2\n      i = i + 1\n    end\n  end\n  return pile\n\
    end", "  local pile = {}\n  for i = 1, n do\n    pile[i] = (i + 1) % 2 == 0 and\
    \ n or i\n  end\n  return pile\nend", "  local pile = {}\n  local next_odd\n \
    \ local next_even\n  if n <= 0 then\n    return pile\n  elseif n % 2 == 0 then\n\
    \    next_odd = n\n    next_even = n - 1\n  else\n    next_odd = n - 1\n    next_even\
    \ = n\n  end\n  local pile = {}\n  for i = 1, next_odd do\n    table.insert(pile,\
    \ i + 1)\n  end\n  for i = 1, next_even do\n    table.insert(pile, i + 2)\n  end\n\
    \  return pile\nend", "  local pile = {}\n  for i = 1, n do\n    if n % 2 == 0\
    \ then\n      pile[i] = n\n      n = n/2\n    else\n      pile[i] = n + 1\n  \
    \    n = n/2\n    end\n  end\n  return pile\nend", "  local pile = {}\n  local\
    \ next_odd\n  local next_even\n  if n % 2 == 0 then\n    next_odd = n\n    next_even\
    \ = n + 1\n  else\n    next_odd = n + 1\n    next_even = n\n  end\n  for i = 1,\
    \ next_odd do\n    pile[i] = next_odd\n    next_odd = next_odd + 1\n  end\n  for\
    \ i = 1, next_even do\n    pile[i] = next_even\n    next_even = next_even + 1\n\
    \  end\n  return pile\nend", "  local pile = {}\n  local i = 1\n  while i <= n\
    \ do\n    pile[i] = i\n    i = i * 2 + 1\n  end\n  return pile\nend", "  local\
    \ pile = {}\n  local next_odd\n  local next_even\n  if n then\n    if n % 2 ==\
    \ 0 then\n      next_even = math.floor(n/2)\n    else\n      next_odd = math.floor(n/2)\n\
    \    end\n    pile[1] = n\n    for i = 2, next_even do\n      pile[i] = pile[i-1]\
    \ + 2\n    end\n    for i = next_odd, next_even do\n      pile[i] = pile[i-1]\
    \ + 1\n    end\n  end\n  return pile\nend", "  local pile = {}\n  local next_odd\n\
    \  local next_even\n  if n <= 0 then\n    return pile\n  elseif n % 2 == 0 then\n\
    \    next_odd = n\n    next_even = n - 1\n  else\n    next_odd = n - 1\n    next_even\
    \ = n\n  end\n  for i = 1, next_odd do\n    table.insert(pile, i)\n  end\n  for\
    \ i = 1, next_even do\n    table.insert(pile, i + 1)\n  end\n  return pile\nend",
  "  local pile = {}\n  local next_odd\n  local next_even\n  if n <= 0 then\n    return\
    \ pile\n  elseif n % 2 == 0 then\n    next_odd = n\n  else\n    next_even = n\n\
    \  end\n  local i = 1\n  repeat\n    pile[i] = next_odd\n    next_odd = next_odd\
    \ + 1\n    i = i + 1\n  until next_odd > next_even\n  repeat\n    pile[i] = next_even\n\
    \    next_even = next_even + 1\n    i = i + 1\n  until next_even > next_odd\n\
    \  return pile\nend", "  local pile = {}\n  local next_odd\n  local next_even\n\
    \  local i = 1\n  while i <= n do\n    if i % 2 == 0 then\n      next_even = i\n\
    \    else\n      next_odd = i\n    end\n    pile[i] = next_odd\n    i = i + 1\n\
    \  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i]\
    \ = (i + 1) % (i + 2)\n  end\n  return pile\nend", "  if n == 0 then\n    return\
    \ {}\n  elseif n == 1 then\n    return {1}\n  else\n    local pile = {}\n    local\
    \ next_odd_number = math.floor(n/2) + 1\n    local next_even_number = math.floor(n/2)\
    \ + 2\n    for i = 1, n do\n      pile[i] = next_odd_number\n      if n % 2 ==\
    \ 0 then\n        next_odd_number = next_odd_number + 1\n      else\n        next_even_number\
    \ = next_even_number + 1\n      end\n    end\n    return pile\n  end\nend", " \
    \ local pile = {}\n  local level = 1\n  while n >= level do\n    pile[level] =\
    \ n\n    n = math.floor(n/2) + (n % 2 == 0 and 1 or 0)\n    level = level + 1\n\
    \  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i]\
    \ = (i + 1) * (i + 1)\n  end\n  return pile\nend", "  if n == 0 then\n    return\
    \ {}\n  elseif n == 1 then\n    return {1}\n  else\n    local pile = {}\n    local\
    \ next_odd = math.floor(n/2)\n    local next_even = n - next_odd\n    pile[1]\
    \ = next_odd\n    if next_even % 2 == 0 then\n      pile[2] = next_even\n    else\n\
    \      pile[2] = next_even + 1\n    end\n    return pile\n  end\nend", "  local\
    \ pile = {}\n  for i = 1, n do\n    pile[i] = (i + 1) * (i + 1) -- odd or even\n\
    \  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i]\
    \ = (i + 1) * (i + 1)\n  end\n  return pile\nend", "  local pile = {}\n  for i\
    \ = 1, n do\n    pile[i] = (i + 1) * (i + 1) -- odd or even\n  end\n  return pile\n\
    end", "  local pile = {}\n  local i = 1\n  while i <= n do\n    if i % 2 == 0\
    \ then\n      pile[i] = n\n    else\n      pile[i] = (math.floor(n/2) + 1)\n \
    \   end\n    i = i + 1\n  end\n  return pile\nend", "  local pile = {}\n  local\
    \ next_odd\n  if n % 2 == 0 then\n    next_odd = n\n  else\n    next_odd = n +\
    \ 1 -- add 1 since n is even\n  end\n  for i = 1, next_odd do\n    pile[i] = n\n\
    \  end\n  for i = next_odd, next_even do\n    pile[i] = n - 1\n  end\n  return\
    \ pile\nend", "  local pile = {}\n  local next_odd\n  local next_even\n  if n\
    \ then\n    if n % 2 == 0 then\n      next_even = n / 2\n    else\n      next_odd\
    \ = math.floor(n/2)\n    end\n    for i = 1, n do\n      pile[i] = next_odd\n\
    \      next_odd = next_odd + 1\n      if next_odd % 2 == 0 then\n        next_even\
    \ = next_even + 1\n      end\n    end\n  end\n  return pile\nend", "  local pile\
    \ = {}\n  local next_odd\n  local next_even\n  if n <= 0 then\n    return pile\n\
    \  elseif n <= 1 then\n    pile[1] = n\n    return pile\n  else\n    next_odd\
    \ = math.floor(n/2)\n    next_even = n - next_odd\n    pile[1] = next_odd\n  \
    \  pile[2] = next_even\n    return pile\n  end\nend", "  local pile = {}\n  local\
    \ nlevels = math.floor(n/2) + 1\n  for level = 1, nlevels do\n    local nstones\
    \ = math.floor(n/level)\n    if nstones % 2 == 0 then\n      pile[level] = nstones\n\
    \    else\n      pile[level] = nstones + 1\n    end\n  end\n  return pile\nend",
  "  local pile = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n      pile[i + 1]\
    \ = pile[i] + 1\n    else\n      pile[i + 1] = pile[i]\n    end\n  end\n  return\
    \ pile\nend", "  local pile = {}\n  local level = 1\n  while n ~= 0 do\n    pile[level]\
    \ = n\n    level = level + 1\n    if n % 2 == 0 then\n      n = n / 2\n    else\n\
    \      n = n * 3 + 1\n    end\n  end\n  return pile\nend", "  if n == 0 then\n\
    \    return {}\n  elseif n == 1 then\n    return {1}\n  else\n    local pile =\
    \ {}\n    local next_odd\n    local next_even\n    if n % 2 == 0 then\n      next_odd\
    \ = n\n      next_even = n - 1\n    else\n      next_odd = n - 1\n      next_even\
    \ = n\n    end\n    for i = 1, next_even do\n      pile[i] = n\n    end\n    for\
    \ i = next_even+1, next_odd do\n      pile[i] = n - 1\n    end\n    return pile\n\
    \  end\nend", "  local pile = {}\n  local next_odd\n  local next_even\n  if n\
    \ then\n    if n % 2 == 0 then\n      next_even = n / 2\n    else\n      next_odd\
    \ = n - 1\n    end\n  else\n    next_even = 1\n    next_odd = 1\n  end\n  for\
    \ i = next_even, 1, -1 do\n    table.insert(pile, i)\n  end\n  for i = next_odd,\
    \ 1, -1 do\n    table.insert(pile, i)\n  end\n  return pile\nend", "  local pile\
    \ = {}\n  for i = 1, n do\n    pile[i] = n\n    if n ~= 0 then\n      n = math.floor((n\
    \ + 1) / 2)\n    else\n      n = n + 1\n    end\n  end\n  return pile\nend", " \
    \ local pile = {}\n  local next_odd\n  if n % 2 == 1 then\n    next_odd = n +\
    \ 1\n  else\n    next_odd = n\n  end\n  for i = 1, next_odd do\n    table.insert(pile,\
    \ i)\n  end\n  local next_even\n  if n % 2 == 0 then\n    next_even = n + 1\n\
    \  else\n    next_even = n\n  end\n  for i = 1, next_even do\n    table.insert(pile,\
    \ i)\n  end\n  return pile\nend", "  local pile = {}\n  local next_odd\n  local\
    \ next_even\n  if n%2 == 0 then\n    next_even = math.floor(n/2)\n  else\n   \
    \ next_odd = math.floor(n/2)\n  end\n  for i = 1, n do\n    pile[i] = next_odd\n\
    \    if n%2 == 0 then\n      next_odd = next_odd + 1\n    else\n      next_even\
    \ = next_even + 1\n    end\n  end\n  return pile\nend", "  local pile = {}\n \
    \ for i = 1, n do\n    pile[i] = (i + 1) * (i + 2) / 2\n  end\n  return pile\n\
    end", "  local pile = {}\n  local next_odd\n  if n % 2 == 0 then\n    next_odd\
    \ = n\n  else\n    next_odd = n - 1\n  end\n  for i = 1, next_odd do\n    pile[i\
    \ + 1] = i\n  end\n  for i = next_odd, next_odd + 1 do\n    pile[i + 1] = i\n\
    \  end\n  return pile\nend", "  local pile = {}\n  local next_odd\n  if n and\
    \ n % 2 == 1 then\n    next_odd = n\n  else\n    next_odd = n / 2\n  end\n  local\
    \ next_even = next_odd * 2\n  for i = 1, next_even do\n    pile[i] = next_odd\n\
    \    next_odd = next_odd + 1\n  end\n  return pile\nend", "  local pile = {}\n\
    \  for i = 1, n do\n    pile[i] = (i + 1) * (i + 1) -- odd or even\n  end\n  return\
    \ pile\nend", "  local pile = {}\n  local next_odd\n  local next_even\n  if n\
    \ <= 0 then\n    return pile\n  elseif n % 2 == 0 then\n    next_even = n / 2\n\
    \  else\n    next_odd = math.floor(n/2)\n  end\n  for i = 1, next_odd do\n   \
    \ pile[i + 1] = pile[i] + 1\n  end\n  for i = 1, next_even do\n    pile[i + 1]\
    \ = pile[i] + 2\n  end\n  return pile\nend", "  local pile = {}\n  local i = 1\n\
    \  while i <= n do\n    if i % 2 == 0 then\n      pile[i] = n\n    else\n    \
    \  pile[i] = (i - 1) + ((i - 1) % 2)\n    end\n    i = i + 1\n  end\n  return\
    \ pile\nend", "  local pile = {}\n  local i = 1\n  while i <= n do\n    pile[i]\
    \ = i\n    i = i * 2 + 1\n  end\n  return pile\nend", "  local pile = {}\n  for\
    \ i = 1, n do\n    pile[i] = (i + 1) * (i + 1)\n  end\n  return pile\nend", " \
    \ local pile = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n      pile[i] =\
    \ n\n    else\n      pile[i] = 2 * n + 1\n    end\n  end\n  return pile\nend",
  "  local pile = {}\n  for i = 1, n do\n    pile[i] = (i + 1) % (i + 2)\n  end\n\
    \  return pile\nend", "  local pile = {}\n  local next_odd\n  local next_even\n\
    \  if n % 2 == 0 then\n    next_odd = n + 1\n    next_even = n\n  else\n    next_odd\
    \ = n\n    next_even = n + 1\n  end\n  for i = 1, next_odd do\n    pile[i] = i\n\
    \  end\n  for i = 1, next_even do\n    pile[i] = i + 1\n  end\n  return pile\n\
    end", "  local pile = {}\n  for i = 1, n do\n    pile[i] = i\n  end\n  if n %\
    \ 2 == 1 then\n    pile[#pile+1] = math.floor(n/2)\n  end\n  return pile\nend",
  "  local pile = {}\n  local i = 1\n  while i <= n do\n    pile[i] = i\n    i = i\
    \ * 2 + 1\n  end\n  return pile\nend", "  local pile = {}\n  local i = 1\n  while\
    \ i <= n do\n    pile[i] = i\n    i = i + 2\n  end\n  return pile\nend", "  local\
    \ pile = {}\n  for i = 1, n do\n    pile[i] = i\n  end\n  if n % 2 == 0 then\n\
    \    pile[#pile+1] = math.floor(n/2) + 1\n  else\n    pile[#pile+1] = math.floor(n/2)\
    \ + 2\n  end\n  return pile\nend", "  local pile = {}\n  local i = 1\n  while\
    \ i <= n do\n    if i % 2 == 0 then\n      pile[i] = n\n    else\n      pile[i]\
    \ = (math.floor(n/2) + 1)\n    end\n    i = i + 1\n  end\n  return pile\nend",
  "  local pile = {}\n  for i = 1, n do\n    pile[i] = (i + 1) % (2 * n) + 1\n  end\n\
    \  return pile\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i] = (i\
    \ + 1) * (i + 1)\n  end\n  return pile\nend", "  local pile = {}\n  local i =\
    \ 1\n  while i <= n do\n    if i % 2 == 1 then\n      pile[i] = n\n    else\n\
    \      pile[i] = i * 2 + 1\n    end\n    i = i + 1\n  end\n  return pile\nend",
  "  local pile = {}\n  local next_odd\n  local next_even\n  if n%2 == 0 then\n  \
    \  next_odd = n\n    next_even = n + 1\n  else\n    next_odd = n + 1\n    next_even\
    \ = n + 1\n  end\n  for i = 1, next_odd do\n    pile[i] = i\n  end\n  for i =\
    \ 1, next_even do\n    pile[i] = i + 1\n  end\n  return pile\nend", "  local pile\
    \ = {}\n  local i = 1\n  while i <= n do\n    if i % 2 == 0 then\n      pile[i]\
    \ = n\n      i = i + 1\n    else\n      pile[i] = (n / 2) + 1\n      i = i + 1\n\
    \    end\n  end\n  return pile\nend", "  local pile = {}\n  local i = 1\n  while\
    \ i <= n do\n    if i % 2 == 0 then\n      pile[i] = n\n    else\n      pile[i]\
    \ = (i - 1) + ((i - 1) % 2)\n    end\n    i = i + 1\n  end\n  return pile\nend",
  "  local pile = {}\n  local i = 1\n  while i <= n do\n    pile[i] = n\n    i = i\
    \ + 2\n  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n   \
    \ pile[i] = n\n    if n ~= 0 then\n      if n % 2 == 1 then\n        pile[i] =\
    \ pile[i] + 1\n      else\n        pile[i] = pile[i] + 2\n      end\n    end\n\
    \  end\n  return pile\nend", "  local pile = {}\n  local nlevels = math.floor(n/2)\
    \ + 1\n  for i = 1, nlevels do\n    pile[i] = n\n    if n % 2 == 0 then\n    \
    \  n = math.floor(n/2)\n    else\n      n = math.floor(n/2)+1\n    end\n  end\n\
    \  return pile\nend", "  local pile = {}\n  local i = 1\n  while i <= n do\n \
    \   pile[i] = n\n    if n % 2 == 0 then\n      n = n / 2\n    else\n      n =\
    \ n * 3 + 1\n    end\n    i = i + 1\n  end\n  return pile\nend", "  local pile\
    \ = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n      pile[i] = n + 1\n   \
    \ else\n      pile[i] = n\n    end\n  end\n  return pile\nend", "  local pile\
    \ = {}\n  local next_odd\n  local next_even\n  if n <= 0 then\n    return pile\n\
    \  elseif n % 2 == 0 then\n    next_odd = n\n    next_even = n - 1\n  else\n \
    \   next_odd = n - 1\n    next_even = n\n  end\n  for i = 1, next_odd do\n   \
    \ pile[i + 1] = pile[i] + 1\n  end\n  for i = 1, next_even do\n    pile[i + 1]\
    \ = pile[i] + 2\n  end\n  return pile\nend", "  local pile = {}\n  local i = 1\n\
    \  while i <= n do\n    pile[i] = i\n    i = i * 2 + 1\n  end\n  return pile\n\
    end", "  local pile = {}\n  local next_odd = n\n  local next_even = n\n  while\
    \ next_odd > 0 do\n    table.insert(pile, next_odd)\n    next_odd = next_odd -\
    \ 1\n  end\n  while next_even > 0 do\n    table.insert(pile, next_even)\n    next_even\
    \ = next_even - 1\n  end\n  return pile\nend", "  local pile = {}\n  local n =\
    \ 1\n  while n <= n do\n    local odd = math.floor(n/2)\n    local even = math.floor(n/2)\
    \ + (n%2 == 0)\n    pile[odd] = odd + pile[odd]\n    pile[even] = even + pile[even]\n\
    \    n = n + 1\n  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n\
    \ do\n    pile[i] = (i + 1) % 2 == 0 and i or i + 1\n  end\n  return pile\nend",
  "  local pile = {}\n  local i = 1\n  while i <= n do\n    pile[i] = i\n    i = 2\
    \ * i\n  end\n  return pile\nend", "  if n == 0 then\n    return {}\n  elseif\
    \ n == 1 then\n    return {1}\n  elseif n % 2 == 0 then\n    return make_a_pile(n-1)\
    \ + {n}\n  else\n    return make_a_pile(n-1) + make_a_pile(n-2)\n  end\nend",
  "  local pile = {}\n  for i = 1, n do\n    if i % 2 == 1 then\n      pile[i] = n\n\
    \    else\n      pile[i] = 2 * n + 1\n    end\n  end\n  return pile\nend", " \
    \ local pile = {}\n  local next_odd\n  if n % 2 == 0 then\n    next_odd = n\n\
    \  else\n    next_odd = n - 1\n  end\n  for i = 1, next_odd do\n    table.insert(pile,\
    \ i + 1)\n  end\n  local next_even\n  if n % 2 == 1 then\n    next_even = n\n\
    \  else\n    next_even = n - 2\n  end\n  for i = 1, next_even do\n    table.insert(pile,\
    \ i + 2)\n  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n\
    \    pile[i] = (i + 1) % 2 == 0 and n or i + 1\n  end\n  return pile\nend", " \
    \ local pile = {}\n  for i = 1, n do\n    pile[i] = (i + 1) % 2 == 0 and n or\
    \ i + 1\n  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n \
    \   if i % 2 == 0 then\n      pile[i] = n\n    else\n      pile[i] = 2 * n + 1\n\
    \    end\n  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n\
    \    pile[i] = i\n  end\n  local odd_pile = {}\n  for i = 1, n do\n    odd_pile[i]\
    \ = odd_pile[i] or i\n  end\n  local even_pile = {}\n  for i = 1, n do\n    even_pile[i]\
    \ = even_pile[i] or i\n  end\n  local next_odd_pile = {}\n  for i = 1, n do\n\
    \    next_odd_pile[i] = next_odd_pile[i] or odd_pile[i]\n  end\n  local next_even_pile\
    \ = {}\n  for i = 1, n do\n    next_even_pile[i] = next_even_pile[i] or even_pile[i]\n\
    \  end\n  return { pile = pile, odd_pile = odd_pile, even_pile = even_pile,\n\
    \           next_odd_pile = next_odd_pile, next_even_pile = next_even_ple }\n\
    end", "  if n == 0 then\n    return {}\n  elseif n == 1 then\n    return {1}\n\
    \  elseif n % 2 == 0 then\n    return make_a_pile(n / 2) + {n % 2}\n  else\n \
    \   return make_a_pile(n / 2) + {n % 2 + 1}\n  end\nend", "  local pile = {}\n\
    \  for i = 1, n do\n    if i % 2 == 0 then\n      pile[i] = n\n    else\n    \
    \  pile[i] = 2 * n - i\n    end\n  end\n  return pile\nend", "  local pile = {}\n\
    \  local next_odd\n  if n then\n    next_odd = next_even =\n      if n % 2 ==\
    \ 0 then\n        math.floor(n/2) + 1\n      else\n        math.floor(n/2) + 1\n\
    \      end\n    for i = 1, n do\n      pile[i] = next_odd\n      next_odd = next_even\
    \ + 1\n      next_even = next_even + 2\n    end\n  end\n  return pile\nend", " \
    \ local pile = {}\n  local i = 1\n  while i <= n do\n    if i % 2 == 0 then\n\
    \      pile[i] = n\n      i = i + 1\n    else\n      pile[i] = (i + 1) * (i +\
    \ 1)\n      i = i + 1\n    end\n  end\n  return pile\nend", "  local pile = {}\n\
    \  local i = 1\n  while i <= n do\n    if i % 2 == 0 then\n      pile[i] = n\n\
    \    else\n      pile[i] = (n / 2) + 1\n    end\n    i = i + 1\n  end\n  return\
    \ pile\nend", "  local pile = {}\n  local next_odd\n  if n and n % 2 == 0 then\n\
    \    next_odd = n\n  else\n    next_odd = n / 2\n  end\n  local next_even = next_odd\
    \ * 2\n  for i = 1, next_even do\n    pile[i] = next_odd\n    next_odd = next_odd\
    \ + 1\n  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n   \
    \ if i % 2 == 0 then\n      pile[i] = n\n    else\n      pile[i] = 2 * n + 1\n\
    \    end\n  end\n  return pile\nend", "  local pile = {}\n  local next_odd\n \
    \ if n % 2 == 0 then\n    next_odd = n\n  else\n    next_odd = n - 1\n  end\n\
    \  for i = 1, next_odd do\n    pile[i + 1] = n\n  end\n  if next_odd % 2 == 0\
    \ then\n    pile[next_odd] = n\n  end\n  return pile\nend", "  local pile = {}\n\
    \  local next_odd\n  local next_even\n  if n then\n    if n % 2 == 0 then\n  \
    \    next_even = n / 2\n    else\n      next_odd = math.floor(n/2)\n    end\n\
    \    for i = 1, n do\n      pile[i] = next_odd\n      next_odd = next_odd + 1\n\
    \      if next_odd > n then\n        next_odd = 1\n      end\n      if next_even\
    \ > n then\n        next_even = 1\n      end\n    end\n  end\n  return pile\n\
    end", "  local pile = {}\n  local next_odd\n  if n and n % 2 == 1 then\n    next_odd\
    \ = n\n  else\n    next_odd = math.floor(n/2)\n  end\n  local next_even = n -\
    \ next_odd\n  for i = 1, next_odd do\n    pile[i] = n\n  end\n  for i = 1, next_even\
    \ do\n    pile[i] = n\n  end\n  return pile\nend", "  local pile = {}\n  local\
    \ next_odd\n  local next_even\n  if n % 2 == 0 then\n    next_odd = n\n    next_even\
    \ = 2 * n + 1\n  else\n    next_odd = 2 * n + 1\n    next_even = n\n  end\n  for\
    \ i = 1, next_odd do\n    pile[i + 1] = n\n  end\n  for i = 1, next_even do\n\
    \    pile[i + 1] = 2 * n + 1\n  end\n  return pile\nend", "  local pile = {}\n\
    \  local i = 1\n  while i <= n do\n    if i % 2 == 0 then\n      pile[i] = n\n\
    \    else\n      pile[i] = (n - i) / 2\n    end\n    i = i + 1\n  end\n  return\
    \ pile\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i] = n\n    if n\
    \ ~= 0 then\n      if n ~= 1 then\n        pile[i] = pile[i] / 2\n      end\n\
    \      if n ~= 2 then\n        pile[i] = pile[i] + 1\n      end\n    end\n  end\n\
    \  return pile\nend", "  local pile = {}\n  local next_odd\n  local next_even\n\
    \  if n then\n    if n % 2 == 0 then\n      next_even = n / 2\n    else\n    \
    \  next_odd = math.floor(n/2)\n    end\n    for i = 1, n do\n      pile[i] = next_odd\n\
    \      next_odd = next_odd + 1\n      if next_odd % 2 == 0 then\n        next_even\
    \ = next_even + 1\n      end\n    end\n  end\n  return pile\nend", "  local pile\
    \ = {}\n  local next_odd\n  local next_even\n  if n <= 0 then\n    return pile\n\
    \  elseif n%2 == 1 then\n    -- If the number is odd, the next odd number is even.\n\
    \    -- If the number is even, the next even number is odd.\n    next_odd = n\n\
    \    next_even = n - 1\n  else\n    -- If the number is odd, the next odd number\
    \ is odd.\n    -- If the number is even, the next even number is even.\n    next_odd\
    \ = n + 1\n    next_even = n - 2\n  end\n  local i = 1\n  while i <= next_odd\
    \ do\n    pile[i] = i\n    i = i + 2\n  end\n  i = 1\n  while i <= next_even do\n\
    \    pile[i] = i\n    i = i + 2\n  end\n  return pile\nend", "  local pile = {}\n\
    \  for i = 1, n do\n    if i % 2 == 0 then\n      pile[i + 1] = pile[i] + 1\n\
    \    else\n      pile[i + 1] = pile[i]\n    end\n  end\n  return pile\nend", " \
    \ local pile = {}\n  for i = 1, n do\n    pile[i] = (i + 1) % 2 == 0 and i or\
    \ i + 1\n  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n \
    \   pile[i] = n\n    if n ~= 0 then\n      if n ~= 1 then\n        pile[i] = pile[math.floor(n/2)]\
    \ + 1\n      end\n      if n % 2 == 0 then\n        pile[i] = pile[math.floor(n/2)]\n\
    \      end\n    end\n  end\n  return pile\nend", "  local pile = {}\n  local next_odd\n\
    \  if n % 2 == 0 then\n    next_odd = n\n  else\n    next_odd = n - 1\n  end\n\
    \  for i = 1, next_odd do\n    table.insert(pile, i)\n  end\n  if next_odd % 2\
    \ == 1 then\n    table.insert(pile, next_odd + 1)\n  end\n  return pile\nend",
  "  local pile = {}\n  local next_odd\n  local next_even\n  local i = 1\n  repeat\n\
    \    next_odd = next_odd or math.floor(n/2) + 1\n    next_even = next_even or\
    \ math.floor(n/2) + 2\n    pile[i] = next_odd\n    pile[#pile+i] = next_even\n\
    \    n = n - next_odd * next_even\n    i = i + 1\n  until n == 0\n  return pile\n\
    end", "  local pile = {}\n  local n1 = math.floor(n/2)\n  local n2 = n - n1\n\
    \  local n3 = n - n1 - n2\n  if n1 % 2 == 0 then\n    pile[1] = n1\n  else\n \
    \   pile[1] = n1 + 1\n  end\n  if n2 % 2 == 0 then\n    pile[2] = n2\n  else\n\
    \    pile[2] = n2 + 1\n  end\n  if n3 % 2 == 0 then\n    pile[3] = n3\n  else\n\
    \    pile[3] = n3 + 1\n  end\n  return pile\nend", "  local pile = {}\n  for i\
    \ = 1, n do\n    pile[i] = n\n    if n ~= 0 then\n      n = math.floor(n/2)\n\
    \    else\n      n = n + 1\n    end\n  end\n  return pile\nend", "  local pile\
    \ = {}\n  for i = 1, n do\n    pile[i] = i\n  end\n  if n ~= 0 then\n    if n\
    \ % 2 == 1 then\n      pile[n + 1] = math.floor(n/2) + 1\n    else\n      pile[n\
    \ + 1] = math.floor(n/2) + 1\n    end\n  end\n  return pile\nend", "  if n ==\
    \ 0 then\n    return {}\n  elseif n == 1 then\n    return {1}\n  elseif n % 2\
    \ == 0 then\n    return make_a_pile(n-1) + make_a_pile(n-2)\n  else\n    return\
    \ make_a_pile(n-1) + make_a_pile(n-2)\n  end\nend", "  local pile = {}\n  local\
    \ next_odd\n  local next_even\n  if n % 2 == 0 then\n    next_odd = n\n    next_even\
    \ = n - 1\n  else\n    next_odd = n - 1\n    next_even = n\n  end\n  for i = 1,\
    \ next_odd do\n    pile[i + 1] = pile[i] + 1\n  end\n  for i = 1, next_even do\n\
    \    pile[i + 1] = pile[i] + 1\n  end\n  return pile\nend", "  local pile = {}\n\
    \  local next_odd\n  if n and n ~= 0 then\n    next_odd = next_even =\n      if\
    \ n ~= 1 then math.floor(n/2) else 1 end\n    for i = 1, n do\n      pile[i] =\
    \ next_odd\n      next_odd = next_even + next_odd\n      next_even = next_even\
    \ + next_even\n    end\n  end\n  return pile\nend", "  local pile = {}\n  local\
    \ i = 1\n  while i <= n do\n    pile[i] = n\n    i = 2 * i\n  end\n  return pile\n\
    end", "  local pile = {}\n  for i = 1, n do\n    pile[i] = (i + 1) * (i + 1) --\
    \ odd or even\n  end\n  return pile\nend", "  if n == 0 then\n    return {}\n\
    \  elseif n == 1 then\n    return {1}\n  else\n    local pile = {}\n    local\
    \ next_odd_stones = math.floor(n/2) + 1\n    local next_even_stones = n - next_odd_stones\n\
    \    for i = 1, next_odd_stones do\n      pile[i] = next_odd_stones\n      next_odd_stones\
    \ = next_odd_stones + 2\n    end\n    for i = 1, next_even_stones do\n      pile[i]\
    \ = next_even_stones\n      next_even_stones = next_even_stones + 2\n    end\n\
    \    return pile\n  end\nend", "  if n == 0 then\n    return {}\n  elseif n ==\
    \ 1 then\n    return {1}\n  elseif n % 2 == 0 then\n    return make_a_pile(n /\
    \ 2) + {n % 2}\n  else\n    return make_a_pile(n / 2) + {n % 2 + 1}\n  end\nend",
  "  local pile = {}\n  for i = 1, n do\n    pile[i] = (i + 1) % 2 == 0 and i or i\
    \ + 1\n  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n   \
    \ pile[i] = n\n    if n ~= 0 then\n      if n % 2 == 0 then\n        pile[i] =\
    \ pile[i] + 1\n      else\n        pile[i] = pile[i] + 2\n      end\n    end\n\
    \  end\n  return pile\nend", "  local pile = {}\n  local next_odd\n  local next_even\n\
    \  local i = 1\n  repeat\n    next_odd = next_odd or math.floor(n/2) + 1\n   \
    \ next_even = next_even or math.floor(n/2) + 2\n    pile[i] = next_odd\n    pile[#pile+i]\
    \ = next_even\n    n = n - next_odd * next_even\n    i = i + 1\n  until n <= 0\n\
    \  return pile\nend", "  local pile = {}\n  local next_odd_num\n  local next_even_num\n\
    \  if n <= 0 then\n    return pile\n  elseif n == 2 then\n    next_odd_num = next_even_num\
    \ = n\n  else\n    next_odd_num = next_even_num = math.floor(n/2)\n  end\n  for\
    \ i = 1, next_odd_num do\n    pile[i + 1] = n\n  end\n  for i = next_odd_num +\
    \ 1, next_even_num do\n    pile[i + 1] = n\n  end\n  return pile\nend", "  local\
    \ pile = {}\n  for i = 1, n do\n    if i % 2 == 1 then\n      pile[i + 1] = pile[i]\
    \ + 1\n    else\n      pile[i + 1] = pile[i]\n    end\n  end\n  return pile\n\
    end", "  local pile = {}\n  local next_odd\n  local next_even\n  if n then\n \
    \   if n % 2 == 0 then\n      next_even = n / 2\n    else\n      next_odd = math.floor(n/2)\n\
    \    end\n    pile[1] = next_odd\n    for i = 2, n do\n      pile[i] = pile[i-1]\
    \ + next_even\n    end\n  end\n  return pile\nend", "  local pile = {}\n  local\
    \ next_odd\n  local next_even\n  if n and n % 2 == 0 then\n    next_odd = n\n\
    \  else\n    next_even = n\n  end\n  repeat\n    local next_level = next_odd or\
    \ next_even\n    next_odd = next_even % 2\n    next_even = next_even / 2\n   \
    \ pile[#pile+1] = next_level\n  until next_level == 0\n  return pile\nend", " \
    \ local pile = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n      pile[i + 1]\
    \ = pile[i] + 1\n    else\n      pile[i + 1] = pile[i] + 2\n    end\n  end\n \
    \ return pile\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i] = i\n\
    \  end\n  if n ~= 0 then\n    pile[#pile+1] = n / 2\n    if n % 2 == 1 then\n\
    \      pile[#pile+1] = n / 2 + 1\n    end\n  end\n  return pile\nend", "  local\
    \ pile = {}\n  local next_odd\n  local next_even\n  if n <= 0 then\n    return\
    \ pile\n  elseif n % 2 == 0 then\n    next_even = n / 2\n  else\n    next_odd\
    \ = math.floor(n/2)\n  end\n  for i = 1, next_odd do\n    pile[i + 1] = n + i\n\
    \  end\n  for i = 1, next_even do\n    pile[i + 1] = n + 2 * i\n  end\n  return\
    \ pile\nend", "  local pile = {}\n  local next_odd\n  if n then\n    next_odd\
    \ = math.floor(n/2) + 1\n    pile[1] = next_odd\n    if next_odd % 2 == 0 then\n\
    \      pile[2] = next_odd\n    end\n  end\n  return pile\nend", "  local pile\
    \ = {}\n  for i = 1, n do\n    pile[i] = (i + 1) * (i + 1)\n  end\n  return pile\n\
    end", "  if n == 0 then\n    return {}\n  elseif n == 1 then\n    return {1}\n\
    \  else\n    local pile = {}\n    local next_odd_number = math.floor(n/2)\n  \
    \  local next_even_number = n - next_odd_number\n    pile[1] = next_odd_number\n\
    \    if next_even_number > 0 then\n      pile[2] = next_even_number\n    end\n\
    \    return pile\n  end\nend", "  local pile = {}\n  for i = 1, n do\n    if i\
    \ % 2 == 0 then\n      pile[i + 1] = pile[i] + 1\n    else\n      pile[i + 1]\
    \ = pile[i]\n    end\n  end\n  return pile\nend", "  local pile = {}\n  for i\
    \ = 1, n do\n    if i % 2 == 0 then\n      pile[i + 1] = pile[i] + 1\n    else\n\
    \      pile[i + 1] = pile[i]\n    end\n  end\n  return pile\nend", "  local pile\
    \ = {}\n  for i = 1, n do\n    pile[i] = (i + 1) * (i + 1) -- odd or even\n  end\n\
    \  return pile\nend", "  local pile = {}\n  local next_odd\n  local next_even\n\
    \  local i = 1\n  repeat\n    next_odd = next_odd or math.floor(n/2) + 1\n   \
    \ next_even = next_even or math.floor(n/2) + 2\n    pile[i] = next_odd\n    pile[i+1]\
    \ = next_even\n    n = n - next_odd * next_even\n    i = i + 1\n  until n == 0\n\
    \  return pile\nend", "  local pile = {}\n  local next_odd\n  local next_even\n\
    \  if n <= 0 then\n    return pile\n  elseif n == 1 then\n    pile[1] = 1\n  \
    \  return pile\n  else\n    next_odd = math.floor(n/2) + 1\n    next_even = math.floor(n/2)\
    \ - 1\n    for i = 1, n do\n      pile[i + 1] = pile[i] + next_odd * next_even\n\
    \      next_even = next_even + next_odd\n      next_odd = next_odd + 1\n    end\n\
    \  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n    if i %\
    \ 2 == 1 then\n      pile[i] = n + 1\n    else\n      pile[i] = n\n    end\n \
    \ end\n  return pile\nend", "  local pile = {}\n  local i = 1\n  while i <= n\
    \ do\n    if i % 2 == 0 then\n      pile[i] = n\n    else\n      pile[i] = (i\
    \ + 1) * (i + 2) / 2\n    end\n    i = i + 1\n  end\n  return pile\nend", "  local\
    \ pile = {}\n  for i = 1, n do\n    pile[i] = (i + 1) * (i + 1) -- n * (n + 1)\
    \ / 2\n  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n   \
    \ pile[i] = (i + 1) * (i + 1) -- odd or even\n  end\n  return pile\nend", "  local\
    \ pile = {}\n  local i = 1\n  while i <= n do\n    pile[i] = i\n    i = 2 * i\n\
    \  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i]\
    \ = n\n    if n ~= 0 then\n      n = math.floor(n/2)\n      if n % 2 == 1 then\n\
    \        n = n + 1\n      end\n    end\n  end\n  return pile\nend", "  local pile\
    \ = {}\n  local next_odd\n  local next_even\n  if n and n % 2 == 0 then\n    next_odd\
    \ = n\n  else\n    next_even = n\n  end\n  local i = 1\n  while i <= next_odd\
    \ do\n    pile[i] = i\n    i = i + 2\n  end\n  i = 1\n  while i <= next_even do\n\
    \    pile[i] = i\n    i = i + 2\n  end\n  return pile\nend", "  local pile = {}\n\
    \  local i = 1\n  while i <= n do\n    pile[i] = n\n    i = 2 * i\n  end\n  return\
    \ pile\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i] = n\n    if n\
    \ % 2 == 1 then\n      pile[i] = pile[i] + 1\n    end\n  end\n  return pile\n\
    end", "  local pile = {}\n  local next_odd\n  local next_even\n  if n <= 0 then\n\
    \    return pile\n  end\n  if n % 2 == 0 then\n    next_even = n / 2\n  else\n\
    \    next_odd = math.floor(n/2)\n  end\n  pile[1] = next_odd\n  for i = 2, next_even\
    \ do\n    pile[i] = pile[i-1] + next_odd\n  end\n  return pile\nend", "  local\
    \ pile = {}\n  local next_odd\n  local next_even\n  local i = 1\n  repeat\n  \
    \  next_odd = next_odd or math.floor(n/2) + 1\n    next_even = next_even or math.floor(n/2)\
    \ + 0\n    pile[i] = next_odd\n    pile[i+1] = next_even\n    n = n - next_odd\
    \ * next_even\n    i = i + 2\n  until n > 0\n  return pile\nend", "  local pile\
    \ = {}\n  for i = 1, n do\n    pile[i] = n\n    if math.mod(n, 2) == 0 then\n\
    \      n = math.floor(n/2)\n    else\n      n = math.ceil(n/2)\n    end\n  end\n\
    \  return pile\nend", "  local pile = {}\n  for i = 1, n do\n    if i % 2 == 0\
    \ then\n      pile[i + 1] = pile[i] + 1\n    else\n      pile[i + 1] = pile[i]\n\
    \    end\n  end\n  return pile\nend", "  local pile = {}\n  local next_odd\n \
    \ local next_even\n  if n <= 0 then\n    return pile\n  end\n  next_odd = next_even\
    \ = math.floor(n/2)\n  while n >= 1 do\n    pile[#pile+1] = next_odd\n    next_odd\
    \ = next_odd + 1\n    if next_odd % 2 == 0 then\n      next_even = next_even +\
    \ 1\n    end\n    n = n - 1\n  end\n  return pile\nend", "  if n == 0 then\n \
    \   return {}\n  elseif n == 1 then\n    return {1}\n  elseif n % 2 == 0 then\n\
    \    return make_a_pile(n / 2) + make_a_pile(n / 2)\n  else\n    return make_a_pile(n\
    \ / 2) + make_a_pile(n / 2) + make_a_pile(n / 2)\n  end\nend", "  local pile =\
    \ {}\n  local i = 1\n  while i <= n do\n    pile[i] = n\n    i = 2 * i\n  end\n\
    \  return pile\nend", "  local pile = {}\n  local i = 1\n  while i <= n do\n \
    \   if i % 2 == 1 then\n      pile[i] = n\n    else\n      pile[i] = (math.floor(n/2)\
    \ + 1)\n    end\n    i = i + 1\n  end\n  return pile\nend", "  local pile = {}\n\
    \  for i = 1, n do\n    pile[i] = (i + 1) % 2 == 0 and i + 1 or i\n  end\n  return\
    \ pile\nend", "  local pile = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n\
    \      pile[i] = n\n    else\n      pile[i] = n - (i + 1)\n    end\n  end\n  return\
    \ pile\nend", "  local pile = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n\
    \      pile[i] = n\n    else\n      pile[i] = 2 * n - i\n    end\n  end\n  return\
    \ pile\nend", "  local pile = {}\n  local next_odd\n  if n and n % 2 == 1 then\n\
    \    next_odd = n\n  else\n    next_odd = n + 1\n  end\n  for i = 1, next_odd\
    \ do\n    pile[i] = n\n  end\n  if next_odd % 2 == 1 then\n    pile[next_odd]\
    \ = n + 1\n  end\n  return pile\nend", "  local pile = {}\n  local next_odd\n\
    \  local next_even\n  if n <= 0 then\n    return pile\n  end\n  if n % 2 == 0\
    \ then\n    next_even = n / 2\n  else\n    next_odd = math.floor(n/2)\n  end\n\
    \  for i = 1, next_odd do\n    pile[i + 1] = pile[i] + 1\n  end\n  for i = 1,\
    \ next_even do\n    pile[i + 1] = pile[i] + 2\n  end\n  return pile\nend", " \
    \ local pile = {}\n  for i = 1, n do\n    pile[i] = n\n    if n ~= 0 then\n  \
    \    if n ~= 1 then\n        pile[i] = pile[i] / 2\n      end\n      if n ~= 2\
    \ then\n        pile[i] = pile[i] + 1\n      end\n    end\n  end\n  return pile\n\
    end", "  local pile = {}\n  local next_odd\n  if n % 2 == 0 then\n    next_odd\
    \ = n\n  else\n    next_odd = n + 1 -- Add one to make it even.\n  end\n  for\
    \ i = 1, next_odd do\n    pile[i] = n\n    n = n - 1\n  end\n  for i = 1, next_odd\
    \ do\n    pile[i] = n\n    n = n - 1\n  end\n  return pile\nend", "  local pile\
    \ = {}\n  for i = 1, n do\n    pile[i] = n\n    if n ~= 0 then\n      n = math.floor(n/2)\n\
    \    end\n  end\n  return pile\nend", "  local pile = {}\n  local next_odd\n \
    \ local next_even\n  if n % 2 == 0 then\n    next_odd = n\n    next_even = n -\
    \ 1\n  else\n    next_odd = n + 1\n    next_even = n\n  end\n  for i = 1, next_odd\
    \ do\n    pile[i] = i\n  end\n  for i = 1, next_even do\n    pile[i] = i + 1\n\
    \  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n    if i %\
    \ 2 == 1 then\n      pile[i] = n + 1\n    else\n      pile[i] = n\n    end\n \
    \ end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i]\
    \ = (i + 1) * (i % 2 == 0 and i + 1 or i + 2)\n  end\n  return pile\nend", " \
    \ local pile = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n      pile[i + 1]\
    \ = pile[i] + 1\n    else\n      pile[i + 1] = pile[i] + 2\n    end\n  end\n \
    \ return pile\nend", "  local pile = {}\n  local i = 1\n  while i <= n do\n  \
    \  if i % 2 == 1 then\n      pile[i] = n\n    else\n      pile[i] = (math.floor(n/2)\
    \ + 1) * 2\n    end\n    i = i + 1\n  end\n  return pile\nend", "  local pile\
    \ = {}\n  local next_odd = next_even = 0\n  for i = 1, n do\n    if i % 2 == 0\
    \ then\n      next_even = next_even + 1\n    else\n      next_odd = next_odd +\
    \ 1\n    end\n    pile[i] = next_odd\n    next_odd = next_even - 1\n    next_even\
    \ = next_even + 1\n  end\n  return pile\nend", "  local pile = {}\n  for i = 1,\
    \ n do\n    if i % 2 == 0 then\n      pile[i + 1] = pile[i] + 1\n    else\n  \
    \    pile[i + 1] = pile[i]\n    end\n  end\n  return pile\nend", "  local pile\
    \ = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n      pile[i] = n\n    else\n\
    \      pile[i] = n / 2\n    end\n  end\n  return pile\nend", "  if n == 0 then\n\
    \    return {}\n  elseif n == 1 then\n    return {1}\n  else\n    local pile =\
    \ {}\n    local next_odd = math.floor(n/2)\n    local next_even = n - next_odd\n\
    \    local next_odd_pile = make_a_pile(next_odd)\n    local next_even_pile = make_a_pile(next_even)\n\
    \    for i = 1, #next_odd_pile do\n      pile[i] = next_odd_pile[i] + next_even_pile[i]\n\
    \    end\n    return pile\n  end\nend", "  local pile = {}\n  for i = 1, n do\n\
    \    pile[i] = (i + 1) % 2 == 0 and i + 1 or i\n  end\n  return pile\nend", " \
    \ local pile = {}\n  local next_odd\n  local next_even\n  if n <= 0 then\n   \
    \ return pile\n  elseif n == 2 then\n    next_odd = next_even = math.floor(n/2)\n\
    \  elseif n%2 == 0 then\n    next_odd = math.floor(n/2)\n    next_even = math.floor(n/2)+1\n\
    \  else\n    next_odd = math.floor(n/2)\n    next_even = math.floor(n/2)+1\n \
    \ end\n  for i = 1, n do\n    pile[i] = next_odd\n    next_odd = next_even\n \
    \   next_even = next_even + 2\n  end\n  return pile\nend", "  local pile = {}\n\
    \  for i = 1, n do\n    if i % 2 == 0 then\n      pile[i] = n\n    else\n    \
    \  pile[i] = 2 * n + 1\n    end\n  end\n  return pile\nend", "  local pile = {}\n\
    \  local i = 1\n  while i <= n do\n    pile[i] = n\n    i = 2 * i\n  end\n  return\
    \ pile\nend", "  if n == 0 then\n    return {}\n  elseif n == 1 then\n    return\
    \ {1}\n  else\n    local pile = {}\n    local next_odd = math.floor(n/2)\n   \
    \ local next_even = n - next_odd\n    local next_odd_pile = make_a_pile(next_odd)\n\
    \    local next_even_pile = make_a_pile(next_even)\n    for i = 1, #next_odd_pile\
    \ do\n      pile[#pile + 1] = next_odd_pile[i]\n    end\n    for i = 1, #next_even_pile\
    \ do\n      pile[#pile + 1] = next_even_pile[i]\n    end\n    return pile\n  end\n\
    end", "  local pile = {}\n  local next_odd\n  local next_even\n  if n then\n \
    \   if n % 2 == 0 then\n      next_odd = n\n      next_even = n - 1\n    else\n\
    \      next_odd = n + 1\n      next_even = n\n    end\n  else\n    next_odd =\
    \ 1\n    next_even = 1\n  end\n  for i = next_odd, next_even, 2 do\n    table.insert(pile,\
    \ i)\n  end\n  return pile\nend", "  if n < 1 then\n    return {}\n  elseif n\
    \ == 1 then\n    return {n}\n  else\n    local pile = {}\n    local next_odd\n\
    \    local next_even\n    if n % 2 == 0 then\n      next_even = n / 2\n      next_odd\
    \ = n - next_even\n    else\n      next_odd = n / 2\n      next_even = n - next_odd\n\
    \    end\n    for i = 1, next_odd do\n      pile[i + 1] = pile[i] + 1\n    end\n\
    \    for i = 1, next_even do\n      pile[i + 1] = pile[i] + 2\n    end\n    return\
    \ pile\n  end\nend", "  local pile = {}\n  for i = 1, n do\n    if n % 2 == 0\
    \ then\n      pile[i] = n\n      n = n / 2\n    else\n      pile[i] = 2 * n +\
    \ 1\n      n = n / 2\n    end\n  end\n  return pile\nend", "  local pile = {}\n\
    \  local next_odd\n  local next_even\n  if n <= 0 then\n    return pile\n  end\n\
    \  if n % 2 == 0 then\n    next_even = n / 2\n  else\n    next_odd = math.floor(n/2)\n\
    \  end\n  pile[1] = next_odd\n  for i = 2, next_even do\n    pile[i] = pile[i-1]\
    \ + next_odd\n  end\n  return pile\nend", "  local pile = {}\n  local i = 1\n\
    \  while i <= n do\n    if i % 2 == 0 then\n      pile[i] = n\n    else\n    \
    \  pile[i] = (math.floor(n/2) + 1) * 2\n    end\n    i = i + 1\n  end\n  return\
    \ pile\nend", "  local pile = {}\n  local next_odd\n  local next_even\n  if n\
    \ <= 0 then\n    return pile\n  end\n  if n % 2 == 1 then\n    next_odd = n\n\
    \  else\n    next_even = n\n  end\n  local i = 1\n  while i <= next_odd do\n \
    \   pile[i] = i\n    i = i + 2\n  end\n  i = 1\n  while i <= next_even do\n  \
    \  pile[i] = i\n    i = i + 2\n  end\n  return pile\nend", "  local pile = {}\n\
    \  local next_odd\n  local next_even\n  if n <= 0 then\n    return pile\n  end\n\
    \  if n % 2 == 0 then\n    next_even = n / 2\n  else\n    next_odd = math.floor(n/2)\n\
    \  end\n  for i = 1, n do\n    pile[i] = next_odd\n    if i % 2 == 0 then\n  \
    \    next_odd = next_odd + next_even\n    end\n  end\n  return pile\nend", " \
    \ local pile = {}\n  local next_odd\n  local next_even\n  if n <= 0 then\n   \
    \ return pile\n  elseif n % 2 == 0 then\n    next_odd = n\n    next_even = n -\
    \ 1\n  else\n    next_even = n\n    next_odd = n - 1\n  end\n  pile[1] = next_odd\n\
    \  pile[2] = next_even\n  for i = 4, n, 2 do\n    pile[i] = pile[i-1] + 2\n  end\n\
    \  return pile\nend", "  local pile = {}\n  local i = 1\n  while i <= n do\n \
    \   if i % 2 == 0 then\n      pile[i] = n\n      i = i + 1\n    else\n      pile[i]\
    \ = n - 1\n      i = i + 1\n    end\n  end\n  return pile\nend", "  local pile\
    \ = {}\n  local i = 1\n  while i <= n do\n    if i % 2 == 1 then\n      pile[i]\
    \ = n\n    else\n      pile[i] = (i + 1) * (i + 1)\n    end\n    i = i + 1\n \
    \ end\n  return pile\nend", "  local pile = {}\n  local next_odd\n  local next_even\n\
    \  if n%2 == 0 then\n    next_even = math.floor(n/2)\n  else\n    next_odd = math.floor(n/2)\n\
    \  end\n  for i = 1, n do\n    pile[i] = next_odd\n    if n%2 == 0 then\n    \
    \  next_odd = next_odd+1\n    else\n      next_even = next_even+1\n    end\n \
    \ end\n  return pile\nend", "  local pile = {}\n  local next_odd\n  local next_even\n\
    \  if n <= 0 then\n    return pile\n  end\n  next_odd = next_even = math.floor(n/2)\n\
    \  while n ~= 0 do\n    pile[#pile+1] = next_odd\n    next_odd = next_even + next_odd\n\
    \    next_even = next_even + next_even\n    n = n - 2\n  end\n  return pile\n\
    end", "  local pile = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n      pile[i]\
    \ = n\n    else\n      pile[i] = n + math.floor((n - i) / 2)\n    end\n  end\n\
    \  return pile\nend", "  if n == 0 then\n    return {}\n  elseif n == 1 then\n\
    \    return {1}\n  elseif n % 2 == 0 then\n    return make_a_pile(n-1) + make_a_pile(n-2)\n\
    \  else\n    return make_a_pile(n-1) + make_a_pile(n-2)\n  end\nend", "  local\
    \ pile = {}\n  local i = 1\n  while i <= n do\n    pile[i] = n\n    i = 2 * i\n\
    \  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n    if i %\
    \ 2 == 0 then\n      pile[i + 1] = pile[i] + 1\n    else\n      pile[i + 1] =\
    \ pile[i] + 2\n    end\n  end\n  return pile\nend", "  if n == 0 then\n    return\
    \ {}\n  elseif n == 1 then\n    return {1}\n  else\n    local pile = {}\n    local\
    \ next_odd = math.floor(n/2)\n    local next_even = n - next_odd\n    local next_odd_index\
    \ = next_odd\n    local next_even_index = next_even\n    local next_odd_value\
    \ = next_odd\n    local next_even_value = next_even\n    for i = 1, n do\n   \
    \   pile[i] = 1\n      if i % 2 == 1 then\n        next_odd_value = next_odd_value\
    \ + 1\n      else\n        next_even_value = next_even_value + 1\n      end\n\
    \      if next_odd_value == next_even then\n        next_odd_index = next_odd_index\
    \ + 1\n        next_even_index = next_even_index + 1\n        next_odd_value =\
    \ next_odd_value + next_even_value\n        next_even_value = next_even_value\
    \ + next_odd_value\n      end\n    end\n    return pile\n  end\nend", "  local\
    \ pile = {}\n  for i = 1, n do\n    pile[i] = (i + 1) % 2 == 0 and i or i + 1\n\
    \  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i]\
    \ = i\n  end\n  if n % 2 == 1 then\n    pile[#pile+1] = math.floor(n/2)\n  end\n\
    \  return pile\nend", "  local pile = {}\n  for i = 1, n do\n    if i % 2 == 0\
    \ then\n      pile[i] = n\n    else\n      pile[i] = n - i\n    end\n  end\n \
    \ return pile\nend", "  if n == 0 then\n    return {}\n  elseif n == 1 then\n\
    \    return {1}\n  elseif n % 2 == 0 then\n    return make_a_pile(n / 2) + {n\
    \ % 2}\n  else\n    return make_a_pile(n / 2) + {n % 2 + 1}\n  end\nend", "  local\
    \ pile = {}\n  for i = 1, n do\n    pile[i] = i\n  end\n  if n % 2 == 1 then\n\
    \    pile[#pile+1] = n - 1\n  end\n  return pile\nend", "  local pile = {}\n \
    \ local next_odd\n  local next_even\n  if n <= 0 then\n    return pile\n  elseif\
    \ n % 2 == 0 then\n    next_even = n / 2\n  else\n    next_odd = math.floor(n/2)\n\
    \  end\n  pile[1] = next_odd\n  pile[2] = next_even\n  for i = 2, n do\n    pile[i]\
    \ = pile[i-1] + next_odd\n    if i % 2 == 0 then\n      pile[i] = pile[i] + next_even\n\
    \    end\n  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n\
    \    pile[i] = n\n    if n ~= 0 then\n      n = math.floor(n/2)\n      if n %\
    \ 2 == 0 then\n        n = n + 1\n      else\n        n = n - 1\n      end\n \
    \   end\n  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n \
    \   pile[i] = n\n    if math.mod(n, 2) == 1 then\n      pile[i + 1] = math.ceil(n/2)\n\
    \    else\n      pile[i + 1] = math.floor(n/2)\n    end\n  end\n  return pile\n\
    end", "  local pile = {}\n  local i = 1\n  while i <= n do\n    if i % 2 == 0\
    \ then\n      pile[i] = n\n    else\n      pile[i] = (i - 1) + ((i - 1) % 2)\n\
    \    end\n    i = i + 1\n  end\n  return pile\nend", "  local pile = {}\n  for\
    \ i = 1, n do\n    if i % 2 == 0 then\n      pile[i] = n\n    else\n      pile[i]\
    \ = n + math.floor((n - i) / 2)\n    end\n  end\n  return pile\nend", "  local\
    \ pile = {}\n  for i = 1, n do\n    pile[i] = n\n    if n % 2 == 0 then\n    \
    \  pile[i + 1] = math.floor(n/2)\n    else\n      pile[i + 1] = math.floor(n/2)\
    \ + 1\n    end\n  end\n  return pile\nend", "  if n == 0 then\n    return {}\n\
    \  elseif n == 1 then\n    return {1}\n  elseif n % 2 == 0 then\n    return make_a_pile(n\
    \ / 2) + make_a_pile(n / 2)\n  else\n    return make_a_pile(n / 2) + make_a_pile(n\
    \ / 2) + make_a_pile(n / 2)\n  end\nend", "  local pile = {}\n  for i = 1, n do\n\
    \    if i % 2 == 0 then\n      pile[i] = n\n    else\n      pile[i] = 2 * n\n\
    \    end\n  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n\
    \    pile[i] = n\n    if n ~= 0 then\n      n = math.floor(n/2)\n      pile[i]\
    \ = pile[i] + n or n\n    end\n  end\n  return pile\nend", "  local pile = {}\n\
    \  for i = 1, n do\n    pile[i] = n\n    if n ~= 0 then\n      n = math.floor(n/2)\
    \ + 1\n    end\n  end\n  return pile\nend", "  local pile = {}\n  local next_odd\n\
    \  local next_even\n  if n then\n    if n % 2 == 0 then\n      next_even = n /\
    \ 2\n    else\n      next_odd = math.floor(n/2)\n    end\n    for i = 1, n do\n\
    \      pile[i] = next_odd\n      next_odd = next_odd + 1\n      if next_odd %\
    \ 2 == 0 then\n        next_even = next_even + 1\n      end\n    end\n  end\n\
    \  return pile\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i] = n\n\
    \    if n ~= 0 then\n      if n % 2 == 0 then\n        pile[i] = pile[i] + 1\n\
    \      else\n        pile[i] = pile[i] + 2\n      end\n    end\n  end\n  return\
    \ pile\nend", "  local pile = {}\n  local next_odd\n  if n then\n    if n % 2\
    \ == 0 then\n      next_odd = n\n    else\n      next_odd = n + 1\n    end\n \
    \ else\n    next_odd = 1\n  end\n  local next_even\n  if n then\n    if n % 2\
    \ == 1 then\n      next_even = n\n    else\n      next_even = n + 1\n    end\n\
    \  else\n    next_even = 1\n  end\n  local i = 1\n  while i <= next_odd do\n \
    \   pile[i] = i\n    i = i + 1\n  end\n  i = next_even\n  while i <= next_even\
    \ do\n    pile[i] = i\n    i = i + 1\n  end\n  return pile\nend", "  local pile\
    \ = {}\n  for i = 1, n do\n    pile[i] = (i + 1) * (i + 1)\n  end\n  return pile\n\
    end", "  local pile = {}\n  for i = 1, n do\n    pile[i] = n\n    if n ~= 0 then\n\
    \      n = math.floor(n/2)\n      if n % 2 == 0 then\n        n = n + 1\n    \
    \  else\n        n = n - 1\n      end\n    end\n  end\n  return pile\nend", " \
    \ local pile = {}\n  for i = 1, n do\n    pile[i] = n\n    if n ~= 0 then\n  \
    \    if n ~= 1 then\n        pile[i] = pile[i] + (n ~= 2 and 1 or 0)\n      end\n\
    \    end\n  end\n  return pile\nend", "  local pile = {}\n  local next_odd\n \
    \ local next_even\n  if n then\n    if n % 2 == 0 then\n      next_odd = n\n \
    \     next_even = n - 1\n    else\n      next_odd = n - 1\n      next_even = n\n\
    \    end\n  else\n    next_odd = next_even = 0\n  end\n  repeat\n    pile[#pile+1]\
    \ = next_odd\n    next_odd = next_even + 1\n    next_even = next_even + 2\n  until\
    \ next_odd > next_even\n  return pile\nend", "  local pile = {}\n  for i = 1,\
    \ n do\n    pile[i] = (i + 1) * (i + 1) -- odd or even\n  end\n  return pile\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
