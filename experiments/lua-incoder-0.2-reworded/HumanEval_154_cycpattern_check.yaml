name: HumanEval_154_cycpattern_check
language: lua
prompt: "-- You are given 2 words. You need to return true if the second word or any\
  \ of its rotations is a substring in the first word\n-- >>> cycpattern_check('abcd',\
  \ 'abd')\n-- false\n-- >>> cycpattern_check('hello', 'ell')\n-- true\n-- >>> cycpattern_check('whassup',\
  \ 'psus')\n-- false\n-- >>> cycpattern_check('abab', 'baa')\n-- true\n-- >>> cycpattern_check('efef',\
  \ 'eeff')\n-- false\n-- >>> cycpattern_check('himenss', 'simen')\n-- true\nlocal\
  \ function cycpattern_check(a, b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = cycpattern_check\n\
  \    lu.assertEquals(candidate('xyzw', 'xyw'), false)\n    lu.assertEquals(candidate('yello',\
  \ 'ell'), true)\n    lu.assertEquals(candidate('whattup', 'ptut'), false)\n    lu.assertEquals(candidate('efef',\
  \ 'fee'), true)\n    lu.assertEquals(candidate('abab', 'aabb'), false)\n    lu.assertEquals(candidate('winemtt',\
  \ 'tinem'), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local function is_substring_of(a, b)\n    local function is_substring_of_helper(str,\
    \ substr, i, j)\n      if i >= j or str[i] ~= substr[j] then\n        return false\n\
    \      end\n      return is_substring_of_helper(str, substr, i + 1, j) or is_substring_of_helper(str,\
    \ substr, i + 1, j - 1)\n    end\n    return is_substring_of_helper(a, b, #a,\
    \ #b)\n  end\n  return is_substring_of(a, b)\nend", "  local function helper(w,\
    \ i)\n    if i == #w then\n      return true\n    end\n    if w[i] == a then\n\
    \      return helper(w, i + 1)\n    end\n    if w[i] == b then\n      return helper(w,\
    \ i - 1)\n    end\n    return false\n  end\n  return helper(a, b)\nend", "   \
    \ local function helper(str, i, j)\n        if i == j or str[i] == \"\" then return\
    \ true end\n        if str[i] == b and helper(str, i + 1, j - 1) then return true\
    \ end\n        if str[i] == b and helper(str, i + 1, j) then return true end\n\
    \        if str[i] == b and helper(str, i, j - 1) then return true end\n     \
    \   return false\n    end\n    return helper(a, b, #a)\nend", "  local function\
    \ is_substr_or_rotation(s, t)\n    return s:sub(1, #t) == t or s:sub(1, #t) ==\
    \ t:sub(1, #s)\n  end\n  local function is_substr_or_rotations(s, t)\n    return\
    \ s:sub(1, #t) == t or s:sub(1, #t) == t:sub(1, #s) or s:sub(1, #t) == t:sub(1,\
    \ #t) \n  end\n  local function is_substr_or_rotations_or_both(s, t)\n    return\
    \ s:sub(1, #t) == t or s:sub(1, #t) == t:sub(1, #s) or s:sub(1, #t) == t:sub(1,\
    \ #t) or s:sub(1, #t) == t:sub(1, #t) or s:sub(1, #t) == t:sub(1, #s) or s:sub(1,\
    \ #t) == t:sub(1, #t) \n  end\n  local function is_substr_or_rotations_or_both_or_none(s,\
    \ t)\n    return s:sub(1, #t) == t or s:sub(1, #t) == t:sub(1, #s) or s:sub(1,\
    \ #t) == t:sub(1, #t) or s:sub(1, #t) == t:sub(1, #t) or s:sub(1, #t) == t:sub(1,\
    \ #s) or s:sub(1, #t) == t:sub(1, #t) or s:sub(1, #t) == t:sub(1, #t) or s:sub(1,\
    \ #t) == t:sub(1, #s) or s:sub(1, #t) == t:sub(1, #t) \n  end\n  local function\
    \ is_substr_or_rotations_or_both_or_none_or_both(s, t)\n    return s:sub(1, #t)\
    \ == t or s:sub(1, #t) == t:sub(1, #s) or s:sub(1, #t) == t:sub(1, #t) or s:sub(1,\
    \ #t) == t:sub(1, #t) or s:sub(1, #t) == t:sub(1, #s) or s:sub(1, #t) == t:sub(1,\
    \ #t) or s:sub(1, #t) == t:sub(1, #t) or s:sub(1, #t) == t:sub(1, #s) or s:sub(1,\
    \ #t) == t:sub(1, #t) \n  end\n  local function is_substr_or_rotations_or_both_or_none_or_both(s,\
    \ t)\n    return s:sub(1, #t) == t or s:sub(1, #t) == t:sub(1, #s) or s:sub(1,\
    \ #t) == t:sub(1, #t) or s:sub(1, #t) == t:sub(1, #t) or s:sub(1, #t) == t:sub(1,\
    \ #s) or s:sub(1, #t) == t:sub(1, #t) or s:sub(1, ", "  local function is_substring_helper(substring,\
    \ word)\n    local function is_substring_helper_recursive(substring, word)\n \
    \     if word == substring then\n        return true\n      elseif word == substring\
    \ .. 'z' then\n        return true\n      elseif word == substring .. 'y' then\n\
    \        return true\n      elseif word == substring .. 'x' then\n        return\
    \ true\n      elseif word == substring .. 'w' then\n        return true\n    \
    \  elseif word == substring .. 'v' then\n        return true\n      elseif word\
    \ == substring .. 'u' then\n        return true\n      elseif word == substring\
    \ .. 't' then\n        return true\n      elseif word == substring .. 's' then\n\
    \        return true\n      elseif word == substring .. 'r' then\n        return\
    \ true\n      elseif word == substring .. 'q' then\n        return true\n    \
    \  elseif word == substring .. 'p' then\n        return true\n      elseif word\
    \ == substring .. 'o' then\n        return true\n      elseif word == substring\
    \ .. 'n' then\n        return true\n      elseif word == substring .. 'm' then\n\
    \        return true\n      elseif word == substring .. 'l' then\n        return\
    \ true\n      elseif word == substring .. 'k' then\n        return true\n    \
    \  elseif word == substring .. 'j' then\n        return true\n      elseif word\
    \ == substring .. 'i' then\n        return true\n      elseif word == substring\
    \ .. 'h' then\n        return true\n      elseif word == substring .. 'g' then\n\
    \        return true\n      elseif word == substring .. 'f' then\n        return\
    \ true\n      elseif word == substring .. 'e' then\n        return true\n    \
    \  elseif word == substring .. 'd' then\n        return true\n      elseif word\
    \ == substring .. 'c' then\n        return true\n      elseif word == substring\
    \ .. 'b' then\n        return true\n      elseif word == substring .. 'a' then\n\
    \        return true\n      else\n        return false\n      end\n    end\n \
    \   return is_substring_helper_recursive(substring, word)\n  end\n  return is_substring_helper(a,\
    \ b)\nend", "  local function is_substring(a, b)\n    return a:sub(1, #b) == b\n\
    \  end\n  return a:sub(1, #a) == b or is_substring(a, a:sub(1, #a)) or is_substring(a,\
    \ a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a))\
    \ or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a,\
    \ a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a))\
    \ or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a,\
    \ a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a))\
    \ or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a,\
    \ a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a))\
    \ or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a,\
    \ a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a))\
    \ or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a,\
    \ a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a))\
    \ or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a,\
    \ a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a))\
    \ or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a,\
    \ a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a))\
    \ or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a,\
    \ a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a))\
    \ or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a,\
    \ a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub", " \
    \ local function substr_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n\
    \  local function rotated_check(s, t)\n    local function rotated_find(s, t)\n\
    \      local function rotated_find(s, t)\n        local function rotated_find(s,\
    \ t)\n          local function rotated_find(s, t)\n            local function\
    \ rotated_find(s, t)\n              return string.find(s, t)\n            end\n\
    \          end\n        end\n      end\n    end\n  end\n  local function rotated_find(s,\
    \ t)\n    local function rotated_find(s, t)\n      local function rotated_find(s,\
    \ t)\n        local function rotated_find(s, t)\n          local function rotated_find(s,\
    \ t)\n            local function rotated_find(s, t)\n              return string.find(s,\
    \ t)\n            end\n          end\n        end\n      end\n    end\n  end\n\
    \  local function rotated_find(s, t)\n    local function rotated_find(s, t)\n\
    \      local function rotated_find(s, t)\n        local function rotated_find(s,\
    \ t)\n          local function rotated_find(s, t)\n            local function\
    \ rotated_find(s, t)\n              return string.find(s, t)\n            end\n\
    \          end\n        end\n      end\n    end\n  end\n  local function rotated_find(s,\
    \ t)\n    local function rotated_find(s, t)\n      local function rotated_find(s,\
    \ t)\n        local function rotated_find(s, t)\n          local function rotated_find(s,\
    \ t)\n            local function rotated_find(s, t)\n              return string.find(s,\
    \ t)\n            end\n          end\n        end\n      end\n    end\n  end\n\
    \  local function rotated_find(s, t)\n    local function rotated_find(s, t)\n\
    \      local function rotated_find(s, t)\n        local function rotated_find(s,\
    \ t)\n          local function rotated_find(s, t)\n            local function\
    \ rotated_find(s, t)\n              return string.find(s, t)\n            end\n\
    \          end\n        end\n      end\n    end\n  end\n  local function rotated_find(s,\
    \ t)\n    local function rotated_find(s, t)\n      local function rotated_find(s,\
    \ t)\n        local function rotated_find(s, t)\n          local function rotated_find(s,\
    \ t)\n            local function rotated_find(s, t)\n              return string.find(s,\
    \ t)\n            end\n          end\n        end\n      end\n    end\n  end\n\
    \  local function rotated_find(s, t)\n    local function rotated_find(s, t)\n\
    \      local function rotated_find(s, t)\n        local function rotated_find(s,\
    \ t)", "  local function is_substring_helper(str, substr)\n    local function\
    \ helper(str, substr)\n      if str == nil then return false end\n      if substr\
    \ == nil then return true end\n      if str:len() < substr:len() then return false\
    \ end\n      for i = 1, str:len() do\n        if str:sub(i, i) ~= substr:sub(i\
    \ - 1, i) then\n          return false\n        end\n      end\n      return true\n\
    \    end\n    return helper(str, substr) or helper(str:sub(#str, #str + 1), substr)\n\
    \  end\n  return is_substring_helper(a, b) or is_substring_helper(b, a)\nend",
  "  local function helper(w, i)\n    if i == #w then\n      return true\n    end\n\
    \    if w[i] == 'a' then\n      if helper(w, i + 1) then\n        return true\n\
    \      end\n    end\n    if w[i] == 'b' then\n      if helper(w, i - 1) then\n\
    \        return true\n      end\n    end\n    if w[i] == 'c' then\n      if helper(w,\
    \ i + 2) then\n        return true\n      end\n    end\n    if w[i] == 'd' then\n\
    \      if helper(w, i - 2) then\n        return true\n      end\n    end\n   \
    \ return false\n  end\n  return helper(a, b)\nend", "  local function is_substring_of_rotation(word,\
    \ rot)\n    local rots = rot..rot:reverse()\n    for _, c in ipairs(word) do\n\
    \      if rots:find(c) then\n        return true\n      end\n    end\n    return\
    \ false\n  end\n  local function is_substring_of_rotations(word, rots)\n    for\
    \ _, rot in ipairs(rots) do\n      if is_substring_of_rotation(word, rot) then\n\
    \        return true\n      end\n    end\n    return false\n  end\n  return is_substring_of_rotations(a,\
    \ b) or is_substring_of_rotations(b, a)\nend", "  local function check(cycle)\n\
    \    if cycle == 1 then\n      return false\n    end\n    if a:sub(1, cycle) ==\
    \ b:sub(1, cycle) then\n      return check(cycle + 1)\n    end\n    return true\n\
    \  end\n  return check(1)\nend", "  local function is_substr_or_rotation(s, t)\n\
    \    return #s >= #t or #t >= #s or #t > 0 and #s == #t or #t > 0 and #s == #t\
    \ and #s[#t - 1] == #t[#t - 1]\n  end\n  local function is_substr_or_rotations(s,\
    \ t)\n    return #s >= #t or #t >= #s or #t > 0 and #s == #t or #t > 0 and #s\
    \ == #t and #s[#t - 1] == #t[#t - 1] and #s[#t - 1] == #t[#t - 1]\n  end\n  local\
    \ function is_substr_or_rotations_or_empty(s, t)\n    return #s >= #t or #t >=\
    \ #s or #t > 0 and #s == #t or #t > 0 and #s == #t and #s[#t - 1] == #t[#t - 1]\
    \ and #s[#t - 1] == #t[#t - 1] and #s[#t - 1] == #t[#t - 1]\n  end\n  local function\
    \ is_substr_or_rotations_or_empty_or_empty(s, t)\n    return #s >= #t or #t >=\
    \ #s or #t > 0 and #s == #t or #t > 0 and #s == #t and #s[#t - 1] == #t[#t - 1]\
    \ and #s[#t - 1] == #t[#t - 1] and #s[#t - 1] == #t[#t - 1] and #s[#t - 1] ==\
    \ #t[#t - 1]\n  end\n  local function is_substr_or_rotations_or_empty_or_empty(s,\
    \ t)\n    return #s >= #t or #t >= #s or #t > 0 and #s == #t or #t > 0 and #s\
    \ == #t and #s[#t - 1] == #t[#t - 1] and #s[#t - 1] == #t[#t - 1] and #s[#t -\
    \ 1] == #t[#t - 1] and #s[#t - 1] == #t[#t - 1] and #s[#t - 1] == #t[#t - 1]\n\
    \  end\n  local function is_substr_or_rotations_or_empty_or_empty(s, t)\n    return\
    \ #s >= #t or #t >= #s or #t > 0 and #s == #t or #t > 0 and #s == #t and #s[#t\
    \ - 1] == #t[#t - 1] and #s[#t - 1] == #t[#t - 1] and #s[#t - 1] == #t[#t - 1]\
    \ and #s[#t - 1] == #t[#t - 1] and #", "  local function substr_check(s, t)\n\
    \    return string.find(s, t) ~= nil\n  end\n  local function rotated_check(s,\
    \ t)\n    local function rotated_find(s, t)\n      local function rotated_find(s,\
    \ t)\n        local function rotated_find(s, t)\n          local function rotated_find(s,\
    \ t)\n            local function rotated_find(s, t)\n              return string.find(s,\
    \ t) ~= nil\n            end\n            return rotated_find(s, t)\n        \
    \  end\n          return rotated_find(s, t)\n        end\n        return rotated_find(s,\
    \ t)\n      end\n      return rotated_find(s, t)\n    end\n    return rotated_find(s,\
    \ t)\n  end\n  return rotated_check(s, t) or substr_check(s, t)\nend", "  local\
    \ function is_substring(c)\n    return string.find(a, c) > -1 or string.find(b,\
    \ c) > -1\n  end\n  local function is_rotated_substring(c)\n    return string.find(string.gsub(a,\
    \ c, ''), c) > -1\n  end\n  local function is_rotated_substrings(c)\n    local\
    \ substrings = {}\n    for i = 1, #c do\n      local sub = string.gsub(a, c, '')\
    \ .. string.gsub(b, c, '')\n      if string.find(sub, c) > -1 then\n        table.insert(substrings,\
    \ sub)\n      end\n    end\n    return #substrings > 0\n  end\n  local function\
    \ is_rotated_substrings_count(c)\n    local substrings = {}\n    for i = 1, #c\
    \ do\n      local sub = string.gsub(a, c, '') .. string.gsub(b, c, '')\n     \
    \ if string.find(sub, c) > -1 then\n        table.insert(substrings, sub)\n  \
    \    end\n    end\n    return #substrings > 0\n  end\n  local function is_rotated_substrings_count_2(c)\n\
    \    local substrings = {}\n    for i = 1, #c do\n      local sub = string.gsub(a,\
    \ c, '') .. string.gsub(b, c, '')\n      if string.find(sub, c) > -1 then\n  \
    \      table.insert(substrings, sub)\n      end\n    end\n    return #substrings\
    \ > 0\n  end\n  local function is_rotated_substrings_count_3(c)\n    local substrings\
    \ = {}\n    for i = 1, #c do\n      local sub = string.gsub(a, c, '') .. string.gsub(b,\
    \ c, '')\n      if string.find(sub, c) > -1 then\n        table.insert(substrings,\
    \ sub)\n      end\n    end\n    return #substrings > 0\n  end\n  local function\
    \ is_rotated_substrings_count_4(c)\n    local substrings = {}\n    for i = 1,\
    \ #c do\n      local sub = string.gsub(a, c, '') .. string.gsub(b, c, '')\n  \
    \    if string.find(sub, c) > -1 then\n        table.insert(substrings, sub)\n\
    \      end\n    end\n    return #substrings > 0\n  end\n  local function is_rotated_substrings_count_5(c)\n\
    \    local substrings = {}\n    for i = 1, #c do\n      local sub = string.gsub(a,\
    \ c, '') .. string.gsub(b, c, '')\n      if string.find(sub, c) > -1 then\n  \
    \      table.insert(substrings, sub)\n      end\n    end\n    return #substrings\
    \ > 0\n  end\n  local function is_rotated_substrings_count_6(c)\n    local substrings\
    \ = {}\n    for i = 1, #c do\n      local sub = ", "  local function find(a, b)\n\
    \    if #a == 0 then\n      return false\n    end\n    if #b == 0 then\n     \
    \ return true\n    end\n    if a[1] == b[1] then\n      return find(a[2], b[2])\n\
    \    else\n      return false\n    end\n  end\n  return find(a, b)\nend", "  local\
    \ function is_substring(cycle, word)\n    if cycle == 0 then\n      return true\n\
    \    end\n    if cycle == 1 then\n      return word == b\n    end\n    return\
    \ is_substring(cycle - 1, word) or word == b:sub(1, cycle - 1) or is_substring(cycle\
    \ - 1, b:sub(1, cycle - 1))\n  end\n  return is_substring(2, a)\nend", "  local\
    \ function substr_check(s, t)\n    local function is_substr_check(s, t)\n    \
    \  if s == t then\n        return true\n      else\n        return false\n   \
    \   end\n    end\n    local function rotated_check(s, t)\n      local function\
    \ is_rotated_check(s, t)\n        if s == t then\n          return true\n    \
    \    else\n          return false\n        end\n      end\n      local function\
    \ rotated_check(s, t)\n        local function is_rotated_check(s, t)\n       \
    \   if s == t then\n            return true\n          else\n            return\
    \ false\n          end\n        end\n        local function rotated_check(s, t)\n\
    \          local function is_rotated_check(s, t)\n            if s == t then\n\
    \              return true\n            else\n              return false\n   \
    \         end\n          end\n          local function rotated_check(s, t)\n \
    \           local function is_rotated_check(s, t)\n              if s == t then\n\
    \                return true\n              else\n                return false\n\
    \              end\n            end\n            local function rotated_check(s,\
    \ t)\n              local function is_rotated_check(s, t)\n                if\
    \ s == t then\n                  return true\n                else\n         \
    \         return false\n                end\n              end\n             \
    \ local function rotated_check(s, t)\n                local function is_rotated_check(s,\
    \ t)\n                  if s == t then\n                    return true\n    \
    \              else\n                    return false\n                  end\n\
    \                end\n                local function rotated_check(s, t)\n   \
    \               local function is_rotated_check(s, t)\n                    if\
    \ s == t then\n                      return true\n                    else\n \
    \                     return false\n                    end\n                \
    \  end\n                  local function rotated_check(s, t)\n               \
    \     local function is_rotated_check(s, t)\n                      if s == t then\n\
    \                        return true\n                      else\n           \
    \             return false\n                      end\n                    end\n\
    \                    local function rotated_check(s, t)\n                    \
    \  local function is_rotated_check(s, t)\n                        if s == t then\n\
    \                          return true\n                        else\n       \
    \                   return false\n                        end\n              \
    \        end\n                      local function rotated_check(s, t)\n     \
    \                   local function is_rotated_check(s, t)\n                  \
    \        if s == t then\n                            return true\n           \
    \               else\n                            return false\n             \
    \             end\n                        end\n                        local\
    \ function rotated_check(s, t)\n                          local function is_rotated_check(s,\
    \ t)\n                            if s == t then\n                           \
    \   return true\n                            else\n                          \
    \    return false\n                            end\n                         \
    \ end\n                          local function rotated_check(s, t)\n        \
    \                    local function is_rotated_check(s, t)\n                 \
    \             if s == t then\n                                return true\n  \
    \                            else\n                                return ", " \
    \ local function is_substring_of_word(word, pattern)\n    local pattern = string.lower(pattern)\n\
    \    local word = string.lower(word)\n    local patterns = string.gmatch(pattern,\
    \ \"%S+\") -- Split pattern into words\n    local words = string.gmatch(word,\
    \ \"%S+\") -- Split word into words\n    local i = 0\n    for pattern in patterns\
    \ do\n      i = i + 1\n      if pattern:sub(1, 1) == 'a' and pattern:sub(2, 1)\
    \ == 'b' then\n        pattern = pattern:sub(3)\n      elseif pattern:sub(1, 1)\
    \ == 'b' and pattern:sub(2, 1) == 'a' then\n        pattern = pattern:sub(3)\n\
    \      elseif pattern:sub(1, 1) == 'a' and pattern:sub(2, 1) == 'a' then\n   \
    \     pattern = pattern:sub(3)\n      elseif pattern:sub(1, 1) == 'b' and pattern:sub(2,\
    \ 1) == 'b' then\n        pattern = pattern:sub(3)\n      elseif pattern:sub(1,\
    \ 1) == 'a' and pattern:sub(2, 1) == 'b' then\n        pattern = pattern:sub(3)\n\
    \      elseif pattern:sub(1, 1) == 'b' and pattern:sub(2, 1) == 'a' then\n   \
    \     pattern = pattern:sub(3)\n      elseif pattern:sub(1, 1) == 'a' and pattern:sub(2,\
    \ 1) == 'a' then\n        pattern = pattern:sub(3)\n      elseif pattern:sub(1,\
    \ 1) == 'b' and pattern:sub(2, 1) == 'b' then\n        pattern = pattern:sub(3)\n\
    \      elseif pattern:sub(1, 1) == 'a' and pattern:sub(2, 1) == 'a' then\n   \
    \     pattern = pattern:sub(3)\n      elseif pattern:sub(1, 1) == 'b' and pattern:sub(2,\
    \ 1) == 'a' then\n        pattern = pattern:sub(3)\n      elseif pattern:sub(1,\
    \ 1) == 'a' and pattern:sub(2, 1) == 'b' then\n        pattern = pattern:sub(3)\n\
    \      elseif pattern:sub(1, 1) == 'b' and pattern:sub(2, 1) == 'b' then\n   \
    \     pattern = pattern:sub(3)\n      elseif pattern:sub(1, 1) == 'a' and pattern:sub(2,\
    \ 1) == 'a' then\n        pattern = pattern:sub(3)\n      elseif pattern:sub(1,\
    \ 1) == 'b' and pattern:sub(2, 1) == 'a' then\n        pattern = pattern:sub(3)\n\
    \      elseif pattern:sub(1, 1) == 'a' and pattern:sub(2, 1) == 'b' then\n   \
    \     pattern = pattern:sub", "  local function is_substring(cycle, word)\n  \
    \  local s = string.sub(cycle, 1, #word)\n    return s == word or is_substring(string.sub(cycle,\
    \ 1, #cycle - 1), word)\n  end\n  return is_substring(a, b) or is_substring(b,\
    \ a)\nend", "  local function match(s, t)\n    local m = {}\n    for i = 1, #s\
    \ do\n      m[#m + 1] = string.sub(s, i, i)\n    end\n    for i = 1, #t do\n \
    \     m[#m + 1] = string.sub(t, i, i)\n    end\n    return #m == #t\n  end\n \
    \ local function rotation(s, t)\n    local m = {}\n    for i = 1, #s do\n    \
    \  m[#m + 1] = string.sub(s, i, i)\n    end\n    for i = 1, #t do\n      m[#m\
    \ + 1] = string.sub(t, i, i)\n    end\n    return m\n  end\n  local function sub(s,\
    \ t, m)\n    local r = {}\n    for i = 1, #s do\n      r[#r + 1] = string.sub(m,\
    \ i, i)\n    end\n    return r\n  end\n  local function sub2(s, t, m)\n    local\
    \ r = {}\n    for i = 1, #s do\n      r[#r + 1] = string.sub(m, i, i)\n    end\n\
    \    return r\n  end\n  local function sub3(s, t, m)\n    local r = {}\n    for\
    \ i = 1, #s do\n      r[#r + 1] = string.sub(m, i, i)\n    end\n    return r\n\
    \  end\n  local function sub4(s, t, m)\n    local r = {}\n    for i = 1, #s do\n\
    \      r[#r + 1] = string.sub(m, i, i)\n    end\n    return r\n  end\n  local\
    \ function sub5(s, t, m)\n    local r = {}\n    for i = 1, #s do\n      r[#r +\
    \ 1] = string.sub(m, i, i)\n    end\n    return r\n  end\n  local function sub6(s,\
    \ t, m)\n    local r = {}\n    for i = 1, #s do\n      r[#r + 1] = string.sub(m,\
    \ i, i)\n    end\n    return r\n  end\n  local function sub7(s, t, m)\n    local\
    \ r = {}\n    for i = 1, #s do\n      r[#r + 1] = string.sub(m, i, i)\n    end\n\
    \    return r\n  end\n  local function sub8(s, t, m)\n    local r = {}\n    for\
    \ i = 1, #s do\n      r[#r + 1] = string.sub(m, i, i)\n    end\n    return r\n\
    \  end\n  local function sub9(s, t, m)\n    local r = {}\n    for i = 1, #s do\n\
    \      r[#r + 1] = string.sub(m, i, i)\n    end\n    return r\n  end\n  local\
    \ function sub10(s, t, m)\n    local r = {}\n    for i = 1, #s do\n      r[#"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
