name: HumanEval_154_cycpattern_check
language: lua
prompt: "-- You are given 2 words. You need to return true if the second word or any\
  \ of its rotations is a substring in the first word\n-- >>> cycpattern_check('abcd',\
  \ 'abd')\n-- false\n-- >>> cycpattern_check('hello', 'ell')\n-- true\n-- >>> cycpattern_check('whassup',\
  \ 'psus')\n-- false\n-- >>> cycpattern_check('abab', 'baa')\n-- true\n-- >>> cycpattern_check('efef',\
  \ 'eeff')\n-- false\n-- >>> cycpattern_check('himenss', 'simen')\n-- true\nlocal\
  \ function cycpattern_check(a, b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = cycpattern_check\n\
  \    lu.assertEquals(candidate('xyzw', 'xyw'), false)\n    lu.assertEquals(candidate('yello',\
  \ 'ell'), true)\n    lu.assertEquals(candidate('whattup', 'ptut'), false)\n    lu.assertEquals(candidate('efef',\
  \ 'fee'), true)\n    lu.assertEquals(candidate('abab', 'aabb'), false)\n    lu.assertEquals(candidate('winemtt',\
  \ 'tinem'), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local function is_substring_of(a, b)\n    local function is_substring_of_helper(str,\
    \ substr, i, j)\n      if i >= j or str[i] ~= substr[j] then\n        return false\n\
    \      end\n      return is_substring_of_helper(str, substr, i + 1, j) or is_substring_of_helper(str,\
    \ substr, i + 1, j - 1)\n    end\n    return is_substring_of_helper(a, b, #a,\
    \ #b)\n  end\n  return is_substring_of(a, b)\nend", "  local function helper(w,\
    \ i)\n    if i == #w then\n      return true\n    end\n    if w[i] == a then\n\
    \      return helper(w, i + 1)\n    end\n    if w[i] == b then\n      return helper(w,\
    \ i - 1)\n    end\n    return false\n  end\n  return helper(a, b)\nend", "   \
    \ local function helper(str, i, j)\n        if i == j or str[i] == \"\" then return\
    \ true end\n        if str[i] == b and helper(str, i + 1, j - 1) then return true\
    \ end\n        if str[i] == b and helper(str, i + 1, j) then return true end\n\
    \        if str[i] == b and helper(str, i, j - 1) then return true end\n     \
    \   return false\n    end\n    return helper(a, b, #a)\nend", "  local function\
    \ is_substr_or_rotation(s, t)\n    return s:sub(1, #t) == t or s:sub(1, #t) ==\
    \ t:sub(1, #s)\n  end\n  local function is_substr_or_rotations(s, t)\n    return\
    \ s:sub(1, #t) == t or s:sub(1, #t) == t:sub(1, #s) or s:sub(1, #t) == t:sub(1,\
    \ #t) \n  end\n  local function is_substr_or_rotations_or_both(s, t)\n    return\
    \ s:sub(1, #t) == t or s:sub(1, #t) == t:sub(1, #s) or s:sub(1, #t) == t:sub(1,\
    \ #t) or s:sub(1, #t) == t:sub(1, #t) or s:sub(1, #t) == t:sub(1, #s) or s:sub(1,\
    \ #t) == t:sub(1, #t) \n  end\n  local function is_substr_or_rotations_or_both_or_none(s,\
    \ t)\n    return s:sub(1, #t) == t or s:sub(1, #t) == t:sub(1, #s) or s:sub(1,\
    \ #t) == t:sub(1, #t) or s:sub(1, #t) == t:sub(1, #t) or s:sub(1, #t) == t:sub(1,\
    \ #s) or s:sub(1, #t) == t:sub(1, #t) or s:sub(1, #t) == t:sub(1, #t) or s:sub(1,\
    \ #t) == t:sub(1, #s) or s:sub(1, #t) == t:sub(1, #t) \n  end\n  local function\
    \ is_substr_or_rotations_or_both_or_none_or_both(s, t)\n    return s:sub(1, #t)\
    \ == t or s:sub(1, #t) == t:sub(1, #s) or s:sub(1, #t) == t:sub(1, #t) or s:sub(1,\
    \ #t) == t:sub(1, #t) or s:sub(1, #t) == t:sub(1, #s) or s:sub(1, #t) == t:sub(1,\
    \ #t) or s:sub(1, #t) == t:sub(1, #t) or s:sub(1, #t) == t:sub(1, #s) or s:sub(1,\
    \ #t) == t:sub(1, #t) \n  end\n  local function is_substr_or_rotations_or_both_or_none_or_both(s,\
    \ t)\n    return s:sub(1, #t) == t or s:sub(1, #t) == t:sub(1, #s) or s:sub(1,\
    \ #t) == t:sub(1, #t) or s:sub(1, #t) == t:sub(1, #t) or s:sub(1, #t) == t:sub(1,\
    \ #s) or s:sub(1, #t) == t:sub(1, #t) or s:sub(1, ", "  local function is_substring_helper(substring,\
    \ word)\n    local function is_substring_helper_recursive(substring, word)\n \
    \     if word == substring then\n        return true\n      elseif word == substring\
    \ .. 'z' then\n        return true\n      elseif word == substring .. 'y' then\n\
    \        return true\n      elseif word == substring .. 'x' then\n        return\
    \ true\n      elseif word == substring .. 'w' then\n        return true\n    \
    \  elseif word == substring .. 'v' then\n        return true\n      elseif word\
    \ == substring .. 'u' then\n        return true\n      elseif word == substring\
    \ .. 't' then\n        return true\n      elseif word == substring .. 's' then\n\
    \        return true\n      elseif word == substring .. 'r' then\n        return\
    \ true\n      elseif word == substring .. 'q' then\n        return true\n    \
    \  elseif word == substring .. 'p' then\n        return true\n      elseif word\
    \ == substring .. 'o' then\n        return true\n      elseif word == substring\
    \ .. 'n' then\n        return true\n      elseif word == substring .. 'm' then\n\
    \        return true\n      elseif word == substring .. 'l' then\n        return\
    \ true\n      elseif word == substring .. 'k' then\n        return true\n    \
    \  elseif word == substring .. 'j' then\n        return true\n      elseif word\
    \ == substring .. 'i' then\n        return true\n      elseif word == substring\
    \ .. 'h' then\n        return true\n      elseif word == substring .. 'g' then\n\
    \        return true\n      elseif word == substring .. 'f' then\n        return\
    \ true\n      elseif word == substring .. 'e' then\n        return true\n    \
    \  elseif word == substring .. 'd' then\n        return true\n      elseif word\
    \ == substring .. 'c' then\n        return true\n      elseif word == substring\
    \ .. 'b' then\n        return true\n      elseif word == substring .. 'a' then\n\
    \        return true\n      else\n        return false\n      end\n    end\n \
    \   return is_substring_helper_recursive(substring, word)\n  end\n  return is_substring_helper(a,\
    \ b)\nend", "  local function is_substring(a, b)\n    return a:sub(1, #b) == b\n\
    \  end\n  return a:sub(1, #a) == b or is_substring(a, a:sub(1, #a)) or is_substring(a,\
    \ a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a))\
    \ or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a,\
    \ a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a))\
    \ or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a,\
    \ a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a))\
    \ or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a,\
    \ a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a))\
    \ or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a,\
    \ a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a))\
    \ or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a,\
    \ a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a))\
    \ or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a,\
    \ a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a))\
    \ or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a,\
    \ a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a))\
    \ or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a,\
    \ a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a))\
    \ or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a,\
    \ a:sub(1, #a)) or is_substring(a, a:sub(1, #a)) or is_substring(a, a:sub", " \
    \ local function substr_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n\
    \  local function rotated_check(s, t)\n    local function rotated_find(s, t)\n\
    \      local function rotated_find(s, t)\n        local function rotated_find(s,\
    \ t)\n          local function rotated_find(s, t)\n            local function\
    \ rotated_find(s, t)\n              return string.find(s, t)\n            end\n\
    \          end\n        end\n      end\n    end\n  end\n  local function rotated_find(s,\
    \ t)\n    local function rotated_find(s, t)\n      local function rotated_find(s,\
    \ t)\n        local function rotated_find(s, t)\n          local function rotated_find(s,\
    \ t)\n            local function rotated_find(s, t)\n              return string.find(s,\
    \ t)\n            end\n          end\n        end\n      end\n    end\n  end\n\
    \  local function rotated_find(s, t)\n    local function rotated_find(s, t)\n\
    \      local function rotated_find(s, t)\n        local function rotated_find(s,\
    \ t)\n          local function rotated_find(s, t)\n            local function\
    \ rotated_find(s, t)\n              return string.find(s, t)\n            end\n\
    \          end\n        end\n      end\n    end\n  end\n  local function rotated_find(s,\
    \ t)\n    local function rotated_find(s, t)\n      local function rotated_find(s,\
    \ t)\n        local function rotated_find(s, t)\n          local function rotated_find(s,\
    \ t)\n            local function rotated_find(s, t)\n              return string.find(s,\
    \ t)\n            end\n          end\n        end\n      end\n    end\n  end\n\
    \  local function rotated_find(s, t)\n    local function rotated_find(s, t)\n\
    \      local function rotated_find(s, t)\n        local function rotated_find(s,\
    \ t)\n          local function rotated_find(s, t)\n            local function\
    \ rotated_find(s, t)\n              return string.find(s, t)\n            end\n\
    \          end\n        end\n      end\n    end\n  end\n  local function rotated_find(s,\
    \ t)\n    local function rotated_find(s, t)\n      local function rotated_find(s,\
    \ t)\n        local function rotated_find(s, t)\n          local function rotated_find(s,\
    \ t)\n            local function rotated_find(s, t)\n              return string.find(s,\
    \ t)\n            end\n          end\n        end\n      end\n    end\n  end\n\
    \  local function rotated_find(s, t)\n    local function rotated_find(s, t)\n\
    \      local function rotated_find(s, t)\n        local function rotated_find(s,\
    \ t)", "  local function is_substring_helper(str, substr)\n    local function\
    \ helper(str, substr)\n      if str == nil then return false end\n      if substr\
    \ == nil then return true end\n      if str:len() < substr:len() then return false\
    \ end\n      for i = 1, str:len() do\n        if str:sub(i, i) ~= substr:sub(i\
    \ - 1, i) then\n          return false\n        end\n      end\n      return true\n\
    \    end\n    return helper(str, substr) or helper(str:sub(#str, #str + 1), substr)\n\
    \  end\n  return is_substring_helper(a, b) or is_substring_helper(b, a)\nend",
  "  local function helper(w, i)\n    if i == #w then\n      return true\n    end\n\
    \    if w[i] == 'a' then\n      if helper(w, i + 1) then\n        return true\n\
    \      end\n    end\n    if w[i] == 'b' then\n      if helper(w, i - 1) then\n\
    \        return true\n      end\n    end\n    if w[i] == 'c' then\n      if helper(w,\
    \ i + 2) then\n        return true\n      end\n    end\n    if w[i] == 'd' then\n\
    \      if helper(w, i - 2) then\n        return true\n      end\n    end\n   \
    \ return false\n  end\n  return helper(a, b)\nend", "  local function is_substring_of_rotation(word,\
    \ rot)\n    local rots = rot..rot:reverse()\n    for _, c in ipairs(word) do\n\
    \      if rots:find(c) then\n        return true\n      end\n    end\n    return\
    \ false\n  end\n  local function is_substring_of_rotations(word, rots)\n    for\
    \ _, rot in ipairs(rots) do\n      if is_substring_of_rotation(word, rot) then\n\
    \        return true\n      end\n    end\n    return false\n  end\n  return is_substring_of_rotations(a,\
    \ b) or is_substring_of_rotations(b, a)\nend", "  local function check(cycle)\n\
    \    if cycle == 1 then\n      return false\n    end\n    if a:sub(1, cycle) ==\
    \ b:sub(1, cycle) then\n      return check(cycle + 1)\n    end\n    return true\n\
    \  end\n  return check(1)\nend", "  local function is_substr_or_rotation(s, t)\n\
    \    return #s >= #t or #t >= #s or #t > 0 and #s == #t or #t > 0 and #s == #t\
    \ and #s[#t - 1] == #t[#t - 1]\n  end\n  local function is_substr_or_rotations(s,\
    \ t)\n    return #s >= #t or #t >= #s or #t > 0 and #s == #t or #t > 0 and #s\
    \ == #t and #s[#t - 1] == #t[#t - 1] and #s[#t - 1] == #t[#t - 1]\n  end\n  local\
    \ function is_substr_or_rotations_or_empty(s, t)\n    return #s >= #t or #t >=\
    \ #s or #t > 0 and #s == #t or #t > 0 and #s == #t and #s[#t - 1] == #t[#t - 1]\
    \ and #s[#t - 1] == #t[#t - 1] and #s[#t - 1] == #t[#t - 1]\n  end\n  local function\
    \ is_substr_or_rotations_or_empty_or_empty(s, t)\n    return #s >= #t or #t >=\
    \ #s or #t > 0 and #s == #t or #t > 0 and #s == #t and #s[#t - 1] == #t[#t - 1]\
    \ and #s[#t - 1] == #t[#t - 1] and #s[#t - 1] == #t[#t - 1] and #s[#t - 1] ==\
    \ #t[#t - 1]\n  end\n  local function is_substr_or_rotations_or_empty_or_empty(s,\
    \ t)\n    return #s >= #t or #t >= #s or #t > 0 and #s == #t or #t > 0 and #s\
    \ == #t and #s[#t - 1] == #t[#t - 1] and #s[#t - 1] == #t[#t - 1] and #s[#t -\
    \ 1] == #t[#t - 1] and #s[#t - 1] == #t[#t - 1] and #s[#t - 1] == #t[#t - 1]\n\
    \  end\n  local function is_substr_or_rotations_or_empty_or_empty(s, t)\n    return\
    \ #s >= #t or #t >= #s or #t > 0 and #s == #t or #t > 0 and #s == #t and #s[#t\
    \ - 1] == #t[#t - 1] and #s[#t - 1] == #t[#t - 1] and #s[#t - 1] == #t[#t - 1]\
    \ and #s[#t - 1] == #t[#t - 1] and #", "  local function substr_check(s, t)\n\
    \    return string.find(s, t) ~= nil\n  end\n  local function rotated_check(s,\
    \ t)\n    local function rotated_find(s, t)\n      local function rotated_find(s,\
    \ t)\n        local function rotated_find(s, t)\n          local function rotated_find(s,\
    \ t)\n            local function rotated_find(s, t)\n              return string.find(s,\
    \ t) ~= nil\n            end\n            return rotated_find(s, t)\n        \
    \  end\n          return rotated_find(s, t)\n        end\n        return rotated_find(s,\
    \ t)\n      end\n      return rotated_find(s, t)\n    end\n    return rotated_find(s,\
    \ t)\n  end\n  return rotated_check(s, t) or substr_check(s, t)\nend", "  local\
    \ function is_substring(c)\n    return string.find(a, c) > -1 or string.find(b,\
    \ c) > -1\n  end\n  local function is_rotated_substring(c)\n    return string.find(string.gsub(a,\
    \ c, ''), c) > -1\n  end\n  local function is_rotated_substrings(c)\n    local\
    \ substrings = {}\n    for i = 1, #c do\n      local sub = string.gsub(a, c, '')\
    \ .. string.gsub(b, c, '')\n      if string.find(sub, c) > -1 then\n        table.insert(substrings,\
    \ sub)\n      end\n    end\n    return #substrings > 0\n  end\n  local function\
    \ is_rotated_substrings_count(c)\n    local substrings = {}\n    for i = 1, #c\
    \ do\n      local sub = string.gsub(a, c, '') .. string.gsub(b, c, '')\n     \
    \ if string.find(sub, c) > -1 then\n        table.insert(substrings, sub)\n  \
    \    end\n    end\n    return #substrings > 0\n  end\n  local function is_rotated_substrings_count_2(c)\n\
    \    local substrings = {}\n    for i = 1, #c do\n      local sub = string.gsub(a,\
    \ c, '') .. string.gsub(b, c, '')\n      if string.find(sub, c) > -1 then\n  \
    \      table.insert(substrings, sub)\n      end\n    end\n    return #substrings\
    \ > 0\n  end\n  local function is_rotated_substrings_count_3(c)\n    local substrings\
    \ = {}\n    for i = 1, #c do\n      local sub = string.gsub(a, c, '') .. string.gsub(b,\
    \ c, '')\n      if string.find(sub, c) > -1 then\n        table.insert(substrings,\
    \ sub)\n      end\n    end\n    return #substrings > 0\n  end\n  local function\
    \ is_rotated_substrings_count_4(c)\n    local substrings = {}\n    for i = 1,\
    \ #c do\n      local sub = string.gsub(a, c, '') .. string.gsub(b, c, '')\n  \
    \    if string.find(sub, c) > -1 then\n        table.insert(substrings, sub)\n\
    \      end\n    end\n    return #substrings > 0\n  end\n  local function is_rotated_substrings_count_5(c)\n\
    \    local substrings = {}\n    for i = 1, #c do\n      local sub = string.gsub(a,\
    \ c, '') .. string.gsub(b, c, '')\n      if string.find(sub, c) > -1 then\n  \
    \      table.insert(substrings, sub)\n      end\n    end\n    return #substrings\
    \ > 0\n  end\n  local function is_rotated_substrings_count_6(c)\n    local substrings\
    \ = {}\n    for i = 1, #c do\n      local sub = ", "  local function find(a, b)\n\
    \    if #a == 0 then\n      return false\n    end\n    if #b == 0 then\n     \
    \ return true\n    end\n    if a[1] == b[1] then\n      return find(a[2], b[2])\n\
    \    else\n      return false\n    end\n  end\n  return find(a, b)\nend", "  local\
    \ function is_substring(cycle, word)\n    if cycle == 0 then\n      return true\n\
    \    end\n    if cycle == 1 then\n      return word == b\n    end\n    return\
    \ is_substring(cycle - 1, word) or word == b:sub(1, cycle - 1) or is_substring(cycle\
    \ - 1, b:sub(1, cycle - 1))\n  end\n  return is_substring(2, a)\nend", "  local\
    \ function substr_check(s, t)\n    local function is_substr_check(s, t)\n    \
    \  if s == t then\n        return true\n      else\n        return false\n   \
    \   end\n    end\n    local function rotated_check(s, t)\n      local function\
    \ is_rotated_check(s, t)\n        if s == t then\n          return true\n    \
    \    else\n          return false\n        end\n      end\n      local function\
    \ rotated_check(s, t)\n        local function is_rotated_check(s, t)\n       \
    \   if s == t then\n            return true\n          else\n            return\
    \ false\n          end\n        end\n        local function rotated_check(s, t)\n\
    \          local function is_rotated_check(s, t)\n            if s == t then\n\
    \              return true\n            else\n              return false\n   \
    \         end\n          end\n          local function rotated_check(s, t)\n \
    \           local function is_rotated_check(s, t)\n              if s == t then\n\
    \                return true\n              else\n                return false\n\
    \              end\n            end\n            local function rotated_check(s,\
    \ t)\n              local function is_rotated_check(s, t)\n                if\
    \ s == t then\n                  return true\n                else\n         \
    \         return false\n                end\n              end\n             \
    \ local function rotated_check(s, t)\n                local function is_rotated_check(s,\
    \ t)\n                  if s == t then\n                    return true\n    \
    \              else\n                    return false\n                  end\n\
    \                end\n                local function rotated_check(s, t)\n   \
    \               local function is_rotated_check(s, t)\n                    if\
    \ s == t then\n                      return true\n                    else\n \
    \                     return false\n                    end\n                \
    \  end\n                  local function rotated_check(s, t)\n               \
    \     local function is_rotated_check(s, t)\n                      if s == t then\n\
    \                        return true\n                      else\n           \
    \             return false\n                      end\n                    end\n\
    \                    local function rotated_check(s, t)\n                    \
    \  local function is_rotated_check(s, t)\n                        if s == t then\n\
    \                          return true\n                        else\n       \
    \                   return false\n                        end\n              \
    \        end\n                      local function rotated_check(s, t)\n     \
    \                   local function is_rotated_check(s, t)\n                  \
    \        if s == t then\n                            return true\n           \
    \               else\n                            return false\n             \
    \             end\n                        end\n                        local\
    \ function rotated_check(s, t)\n                          local function is_rotated_check(s,\
    \ t)\n                            if s == t then\n                           \
    \   return true\n                            else\n                          \
    \    return false\n                            end\n                         \
    \ end\n                          local function rotated_check(s, t)\n        \
    \                    local function is_rotated_check(s, t)\n                 \
    \             if s == t then\n                                return true\n  \
    \                            else\n                                return ", " \
    \ local function is_substring_of_word(word, pattern)\n    local pattern = string.lower(pattern)\n\
    \    local word = string.lower(word)\n    local patterns = string.gmatch(pattern,\
    \ \"%S+\") -- Split pattern into words\n    local words = string.gmatch(word,\
    \ \"%S+\") -- Split word into words\n    local i = 0\n    for pattern in patterns\
    \ do\n      i = i + 1\n      if pattern:sub(1, 1) == 'a' and pattern:sub(2, 1)\
    \ == 'b' then\n        pattern = pattern:sub(3)\n      elseif pattern:sub(1, 1)\
    \ == 'b' and pattern:sub(2, 1) == 'a' then\n        pattern = pattern:sub(3)\n\
    \      elseif pattern:sub(1, 1) == 'a' and pattern:sub(2, 1) == 'a' then\n   \
    \     pattern = pattern:sub(3)\n      elseif pattern:sub(1, 1) == 'b' and pattern:sub(2,\
    \ 1) == 'b' then\n        pattern = pattern:sub(3)\n      elseif pattern:sub(1,\
    \ 1) == 'a' and pattern:sub(2, 1) == 'b' then\n        pattern = pattern:sub(3)\n\
    \      elseif pattern:sub(1, 1) == 'b' and pattern:sub(2, 1) == 'a' then\n   \
    \     pattern = pattern:sub(3)\n      elseif pattern:sub(1, 1) == 'a' and pattern:sub(2,\
    \ 1) == 'a' then\n        pattern = pattern:sub(3)\n      elseif pattern:sub(1,\
    \ 1) == 'b' and pattern:sub(2, 1) == 'b' then\n        pattern = pattern:sub(3)\n\
    \      elseif pattern:sub(1, 1) == 'a' and pattern:sub(2, 1) == 'a' then\n   \
    \     pattern = pattern:sub(3)\n      elseif pattern:sub(1, 1) == 'b' and pattern:sub(2,\
    \ 1) == 'a' then\n        pattern = pattern:sub(3)\n      elseif pattern:sub(1,\
    \ 1) == 'a' and pattern:sub(2, 1) == 'b' then\n        pattern = pattern:sub(3)\n\
    \      elseif pattern:sub(1, 1) == 'b' and pattern:sub(2, 1) == 'b' then\n   \
    \     pattern = pattern:sub(3)\n      elseif pattern:sub(1, 1) == 'a' and pattern:sub(2,\
    \ 1) == 'a' then\n        pattern = pattern:sub(3)\n      elseif pattern:sub(1,\
    \ 1) == 'b' and pattern:sub(2, 1) == 'a' then\n        pattern = pattern:sub(3)\n\
    \      elseif pattern:sub(1, 1) == 'a' and pattern:sub(2, 1) == 'b' then\n   \
    \     pattern = pattern:sub", "  local function is_substring(cycle, word)\n  \
    \  local s = string.sub(cycle, 1, #word)\n    return s == word or is_substring(string.sub(cycle,\
    \ 1, #cycle - 1), word)\n  end\n  return is_substring(a, b) or is_substring(b,\
    \ a)\nend", "  local function match(s, t)\n    local m = {}\n    for i = 1, #s\
    \ do\n      m[#m + 1] = string.sub(s, i, i)\n    end\n    for i = 1, #t do\n \
    \     m[#m + 1] = string.sub(t, i, i)\n    end\n    return #m == #t\n  end\n \
    \ local function rotation(s, t)\n    local m = {}\n    for i = 1, #s do\n    \
    \  m[#m + 1] = string.sub(s, i, i)\n    end\n    for i = 1, #t do\n      m[#m\
    \ + 1] = string.sub(t, i, i)\n    end\n    return m\n  end\n  local function sub(s,\
    \ t, m)\n    local r = {}\n    for i = 1, #s do\n      r[#r + 1] = string.sub(m,\
    \ i, i)\n    end\n    return r\n  end\n  local function sub2(s, t, m)\n    local\
    \ r = {}\n    for i = 1, #s do\n      r[#r + 1] = string.sub(m, i, i)\n    end\n\
    \    return r\n  end\n  local function sub3(s, t, m)\n    local r = {}\n    for\
    \ i = 1, #s do\n      r[#r + 1] = string.sub(m, i, i)\n    end\n    return r\n\
    \  end\n  local function sub4(s, t, m)\n    local r = {}\n    for i = 1, #s do\n\
    \      r[#r + 1] = string.sub(m, i, i)\n    end\n    return r\n  end\n  local\
    \ function sub5(s, t, m)\n    local r = {}\n    for i = 1, #s do\n      r[#r +\
    \ 1] = string.sub(m, i, i)\n    end\n    return r\n  end\n  local function sub6(s,\
    \ t, m)\n    local r = {}\n    for i = 1, #s do\n      r[#r + 1] = string.sub(m,\
    \ i, i)\n    end\n    return r\n  end\n  local function sub7(s, t, m)\n    local\
    \ r = {}\n    for i = 1, #s do\n      r[#r + 1] = string.sub(m, i, i)\n    end\n\
    \    return r\n  end\n  local function sub8(s, t, m)\n    local r = {}\n    for\
    \ i = 1, #s do\n      r[#r + 1] = string.sub(m, i, i)\n    end\n    return r\n\
    \  end\n  local function sub9(s, t, m)\n    local r = {}\n    for i = 1, #s do\n\
    \      r[#r + 1] = string.sub(m, i, i)\n    end\n    return r\n  end\n  local\
    \ function sub10(s, t, m)\n    local r = {}\n    for i = 1, #s do\n      r[#",
  "  local function substr_check(s, t)\n    local function rotated_check(s, t)\n \
    \     local function rotated_check(s, t)\n        local function rotated_check(s,\
    \ t)\n          local function rotated_check(s, t)\n            local function\
    \ rotated_check(s, t)\n              local function rotated_check(s, t)\n    \
    \            local function rotated_check(s, t)\n                  return s ==\
    \ t\n                end\n              end\n            end\n          end\n\
    \        end\n      end\n    end\n  end\n  local function rotated_check(s, t)\n\
    \    local function rotated_check(s, t)\n      local function rotated_check(s,\
    \ t)\n        local function rotated_check(s, t)\n          local function rotated_check(s,\
    \ t)\n            local function rotated_check(s, t)\n              local function\
    \ rotated_check(s, t)\n                local function rotated_check(s, t)\n  \
    \                return s == t\n                end\n              end\n     \
    \       end\n          end\n        end\n      end\n    end\n  end\n  local function\
    \ rotated_check(s, t)\n    local function rotated_check(s, t)\n      local function\
    \ rotated_check(s, t)\n        local function rotated_check(s, t)\n          local\
    \ function rotated_check(s, t)\n            local function rotated_check(s, t)\n\
    \              local function rotated_check(s, t)\n                local function\
    \ rotated_check(s, t)\n                  return s == t\n                end\n\
    \              end\n            end\n          end\n        end\n      end\n \
    \   end\n  end\n  local function rotated_check(s, t)\n    local function rotated_check(s,\
    \ t)\n      local function rotated_check(s, t)\n        local function rotated_check(s,\
    \ t)\n          local function rotated_check(s, t)\n            local function\
    \ rotated_check(s, t)\n              local function rotated_check(s, t)\n    \
    \            local function rotated_check(s, t)\n                  return s ==\
    \ t\n                end\n              end\n            end\n          end\n\
    \        end\n      end\n    end\n  end\n  local function rotated_check(s, t)\n\
    \    local function rotated_check(s, t)\n      local function rotated_check(s,\
    \ t)\n        local function rotated_check(s, t)\n          local function rotated_check(s,\
    \ t)\n            local function rotated_check(s, t)\n              local function\
    \ rotated_check(s, t)\n                local function rotated_check(s, t)\n  \
    \                return s == t\n                end\n              end\n     \
    \       end\n          end\n        end\n      end\n    end\n  end\n  local function\
    \ rotated_check(s, t)\n    local function rotated_check(s, t)\n      local function\
    \ rot", "  local function is_substr_rotation(word, pattern)\n    local pattern\
    \ = string.lower(pattern)\n    local word = string.lower(word)\n    local pattern\
    \ = string.gsub(pattern, \"[%a]\", function (c)\n      return string.char(tonumber(c))\n\
    \    end)\n    local pattern = string.gsub(pattern, \"[%A]\", function (c)\n \
    \     return string.char(tonumber(c))\n    end)\n    local pattern = string.gsub(pattern,\
    \ \"[%w]\", function (c)\n      return string.char(tonumber(c))\n    end)\n  \
    \  local pattern = string.gsub(pattern, \"[%W]\", function (c)\n      return string.char(tonumber(c))\n\
    \    end)\n    local pattern = string.gsub(pattern, \"[%x]\", function (c)\n \
    \     return string.char(tonumber(c))\n    end)\n    local pattern = string.gsub(pattern,\
    \ \"[%X]\", function (c)\n      return string.char(tonumber(c))\n    end)\n  \
    \  local pattern = string.gsub(pattern, \"[%u]\", function (c)\n      return string.char(tonumber(c))\n\
    \    end)\n    local pattern = string.gsub(pattern, \"[%U]\", function (c)\n \
    \     return string.char(tonumber(c))\n    end)\n    local pattern = string.gsub(pattern,\
    \ \"[%v]\", function (c)\n      return string.char(tonumber(c))\n    end)\n  \
    \  local pattern = string.gsub(pattern, \"[%V]\", function (c)\n      return string.char(tonumber(c))\n\
    \    end)\n    local pattern = string.gsub(pattern, \"[%t]\", function (c)\n \
    \     return string.char(tonumber(c))\n    end)\n    local pattern = string.gsub(pattern,\
    \ \"[%T]\", function (c)\n      return string.char(tonumber(c))\n    end)\n  \
    \  local pattern = string.gsub(pattern, \"[%s]\", function (c)\n      return string.char(tonumber(c))\n\
    \    end)\n    local pattern = string.gsub(pattern, \"[%S]\", function (c)\n \
    \     return string.char(tonumber(c))\n    end)\n    local pattern = string.gsub(pattern,\
    \ \"[%w]\", function (c)\n      return string.char(tonumber(c))\n    end)\n  \
    \  local pattern = string.gsub(pattern, \"[%W]\", function (c)\n      return string.char(tonumber(c))\n\
    \    end)\n    local pattern = string.g", "  local function helper(str, pos, len)\n\
    \    if len == 0 then\n      return true\n    end\n    if str:sub(pos, pos + len)\
    \ == a then\n      return helper(str, pos + 1, len - 1) or\n             helper(str,\
    \ pos + 1, len)\n    end\n    return false\n  end\n  return helper(a, b, #a) ==\
    \ true\nend", "  local function is_substring(cycle, word)\n    local pattern =\
    \ string.sub(cycle, 1, #word)\n    local index = #cycle - 1\n    while index do\n\
    \      if string.sub(cycle, index, index) == pattern then\n        return true\n\
    \      end\n      index = index - 1\n    end\n    return false\n  end\n  local\
    \ function is_rotation(word, rotation)\n    local index = #word - 1\n    while\
    \ index do\n      if string.sub(word, index, index) == rotation then\n       \
    \ return true\n      end\n      index = index - 1\n    end\n    return false\n\
    \  end\n  local function is_substring_or_rotation(a, b)\n    return is_substring(a)\
    \ or is_rotation(a)\n  end\n  local function is_substring_or_rotation_or_substring(a,\
    \ b)\n    return is_substring_or_rotation(a) or is_substring(b) or is_rotation(b)\n\
    \  end\n  local function is_substring_or_rotation_or_substring_or_rotation(a,\
    \ b)\n    return is_substring_or_rotation_or_substring(a) or is_substring_or_rotation(b)\
    \ or is_substring(a) or is_rotation(a)\n  end\n  local function is_substring_or_rotation_or_substring_or_rotation_or_substring(a,\
    \ b)\n    return is_substring_or_rotation_or_substring_or_rotation(a) or is_substring_or_rotation_or_substring(b)\
    \ or is_substring_or_rotation(a) or is_substring(b) or is_rotation(a)\n  end\n\
    \  local function is_substring_or_rotation_or_substring_or_rotation_or_substring_or_rotation(a,\
    \ b)\n    return is_substring_or_rotation_or_substring_or_rotation_or_substring(a)\
    \ or is_substring_or_rotation_or_substring_or_rotation(b) or is_substring_or_rotation_or_substring(a)\
    \ or is_substring_or_rotation(b) or is_substring(a) or is_rotation(a)\n  end\n\
    \  local function is_substring_or_rotation_or_substring_or_rotation_or_substring_or_rotation_or_substring(a,\
    \ b)\n    return is_substring_or_rotation_or_substring_or_rotation_or_substring_or_rotation(a)\
    \ or is_substring_or_rotation_or_substring_or_rotation_or_substring(b) or is_substring_or_rotation_or_substring_or_rotation(a)\
    \ or is_substring_or_rotation_or_substring(b) or is_substring_or_rotation(a) or\
    \ is_substring(b) or is_rotation(a)\n  end\n  local function is_substring_or_rotation_or_substring_or_rotation_or_substring_or_rotation_or_substring_or_rotation(a,\
    \ b)\n    return is_substring_or_rotation_or_substring_or_rotation_or_substring_or_rotation_or_substring(a)\
    \ or is_substring_or_rotation_or_substring_or_rotation_or_substring_or_rotation(b)\
    \ or is_substring_or_rotation_or_substring_or_rotation_or_substring(a) or is_substring_or_rotation_or_sub",
  "    local function is_substr_or_rotation(s, t)\n        return string.find(s, t)\
    \ ~= nil\n    end\n    local function is_substr_or_rotations(s, t)\n        local\
    \ function is_substr_or_rotation(s, t)\n            return string.find(s, t) ~=\
    \ nil\n        end\n        local function is_substr_or_rotations(s, t)\n    \
    \        local function is_substr_or_rotation(s, t)\n                return string.find(s,\
    \ t) ~= nil\n            end\n            return string.find(s, t) ~= nil\n  \
    \      end\n        return is_substr_or_rotation(s, t) or is_substr_or_rotations(s,\
    \ t)\n    end\n    local function is_substr_or_rotations(s, t)\n        local\
    \ function is_substr_or_rotation(s, t)\n            return string.find(s, t) ~=\
    \ nil\n        end\n        return is_substr_or_rotation(s, t) or is_substr_or_rotations(s,\
    \ t)\n    end\n    return is_substr_or_rotations(a, b) or is_substr_or_rotations(b,\
    \ a)\nend", "  local function is_substring(a, b)\n    local function is_rotated_substring(a,\
    \ b)\n      local function is_rotated_substring_recursive(a, b)\n        if b\
    \ == nil then return false end\n        if a == nil then return false end\n  \
    \      if a == b then return true end\n        if a[1] == b[1] then\n        \
    \  return is_rotated_substring_recursive(a[2], b[2])\n        else\n         \
    \ return false\n        end\n      end\n      return is_rotated_substring_recursive(a,\
    \ b)\n    end\n    return is_substring(a, b)\n  end\n  return is_substring(a,\
    \ b)\nend", "  local function is_substring_helper(substr, str)\n    return str:sub(1,\
    \ #substr) == substr\n  end\n  return a:find(b) or is_substring_helper(b, a)\n\
    end", "  local function find(a, b)\n    if #a == 0 then return nil end\n    if\
    \ #b == 0 then return nil end\n    if a[1] == b[1] then return find(a[2], b[2])\
    \ end\n    if a[1] == b[2] then return find(a[2], b[1]) end\n    if a[2] == b[1]\
    \ then return find(a[1], b[2]) end\n    if a[2] == b[2] then return find(a[1],\
    \ b[1]) end\n    return a\n  end\n  return find(a, b)\nend", "  local function\
    \ is_substring_helper(str, substr)\n    return str:sub(1, #substr) == substr\n\
    \  end\n  local function is_substring_helper2(str, substr)\n    return str:sub(1,\
    \ #substr) == substr\n  end\n  local function is_substring_helper3(str, substr)\n\
    \    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper4(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper5(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper6(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper7(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper8(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper9(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper10(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper11(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper12(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper13(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper14(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper15(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper16(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper17(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper18(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper19(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper20(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper21(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper22(str,\
    \ substr)\n    return str:", "  local function find(a, b)\n    local i, j = 1,\
    \ #a\n    while i <= j do\n      if a[i] == b[j] then\n        return i\n    \
    \  elseif a[i] > b[j] then\n        j = j - 1\n      else\n        i = i + 1\n\
    \      end\n    end\n    return nil\n  end\n  local function find(a, b)\n    local\
    \ i, j = 1, #a\n    while i <= j do\n      if a[i] == b[j] then\n        return\
    \ i\n      elseif a[i] > b[j] then\n        j = j - 1\n      else\n        i =\
    \ i + 1\n      end\n    end\n    return nil\n  end\n  local function find(a, b)\n\
    \    local i, j = 1, #a\n    while i <= j do\n      if a[i] == b[j] then\n   \
    \     return i\n      elseif a[i] > b[j] then\n        j = j - 1\n      else\n\
    \        i = i + 1\n      end\n    end\n    return nil\n  end\n  local function\
    \ find(a, b)\n    local i, j = 1, #a\n    while i <= j do\n      if a[i] == b[j]\
    \ then\n        return i\n      elseif a[i] > b[j] then\n        j = j - 1\n \
    \     else\n        i = i + 1\n      end\n    end\n    return nil\n  end\n  local\
    \ function find(a, b)\n    local i, j = 1, #a\n    while i <= j do\n      if a[i]\
    \ == b[j] then\n        return i\n      elseif a[i] > b[j] then\n        j = j\
    \ - 1\n      else\n        i = i + 1\n      end\n    end\n    return nil\n  end\n\
    \  local function find(a, b)\n    local i, j = 1, #a\n    while i <= j do\n  \
    \    if a[i] == b[j] then\n        return i\n      elseif a[i] > b[j] then\n \
    \       j = j - 1\n      else\n        i = i + 1\n      end\n    end\n    return\
    \ nil\n  end\n  local function find(a, b)\n    local i, j = 1, #a\n    while i\
    \ <= j do\n      if a[i] == b[j] then\n        return i\n      elseif a[i] > b[j]\
    \ then\n        j = j - 1\n      else\n        i = i + 1\n      end\n    end\n\
    \    return nil\n  end\n  local function find(a, b)\n    local i, j = 1, #a\n\
    \    while i <= j do\n      if a[i] == b[j] then\n        return i\n      elseif\
    \ a[i] > b[j] then\n        j = j - 1\n      else\n        i = i + 1\n      end\n\
    \    end\n    return nil\n  end\n  local function find(a, b)\n    ", "  local\
    \ function is_substring(c)\n    return a:find(c) > -1 or b:find(c) > -1\n  end\n\
    \  local function is_rotated_substring(c)\n    return a:find(c) > -1 and b:find(c)\
    \ > -1 and a:find(c) ~= b:find(c)\n  end\n  local function is_rotated_substrings(c)\n\
    \    return a:find(c) > -1 and b:find(c) > -1 and a:find(c) ~= b:find(c) and a:find(c)\
    \ ~= b:find(c) and a:find(c) ~= b:find(c) and a:find(c) ~= b:find(c) and a:find(c)\
    \ ~= b:find(c)\n  end\n  local function is_rotated_substrings_or_substrings(c)\n\
    \    return a:find(c) > -1 and b:find(c) > -1 and a:find(c) ~= b:find(c) and a:find(c)\
    \ ~= b:find(c) and a:find(c) ~= b:find(c) and a:find(c) ~= b:find(c) and a:find(c)\
    \ ~= b:find(c) and a:find(c) ~= b:find(c)\n  end\n  local function is_rotated_substrings_or_substrings_or_substrings(c)\n\
    \    return a:find(c) > -1 and b:find(c) > -1 and a:find(c) ~= b:find(c) and a:find(c)\
    \ ~= b:find(c) and a:find(c) ~= b:find(c) and a:find(c) ~= b:find(c) and a:find(c)\
    \ ~= b:find(c) and a:find(c) ~= b:find(c) and a:find(c) ~= b:find(c)\n  end\n\
    \  local function is_rotated_substrings_or_substrings_or_substrings_or_substrings(c)\n\
    \    return a:find(c) > -1 and b:find(c) > -1 and a:find(c) ~= b:find(c) and a:find(c)\
    \ ~= b:find(c) and a:find(c) ~= b:find(c) and a:find(c) ~= b:find(c) and a:find(c)\
    \ ~= b:find(c) and a:find(c) ~= b:find(c) and a:find(c) ~= b:find(c) and a:find(c)\
    \ ~= b:find(c)\n  end\n  local function is_rotated_substrings_or_substrings_or_substrings_or_substrings_or_substrings(c)\n\
    \    return a:find(c) > -1 and b:find(c) > -1 and a:find(c) ~= b:find(c) and a:find(c)\
    \ ~= b:find(c) and a:find(c) ~= b:find(c) and a:find(c) ~= b:find(c) and a:find(c",
  "  local pattern = a:gsub('%w+', function(w)\n    return string.sub(w, 1, 1) ..\
    \ string.sub(w, 1, 1) .. string.sub(w, 2, 2) .. string.sub(w, 2, 2) .. string.sub(w,\
    \ 3, 3) .. string.sub(w, 3, 3)\n  end)\n  return b:find(pattern) ~= nil\nend",
  "  local function is_substring_helper(str, substr)\n    if str == nil then\n   \
    \   return false\n    end\n    if substr == nil then\n      return true\n    end\n\
    \    if str:len() < substr:len() then\n      return false\n    end\n    local\
    \ str_len = str:len()\n    local substr_len = substr:len()\n    for i = 1, str_len\
    \ do\n      if str:sub(i, i) ~= substr:sub(i - 1, i) then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  return is_substring_helper(a, b)\
    \ or is_substring_helper(b, a)\nend", "  local pattern = a:gsub(\"%w+\", function(c)\n\
    \    return string.sub(b, 1, #b - #c + 1):reverse()\n  end)\n  return string.find(b,\
    \ pattern, 1, true) ~= nil\nend", "  local function is_substring_helper(str, substr)\n\
    \    return str:sub(1, #str) == substr\n  end\n  local function is_substring_helper2(str,\
    \ substr)\n    local i, j = 1, #str\n    while i <= j do\n      if str:sub(i,\
    \ #str) == substr then\n        return true\n      end\n      i = i + #substr\
    \ + 1\n    end\n    return false\n  end\n  if #a > #b then\n    return false\n\
    \  end\n  if #a == 0 then\n    return true\n  end\n  if #b == 0 then\n    return\
    \ false\n  end\n  if #a > #b then\n    return false\n  end\n  if #a == 1 then\n\
    \    return is_substring_helper2(a, a) or is_substring_helper2(b, b)\n  end\n\
    \  if #b == 1 then\n    return is_substring_helper2(a, b) or is_substring_helper2(b,\
    \ a)\n  end\n  if #a == 2 then\n    return is_substring_helper2(a[1], a[2]) or\
    \ is_substring_helper2(b[1], b[2])\n  end\n  if #b == 2 then\n    return is_substring_helper2(a[1],\
    \ b[1]) or is_substring_helper2(b[1], a[2])\n  end\n  if #a == 3 then\n    return\
    \ is_substring_helper2(a[2], a[3]) or is_substring_helper2(b[2], b[3])\n  end\n\
    \  if #b == 3 then\n    return is_substring_helper2(a[2], b[2]) or is_substring_helper2(b[2],\
    \ a[3])\n  end\n  if #a == 4 then\n    return is_substring_helper2(a[3], a[4])\
    \ or is_substring_helper2(b[3], b[4])\n  end\n  if #b == 4 then\n    return is_substring_helper2(a[3],\
    \ b[3]) or is_substring_helper2(b[3], a[4])\n  end\n  if #a == 5 then\n    return\
    \ is_substring_helper2(a[4], a[5]) or is_substring_helper2(b[4], b[5])\n  end\n\
    \  if #b == 5 then\n    return is_substring_helper2(a[4], b[4]) or is_substring_helper2(b[4],\
    \ a[5])\n  end\n  if #a == 6 then\n    return is_substring_helper2(a[5], a[6])\
    \ or is_substring_helper2(b[5], b[6])\n  end\n  if #b == 6 then\n    return is_substring_helper2(a[5],\
    \ b[5]) or is_substring_helper2(b[5], a[6])\n  end\n  if #a == 7 then\n    return\
    \ is_substring_helper2(a[6], a[7]) or is_substring_helper2(b[6], b[7])\n  end\n\
    \  if ", "  local function is_substring(c)\n    return string.find(a, c) > -1\
    \ or string.find(b, c) > -1\n  end\n  local function is_rotated_substring(c)\n\
    \    return string.find(b, c) > -1 or string.find(a, c) > -1\n  end\n  local function\
    \ is_rotated_substring2(c)\n    return string.find(b, c) > -1 or string.find(a,\
    \ c) > -1\n  end\n  local function is_rotated_substring3(c)\n    return string.find(b,\
    \ c) > -1 or string.find(a, c) > -1\n  end\n  local function is_rotated_substring4(c)\n\
    \    return string.find(b, c) > -1 or string.find(a, c) > -1\n  end\n  local function\
    \ is_rotated_substring5(c)\n    return string.find(b, c) > -1 or string.find(a,\
    \ c) > -1\n  end\n  local function is_rotated_substring6(c)\n    return string.find(b,\
    \ c) > -1 or string.find(a, c) > -1\n  end\n  local function is_rotated_substring7(c)\n\
    \    return string.find(b, c) > -1 or string.find(a, c) > -1\n  end\n  local function\
    \ is_rotated_substring8(c)\n    return string.find(b, c) > -1 or string.find(a,\
    \ c) > -1\n  end\n  local function is_rotated_substring9(c)\n    return string.find(b,\
    \ c) > -1 or string.find(a, c) > -1\n  end\n  local function is_rotated_substring10(c)\n\
    \    return string.find(b, c) > -1 or string.find(a, c) > -1\n  end\n  local function\
    \ is_rotated_substring11(c)\n    return string.find(b, c) > -1 or string.find(a,\
    \ c) > -1\n  end\n  local function is_rotated_substring12(c)\n    return string.find(b,\
    \ c) > -1 or string.find(a, c) > -1\n  end\n  local function is_rotated_substring13(c)\n\
    \    return string.find(b, c) > -1 or string.find(a, c) > -1\n  end\n  local function\
    \ is_rotated_substring14(c)\n    return string.find(b, c) > -1 or string.find(a,\
    \ c) > -1\n  end\n  local function is_rotated_substring15(c)\n    return string.find(b,\
    \ c) > -1 or string.find(a, c) > -1\n  end\n  local function is_rotated_substring16(c)\n\
    \    return string.find(b, c) > -1 or string.find(a, c) > -1\n  end\n  local function\
    \ is_rotated_substring17(c)\n    return string.find(b, c) > -1 or string.find(a,\
    \ c) > -1\n  end\n  local function is_rotated_substring18(c)\n    return string.find(b,\
    \ c) > -1 or string.find(a, c) > -1\n  end\n  local function ", "  local function\
    \ helper(w, i)\n    if i == #w then\n      return true\n    end\n    if w[i] ==\
    \ '' then\n      return helper(w, i + 1)\n    end\n    if w[i] == b[i] then\n\
    \      return helper(w, i + 1)\n    end\n    if w[i] ~= b[i] then\n      return\
    \ helper(w, i + 1)\n    end\n    return helper(w, i + 1)\n  end\n  return helper(a,\
    \ b)\nend", "    local function is_substring_of(a, b)\n        local function\
    \ is_substring(c)\n            return string.find(a, c) ~= nil\n        end\n\
    \        return is_substring(b) or is_substring(c) or is_substring(b) or is_substring(c)\n\
    \    end\n    return is_substring_of(a, b) or is_substring_of(b, a) or is_substring_of(b,\
    \ a) or is_substring_of(a, b)\nend", "  local function is_substring_helper(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper2(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper3(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper4(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper5(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper6(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper7(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper8(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper9(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper10(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper11(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper12(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper13(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper14(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper15(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper16(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper17(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper18(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper19(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper20(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper21(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper22(str,\
    \ substr)\n    return str:", "  local function is_substring_of(a, b)\n    local\
    \ function is_substring(c)\n      return string.find(a, c) > -1 or string.find(b,\
    \ c) > -1\n    end\n    return is_substring(c) or is_substring(c..'m') or is_substring(c..'p')\
    \ or is_substring(c..'s')\n  end\n  local function is_substring_of_rotations(a,\
    \ b, c)\n    local function is_substring_of_rotations(a, b, c)\n      local function\
    \ is_substring_of_rotations(a, b, c)\n        local function is_substring_of_rotations(a,\
    \ b, c)\n          local function is_substring_of_rotations(a, b, c)\n       \
    \     local function is_substring_of_rotations(a, b, c)\n              local function\
    \ is_substring_of_rotations(a, b, c)\n                local function is_substring_of_rotations(a,\
    \ b, c)\n                  local function is_substring_of_rotations(a, b, c)\n\
    \                    local function is_substring_of_rotations(a, b, c)\n     \
    \                 local function is_substring_of_rotations(a, b, c)\n        \
    \                local function is_substring_of_rotations(a, b, c)\n         \
    \                 local function is_substring_of_rotations(a, b, c)\n        \
    \                    local function is_substring_of_rotations(a, b, c)\n     \
    \                         local function is_substring_of_rotations(a, b, c)\n\
    \                                local function is_substring_of_rotations(a, b,\
    \ c)\n                                  local function is_substring_of_rotations(a,\
    \ b, c)\n                                    local function is_substring_of_rotations(a,\
    \ b, c)\n                                      local function is_substring_of_rotations(a,\
    \ b, c)\n                                        local function is_substring_of_rotations(a,\
    \ b, c)\n                                          local function is_substring_of_rotations(a,\
    \ b, c)\n                                            local function is_substring_of_rotations(a,\
    \ b, c)\n                                              local function is_substring_of_rotations(a,\
    \ b, c)\n                                                local function is_substring_of_rotations(a,\
    \ b, c)\n                                                  local function is_substring_of_rotations(a,\
    \ b, c)\n                                                    local function is_substring_of_rotations(a,\
    \ b, c)\n                                                      local function\
    \ is_substring_of_rotations(a, b, c)\n                                       \
    \                 local function is_substring_of_rotations(a, b, c)\n        \
    \                                                  local function is_substring_of_rotations(a,\
    \ b, c)\n                                                            local function\
    \ is_substring_of_rotations(a, b, c)\n                                       \
    \                       local function is_substring_of_rotations(a, b, c)\n  \
    \                                                              local function\
    \ is_substring_of_rotations(a, b, c)\n                                       \
    \                           local function is_substring_of_rotations(a, b, c)\n\
    \                                                                    local function\
    \ is_substring_of_rotations(a, b, c)\n                                       \
    \                               local function is_substring_of_rotations(a, b,\
    \ c)\n                                                                       \
    \ local function is_substring_of_rotations(a, b, c)\n                        \
    \                                                  local function is_substring_of_rotations(a,\
    \ b, c)\n                                                                    \
    \        local ", "  local function is_substring_of_a(c)\n    return a:sub(1,\
    \ #c) == c\n  end\n  local function is_substring_of_a_or_a_rotation(s)\n    return\
    \ is_substring_of_a(s) or a:sub(1, #s) ~= s\n  end\n  local function is_substring_of_a_or_a_rotations(s)\n\
    \    return is_substring_of_a_or_a_rotation(s) or a:sub(1, #s) ~= s\n  end\n \
    \ local function is_substring_of_a_or_a_rotations_or_a_rotation(s)\n    return\
    \ is_substring_of_a_or_a_rotations(s) or is_substring_of_a_or_a_rotation(s)\n\
    \  end\n  local function is_substring_of_a_or_a_rotations_or_a_rotations(s)\n\
    \    return is_substring_of_a_or_a_rotations_or_a_rotation(s) or is_substring_of_a_or_a_rotations(s)\n\
    \  end\n  local function is_substring_of_a_or_a_rotations_or_a_rotations_or_a_rotation(s)\n\
    \    return is_substring_of_a_or_a_rotations_or_a_rotations(s) or is_substring_of_a_or_a_rotations_or_a_rotation(s)\n\
    \  end\n  local function is_substring_of_a_or_a_rotations_or_a_rotations_or_a_rotations(s)\n\
    \    return is_substring_of_a_or_a_rotations_or_a_rotations_or_a_rotation(s) or\
    \ is_substring_of_a_or_a_rotations_or_a_rotations(s)\n  end\n  local function\
    \ is_substring_of_a_or_a_rotations_or_a_rotations_or_a_rotations_or_a_rotation(s)\n\
    \    return is_substring_of_a_or_a_rotations_or_a_rotations_or_a_rotations(s)\
    \ or is_substring_of_a_or_a_rotations_or_a_rotations_or_a_rotation(s)\n  end\n\
    \  local function is_substring_of_a_or_a_rotations_or_a_rotations_or_a_rotations_or_a_rotations_or_a_rotation(s)\n\
    \    return is_substring_of_a_or_a_rotations_or_a_rotations_or_a_rotations_or_a_rotations(s)\
    \ or is_substring_of_a_or_a_rotations_or_a_rotations_or_a_rotations_or_a_rotation(s)\n\
    \  end\n  local function is_substring_of_a_or_a_rotations_or_a_rotations_or_a_rotations_or_a_rotations_or_a_rotations_or_a_rotation(s)\n\
    \    return is_substring_of_a_or_a_rotations_or_a_rotations_or_a_rotations_or_a_rotations_or_a_rotations(s)\
    \ or is_substring_of_a_or_a_rotations_", "  local function is_sub(pattern, str)\n\
    \    return str:sub(1, #pattern) == pattern\n  end\n  local function is_rotation(str)\n\
    \    return str:sub(1, #str) == str .. str:sub((#str + 1), #str)\n  end\n  local\
    \ function is_sub_pattern(pattern, str)\n    return is_sub(pattern, str) or is_sub_pattern(pattern,\
    \ str:sub(1, #pattern))\n  end\n  local function is_rotations(str)\n    return\
    \ is_rotation(str) or is_rotations(str:sub(1, #str))\n  end\n  local function\
    \ is_sub_patterns(patterns, str)\n    local pattern = patterns[1]\n    local patterns\
    \ = patterns[2]:gsub(pattern, '([^%s]+)'):gsub('%s+', '([^%s]+)'):gsub('%s*',\
    \ '([^%s]+)'):gsub('%s?', '([^%s]+)'):gsub('%s+$', '([^%s]+)'):gsub('%s*$', '([^%s]+)'):gsub('%s?$',\
    \ '([^%s]+)'):gsub('%s*$', '([^%s]+)'):gsub('%s?$', '([^%s]+)'):gsub('%s*$', '([^%s]+)'):gsub('%s?$',\
    \ '([^%s]+)'):gsub('%s*$', '([^%s]+)'):gsub('%s?$', '([^%s]+)'):gsub('%s*$', '([^%s]+)'):gsub('%s?$',\
    \ '([^%s]+)'):gsub('%s*$', '([^%s]+)'):gsub('%s?$', '([^%s]+)'):gsub('%s*$', '([^%s]+)'):gsub('%s?$',\
    \ '([^%s]+)'):gsub('%s*$', '([^%s]+)'):gsub('%s?$', '([^%s]+)'):gsub('%s*$', '([^%s]+)'):gsub('%s?$',\
    \ '([^%s]+)'):gsub('%s*$', '([^%s]+)'):gsub('%s?$', '([^%s]+)'):gsub('%s*$', '([^%s]+)'):gsub('%s?$',\
    \ '([^%s]+)'):gsub('%s*$', '([^%s]+)'):gsub('%s?$', '([^%s]+)'):gsub('%s*$', '([^%s]+)'):gsub('%s?$',\
    \ '([^%s]+)'):gsub('%s*$', '([^%s]+)'):gsub('%s?$', '([^%s]+)'):gsub('%s*$', '([^%s]+)'):gsub('%s?$',\
    \ '([^%s]+)'):gsub", "  local function is_substring_helper(str, substr)\n    if\
    \ str == nil then return false end\n    if substr == nil then return true end\n\
    \    if #str > #substr then return false end\n    for i = 1, #str do\n      if\
    \ string.sub(str,i,i) == substr then\n        return true\n      end\n    end\n\
    \    return false\n  end\n  if a == nil then return false end\n  if b == nil then\
    \ return false end\n  if #a > #b then return false end\n  for i = 1, #a do\n \
    \   if is_substring_helper(b, a) then\n      return true\n    end\n  end\n  return\
    \ false\nend", "  local function find(a, b)\n    local i, j = 1, #a\n    while\
    \ i <= j do\n      local m = math.min(i+j, b)\n      if a[i] == b[m] then\n  \
    \      i = m\n      elseif a[i] < b[m] then\n        j = m\n      else\n     \
    \   i = m\n      end\n    end\n    return i\n  end\n  local function find(a, b)\n\
    \    local i, j = 1, #a\n    while i <= j do\n      local m = math.min(i+j, b)\n\
    \      if a[i] == b[m] then\n        i = m\n      elseif a[i] > b[m] then\n  \
    \      j = m\n      else\n        i = m\n      end\n    end\n    return i\n  end\n\
    \  local function find(a, b)\n    local i, j = 1, #a\n    while i <= j do\n  \
    \    local m = math.min(i+j, b)\n      if a[i] == b[m] then\n        i = m\n \
    \     elseif a[i] < b[m] then\n        j = m\n      else\n        i = m\n    \
    \  end\n    end\n    return i\n  end\n  local function find(a, b)\n    local i,\
    \ j = 1, #a\n    while i <= j do\n      local m = math.min(i+j, b)\n      if a[i]\
    \ == b[m] then\n        i = m\n      elseif a[i] > b[m] then\n        j = m\n\
    \      else\n        i = m\n      end\n    end\n    return i\n  end\n  local function\
    \ find(a, b)\n    local i, j = 1, #a\n    while i <= j do\n      local m = math.min(i+j,\
    \ b)\n      if a[i] == b[m] then\n        i = m\n      elseif a[i] < b[m] then\n\
    \        j = m\n      else\n        i = m\n      end\n    end\n    return i\n\
    \  end\n  local function find(a, b)\n    local i, j = 1, #a\n    while i <= j\
    \ do\n      local m = math.min(i+j, b)\n      if a[i] == b[m] then\n        i\
    \ = m\n      elseif a[i] > b[m] then\n        j = m\n      else\n        i = m\n\
    \      end\n    end\n    return i\n  end\n  local function find(a, b)\n    local\
    \ i, j = 1, #a\n    while i <= j do\n      local m = math.min(i+j, b)\n      if\
    \ a[i] == b[m] then\n        i = m\n      elseif a[i] < b[m] then\n        j =\
    \ m\n      else\n        i = m\n      end\n    end\n    return i\n  end\n  ",
  "  local function is_substring(cycle, word)\n    local sub = false\n    for i =\
    \ 1, #cycle do\n      if cycle:sub(i, i) ~= word then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local function is_rotated_substring(cycle,\
    \ word)\n    local sub = false\n    for i = 1, #cycle do\n      if cycle:sub(i,\
    \ i) ~= word:sub(i, i) then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local function is_substring_of_rotated_substring(cycle, word)\n\
    \    local sub = false\n    for i = 1, #cycle do\n      if cycle:sub(i, i) ~=\
    \ word:sub(i, i) then\n        return false\n      end\n    end\n    return true\n\
    \  end\n  local function is_substring_of_rotated_substring_of_rotated_substring(cycle,\
    \ word)\n    local sub = false\n    for i = 1, #cycle do\n      if cycle:sub(i,\
    \ i) ~= word:sub(i, i) then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local function is_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring(cycle,\
    \ word)\n    local sub = false\n    for i = 1, #cycle do\n      if cycle:sub(i,\
    \ i) ~= word:sub(i, i) then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local function is_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring(cycle,\
    \ word)\n    local sub = false\n    for i = 1, #cycle do\n      if cycle:sub(i,\
    \ i) ~= word:sub(i, i) then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local function is_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring(cycle,\
    \ word)\n    local sub = false\n    for i = 1, #cycle do\n      if cycle:sub(i,\
    \ i) ~= word:sub(i, i) then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local function is_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring(cycle,\
    \ word)\n    local sub = false\n    for i = 1, #cycle do\n      if cycle:sub(i,\
    \ i) ~= word:sub(i, i) then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  ", "  local function is_substring_helper(str, substr)\n    local\
    \ function helper(str, substr)\n      if str == nil then\n        return false\n\
    \      elseif substr == nil then\n        return true\n      elseif str:len()\
    \ < substr:len() then\n        return false\n      elseif str:len() > substr:len()\
    \ then\n        return true\n      else\n        local i = 0\n        while i\
    \ < str:len() and i < substr:len() do\n          if str:sub(i, i) ~= substr:sub(i\
    \ - 1, i - 1) then\n            return false\n          end\n          i = i +\
    \ 1\n        end\n        return true\n      end\n    end\n    return helper(str,\
    \ substr)\n  end\n  return is_substring_helper(a, b) or is_substring_helper(b,\
    \ a)\nend", "  local function substr_check(s, t)\n    local function substr_check_aux(s,\
    \ t, i, j)\n      if i >= j then\n        return true\n      end\n      if s[i]:sub(1,\
    \ j) == t then\n        return substr_check_aux(s, t, i + 1, j + 1)\n      end\n\
    \      return false\n    end\n    return substr_check_aux(s, t, 1, #s)\n  end\n\
    \  return substr_check(a, b) or substr_check(b, a)\nend", "  local function is_substring_helper(str,\
    \ substr)\n    if str == nil or substr == nil then\n      return false\n    end\n\
    \    local str_len = #str\n    local substr_len = #substr\n    if str_len < substr_len\
    \ then\n      return false\n    end\n    local i = 0\n    while i < str_len do\n\
    \      if string.sub(str,i,i+substr_len) == substr then\n        return true\n\
    \      end\n      i = i + 1\n    end\n    return false\n  end\n  return is_substring_helper(a,\
    \ b) or is_substring_helper(b, a)\nend", "  local function is_substring_of(a,\
    \ b)\n    return a:sub(1, #b) == b\n  end\n  local function is_substring_of_rotation(a,\
    \ b)\n    return a:sub(1, #b) == b:sub(1, #a) .. b:sub((#b) + 1, 1)\n  end\n \
    \ local function is_substring_of_rotations(a, b, n)\n    local result = true\n\
    \    for i = 1, n do\n      if not is_substring_of_rotation(a, b) then\n     \
    \   result = false\n        break\n      end\n    end\n    return result\n  end\n\
    \  local function is_substring_of_rotations_of(a, b, n, m)\n    local result =\
    \ true\n    for i = 1, n do\n      if not is_substring_of_rotations(a, b, m) then\n\
    \        result = false\n        break\n      end\n    end\n    return result\n\
    \  end\n  local function is_substring_of_rotations_of2(a, b, n, m)\n    local\
    \ result = true\n    for i = 1, n do\n      if not is_substring_of_rotations(a,\
    \ b, m) then\n        result = false\n        break\n      end\n    end\n    return\
    \ result\n  end\n  local function is_substring_of_rotations_of3(a, b, n, m)\n\
    \    local result = true\n    for i = 1, n do\n      if not is_substring_of_rotations(a,\
    \ b, m) then\n        result = false\n        break\n      end\n    end\n    return\
    \ result\n  end\n  local function is_substring_of_rotations_of4(a, b, n, m)\n\
    \    local result = true\n    for i = 1, n do\n      if not is_substring_of_rotations(a,\
    \ b, m) then\n        result = false\n        break\n      end\n    end\n    return\
    \ result\n  end\n  local function is_substring_of_rotations_of5(a, b, n, m)\n\
    \    local result = true\n    for i = 1, n do\n      if not is_substring_of_rotations(a,\
    \ b, m) then\n        result = false\n        break\n      end\n    end\n    return\
    \ result\n  end\n  local function is_substring_of_rotations_of6(a, b, n, m)\n\
    \    local result = true\n    for i = 1, n do\n      if not is_substring_of_rotations(a,\
    \ b, m) then\n        result = false\n        break\n      end\n    end\n    return\
    \ result\n  end\n  local function is_substring_of_rotations_of7(a, b, n, m)\n\
    \    local result = true\n    for i = 1, n do\n      if not is_substring_of_rotations(a,\
    \ b, m) then\n        result = false\n        break\n      end\n    end\n    return\
    \ result\n  end\n  local function is_substring_of_rotations_of8(a, b, n, m)\n\
    \    local result = true\n    for i = 1, n do\n      if not is_substring_of_rotations(a,\
    \ b, m) then\n        result = ", "  local function is_substring(cycle, word)\n\
    \    local i = #word - 1\n    while i > 0 do\n      if cycle == word[i] then\n\
    \        return true\n      end\n      i = i - 1\n    end\n    return false\n\
    \  end\n  local function is_substring_rotation(word, rotation)\n    local i =\
    \ #word - 1\n    while i > 0 do\n      if word[i] == rotation then\n        return\
    \ true\n      end\n      i = i - 1\n    end\n    return false\n  end\n  local\
    \ function is_substring_rotations(word, rotations)\n    local i = #word - 1\n\
    \    while i > 0 do\n      for _, rotation in ipairs(rotations) do\n        if\
    \ word[i] == rotation then\n          return true\n        end\n      end\n  \
    \    i = i - 1\n    end\n    return false\n  end\n  local function is_substring_rotations_rotation(word,\
    \ rotations)\n    local i = #word - 1\n    while i > 0 do\n      for _, rotation\
    \ in ipairs(rotations) do\n        if word[i] == rotation then\n          local\
    \ j = #word - 1\n          while j > 0 do\n            if word[j] == rotation\
    \ then\n              return true\n            end\n            j = j - 1\n  \
    \        end\n        end\n      end\n      i = i - 1\n    end\n    return false\n\
    \  end\n  local function is_substring_rotations_rotations(word, rotations)\n \
    \   local i = #word - 1\n    while i > 0 do\n      for _, rotation in ipairs(rotations)\
    \ do\n        for _, rotation2 in ipairs(rotations) do\n          if word[i] ==\
    \ rotation then\n            local j = #word - 1\n            while j > 0 do\n\
    \              if word[j] == rotation2 then\n                return true\n   \
    \           end\n              j = j - 1\n            end\n          end\n   \
    \     end\n      end\n      i = i - 1\n    end\n    return false\n  end\n  local\
    \ function is_substring_rotations_rotations_rotation(word, rotations)\n    local\
    \ i = #word - 1\n    while i > 0 do\n      for _, rotation in ipairs(rotations)\
    \ do\n        for _, rotation2 in ipairs(rotations) do\n          for _, rotation3\
    \ in ipairs(rotations) do\n            if word[i] == rotation then\n         \
    \     local j = #word - 1\n              while j > 0 do\n                if word[j]\
    \ == rotation2 then\n                  local k = #word - 1\n                 \
    \ while k > 0 do\n                    if word[k] == rotation3 then\n         \
    \             return true\n                    end\n                    k = k\
    \ - 1\n                  end\n                end\n              end\n       \
    \     end\n          end\n        end\n      end\n      i = i - 1", "  local function\
    \ helper(w, i, j)\n    if i == j or j == #w then\n      return true\n    end\n\
    \    if w[i] == b or w[j] == b then\n      return helper(w, i + 1, j - 1)\n  \
    \  end\n    return helper(w, i + 1, j)\n  end\n  return helper(a, b, #b - 1)\n\
    end", "  local function is_substring(cycle, word)\n    local function is_substring_aux(word,\
    \ cycle)\n      if word == cycle then\n        return true\n      elseif word\
    \ == \"\" then\n        return false\n      else\n        return is_substring_aux(word,\
    \ cycle .. word)\n      end\n    end\n    return is_substring_aux(word, cycle)\n\
    \  end\n  local function is_substring_aux(word, cycle)\n    if word == cycle then\n\
    \      return true\n    elseif word == \"\" then\n      return false\n    else\n\
    \      return is_substring_aux(word, cycle .. word)\n    end\n  end\n  return\
    \ is_substring(a, b) or is_substring(b, a)\nend", "  local function is_substring_helper(str,\
    \ pattern)\n    if pattern == str then return true end\n    if pattern:sub(1,\
    \ #str) == str then return true end\n    for i = 1, #str do\n      if str:sub(i,\
    \ i) == pattern then\n        return true\n      end\n    end\n    return false\n\
    \  end\n  return is_substring_helper(a, b) or is_substring_helper(b, a)\nend",
  "  local function is_substr_or_rotation(s, t)\n    return string.find(s, t) ~= nil\
    \ or (string.find(s, t, 1, true) and string.find(s, t, -1))\n  end\n  local function\
    \ is_substr_or_rotations(s, t)\n    return string.find(s, t) ~= nil or (string.find(s,\
    \ t, 1, true) and string.find(s, t, -1) and string.find(s, t, -2, true) and string.find(s,\
    \ t, -3))\n  end\n  local function is_substr_or_rotations_or_space(s, t)\n   \
    \ return string.find(s, t) ~= nil or (string.find(s, t, 1, true) and string.find(s,\
    \ t, -1) and string.find(s, t, -2, true) and string.find(s, t, -3) and string.find(s,\
    \ t, -4))\n  end\n  local function is_substr_or_rotations_or_space_or_space(s,\
    \ t)\n    return string.find(s, t) ~= nil or (string.find(s, t, 1, true) and string.find(s,\
    \ t, -1) and string.find(s, t, -2, true) and string.find(s, t, -3) and string.find(s,\
    \ t, -4) and string.find(s, t, -5))\n  end\n  local function is_substr_or_rotations_or_space_or_space_or_space(s,\
    \ t)\n    return string.find(s, t) ~= nil or (string.find(s, t, 1, true) and string.find(s,\
    \ t, -1) and string.find(s, t, -2, true) and string.find(s, t, -3) and string.find(s,\
    \ t, -4) and string.find(s, t, -5) and string.find(s, t, -6))\n  end\n  local\
    \ function is_substr_or_rotations_or_space_or_space_or_space_or_space(s, t)\n\
    \    return string.find(s, t) ~= nil or (string.find(s, t, 1, true) and string.find(s,\
    \ t, -1) and string.find(s, t, -2, true) and string.find(s, t, -3) and string.find(s,\
    \ t, -4) and string.find(s, t, -5) and string.find(s, t, -6) and string.find(s,\
    \ t, -7))\n  end\n  local function is_substr_or_rotations_or_space_or_space_or_space_or_space(s,\
    \ t)\n    return string.find(s, t) ~= nil or (string.find(s, t, 1, true) and string.find(s,\
    \ t, -1) and string.find(s, t, -2, true) and string.find(s, t, -3) and string.find(s,\
    \ t, -4) and string.find(s, t, -5) and string.find(s, t, -6) and string.find(s,\
    \ t, -7) and string.find(s, t, -8))\n  end\n  local function is_substr_or_rotations_or_space_or_space_or_space_or_space_or_space(s,\
    \ t)\n    return string.find(s, t) ~= nil or (string.find(s, t, 1, true) and string.find(s,\
    \ t, ", "  local function is_substring_of_a(b)\n    local function is_substring_of_a_aux(a,\
    \ b)\n      if a == nil then return false end\n      if b == nil then return false\
    \ end\n      if a ~= b then return false end\n      return true\n    end\n   \
    \ return is_substring_of_a_aux(string.find(a, b), string.find(b, a))\n  end\n\
    \  return is_substring_of_a(b) or is_substring_of_a(a) or is_substring_of_a_aux(a,\
    \ b)\nend", "  local function helper(w, i)\n    if i == #w then\n      return\
    \ true\n    end\n    if w[i] == 'a' then\n      if helper(w, i + 1) then\n   \
    \     return true\n      end\n    end\n    if w[i] == 'b' then\n      if helper(w,\
    \ i - 1) then\n        return true\n      end\n    end\n    if w[i] == 'c' then\n\
    \      if helper(w, i - 2) then\n        return true\n      end\n    end\n   \
    \ if w[i] == 'd' then\n      if helper(w, i + 2) then\n        return true\n \
    \     end\n    end\n  end\n  return helper(a, b)\nend", "  local function is_substring(c)\n\
    \    return string.find(a, c) > -1 or string.find(b, c) > -1\n  end\n  local function\
    \ is_rotated_substring(c)\n    return string.find(string.sub(a, 2, -1), c) > -1\
    \ or string.find(string.sub(b, 2, -1), c) > -1\n  end\n  local function is_rotated_substrings(c)\n\
    \    local substrings = string.sub(a, 2, -1):gmatch(\"(.-)%1$\")\n    return string.find(string.sub(b,\
    \ 2, -1), c) > -1 or string.find(string.sub(b, 2, -1), c) > -1 or string.find(string.sub(b,\
    \ 2, -1), c) > -1 or string.find(string.sub(b, 2, -1), c) > -1 or string.find(string.sub(b,\
    \ 2, -1), c) > -1 or string.find(string.sub(b, 2, -1), c) > -1 or string.find(string.sub(b,\
    \ 2, -1), c) > -1 or string.find(string.sub(b, 2, -1), c) > -1 or string.find(string.sub(b,\
    \ 2, -1), c) > -1 or string.find(string.sub(b, 2, -1), c) > -1 or string.find(string.sub(b,\
    \ 2, -1), c) > -1 or string.find(string.sub(b, 2, -1), c) > -1 or string.find(string.sub(b,\
    \ 2, -1), c) > -1 or string.find(string.sub(b, 2, -1), c) > -1 or string.find(string.sub(b,\
    \ 2, -1), c) > -1 or string.find(string.sub(b, 2, -1), c) > -1 or string.find(string.sub(b,\
    \ 2, -1), c) > -1 or string.find(string.sub(b, 2, -1), c) > -1 or string.find(string.sub(b,\
    \ 2, -1), c) > -1 or string.find(string.sub(b, 2, -1), c) > -1 or string.find(string.sub(b,\
    \ 2, -1), c) > -1 or string.find(string.sub(b, 2, -1), c) > -1 or string.find(string.sub(b,\
    \ 2, -1), c) > -1 or string.find(string.sub(b, 2, -1), c) > -1 or string.find(string.sub(b,\
    \ 2, -1), c) > -1 or string.find(string.sub(b, 2, -1), c) > -1 or string.find(string.sub(b,\
    \ 2, -1), c) > -1 or string.find(string.sub(b, 2, -1), c) > -1 or string.find(string.sub(b,\
    \ 2, -1), c) > -1 or string.find(string.sub(b, 2, -1), c) > -1 or string.find(string.sub(b,\
    \ 2, -1), c) > -1 or string.find(string.sub(b, 2, -1), c) > -1 or string.find(string.sub(b,\
    \ 2, -1), c) > -1 or string.find(string.sub(b, 2, -1), c) > -1 or string.find(string.sub(b,\
    \ 2, -1), c) > -1 or string.find(string.sub(b, 2, -1), c) > -1 or string.find(string.sub(b,\
    \ 2, -1), c) > -1 or string.find(string.sub(b, 2, -1), c) > -1 or string.find(string.sub(b,\
    \ 2, -1), ", "  local function check(cycle, word)\n    if cycle == 0 then\n  \
    \    return true\n    end\n    if word == nil then\n      return false\n    end\n\
    \    if word:sub(1, #a) == a then\n      return check(--cycle, word:sub(2, #word))\n\
    \    end\n    if word:sub(1, #b) == b then\n      return check(--cycle, word:sub(2,\
    \ #word))\n    end\n    return false\n  end\n  return check(0, nil)\nend", " \
    \ local function find(a, b)\n    local i = 0\n    while i < #a do\n      if string.find(b,\
    \ a[i], 1, true) then\n        return i\n      end\n      i = i + 1\n    end\n\
    \    return nil\n  end\n  local function rotate(b)\n    local i = 0\n    while\
    \ i < #b do\n      local j = i + 1\n      while j < #b do\n        if b[j] ==\
    \ b[i] then\n          b[j] = b[j + 1]\n        end\n        j = j + 1\n     \
    \ end\n      i = i + 1\n    end\n  end\n  local function sub(a, b)\n    local\
    \ i = 0\n    while i < #a do\n      if string.find(b, a[i], 1, true) then\n  \
    \      return true\n      end\n      i = i + 1\n    end\n    return false\n  end\n\
    \  local function sub2(a, b)\n    local i = 0\n    while i < #a do\n      if string.find(b,\
    \ a[i], 1, true) then\n        return true\n      end\n      i = i + 1\n    end\n\
    \    return false\n  end\n  local function sub3(a, b)\n    local i = 0\n    while\
    \ i < #a do\n      if string.find(b, a[i], 1, true) then\n        return true\n\
    \      end\n      i = i + 1\n    end\n    return false\n  end\n  local function\
    \ sub4(a, b)\n    local i = 0\n    while i < #a do\n      if string.find(b, a[i],\
    \ 1, true) then\n        return true\n      end\n      i = i + 1\n    end\n  \
    \  return false\n  end\n  local function sub5(a, b)\n    local i = 0\n    while\
    \ i < #a do\n      if string.find(b, a[i], 1, true) then\n        return true\n\
    \      end\n      i = i + 1\n    end\n    return false\n  end\n  local function\
    \ sub6(a, b)\n    local i = 0\n    while i < #a do\n      if string.find(b, a[i],\
    \ 1, true) then\n        return true\n      end\n      i = i + 1\n    end\n  \
    \  return false\n  end\n  local function sub7(a, b)\n    local i = 0\n    while\
    \ i < #a do\n      if string.find(b, a[i], 1, true) then\n        return true\n\
    \      end\n      i = i + 1\n    end\n    return false\n  end\n  local function\
    \ sub8(a, b)\n    local i = 0\n    while i < #a do\n      if string.find(b, a[i],\
    \ 1, true) then\n        return true\n      end\n      i = i + 1\n    end\n  \
    \  return false\n  end\n  local function sub9(a, b)\n    local i = 0\n    while\
    \ i < #a do\n      if string.find(b, a[i], 1, true) then\n        return true\n\
    \      end\n      i = i + 1\n    end\n    return false\n  end\n  local ", "  local\
    \ function helper(w, i)\n    if i == #w then\n      return true\n    end\n   \
    \ if w[i] == b or w[i] == b..'a' then\n      return helper(w, i + 1)\n    end\n\
    \    return helper(w, i + 1)\n  end\n  return helper(a, b)\nend", "  local function\
    \ is_substring_of_a(c)\n    return a:sub(1, #c) == c\n  end\n  local function\
    \ is_substring_of_a_or_rotated_b(c)\n    return is_substring_of_a(c) or a:sub(1,\
    \ #c) == c:reverse()\n  end\n  local function is_substring_of_a_or_rotated_b(c)\n\
    \    return is_substring_of_a(c) or a:sub(1, #c) == c:reverse()\n  end\n  local\
    \ function is_substring_of_a_or_rotated_b(c)\n    return is_substring_of_a(c)\
    \ or a:sub(1, #c) == c:reverse()\n  end\n  local function is_substring_of_a_or_rotated_b(c)\n\
    \    return is_substring_of_a(c) or a:sub(1, #c) == c:reverse()\n  end\n  local\
    \ function is_substring_of_a_or_rotated_b(c)\n    return is_substring_of_a(c)\
    \ or a:sub(1, #c) == c:reverse()\n  end\n  local function is_substring_of_a_or_rotated_b(c)\n\
    \    return is_substring_of_a(c) or a:sub(1, #c) == c:reverse()\n  end\n  local\
    \ function is_substring_of_a_or_rotated_b(c)\n    return is_substring_of_a(c)\
    \ or a:sub(1, #c) == c:reverse()\n  end\n  local function is_substring_of_a_or_rotated_b(c)\n\
    \    return is_substring_of_a(c) or a:sub(1, #c) == c:reverse()\n  end\n  local\
    \ function is_substring_of_a_or_rotated_b(c)\n    return is_substring_of_a(c)\
    \ or a:sub(1, #c) == c:reverse()\n  end\n  local function is_substring_of_a_or_rotated_b(c)\n\
    \    return is_substring_of_a(c) or a:sub(1, #c) == c:reverse()\n  end\n  local\
    \ function is_substring_of_a_or_rotated_b(c)\n    return is_substring_of_a(c)\
    \ or a:sub(1, #c) == c:reverse()\n  end\n  local function is_substring_of_a_or_rotated_b(c)\n\
    \    return is_substring_of_a(c) or a:sub(1, #c) == c:reverse()\n  end\n  local\
    \ function is_substring_of_a_or_rotated_b(c)\n    return is_substring_of_a(c)\
    \ or a:sub(1, #c) == c:reverse()\n  end\n  local function is_substring_of_a_or_rotated_b(c)\n\
    \    return is_substring_of_a(c) or a:sub(1, #c) == c:reverse()\n  end\n  local\
    \ function is_substring_of_a_or_rotated_b(c)\n    return ", "    local function\
    \ is_substring_helper(str, pattern)\n        -- if pattern is empty or pattern\
    \ is nil then return true\n        if pattern == '' or pattern == nil then\n \
    \           return true\n        end", "  local function is_substring(cycle, word)\n\
    \    return #cycle > 0 and #word > 0 and cycle[1] == word[1]\n  end\n  local function\
    \ is_rotated_substring(cycle, word)\n    return #cycle > 0 and #word > 0 and cycle[2]\
    \ == word[2] and cycle[1] == word[1]\n  end\n  local function is_substring_of_rotated_substring(cycle,\
    \ word)\n    return #cycle > 0 and #word > 0 and cycle[1] == word[1] and cycle[2]\
    \ == word[2]\n  end\n  local function is_substring_of_rotated_substring_of_rotated_substring(cycle,\
    \ word)\n    return #cycle > 0 and #word > 0 and cycle[1] == word[1] and cycle[2]\
    \ == word[2] and cycle[3] == word[3]\n  end\n  local function is_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring(cycle,\
    \ word)\n    return #cycle > 0 and #word > 0 and cycle[1] == word[1] and cycle[2]\
    \ == word[2] and cycle[3] == word[3] and cycle[4] == word[4]\n  end\n  local function\
    \ is_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring(cycle,\
    \ word)\n    return #cycle > 0 and #word > 0 and cycle[1] == word[1] and cycle[2]\
    \ == word[2] and cycle[3] == word[3] and cycle[4] == word[4] and cycle[5] == word[5]\n\
    \  end\n  local function is_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring(cycle,\
    \ word)\n    return #cycle > 0 and #word > 0 and cycle[1] == word[1] and cycle[2]\
    \ == word[2] and cycle[3] == word[3] and cycle[4] == word[4] and cycle[5] == word[5]\
    \ and cycle[6] == word[6]\n  end\n  local function is_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring(cycle,\
    \ word)\n    return #cycle > 0 and #word > 0 and cycle[1] == word[1] and cycle[2]\
    \ == word[2] and cycle[3] == word[3] and cycle[4] == word[4] and cycle[5] == word[5]\
    \ and cycle[6] == word[6] and cycle[7] == word[7]\n  end\n  local function is_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring(cycle,\
    \ word)\n    return #cycle > 0 and #word > 0 and ", "  local function helper(w,\
    \ i)\n    if i == #w then\n      return true\n    end\n    if w[i] == a then\n\
    \      return helper(w, i + 1)\n    end\n    if w[i] == b then\n      return helper(w,\
    \ i - 1)\n    end\n    return false\n  end\n  return helper(a, b)\nend", "  local\
    \ function is_substr_or_rotation(w, s)\n    return #w > 0 and #s > 0 and #w ==\
    \ #s and string.find(w, s, 1, true) or false\n  end\n  local function is_substr_or_rotations(w,\
    \ s)\n    return #w > 0 and #s > 0 and #w == #s and string.find(w, s, 1, true)\
    \ or false\n  end\n  local function is_rotation(w, s)\n    return #w > 0 and #s\
    \ > 0 and #w == #s and string.find(w, s, 1, true) or false\n  end\n  local function\
    \ is_rotations(w, s)\n    return #w > 0 and #s > 0 and #w == #s and string.find(w,\
    \ s, 1, true) or false\n  end\n  local function is_substr_or_rotation(w, s)\n\
    \    return #w > 0 and #s > 0 and #w == #s and string.find(w, s, 1, true) or false\n\
    \  end\n  local function is_substr_or_rotations(w, s)\n    return #w > 0 and #s\
    \ > 0 and #w == #s and string.find(w, s, 1, true) or false\n  end\n  local function\
    \ is_rotation(w, s)\n    return #w > 0 and #s > 0 and #w == #s and string.find(w,\
    \ s, 1, true) or false\n  end\n  local function is_rotations(w, s)\n    return\
    \ #w > 0 and #s > 0 and #w == #s and string.find(w, s, 1, true) or false\n  end\n\
    \  local function is_substr_or_rotation(w, s)\n    return #w > 0 and #s > 0 and\
    \ #w == #s and string.find(w, s, 1, true) or false\n  end\n  local function is_substr_or_rotations(w,\
    \ s)\n    return #w > 0 and #s > 0 and #w == #s and string.find(w, s, 1, true)\
    \ or false\n  end\n  local function is_rotation(w, s)\n    return #w > 0 and #s\
    \ > 0 and #w == #s and string.find(w, s, 1, true) or false\n  end\n  local function\
    \ is_rotations(w, s)\n    return #w > 0 and #s > 0 and #w == #s and string.find(w,\
    \ s, 1, true) or false\n  end\n  local function is_substr_or_rotation(w, s)\n\
    \    return #w > 0 and #s > 0 and #w == #s and string.find(w, s, 1, true) or false\n\
    \  end\n  local function is_substr_or_rotations(w, s)\n    return #w > 0 and #s\
    \ > 0 and #w == #s and string.find(w, s, 1, true) or false\n  end\n  local function\
    \ is_rotation(w, s)\n    return #w > 0 and #s > 0 and #w == #s and string.find(w,\
    \ s, ", "  local function is_substring_of(a, b)\n    for i = 1, #a do\n      if\
    \ string.find(b, a) then\n        return true\n      end\n    end\n    return\
    \ false\n  end\n  local function is_substring_of_rotation(a, b)\n    for i = 1,\
    \ #a do\n      if string.find(b, a) then\n        return true\n      end\n   \
    \ end\n    return false\n  end\n  local function is_substring_of_rotations(a,\
    \ b, c)\n    for i = 1, #a do\n      if string.find(b, a) then\n        return\
    \ true\n      end\n    end\n    return false\n  end\n  local function is_substring_of_rotations_rotations(a,\
    \ b, c, d)\n    for i = 1, #a do\n      if string.find(b, a) then\n        return\
    \ true\n      end\n    end\n    return false\n  end\n  local function is_substring_of_rotations_rotations_rotations(a,\
    \ b, c, d, e)\n    for i = 1, #a do\n      if string.find(b, a) then\n       \
    \ return true\n      end\n    end\n    return false\n  end\n  local function is_substring_of_rotations_rotations_rotations_rotations(a,\
    \ b, c, d, e, f)\n    for i = 1, #a do\n      if string.find(b, a) then\n    \
    \    return true\n      end\n    end\n    return false\n  end\n  local function\
    \ is_substring_of_rotations_rotations_rotations_rotations_rotations(a, b, c, d,\
    \ e, f, g)\n    for i = 1, #a do\n      if string.find(b, a) then\n        return\
    \ true\n      end\n    end\n    return false\n  end\n  local function is_substring_of_rotations_rotations_rotations_rotations_rotations_rotations(a,\
    \ b, c, d, e, f, g, h)\n    for i = 1, #a do\n      if string.find(b, a) then\n\
    \        return true\n      end\n    end\n    return false\n  end\n  local function\
    \ is_substring_of_rotations_rotations_rotations_rotations_rotations_rotations_rotations(a,\
    \ b, c, d, e, f, g, h, i)\n    for i = 1, #a do\n      if string.find(b, a) then\n\
    \        return true\n      end\n    end\n    return false\n  end\n  local function\
    \ is_substring_of_rotations_rotations_rotations_rotations_rotations_rotations_rotations_rotations(a,\
    \ b, c, d, e, f, g, h, i, j)\n    for i = 1, #a do\n      if string.find(b, a)\
    \ then\n        return true\n      end\n    end\n    return false\n  end\n  local\
    \ function is_substring_of_rotations_rotations_rotations_rotations_rotations_rotations_rotations_rotations_rotations(a,\
    \ b, c, d, e, f, g, h, i, ", "  local function substr_check(s, t)\n    return\
    \ string.find(s, t) ~= nil\n  end\n  local function rotated_check(s, t)\n    local\
    \ function rotated_find(s, t)\n      local function rotated_find(s, t)\n     \
    \   local function rotated_find(s, t)\n          local function rotated_find(s,\
    \ t)\n            local function rotated_find(s, t)\n              local function\
    \ rotated_find(s, t)\n                local function rotated_find(s, t)\n    \
    \              local function rotated_find(s, t)\n                    local function\
    \ rotated_find(s, t)\n                      local function rotated_find(s, t)\n\
    \                        local function rotated_find(s, t)\n                 \
    \         local function rotated_find(s, t)\n                            local\
    \ function rotated_find(s, t)\n                              local function rotated_find(s,\
    \ t)\n                                local function rotated_find(s, t)\n    \
    \                              local function rotated_find(s, t)\n           \
    \                         local function rotated_find(s, t)\n                \
    \                      local function rotated_find(s, t)\n                   \
    \                     local function rotated_find(s, t)\n                    \
    \                      local function rotated_find(s, t)\n                   \
    \                         local function rotated_find(s, t)\n                \
    \                              local function rotated_find(s, t)\n           \
    \                                     local function rotated_find(s, t)\n    \
    \                                              local function rotated_find(s,\
    \ t)\n                                                    local function rotated_find(s,\
    \ t)\n                                                      local function rotated_find(s,\
    \ t)\n                                                        local function rotated_find(s,\
    \ t)\n                                                          local function\
    \ rotated_find(s, t)\n                                                       \
    \     local function rotated_find(s, t)\n                                    \
    \                          local function rotated_find(s, t)\n               \
    \                                                 local function rotated_find(s,\
    \ t)\n                                                                  local\
    \ function rotated_find(s, t)\n                                              \
    \                      local function rotated_find(s, t)\n                   \
    \                                                   return string.find(s, t) ~=\
    \ nil\n                                                                  end\n\
    \                                                                end\n       \
    \                                                       end\n                \
    \                                            end\n                           \
    \                               end\n                                        \
    \                end\n                                                      end\n\
    \                                                    end\n                   \
    \                               end\n                                        \
    \        end\n                                              end\n            \
    \                                end\n                                       \
    \   end\n                                        end\n                       \
    \               end\n                                    end\n               \
    \                   end\n                                end\n               \
    \               end\n                            end\n                       \
    \   end\n                        end\n                      end\n            \
    \        end\n                  end\n                end\n              end\n\
    \            end\n          end\n        end\n      end\n    end\n  end\n  local\
    \ function rotated_find(s, t)\n    local function rotated_find(s, t)\n      local\
    \ function rotated_find(s, t)\n        local function rotated_find(s, t)\n   \
    \       local function rotated_find(s, t)\n            local function rotated_find(s,\
    \ t)\n              local function rotated_find(s, t)\n                local function\
    \ rotated_find(s, t)\n                  local function rot", "  local function\
    \ is_substring(cycle, word)\n    local function is_substring_aux(word, index,\
    \ pattern)\n      if word == pattern then\n        return true\n      elseif index\
    \ == #word then\n        return false\n      else\n        return is_substring_aux(word,\
    \ index + 1, pattern) or is_substring_aux(word, index + 1, word .. pattern)\n\
    \      end\n    end\n    return is_substring_aux(word, 1, a)\n  end\n  return\
    \ is_substring(b, 1, a)\nend", "  local function is_substring(cycle, word)\n \
    \   local pattern = string.sub(cycle, 1, #word)\n    local pattern = string.gsub(pattern,\
    \ \"%a\", word)\n    local pattern = string.gsub(pattern, \"%b\", word)\n    local\
    \ pattern = string.gsub(pattern, \"%c\", word)\n    local pattern = string.gsub(pattern,\
    \ \"%d\", word)\n    local pattern = string.gsub(pattern, \"%e\", word)\n    local\
    \ pattern = string.gsub(pattern, \"%f\", word)\n    local pattern = string.gsub(pattern,\
    \ \"%g\", word)\n    local pattern = string.gsub(pattern, \"%h\", word)\n    local\
    \ pattern = string.gsub(pattern, \"%i\", word)\n    local pattern = string.gsub(pattern,\
    \ \"%j\", word)\n    local pattern = string.gsub(pattern, \"%k\", word)\n    local\
    \ pattern = string.gsub(pattern, \"%l\", word)\n    local pattern = string.gsub(pattern,\
    \ \"%m\", word)\n    local pattern = string.gsub(pattern, \"%n\", word)\n    local\
    \ pattern = string.gsub(pattern, \"%o\", word)\n    local pattern = string.gsub(pattern,\
    \ \"%p\", word)\n    local pattern = string.gsub(pattern, \"%q\", word)\n    local\
    \ pattern = string.gsub(pattern, \"%r\", word)\n    local pattern = string.gsub(pattern,\
    \ \"%s\", word)\n    local pattern = string.gsub(pattern, \"%t\", word)\n    local\
    \ pattern = string.gsub(pattern, \"%u\", word)\n    local pattern = string.gsub(pattern,\
    \ \"%v\", word)\n    local pattern = string.gsub(pattern, \"%w\", word)\n    local\
    \ pattern = string.gsub(pattern, \"%x\", word)\n    local pattern = string.gsub(pattern,\
    \ \"%y\", word)\n    local pattern = string.gsub(pattern, \"%z\", word)\n    local\
    \ pattern = string.gsub(pattern, \"%A\", word)\n    local pattern = string.gsub(pattern,\
    \ \"%B\", word)\n    local pattern = string.gsub(pattern, \"%C\", word)\n    local\
    \ pattern = string.gsub(pattern, \"%D\", word)\n    local pattern = string.gsub(pattern,\
    \ \"%E\", word)\n    local pattern = string.gsub(pattern, \"%F\", word)\n    local\
    \ pattern = string.gsub(pattern, \"%G\", word)\n    local pattern = string.gsub(pattern,\
    \ \"%H\", word)\n    local pattern = string.gsub(pattern, \"%I\", word)\n    local\
    \ pattern = string.gsub(pattern, \"", "  local function helper(w, i)\n    if i\
    \ == #w then\n      return true\n    end\n    if w[i] == a then\n      return\
    \ helper(w, i + 1)\n    end\n    if w[i] == b then\n      return helper(w, i -\
    \ 1)\n    end\n    return helper(w, i - 1) or helper(w, i + 1)\n  end\n  return\
    \ helper(a, b)\nend", "  local function is_substring_helper(str, substr)\n   \
    \ if str == nil then return false end\n    if substr == nil then return true end\n\
    \    if str:len() < substr:len() then return false end\n    for i = 1, str:len()\
    \ do\n      if str:sub(i, i) ~= substr:sub(i - 1, i) then return false end\n \
    \   end\n    return true\n  end\n  return is_substring_helper(a, sub) and is_substring_helper(b,\
    \ sub)\nend", "  local function substr_check(s, t)\n    local function rotated_check(s,\
    \ t)\n      local function rotated_check(s, t)\n        local function rotated_check(s,\
    \ t)\n          local function rotated_check(s, t)\n            local function\
    \ rotated_check(s, t)\n              local function rotated_check(s, t)\n    \
    \            local function rotated_check(s, t)\n                  local function\
    \ rotated_check(s, t)\n                    local function rotated_check(s, t)\n\
    \                      local function rotated_check(s, t)\n                  \
    \      local function rotated_check(s, t)\n                          local function\
    \ rotated_check(s, t)\n                            local function rotated_check(s,\
    \ t)\n                              local function rotated_check(s, t)\n     \
    \                           local function rotated_check(s, t)\n             \
    \                     local function rotated_check(s, t)\n                   \
    \                 local function rotated_check(s, t)\n                       \
    \               local function rotated_check(s, t)\n                         \
    \               local function rotated_check(s, t)\n                         \
    \                 local function rotated_check(s, t)\n                       \
    \                     local function rotated_check(s, t)\n                   \
    \                           local function rotated_check(s, t)\n             \
    \                                   local function rotated_check(s, t)\n     \
    \                                             local function rotated_check(s,\
    \ t)\n                                                    local function rotated_check(s,\
    \ t)\n                                                      local function rotated_check(s,\
    \ t)\n                                                        local function rotated_check(s,\
    \ t)\n                                                          local function\
    \ rotated_check(s, t)\n                                                      \
    \      local function rotated_check(s, t)\n                                  \
    \                            local function rotated_check(s, t)\n            \
    \                                                    local function rotated_check(s,\
    \ t)\n                                                                  local\
    \ function rotated_check(s, t)\n                                             \
    \                       local function rotated_check(s, t)\n                 \
    \                                                   local function rotated_check(s,\
    \ t)\n                                                                    local\
    \ function rotated_check(s, t)\n                                             \
    \                       local function rotated_check(s, t)\n                 \
    \                                                   local function rotated_check(s,\
    \ t)\n                                                                    local\
    \ function rotated_check(s, t)\n                                             \
    \                       local function rotated_check(s, t)\n                 \
    \                                                   local function rotated_check(s,\
    \ t)\n                                                                    local\
    \ function rotated_check(s, t)\n                                             \
    \                       local function rotated_check(s, t)\n                 \
    \                                                   local function rotated_check(s,\
    \ t)\n                                                                    local\
    \ function rotated_check(s, t)\n                                             \
    \                       local function rotated_check(s, t)\n                 \
    \                                                   local function rotated_check(s,\
    \ t)\n                                                                    local\
    \ function rotated_check(s, t)\n                                             \
    \                       local function rotated_check(s, t)\n                 \
    \                                                   local function rotated_check(s,\
    \ t)\n                                                                    local\
    \ function rotated_check(s, t)\n                                             \
    \                       local function rotated_check(s, t)\n                 \
    \                                                   local function rotated_check(s,\
    \ t)\n                                                                    local\
    \ function rotated_check(s, t)\n                                             \
    \                       local function rot", "  local function is_substring_of_a(b)\n\
    \    local function is_substring_of_a_aux(str, substr)\n      if str == nil then\n\
    \        return false\n      end\n      if substr == nil then\n        return\
    \ true\n      end\n      if str:sub(1, #substr) == substr then\n        return\
    \ is_substring_of_a_aux(str:sub((#str + 1), #str), substr)\n      end\n      return\
    \ false\n    end\n    return is_substring_of_a_aux(a, b)\n  end\n  return is_substring_of_a(b)\n\
    end", "  local function is_substring(cycle, word)\n    if cycle == 0 then\n  \
    \    return true\n    end\n    if cycle == 1 then\n      return word == a\n  \
    \  end\n    return word == a or word == b:sub(1, cycle - 1) or is_substring(cycle\
    \ - 1, b:sub(cycle - 1, cycle))\n  end\n  return is_substring(2, a)\nend", " \
    \ local function is_substring_helper(str, substr)\n    local function helper(str,\
    \ substr)\n      if str == nil then\n        return false\n      elseif substr\
    \ == nil then\n        return true\n      elseif str:len() < substr:len() then\n\
    \        return false\n      elseif str:len() > substr:len() then\n        return\
    \ true\n      elseif str:sub(1, substr:len()) == substr then\n        return helper(str:sub(substr:len()),\
    \ substr)\n      else\n        return false\n      end\n    end\n    return helper(str,\
    \ substr)\n  end\n  return is_substring_helper(a, b) ~= nil\nend", "  local function\
    \ is_substring_helper(substr, str, i, j)\n    if j > #str then\n      return false\n\
    \    end\n    if i >= j then\n      return true\n    end\n    if substr == str\
    \ then\n      return true\n    end\n    return is_substring_helper(substr, str,\
    \ i + 1, j) or is_substring_helper(substr, str, i, j - 1)\n  end\n  return is_substring_helper(b,\
    \ a, 1, #a)\nend", "  local function substr_check(a, b)\n    if a == nil then\n\
    \      return false\n    end\n    if b == nil then\n      return false\n    end\n\
    \    if #a > #b then\n      return false\n    end\n    for i = 1, #a do\n    \
    \  if string.sub(a, b, i) == a then\n        return true\n      end\n    end\n\
    \    return false\n  end\n  local function rotated_check(a, b)\n    if a == nil\
    \ then\n      return false\n    end\n    if b == nil then\n      return false\n\
    \    end\n    if #a > #b then\n      return false\n    end\n    for i = 1, #a\
    \ do\n      if string.sub(a, b, -i) == a then\n        return true\n      end\n\
    \    end\n    return false\n  end\n  if a == nil then\n    return false\n  end\n\
    \  if b == nil then\n    return false\n  end\n  if #a > #b then\n    return false\n\
    \  end\n  if substr_check(a, b) then\n    return true\n  end\n  if rotated_check(a,\
    \ b) then\n    return true\n  end\n  return false\nend", "  local function is_substring_of_word(word,\
    \ pattern)\n    local pattern = string.gsub(pattern, \"%w+\", function (c)\n \
    \     return string.sub(c, string.len(\"%w\"))\n    end)\n    local pattern =\
    \ string.gsub(pattern, \"%w+$\", \"\")\n    return string.find(word, pattern,\
    \ 1, true) ~= nil\n  end\n  local function is_substring_of_word_in_word(word,\
    \ pattern)\n    local pattern = string.gsub(pattern, \"%w+\", function (c)\n \
    \     return string.sub(c, string.len(\"%w\"))\n    end)\n    local pattern =\
    \ string.gsub(pattern, \"%w+$\", \"\")\n    return string.find(word, pattern,\
    \ 1, true) ~= nil\n  end\n  local function is_substring_of_word_in_pattern(word,\
    \ pattern)\n    local pattern = string.gsub(pattern, \"%w+\", function (c)\n \
    \     return string.sub(c, string.len(\"%w\"))\n    end)\n    local pattern =\
    \ string.gsub(pattern, \"%w+$\", \"\")\n    return string.find(pattern, word,\
    \ 1, true) ~= nil\n  end\n  local function is_substring_of_word_in_pattern_and_word(word,\
    \ pattern)\n    local pattern = string.gsub(pattern, \"%w+\", function (c)\n \
    \     return string.sub(c, string.len(\"%w\"))\n    end)\n    local pattern =\
    \ string.gsub(pattern, \"%w+$\", \"\")\n    return string.find(pattern, word,\
    \ 1, true) ~= nil\n  end\n  local function is_substring_of_pattern_and_word(word,\
    \ pattern)\n    local pattern = string.gsub(pattern, \"%w+\", function (c)\n \
    \     return string.sub(c, string.len(\"%w\"))\n    end)\n    local pattern =\
    \ string.gsub(pattern, \"%w+$\", \"\")\n    return string.find(pattern, word,\
    \ 1, true) ~= nil\n  end\n  local function is_substring_of_pattern_and_word_in_word(word,\
    \ pattern)\n    local pattern = string.gsub(pattern, \"%w+\", function (c)\n \
    \     return string.sub(c, string.len(\"%w\"))\n    end)\n    local pattern =\
    \ string.gsub(pattern, \"%w+$\", \"\")\n    return string.find(word, pattern,\
    \ 1, true) ~= nil\n  end\n  local function is_substring_of_pattern_and_word_in_pattern(word,\
    \ pattern)\n    local pattern = string.gsub(pattern, \"%w+\", function (c)\n \
    \     return string.sub(c, string.len(\"%w\"))\n    end)\n    local pattern =\
    \ string.gsub(pattern, \"%w+$\", \"\")\n    return string.find(pattern, word,\
    \ 1, true) ~= nil\n  end\n  local function is_", "  local function is_substring(cycle,\
    \ word)\n    local function is_substring_aux(word, i, j)\n      if i == j or word\
    \ == nil then\n        return true\n      elseif i == j then\n        return false\n\
    \      else\n        return word[i] ~= nil and word[i] ~= cycle[i] and is_substring_aux(word,\
    \ i + 1, j - 1)\n      end\n    end\n    return is_substring_aux(word, 1, #word)\n\
    \  end\n  return is_substring(a, b) or is_substring(b, a)\nend", "  local function\
    \ is_substring_helper(str, substr)\n    return str:sub(1, #substr) == substr\n\
    \  end\n  local function is_substring_helper2(str, substr)\n    return str:find(substr)\
    \ ~= nil\n  end\n  local function is_substring_helper3(str, substr)\n    return\
    \ str:find(substr, 1, #str) ~= nil\n  end\n  local function is_substring_helper4(str,\
    \ substr)\n    return str:find(substr, 1, #str) ~= nil\n  end\n  local function\
    \ is_substring_helper5(str, substr)\n    return str:find(substr, 1, #str) ~= nil\n\
    \  end\n  local function is_substring_helper6(str, substr)\n    return str:find(substr,\
    \ 1, #str) ~= nil\n  end\n  local function is_substring_helper7(str, substr)\n\
    \    return str:find(substr, 1, #str) ~= nil\n  end\n  local function is_substring_helper8(str,\
    \ substr)\n    return str:find(substr, 1, #str) ~= nil\n  end\n  local function\
    \ is_substring_helper9(str, substr)\n    return str:find(substr, 1, #str) ~= nil\n\
    \  end\n  local function is_substring_helper10(str, substr)\n    return str:find(substr,\
    \ 1, #str) ~= nil\n  end\n  local function is_substring_helper11(str, substr)\n\
    \    return str:find(substr, 1, #str) ~= nil\n  end\n  local function is_substring_helper12(str,\
    \ substr)\n    return str:find(substr, 1, #str) ~= nil\n  end\n  local function\
    \ is_substring_helper13(str, substr)\n    return str:find(substr, 1, #str) ~=\
    \ nil\n  end\n  local function is_substring_helper14(str, substr)\n    return\
    \ str:find(substr, 1, #str) ~= nil\n  end\n  local function is_substring_helper15(str,\
    \ substr)\n    return str:find(substr, 1, #str) ~= nil\n  end\n  local function\
    \ is_substring_helper16(str, substr)\n    return str:find(substr, 1, #str) ~=\
    \ nil\n  end\n  local function is_substring_helper17(str, substr)\n    return\
    \ str:find(substr, 1, #str) ~= nil\n  end\n  local function is_substring_helper18(str,\
    \ substr)\n    return str:find(substr, 1, #str) ~= nil\n  end\n  local function\
    \ is_substring_helper19(str, substr)\n    return str:find(substr, 1, #str) ~",
  "  local function rotation(s, e)\n    return string.sub(s, 1, e) .. string.sub(string.sub(s,1,e),\
    \ e)\n  end\n  local function rotations2(s, e)\n    local ret = {}\n    for i\
    \ = 1, e do\n      ret[#ret+1] = rotation(s, i)\n    end\n    return ret\n  end\n\
    \  local function rotations3(s, e)\n    local ret = {}\n    for i = 1, e do\n\
    \      ret[#ret+1] = rotation(s, i)\n      ret[#ret+1] = rotation(ret[#ret+1],\
    \ i)\n    end\n    return ret\n  end\n  local function rotations4(s, e)\n    local\
    \ ret = {}\n    for i = 1, e do\n      ret[#ret+1] = rotation(s, i)\n      ret[#ret+1]\
    \ = rotation(ret[#ret+1], i)\n      ret[#ret+1] = rotation(ret[#ret+1], i)\n \
    \   end\n    return ret\n  end\n  local function rotations5(s, e)\n    local ret\
    \ = {}\n    for i = 1, e do\n      ret[#ret+1] = rotation(s, i)\n      ret[#ret+1]\
    \ = rotation(ret[#ret+1], i)\n      ret[#ret+1] = rotation(ret[#ret+1], i)\n \
    \     ret[#ret+1] = rotation(ret[#ret+1], i)\n    end\n    return ret\n  end\n\
    \  local function rotations6(s, e)\n    local ret = {}\n    for i = 1, e do\n\
    \      ret[#ret+1] = rotation(s, i)\n      ret[#ret+1] = rotation(ret[#ret+1],\
    \ i)\n      ret[#ret+1] = rotation(ret[#ret+1], i)\n      ret[#ret+1] = rotation(ret[#ret+1],\
    \ i)\n      ret[#ret+1] = rotation(ret[#ret+1], i)\n    end\n    return ret\n\
    \  end\n  local function rotations7(s, e)\n    local ret = {}\n    for i = 1,\
    \ e do\n      ret[#ret+1] = rotation(s, i)\n      ret[#ret+1] = rotation(ret[#ret+1],\
    \ i)\n      ret[#ret+1] = rotation(ret[#ret+1], i)\n      ret[#ret+1] = rotation(ret[#ret+1],\
    \ i)\n      ret[#ret+1] = rotation(ret[#ret+1], i)\n      ret[#ret+1] = rotation(ret[#ret+1],\
    \ i)\n    end\n", "  local function substr_check(s, t)\n    return string.find(s,\
    \ t) ~= nil\n  end\n  local function rotated_check(s, t)\n    local function rotated_find(s,\
    \ t)\n      local function rotated_find(s, t)\n        local function rotated_find(s,\
    \ t)\n          local function rotated_find(s, t)\n            local function\
    \ rotated_find(s, t)\n              local function rotated_find(s, t)\n      \
    \          local function rotated_find(s, t)\n                  local function\
    \ rotated_find(s, t)\n                    local function rotated_find(s, t)\n\
    \                      local function rotated_find(s, t)\n                   \
    \     local function rotated_find(s, t)\n                          local function\
    \ rotated_find(s, t)\n                            local function rotated_find(s,\
    \ t)\n                              local function rotated_find(s, t)\n      \
    \                          local function rotated_find(s, t)\n               \
    \                   local function rotated_find(s, t)\n                      \
    \              local function rotated_find(s, t)\n                           \
    \           local function rotated_find(s, t)\n                              \
    \          local function rotated_find(s, t)\n                               \
    \           local function rotated_find(s, t)\n                              \
    \              local function rotated_find(s, t)\n                           \
    \                   local function rotated_find(s, t)\n                      \
    \                          local function rotated_find(s, t)\n               \
    \                                   local function rotated_find(s, t)\n      \
    \                                              local function rotated_find(s,\
    \ t)\n                                                      local function rotated_find(s,\
    \ t)\n                                                        local function rotated_find(s,\
    \ t)\n                                                          local function\
    \ rotated_find(s, t)\n                                                       \
    \     local function rotated_find(s, t)\n                                    \
    \                          local function rotated_find(s, t)\n               \
    \                                                 local function rotated_find(s,\
    \ t)\n                                                                  local\
    \ function rotated_find(s, t)\n                                              \
    \                      local function rotated_find(s, t)\n                   \
    \                                                   return string.find(s, t) ~=\
    \ nil\n                                                                  end\n\
    \                                                                end\n       \
    \                                                       end\n                \
    \                                            end\n                           \
    \                               end\n                                        \
    \                end\n                                                      end\n\
    \                                                    end\n                   \
    \                               end\n                                        \
    \        end\n                                              end\n            \
    \                                end\n                                       \
    \   end\n                                        end\n                       \
    \               end\n                                    end\n               \
    \                   end\n                                end\n               \
    \               end\n                            end\n                       \
    \   end\n                        end\n                      end\n            \
    \        end\n                  end\n                end\n              end\n\
    \            end\n          end\n        end\n      end\n    end\n  end\n  return\
    \ string.find(a, b) ~= nil or string.find(b, a) ~= nil or string.find(a, a) ~=\
    \ nil or string.find(b, a) ~= nil or string.find(a, b) ~= nil or string.find(b,\
    \ a) ~= nil or string.find(a, a) ~= nil or string.find(b, a) ~= nil or string.find(a, ",
  "  local function substr_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n\
    \  local function rotate_check(s, t)\n    local function rotate(s, t)\n      local\
    \ function rotation(s, t)\n        local function rotation(s, t)\n          local\
    \ function rotation(s, t)\n            local function rotation(s, t)\n       \
    \       local function rotation(s, t)\n                local function rotation(s,\
    \ t)\n                  local function rotation(s, t)\n                    local\
    \ function rotation(s, t)\n                      local function rotation(s, t)\n\
    \                        local function rotation(s, t)\n                     \
    \     local function rotation(s, t)\n                            local function\
    \ rotation(s, t)\n                              local function rotation(s, t)\n\
    \                                local function rotation(s, t)\n             \
    \                     local function rotation(s, t)\n                        \
    \            local function rotation(s, t)\n                                 \
    \     local function rotation(s, t)\n                                        local\
    \ function rotation(s, t)\n                                          local function\
    \ rotation(s, t)\n                                            local function rotation(s,\
    \ t)\n                                              local function rotation(s,\
    \ t)\n                                                local function rotation(s,\
    \ t)\n                                                  local function rotation(s,\
    \ t)\n                                                    local function rotation(s,\
    \ t)\n                                                      local function rotation(s,\
    \ t)\n                                                        local function rotation(s,\
    \ t)\n                                                          local function\
    \ rotation(s, t)\n                                                           \
    \ local function rotation(s, t)\n                                            \
    \                  local function rotation(s, t)\n                           \
    \                                     local function rotation(s, t)\n        \
    \                                                          local function rotation(s,\
    \ t)\n                                                                    local\
    \ function rotation(s, t)\n                                                  \
    \                  local function rotation(s, t)\n                           \
    \                                         local function rotation(s, t)\n    \
    \                                                                local function\
    \ rotation(s, t)\n                                                           \
    \         local function rotation(s, t)\n                                    \
    \                                local function rotation(s, t)\n             \
    \                                                       local function rotation(s,\
    \ t)\n                                                                    local\
    \ function rotation(s, t)\n                                                  \
    \                  local function rotation(s, t)\n                           \
    \                                         local function rotation(s, t)\n    \
    \                                                                local function\
    \ rotation(s, t)\n                                                           \
    \         local function rotation(s, t)\n                                    \
    \                                local function rotation(s, t)\n             \
    \                                                       local function rotation(s,\
    \ t)\n                                                                    local\
    \ function rotation(s, t)\n                                                  \
    \                  local function rotation(s, t)\n                           \
    \                                         local function rotation(s, t)\n    \
    \                                                                local function\
    \ rotation(s, t)\n                                                           \
    \         local function rotation(s, t)\n                                    \
    \                                local function rotation(s, t)\n             \
    \                                                       local function rotation(s,\
    \ t)\n                                                                    local\
    \ function rotation(s, t)\n                                                  \
    \                  local function rotation(s, t)\n                           \
    \                                         local function rotation(s, t)\n    \
    \                                                                local function\
    \ rotation(s, t)\n                                                           \
    \         local ", "  local function substr_check(s, t)\n    return string.find(s,\
    \ t) ~= nil\n  end\n  local function rotated_check(s, t)\n    local i, j = string.find(s,\
    \ t), string.find(s, t, 1, j+1)\n    if i == nil then\n      return false\n  \
    \  end\n    if j == nil then\n      return true\n    end\n    return string.sub(s,\
    \ i, j) == string.sub(s, j+1, i)\n  end\n  local function rotated_check(s, t)\n\
    \    local i, j = string.find(s, t), string.find(s, t, 1, j+1)\n    if i == nil\
    \ then\n      return false\n    end\n    if j == nil then\n      return true\n\
    \    end\n    return string.sub(s, i, j) == string.sub(s, j+1, i)\n  end\n  local\
    \ function rotated_check(s, t)\n    local i, j = string.find(s, t), string.find(s,\
    \ t, 1, j+1)\n    if i == nil then\n      return false\n    end\n    if j == nil\
    \ then\n      return true\n    end\n    return string.sub(s, i, j) == string.sub(s,\
    \ j+1, i)\n  end\n  local function rotated_check(s, t)\n    local i, j = string.find(s,\
    \ t), string.find(s, t, 1, j+1)\n    if i == nil then\n      return false\n  \
    \  end\n    if j == nil then\n      return true\n    end\n    return string.sub(s,\
    \ i, j) == string.sub(s, j+1, i)\n  end\n  local function rotated_check(s, t)\n\
    \    local i, j = string.find(s, t), string.find(s, t, 1, j+1)\n    if i == nil\
    \ then\n      return false\n    end\n    if j == nil then\n      return true\n\
    \    end\n    return string.sub(s, i, j) == string.sub(s, j+1, i)\n  end\n  local\
    \ function rotated_check(s, t)\n    local i, j = string.find(s, t), string.find(s,\
    \ t, 1, j+1)\n    if i == nil then\n      return false\n    end\n    if j == nil\
    \ then\n      return true\n    end\n    return string.sub(s, i, j) == string.sub(s,\
    \ j+1, i)\n  end\n  local function rotated_check(s, t)\n    local i, j = string.find(s,\
    \ t), string.find(s, t, 1, j+1)\n    if i == nil then\n      return false\n  \
    \  end\n    if j == nil then\n      return true\n    end\n    return string.sub(s,\
    \ i, j) == string.sub(s, j+1, i)\n  end\n  local function rotated_check(s, t)\n\
    \    local i, j = string.find(s, t), string.find(s, t, 1, j+1)\n    if i == nil\
    \ then\n      return false\n    end\n    if j == nil then", "  local function\
    \ find(a, b)\n    local i = 1, #a\n    while i <= #b do\n      if string.sub(a,\
    \ b, i) == a then\n        return i\n      end\n      i = i + 1\n    end\n   \
    \ return nil\n  end\n  local function find(a, b)\n    local i = 1, #a\n    while\
    \ i <= #b do\n      if string.sub(a, b, i) == a then\n        return i\n     \
    \ end\n      i = i + 1\n    end\n    return nil\n  end\n  local function find(a,\
    \ b)\n    local i = 1, #a\n    while i <= #b do\n      if string.sub(a, b, i)\
    \ == a then\n        return i\n      end\n      i = i + 1\n    end\n    return\
    \ nil\n  end\n  local function find(a, b)\n    local i = 1, #a\n    while i <=\
    \ #b do\n      if string.sub(a, b, i) == a then\n        return i\n      end\n\
    \      i = i + 1\n    end\n    return nil\n  end\n  local function find(a, b)\n\
    \    local i = 1, #a\n    while i <= #b do\n      if string.sub(a, b, i) == a\
    \ then\n        return i\n      end\n      i = i + 1\n    end\n    return nil\n\
    \  end\n  local function find(a, b)\n    local i = 1, #a\n    while i <= #b do\n\
    \      if string.sub(a, b, i) == a then\n        return i\n      end\n      i\
    \ = i + 1\n    end\n    return nil\n  end\n  local function find(a, b)\n    local\
    \ i = 1, #a\n    while i <= #b do\n      if string.sub(a, b, i) == a then\n  \
    \      return i\n      end\n      i = i + 1\n    end\n    return nil\n  end\n\
    \  local function find(a, b)\n    local i = 1, #a\n    while i <= #b do\n    \
    \  if string.sub(a, b, i) == a then\n        return i\n      end\n      i = i\
    \ + 1\n    end\n    return nil\n  end\n  local function find(a, b)\n    local\
    \ i = 1, #a\n    while i <= #b do\n      if string.sub(a, b, i) == a then\n  \
    \      return i\n      end\n      i = i + 1\n    end\n    return nil\n  end\n\
    \  local function find(a, b)\n    local i = 1, #a\n    while i <= #b do\n    \
    \  if string.sub(a, b, i) == a then\n        return i\n      end\n      i = i\
    \ + 1\n    end\n    return nil\n  end\n  local function find(a, b)\n    local\
    \ i = 1, #a\n    while i <= #b do\n      if string.sub(a, b, i) == a then\n  \
    \      return i\n      end\n      i = i + 1\n    end\n    return nil\n  end\n\
    \  local function find(a, b)", "  local function is_substring(cycle, word)\n \
    \   local s = string.sub(cycle, word[1], word[2])\n    return s ~= nil and s ~=\
    \ ''\n  end\n  local function is_substring_rotation(cycle, word)\n    local s\
    \ = string.sub(cycle, word[1], word[2])\n    return s ~= nil and s ~= '' and\n\
    \           string.sub(cycle, word[2], word[1]) ~= nil and string.sub(cycle, word[2],\
    \ word[1]) ~= ''\n  end\n  local function is_substring_rotations(cycle, word)\n\
    \    local s = string.sub(cycle, word[1], word[2])\n    return s ~= nil and s\
    \ ~= '' and\n           string.sub(cycle, word[2], word[1]) ~= nil and string.sub(cycle,\
    \ word[2], word[1]) ~= '' and\n           string.sub(cycle, word[1], word[2])\
    \ ~= nil and string.sub(cycle, word[1], word[2]) ~= ''\n  end\n  local function\
    \ is_substring_rotations_rotations(cycle, word)\n    local s = string.sub(cycle,\
    \ word[1], word[2])\n    return s ~= nil and s ~= '' and\n           string.sub(cycle,\
    \ word[2], word[1]) ~= nil and string.sub(cycle, word[2], word[1]) ~= '' and\n\
    \           string.sub(cycle, word[1], word[2]) ~= nil and string.sub(cycle, word[1],\
    \ word[2]) ~= '' and\n           string.sub(cycle, word[2], word[1]) ~= nil and\
    \ string.sub(cycle, word[2], word[1]) ~= ''\n  end\n  local function is_substring_rotations_rotations_rotations(cycle,\
    \ word)\n    local s = string.sub(cycle, word[1], word[2])\n    return s ~= nil\
    \ and s ~= '' and\n           string.sub(cycle, word[2], word[1]) ~= nil and string.sub(cycle,\
    \ word[2], word[1]) ~= '' and\n           string.sub(cycle, word[1], word[2])\
    \ ~= nil and string.sub(cycle, word[1], word[2]) ~= '' and\n           string.sub(cycle,\
    \ word[2], word[1]) ~= nil and string.sub(cycle, word[2], word[1]) ~= '' and\n\
    \           string.sub(cycle, word[1], word[2]) ~= nil and string.sub(cycle, word[1], ",
  "  local function is_sub(pattern, str)\n    pattern = string.gsub(pattern, \"[%z\\\
    1-\\127\\194-\\244\\377]\", \"\")\n    pattern = string.gsub(pattern, \"[%z\\\
    1-\\127\\194-\\244\\377\\177-\\377]\", \"\")\n    pattern = string.gsub(pattern,\
    \ \"[%z\\1-\\127\\194-\\244\\377\\177-\\377\\177-\\377]\", \"\")\n    pattern\
    \ = string.gsub(pattern, \"[%z\\1-\\127\\194-\\244\\377\\177-\\377\\177-\\377\\\
    177-\\377]\", \"\")\n    pattern = string.gsub(pattern, \"[%z\\1-\\127\\194-\\\
    244\\377\\177-\\377\\177-\\377\\177-\\377\\177-\\377]\", \"\")\n    pattern =\
    \ string.gsub(pattern, \"[%z\\1-\\127\\194-\\244\\377\\177-\\377\\177-\\377\\\
    177-\\377\\177-\\377\\177-\\377\\177-\\377]\", \"\")\n    pattern = string.gsub(pattern,\
    \ \"[%z\\1-\\127\\194-\\244\\377\\177-\\377\\177-\\377\\177-\\377\\177-\\377\\\
    177-\\377\\177-\\377\\177-\\377]\", \"\")\n    pattern = string.gsub(pattern,\
    \ \"[%z\\1-\\127\\194-\\244\\377\\177-\\377\\177-\\377\\177-\\377\\177-\\377\\\
    177-\\377\\177-\\377\\177-\\377\\177-\\377]\", \"\")\n    pattern = string.gsub(pattern,\
    \ \"[%z\\1-\\127\\194-\\244\\377\\177-\\377\\177-\\377\\177-\\377\\177-\\377\\\
    177-\\377\\177-\\377\\177-\\377\\177-\\377]\", \"\")\n    pattern = string.gsub(pattern,\
    \ \"[%z\\1-\\127\\194-\\244\\377\\177-\\377\\177-\\377\\177-\\377\\177-\\377\\\
    177-\\377\\177-\\377\\177-\\377\\177-\\377\\177-\\377]\", \"\")\n    pattern =\
    \ string.gsub(pattern, \"[%z\\1-", "  local function is_substring(cycle, word)\n\
    \    local pattern = string.sub(cycle, 1, #word)\n    local index = string.find(a,\
    \ pattern)\n    if index == nil then\n      return false\n    end\n    local rest\
    \ = string.sub(a, index + 1, #a)\n    return is_substring(rest, word)\n  end\n\
    \  return is_substring(b, 1)\nend", "  local function is_substring_of_a(a1, a2)\n\
    \    return a1 ~= nil and a2 ~= nil and a1 ~= a2 and string.find(a1, a2, 1, true)\
    \ ~= nil\n  end\n  local function is_substring_of_a_or_rotated_b(a1, a2)\n   \
    \ return a1 ~= nil and a2 ~= nil and a1 ~= a2 and string.find(a1, a2, 1, true)\
    \ ~= nil\n  end\n  local function is_substring_of_a_or_rotated_b(a1, a2)\n   \
    \ return a1 ~= nil and a2 ~= nil and a1 ~= a2 and string.find(a1, a2, 1, true)\
    \ ~= nil\n  end\n  local function is_substring_of_a_or_rotated_b(a1, a2)\n   \
    \ return a1 ~= nil and a2 ~= nil and a1 ~= a2 and string.find(a1, a2, 1, true)\
    \ ~= nil\n  end\n  local function is_substring_of_a_or_rotated_b(a1, a2)\n   \
    \ return a1 ~= nil and a2 ~= nil and a1 ~= a2 and string.find(a1, a2, 1, true)\
    \ ~= nil\n  end\n  local function is_substring_of_a_or_rotated_b(a1, a2)\n   \
    \ return a1 ~= nil and a2 ~= nil and a1 ~= a2 and string.find(a1, a2, 1, true)\
    \ ~= nil\n  end\n  local function is_substring_of_a_or_rotated_b(a1, a2)\n   \
    \ return a1 ~= nil and a2 ~= nil and a1 ~= a2 and string.find(a1, a2, 1, true)\
    \ ~= nil\n  end\n  local function is_substring_of_a_or_rotated_b(a1, a2)\n   \
    \ return a1 ~= nil and a2 ~= nil and a1 ~= a2 and string.find(a1, a2, 1, true)\
    \ ~= nil\n  end\n  local function is_substring_of_a_or_rotated_b(a1, a2)\n   \
    \ return a1 ~= nil and a2 ~= nil and a1 ~= a2 and string.find(a1, a2, 1, true)\
    \ ~= nil\n  end\n  local function is_substring_of_a_or_rotated_b(a1, a2)\n   \
    \ return a1 ~= nil and a2 ~= nil and a1 ~= a2 and string.find(a1, a2, 1, true)\
    \ ~= nil\n  end\n  local function is_substring_", "    local function is_substring(cycle,\
    \ word)\n        local pattern = string.sub(cycle, 1, #word - 1)\n        return\
    \ string.sub(cycle, 1, #pattern) == pattern\n    end\n    local function is_substring_rotation(cycle,\
    \ word)\n        local pattern = string.sub(cycle, #word + 1, #cycle + 1)\n  \
    \      return string.sub(cycle, #pattern + 1, #cycle + #pattern) == pattern\n\
    \    end\n    local function is_substring_rotations(cycle, word)\n        local\
    \ pattern = string.sub(cycle, #word + 1, #cycle + 1)\n        return string.sub(cycle,\
    \ #pattern + 1, #cycle + #pattern) == pattern and\n               string.sub(cycle,\
    \ 1, #pattern) == pattern\n    end\n    local function is_substring_rotations_rotations(cycle,\
    \ word)\n        local pattern = string.sub(cycle, #word + 1, #cycle + 1)\n  \
    \      return string.sub(cycle, #pattern + 1, #cycle + #pattern) == pattern and\n\
    \               string.sub(cycle, 1, #pattern) == pattern and\n              \
    \ string.sub(cycle, #pattern + 1, #cycle + #pattern) == pattern\n    end\n   \
    \ local function is_substring_rotations_rotations_rotations(cycle, word)\n   \
    \     local pattern = string.sub(cycle, #word + 1, #cycle + 1)\n        return\
    \ string.sub(cycle, #pattern + 1, #cycle + #pattern) == pattern and\n        \
    \       string.sub(cycle, 1, #pattern) == pattern and\n               string.sub(cycle,\
    \ #pattern + 1, #cycle + #pattern) == pattern and\n               string.sub(cycle,\
    \ 1, #pattern) == pattern\n    end\n    local function is_substring_rotations_rotations_rotations_rotations(cycle,\
    \ word)\n        local pattern = string.sub(cycle, #word + 1, #cycle + 1)\n  \
    \      return string.sub(cycle, #pattern + 1, #cycle + #pattern) == pattern and\n\
    \               string.sub(cycle, 1, #pattern) == pattern and\n              \
    \ string.sub(cycle, #pattern + 1, #cycle + #pattern) == pattern and\n        \
    \       string.sub(cycle, 1, #pattern) == pattern and\n               string.sub(cycle,\
    \ #pattern + 1, #cycle + #pattern) == pattern\n    end\n    local function is_substring_rotations_rotations_rotations_rotations_rotations(cycle,\
    \ word)\n        local pattern = string.sub(cycle, #word + 1, #cycle + 1)\n  \
    \      return string.sub(cycle, #pattern + 1, #cycle + #pattern) == pattern and\n\
    \               string.sub(c", "  local function substr_check(s, t)\n    return\
    \ string.find(s, t) ~= nil\n  end\n  local function rotated_check(s, t)\n    local\
    \ i, j = string.find(s, t), string.find(s, t, 1, j - 1)\n    return i ~= nil and\
    \ j ~= nil and string.sub(s, i, j) == t\n  end\n  return substr_check(a, b) or\
    \ rotated_check(a, b)\nend", "    local function helper(str, start, end)\n   \
    \     if start > end then\n            return false\n        end\n        if start\
    \ == end then\n            return true\n        end\n        if start > end then\n\
    \            return false\n        end\n        if start == end then\n       \
    \     return true\n        end\n        if start > end then\n            return\
    \ false\n        end\n        if start == end then\n            return true\n\
    \        end\n        if start > end then\n            return false\n        end\n\
    \        if start == end then\n            return true\n        end\n        if\
    \ start > end then\n            return false\n        end\n        if start ==\
    \ end then\n            return true\n        end\n        if start > end then\n\
    \            return false\n        end\n        if start == end then\n       \
    \     return true\n        end\n        if start > end then\n            return\
    \ false\n        end\n        if start == end then\n            return true\n\
    \        end\n        if start > end then\n            return false\n        end\n\
    \        if start == end then\n            return true\n        end\n        if\
    \ start > end then\n            return false\n        end\n        if start ==\
    \ end then\n            return true\n        end\n        if start > end then\n\
    \            return false\n        end\n        if start == end then\n       \
    \     return true\n        end\n        if start > end then\n            return\
    \ false\n        end\n        if start == end then\n            return true\n\
    \        end\n        if start > end then\n            return false\n        end\n\
    \        if start == end then\n            return true\n        end\n        if\
    \ start > end then\n            return false\n        end\n        if start ==\
    \ end then\n            return true\n        end\n        if start > end then\n\
    \            return false\n        end\n        if start == end then\n       \
    \     return true\n        end\n        if start > end then\n            return\
    \ false\n        end\n        if start == end then\n            return true\n\
    \        end\n        if start > end then\n            return false\n        end\n\
    \        if start == end then\n            return true\n        end\n        if\
    \ start > end then\n            return false\n        end\n        if start ==\
    \ end then\n            return true\n        end\n        if start > end then\n\
    \            return false\n        end\n        if start == end then\n       \
    \     return true\n        end\n        if start > end then\n            return\
    \ false\n        end\n        if start == end then\n            return true\n\
    \        end\n        if start > end then\n            return false\n        end\n\
    \        if start == end then\n            return true\n        end\n        if\
    \ start > end then\n            return false\n        end\n        if start ==\
    \ end then\n            return true\n        end\n        if start > end then\n\
    \            return false\n        end\n        if start == end then\n       \
    \     return true\n        end\n        if start > end then\n            return\
    \ false\n        end\n        if start == end then\n            return true",
  "  local function helper(str, i, j)\n    if i == j then\n      return true\n   \
    \ end\n    if str[i] == b and helper(str, i + 1, j - 1) then\n      return true\n\
    \    end\n    if str[i] == b and helper(str, i + 1, j) then\n      return true\n\
    \    end\n    if str[i] == b and helper(str, i, j - 1) then\n      return true\n\
    \    end\n    return false\n  end\n  return helper(a, b, #a) == true\nend", " \
    \ local function is_substring(cycle, word)\n    local s = string.sub(cycle, 1,\
    \ #word)\n    return string.find(word, s) ~= nil\n  end\n  local function is_rotation(word,\
    \ rotation)\n    local s = string.sub(rotation, 1, #word)\n    return string.find(word,\
    \ s) ~= nil\n  end\n  local function is_substring_or_cyclic_rotation(word, rotation)\n\
    \    return is_substring_or_cyclic_rotation(word, rotation, true)\n  end\n  local\
    \ function is_substring_or_cyclic_rotation(word, rotation, cyclic)\n    local\
    \ s = string.sub(rotation, 1, #word)\n    return string.find(word, s) ~= nil or\n\
    \      (string.find(word, s) ~= nil and is_substring(cycle, word)) or\n      (string.find(word,\
    \ s) ~= nil and is_rotation(word, rotation)) or\n      (string.find(word, s) ~=\
    \ nil and is_substring_or_cyclic_rotation(word, rotation))\n  end\n  return is_substring_or_cyclic_rotation(a,\
    \ b, true)\nend", "  local function helper(str, i, j)\n    if i == j then\n  \
    \    return true\n    end\n    if str[i] == b[j] then\n      return helper(str,\
    \ i + 1, j + 1)\n    end\n    return helper(str, i, j) or helper(str, i + 1, j)\n\
    \  end\n  return helper(a, 1, #b) == true\nend", "    local function helper(str,\
    \ i, j)\n        if i == j then\n            return true\n        end\n      \
    \  if str[i] == b[j] then\n            return helper(str, i + 1, j + 1)\n    \
    \    end\n        return helper(str, i, j) or helper(str, i + 1, j)\n    end\n\
    \    return helper(a, 1, #b) == true\nend", "  local function is_substring_helper(str,\
    \ substr)\n    return str:sub(1, #str) == substr\n  end\n  local function is_substring_recursive(str,\
    \ substr)\n    if #str > #substr then\n      return false\n    end\n    return\
    \ is_substring_helper(str, substr) or is_substring_recursive(str:sub(#str + 1),\
    \ substr)\n  end\n  return is_substring_recursive(a, b) or is_substring_recursive(b,\
    \ a)\nend", "  local function substr_check(s, t)\n    return string.find(s, t)\
    \ ~= nil\n  end\n  local function rotated_check(s, t)\n    local function rotate(s)\n\
    \      local r = string.find(s, '^')\n      if r ~= nil then\n        s = string.sub(s,\
    \ '^', r-1)\n      end\n      local r = string.find(s, '$')\n      if r ~= nil\
    \ then\n        s = string.sub(s, '$', r+1)\n      end\n      return s\n    end\n\
    \    local function rotated_check(s, t)\n      local r = string.find(s, '^')\n\
    \      if r ~= nil then\n        s = string.sub(s, '^', r-1)\n      end\n    \
    \  local r = string.find(s, '$')\n      if r ~= nil then\n        s = string.sub(s,\
    \ '$', r+1)\n      end\n      return s\n    end\n    local function rotated_check(s,\
    \ t)\n      local r = string.find(s, '^')\n      if r ~= nil then\n        s =\
    \ string.sub(s, '^', r-1)\n      end\n      local r = string.find(s, '$')\n  \
    \    if r ~= nil then\n        s = string.sub(s, '$', r+1)\n      end\n      return\
    \ s\n    end\n    local function rotated_check(s, t)\n      local r = string.find(s,\
    \ '^')\n      if r ~= nil then\n        s = string.sub(s, '^', r-1)\n      end\n\
    \      local r = string.find(s, '$')\n      if r ~= nil then\n        s = string.sub(s,\
    \ '$', r+1)\n      end\n      return s\n    end\n    local function rotated_check(s,\
    \ t)\n      local r = string.find(s, '^')\n      if r ~= nil then\n        s =\
    \ string.sub(s, '^', r-1)\n      end\n      local r = string.find(s, '$')\n  \
    \    if r ~= nil then\n        s = string.sub(s, '$', r+1)\n      end\n      return\
    \ s\n    end\n    local function rotated_check(s, t)\n      local r = string.find(s,\
    \ '^')\n      if r ~= nil then\n        s = string.sub(s, '^', r-1)\n      end\n\
    \      local r = string.find(s, '$')\n      if r ~= nil then\n        s = string.sub(s,\
    \ '$', r+1)\n      end\n      return s\n    end\n    local function rotated_check(s,\
    \ t)\n      local r = string.find(s, '^')\n      if r ~= nil then\n        s =\
    \ string.sub(s, '^', r-1)\n      end\n      local r = string.find(s, '$')\n  \
    \    if r ~= nil then\n        s = string.sub(s, '$', r+1)\n      end\n", "  local\
    \ pattern = a:gsub(\"%w+\", function(c)\n    return string.sub(b, c+1, c+2)\n\
    \  end)\n  return string.find(b, pattern) ~= nil\nend", "  local function substr_check(s,\
    \ t)\n    return string.find(s, t) ~= nil\n  end\n  local function rotated_check(s,\
    \ t)\n    local function rotated_find(s, t)\n      local function rotated_find(s,\
    \ t)\n        local function rotated_find(s, t)\n          local function rotated_find(s,\
    \ t)\n            local function rotated_find(s, t)\n              local function\
    \ rotated_find(s, t)\n                local function rotated_find(s, t)\n    \
    \              local function rotated_find(s, t)\n                    local function\
    \ rotated_find(s, t)\n                      local function rotated_find(s, t)\n\
    \                        local function rotated_find(s, t)\n                 \
    \         local function rotated_find(s, t)\n                            local\
    \ function rotated_find(s, t)\n                              local function rotated_find(s,\
    \ t)\n                                local function rotated_find(s, t)\n    \
    \                              local function rotated_find(s, t)\n           \
    \                         local function rotated_find(s, t)\n                \
    \                      local function rotated_find(s, t)\n                   \
    \                     local function rotated_find(s, t)\n                    \
    \                      local function rotated_find(s, t)\n                   \
    \                         local function rotated_find(s, t)\n                \
    \                              local function rotated_find(s, t)\n           \
    \                                     local function rotated_find(s, t)\n    \
    \                                              local function rotated_find(s,\
    \ t)\n                                                    local function rotated_find(s,\
    \ t)\n                                                      local function rotated_find(s,\
    \ t)\n                                                        local function rotated_find(s,\
    \ t)\n                                                          local function\
    \ rotated_find(s, t)\n                                                       \
    \     local function rotated_find(s, t)\n                                    \
    \                          local function rotated_find(s, t)\n               \
    \                                                 local function rotated_find(s,\
    \ t)\n                                                                  local\
    \ function rotated_find(s, t)\n                                              \
    \                      local function rotated_find(s, t)\n                   \
    \                                                   local function rotated_find(s,\
    \ t)\n                                                                       \
    \ local function rotated_find(s, t)\n                                        \
    \                                  local function rotated_find(s, t)\n       \
    \                                                                     local function\
    \ rotated_find(s, t)\n                                                       \
    \                       local function rotated_find(s, t)\n                  \
    \                                                              local function\
    \ rotated_find(s, t)\n                                                       \
    \                           local function rotated_find(s, t)\n              \
    \                                                                      local function\
    \ rotated_find(s, t)\n                                                       \
    \                               local function rotated_find(s, t)\n          \
    \                                                                            \
    \  local function rotated_find(s, t)\n                                       \
    \                                                   local function rotated_find(s,\
    \ t)\n                                                                       \
    \                     local function rotated_find(s, t)\n                    \
    \                                                                          local\
    \ function rotated_find(s, t)\n                                              \
    \                                                  local function rotated_find(s,\
    \ t)\n                                                                       \
    \                           local function rotated_find(s, t)\n              \
    \                                                                            \
    \          local function rotated_find(s, t)\n                               \
    \                                                                       local\
    \ function rotated_find(s, t)\n                                              \
    \                                                          local function rotated_find(s,\
    \ t)\n                                                                       \
    \                                   local function ", "  local function find(a,\
    \ b)\n    local i, j = 1, #a\n    while i <= j do\n      local m = i - j\n   \
    \   if a[i] == b[m] then\n        i = i + 1\n      elseif a[i] > b[m] then\n \
    \       j = j - 1\n      else\n        i = i + 1\n      end\n    end\n    return\
    \ i\n  end\n  local function find(a, b)\n    local i, j = 1, #a\n    while i <=\
    \ j do\n      local m = i - j\n      if a[i] == b[m] then\n        i = i + 1\n\
    \      elseif a[i] < b[m] then\n        j = j - 1\n      else\n        i = i +\
    \ 1\n      end\n    end\n    return i\n  end\n  local function find(a, b)\n  \
    \  local i, j = 1, #a\n    while i <= j do\n      local m = i - j\n      if a[i]\
    \ == b[m] then\n        i = i + 1\n      elseif a[i] > b[m] then\n        j =\
    \ j - 1\n      else\n        i = i + 1\n      end\n    end\n    return i\n  end\n\
    \  local function find(a, b)\n    local i, j = 1, #a\n    while i <= j do\n  \
    \    local m = i - j\n      if a[i] == b[m] then\n        i = i + 1\n      elseif\
    \ a[i] < b[m] then\n        j = j - 1\n      else\n        i = i + 1\n      end\n\
    \    end\n    return i\n  end\n  local function find(a, b)\n    local i, j = 1,\
    \ #a\n    while i <= j do\n      local m = i - j\n      if a[i] == b[m] then\n\
    \        i = i + 1\n      elseif a[i] > b[m] then\n        j = j - 1\n      else\n\
    \        i = i + 1\n      end\n    end\n    return i\n  end\n  local function\
    \ find(a, b)\n    local i, j = 1, #a\n    while i <= j do\n      local m = i -\
    \ j\n      if a[i] == b[m] then\n        i = i + 1\n      elseif a[i] < b[m] then\n\
    \        j = j - 1\n      else\n        i = i + 1\n      end\n    end\n    return\
    \ i\n  end\n  local function find(a, b)\n    local i, j = 1, #a\n    while i <=\
    \ j do\n      local m = i - j\n      if a[i] == b[m] then\n        i = i + 1\n\
    \      elseif a[i] > b[m] then\n        j = j - 1\n      else\n        i = i +\
    \ 1\n      end\n    end\n    return i\n  end\n  local function find(a, b)\n  \
    \  local i, j = 1, #a\n    while i <= j do\n      local m = i - j\n      if a[i]\
    \ == ", "  local function helper(str, i, j)\n    if i == j or str[i] == nil then\
    \ return false end\n    if str[i] == b[1] then\n      if j == #str or helper(str,\
    \ i, j + 1) then return true end\n    end\n    if str[i] == b[2] then\n      if\
    \ j == #str or helper(str, i + 1, j + 1) then return true end\n    end\n    return\
    \ false\n  end\n  return helper(a, b, #b)\nend", "  local function find(a, b)\n\
    \    local i, j = 1, #a\n    while i <= j do\n      local m = math.floor((i +\
    \ j) / 2)\n      if a[m] == b then\n        return m\n      elseif a[m] > b then\n\
    \        i = m + 1\n      else\n        j = m - 1\n      end\n    end\n    return\
    \ nil\n  end\n  local function find(a, b)\n    local i, j = 1, #a\n    while i\
    \ <= j do\n      local m = math.floor((i + j) / 2)\n      if a[m] == b then\n\
    \        return m\n      elseif a[m] < b then\n        i = m + 1\n      else\n\
    \        j = m - 1\n      end\n    end\n    return nil\n  end\n  local function\
    \ find(a, b)\n    local i, j = 1, #a\n    while i <= j do\n      local m = math.floor((i\
    \ + j) / 2)\n      if a[m] == b then\n        return m\n      elseif a[m] > b\
    \ then\n        i = m + 1\n      else\n        j = m - 1\n      end\n    end\n\
    \    return nil\n  end\n  local function find(a, b)\n    local i, j = 1, #a\n\
    \    while i <= j do\n      local m = math.floor((i + j) / 2)\n      if a[m] ==\
    \ b then\n        return m\n      elseif a[m] < b then\n        i = m + 1\n  \
    \    else\n        j = m - 1\n      end\n    end\n    return nil\n  end\n  local\
    \ function find(a, b)\n    local i, j = 1, #a\n    while i <= j do\n      local\
    \ m = math.floor((i + j) / 2)\n      if a[m] == b then\n        return m\n   \
    \   elseif a[m] > b then\n        i = m + 1\n      else\n        j = m - 1\n \
    \     end\n    end\n    return nil\n  end\n  local function find(a, b)\n    local\
    \ i, j = 1, #a\n    while i <= j do\n      local m = math.floor((i + j) / 2)\n\
    \      if a[m] == b then\n        return m\n      elseif a[m] < b then\n     \
    \   i = m + 1\n      else\n        j = m - 1\n      end\n    end\n    return nil\n\
    \  end\n  local function find(a, b)\n    local i, j = 1, #a\n    while i <= j\
    \ do\n      local m = math.floor((i + j) / 2)\n      if a[m] == b then\n     \
    \   return m\n      elseif a[m] > b then\n        i = m + 1\n      else\n    \
    \    j = m - 1\n      end\n    end\n    return nil\n  end\n  local function find(a,\
    \ b)\n    ", "  local function helper(str, i, j)\n    if i < 1 then return false\
    \ end\n    if j < 1 then return false end\n    if str[i] == b[j] then return helper(str,\
    \ i - 1, j - 1) end\n    if str[i] ~= b[j] then return false end\n    return helper(str,\
    \ i - 1, j) or helper(str, i - 1, j - 1)\n  end\n  return helper(a, b, #b) ==\
    \ 1\nend", "  local function find(a, b)\n    local i, j = 1, #a\n    while i <=\
    \ j do\n      local m = math.min(i+j, b)\n      if a[i] == b[m] then\n       \
    \ i = m + 1\n      elseif a[i] < b[m] then\n        j = m\n      else\n      \
    \  i = m\n      end\n    end\n    return i\n  end\n  local function find(a, b)\n\
    \    local i, j = 1, #a\n    while i <= j do\n      local m = math.min(i+j, b)\n\
    \      if a[i] == b[m] then\n        i = m + 1\n      elseif a[i] < b[m] then\n\
    \        j = m\n      else\n        i = m\n      end\n    end\n    return i\n\
    \  end\n  local function find(a, b)\n    local i, j = 1, #a\n    while i <= j\
    \ do\n      local m = math.min(i+j, b)\n      if a[i] == b[m] then\n        i\
    \ = m + 1\n      elseif a[i] < b[m] then\n        j = m\n      else\n        i\
    \ = m\n      end\n    end\n    return i\n  end\n  local function find(a, b)\n\
    \    local i, j = 1, #a\n    while i <= j do\n      local m = math.min(i+j, b)\n\
    \      if a[i] == b[m] then\n        i = m + 1\n      elseif a[i] < b[m] then\n\
    \        j = m\n      else\n        i = m\n      end\n    end\n    return i\n\
    \  end\n  local function find(a, b)\n    local i, j = 1, #a\n    while i <= j\
    \ do\n      local m = math.min(i+j, b)\n      if a[i] == b[m] then\n        i\
    \ = m + 1\n      elseif a[i] < b[m] then\n        j = m\n      else\n        i\
    \ = m\n      end\n    end\n    return i\n  end\n  local function find(a, b)\n\
    \    local i, j = 1, #a\n    while i <= j do\n      local m = math.min(i+j, b)\n\
    \      if a[i] == b[m] then\n        i = m + 1\n      elseif a[i] < b[m] then\n\
    \        j = m\n      else\n        i = m\n      end\n    end\n    return i\n\
    \  end\n  local function find(a, b)\n    local i, j = 1, #a\n    while i <= j\
    \ do\n      local m = math.min(i+j, b)\n      if a[i] == b[m] then\n        i\
    \ = m + 1\n      elseif a[i] < b[m] then\n        j = m\n      else\n        i\
    \ = m\n      end\n    end", "  local pattern = a:gsub(\"%w+\", function(w)\n \
    \   return string.sub(w, 1, string.len(w))\n  end)\n  local pattern = pattern:gsub(\"\
    %w+\", function(w)\n    return string.sub(w, 1, string.len(w))\n  end)\n  pattern\
    \ = pattern:gsub(\"%w+\", function(w)\n    return string.sub(w, 1, string.len(w))\n\
    \  end)\n  pattern = pattern:gsub(\"%w+\", function(w)\n    return string.sub(w,\
    \ 1, string.len(w))\n  end)\n  pattern = pattern:gsub(\"%w+\", function(w)\n \
    \   return string.sub(w, 1, string.len(w))\n  end)\n  pattern = pattern:gsub(\"\
    %w+\", function(w)\n    return string.sub(w, 1, string.len(w))\n  end)\n  pattern\
    \ = pattern:gsub(\"%w+\", function(w)\n    return string.sub(w, 1, string.len(w))\n\
    \  end)\n  pattern = pattern:gsub(\"%w+\", function(w)\n    return string.sub(w,\
    \ 1, string.len(w))\n  end)\n  pattern = pattern:gsub(\"%w+\", function(w)\n \
    \   return string.sub(w, 1, string.len(w))\n  end)\n  pattern = pattern:gsub(\"\
    %w+\", function(w)\n    return string.sub(w, 1, string.len(w))\n  end)\n  pattern\
    \ = pattern:gsub(\"%w+\", function(w)\n    return string.sub(w, 1, string.len(w))\n\
    \  end)\n  pattern = pattern:gsub(\"%w+\", function(w)\n    return string.sub(w,\
    \ 1, string.len(w))\n  end)\n  pattern = pattern:gsub(\"%w+\", function(w)\n \
    \   return string.sub(w, 1, string.len(w))\n  end)\n  pattern = pattern:gsub(\"\
    %w+\", function(w)\n    return string.sub(w, 1, string.len(w))\n  end)\n  pattern\
    \ = pattern:gsub(\"%w+\", function(w)\n    return string.sub(w, 1, string.len(w))\n\
    \  end)\n  pattern = pattern:gsub(\"%w+\", function(w)\n    return string.sub(w,\
    \ 1, string.len(w))\n  end)\n  pattern = pattern:gsub(\"%w+\", function(w)\n \
    \   return string.sub(w, 1, string.len(w))\n  end)\n  pattern = pattern:gsub(\"\
    %w+\", function(w)\n    return string.sub(w, 1, string.len(w))\n  end)\n  pattern\
    \ = pattern:gsub(\"%w+\", function(w)\n    return string.sub(w, 1, string.len(w))\n\
    \  end)\n  pattern = pattern:gsub(\"%w+\", function(w)\n    return string.sub(w, ",
  "  local function helper(str, pattern)\n    if pattern == \"\" then\n      return\
    \ true\n    end\n    local plen = #pattern\n    local alen = #str\n    local i\
    \ = 0\n    while i < alen do\n      local j = plen\n      while j < alen do\n\
    \        if string.sub(a, i, j) == pattern then\n          return true\n     \
    \   end\n        j = j + 1\n      end\n      i = i + 1\n    end\n    return false\n\
    \  end\n  return helper(a, b)\nend", "  local function is_substring(x, y) -- Checks\
    \ if x is a substring of y\n    for i = 1, #y do\n      if string.sub(x, y, i,\
    \ #x) == x then\n        return true\n      end\n    end\n    return false\n \
    \ end\n  local function is_rotated_substring(x, y) -- Checks if x is a rotated\
    \ substring of y\n    for i = 1, #y do\n      if string.sub(x, y, i, #x) == x\
    \ then\n        return true\n      end\n    end\n    return false\n  end\n  local\
    \ function is_rotated_substring_or_substring(x, y) -- Checks if x is a rotated\
    \ substring of y or x is a substring of y\n    for i = 1, #y do\n      if string.sub(x,\
    \ y, i, #x) == x then\n        return true\n      end\n    end\n    return false\n\
    \  end\n  local function is_rotated_substring_or_substring2(x, y) -- Checks if\
    \ x is a rotated substring of y or x is a substring of y\n    for i = 1, #y do\n\
    \      if string.sub(x, y, i, #x) == x then\n        return true\n      end\n\
    \    end\n    return false\n  end\n  local function is_rotated_substring_or_substring3(x,\
    \ y) -- Checks if x is a rotated substring of y or x is a substring of y\n   \
    \ for i = 1, #y do\n      if string.sub(x, y, i, #x) == x then\n        return\
    \ true\n      end\n    end\n    return false\n  end\n  local function is_rotated_substring_or_substring4(x,\
    \ y) -- Checks if x is a rotated substring of y or x is a substring of y\n   \
    \ for i = 1, #y do\n      if string.sub(x, y, i, #x) == x then\n        return\
    \ true\n      end\n    end\n    return false\n  end\n  local function is_rotated_substring_or_substring5(x,\
    \ y) -- Checks if x is a rotated substring of y or x is a substring of y\n   \
    \ for i = 1, #y do\n      if string.sub(x, y, i, #x) == x then\n        return\
    \ true\n      end\n    end\n    return false\n  end\n  local function is_rotated_substring_or_substring6(x,\
    \ y) -- Checks if x is a rotated substring of y or x is a substring of y\n   \
    \ for i = 1, #y do\n      if string.sub(x, y, i, #x) == x then\n        return\
    \ true\n      end\n    end\n    return false\n  end\n  local function is_rotated_substring_or_substring7(x,\
    \ y) -- Checks if x is a rotated substring of y or x is a substring of y\n   \
    \ for i = 1, #y do\n      if string.sub(x, y, i, #x) == x then\n        return\
    \ true\n      end\n    end\n    return false", "  local function is_substring(cycle,\
    \ word)\n    local function is_substring_aux(word, i, j)\n      if i == j then\n\
    \        return true\n      elseif word[i] ~= cycle[i] then\n        return false\n\
    \      else\n        return is_substring_aux(word, i + 1, j - 1)\n      end\n\
    \    end\n    return is_substring_aux(word, 1, #word)\n  end\n  return is_substring(a,\
    \ b) or is_substring(b, a)\nend", "  local function is_substring(cycle, word)\n\
    \    local found = false\n    for i = 1, #cycle do\n      local sub = string.sub(cycle,\
    \ i, i)\n      if string.find(word, sub, 1, true) then\n        found = true\n\
    \        break\n      end\n    end\n    return found\n  end\n  local function\
    \ is_substring_rotation(cycle, word)\n    local found = false\n    for i = 1,\
    \ #cycle do\n      local sub = string.sub(cycle, i, i)\n      if string.find(word,\
    \ sub, 1, true) then\n        found = true\n        break\n      end\n    end\n\
    \    return found\n  end\n  local function is_substring_rotations(cycle, word)\n\
    \    local found = false\n    for i = 1, #cycle do\n      local sub = string.sub(cycle,\
    \ i, i)\n      if string.find(word, sub, 1, true) then\n        found = true\n\
    \        break\n      end\n    end\n    return found\n  end\n  local function\
    \ is_substring_rotations_rotations(cycle, word)\n    local found = false\n   \
    \ for i = 1, #cycle do\n      local sub = string.sub(cycle, i, i)\n      if string.find(word,\
    \ sub, 1, true) then\n        found = true\n        break\n      end\n    end\n\
    \    return found\n  end\n  local function is_substring_rotations_rotations_rotations(cycle,\
    \ word)\n    local found = false\n    for i = 1, #cycle do\n      local sub =\
    \ string.sub(cycle, i, i)\n      if string.find(word, sub, 1, true) then\n   \
    \     found = true\n        break\n      end\n    end\n    return found\n  end\n\
    \  local function is_substring_rotations_rotations_rotations_rotations(cycle,\
    \ word)\n    local found = false\n    for i = 1, #cycle do\n      local sub =\
    \ string.sub(cycle, i, i)\n      if string.find(word, sub, 1, true) then\n   \
    \     found = true\n        break\n      end\n    end\n    return found\n  end\n\
    \  local function is_substring_rotations_rotations_rotations_rotations_rotations(cycle,\
    \ word)\n    local found = false\n    for i = 1, #cycle do\n      local sub =\
    \ string.sub(cycle, i, i)\n      if string.find(word, sub, 1, true) then\n   \
    \     found = true\n        break\n      end\n    end\n    return found\n  end\n\
    \  local function is_substring_rotations_rotations_rotations_rotations_rotations_rotations(cycle,\
    \ word)\n    local found = false\n    for i = 1, #cycle do\n      local sub =\
    \ string.sub(cycle, i, i)\n      if string.find(word, ", "  local function is_substring_of_a(c)\n\
    \    return a:sub(1, #c) == c\n  end\n  local function is_substring_of_a_or_rotation(c)\n\
    \    return a:sub(1, #c) == c or a:sub(1, #c) == c:reverse()\n  end\n  local function\
    \ is_substring_of_a_or_rotations(c)\n    return a:sub(1, #c) == c or a:sub(1,\
    \ #c) == c:reverse():reverse()\n  end\n  local function is_substring_of_a_or_rotations_or_rotations(c)\n\
    \    return a:sub(1, #c) == c or a:sub(1, #c) == c:reverse():reverse():reverse()\n\
    \  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations(c)\n\
    \    return a:sub(1, #c) == c or a:sub(1, #c) == c:reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations(c)\n\
    \    return a:sub(1, #c) == c or a:sub(1, #c) == c:reverse():reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(c)\n\
    \    return a:sub(1, #c) == c or a:sub(1, #c) == c:reverse():reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(c)\n\
    \    return a:sub(1, #c) == c or a:sub(1, #c) == c:reverse():reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(c)\n\
    \    return a:sub(1, #c) == c or a:sub(1, #c) == c:reverse():reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(c)\n\
    \    return a:sub(1, #c) == c or a:sub(1, #c) == c:reverse():reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(c)\n\
    \    return a:sub(1, #c) == c or a:sub(1, #", "  local function match(s, t)\n\
    \    local i = #s\n    local j = #t\n    while i > 0 and j > 0 do\n      if s[i]\
    \ == t[j] then\n        i, j = i - 1, j - 1\n      else\n        return false\n\
    \      end\n    end\n    return j == 0\n  end\n  local function rotation(s, t)\n\
    \    local i = #s\n    local j = #t\n    local k = 0\n    while i > 0 and j >\
    \ 0 do\n      if s[i] == t[j] then\n        i, j = i - 1, j - 1\n        k = k\
    \ + 1\n      else\n        return k, i, j\n      end\n    end\n    return k, i,\
    \ j\n  end\n  local function match(s, t)\n    local i = #s\n    local j = #t\n\
    \    while i > 0 and j > 0 do\n      if s[i] == t[j] then\n        i, j = i -\
    \ 1, j - 1\n      else\n        return false\n      end\n    end\n    return j\
    \ == 0\n  end\n  local function rotation(s, t)\n    local i = #s\n    local j\
    \ = #t\n    local k = 0\n    while i > 0 and j > 0 do\n      if s[i] == t[j] then\n\
    \        i, j = i - 1, j - 1\n        k = k + 1\n      else\n        return k,\
    \ i, j\n      end\n    end\n    return k, i, j\n  end\n  local function match(s,\
    \ t)\n    local i = #s\n    local j = #t\n    while i > 0 and j > 0 do\n     \
    \ if s[i] == t[j] then\n        i, j = i - 1, j - 1\n      else\n        return\
    \ false\n      end\n    end\n    return j == 0\n  end\n  local function rotation(s,\
    \ t)\n    local i = #s\n    local j = #t\n    local k = 0\n    while i > 0 and\
    \ j > 0 do\n      if s[i] == t[j] then\n        i, j = i - 1, j - 1\n        k\
    \ = k + 1\n      else\n        return k, i, j\n      end\n    end\n    return\
    \ k, i, j\n  end\n  local function match(s, t)\n    local i = #s\n    local j\
    \ = #t\n    while i > 0 and j > 0 do\n      if s[i] == t[j] then\n        i, j\
    \ = i - 1, j - 1\n      else\n        return false\n      end\n    end\n    return\
    \ j == 0\n  end\n  local function rotation(s, t)\n    local i = #s\n    local\
    \ j = #t\n    local k = 0\n    while i > 0 and j > 0 do\n      if s[i] == t[j]\
    \ then\n        i, j = i - 1, j - 1\n        k = k + 1\n      else\n        return\
    \ k, i, j", "  local function is_substring(c)\n    return a:sub(1, #c) == c\n\
    \  end\n  local function is_rotated_substring(c)\n    return a:sub(1, #c) ~= c\
    \ and a:sub(1, #c) ~= c:reverse()\n  end\n  local function is_substring_of_rotated_substring(c)\n\
    \    return a:sub(1, #c) ~= c and a:sub(1, #c) ~= c:reverse() and is_rotated_substring(c)\n\
    \  end\n  local function is_rotated_substring_of_substring(c)\n    return a:sub(1,\
    \ #c) ~= c and a:sub(1, #c) ~= c:reverse() and is_substring_of_rotated_substring(c)\n\
    \  end\n  local function is_substring_of_rotated_substring_of_substring(c)\n \
    \   return a:sub(1, #c) ~= c and a:sub(1, #c) ~= c:reverse() and is_rotated_substring_of_substring(c)\n\
    \  end\n  local function is_substring_of_rotated_substring_of_rotated_substring(c)\n\
    \    return a:sub(1, #c) ~= c and a:sub(1, #c) ~= c:reverse() and is_rotated_substring_of_rotated_substring(c)\n\
    \  end\n  local function is_substring_of_rotated_substring_of_rotated_substring_of_substring(c)\n\
    \    return a:sub(1, #c) ~= c and a:sub(1, #c) ~= c:reverse() and is_rotated_substring_of_rotated_substring_of_substring(c)\n\
    \  end\n  local function is_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring(c)\n\
    \    return a:sub(1, #c) ~= c and a:sub(1, #c) ~= c:reverse() and is_rotated_substring_of_rotated_substring_of_rotated_substring(c)\n\
    \  end\n  local function is_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring_of_substring(c)\n\
    \    return a:sub(1, #c) ~= c and a:sub(1, #c) ~= c:reverse() and is_rotated_substring_of_rotated_substring_of_rotated_substring_of_substring(c)\n\
    \  end\n  local function is_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring(c)\n\
    \    return a:sub(1, #c) ~= c and a:sub(1, #c) ~= c:reverse() and is_rotated_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring(c)\n\
    \  end\n  local function is_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring_of_",
  "  local function find(a, b)\n    local i = #a\n    local j = 1\n    while i <=\
    \ #b do\n      if a[i] == b[j] then\n        i = i + 1\n        j = j + 1\n  \
    \    else\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return find(a, b)\nend", "  local function substr_check(str, substr)\n    return\
    \ string.find(str, substr) ~= nil\n  end\n  local function rotate_check(str, substr)\n\
    \    local i, j = string.find(str, substr), string.find(str, substr, 1, true)\n\
    \    if i == nil then\n      return false\n    end\n    local k = string.find(str,\
    \ substr, 1, true)\n    if k == nil then\n      return false\n    end\n    return\
    \ string.sub(str, j, k) ~= substr\n  end\n  local function rotate_check(str, substr)\n\
    \    local i, j = string.find(str, substr), string.find(str, substr, 1, true)\n\
    \    if i == nil then\n      return false\n    end\n    local k = string.find(str,\
    \ substr, 1, true)\n    if k == nil then\n      return false\n    end\n    return\
    \ string.sub(str, j, k) ~= substr\n  end\n  local function rotate_check(str, substr)\n\
    \    local i, j = string.find(str, substr), string.find(str, substr, 1, true)\n\
    \    if i == nil then\n      return false\n    end\n    local k = string.find(str,\
    \ substr, 1, true)\n    if k == nil then\n      return false\n    end\n    return\
    \ string.sub(str, j, k) ~= substr\n  end\n  local function rotate_check(str, substr)\n\
    \    local i, j = string.find(str, substr), string.find(str, substr, 1, true)\n\
    \    if i == nil then\n      return false\n    end\n    local k = string.find(str,\
    \ substr, 1, true)\n    if k == nil then\n      return false\n    end\n    return\
    \ string.sub(str, j, k) ~= substr\n  end\n  local function rotate_check(str, substr)\n\
    \    local i, j = string.find(str, substr), string.find(str, substr, 1, true)\n\
    \    if i == nil then\n      return false\n    end\n    local k = string.find(str,\
    \ substr, 1, true)\n    if k == nil then\n      return false\n    end\n    return\
    \ string.sub(str, j, k) ~= substr\n  end\n  local function rotate_check(str, substr)\n\
    \    local i, j = string.find(str, substr), string.find(str, substr, 1, true)\n\
    \    if i == nil then\n      return false\n    end\n    local k = string.find(str,\
    \ substr, 1, true)\n    if k == nil then\n      return false\n    end\n    return\
    \ string.sub(str, j, k) ~= substr\n  end\n  local function rotate_check(str, substr)\n\
    \    local i, j = string.find(str, substr), string.find(str, substr, 1, true)\n\
    \    if i == nil then\n      return false\n    end\n    local k = string.find(str,\
    \ substr, 1, true)\n    if k == nil", "  local function helper(str, i, j)\n  \
    \  if i == j then\n      return true\n    end\n    if i > j then\n      return\
    \ false\n    end\n    if str[i] == b[j] then\n      return helper(str, i + 1,\
    \ j + 1)\n    end\n    if str[i] ~= b[j] then\n      return helper(str, i + 1,\
    \ j)\n    end\n    return helper(str, i, j + 1)\n  end\n  return helper(a, b,\
    \ 1)\nend", "  local function is_substring_of_a(b)\n    return a:sub(1, #b) ==\
    \ b\n  end\n  local function is_substring_of_a_or_any(b)\n    return a:sub(1,\
    \ #b) == b or a:sub(1, #b) ~= b\n  end\n  local function is_substring_of_a_or_any_or_none(b)\n\
    \    return a:sub(1, #b) == b or a:sub(1, #b) ~= b or a:sub(1, #b) ~= b\n  end\n\
    \  local function is_substring_of_a_or_any_or_none_or_none(b)\n    return a:sub(1,\
    \ #b) == b or a:sub(1, #b) ~= b or a:sub(1, #b) ~= b or a:sub(1, #b) ~= b\n  end\n\
    \  local function is_substring_of_a_or_any_or_none_or_none_or_none(b)\n    return\
    \ a:sub(1, #b) == b or a:sub(1, #b) ~= b or a:sub(1, #b) ~= b or a:sub(1, #b)\
    \ ~= b or a:sub(1, #b) ~= b\n  end\n  local function is_substring_of_a_or_any_or_none_or_none_or_none(b)\n\
    \    return a:sub(1, #b) == b or a:sub(1, #b) ~= b or a:sub(1, #b) ~= b or a:sub(1,\
    \ #b) ~= b or a:sub(1, #b) ~= b or a:sub(1, #b) ~= b\n  end\n  local function\
    \ is_substring_of_a_or_any_or_none_or_none_or_none(b)\n    return a:sub(1, #b)\
    \ == b or a:sub(1, #b) ~= b or a:sub(1, #b) ~= b or a:sub(1, #b) ~= b or a:sub(1,\
    \ #b) ~= b or a:sub(1, #b) ~= b or a:sub(1, #b) ~= b\n  end\n  local function\
    \ is_substring_of_a_or_any_or_none_or_none_or_none(b)\n    return a:sub(1, #b)\
    \ == b or a:sub(1, #b) ~= b or a:sub(1, #b) ~= b or a:sub(1, #b) ~= b or a:sub(1,\
    \ #b) ~= b or a:sub(1, #b) ~= b or a:sub(1, #b) ~= b or a:sub(1, #b) ~= b\n  end\n\
    \  local function is_substring_of_a_or_any_or_none_or_none_or_none(b)\n    return\
    \ a:", "  local function is_substring_helper(substr, str)\n    return str:sub(1,\
    \ #substr) == substr\n  end\n  return is_substring_helper(b, a) or is_substring_helper(a,\
    \ b)\nend", "  local function is_substring_helper(str, substr)\n    return str:sub(1,\
    \ #str) == substr\n  end\n  return is_substring_helper(a, b) or is_substring_helper(b,\
    \ a)\nend", "  local pattern = a:gsub(\"%w+\", function(c)\n    return string.sub(b,\
    \ 1, #b - #c + 1)\n  end)\n  return a:find(pattern, 1, true) ~= nil\nend", " \
    \ local function helper(str, i, j)\n    if i == j then\n      return true\n  \
    \  end\n    if str[i] == b and helper(str, i + 1, j - 1) then\n      return true\n\
    \    end\n    if str[i] == b and helper(str, i + 1, j) then\n      return true\n\
    \    end\n    if str[i] == b and helper(str, i, j - 1) then\n      return true\n\
    \    end\n    return false\n  end\n  return helper(a, b, #a) == true\nend", " \
    \ local function is_substring_helper(substr, str)\n    if str == nil then return\
    \ false end\n    if substr == nil then return true end\n    if #substr == 0 then\
    \ return true end\n    if #str == 0 then return false end\n    if substr[1] ==\
    \ str[1] then return true end\n    if substr[2] == str[2] then return true end\n\
    \    if substr[3] == str[3] then return true end\n    if substr[4] == str[4] then\
    \ return true end\n    if substr[5] == str[5] then return true end\n    if substr[6]\
    \ == str[6] then return true end\n    if substr[7] == str[7] then return true\
    \ end\n    if substr[8] == str[8] then return true end\n    if substr[9] == str[9]\
    \ then return true end\n    if substr[10] == str[10] then return true end\n  \
    \  if substr[11] == str[11] then return true end\n    if substr[12] == str[12]\
    \ then return true end\n    if substr[13] == str[13] then return true end\n  \
    \  if substr[14] == str[14] then return true end\n    if substr[15] == str[15]\
    \ then return true end\n    if substr[16] == str[16] then return true end\n  \
    \  if substr[17] == str[17] then return true end\n    if substr[18] == str[18]\
    \ then return true end\n    if substr[19] == str[19] then return true end\n  \
    \  if substr[20] == str[20] then return true end\n    if substr[21] == str[21]\
    \ then return true end\n    if substr[22] == str[22] then return true end\n  \
    \  if substr[23] == str[23] then return true end\n    if substr[24] == str[24]\
    \ then return true end\n    if substr[25] == str[25] then return true end\n  \
    \  if substr[26] == str[26] then return true end\n    if substr[27] == str[27]\
    \ then return true end\n    if substr[28] == str[28] then return true end\n  \
    \  if substr[29] == str[29] then return true end\n    if substr[30] == str[30]\
    \ then return true end\n    if substr[31] == str[31] then return true end\n  \
    \  if substr[32] == str[32] then return true end\n    if substr[33] == str[33]\
    \ then return true end\n    if substr[34] == str[34] then return true end\n  \
    \  if substr[35] == str[35] then return true ", "  local function is_substring(c)\n\
    \    return a:find(c) ~= nil\n  end\n  local function is_rotated_substring(c)\n\
    \    return a:find(c) ~= nil and a:find(c, 1, true) ~= nil\n  end\n  local function\
    \ is_rotated_substring2(c)\n    return a:find(c) ~= nil and a:find(c, 1, true)\
    \ ~= nil and a:find(c, 2, true) ~= nil\n  end\n  local function is_rotated_substring3(c)\n\
    \    return a:find(c) ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 2, true)\
    \ ~= nil and a:find(c, 3, true) ~= nil\n  end\n  local function is_rotated_substring4(c)\n\
    \    return a:find(c) ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 2, true)\
    \ ~= nil and a:find(c, 3, true) ~= nil and a:find(c, 4, true) ~= nil\n  end\n\
    \  local function is_rotated_substring5(c)\n    return a:find(c) ~= nil and a:find(c,\
    \ 1, true) ~= nil and a:find(c, 2, true) ~= nil and a:find(c, 3, true) ~= nil\
    \ and a:find(c, 4, true) ~= nil and a:find(c, 5, true) ~= nil\n  end\n  local\
    \ function is_rotated_substring6(c)\n    return a:find(c) ~= nil and a:find(c,\
    \ 1, true) ~= nil and a:find(c, 2, true) ~= nil and a:find(c, 3, true) ~= nil\
    \ and a:find(c, 4, true) ~= nil and a:find(c, 5, true) ~= nil and a:find(c, 6,\
    \ true) ~= nil\n  end\n  local function is_rotated_substring7(c)\n    return a:find(c)\
    \ ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 2, true) ~= nil and a:find(c,\
    \ 3, true) ~= nil and a:find(c, 4, true) ~= nil and a:find(c, 5, true) ~= nil\
    \ and a:find(c, 6, true) ~= nil and a:find(c, 7, true) ~= nil\n  end\n  local\
    \ function is_rotated_substring8(c)\n    return a:find(c) ~= nil and a:find(c,\
    \ 1, true) ~= nil and a:find(c, 2, true) ~= nil and a:find(c, 3, true) ~= nil\
    \ and a:find(c, 4, true) ~= nil and a:find(c, 5, true) ~= nil", "  local function\
    \ rots(s)\n    local t = {}\n    for i = 1, #s do\n      t[#t + 1] = s:sub(i,\
    \ i)\n    end\n    return t\n  end\n  local function match(s, t)\n    local n\
    \ = #s\n    for i = 1, #t do\n      if s:sub(i, i) == t[i] then\n        n = n\
    \ - 1\n      end\n    end\n    return n == 0\n  end\n  local function rots_match(s,\
    \ t)\n    local n = #s\n    for i = 1, #t do\n      local m = #t\n      for j\
    \ = 1, m do\n        if s:sub(i, i + j) == t[j] then\n          n = n - 1\n  \
    \      end\n      end\n    end\n    return n == 0\n  end\n  local function rots_match(s,\
    \ t)\n    local n = #s\n    for i = 1, #t do\n      local m = #t\n      for j\
    \ = 1, m do\n        if s:sub(i, i + j) == t[j] then\n          n = n - 1\n  \
    \      end\n      end\n    end\n    return n == 0\n  end\n  local function rots_match(s,\
    \ t)\n    local n = #s\n    for i = 1, #t do\n      local m = #t\n      for j\
    \ = 1, m do\n        if s:sub(i, i + j) == t[j] then\n          n = n - 1\n  \
    \      end\n      end\n    end\n    return n == 0\n  end\n  local function rots_match(s,\
    \ t)\n    local n = #s\n    for i = 1, #t do\n      local m = #t\n      for j\
    \ = 1, m do\n        if s:sub(i, i + j) == t[j] then\n          n = n - 1\n  \
    \      end\n      end\n    end\n    return n == 0\n  end\n  local function rots_match(s,\
    \ t)\n    local n = #s\n    for i = 1, #t do\n      local m = #t\n      for j\
    \ = 1, m do\n        if s:sub(i, i + j) == t[j] then\n          n = n - 1\n  \
    \      end\n      end\n    end\n    return n == 0\n  end\n  local function rots_match(s,\
    \ t)\n    local n = #s\n    for i = 1, #t do\n      local m = #t\n      for j\
    \ = 1, m do\n        if s:sub(i, i + j) == t[j] then\n          n = n - 1\n  \
    \      end\n      end\n    end\n    return n == 0\n  end\n  local function rots_match(s,\
    \ t)\n    local n = #s\n    for i = 1, #t do\n      local m = #t\n      for j\
    \ = 1, m do\n        if s:sub(i, i + j) == t[j] then\n", "  local pattern = a:gsub(\"\
    %w+\", function(c) return c:lower() end)\n  local pattern2 = a:gsub(\"%w+\", function(c)\
    \ return c:upper() end)\n  local pattern3 = a:gsub(\"%w+\", function(c) return\
    \ c:reverse() end)\n  local pattern4 = a:gsub(\"%w+\", function(c) return c:reverse():lower()\
    \ end)\n  local pattern5 = a:gsub(\"%w+\", function(c) return c:reverse():upper()\
    \ end)\n  local pattern6 = a:gsub(\"%w+\", function(c) return c:reverse():reverse()\
    \ end)\n  local pattern7 = a:gsub(\"%w+\", function(c) return c:reverse():reverse():lower()\
    \ end)\n  local pattern8 = a:gsub(\"%w+\", function(c) return c:reverse():reverse():upper()\
    \ end)\n  local pattern9 = a:gsub(\"%w+\", function(c) return c:reverse():reverse():reverse()\
    \ end)\n  local pattern10 = a:gsub(\"%w+\", function(c) return c:reverse():reverse():reverse():lower()\
    \ end)\n  local pattern11 = a:gsub(\"%w+\", function(c) return c:reverse():reverse():reverse():upper()\
    \ end)\n  local pattern12 = a:gsub(\"%w+\", function(c) return c:reverse():reverse():reverse():reverse()\
    \ end)\n  local pattern13 = a:gsub(\"%w+\", function(c) return c:reverse():reverse():reverse():reverse():lower()\
    \ end)\n  local pattern14 = a:gsub(\"%w+\", function(c) return c:reverse():reverse():reverse():reverse():upper()\
    \ end)\n  local pattern15 = a:gsub(\"%w+\", function(c) return c:reverse():reverse():reverse():reverse():reverse()\
    \ end)\n  local pattern16 = a:gsub(\"%w+\", function(c) return c:reverse():reverse():reverse():reverse():reverse():lower()\
    \ end)\n  local pattern17 = a:gsub(\"%w+\", function(c) return c:reverse():reverse():reverse():reverse():reverse():upper()\
    \ end)\n  local pattern18 = a:gsub(\"%w+\", function(c) return c:reverse():reverse():reverse():reverse():reverse():reverse()\
    \ end)\n  local pattern19 = a:gsub(\"%w+\", function(c) return c:reverse():reverse():reverse():reverse():reverse():reverse():lower()\
    \ end)\n  local pattern20 = a:gsub(\"%w+\", function(c) return c:reverse():reverse():reverse():reverse():reverse():reverse():upper()\
    \ end)\n  local pattern21 = a:gsub(\"%w+\", function(c) return c:reverse():reverse():reverse():reverse():reverse():reverse():reverse()\
    \ end)", "  local function substr_check(substr, str)\n    return string.find(str,\
    \ substr) ~= nil\n  end\n  local function rotate_check(substr, str, i)\n    return\
    \ string.find(string.sub(str, i, i), substr) ~= nil\n  end\n  local function rotate_check(substr,\
    \ str, i)\n    return string.find(string.sub(str, i, i), substr) ~= nil\n  end\n\
    \  local function rotate_check(substr, str, i)\n    return string.find(string.sub(str,\
    \ i, i), substr) ~= nil\n  end\n  local function rotate_check(substr, str, i)\n\
    \    return string.find(string.sub(str, i, i), substr) ~= nil\n  end\n  local\
    \ function rotate_check(substr, str, i)\n    return string.find(string.sub(str,\
    \ i, i), substr) ~= nil\n  end\n  local function rotate_check(substr, str, i)\n\
    \    return string.find(string.sub(str, i, i), substr) ~= nil\n  end\n  local\
    \ function rotate_check(substr, str, i)\n    return string.find(string.sub(str,\
    \ i, i), substr) ~= nil\n  end\n  local function rotate_check(substr, str, i)\n\
    \    return string.find(string.sub(str, i, i), substr) ~= nil\n  end\n  local\
    \ function rotate_check(substr, str, i)\n    return string.find(string.sub(str,\
    \ i, i), substr) ~= nil\n  end\n  local function rotate_check(substr, str, i)\n\
    \    return string.find(string.sub(str, i, i), substr) ~= nil\n  end\n  local\
    \ function rotate_check(substr, str, i)\n    return string.find(string.sub(str,\
    \ i, i), substr) ~= nil\n  end\n  local function rotate_check(substr, str, i)\n\
    \    return string.find(string.sub(str, i, i), substr) ~= nil\n  end\n  local\
    \ function rotate_check(substr, str, i)\n    return string.find(string.sub(str,\
    \ i, i), substr) ~= nil\n  end\n  local function rotate_check(substr, str, i)\n\
    \    return string.find(string.sub(str, i, i), substr) ~= nil\n  end\n  local\
    \ function rotate_check(substr, str, i)\n    return string.find(string.sub(str,\
    \ i, i), substr) ~= nil\n  end\n  local function rotate_check(substr, str, i)\n\
    \    return string.find(string.sub(str, i, i), substr) ~= nil\n  end\n  local\
    \ function rotate_check(substr, str, i)\n    return string.find(string.sub(str,\
    \ i, i), substr) ~= nil\n  end\n  local function rotate_check(substr, str, i)\n\
    \    return string.find(string.sub(str, i, i), substr) ~= nil\n  end\n  local\
    \ function rotate_check(substr, str, i)\n    return string.find(string.sub(str,\
    \ i, i), substr) ~= ", "  local function rotation(s, e)\n    return string.sub(s,\
    \ 1, e) .. string.sub(s, e + 1)\n  end\n  local function rotations1(s)\n    local\
    \ t = {}\n    for i = 1, #s do\n      t[i] = rotation(s, i)\n    end\n    return\
    \ t\n  end\n  local function rotations2(s)\n    local t = {}\n    for i = 1, #s\
    \ do\n      t[i] = rotations1(string.sub(s, i, i + 1))\n    end\n    return t\n\
    \  end\n  local function rotations3(s)\n    local t = {}\n    for i = 1, #s do\n\
    \      t[i] = rotations2(string.sub(s, i, i + 1))\n    end\n    return t\n  end\n\
    \  local function rotations4(s)\n    local t = {}\n    for i = 1, #s do\n    \
    \  t[i] = rotations3(string.sub(s, i, i + 1))\n    end\n    return t\n  end\n\
    \  local function rotations5(s)\n    local t = {}\n    for i = 1, #s do\n    \
    \  t[i] = rotations4(string.sub(s, i, i + 1))\n    end\n    return t\n  end\n\
    \  local function rotations6(s)\n    local t = {}\n    for i = 1, #s do\n    \
    \  t[i] = rotations5(string.sub(s, i, i + 1))\n    end\n    return t\n  end\n\
    \  local function rotations7(s)\n    local t = {}\n    for i = 1, #s do\n    \
    \  t[i] = rotations6(string.sub(s, i, i + 1))\n    end\n    return t\n  end\n\
    \  local function rotations8(s)\n    local t = {}\n    for i = 1, #s do\n    \
    \  t[i] = rotations7(string.sub(s, i, i + 1))\n    end\n    return t\n  end\n\
    \  local function rotations9(s)\n    local t = {}\n    for i = 1, #s do\n    \
    \  t[i] = rotations8(string.sub(s, i, i + 1))\n    end\n    return t\n  end\n\
    \  local function rotations10(s)\n    local t = {}\n    for i = 1, #s do\n   \
    \   t[i] = rotations9(string.sub(s, i, i + 1))\n    end\n    return t\n  end\n\
    \  local function rotations11(s)\n    local t = {}\n    for i = 1, #s do\n   \
    \   t[i] = rotations10(string.sub(s, i, i + 1))\n    end\n    return t\n  end\n\
    \  local function rotations12(s)\n    local t = {}\n    for i = 1, #s do\n   \
    \   t[i] = rotations11(string.sub(s, i, i + 1))\n    end\n    return t\n  end\n\
    \  local function rotations13(s)\n", "  local function is_substring(cycle, word)\n\
    \    local s = string.sub(cycle, 1, #word)\n    return string.find(a, s) == 0\
    \ or string.find(a, s, 1, #word) == 0 or string.find(a, s, 1, #cycle - 1) ~= nil\n\
    \  end\n  local function is_rotated_substring(cycle, word)\n    local s = string.sub(cycle,\
    \ 1, #word)\n    return string.find(a, s, 1, #cycle - 1) ~= nil\n  end\n  local\
    \ function is_rotated_substring2(cycle, word)\n    local s = string.sub(cycle,\
    \ 1, #word)\n    return string.find(a, s, 1, #cycle - 1) ~= nil\n  end\n  local\
    \ function is_rotated_substring3(cycle, word)\n    local s = string.sub(cycle,\
    \ 1, #word)\n    return string.find(a, s, 1, #cycle - 1) ~= nil\n  end\n  local\
    \ function is_rotated_substring4(cycle, word)\n    local s = string.sub(cycle,\
    \ 1, #word)\n    return string.find(a, s, 1, #cycle - 1) ~= nil\n  end\n  local\
    \ function is_rotated_substring5(cycle, word)\n    local s = string.sub(cycle,\
    \ 1, #word)\n    return string.find(a, s, 1, #cycle - 1) ~= nil\n  end\n  local\
    \ function is_rotated_substring6(cycle, word)\n    local s = string.sub(cycle,\
    \ 1, #word)\n    return string.find(a, s, 1, #cycle - 1) ~= nil\n  end\n  local\
    \ function is_rotated_substring7(cycle, word)\n    local s = string.sub(cycle,\
    \ 1, #word)\n    return string.find(a, s, 1, #cycle - 1) ~= nil\n  end\n  local\
    \ function is_rotated_substring8(cycle, word)\n    local s = string.sub(cycle,\
    \ 1, #word)\n    return string.find(a, s, 1, #cycle - 1) ~= nil\n  end\n  local\
    \ function is_rotated_substring9(cycle, word)\n    local s = string.sub(cycle,\
    \ 1, #word)\n    return string.find(a, s, 1, #cycle - 1) ~= nil\n  end\n  local\
    \ function is_rotated_substring10(cycle, word)\n    local s = string.sub(cycle,\
    \ 1, #word)\n    return string.find(a, s, 1, #cycle - 1) ~= nil\n  end\n  local\
    \ function is_rotated_substring11(cycle, word)\n    local s = string.sub(cycle,\
    \ 1, #word)\n    return string.find(a, s, 1, #cycle - 1) ~= nil\n", "  local function\
    \ is_substring_helper(substr, str)\n    return string.find(str, substr) ~= nil\n\
    \  end\n  local function is_substring_helper(substr, str)\n    return string.find(str,\
    \ substr) ~= nil\n  end\n  local function is_substring_helper(substr, str)\n \
    \   return string.find(str, substr) ~= nil\n  end\n  local function is_substring_helper(substr,\
    \ str)\n    return string.find(str, substr) ~= nil\n  end\n  local function is_substring_helper(substr,\
    \ str)\n    return string.find(str, substr) ~= nil\n  end\n  local function is_substring_helper(substr,\
    \ str)\n    return string.find(str, substr) ~= nil\n  end\n  local function is_substring_helper(substr,\
    \ str)\n    return string.find(str, substr) ~= nil\n  end\n  local function is_substring_helper(substr,\
    \ str)\n    return string.find(str, substr) ~= nil\n  end\n  local function is_substring_helper(substr,\
    \ str)\n    return string.find(str, substr) ~= nil\n  end\n  local function is_substring_helper(substr,\
    \ str)\n    return string.find(str, substr) ~= nil\n  end\n  local function is_substring_helper(substr,\
    \ str)\n    return string.find(str, substr) ~= nil\n  end\n  local function is_substring_helper(substr,\
    \ str)\n    return string.find(str, substr) ~= nil\n  end\n  local function is_substring_helper(substr,\
    \ str)\n    return string.find(str, substr) ~= nil\n  end\n  local function is_substring_helper(substr,\
    \ str)\n    return string.find(str, substr) ~= nil\n  end\n  local function is_substring_helper(substr,\
    \ str)\n    return string.find(str, substr) ~= nil\n  end\n  local function is_substring_helper(substr,\
    \ str)\n    return string.find(str, substr) ~= nil\n  end\n  local function is_substring_helper(substr,\
    \ str)\n    return string.find(str, substr) ~= nil\n  end\n  local function is_substring_helper(substr,\
    \ str)\n    return string.find(str, substr) ~= nil\n  end\n  local function is_substring_helper(substr,\
    \ str)\n    return string.find(str, substr) ~= nil\n  end\n  local function is_substring_helper(substr,\
    \ str)\n    return string.find(str, substr) ~= nil\n  end\n  local function is_substring_helper(substr,\
    \ str)\n    return string.find(str, substr) ~= nil\n  end\n  local function is_substring_helper(",
  "  local function is_substring_helper(substring, word)\n    local function is_substring_helper(substring,\
    \ word)\n      if word == substring then\n        return true\n      elseif word\
    \ == substring .. 'a' then\n        return false\n      elseif word == substring\
    \ .. 'b' then\n        return false\n      elseif word == substring .. 'c' then\n\
    \        return false\n      elseif word == substring .. 'd' then\n        return\
    \ false\n      elseif word == substring .. 'e' then\n        return false\n  \
    \    elseif word == substring .. 'f' then\n        return false\n      elseif\
    \ word == substring .. 'g' then\n        return false\n      elseif word == substring\
    \ .. 'h' then\n        return false\n      elseif word == substring .. 'i' then\n\
    \        return false\n      elseif word == substring .. 'j' then\n        return\
    \ false\n      elseif word == substring .. 'k' then\n        return false\n  \
    \    elseif word == substring .. 'l' then\n        return false\n      elseif\
    \ word == substring .. 'm' then\n        return false\n      elseif word == substring\
    \ .. 'n' then\n        return false\n      elseif word == substring .. 'o' then\n\
    \        return false\n      elseif word == substring .. 'p' then\n        return\
    \ false\n      elseif word == substring .. 'q' then\n        return false\n  \
    \    elseif word == substring .. 'r' then\n        return false\n      elseif\
    \ word == substring .. 's' then\n        return false\n      elseif word == substring\
    \ .. 't' then\n        return false\n      elseif word == substring .. 'u' then\n\
    \        return false\n      elseif word == substring .. 'v' then\n        return\
    \ false\n      elseif word == substring .. 'w' then\n        return false\n  \
    \    elseif word == substring .. 'x' then\n        return false\n      elseif\
    \ word == substring .. 'y' then\n        return false\n      elseif word == substring\
    \ .. 'z' then\n        return false\n      elseif word == substring .. 'A' then\n\
    \        return false\n      elseif word == substring .. 'B' then\n        return\
    \ false\n      elseif word == substring .. 'C' then\n        return false\n  \
    \    elseif word == substring .. 'D' then\n        return false\n", "  local function\
    \ is_substring_of_rotation(word, pattern)\n    local pattern = string.lower(pattern)\n\
    \    local word = string.lower(word)\n    local pattern_index = 1\n    local word_index\
    \ = 1\n    while pattern_index <= #pattern and word_index <= #word do\n      local\
    \ patternchar = pattern[pattern_index]\n      local wordchar = word[word_index]\n\
    \      if patternchar == wordchar then\n        pattern_index = pattern_index\
    \ + 1\n        word_index = word_index + 1\n      elseif patternchar == 'a' and\
    \ wordchar == 'b' then\n        pattern_index = pattern_index + 1\n        word_index\
    \ = word_index + 1\n      elseif patternchar == 'b' and wordchar == 'a' then\n\
    \        pattern_index = pattern_index + 1\n        word_index = word_index +\
    \ 1\n      elseif patternchar == 'c' and wordchar == 'd' then\n        pattern_index\
    \ = pattern_index + 1\n        word_index = word_index + 1\n      elseif patternchar\
    \ == 'd' and wordchar == 'c' then\n        pattern_index = pattern_index + 1\n\
    \        word_index = word_index + 1\n      elseif patternchar == 'e' and wordchar\
    \ == 'f' then\n        pattern_index = pattern_index + 1\n        word_index =\
    \ word_index + 1\n      elseif patternchar == 'f' and wordchar == 'e' then\n \
    \       pattern_index = pattern_index + 1\n        word_index = word_index + 1\n\
    \      elseif patternchar == 'g' and wordchar == 'h' then\n        pattern_index\
    \ = pattern_index + 1\n        word_index = word_index + 1\n      elseif patternchar\
    \ == 'h' and wordchar == 'g' then\n        pattern_index = pattern_index + 1\n\
    \        word_index = word_index + 1\n      elseif patternchar == 'i' and wordchar\
    \ == 'j' then\n        pattern_index = pattern_index + 1\n        word_index =\
    \ word_index + 1\n      elseif patternchar == 'j' and wordchar == 'i' then\n \
    \       pattern_index = pattern_index + 1\n        word_index = word_index + 1\n\
    \      elseif patternchar == 'k' and wordchar == 'l' then\n        pattern_index\
    \ = pattern_index + 1\n        word_index = word_index + 1\n      elseif patternchar\
    \ == 'l' and wordchar == 'k' then\n        pattern_index = pattern_index + 1\n\
    \        word_index = word_index + 1\n      elseif patternchar == 'm' and wordchar\
    \ == 'n' then\n        pattern_index = pattern_index + 1\n        word_index =\
    \ word_index + 1\n      elseif patternchar == 'n' and wordchar == 'm' then\n \
    \       pattern_index = pattern_index + 1\n        word_index = word_index + 1\n\
    \      elseif patternchar == 'o' and wordchar == '", "  local function is_substr_rotation(s,\
    \ t)\n    return string.find(s, t) ~= nil\n  end\n  local function is_substr_rotations(s,\
    \ t)\n    local rotations = string.gmatch(s, '(%S+)') -- Split string into rotations\n\
    \    for _, rotation in ipairs(rotations) do\n      local rotated_s = string.sub(s,\
    \ 1, string.len(s) - string.len(rotation)) + rotation\n      if is_substr_rotation(rotated_s,\
    \ t) then\n        return true\n      end\n    end\n    return false\n  end\n\
    \  local function is_substr_rotated_word(s, t)\n    local rotations = string.gmatch(s,\
    \ '(%S+)') -- Split string into rotations\n    for _, rotation in ipairs(rotations)\
    \ do\n      local rotated_s = string.sub(s, 1, string.len(s) - string.len(rotation))\
    \ + rotation\n      if is_substr_rotation(rotated_s, t) then\n        return true\n\
    \      end\n    end\n    return false\n  end\n  local function is_substr_rotated_words(s,\
    \ t)\n    local rotations = string.gmatch(s, '(%S+)') -- Split string into rotations\n\
    \    for _, rotation in ipairs(rotations) do\n      local rotated_s = string.sub(s,\
    \ 1, string.len(s) - string.len(rotation)) + rotation\n      if is_substr_rotated_word(rotated_s,\
    \ t) then\n        return true\n      end\n    end\n    return false\n  end\n\
    \  local function is_substr_rotated_words_in_a_word(s, t)\n    local rotations\
    \ = string.gmatch(s, '(%S+)') -- Split string into rotations\n    for _, rotation\
    \ in ipairs(rotations) do\n      local rotated_s = string.sub(s, 1, string.len(s)\
    \ - string.len(rotation)) + rotation\n      if is_substr_rotated_words_in_a_word(rotated_s,\
    \ t) then\n        return true\n      end\n    end\n    return false\n  end\n\
    \  local function is_substr_rotated_words_in_a_words(s, t)\n    local rotations\
    \ = string.gmatch(s, '(%S+)') -- Split string into rotations\n    for _, rotation\
    \ in ipairs(rotations) do\n      local rotated_s = string.sub(s, 1, string.len(s)\
    \ - string.len(rotation)) + rotation\n      if is_substr_rotated_words_in_a_words(rotated_s,\
    \ t) then\n        return true\n      end\n    end\n    return false\n  end\n\
    \  local function is_substr_rotated_words_in_a_words_in_a_word(s, t)\n    local\
    \ rotations = string.gmatch(s, '(%S+)') -- Split ", "  local function is_sub(pattern,\
    \ word)\n    pattern = string.gsub(pattern, \"%[%a]\", function(c)\n      return\
    \ string.sub(b, string.len(word) - string.len(c), 1)\n    end)\n    return pattern:sub(1,\
    \ #pattern) == word\n  end\n  local function is_sub2(pattern, word)\n    pattern\
    \ = string.gsub(pattern, \"%[%a]\", function(c)\n      return string.sub(b, string.len(word)\
    \ - string.len(c), 1)\n    end)\n    return pattern:sub(1, #pattern) == word\n\
    \  end\n  local function is_sub3(pattern, word)\n    pattern = string.gsub(pattern,\
    \ \"%[%a]\", function(c)\n      return string.sub(b, string.len(word) - string.len(c),\
    \ 1)\n    end)\n    return pattern:sub(1, #pattern) == word\n  end\n  local function\
    \ is_sub4(pattern, word)\n    pattern = string.gsub(pattern, \"%[%a]\", function(c)\n\
    \      return string.sub(b, string.len(word) - string.len(c), 1)\n    end)\n \
    \   return pattern:sub(1, #pattern) == word\n  end\n  local function is_sub5(pattern,\
    \ word)\n    pattern = string.gsub(pattern, \"%[%a]\", function(c)\n      return\
    \ string.sub(b, string.len(word) - string.len(c), 1)\n    end)\n    return pattern:sub(1,\
    \ #pattern) == word\n  end\n  local function is_sub6(pattern, word)\n    pattern\
    \ = string.gsub(pattern, \"%[%a]\", function(c)\n      return string.sub(b, string.len(word)\
    \ - string.len(c), 1)\n    end)\n    return pattern:sub(1, #pattern) == word\n\
    \  end\n  local function is_sub7(pattern, word)\n    pattern = string.gsub(pattern,\
    \ \"%[%a]\", function(c)\n      return string.sub(b, string.len(word) - string.len(c),\
    \ 1)\n    end)\n    return pattern:sub(1, #pattern) == word\n  end\n  local function\
    \ is_sub8(pattern, word)\n    pattern = string.gsub(pattern, \"%[%a]\", function(c)\n\
    \      return string.sub(b, string.len(word) - string.len(c), 1)\n    end)\n \
    \   return pattern:sub(1, #pattern) == word\n  end\n  local function is_sub9(pattern,\
    \ word)\n    pattern = string.gsub(pattern, \"%[%a]\", function(c)\n      return\
    \ string.sub(b, string.len(word) - string.len(c), 1)\n    end)\n    return pattern:sub(1,\
    \ #pattern) == word\n  end\n  local function is_sub10(pattern, word)\n    pattern\
    \ = string.gsub(pattern, \"%[%a]\", function(c)\n      return ", "  local function\
    \ is_substring_of(a, b)\n    return a:sub(1, #a) == b\n  end\n  local function\
    \ is_substring_of_rotation(a, b)\n    return a:sub(1, #a) == b:sub(1, #b) and\
    \ is_substring_of(b, a:sub(2, #a))\n  end\n  return is_substring_of_rotation(a,\
    \ b) or is_substring_of_rotation(b, a)\nend", "  local function substr_check(s,\
    \ t)\n    local function substr_check(s, t)\n      if #s > #t then\n        return\
    \ false\n      elseif #s == #t then\n        return true\n      else\n       \
    \ return s:sub(1, #t) == t\n      end\n    end\n    local function substr_check_rotation(s,\
    \ t)\n      local function substr_check_rotation(s, t)\n        if #s > #t then\n\
    \          return false\n        elseif #s == #t then\n          return true\n\
    \        else\n          return s:sub(1, #t) == t or s:sub(1, #t) == t:reverse()\n\
    \        end\n      end\n      local function substr_check_rotation(s, t)\n  \
    \      if #s > #t then\n          return false\n        elseif #s == #t then\n\
    \          return true\n        else\n          return s:sub(1, #t) == t or s:sub(1,\
    \ #t) == t:reverse() or s:sub(1, #t) == t:reverse():reverse()\n        end\n \
    \     end\n      if substr_check(s, t) then\n        return true\n      elseif\
    \ substr_check_rotation(s, t) then\n        return substr_check_rotation(s, t)\n\
    \      else\n        return false\n      end\n    end\n    return substr_check(s,\
    \ t)\n  end\n  return substr_check(a, b)\nend", "  local function is_substr_or_rotation(s,\
    \ t)\n    return s:sub(1, #t) == t or s:sub(1, #t) .. t:sub(1, #t) .. s:sub(2,\
    \ #s) ~= t\n  end\n  local function is_substr_or_rotations(s, t)\n    return s:sub(1,\
    \ #t) == t or s:sub(1, #t) .. t:sub(1, #t) .. s:sub(2, #s) ~= t\n  end\n  local\
    \ function is_substr_or_rotations_or_space(s, t)\n    return s:sub(1, #t) == t\
    \ or s:sub(1, #t) .. t:sub(1, #t) .. s:sub(2, #s) ~= t or s:sub(1, #t) .. t:sub(1,\
    \ #t) .. ' ' ~= s\n  end\n  return is_substr_or_rotations_or_space(a, b) or is_substr_or_rotations(a,\
    \ b) or is_substr_or_rotation(a, b)\nend", "  local pattern = a:gsub(\"%w+\",\
    \ function(c)\n    return string.char(tonumber(c))\n  end)\n  local pattern =\
    \ pattern:gsub(\"%S+\", function(c)\n    return string.char(tonumber(c))\n  end)\n\
    \  local pattern = pattern:gsub(\"%S+\", function(c)\n    return string.char(tonumber(c))\n\
    \  end)\n  local pattern = pattern:gsub(\"%S+\", function(c)\n    return string.char(tonumber(c))\n\
    \  end)\n  local pattern = pattern:gsub(\"%S+\", function(c)\n    return string.char(tonumber(c))\n\
    \  end)\n  local pattern = pattern:gsub(\"%S+\", function(c)\n    return string.char(tonumber(c))\n\
    \  end)\n  local pattern = pattern:gsub(\"%S+\", function(c)\n    return string.char(tonumber(c))\n\
    \  end)\n  local pattern = pattern:gsub(\"%S+\", function(c)\n    return string.char(tonumber(c))\n\
    \  end)\n  local pattern = pattern:gsub(\"%S+\", function(c)\n    return string.char(tonumber(c))\n\
    \  end)\n  local pattern = pattern:gsub(\"%S+\", function(c)\n    return string.char(tonumber(c))\n\
    \  end)\n  local pattern = pattern:gsub(\"%S+\", function(c)\n    return string.char(tonumber(c))\n\
    \  end)\n  local pattern = pattern:gsub(\"%S+\", function(c)\n    return string.char(tonumber(c))\n\
    \  end)\n  local pattern = pattern:gsub(\"%S+\", function(c)\n    return string.char(tonumber(c))\n\
    \  end)\n  local pattern = pattern:gsub(\"%S+\", function(c)\n    return string.char(tonumber(c))\n\
    \  end)\n  local pattern = pattern:gsub(\"%S+\", function(c)\n    return string.char(tonumber(c))\n\
    \  end)\n  local pattern = pattern:gsub(\"%S+\", function(c)\n    return string.char(tonumber(c))\n\
    \  end)\n  local pattern = pattern:gsub(\"%S+\", function(c)\n    return string.char(tonumber(c))\n\
    \  end)\n  local pattern = pattern:gsub(\"%S+\", function(c)\n    return string.char(tonumber(c))\n\
    \  end)\n  local pattern = pattern:gsub(\"%", "  local function helper(w, i)\n\
    \    if i == #w then\n      return true\n    end\n    if w[i] == '' then\n   \
    \   return helper(w, i+1)\n    end\n    if a[i] == b[i] then\n      return helper(w,\
    \ i+1)\n    end\n    if a[i] ~= '' then\n      if helper(w, i+1) then\n      \
    \  return true\n      end\n    end\n    if b[i] ~= '' then\n      if helper(w,\
    \ i-1) then\n        return true\n      end\n    end\n    return false\n  end\n\
    \  return helper(a, b)\nend", "  local function find(a, b)\n    local i, j = 1,\
    \ #a\n    while i <= j do\n      local c = string.sub(a, b)\n      if string.find(c,\
    \ a[i]) then\n        return i\n      end\n      i = i + 1\n    end\n    return\
    \ nil\n  end\n  local function find(a, b)\n    local i, j = 1, #a\n    while i\
    \ <= j do\n      local c = string.sub(a, b)\n      if string.find(c, a[i]) then\n\
    \        return i\n      end\n      i = i + 1\n    end\n    return nil\n  end\n\
    \  local function find(a, b)\n    local i, j = 1, #a\n    while i <= j do\n  \
    \    local c = string.sub(a, b)\n      if string.find(c, a[i]) then\n        return\
    \ i\n      end\n      i = i + 1\n    end\n    return nil\n  end\n  local function\
    \ find(a, b)\n    local i, j = 1, #a\n    while i <= j do\n      local c = string.sub(a,\
    \ b)\n      if string.find(c, a[i]) then\n        return i\n      end\n      i\
    \ = i + 1\n    end\n    return nil\n  end\n  local function find(a, b)\n    local\
    \ i, j = 1, #a\n    while i <= j do\n      local c = string.sub(a, b)\n      if\
    \ string.find(c, a[i]) then\n        return i\n      end\n      i = i + 1\n  \
    \  end\n    return nil\n  end\n  local function find(a, b)\n    local i, j = 1,\
    \ #a\n    while i <= j do\n      local c = string.sub(a, b)\n      if string.find(c,\
    \ a[i]) then\n        return i\n      end\n      i = i + 1\n    end\n    return\
    \ nil\n  end\n  local function find(a, b)\n    local i, j = 1, #a\n    while i\
    \ <= j do\n      local c = string.sub(a, b)\n      if string.find(c, a[i]) then\n\
    \        return i\n      end\n      i = i + 1\n    end\n    return nil\n  end\n\
    \  local function find(a, b)\n    local i, j = 1, #a\n    while i <= j do\n  \
    \    local c = string.sub(a, b)\n      if string.find(c, a[i]) then\n        return\
    \ i\n      end\n      i = i + 1\n    end\n    return nil\n  end\n  local function\
    \ find(a, b)\n    local i, j = 1, #a\n    while i <= j do\n      local c = string.sub(a,\
    \ b)\n      if string.find(c, a[i]) then\n        return i\n      end\n      i\
    \ = i + 1\n    end\n    return nil\n  end\n  local function find(a, b)\n    local\
    \ i, j = 1, #a\n    while i <= j do\n      local c = string.sub(a, b)\n      if\
    \ string.find(c, a[i]) then\n        return i\n      end\n      i = i + 1", " \
    \ local function check(cycle)\n    if cycle == 1 then\n      return true\n   \
    \ end\n    if a:sub(1, cycle) == b:sub(1, cycle) then\n      return check(cycle\
    \ + 1)\n    end\n    return false\n  end\n  return check(1)\nend", "  local function\
    \ is_substring_of_substring(a, b)\n    return a:sub(1, #b) == b\n  end\n  local\
    \ function is_substring_of_rotation(a, b)\n    return a:sub(1, #b) ~= b:sub(1,\
    \ #a) ~= false\n  end\n  local function is_substring_of_rotations(a, b, ...)\n\
    \    local function is_substring_of_rotation(a, b, ...)\n      return is_substring_of_rotation(b,\
    \ a, ...)\n    end\n    local function is_substring_of_rotations(a, b, ...)\n\
    \      return is_substring_of_rotations(b, a, ...)\n    end\n    local function\
    \ is_substring_of_rotations(a, b, ...)\n      return is_substring_of_rotations(b,\
    \ a, ...)\n    end\n    local function is_substring_of_rotations(a, b, ...)\n\
    \      return is_substring_of_rotations(b, a, ...)\n    end\n    local function\
    \ is_substring_of_rotations(a, b, ...)\n      return is_substring_of_rotations(b,\
    \ a, ...)\n    end\n    local function is_substring_of_rotations(a, b, ...)\n\
    \      return is_substring_of_rotations(b, a, ...)\n    end\n    local function\
    \ is_substring_of_rotations(a, b, ...)\n      return is_substring_of_rotations(b,\
    \ a, ...)\n    end\n    local function is_substring_of_rotations(a, b, ...)\n\
    \      return is_substring_of_rotations(b, a, ...)\n    end\n    local function\
    \ is_substring_of_rotations(a, b, ...)\n      return is_substring_of_rotations(b,\
    \ a, ...)\n    end\n    local function is_substring_of_rotations(a, b, ...)\n\
    \      return is_substring_of_rotations(b, a, ...)\n    end\n    local function\
    \ is_substring_of_rotations(a, b, ...)\n      return is_substring_of_rotations(b,\
    \ a, ...)\n    end\n    local function is_substring_of_rotations(a, b, ...)\n\
    \      return is_substring_of_rotations(b, a, ...)\n    end\n    local function\
    \ is_substring_of_rotations(a, b, ...)\n      return is_substring_of_rotations(b,\
    \ a, ...)\n    end\n    local function is_substring_of_rotations(a, b, ...)\n\
    \      return is_substring_of_rotations(b, a, ...)\n    end\n    local function\
    \ is_substring_of_rotations(a, b, ...)\n      return is_substring_of_rotations(b,\
    \ a, ...)\n    end\n    local function is_substring_of_rotations(a, b, ...)\n\
    \      return is_substring_of_rotations(b, a, ...)\n    end\n    local function\
    \ is_substring_of_rotations(a, b, ...)\n      return is_substring_of_rotations(b,\
    \ a, ...)\n    end\n    local function is_substring_of_rotations(a, b, ...)\n\
    \      return is_substring_of_rotations(b, a, ...)\n    end\n", "  local function\
    \ is_substring(a, b)\n    return a:sub(1, #a) == b\n  end\n  local function is_rotated_substring(a,\
    \ b)\n    return a:sub(1, #a) == b:sub(1, #b) and is_substring(b:sub(2, #b), a:sub(2,\
    \ #a))\n  end\n  return is_substring(b:sub(1, #a), a) or is_rotated_substring(b:sub(1,\
    \ #a), a)\nend", "  local function is_substr_match(a, b)\n    local function is_substr_match_recursive(a,\
    \ b)\n      if a ~= nil then\n        if b == nil then\n          return false\n\
    \        else\n          local c = string.find(a, b)\n          if c ~= nil then\n\
    \            return true\n          else\n            return is_substr_match_recursive(b,\
    \ string.sub(b, 1, c - 1))\n          end\n        end\n      else\n        return\
    \ false\n      end\n    end\n    return is_substr_match_recursive(a, b)\n  end\n\
    \  return is_substr_match(a, b)\nend", "    local function find(a, b)\n      \
    \  local i = 0\n        while i < #a do\n            if a[i] == b[i] then\n  \
    \              i = i + 1\n            else\n                return false\n   \
    \         end\n        end\n        return true\n    end\n    if find(a, b) then\n\
    \        return true\n    end\n    if find(b, a) then\n        return true\n \
    \   end\n    if find(b, a) then\n        return true\n    end\n    if find(b,\
    \ a) then\n        return true\n    end\n    if find(b, a) then\n        return\
    \ true\n    end\n    if find(b, a) then\n        return true\n    end\n    if\
    \ find(b, a) then\n        return true\n    end\n    if find(b, a) then\n    \
    \    return true\n    end\n    if find(b, a) then\n        return true\n    end\n\
    \    if find(b, a) then\n        return true\n    end\n    if find(b, a) then\n\
    \        return true\n    end\n    if find(b, a) then\n        return true\n \
    \   end\n    if find(b, a) then\n        return true\n    end\n    if find(b,\
    \ a) then\n        return true\n    end\n    if find(b, a) then\n        return\
    \ true\n    end\n    if find(b, a) then\n        return true\n    end\n    if\
    \ find(b, a) then\n        return true\n    end\n    if find(b, a) then\n    \
    \    return true\n    end\n    if find(b, a) then\n        return true\n    end\n\
    \    if find(b, a) then\n        return true\n    end\n    if find(b, a) then\n\
    \        return true\n    end\n    if find(b, a) then\n        return true\n \
    \   end\n    if find(b, a) then\n        return true\n    end\n    if find(b,\
    \ a) then\n        return true\n    end\n    if find(b, a) then\n        return\
    \ true\n    end\n    if find(b, a) then\n        return true\n    end\n    if\
    \ find(b, a) then\n        return true\n    end\n    if find(b, a) then\n    \
    \    return true\n    end\n    if find(b, a) then\n        return true\n    end\n\
    \    if find(b, a) then\n        return true\n    end\n    if find(b, a) then\n\
    \        return true\n    end\n    if find(b, a) then\n        return true\n \
    \   end\n    if find(b, a) then\n        return true\n    end\n    if find(b,\
    \ a) then\n        return true\n    end\n    if find(b, a) then\n        return\
    \ true\n    end\n    if find(b, a) then\n        return true\n    end\n    if\
    \ find(b, a) then\n        return true\n    end\n    if find(b, a) then\n    \
    \    return true\n    end\n    if find(b, a) then\n        return true\n    end\n",
  "  local function is_substring(cycle, word)\n    if cycle == 0 then\n      return\
    \ true\n    end\n    if cycle == 1 then\n      return word == a\n    end\n   \
    \ return word == a or word == b\n  end\n  local function is_substring_rotation(word,\
    \ cycle)\n    if cycle == 0 then\n      return true\n    end\n    if cycle ==\
    \ 1 then\n      return word == b\n    end\n    return word == b or word == a\n\
    \  end\n  local function is_substring_rotations(word, cycle)\n    if cycle ==\
    \ 0 then\n      return true\n    end\n    if cycle == 1 then\n      return word\
    \ == a or word == b\n    end\n    return word == a or word == b or word == a or\
    \ word == b\n  end\n  local function is_substring_rotations_cycle(word, cycle)\n\
    \    if cycle == 0 then\n      return true\n    end\n    if cycle == 1 then\n\
    \      return word == a or word == b\n    end\n    return word == a or word ==\
    \ b or word == a or word == b or word == a or word == b\n  end\n  local function\
    \ is_substring_rotations_cycles(word, cycle)\n    if cycle == 0 then\n      return\
    \ true\n    end\n    if cycle == 1 then\n      return word == a or word == b\n\
    \    end\n    return word == a or word == b or word == a or word == b or word\
    \ == a or word == b or word == a or word == b\n  end\n  local function is_substring_rotations_cycles_cycle(word,\
    \ cycle)\n    if cycle == 0 then\n      return true\n    end\n    if cycle ==\
    \ 1 then\n      return word == a or word == b\n    end\n    return word == a or\
    \ word == b or word == a or word == b or word == a or word == b or word == a or\
    \ word == b or word == a or word == b\n  end\n  local function is_substring_rotations_cycles_cycles(word,\
    \ cycle)\n    if cycle == 0 then\n      return true\n    end\n    if cycle ==\
    \ 1 then\n      return word == a or word == b\n    end\n    return word == a or\
    \ word == b or word == a or word == b or word == a or word == b or word == a or\
    \ word == b or word == a or word == b or word == a or word == b\n  end\n  local\
    \ function is_substring_rotations_cycles_cycles_cycle(word, cycle)\n    if cycle\
    \ == 0 then\n      return true\n    end\n    if cycle == ", "  local function\
    \ is_substring_helper(str, substr)\n    str = str:lower()\n    substr = substr:lower()\n\
    \    for i = 1, #str do\n      if str:sub(i, i) ~= substr:sub(i, i) then\n   \
    \     return false\n      end\n    end\n    return true\n  end\n  return is_substring_helper(a,\
    \ b) or is_substring_helper(b, a)\nend", "  local function is_substring(c)\n \
    \   return string.find(a, c, 1, true) ~= nil\n  end\n  local function is_substring_rotation(c)\n\
    \    return string.find(a, c, 1, true) ~= nil\n  end\n  local function is_substring_rotations(c)\n\
    \    return string.find(a, c, 1, true) ~= nil\n  end\n  local function is_substring_rotations_rotation(c)\n\
    \    return string.find(a, c, 1, true) ~= nil\n  end\n  local function is_substring_rotations_rotations(c)\n\
    \    return string.find(a, c, 1, true) ~= nil\n  end\n  local function is_substring_rotations_rotations_rotation(c)\n\
    \    return string.find(a, c, 1, true) ~= nil\n  end\n  local function is_substring_rotations_rotations_rotations(c)\n\
    \    return string.find(a, c, 1, true) ~= nil\n  end\n  local function is_substring_rotations_rotations_rotations_rotation(c)\n\
    \    return string.find(a, c, 1, true) ~= nil\n  end\n  local function is_substring_rotations_rotations_rotations_rotations(c)\n\
    \    return string.find(a, c, 1, true) ~= nil\n  end\n  local function is_substring_rotations_rotations_rotations_rotations_rotation(c)\n\
    \    return string.find(a, c, 1, true) ~= nil\n  end\n  local function is_substring_rotations_rotations_rotations_rotations_rotations(c)\n\
    \    return string.find(a, c, 1, true) ~= nil\n  end\n  local function is_substring_rotations_rotations_rotations_rotations_rotations_rotation(c)\n\
    \    return string.find(a, c, 1, true) ~= nil\n  end\n  local function is_substring_rotations_rotations_rotations_rotations_rotations_rotations(c)\n\
    \    return string.find(a, c, 1, true) ~= nil\n  end\n  local function is_substring_rotations_rotations_rotations_rotations_rotations_rotations_rotation(c)\n\
    \    return string.find(a, c, 1, true) ~= nil\n  end\n  local function is_substring_rotations_rotations_rotations_rotations_rotations_rotations_rotations(c)\n\
    \    return string.find(a, c, 1, true) ~= nil\n  end\n  local function is_substring_rotations_rotations_rotations_rotations_rotations_rotations_rotations_rotation(c)\n\
    \    return string.find(a, c, 1, true) ~= nil\n  end\n  local function is_substring_rotations_rotations_rotations_rotations_rotations_rotations_rotations_rotations(c)\n\
    \    return string.find(a, c, 1, true) ~= nil\n  end\n  local function ", "  local\
    \ function check(cycle, word)\n    if cycle == 0 then\n      return true\n   \
    \ end\n    if word == nil then\n      return false\n    end\n    if word:sub(1,\
    \ #a) == a then\n      return check(--cycle, word:sub(2, #word))\n    end\n  \
    \  if word:sub(1, #b) == b then\n      return check(--cycle, word:sub(2, #word))\n\
    \    end\n    return false\n  end\n  return check(0, nil)\nend", "  local function\
    \ helper(w, i)\n    if i == #w then\n      return true\n    end\n    if w[i] ==\
    \ '' then\n      return helper(w, i + 1)\n    end\n    if a[i] ~= b[i] then\n\
    \      return false\n    end\n    return helper(w, i + 1)\n  end\n  return helper(a,\
    \ b)\nend", "  local function helper(w, i)\n    if i == #w then\n      return\
    \ true\n    end\n    if w[i] == '' then\n      return helper(w, i+1)\n    end\n\
    \    if a[i] ~= b[#w] then\n      return false\n    end\n    return helper(w,\
    \ i+1)\n  end\n  return helper(a, b)\nend", "  local function is_substring_of_word(word,\
    \ pattern)\n    local function is_substring_of_pattern(substring, pattern)\n \
    \     local function is_substring_of_substring(substring, pattern)\n        return\
    \ string.find(substring, pattern, 1, true) ~= nil\n      end\n      return is_substring_of_pattern(substring,\
    \ pattern) or\n             is_substring_of_substring(substring, pattern)\n  \
    \  end\n    return is_substring_of_word(word, pattern) or\n           is_substring_of_pattern(word,\
    \ pattern)\n  end\n  return is_substring_of_word(a, b) or\n         is_substring_of_pattern(a,\
    \ b)\nend", "  local function is_substring(c)\n    return a:find(c) ~= nil\n \
    \ end\n  local function is_rotated_substring(c)\n    return a:find(c) ~= nil and\
    \ a:find(c, 1, true) ~= nil\n  end\n  local function is_rotated_substring2(c)\n\
    \    return a:find(c) ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 2, true)\
    \ ~= nil\n  end\n  local function is_rotated_substring3(c)\n    return a:find(c)\
    \ ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 2, true) ~= nil and a:find(c,\
    \ 3, true) ~= nil\n  end\n  local function is_rotated_substring4(c)\n    return\
    \ a:find(c) ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 2, true) ~= nil\
    \ and a:find(c, 3, true) ~= nil and a:find(c, 4, true) ~= nil\n  end\n  local\
    \ function is_rotated_substring5(c)\n    return a:find(c) ~= nil and a:find(c,\
    \ 1, true) ~= nil and a:find(c, 2, true) ~= nil and a:find(c, 3, true) ~= nil\
    \ and a:find(c, 4, true) ~= nil and a:find(c, 5, true) ~= nil\n  end\n  local\
    \ function is_rotated_substring6(c)\n    return a:find(c) ~= nil and a:find(c,\
    \ 1, true) ~= nil and a:find(c, 2, true) ~= nil and a:find(c, 3, true) ~= nil\
    \ and a:find(c, 4, true) ~= nil and a:find(c, 5, true) ~= nil and a:find(c, 6,\
    \ true) ~= nil\n  end\n  local function is_rotated_substring7(c)\n    return a:find(c)\
    \ ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 2, true) ~= nil and a:find(c,\
    \ 3, true) ~= nil and a:find(c, 4, true) ~= nil and a:find(c, 5, true) ~= nil\
    \ and a:find(c, 6, true) ~= nil and a:find(c, 7, true) ~= nil\n  end\n  local\
    \ function is_rotated_substring8(c)\n    return a:find(c) ~= nil and a:find(c,\
    \ 1, true) ~= nil and a:find(c, 2, true) ~= nil and a:find(c, 3, true) ~= nil\
    \ and a:find(c, 4, true) ~= nil and a:find(c, 5, true) ~= nil", "  local function\
    \ is_substring(cycle, word)\n    local pattern = string.sub(cycle, 1, #word)\n\
    \    return pattern == word or pattern:sub(1, #pattern) == word\n  end\n  local\
    \ function is_rotated_substring(cycle, word)\n    local pattern = string.sub(cycle,\
    \ #word, #cycle + 1)\n    return pattern == word or pattern:sub(1, #pattern) ==\
    \ word\n  end\n  local function is_substring_or_rotated_substring(cycle, word)\n\
    \    return is_substring(cycle, word) or is_rotated_substring(cycle, word)\n \
    \ end\n  local function is_substring_or_rotated_substring_or_substring(cycle,\
    \ word)\n    return is_substring_or_rotated_substring(cycle, word) or is_substring(cycle,\
    \ word)\n  end\n  local function is_substring_or_rotated_substring_or_substring_or_substring(cycle,\
    \ word)\n    return is_substring_or_rotated_substring_or_substring(cycle, word)\
    \ or is_substring_or_substring(cycle, word)\n  end\n  local function is_substring_or_rotated_substring_or_substring_or_substring_or_substring(cycle,\
    \ word)\n    return is_substring_or_rotated_substring_or_substring_or_substring(cycle,\
    \ word) or is_substring_or_substring_or_substring(cycle, word)\n  end\n  local\
    \ function is_substring_or_rotated_substring_or_substring_or_substring_or_substring_or_substring(cycle,\
    \ word)\n    return is_substring_or_rotated_substring_or_substring_or_substring_or_substring(cycle,\
    \ word) or is_substring_or_substring_or_substring_or_substring(cycle, word)\n\
    \  end\n  local function is_substring_or_rotated_substring_or_substring_or_substring_or_substring_or_substring_or_substring(cycle,\
    \ word)\n    return is_substring_or_rotated_substring_or_substring_or_substring_or_substring_or_substring_or_substring(cycle,\
    \ word) or is_substring_or_substring_or_substring_or_substring_or_substring(cycle,\
    \ word)\n  end\n  local function is_substring_or_rotated_substring_or_substring_or_substring_or_substring_or_substring_or_substring_or_substring(cycle,\
    \ word)\n    return is_substring_or_rotated_substring_or_substring_or_substring_or_substring_or_substring_or_substring_or_substring(cycle,\
    \ word) or is_substring_or_substring_or_substring_or_substring_or_substring(cy",
  "  local function find(a, b)\n    local i, j = 1, #a\n    while i <= j do\n    \
    \  local m = math.floor((i + j) / 2)\n      if a[i] == b[m] then\n        i =\
    \ m + 1\n      elseif a[i] < b[m] then\n        j = m\n      else\n        i =\
    \ m\n      end\n    end\n    return i\n  end\n  local function find(a, b)\n  \
    \  local i, j = 1, #a\n    while i <= j do\n      local m = math.floor((i + j)\
    \ / 2)\n      if a[i] == b[m] then\n        i = m + 1\n      elseif a[i] < b[m]\
    \ then\n        j = m\n      else\n        i = m\n      end\n    end\n    return\
    \ i\n  end\n  local function find(a, b)\n    local i, j = 1, #a\n    while i <=\
    \ j do\n      local m = math.floor((i + j) / 2)\n      if a[i] == b[m] then\n\
    \        i = m + 1\n      elseif a[i] < b[m] then\n        j = m\n      else\n\
    \        i = m\n      end\n    end\n    return i\n  end\n  local function find(a,\
    \ b)\n    local i, j = 1, #a\n    while i <= j do\n      local m = math.floor((i\
    \ + j) / 2)\n      if a[i] == b[m] then\n        i = m + 1\n      elseif a[i]\
    \ < b[m] then\n        j = m\n      else\n        i = m\n      end\n    end\n\
    \    return i\n  end\n  local function find(a, b)\n    local i, j = 1, #a\n  \
    \  while i <= j do\n      local m = math.floor((i + j) / 2)\n      if a[i] ==\
    \ b[m] then\n        i = m + 1\n      elseif a[i] < b[m] then\n        j = m\n\
    \      else\n        i = m\n      end\n    end\n    return i\n  end\n  local function\
    \ find(a, b)\n    local i, j = 1, #a\n    while i <= j do\n      local m = math.floor((i\
    \ + j) / 2)\n      if a[i] == b[m] then\n        i = m + 1\n      elseif a[i]\
    \ < b[m] then\n        j = m\n      else\n        i = m\n      end\n    end\n\
    \    return i\n  end\n  local function find(a, b)\n    local i, j = 1, #a\n  \
    \  while i <= j do\n      local m = math.floor((i + j) / 2)\n      if a[i] ==\
    \ b[m] then\n        i = m + 1\n      elseif a[i] < b[m] then\n        j = m\n\
    \      else\n        i = m\n      end\n    end", "  local function is_substring(cycle,\
    \ word)\n    if cycle == 0 then\n      return true\n    end\n    if cycle == 1\
    \ then\n      return word == a\n    end\n    return word == a or word == b:sub(1,\
    \ cycle - 1) or is_substring(cycle - 1, b:sub(cycle, #b))\n  end\n  return is_substring(2,\
    \ b)\nend", "  local function is_substring_of(a, b)\n    local function is_substring(c)\n\
    \      return string.find(a, c) > -1 or string.find(b, c) > -1\n    end\n    local\
    \ function is_rotated_substring(c)\n      return string.find(string.sub(a, 2,\
    \ -1), c) > -1 or string.find(string.sub(b, 2, -1), c) > -1\n    end\n    return\
    \ is_substring(c) or is_rotated_substring(c)\n  end\n  return is_substring_of(a,\
    \ b)\nend", "  local function find(a, b)\n    local i, j = 1, #a\n    while i\
    \ <= j do\n      local m = math.min(i+j, b)\n      if a[i] == b[m] then\n    \
    \    i = m\n      elseif a[i] < b[m] then\n        j = m\n      else\n       \
    \ i = m\n      end\n    end\n    return i\n  end\n  local function find(a, b)\n\
    \    local i, j = 1, #a\n    while i <= j do\n      local m = math.min(i+j, b)\n\
    \      if a[i] == b[m] then\n        i = m\n      elseif a[i] > b[m] then\n  \
    \      j = m\n      else\n        i = m\n      end\n    end\n    return i\n  end\n\
    \  local function find(a, b)\n    local i, j = 1, #a\n    while i <= j do\n  \
    \    local m = math.min(i+j, b)\n      if a[i] == b[m] then\n        i = m\n \
    \     elseif a[i] < b[m] then\n        j = m\n      else\n        i = m\n    \
    \  end\n    end\n    return i\n  end\n  local function find(a, b)\n    local i,\
    \ j = 1, #a\n    while i <= j do\n      local m = math.min(i+j, b)\n      if a[i]\
    \ == b[m] then\n        i = m\n      elseif a[i] > b[m] then\n        j = m\n\
    \      else\n        i = m\n      end\n    end\n    return i\n  end\n  local function\
    \ find(a, b)\n    local i, j = 1, #a\n    while i <= j do\n      local m = math.min(i+j,\
    \ b)\n      if a[i] == b[m] then\n        i = m\n      elseif a[i] < b[m] then\n\
    \        j = m\n      else\n        i = m\n      end\n    end\n    return i\n\
    \  end\n  local function find(a, b)\n    local i, j = 1, #a\n    while i <= j\
    \ do\n      local m = math.min(i+j, b)\n      if a[i] == b[m] then\n        i\
    \ = m\n      elseif a[i] > b[m] then\n        j = m\n      else\n        i = m\n\
    \      end\n    end\n    return i\n  end\n  local function find(a, b)\n    local\
    \ i, j = 1, #a\n    while i <= j do\n      local m = math.min(i+j, b)\n      if\
    \ a[i] == b[m] then\n        i = m\n      elseif a[i] < b[m] then\n        j =\
    \ m\n      else\n        i = m\n      end\n    end\n    return i\n  end\n  ",
  "  local function is_substring_helper(str, substr)\n    local function helper(str,\
    \ substr)\n      local function helper(str, substr)\n        if str:sub(1, #substr)\
    \ == substr then\n          return true\n        end\n        if str:sub(1, #substr)\
    \ ~= substr then\n          return false\n        end\n        return helper(str:sub(#substr\
    \ + 1), substr)\n      end\n      return helper(str, substr)\n    end\n    return\
    \ is_substring_helper(str, substr)\n  end\n  return is_substring_helper(a, b)\
    \ ~= nil\nend", "  local function is_substring_helper(str, substr)\n    return\
    \ str:sub(1, #str) == substr\n  end\n  local function is_substring_helper2(str,\
    \ substr)\n    local i, j = 1, #str\n    while i <= j do\n      if str:sub(i,\
    \ #str) == substr then\n        return true\n      end\n      i = i + #substr\
    \ + 1\n    end\n    return false\n  end\n  local function is_substring_helper3(str,\
    \ substr)\n    local i, j = 1, #str\n    while i <= j do\n      if str:sub(i,\
    \ #str) == substr then\n        return true\n      end\n      i = i + #substr\
    \ - 1\n    end\n    return false\n  end\n  local function is_substring_helper4(str,\
    \ substr)\n    local i, j = 1, #str\n    while i <= j do\n      if str:sub(i,\
    \ #str) == substr then\n        return true\n      end\n      i = i + #substr\
    \ + 1\n    end\n    return false\n  end\n  local function is_substring_helper5(str,\
    \ substr)\n    local i, j = 1, #str\n    while i <= j do\n      if str:sub(i,\
    \ #str) == substr then\n        return true\n      end\n      i = i + #substr\
    \ - 1\n    end\n    return false\n  end\n  local function is_substring_helper6(str,\
    \ substr)\n    local i, j = 1, #str\n    while i <= j do\n      if str:sub(i,\
    \ #str) == substr then\n        return true\n      end\n      i = i + #substr\
    \ + 1\n    end\n    return false\n  end\n  local function is_substring_helper7(str,\
    \ substr)\n    local i, j = 1, #str\n    while i <= j do\n      if str:sub(i,\
    \ #str) == substr then\n        return true\n      end\n      i = i + #substr\
    \ - 1\n    end\n    return false\n  end\n  local function is_substring_helper8(str,\
    \ substr)\n    local i, j = 1, #str\n    while i <= j do\n      if str:sub(i,\
    \ #str) == substr then\n        return true\n      end\n      i = i + #substr\
    \ + 1\n    end\n    return false\n  end\n  local function is_substring_helper9(str,\
    \ substr)\n    local i, j = 1, #str\n    while i <= j do\n      if str:sub(i,\
    \ #str) == substr then\n        return true\n      end\n      i = i + #substr\
    \ - 1\n    end\n    return false\n  end\n  local function is_substring_helper10(str,\
    \ substr)\n    local i, j = 1, #str\n    while i <= j do\n      if str:sub(i,\
    \ #str) == substr then\n        return ", "  local function is_substring(c)\n\
    \    return string.find(a, c) > -1 or string.find(b, c) > -1\n  end\n  local function\
    \ is_rotated_substring(c)\n    return string.find(string.sub(a, 2, -1), c) > -1\
    \ or string.find(string.sub(b, 2, -1), c) > -1\n  end\n  local function is_rotated_substring2(c)\n\
    \    return string.find(string.sub(a, 2, -1), c) > -1 or string.find(string.sub(b,\
    \ 2, -1), c) > -1\n  end\n  local function is_rotated_substring3(c)\n    return\
    \ string.find(string.sub(a, 2, -1), c) > -1 or string.find(string.sub(b, 2, -1),\
    \ c) > -1\n  end\n  local function is_rotated_substring4(c)\n    return string.find(string.sub(a,\
    \ 2, -1), c) > -1 or string.find(string.sub(b, 2, -1), c) > -1\n  end\n  local\
    \ function is_rotated_substring5(c)\n    return string.find(string.sub(a, 2, -1),\
    \ c) > -1 or string.find(string.sub(b, 2, -1), c) > -1\n  end\n  local function\
    \ is_rotated_substring6(c)\n    return string.find(string.sub(a, 2, -1), c) >\
    \ -1 or string.find(string.sub(b, 2, -1), c) > -1\n  end\n  local function is_rotated_substring7(c)\n\
    \    return string.find(string.sub(a, 2, -1), c) > -1 or string.find(string.sub(b,\
    \ 2, -1), c) > -1\n  end\n  local function is_rotated_substring8(c)\n    return\
    \ string.find(string.sub(a, 2, -1), c) > -1 or string.find(string.sub(b, 2, -1),\
    \ c) > -1\n  end\n  local function is_rotated_substring9(c)\n    return string.find(string.sub(a,\
    \ 2, -1), c) > -1 or string.find(string.sub(b, 2, -1), c) > -1\n  end\n  local\
    \ function is_rotated_substring10(c)\n    return string.find(string.sub(a, 2,\
    \ -1), c) > -1 or string.find(string.sub(b, 2, -1), c) > -1\n  end\n  local function\
    \ is_rotated_substring11(c)\n    return string.find(string.sub(a, 2, -1), c) >\
    \ -1 or string.find(string.sub(b, 2, -1), c) > -1\n  end\n  local function is_rotated_substring12(c)\n\
    \    return string.find(string.sub(a, 2, -1), c) > -1 or string.find(string.sub(b,\
    \ 2, -1), c) > -1\n  end\n  local function is_rotated_substring13(c)\n    return\
    \ string.find(string.sub(a, 2, -1), c) > -1 or string.find(string.sub(b, 2, -1),\
    \ c) > -1\n  end\n  local function is_rotated_substring14(c)\n    return string.find(string.sub(a,\
    \ 2, -1), c) > -1 or string.find(string.sub(b, 2, -1), c) > -1\n  end", "  local\
    \ function helper(w, i)\n    if i == #w then\n      return true\n    end\n   \
    \ if a[i] ~= w[i] then\n      return false\n    end\n    return helper(w, i +\
    \ 1)\n  end\n  return helper(b, #b)\nend", "    local function is_substring(a,\
    \ b)\n        local function is_substring_aux(a, b)\n            if a == nil then\n\
    \                return false\n            elseif b == nil then\n            \
    \    return true\n            elseif #a == 0 then\n                return false\n\
    \            elseif #b == 0 then\n                return true\n            elseif\
    \ #a == 1 then\n                return b == a\n            elseif #b == 1 then\n\
    \                return a == b\n            else\n                return false\n\
    \            end\n        end\n        return is_substring_aux(a, b)\n    end\n\
    \    return is_substring(a, b)\nend", "  local function is_substr_or_rotation(s,\
    \ t)\n    return #s >= #t or #t >= #s or #t > #s and string.find(s, t) == #t\n\
    \  end\n  local function is_substring(t)\n    return is_substr_or_rotation(a,\
    \ t)\n  end\n  local function is_rotation(t)\n    return is_substr_or_rotation(b,\
    \ t)\n  end\n  local function is_substring_or_rotation(a, b)\n    return is_substring(b)\
    \ or is_rotation(b)\n  end\n  return is_substring_or_rotation(a, b)\nend", " \
    \ local function is_substring_helper(str, substr)\n    return str:sub(1, #substr)\
    \ == substr\n  end\n  return a:find(b) or is_substring_helper(b, a)\nend", " \
    \ local function helper(str, i, j)\n    if i == j then return true end\n    if\
    \ str[i] == b[1] then\n      if j + 1 < #str and str[i + j + 1] == b[2] then\n\
    \        return helper(str, i + 1, j + 2)\n      else\n        return helper(str,\
    \ i + 1, j)\n      end\n    else\n      return helper(str, i, j + 1)\n    end\n\
    \  end\n  return helper(a, 1, #a)\nend", "  local function is_substr_or_rotation(word,\
    \ pattern)\n    return string.find(word, pattern, true) ~= nil\n  end\n  local\
    \ function is_rotation(word, pattern)\n    return string.find(word, pattern, true)\
    \ ~= nil\n  end\n  local function is_substr_or_rotations(word, pattern)\n    return\
    \ string.find(word, pattern, true) ~= nil\n  end\n  local function is_rotations(word,\
    \ pattern)\n    return string.find(word, pattern, true) ~= nil\n  end\n  local\
    \ function is_substr_or_rotations_or_rotations(word, pattern)\n    return string.find(word,\
    \ pattern, true) ~= nil\n  end\n  local function is_rotations_or_rotations(word,\
    \ pattern)\n    return string.find(word, pattern, true) ~= nil\n  end\n  local\
    \ function is_substr_or_rotations_or_rotations_or_rotations(word, pattern)\n \
    \   return string.find(word, pattern, true) ~= nil\n  end\n  local function is_rotations_or_rotations_or_rotations(word,\
    \ pattern)\n    return string.find(word, pattern, true) ~= nil\n  end\n  local\
    \ function is_substr_or_rotations_or_rotations_or_rotations_or_rotations(word,\
    \ pattern)\n    return string.find(word, pattern, true) ~= nil\n  end\n  local\
    \ function is_rotations_or_rotations_or_rotations_or_rotations(word, pattern)\n\
    \    return string.find(word, pattern, true) ~= nil\n  end\n  local function is_substr_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(word,\
    \ pattern)\n    return string.find(word, pattern, true) ~= nil\n  end\n  local\
    \ function is_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(word,\
    \ pattern)\n    return string.find(word, pattern, true) ~= nil\n  end\n  local\
    \ function is_substr_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(word,\
    \ pattern)\n    return string.find(word, pattern, true) ~= nil\n  end\n  local\
    \ function is_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(word,\
    \ pattern)\n    return string.find(word, pattern, true) ~= nil\n  end\n  local\
    \ function is_substr_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(word,\
    \ pattern)\n    return string.find(word, pattern, true) ~= nil\n  end\n  local\
    \ function is_rotations_or_rotations_or_rotations_or_rotations_or_rotation", " \
    \ local function rotation(s, t)\n    local function rotate(s)\n      local t =\
    \ {}\n      for i = 1, #s do\n        table.insert(t, string.sub(s,i,i))\n   \
    \   end\n      return t\n    end\n    local function rotate(t)\n      local s\
    \ = {}\n      for i = 1, #t do\n        table.insert(s, string.sub(t,i,i))\n \
    \     end\n      return s\n    end\n    local function rotate(s, t)\n      local\
    \ t = {}\n      for i = 1, #s do\n        table.insert(t, string.sub(s,i,i))\n\
    \      end\n      return t\n    end\n    local function rotate(t, s)\n      local\
    \ s = {}\n      for i = 1, #t do\n        table.insert(s, string.sub(t,i,i))\n\
    \      end\n      return s\n    end\n    local function rotate(s, t)\n      local\
    \ t = {}\n      for i = 1, #s do\n        table.insert(t, string.sub(s,i,i))\n\
    \      end\n      return t\n    end\n    local function rotate(t, s)\n      local\
    \ s = {}\n      for i = 1, #t do\n        table.insert(s, string.sub(t,i,i))\n\
    \      end\n      return s\n    end\n    local function rotate(s, t)\n      local\
    \ t = {}\n      for i = 1, #s do\n        table.insert(t, string.sub(s,i,i))\n\
    \      end\n      return t\n    end\n    local function rotate(t, s)\n      local\
    \ s = {}\n      for i = 1, #t do\n        table.insert(s, string.sub(t,i,i))\n\
    \      end\n      return s\n    end\n    local function rotate(s, t)\n      local\
    \ t = {}\n      for i = 1, #s do\n        table.insert(t, string.sub(s,i,i))\n\
    \      end\n      return t\n    end\n    local function rotate(t, s)\n      local\
    \ s = {}\n      for i = 1, #t do\n        table.insert(s, string.sub(t,i,i))\n\
    \      end\n      return s\n    end\n    local function rotate(s, t)\n      local\
    \ t = {}\n      for i = 1, #s do\n        table.insert(t, string.sub(s,i,i))\n\
    \      end\n      return t\n    end\n    local function rotate(t, s)\n      local\
    \ s = {}\n      for i = 1, #t do\n        table.insert(s, string.sub(t,i,i))\n\
    \      end\n      return s\n    end\n    local function rotate(s, t)\n      local\
    \ t = {}\n      for i = 1, #s do\n        table.insert(t, string.sub(s,i,i))\n\
    \      end\n      return t\n    end\n    local function rotate(t, s)\n      local\
    \ s = {}\n      for i = 1, #t do\n        table.insert(s, string.sub(t", "  local\
    \ function helper(w, i)\n    if i == #w then\n      return true\n    end\n   \
    \ if w[i] == '' then\n      return helper(w, i + 1)\n    end\n    if a[i] ~= b[#b]\
    \ then\n      return false\n    end\n    return helper(w, i + 1)\n  end\n  return\
    \ helper(a, b)\nend", "  local function helper(str, start, end)\n    if start\
    \ > end then\n      return false\n    end\n    if start == end then\n      return\
    \ true\n    end\n    if start > 0 then\n      local sub = str:sub(start, end)\n\
    \      if a:find(sub) ~= nil then\n        return helper(str, start, start + sub:len())\n\
    \      end\n    end\n    return false\n  end\n  return helper(a, b, #a)\nend",
  "  local function rots(s)\n    local t = {}\n    for i = 1, #s do\n      t[i] =\
    \ string.sub(s,i,i)\n    end\n    return t\n  end\n  local function match(s, t)\n\
    \    local n = #t\n    local m = #s\n    for i = 1, n do\n      if t[i] ~= s[i]\
    \ then\n        return false\n      end\n    end\n    return true\n  end\n  local\
    \ function rots_match(s, t)\n    local n = #t\n    local m = #s\n    for i = 1,\
    \ n do\n      if t[i] ~= s[i+m] then\n        return false\n      end\n    end\n\
    \    return true\n  end\n  local function rots_match(s, t)\n    local n = #t\n\
    \    local m = #s\n    for i = 1, n do\n      if t[i] ~= s[i+m] then\n       \
    \ return false\n      end\n    end\n    return true\n  end\n  local function rots_match(s,\
    \ t)\n    local n = #t\n    local m = #s\n    for i = 1, n do\n      if t[i] ~=\
    \ s[i+m] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  local function rots_match(s, t)\n    local n = #t\n    local m = #s\n    for\
    \ i = 1, n do\n      if t[i] ~= s[i+m] then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function rots_match(s, t)\n    local\
    \ n = #t\n    local m = #s\n    for i = 1, n do\n      if t[i] ~= s[i+m] then\n\
    \        return false\n      end\n    end\n    return true\n  end\n  local function\
    \ rots_match(s, t)\n    local n = #t\n    local m = #s\n    for i = 1, n do\n\
    \      if t[i] ~= s[i+m] then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local function rots_match(s, t)\n    local n = #t\n    local\
    \ m = #s\n    for i = 1, n do\n      if t[i] ~= s[i+m] then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local function rots_match(s, t)\n\
    \    local n = #t\n    local m = #s\n    for i = 1, n do\n      if t[i] ~= s[i+m]\
    \ then\n        return false\n      end\n    end\n    return true\n  end\n  local\
    \ function rots_match(s, t)\n    local n = #t\n    local m = #s\n    for i = ",
  "  local function is_substring_helper(substr, str, i, j)\n    if i == j then return\
    \ true end\n    if substr == str then return true end\n    if substr[i] ~= str[i]\
    \ then return false end\n    return is_substring_helper(substr, str, i + 1, j)\
    \ or is_substring_helper(substr, str, i, j - 1)\n  end\n  return is_substring_helper(a,\
    \ b, #a, #b - 1)\nend", "  local function helper(str, i, j)\n    if i == j then\
    \ return true end\n    if str[i] == b[1] then\n      if j > 0 then\n        return\
    \ helper(str, i + 1, j - 1)\n      else\n        return true\n      end\n    end\n\
    \    return helper(str, i + 1, j)\n  end\n  return helper(a, 1, #a)\nend", " \
    \ local function is_substring(cycle, word)\n    local pattern = string.sub(cycle,\
    \ 1, #word)\n    return pattern == word or pattern:sub(1, #pattern) == word\n\
    \  end\n  local function is_rotation(word, rotation)\n    local pattern = string.sub(word,\
    \ 1, #rotation)\n    return pattern == rotation or pattern:sub(1, #pattern) ==\
    \ rotation\n  end\n  local function is_substring_or_rotation(a, b)\n    return\
    \ is_substring(a) or is_rotation(a)\n  end\n  local function is_substring_or_rotation_or_both(a,\
    \ b)\n    return is_substring_or_rotation(a) or is_rotation(a) or is_substring(b)\n\
    \  end\n  local function is_substring_or_rotation_or_both_or_none(a, b)\n    return\
    \ is_substring_or_rotation(a) or is_rotation(a) or is_substring(b) or is_rotation(b)\n\
    \  end\n  local function is_substring_or_rotation_or_both_or_none_or_both(a, b)\n\
    \    return is_substring_or_rotation(a) or is_rotation(a) or is_substring(b) or\
    \ is_rotation(b) or is_substring(a) or is_rotation(a)\n  end\n  local function\
    \ is_substring_or_rotation_or_both_or_none_or_both_or_none(a, b)\n    return is_substring_or_rotation(a)\
    \ or is_rotation(a) or is_substring(b) or is_rotation(b) or is_substring(a) or\
    \ is_rotation(a) or is_substring(b)\n  end\n  local function is_substring_or_rotation_or_both_or_none_or_both_or_none(a,\
    \ b)\n    return is_substring_or_rotation(a) or is_rotation(a) or is_substring(b)\
    \ or is_rotation(b) or is_substring(a) or is_rotation(a) or is_substring(b) or\
    \ is_rotation(b)\n  end\n  local function is_substring_or_rotation_or_both_or_none_or_both_or_none(a,\
    \ b)\n    return is_substring_or_rotation(a) or is_rotation(a) or is_substring(b)\
    \ or is_rotation(b) or is_substring(a) or is_rotation(a) or is_substring(b) or\
    \ is_rotation(b) or is_substring(a)\n  end\n  local function is_substring_or_rotation_or_both_or_none_or_both_or_none(a,\
    \ b)\n    return is_substring_or_rotation(a) or is_rotation(a) or is_substring(b)\
    \ or is_rotation(b) or is_substring(a) or is_rotation(a) or is_substring(b) or\
    \ is_rotation(b) or is_substring(a) or is_rotation(a)\n  end\n  local function\
    \ is_substring_or_rotation_or_both_or_none_or_both_or_none(a, b)\n    return is_substring_or_rotation(a)\
    \ or is_rotation(a) or is_substring(b) or is_rotation(b) or is_substring(a) or\
    \ is_rotation(a) or is_substring(b) or is_rotation(b) or is_substring(a", "  local\
    \ function is_substr_rotation(s, t)\n    return string.find(s, t) ~= nil\n  end\n\
    \  local function is_substr_rotation(s, t)\n    return string.find(s, t) ~= nil\n\
    \  end\n  local function is_substr_rotation(s, t)\n    return string.find(s, t)\
    \ ~= nil\n  end\n  local function is_substr_rotation(s, t)\n    return string.find(s,\
    \ t) ~= nil\n  end\n  local function is_substr_rotation(s, t)\n    return string.find(s,\
    \ t) ~= nil\n  end\n  local function is_substr_rotation(s, t)\n    return string.find(s,\
    \ t) ~= nil\n  end\n  local function is_substr_rotation(s, t)\n    return string.find(s,\
    \ t) ~= nil\n  end\n  local function is_substr_rotation(s, t)\n    return string.find(s,\
    \ t) ~= nil\n  end\n  local function is_substr_rotation(s, t)\n    return string.find(s,\
    \ t) ~= nil\n  end\n  local function is_substr_rotation(s, t)\n    return string.find(s,\
    \ t) ~= nil\n  end\n  local function is_substr_rotation(s, t)\n    return string.find(s,\
    \ t) ~= nil\n  end\n  local function is_substr_rotation(s, t)\n    return string.find(s,\
    \ t) ~= nil\n  end\n  local function is_substr_rotation(s, t)\n    return string.find(s,\
    \ t) ~= nil\n  end\n  local function is_substr_rotation(s, t)\n    return string.find(s,\
    \ t) ~= nil\n  end\n  local function is_substr_rotation(s, t)\n    return string.find(s,\
    \ t) ~= nil\n  end\n  local function is_substr_rotation(s, t)\n    return string.find(s,\
    \ t) ~= nil\n  end\n  local function is_substr_rotation(s, t)\n    return string.find(s,\
    \ t) ~= nil\n  end\n  local function is_substr_rotation(s, t)\n    return string.find(s,\
    \ t) ~= nil\n  end\n  local function is_substr_rotation(s, t)\n    return string.find(s,\
    \ t) ~= nil\n  end\n  local function is_substr_rotation(s, t)\n    return string.find(s,\
    \ t) ~= nil\n  end\n  local function is_substr_rotation(s, t)\n    return string.find(s,\
    \ t) ~= nil\n  end\n  local function is_substr_rotation(s, t)\n    return string.find(s,\
    \ t) ~= nil\n  end\n  local function is_substr_", "  local function is_substring(c)\n\
    \    return a:sub(1, #c) == c\n  end\n  local function is_rotated_substring(c)\n\
    \    return a:sub(1, #c) == c:reverse()\n  end\n  local function is_rotated_substring2(c)\n\
    \    return a:sub(1, #c) == c:reverse():reverse()\n  end\n  local function is_rotated_substring3(c)\n\
    \    return a:sub(1, #c) == c:reverse():reverse():reverse()\n  end\n  local function\
    \ is_rotated_substring4(c)\n    return a:sub(1, #c) == c:reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_rotated_substring5(c)\n    return a:sub(1, #c) ==\
    \ c:reverse():reverse():reverse():reverse():reverse()\n  end\n  local function\
    \ is_rotated_substring6(c)\n    return a:sub(1, #c) == c:reverse():reverse():reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_rotated_substring7(c)\n    return a:sub(1, #c) ==\
    \ c:reverse():reverse():reverse():reverse():reverse():reverse():reverse()\n  end\n\
    \  local function is_rotated_substring8(c)\n    return a:sub(1, #c) == c:reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_rotated_substring9(c)\n    return a:sub(1, #c) ==\
    \ c:reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_rotated_substring10(c)\n    return a:sub(1, #c) ==\
    \ c:reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_rotated_substring11(c)\n    return a:sub(1, #c) ==\
    \ c:reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_rotated_substring12(c)\n    return a:sub(1, #c) ==\
    \ c:reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_rotated_substring13(c)\n    return a:sub(1, #c) ==\
    \ c:reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_rotated_substring14(c)\n    return a:sub(1, #c) ==\
    \ c:reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_rotated_substring15(c)\n    return a:sub", "  local\
    \ function is_substring(c)\n    return string.find(a, c) ~= nil\n  end\n  local\
    \ function is_rotated_substring(c)\n    return string.find(string.sub(a, string.len(a)\
    \ - string.len(c) + 1, string.len(a)), c) ~= nil\n  end\n  local function is_rotated_substring_inverse(c)\n\
    \    return string.find(string.sub(a, string.len(a) - string.len(c) + 1, string.len(a)),\
    \ c) ~= nil\n  end\n  local function is_rotated_substring_inverse2(c)\n    return\
    \ string.find(string.sub(a, string.len(a) - string.len(c) + 1, string.len(a)),\
    \ c) ~= nil\n  end\n  local function is_rotated_substring_inverse3(c)\n    return\
    \ string.find(string.sub(a, string.len(a) - string.len(c) + 1, string.len(a)),\
    \ c) ~= nil\n  end\n  local function is_rotated_substring_inverse4(c)\n    return\
    \ string.find(string.sub(a, string.len(a) - string.len(c) + 1, string.len(a)),\
    \ c) ~= nil\n  end\n  local function is_rotated_substring_inverse5(c)\n    return\
    \ string.find(string.sub(a, string.len(a) - string.len(c) + 1, string.len(a)),\
    \ c) ~= nil\n  end\n  local function is_rotated_substring_inverse6(c)\n    return\
    \ string.find(string.sub(a, string.len(a) - string.len(c) + 1, string.len(a)),\
    \ c) ~= nil\n  end\n  local function is_rotated_substring_inverse7(c)\n    return\
    \ string.find(string.sub(a, string.len(a) - string.len(c) + 1, string.len(a)),\
    \ c) ~= nil\n  end\n  local function is_rotated_substring_inverse8(c)\n    return\
    \ string.find(string.sub(a, string.len(a) - string.len(c) + 1, string.len(a)),\
    \ c) ~= nil\n  end\n  local function is_rotated_substring_inverse9(c)\n    return\
    \ string.find(string.sub(a, string.len(a) - string.len(c) + 1, string.len(a)),\
    \ c) ~= nil\n  end\n  local function is_rotated_substring_inverse10(c)\n    return\
    \ string.find(string.sub(a, string.len(a) - string.len(c) + 1, string.len(a)),\
    \ c) ~= nil\n  end\n  local function is_rotated_substring_inverse11(c)\n    return\
    \ string.find(string.sub(a, string.len(a) - string.len(c) + 1, string.len(a)),\
    \ c) ~= nil\n  end\n  local function is_rotated_substring_inverse12(c)\n    return\
    \ string.find(string.sub(a, string.len(a) - string.len(c) + 1, string.len(", " \
    \ local pattern = a:gsub(\"%w+\", function(c)\n    return string.sub(b, 1, #b\
    \ - #c + 1)\n  end)\n  return a:find(pattern, 1, true) ~= nil\nend", "  local\
    \ function is_substring(cycle)\n    local result = true\n    for i = 1, #cycle\
    \ do\n      if string.find(a, cycle:sub(1, i), 1, true) ~= nil then\n        result\
    \ = false\n        break\n      end\n    end\n    return result\n  end\n  local\
    \ function is_substring_rotation(cycle)\n    local result = true\n    for i =\
    \ 1, #cycle do\n      if string.find(a, cycle:sub(1, i), 1, true) ~= nil then\n\
    \        result = false\n        break\n      end\n    end\n    return result\n\
    \  end\n  local function is_substring_rotations(cycle)\n    local result = true\n\
    \    for i = 1, #cycle do\n      if string.find(a, cycle:sub(1, i), 1, true) ~=\
    \ nil then\n        result = false\n        break\n      end\n    end\n    return\
    \ result\n  end\n  local function is_substring_rotations_rotations(cycle)\n  \
    \  local result = true\n    for i = 1, #cycle do\n      if string.find(a, cycle:sub(1,\
    \ i), 1, true) ~= nil then\n        result = false\n        break\n      end\n\
    \    end\n    return result\n  end\n  local function is_substring_rotations_rotations_rotations(cycle)\n\
    \    local result = true\n    for i = 1, #cycle do\n      if string.find(a, cycle:sub(1,\
    \ i), 1, true) ~= nil then\n        result = false\n        break\n      end\n\
    \    end\n    return result\n  end\n  local function is_substring_rotations_rotations_rotations_rotations(cycle)\n\
    \    local result = true\n    for i = 1, #cycle do\n      if string.find(a, cycle:sub(1,\
    \ i), 1, true) ~= nil then\n        result = false\n        break\n      end\n\
    \    end\n    return result\n  end\n  local function is_substring_rotations_rotations_rotations_rotations_rotations(cycle)\n\
    \    local result = true\n    for i = 1, #cycle do\n      if string.find(a, cycle:sub(1,\
    \ i), 1, true) ~= nil then\n        result = false\n        break\n      end\n\
    \    end\n    return result\n  end\n  local function is_substring_rotations_rotations_rotations_rotations_rotations_rotations(cycle)\n\
    \    local result = true\n    for i = 1, #cycle do\n      if string.find(a, cycle:sub(1,\
    \ i), 1, true) ~= nil then\n        result = false\n        break\n      end\n\
    \    end\n    return result\n  end\n  local function is_substring_rotations_rotations_rotations_rotations_rotations_rotations_rotations(cycle)\n\
    \    local result = true\n    for i = 1, #cycle do\n      if string.find(a, cycle:sub",
  "  local function helper(w, i)\n    if i == #w then\n      return true\n    end\n\
    \    if w[i] == '' then\n      return helper(w, i+1)\n    end\n    if a[i] ==\
    \ b[i] then\n      return helper(w, i+1)\n    end\n    if a[i] ~= '' then\n  \
    \    return helper(w, i+1)\n    end\n    return helper(w, i+1)\n  end\n  return\
    \ helper(a, b)\nend", "  local function is_substring(cycle, word)\n    local found\
    \ = false\n    for i = 1, #cycle do\n      local word = word:sub(1, cycle[i])\n\
    \      if word == cycle then\n        found = true\n        break\n      end\n\
    \    end\n    return found\n  end\n  local function is_substring_rotation(cycle,\
    \ word)\n    local found = false\n    for i = 1, #cycle do\n      local word =\
    \ word:sub(1, cycle[i])\n      if word == cycle then\n        found = true\n \
    \       break\n      end\n    end\n    return found\n  end\n  local function is_substring_rotations(cycle,\
    \ word)\n    local found = false\n    for i = 1, #cycle do\n      local word =\
    \ word:sub(1, cycle[i])\n      if word == cycle then\n        found = true\n \
    \       break\n      end\n    end\n    return found\n  end\n  local function is_substring_rotations_rotations(cycle,\
    \ word)\n    local found = false\n    for i = 1, #cycle do\n      local word =\
    \ word:sub(1, cycle[i])\n      if word == cycle then\n        found = true\n \
    \       break\n      end\n    end\n    return found\n  end\n  local function is_substring_rotations_rotations_rotations(cycle,\
    \ word)\n    local found = false\n    for i = 1, #cycle do\n      local word =\
    \ word:sub(1, cycle[i])\n      if word == cycle then\n        found = true\n \
    \       break\n      end\n    end\n    return found\n  end\n  local function is_substring_rotations_rotations_rotations_rotations(cycle,\
    \ word)\n    local found = false\n    for i = 1, #cycle do\n      local word =\
    \ word:sub(1, cycle[i])\n      if word == cycle then\n        found = true\n \
    \       break\n      end\n    end\n    return found\n  end\n  local function is_substring_rotations_rotations_rotations_rotations_rotations(cycle,\
    \ word)\n    local found = false\n    for i = 1, #cycle do\n      local word =\
    \ word:sub(1, cycle[i])\n      if word == cycle then\n        found = true\n \
    \       break\n      end\n    end\n    return found\n  end\n  local function is_substring_rotations_rotations_rotations_rotations_rotations_rotations(cycle,\
    \ word)\n    local found = false\n    for i = 1, #cycle do\n      local word =\
    \ word:sub(1, cycle[i])\n      if word == cycle then\n        found = true\n \
    \       break\n      end\n    end\n    return found\n  end\n  local function is_substring_rotations_rotations_rotations_rotations_rotations_rotations_rotations(cycle,\
    \ word)\n    local found = false\n    for i = 1, #cycle ", "  local function helper(str,\
    \ i, j)\n    if i == j then\n      return true\n    end\n    if i > j then\n \
    \     return false\n    end\n    if str[i] == b[j] then\n      return helper(str,\
    \ i + 1, j + 1)\n    end\n    return helper(str, i, j - 1)\n  end\n  return helper(a,\
    \ b, #b)\nend", "  local function is_substring_helper(str, substr)\n    return\
    \ str:sub(1, #str) == substr\n  end\n  local function is_substring_recursive(str,\
    \ substr)\n    if #str == 0 then\n      return true\n    end\n    if str:sub(1,\
    \ #str) == substr then\n      return true\n    end\n    return is_substring_recursive(str:sub(#str\
    \ + 1), substr)\n  end\n  return is_substring_recursive(a:sub(1, #a), b)\nend",
  "  local pattern = a:gsub(\"%w+\", function(w)\n    return string.sub(w, 1, #w)\
    \ .. string.sub(w, #w)\n  end)\n  return a:find(pattern) >= 0 and b:find(pattern)\
    \ >= 0\nend", "  local function is_substring_helper(str, pattern)\n    local function\
    \ helper(str, pattern)\n      if str:len() < pattern:len() then\n        return\
    \ false\n      end\n      local i = 0\n      while i < str:len() and i < pattern:len()\
    \ do\n        if str:sub(i, i) ~= pattern:sub(i, i) then\n          return false\n\
    \        end\n        i = i + 1\n      end\n      return true\n    end\n    return\
    \ helper(str, pattern) or helper(str:sub(#str + 1, #str), pattern)\n  end\n  return\
    \ is_substring_helper(a, b) or is_substring_helper(b, a)\nend", "    local function\
    \ rots(word)\n        local rots = {}\n        for i = 1, #word do\n         \
    \   table.insert(rots, word:sub(i, i + 1))\n        end\n        return rots\n\
    \    end\n    local function substr_check(word, pattern)\n        local function\
    \ rots(word)\n            local rots = {}\n            for i = 1, #word do\n \
    \               table.insert(rots, word:sub(i, i + 1))\n            end\n    \
    \        return rots\n        end\n        local function substr_check(word, pattern)\n\
    \            local function rots(word)\n                local rots = {}\n    \
    \            for i = 1, #word do\n                    table.insert(rots, word:sub(i,\
    \ i + 1))\n                end\n                return rots\n            end\n\
    \            local function substr_check(word, pattern)\n                local\
    \ function rots(word)\n                    local rots = {}\n                 \
    \   for i = 1, #word do\n                        table.insert(rots, word:sub(i,\
    \ i + 1))\n                    end\n                    return rots\n        \
    \        end\n                local function substr_check(word, pattern)\n   \
    \                 local function rots(word)\n                        local rots\
    \ = {}\n                        for i = 1, #word do\n                        \
    \    table.insert(rots, word:sub(i, i + 1))\n                        end\n   \
    \                     return rots\n                    end\n                 \
    \   local function substr_check(word, pattern)\n                        local\
    \ function rots(word)\n                            local rots = {}\n         \
    \                   for i = 1, #word do\n                                table.insert(rots,\
    \ word:sub(i, i + 1))\n                            end\n                     \
    \       return rots\n                        end\n                        local\
    \ function substr_check(word, pattern)\n                            local function\
    \ rots(word)\n                                local rots = {}\n              \
    \                  for i = 1, #word do\n                                    table.insert(rots,\
    \ word:sub(i, i + 1))\n                                end\n                 \
    \               return rots\n                            end\n               \
    \             local function substr_check(word, pattern)\n                   \
    \             local function rots(word)\n                                    local\
    \ rots = {}\n                                    for i = 1, #word do\n       \
    \                                 table.insert(rots, word:sub(i, i + 1))\n   \
    \                                 end\n                                    return\
    \ rots\n                                end\n                                local\
    \ function substr_check(word, pattern)\n                                    local\
    \ function rots(word)\n                                        local rots = {}\n\
    \                                        for i = 1, #word do\n               \
    \                             table.insert(rots, word:sub(i, i + 1))\n       \
    \                                 end\n                                      \
    \  return rots\n                                    end\n                    \
    \                local function substr_check(word, pattern)\n                \
    \                        local function rots(word)\n                         \
    \                   local rots = {}\n                                        \
    \    for i = 1, #word do\n                                                table.insert(rots,\
    \ word:sub(i, i + 1))\n                                            end\n     \
    \                                       return rots\n                        \
    \                end\n                                        local function substr_check(word, ",
  "  local function is_substr_or_rotation(word, pattern)\n    return word:sub(1, #word)\
    \ == pattern or word:sub(1, #word) .. word:sub(-#pattern+1, #word) == pattern\n\
    \  end\n  local function is_substr_or_rotations(word, pattern)\n    return word:sub(1,\
    \ #word) == pattern or word:sub(1, #word) .. word:sub(-#pattern+1, #word) == pattern\
    \ or word:sub(-#pattern+1, #word) == pattern\n  end\n  local function is_substr_or_rotations_or_space(word,\
    \ pattern)\n    return word:sub(1, #word) == pattern or word:sub(1, #word) ..\
    \ word:sub(-#pattern+1, #word) == pattern or word:sub(-#pattern+1, #word) == pattern\
    \ or word:sub(1, #word) == pattern\n  end\n  local function is_substr_or_rotations_or_space_or_space(word,\
    \ pattern)\n    return word:sub(1, #word) == pattern or word:sub(1, #word) ..\
    \ word:sub(-#pattern+1, #word) == pattern or word:sub(-#pattern+1, #word) == pattern\
    \ or word:sub(1, #word) == pattern or word:sub(1, #word) == pattern\n  end\n \
    \ local function is_substr_or_rotations_or_space_or_space_or_space(word, pattern)\n\
    \    return word:sub(1, #word) == pattern or word:sub(1, #word) .. word:sub(-#pattern+1,\
    \ #word) == pattern or word:sub(-#pattern+1, #word) == pattern or word:sub(1,\
    \ #word) == pattern or word:sub(1, #word) == pattern or word:sub(1, #word) ==\
    \ pattern\n  end\n  local function is_substr_or_rotations_or_space_or_space_or_space_or_space(word,\
    \ pattern)\n    return word:sub(1, #word) == pattern or word:sub(1, #word) ..\
    \ word:sub(-#pattern+1, #word) == pattern or word:sub(-#pattern+1, #word) == pattern\
    \ or word:sub(1, #word) == pattern or word:sub(1, #word) == pattern or word:sub(1,\
    \ #word) == pattern or word:sub(1, #word) == pattern\n  end\n  local function\
    \ is_substr_or_rotations_or_space_or_space_or_space_or_space_or_space(word, pattern)\n\
    \    return word:sub(1, #word) == pattern or word:sub(1, #word) .. word:sub(-#pattern+1,\
    \ #word) == pattern or word:sub(-#pattern+1, #word) == pattern or word:", "  local\
    \ function is_substring_of_rotation(s, t)\n    local function is_substring_of_rotation2(s,\
    \ t)\n      local function is_substring_of_rotation3(s, t)\n        local function\
    \ is_substring_of_rotation4(s, t)\n          local function is_substring_of_rotation5(s,\
    \ t)\n            local function is_substring_of_rotation6(s, t)\n           \
    \   local function is_substring_of_rotation7(s, t)\n                local function\
    \ is_substring_of_rotation8(s, t)\n                  local function is_substring_of_rotation9(s,\
    \ t)\n                    local function is_substring_of_rotation10(s, t)\n  \
    \                    local function is_substring_of_rotation11(s, t)\n       \
    \                 local function is_substring_of_rotation12(s, t)\n          \
    \                local function is_substring_of_rotation13(s, t)\n           \
    \                 local function is_substring_of_rotation14(s, t)\n          \
    \                    local function is_substring_of_rotation15(s, t)\n       \
    \                         local function is_substring_of_rotation16(s, t)\n  \
    \                                local function is_substring_of_rotation17(s,\
    \ t)\n                                    local function is_substring_of_rotation18(s,\
    \ t)\n                                      local function is_substring_of_rotation19(s,\
    \ t)\n                                        local function is_substring_of_rotation20(s,\
    \ t)\n                                          local function is_substring_of_rotation21(s,\
    \ t)\n                                            local function is_substring_of_rotation22(s,\
    \ t)\n                                              local function is_substring_of_rotation23(s,\
    \ t)\n                                                local function is_substring_of_rotation24(s,\
    \ t)\n                                                  local function is_substring_of_rotation25(s,\
    \ t)\n                                                    local function is_substring_of_rotation26(s,\
    \ t)\n                                                      local function is_substring_of_rotation27(s,\
    \ t)\n                                                        local function is_substring_of_rotation28(s,\
    \ t)\n                                                          local function\
    \ is_substring_of_rotation29(s, t)\n                                         \
    \                   local function is_substring_of_rotation30(s, t)\n        \
    \                                                      local function is_substring_of_rotation31(s,\
    \ t)\n                                                                local function\
    \ is_substring_of_rotation32(s, t)\n                                         \
    \                         local function is_substring_of_rotation33(s, t)\n  \
    \                                                                  local function\
    \ is_substring_of_rotation34(s, t)\n                                         \
    \                             local function is_substring_of_rotation35(s, t)\n\
    \                                                                        local\
    \ function is_substring_of_rotation36(s, t)\n                                \
    \                                          local function is_substring_of_rotation37(s,\
    \ t)\n                                                                       \
    \     local function is_substring_of_rotation38(s, t)\n                      \
    \                                                        local function is_substring_of_rotation39(s,\
    \ t)\n                                                                       \
    \         local function is_substring_of_rotation40(s, t)\n                  \
    \                                                                local function\
    \ is_substring_of_rotation41(s, t)\n                                         \
    \                                           local function is_substring_of_rotation42(s, ",
  "  local function substr_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n\
    \  local function rotate_check(s, t)\n    local i, j = string.find(s, t), string.find(s,\
    \ t, 1, true)\n    if i == nil then\n      return false\n    end\n    if j ==\
    \ nil then\n      return true\n    end\n    return string.sub(s, i, j) == string.sub(s,\
    \ j, i)\n  end\n  local function rotate_check(s, t, k)\n    local i, j = string.find(s,\
    \ t), string.find(s, t, 1, true)\n    if i == nil then\n      return false\n \
    \   end\n    if j == nil then\n      return true\n    end\n    return string.sub(s,\
    \ i, j) == string.sub(s, j, i) and string.sub(s, i, k) == string.sub(s, k, j)\n\
    \  end\n  local function rotate_check(s, t, k)\n    local i, j = string.find(s,\
    \ t), string.find(s, t, 1, true)\n    if i == nil then\n      return false\n \
    \   end\n    if j == nil then\n      return true\n    end\n    return string.sub(s,\
    \ i, j) == string.sub(s, j, i) and string.sub(s, i, k) == string.sub(s, k, j)\n\
    \  end\n  local function rotate_check(s, t, k)\n    local i, j = string.find(s,\
    \ t), string.find(s, t, 1, true)\n    if i == nil then\n      return false\n \
    \   end\n    if j == nil then\n      return true\n    end\n    return string.sub(s,\
    \ i, j) == string.sub(s, j, i) and string.sub(s, i, k) == string.sub(s, k, j)\n\
    \  end\n  local function rotate_check(s, t, k)\n    local i, j = string.find(s,\
    \ t), string.find(s, t, 1, true)\n    if i == nil then\n      return false\n \
    \   end\n    if j == nil then\n      return true\n    end\n    return string.sub(s,\
    \ i, j) == string.sub(s, j, i) and string.sub(s, i, k) == string.sub(s, k, j)\n\
    \  end\n  local function rotate_check(s, t, k)\n    local i, j = string.find(s,\
    \ t), string.find(s, t, 1, true)\n    if i == nil then\n      return false\n \
    \   end\n    if j == nil then\n      return true\n    end\n    return string.sub(s,\
    \ i, j) == string.sub(s, j, i) and string.sub(s, i, k) == string.sub(s, k, j)\n\
    \  end\n  local function rotate_check(s, t, k)\n    local i, j = string.find(s,\
    \ t), string.find(s, t, 1, true)\n    if i == nil then\n      return false\n \
    \   end\n    if j == nil then\n      return true\n    end\n    return string.sub(s,\
    \ i, j) == string.sub(s, j, i) and ", "  local function is_substring(c)\n    return\
    \ a:sub(1, #c) == c\n  end\n  local function is_rotated_substring(c)\n    return\
    \ a:sub(1, #c) == c:reverse()\n  end\n  local function is_substring_or_rotated_substring(c)\n\
    \    return is_substring(c) or is_rotated_substring(c)\n  end\n  local function\
    \ is_substring_or_rotated_substring_or_none(c)\n    return is_substring_or_rotated_substring(c)\
    \ or c == '\\0'\n  end\n  local function is_rotated_substring_or_none(c)\n   \
    \ return is_rotated_substring(c) or c == '\\0'\n  end\n  local function is_substring_or_rotated_substring_or_none(c)\n\
    \    return is_substring_or_rotated_substring(c) or c == '\\0'\n  end\n  local\
    \ function is_substring_or_rotated_substring_or_none(c)\n    return is_substring_or_rotated_substring(c)\
    \ or c == '\\0'\n  end\n  local function is_substring_or_rotated_substring_or_none(c)\n\
    \    return is_substring_or_rotated_substring(c) or c == '\\0'\n  end\n  local\
    \ function is_substring_or_rotated_substring_or_none(c)\n    return is_substring_or_rotated_substring(c)\
    \ or c == '\\0'\n  end\n  local function is_substring_or_rotated_substring_or_none(c)\n\
    \    return is_substring_or_rotated_substring(c) or c == '\\0'\n  end\n  local\
    \ function is_substring_or_rotated_substring_or_none(c)\n    return is_substring_or_rotated_substring(c)\
    \ or c == '\\0'\n  end\n  local function is_substring_or_rotated_substring_or_none(c)\n\
    \    return is_substring_or_rotated_substring(c) or c == '\\0'\n  end\n  local\
    \ function is_substring_or_rotated_substring_or_none(c)\n    return is_substring_or_rotated_substring(c)\
    \ or c == '\\0'\n  end\n  local function is_substring_or_rotated_substring_or_none(c)\n\
    \    return is_substring_or_rotated_substring(c) or c == '\\0'\n  end\n  local\
    \ function is_substring_or_rotated_substring_or_none(c)\n    return is_substring_or_rotated_substring(c)\
    \ or c == '\\0'\n  end\n  local function is_substring_or_rotated_substring_or_none(c)\n\
    \    return is_substring_or_rotated_substring(c) or c == '\\0'\n  end\n  local\
    \ function is_substring_or_rotated_substring_or_none(c)\n    return is_substring_or_rotated_substring(c)\
    \ or c == '\\0'\n  end\n  local function is_sub", "  local function is_substring(c)\n\
    \    return string.find(a, c) ~= nil\n  end\n  local function is_substring_or_rotation(c)\n\
    \    return string.find(a, c) ~= nil or\n      string.find(string.sub(a, string.len(a)\
    \ - string.len(c) + 1, string.len(a)), c) ~= nil\n  end\n  local function is_substring_or_rotations(c)\n\
    \    return string.find(a, c) ~= nil or\n      string.find(string.sub(a, string.len(a)\
    \ - string.len(c) + 1, string.len(a)), c) ~= nil or\n      string.find(string.sub(a,\
    \ string.len(a) - string.len(c) + 1, string.len(a)), string.sub(a, string.len(a)\
    \ - string.len(c) + 1, string.len(a)) .. c) ~= nil\n  end\n  local function is_substring_or_rotations_or_rotations(c)\n\
    \    return string.find(a, c) ~= nil or\n      string.find(string.sub(a, string.len(a)\
    \ - string.len(c) + 1, string.len(a)), c) ~= nil or\n      string.find(string.sub(a,\
    \ string.len(a) - string.len(c) + 1, string.len(a)), string.sub(a, string.len(a)\
    \ - string.len(c) + 1, string.len(a)) .. c) ~= nil or\n      string.find(string.sub(a,\
    \ string.len(a) - string.len(c) + 1, string.len(a)), string.sub(a, string.len(a)\
    \ - string.len(c) + 1, string.len(a)) .. string.sub(a, string.len(a) - string.len(c)\
    \ + 1, string.len(a)) .. c) ~= nil\n  end\n  local function is_substring_or_rotations_or_rotations_or_rotations(c)\n\
    \    return string.find(a, c) ~= nil or\n      string.find(string.sub(a, string.len(a)\
    \ - string.len(c) + 1, string.len(a)), c) ~= nil or\n      string.find(string.sub(a,\
    \ string.len(a) - string.len(c) + 1, string.len(a)), string.sub(a, string.len(a)\
    \ - string.len(c) + 1, string.len(a)) .. c) ~= nil or\n      string.find(string.sub(a,\
    \ string.len(a) - string.len(c) + 1, string.len(a)), string.sub(a, string.len(a)\
    \ - string.len(c) + 1, string.len(a)) .. string.sub(a, string.len(a) - string.len(c)\
    \ + 1, string.len(a)) .. c) ~= nil or\n      string.find(string.sub(a, string.len(a)\
    \ - string.len(c) + 1, string.len(a)), string.sub(a, string.len(a) - string.len(c)\
    \ + 1, ", "  local function helper(str, i, j)\n    if i == j then\n      return\
    \ true\n    end\n    if str[i] == b or str[i] == b..'a' or str[i] == b..'b' then\n\
    \      return helper(str, i+1, j)\n    end\n    if str[j] == b or str[j] == b..'a'\
    \ or str[j] == b..'b' then\n      return helper(str, i, j-1)\n    end\n    return\
    \ false\n  end\n  return helper(a, b, #a)\nend", "  local function is_substring_of_a(b)\n\
    \    return a:sub(1, #b) == b\n  end\n  local function is_substring_of_a_or_a_rotation(s)\n\
    \    return is_substring_of_a(s) or is_substring_of_a(cycpattern_rotate(s, 1))\n\
    \  end\n  return is_substring_of_a_or_a_rotation(b) or is_substring_of_a_or_a_rotation(cycpattern_rotate(a,\
    \ b))\nend", "  local pattern = a:gsub('%w+', function(w)\n    return w:gsub('%w+',\
    \ function(w)\n      return w:gsub('%w+', function(w)\n        return w:gsub('%w+',\
    \ function(w)\n          return w:gsub('%w+', function(w)\n            return\
    \ w:gsub('%w+', function(w)\n              return w:gsub('%w+', function(w)\n\
    \                return w:gsub('%w+', function(w)\n                  return w:gsub('%w+',\
    \ function(w)\n                    return w:gsub('%w+', function(w)\n        \
    \              return w:gsub('%w+', function(w)\n                        return\
    \ w:gsub('%w+', function(w)\n                          return w:gsub('%w+', function(w)\n\
    \                            return w:gsub('%w+', function(w)\n              \
    \                return w:gsub('%w+', function(w)\n                          \
    \      return w:gsub('%w+', function(w)\n                                  return\
    \ w:gsub('%w+', function(w)\n                                    return w:gsub('%w+',\
    \ function(w)\n                                      return w:gsub('%w+', function(w)\n\
    \                                        return w:gsub('%w+', function(w)\n  \
    \                                        return w:gsub('%w+', function(w)\n  \
    \                                          return w:gsub('%w+', function(w)\n\
    \                                              return w:gsub('%w+', function(w)\n\
    \                                                return w:gsub('%w+', function(w)\n\
    \                                                  return w:gsub('%w+', function(w)\n\
    \                                                    return w:gsub('%w+', function(w)\n\
    \                                                      return w:gsub('%w+', function(w)\n\
    \                                                        return w:gsub('%w+',\
    \ function(w)\n                                                          return\
    \ w:gsub('%w+', function(w)\n                                                \
    \            return w:gsub('%w+', function(w)\n                              \
    \                                return w:gsub('%w+', function(w)\n          \
    \                                                      return w:gsub('%w+', function(w)\n\
    \                                                                  return w:gsub('%w+',\
    \ function(w)\n                                                              \
    \      return w:gsub('%w+', function(w)\n                                    \
    \                                  return w:gsub('%w+', function(w)\n        \
    \                                                                return w:gsub('%w+',\
    \ function(w)\n                                                              \
    \            return w:gsub('%w+', function(w)\n                              \
    \                                              return w:gsub('%w+', function(w)\n\
    \                                                                            \
    \  return w:gsub('%w+', function(w)\n                                        \
    \                                        return w:gsub('%w+', function(w)\n  \
    \                                                                            \
    \    return w:gsub('%w+', function(w)\n                                      \
    \                                              return w:gsub('%w+', function(w)\n\
    \                                                                            \
    \          return w:gsub('%w+', function(w)\n                                \
    \                                                        return w:gsub('%w+',\
    \ function(w)\n                                                              \
    \                            return w:gsub('%w+', function(w)\n              \
    \                                                                            \
    \  return w:gsub('%w+', function(w)\n                                        \
    \                                                      return w:gsub('", "  local\
    \ function helper(str, pos, len)\n    if len == 0 then\n      return true\n  \
    \  end\n    if str[pos] == b[len] then\n      return helper(str, pos + 1, len\
    \ - 1)\n    end\n    return helper(str, pos + 1, len)\n  end\n  return helper(a,\
    \ 1, #b - 1)\nend", "  local function is_substring_of_a(s)\n    return a:find(s)\
    \ == 0\n  end\n  local function is_substring_of_a_or_rotated_b(s)\n    return\
    \ is_substring_of_a(s) or is_substring_of_a_or_rotated_b(s, true)\n  end\n  local\
    \ function is_substring_of_a_or_rotated_b(s, rotated)\n    return a:find(s) ==\
    \ 0 or rotated and is_substring_of_a_or_rotated_b(a:sub(#a+1, #a), rotated)\n\
    \  end\n  return is_substring_of_a_or_rotated_b(b, true)\nend", "  local function\
    \ helper(str, i, j)\n    if i == j or str[i] == \"\" then return true end\n  \
    \  if str[i] ~= a[j] then return false end\n    return helper(str, i + 1, j) or\
    \ helper(str, i + 1, j - 1)\n  end\n  return helper(a, b, #a)\nend", "  local\
    \ function helper(w, i, j)\n    if j > #w then return false end\n    if i == j\
    \ then return true end\n    if w[i] == w[j] then return helper(w, i + 1, j + 1)\
    \ end\n    if w[i] > w[j] then return helper(w, i, j - 1) end\n    return helper(w,\
    \ i, j + 1)\n  end\n  return helper(a, b, #a)\nend", "  local function is_substring(c)\n\
    \    return a:find(c) > -1 or b:find(c) > -1\n  end\n  local function is_rotated_substring(c)\n\
    \    return a:find(c) > -1 and b:find(c) > -1 and a:find(c, 1, true) > -1 and\
    \ b:find(c, 1, true) > -1\n  end\n  local function is_rotated_substring_inverse(c)\n\
    \    return a:find(c) > -1 and b:find(c) > -1 and a:find(c, 1, true) > -1 and\
    \ b:find(c, 1, true) > -1\n  end\n  local function is_rotated_substring_inverse2(c)\n\
    \    return a:find(c) > -1 and b:find(c) > -1 and a:find(c, 1, true) > -1 and\
    \ b:find(c, 1, true) > -1\n  end\n  local function is_rotated_substring_inverse3(c)\n\
    \    return a:find(c) > -1 and b:find(c) > -1 and a:find(c, 1, true) > -1 and\
    \ b:find(c, 1, true) > -1\n  end\n  local function is_rotated_substring_inverse4(c)\n\
    \    return a:find(c) > -1 and b:find(c) > -1 and a:find(c, 1, true) > -1 and\
    \ b:find(c, 1, true) > -1\n  end\n  local function is_rotated_substring_inverse5(c)\n\
    \    return a:find(c) > -1 and b:find(c) > -1 and a:find(c, 1, true) > -1 and\
    \ b:find(c, 1, true) > -1\n  end\n  local function is_rotated_substring_inverse6(c)\n\
    \    return a:find(c) > -1 and b:find(c) > -1 and a:find(c, 1, true) > -1 and\
    \ b:find(c, 1, true) > -1\n  end\n  local function is_rotated_substring_inverse7(c)\n\
    \    return a:find(c) > -1 and b:find(c) > -1 and a:find(c, 1, true) > -1 and\
    \ b:find(c, 1, true) > -1\n  end\n  local function is_rotated_substring_inverse8(c)\n\
    \    return a:find(c) > -1 and b:find(c) > -1 and a:find(c, 1, true) > -1 and\
    \ b:find(c, 1, true) > -1\n  end\n  local function is_rotated_substring_inverse9(c)\n\
    \    return a:find(c) > -1 and b:find(c) > -1 and a:find(c, 1, true) > -1 and\
    \ b:find(c, 1, true) > -1\n  end\n  local function is_rotated_substring_inverse10(c)\n\
    \    return a:find(c) > -1 and b:find(c) > -1 and a:find(c, 1, true) > -1 and\
    \ b:find(c, 1, true) > -1\n  end\n  local function is_rotated_substring_inverse11(c)\n\
    \    return a:find(c) > -1 and b:find(", "  local function is_substring(cycle,\
    \ word)\n    local pattern = string.sub(cycle, 1, #word)\n    return string.find(word,\
    \ pattern, 1, true) ~= nil\n  end\n  local function is_substring_or_rotation(cycle,\
    \ word)\n    local pattern = string.sub(cycle, 1, #word)\n    return string.find(word,\
    \ pattern, 1, true) ~= nil or\n      string.find(word, pattern, 1, true) ~= nil\n\
    \  end\n  local function is_substring_or_rotations(cycle, word)\n    local pattern\
    \ = string.sub(cycle, 1, #word)\n    return string.find(word, pattern, 1, true)\
    \ ~= nil or\n      string.find(word, pattern, 1, true) ~= nil or\n      string.find(word,\
    \ pattern, 1, true) ~= nil\n  end\n  local function is_substring_or_rotations_or_rotations(cycle,\
    \ word)\n    local pattern = string.sub(cycle, 1, #word)\n    return string.find(word,\
    \ pattern, 1, true) ~= nil or\n      string.find(word, pattern, 1, true) ~= nil\
    \ or\n      string.find(word, pattern, 1, true) ~= nil or\n      string.find(word,\
    \ pattern, 1, true) ~= nil\n  end\n  local function is_substring_or_rotations_or_rotations_or_rotations(cycle,\
    \ word)\n    local pattern = string.sub(cycle, 1, #word)\n    return string.find(word,\
    \ pattern, 1, true) ~= nil or\n      string.find(word, pattern, 1, true) ~= nil\
    \ or\n      string.find(word, pattern, 1, true) ~= nil or\n      string.find(word,\
    \ pattern, 1, true) ~= nil or\n      string.find(word, pattern, 1, true) ~= nil\n\
    \  end\n  local function is_substring_or_rotations_or_rotations_or_rotations_or_rotations(cycle,\
    \ word)\n    local pattern = string.sub(cycle, 1, #word)\n    return string.find(word,\
    \ pattern, 1, true) ~= nil or\n      string.find(word, pattern, 1, true) ~= nil\
    \ or\n      string.find(word, pattern, 1, true) ~= nil or\n      string.find(word,\
    \ pattern, 1, true) ~= nil or\n      string.find(word, pattern, 1, true) ~= nil\
    \ or\n      string.find(word, pattern, 1, true) ~= nil\n  end\n  local function\
    \ is_substring_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(cycle,\
    \ word)\n    local pattern = string.sub(cycle, 1, #word)\n    return string.find(word,\
    \ pattern, 1, true", "  local function is_substring_of_word(word, pattern)\n \
    \   return string.find(word, pattern, 1, true) ~= nil\n  end\n  local function\
    \ is_substring_of_pattern(word, pattern)\n    return string.find(pattern, word,\
    \ 1, true) ~= nil\n  end\n  local function is_substring_of_pattern_in_word(word,\
    \ pattern)\n    return is_substring_of_pattern(word, pattern) or is_substring_of_word(word,\
    \ pattern)\n  end\n  local function is_substring_of_pattern_in_word_in_word(word,\
    \ pattern)\n    return is_substring_of_pattern_in_word(word, pattern) or is_substring_of_word(word,\
    \ pattern)\n  end\n  local function is_substring_of_pattern_in_word_in_pattern(word,\
    \ pattern)\n    return is_substring_of_pattern_in_word(word, pattern) or is_substring_of_pattern(word,\
    \ pattern)\n  end\n  local function is_substring_of_pattern_in_word_in_word_in_word(word,\
    \ pattern)\n    return is_substring_of_pattern_in_word(word, pattern) or is_substring_of_pattern_in_word(word,\
    \ pattern)\n  end\n  local function is_substring_of_pattern_in_word_in_word_in_pattern(word,\
    \ pattern)\n    return is_substring_of_pattern_in_word(word, pattern) or is_substring_of_pattern_in_word(word,\
    \ pattern)\n  end\n  local function is_substring_of_pattern_in_word_in_word_in_word_in_word(word,\
    \ pattern)\n    return is_substring_of_pattern_in_word(word, pattern) or is_substring_of_pattern_in_word(word,\
    \ pattern)\n  end\n  local function is_substring_of_pattern_in_word_in_word_in_word_in_pattern(word,\
    \ pattern)\n    return is_substring_of_pattern_in_word(word, pattern) or is_substring_of_pattern_in_word(word,\
    \ pattern)\n  end\n  local function is_substring_of_pattern_in_word_in_word_in_word_in_word_in_word(word,\
    \ pattern)\n    return is_substring_of_pattern_in_word(word, pattern) or is_substring_of_pattern_in_word(word,\
    \ pattern)\n  end\n  local function is_substring_of_pattern_in_word_in_word_in_word_in_word_in_pattern(word,\
    \ pattern)\n    return is_substring_of_pattern_in_word(word, pattern) or is_substring_of_pattern_in_word(word,\
    \ pattern)\n  end\n  local function is_substring_of_pattern_in_word_in_word_in_word_in_word_in_word_in_word(word,\
    \ pattern)\n    return is_substring_of_pattern_in_word(word, pattern) or is_substring_of_pattern_in_word(word,\
    \ pattern)\n  end\n  local function is_substring_"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
