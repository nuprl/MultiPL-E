name: HumanEval_127_intersection
language: lua
prompt: "-- You are given two intervals,\n-- where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed\
  \ which means that the interval (start, end)\n-- includes both start and end.\n\
  -- For each given interval, it is assumed that its start is less or equal its end.\n\
  -- Your task is to determine whether the length of intersection of these two \n\
  -- intervals is a prime number.\n-- Example, the intersection of the intervals (1,\
  \ 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n--\
  \ If the length of the intersection is a prime number, return \"YES\",\n-- otherwise,\
  \ return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n-- [input/output]\
  \ samples:\n-- >>> intersection({1, 2}, {2, 3})\n-- 'NO'\n-- >>> intersection({-1,\
  \ 1}, {0, 4})\n-- 'NO'\n-- >>> intersection({-3, -1}, {-5, 5})\n-- 'YES'\nlocal\
  \ function intersection(interval1, interval2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection\n\
  \    lu.assertEquals(candidate({1, 2}, {2, 3}), 'NO')\n    lu.assertEquals(candidate({-1,\
  \ 1}, {0, 4}), 'NO')\n    lu.assertEquals(candidate({-3, -1}, {-5, 5}), 'YES')\n\
  \    lu.assertEquals(candidate({-2, 2}, {-4, 0}), 'YES')\n    lu.assertEquals(candidate({-11,\
  \ 2}, {-1, -1}), 'NO')\n    lu.assertEquals(candidate({1, 2}, {3, 5}), 'NO')\n \
  \   lu.assertEquals(candidate({1, 2}, {1, 2}), 'NO')\n    lu.assertEquals(candidate({-2,\
  \ -2}, {-3, -2}), 'NO')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal interval1Start, interval1End = interval1[1], interval1[2]\n\
    \tlocal interval2Start, interval2End = interval2[1], interval2[2]\n\tlocal interval1Length\
    \ = interval1End - interval1Start\n\tlocal interval2Length = interval2End - interval2Start\n\
    \tlocal interval1StartInt = tonumber(interval1Start)\n\tlocal interval1EndInt\
    \ = tonumber(interval1End)\n\tlocal interval2StartInt = tonumber(interval2Start)\n\
    \tlocal interval2EndInt = tonumber(interval2End)\n\tif interval1StartInt < interval1EndInt\
    \ then\n\t\tif interval2StartInt < interval2EndInt then\n\t\t\tif interval1StartInt\
    \ <= interval2StartInt <= interval1EndInt or interval1StartInt <= interval2EndInt\
    \ <= interval1EndInt then\n\t\t\t\treturn \"YES\"\n\t\t\telse\n\t\t\t\treturn\
    \ \"NO\"\n\t\t\tend\n\t\telse\n\t\t\tif interval1StartInt <= interval2StartInt\
    \ <= interval1EndInt then\n\t\t\t\treturn \"YES\"\n\t\t\telse\n\t\t\t\treturn\
    \ \"NO\"\n\t\t\tend\n\t\tend\n\telse\n\t\tif interval2StartInt < interval2EndInt\
    \ then\n\t\t\tif interval1StartInt <= interval2StartInt <= interval1EndInt then\n\
    \t\t\t\treturn \"YES\"\n\t\t\telse\n\t\t\t\treturn \"NO\"\n\t\t\tend\n\t\telse\n\
    \t\t\tif interval1StartInt <= interval2StartInt <= interval1EndInt then\n\t\t\t\
    \treturn \"YES\"\n\t\t\telse\n\t\t\t\treturn \"NO\"\n\t\t\tend\n\t\tend\n\tend\n\
    end", "\tlocal interval1Start, interval1End = interval1[1], interval1[2]\n\tlocal\
    \ interval2Start, interval2End = interval2[1], interval2[2]\n\tlocal interval1Length\
    \ = interval1End - interval1Start\n\tlocal interval2Length = interval2End - interval2Start\n\
    \tlocal interval1StartInt = math.floor(interval1Start)\n\tlocal interval1EndInt\
    \ = math.ceil(interval1End)\n\tlocal interval2StartInt = math.floor(interval2Start)\n\
    \tlocal interval2EndInt = math.ceil(interval2End)\n\tlocal interval1StartInt =\
    \ math.floor(interval1Start)\n\tlocal interval1EndInt = math.ceil(interval1End)\n\
    \tlocal interval2StartInt = math.floor(interval2Start)\n\tlocal interval2EndInt\
    \ = math.ceil(interval2End)\n\tlocal interval1StartInt = math.floor(interval1Start)\n\
    \tlocal interval1EndInt = math.ceil(interval1End)\n\tlocal interval2StartInt =\
    \ math.floor(interval2Start)\n\tlocal interval2EndInt = math.ceil(interval2End)\n\
    \tlocal interval1StartInt = math.floor(interval1Start)\n\tlocal interval1EndInt\
    \ = math.ceil(interval1End)\n\tlocal interval2StartInt = math.floor(interval2Start)\n\
    \tlocal interval2EndInt = math.ceil(interval2End)\n\tlocal interval1StartInt =\
    \ math.floor(interval1Start)\n\tlocal interval1EndInt = math.ceil(interval1End)\n\
    \tlocal interval2StartInt = math.floor(interval2Start)\n\tlocal interval2EndInt\
    \ = math.ceil(interval2End)\n\tlocal interval1StartInt = math.floor(interval1Start)\n\
    \tlocal interval1EndInt = math.ceil(interval1End)\n\tlocal interval2StartInt =\
    \ math.floor(interval2Start)\n\tlocal interval2EndInt = math.ceil(interval2End)\n\
    \tlocal interval1StartInt = math.floor(interval1Start)\n\tlocal interval1EndInt\
    \ = math.ceil(interval1End)\n\tlocal interval2StartInt = math.floor(interval2Start)\n\
    \tlocal interval2EndInt = math.ceil(interval2End)\n\tlocal interval1StartInt =\
    \ math.floor(interval1Start)\n\tlocal interval1EndInt = math.ceil(interval1End)\n\
    \tlocal interval2StartInt = math.floor(interval2Start)\n\tlocal interval2EndInt\
    \ = math.ceil(interval2End)\n\tlocal interval1StartInt = math.", "\tlocal interval1Start\
    \ = interval1[1]\n\tlocal interval1End = interval1[2]\n\tlocal interval2Start\
    \ = interval2[1]\n\tlocal interval2End = interval2[2]\n\tlocal intersectionStart\
    \ = interval1Start <= interval2Start and interval1End >= interval2End\n\tlocal\
    \ intersectionEnd = interval1Start <= interval2Start and interval1End <= interval2End\n\
    \tlocal intersectionLength = interval1Start <= interval2Start and interval1End\
    \ >= interval2End\n\tlocal intersectionIsPrime = not (interval1Start <= interval2Start\
    \ and interval1End >= interval2End)\n\treturn (intersectionStart and intersectionEnd\
    \ or intersectionLength) and intersectionIsPrime or \"NO\"\nend", "\tlocal start\
    \ = interval1[1]\n\tlocal end = interval1[2]\n\tlocal start2 = interval2[1]\n\t\
    local end2 = interval2[2]\n\tif start > end or start2 > end2 then\n\t\treturn\
    \ \"NO\"\n\telseif start < start2 then\n\t\tstart = start2\n\telseif end < end2\
    \ then\n\t\tend = end2\n\tend\n\tlocal length = end - start\n\tif length == 2\
    \ then\n\t\treturn \"YES\"\n\telseif length == 1 then\n\t\treturn \"NO\"\n\telse\n\
    \t\tlocal prime = true\n\t\tlocal i = 1\n\t\twhile prime and i <= length do\n\t\
    \t\tprime = not (start % i == 0 and end % i == 0)\n\t\t\ti = i + 1\n\t\tend\n\t\
    \tif prime then\n\t\t\treturn \"YES\"\n\t\telse\n\t\t\treturn \"NO\"\n\t\tend\n\
    \tend\nend", "\tlocal start = interval1[1]\n\tlocal end = interval1[2]\n\tlocal\
    \ start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\tlocal length = end - start\n\
    \tlocal length2 = end2 - start2\n\tlocal prime = true\n\tlocal prime2 = true\n\
    \tlocal prime3 = true\n\tlocal prime4 = true\n\tlocal prime5 = true\n\tlocal prime6\
    \ = true\n\tlocal prime7 = true\n\tlocal prime8 = true\n\tlocal prime9 = true\n\
    \tlocal prime10 = true\n\tlocal prime11 = true\n\tlocal prime12 = true\n\tlocal\
    \ prime13 = true\n\tlocal prime14 = true\n\tlocal prime15 = true\n\tlocal prime16\
    \ = true\n\tlocal prime17 = true\n\tlocal prime18 = true\n\tlocal prime19 = true\n\
    \tlocal prime20 = true\n\tlocal prime21 = true\n\tlocal prime22 = true\n\tlocal\
    \ prime23 = true\n\tlocal prime24 = true\n\tlocal prime25 = true\n\tlocal prime26\
    \ = true\n\tlocal prime27 = true\n\tlocal prime28 = true\n\tlocal prime29 = true\n\
    \tlocal prime30 = true\n\tlocal prime31 = true\n\tlocal prime32 = true\n\tlocal\
    \ prime33 = true\n\tlocal prime34 = true\n\tlocal prime35 = true\n\tlocal prime36\
    \ = true\n\tlocal prime37 = true\n\tlocal prime38 = true\n\tlocal prime39 = true\n\
    \tlocal prime40 = true\n\tlocal prime41 = true\n\tlocal prime42 = true\n\tlocal\
    \ prime43 = true\n\tlocal prime44 = true\n\tlocal prime45 = true\n\tlocal prime46\
    \ = true\n\tlocal prime47 = true\n\tlocal prime48 = true\n\tlocal prime49 = true\n\
    \tlocal prime50 = true\n\tlocal prime51 = true\n\tlocal prime52 = true\n\tlocal\
    \ prime53 = true\n\tlocal prime54 = true\n\tlocal prime55 = true\n\tlocal prime56\
    \ = true\n\tlocal prime57 = true\n\tlocal prime58 = true\n\tlocal prime59 = true\n\
    \tlocal prime60 = true\n\tlocal prime61 = true\n\tlocal prime62 = true\n\tlocal\
    \ prime63 = true\n\tlocal prime64 = true\n\tlocal prime65 = true\n\tlocal prime66\
    \ = true\n\tlocal prime67 = true\n\tlocal prime68 = true\n\tlocal prime69 = true\n\
    \tlocal prime70 = true\n\tlocal prime71 = true\n\tlocal prime72 = true\n\tlocal\
    \ prime73 = true\n\tlocal prime74 = true\n\tlocal prime75 = true\n\tlocal ", "\t\
    local interval1Start = interval1[1]\n\tlocal interval1End = interval1[2]\n\tlocal\
    \ interval2Start = interval2[1]\n\tlocal interval2End = interval2[2]\n\tlocal\
    \ interval1Length = interval1End - interval1Start\n\tlocal interval2Length = interval2End\
    \ - interval2Start\n\tlocal intersectionStart = interval1Start + interval2Start\n\
    \tlocal intersectionEnd = interval1Start + interval1Length + interval2Start\n\t\
    if intersectionStart <= intersectionEnd then\n\t\tif interval1Length == interval2Length\
    \ then\n\t\t\tif interval1Start <= interval2Start and interval1End >= interval2End\
    \ then\n\t\t\t\treturn \"YES\"\n\t\t\telse\n\t\t\t\treturn \"NO\"\n\t\t\tend\n\
    \t\telse\n\t\t\tif interval1Start <= interval2Start and interval1End >= interval2End\
    \ then\n\t\t\t\treturn \"YES\"\n\t\t\telse\n\t\t\t\treturn \"NO\"\n\t\t\tend\n\
    \t\tend\n\telse\n\t\tif interval1Start <= interval2Start and interval1End >= interval2End\
    \ then\n\t\t\treturn \"NO\"\n\t\telse\n\t\t\treturn \"NO\"\n\t\tend\n\tend\nend",
  "\tlocal interval1_start = interval1[1]\n\tlocal interval1_end = interval1[2]\n\t\
    local interval2_start = interval2[1]\n\tlocal interval2_end = interval2[2]\n\t\
    local interval1_length = interval1_end - interval1_start\n\tlocal interval2_length\
    \ = interval2_end - interval2_start\n\tlocal interval1_prime_number = interval1_length\n\
    \tlocal interval2_prime_number = interval2_length\n\tlocal interval1_prime_number_prime\
    \ = interval1_prime_number\n\tlocal interval2_prime_number_prime = interval2_prime_number\n\
    \tlocal interval1_prime_number_not_prime = interval1_prime_number - 1\n\tlocal\
    \ interval2_prime_number_not_prime = interval2_prime_number - 1\n\tlocal interval1_prime_number_not_prime_prime\
    \ = interval1_prime_number_not_prime + 1\n\tlocal interval2_prime_number_not_prime_prime\
    \ = interval2_prime_number_not_prime + 1\n\tlocal interval1_prime_number_not_prime_not_prime\
    \ = interval1_prime_number_not_prime + 2\n\tlocal interval2_prime_number_not_prime_not_prime\
    \ = interval2_prime_number_not_prime + 2\n\tlocal interval1_prime_number_not_prime_not_prime_prime\
    \ = interval1_prime_number_not_prime_not_prime + 3\n\tlocal interval2_prime_number_not_prime_not_prime_prime\
    \ = interval2_prime_number_not_prime_not_prime + 3\n\tlocal interval1_prime_number_not_prime_not_prime_not_prime\
    \ = interval1_prime_number_not_prime_not_prime + 4\n\tlocal interval2_prime_number_not_prime_not_prime_not_prime\
    \ = interval2_prime_number_not_prime_not_prime + 4\n\tlocal interval1_prime_number_not_prime_not_prime_not_prime_prime\
    \ = interval1_prime_number_not_prime_not_prime_not_prime + 5\n\tlocal interval2_prime_number_not_prime_not_prime_not_prime_prime\
    \ = interval2_prime_number_not_prime_not_prime_not_prime + 5\n\tlocal interval1_prime_number_not_prime_not_prime_not_prime_not_prime\
    \ = interval1_prime_number_not_prime_not_prime_not_prime_prime + 6\n\tlocal interval2_prime_number_not_prime_not_prime_not_prime_not_prime\
    \ = interval2_prime_number_not_prime_not_prime_not_prime_prime + 6\n\tlocal interval1_prime_number_not_prime_not_prime_not_prime_not_prime_prime\
    \ = interval", "\tlocal start = interval1[1]\n\tlocal end = interval1[2]\n\tlocal\
    \ start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\tif start <= end and start2\
    \ <= end2 then\n\t\tlocal length = end - start\n\t\tlocal length2 = end2 - start2\n\
    \t\tif length2 == 0 then\n\t\t\treturn length\n\t\telseif length2 == 1 then\n\t\
    \t\treturn length\n\t\telse\n\t\t\tlocal prime = true\n\t\t\tfor i = 2, length2\
    \ do\n\t\t\t\tif length2 % i == 0 then\n\t\t\t\t\tprime = false\n\t\t\t\t\tbreak\n\
    \t\t\t\tend\n\t\t\tend\n\t\t\tif prime then\n\t\t\t\treturn length\n\t\t\telse\n\
    \t\t\t\treturn 'NO'\n\t\t\tend\n\t\tend\n\telse\n\t\treturn 'NO'\n\tend\nend",
  "  local interval1Start, interval1End = interval1[1], interval1[2]\n  local interval2Start,\
    \ interval2End = interval2[1], interval2[2]\n  if interval1Start > interval1End\
    \ or interval2Start > interval2End then\n    return \"NO\"\n  end\n  if interval1Start\
    \ <= interval1End and\n    interval2Start <= interval2End then\n    local interval1Length\
    \ = interval1End - interval1Start + 1\n    local interval2Length = interval2End\
    \ - interval2Start + 1\n    if interval1Length > interval2Length then\n      return\
    \ \"NO\"\n    end\n    local prime = 1\n    for i = 2, interval1Length do\n  \
    \    if interval1Start + i ~= interval2Start + i then\n        prime = prime +\
    \ 1\n      end\n    end\n    if prime == interval1Length then\n      return \"\
    YES\"\n    end\n  end\n  return \"NO\"\nend", "\tlocal start = math.min(interval1[1],\
    \ interval2[1])\n\tlocal end = math.max(interval1[2], interval2[2])\n\tlocal length\
    \ = end - start\n\tif length == 0 then\n\t\treturn 'NO'\n\tend\n\tlocal prime\
    \ = true\n\tfor i = 2, length do\n\t\tif start % i == 0 then\n\t\t\tprime = false\n\
    \t\t\tbreak\n\t\tend\n\tend\n\tif prime then\n\t\treturn 'YES'\n\telse\n\t\treturn\
    \ 'NO'\n\tend\nend", "\tlocal start1 = interval1[1]\n\tlocal end1 = interval1[2]\n\
    \tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\tlocal length = end1\
    \ - start1 + end2 - start2\n\tif length == 0 then\n\t\treturn 'NO'\n\tend\n\t\
    if start1 <= end2 and start2 <= end1 then\n\t\tlocal prime = true\n\t\tlocal i\
    \ = 2\n\t\twhile i < length do\n\t\t\tif start1 + i >= end1 or start2 + i >= end2\
    \ then\n\t\t\t\tprime = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\ti = i + 1\n\t\t\
    end\n\t\tif prime then\n\t\t\treturn 'YES'\n\t\tend\n\tend\n\treturn 'NO'\nend",
  "\tlocal interval1_start = interval1[1]\n\tlocal interval1_end = interval1[2]\n\t\
    local interval2_start = interval2[1]\n\tlocal interval2_end = interval2[2]\n\t\
    local interval1_length = interval1_end - interval1_start\n\tlocal interval2_length\
    \ = interval2_end - interval2_start\n\tlocal intersection_length = interval1_end\
    \ - interval2_start\n\tlocal is_prime = not (interval1_length == interval2_length\
    \ and interval1_start <= interval2_start and interval1_end >= interval2_end)\n\
    \tlocal is_intersection_prime = not (interval1_length == interval2_length and\
    \ interval1_start <= interval2_start and interval1_end >= interval2_end and intersection_length\
    \ == interval1_length)\n\tlocal is_intersection_prime_or_not = not (interval1_length\
    \ == interval2_length and interval1_start <= interval2_start and interval1_end\
    \ >= interval2_end and intersection_length == interval1_length and is_prime)\n\
    \tlocal is_intersection_prime_or_not_or_not = not (interval1_length == interval2_length\
    \ and interval1_start <= interval2_start and interval1_end >= interval2_end and\
    \ intersection_length == interval1_length and is_prime or is_intersection_prime)\n\
    \treturn is_intersection_prime_or_not or is_intersection_prime_or_not_or_not\n\
    end", "\tlocal interval1Start, interval1End = interval1[1], interval1[2]\n\tlocal\
    \ interval2Start, interval2End = interval2[1], interval2[2]\n\tlocal interval1Length\
    \ = interval1End - interval1Start + 1\n\tlocal interval2Length = interval2End\
    \ - interval2Start + 1\n\tlocal intersectionLength = interval1Start + interval2End\
    \ - interval1End + interval2Start - interval1Start\n\tif interval1Start <= interval2Start\
    \ and interval1End >= interval2End then\n\t\tif interval1Length == interval2Length\
    \ then\n\t\t\tif interval1Start <= interval2Start and interval1End >= interval2End\
    \ then\n\t\t\t\tif interval1Start <= interval2Start and interval1End >= interval2End\
    \ then\n\t\t\t\t\tif interval1Start <= interval2Start and interval1End >= interval2End\
    \ then\n\t\t\t\t\t\tif interval1Start <= interval2Start and interval1End >= interval2End\
    \ then\n\t\t\t\t\t\t\tif interval1Start <= interval2Start and interval1End >=\
    \ interval2End then\n\t\t\t\t\t\t\t\tif interval1Start <= interval2Start and interval1End\
    \ >= interval2End then\n\t\t\t\t\t\t\t\t\tif interval1Start <= interval2Start\
    \ and interval1End >= interval2End then\n\t\t\t\t\t\t\t\t\t\tif interval1Start\
    \ <= interval2Start and interval1End >= interval2End then\n\t\t\t\t\t\t\t\t\t\t\
    \tif interval1Start <= interval2Start and interval1End >= interval2End then\n\t\
    \t\t\t\t\t\t\t\t\t\t\tif interval1Start <= interval2Start and interval1End >=\
    \ interval2End then\n\t\t\t\t\t\t\t\t\t\t\t\t\tif interval1Start <= interval2Start\
    \ and interval1End >= interval2End then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif interval1Start\
    \ <= interval2Start and interval1End >= interval2End then\n\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\tif interval1Start <= interval2Start and interval1End >= interval2End\
    \ then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif interval1Start <= interval2Start and\
    \ interval1End >= interval2End then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif interval1Start\
    \ <= interval2Start and interval1End >= interval2End then\n\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\tif interval1Start <= interval2Start and interval1End >= interval2End\
    \ then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif interval1Start <= interval2Start\
    \ and interval1End >= interval2End then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \tif interval1Start <= interval2Start and interval1End >= interval2End then\n\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif interval1Start <= interval2Start and\
    \ interval1End >= interval2End then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \tif interval1Start <= interval2Start and interval1End >= interval2End then\n\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif interval1Start <= interval2Start\
    \ and interval1", "\tlocal interval1_start = interval1[1]\n\tlocal interval1_end\
    \ = interval1[2]\n\tlocal interval2_start = interval2[1]\n\tlocal interval2_end\
    \ = interval2[2]\n\tlocal interval1_length = interval1_end - interval1_start\n\
    \tlocal interval2_length = interval2_end - interval2_start\n\tlocal intersection_length\
    \ = interval1_end - interval2_start\n\tlocal is_prime = not (interval1_length\
    \ == interval2_length and interval1_start <= interval2_start and interval2_start\
    \ <= interval1_end)\n\tif is_prime then\n\t\treturn \"YES\"\n\telse\n\t\treturn\
    \ \"NO\"\n\tend\nend", "\tlocal start1 = interval1[1]\n\tlocal end1 = interval1[2]\n\
    \tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\tlocal length = end1\
    \ - start1 + end2 - start2\n\tif length == 0 then\n\t\treturn \"NO\"\n\telseif\
    \ length == 1 then\n\t\treturn \"YES\"\n\telse\n\t\tlocal prime = true\n\t\tfor\
    \ i = 2, length do\n\t\t\tif start1 + i == end1 or start2 + i == end2 then\n\t\
    \t\t\tprime = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif prime then\n\t\t\
    \treturn \"YES\"\n\t\telse\n\t\t\treturn \"NO\"\n\t\tend\n\tend\nend", "\tlocal\
    \ interval1_start = interval1[1]\n\tlocal interval1_end = interval1[2]\n\tlocal\
    \ interval2_start = interval2[1]\n\tlocal interval2_end = interval2[2]\n\t\n\t\
    if interval1_start > interval2_start or interval1_end < interval2_end then\n\t\
    \treturn 'NO'\n\tend\n\t\n\tlocal interval1_length = interval1_end - interval1_start\n\
    \tlocal interval2_length = interval2_end - interval2_start\n\t\n\tif interval1_length\
    \ == interval2_length then\n\t\tif interval1_start <= interval2_start then\n\t\
    \t\treturn 'YES'\n\t\telse\n\t\t\treturn 'NO'\n\t\tend\n\tend\n\t\n\tif interval1_length\
    \ < interval2_length then\n\t\treturn 'NO'\n\telse\n\t\treturn 'YES'\n\tend\n\
    end", "\tlocal interval1Start, interval1End = interval1[1], interval1[2]\n\tlocal\
    \ interval2Start, interval2End = interval2[1], interval2[2]\n\tlocal interval1Length\
    \ = interval1End - interval1Start\n\tlocal interval2Length = interval2End - interval2Start\n\
    \tlocal intersectionLength = interval1Start + interval2End - interval1End - interval2Start\n\
    \tif interval1Length == interval2Length and interval1Start <= interval2Start and\
    \ interval1End >= interval2End then\n\t\treturn \"YES\"\n\telseif interval1Length\
    \ > interval2Length then\n\t\tlocal temp = interval1Start\n\t\tinterval1Start\
    \ = interval1End\n\t\tinterval1End = temp\n\t\tlocal temp = interval2Start\n\t\
    \tinterval2Start = interval2End\n\t\tinterval2End = temp\n\telseif interval1Length\
    \ < interval2Length then\n\t\tlocal temp = interval1Start\n\t\tinterval1Start\
    \ = interval1End\n\t\tinterval1End = temp\n\t\tlocal temp = interval2Start\n\t\
    \tinterval2Start = interval2End\n\t\tinterval2End = temp\n\tend\n\tif interval1Start\
    \ <= interval1End then\n\t\tif interval1Start <= interval2Start and interval1End\
    \ >= interval2End then\n\t\t\treturn \"YES\"\n\t\telseif interval1Start <= interval2Start\
    \ and interval1End > interval2End then\n\t\t\tlocal temp = interval1Start\n\t\t\
    \tinterval1Start = interval1End\n\t\t\tinterval1End = temp\n\t\t\tlocal temp =\
    \ interval2Start\n\t\t\tinterval2Start = interval2End\n\t\t\tinterval2End = temp\n\
    \t\telseif interval1Start > interval2Start and interval1End >= interval2End then\n\
    \t\t\tlocal temp = interval1Start\n\t\t\tinterval1Start = interval1End\n\t\t\t\
    interval1End = temp\n\t\t\tlocal temp = interval2Start\n\t\t\tinterval2Start =\
    \ interval2End\n\t\t\tinterval2End = temp\n\t\tend\n\tend\n\tif interval2Start\
    \ <= interval2End then\n\t\tif interval1Start <= interval2Start and interval1End\
    \ >= interval2End then\n\t\t\treturn \"YES\"\n\t\telseif interval1Start <= interval2Start\
    \ and interval1End > interval2End then\n\t\t\tlocal temp = interval1Start\n\t\t\
    \tinterval1Start = interval1End\n\t\t\tinterval1End = temp\n\t\t\tlocal temp =\
    \ interval2Start\n\t\t\tinterval2Start = interval2End\n\t\t\tinterval2End = temp\n\
    \t\telseif interval1Start > interval2Start and interval1End >= interval2End then\n\
    \t\t\tlocal temp = interval1Start\n\t\t\tinterval1Start = interval1End\n\t\t\t",
  "\tlocal start = interval1[1]\n\tlocal end = interval1[2]\n\tlocal start2 = interval2[1]\n\
    \tlocal end2 = interval2[2]\n\tlocal length = end - start\n\tlocal length2 = end2\
    \ - start2\n\tif length2 == 0 then\n\t\treturn \"NO\"\n\telseif length2 == 1 then\n\
    \t\tif length == 1 then\n\t\t\treturn \"YES\"\n\t\telse\n\t\t\treturn \"NO\"\n\
    \t\tend\n\telse\n\t\tif length == length2 then\n\t\t\tif start <= start2 then\n\
    \t\t\t\treturn \"YES\"\n\t\t\telse\n\t\t\t\treturn \"NO\"\n\t\t\tend\n\t\telse\n\
    \t\t\tif start <= start2 then\n\t\t\t\treturn \"NO\"\n\t\t\telse\n\t\t\t\treturn\
    \ \"YES\"\n\t\t\tend\n\t\tend\n\tend\nend", "\tlocal start = interval1[1]\n\t\
    local end = interval1[2]\n\tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\
    \tif start <= end2 then\n\t\tif start <= start2 then\n\t\t\treturn end2 - start\n\
    \t\telse\n\t\t\treturn end2 - start2\n\t\tend\n\telse\n\t\tif start2 <= end then\n\
    \t\t\treturn end2 - start2\n\t\telse\n\t\t\treturn end2 - start\n\t\tend\n\tend\n\
    end", "  local start1 = interval1[1]\n  local end1 = interval1[2]\n  local start2\
    \ = interval2[1]\n  local end2 = interval2[2]\n  local length1 = end1 - start1\n\
    \  local length2 = end2 - start2\n  if length1 < length2 then\n    return false\n\
    \  elseif length1 > length2 then\n    return true\n  else\n    local i = 1\n \
    \   local j = 1\n    while i <= length1 and j <= length2 do\n      if start1 <=\
    \ start2 and start2 <= end2 then\n        if start1 <= start2 and end2 <= end1\
    \ then\n          return true\n        else\n          return false\n        end\n\
    \      else\n        if start1 <= end2 and end2 <= end1 then\n          return\
    \ true\n        else\n          return false\n        end\n      end\n      i\
    \ = i + 1\n      j = j + 1\n    end\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
