language: lua
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local maxArr = {} -- the max array\n    local maxLen = 0 -- length of max\
    \ array\n    local i = 1\n    while i <= k do\n        local curMax = arr[i]\n\
    \        for j = i + 1, k do\n            if arr[j] > curMax then\n          \
    \      curMax = arr[j]\n            end\n        end\n        maxArr[maxLen] =\
    \ curMax\n        i = i + 1\n        maxLen = maxLen + 1\n    end\n    return\
    \ maxArr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvw37t1mo.lua:31:\
    \ expected: {-4, -3, 5}\nactual: {0=5, 5, 5}\nstack traceback:\n\t/tmp/tmpvw37t1mo.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local max_arr = {}\n  local max_num = 0\n  local i = 1\n  while i <= k do\n\
    \    if arr[i] > max_num then\n      max_num = arr[i]\n    end\n    max_arr[i]\
    \ = max_num\n    i = i + 1\n  end\n  return max_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy5dg1nll.lua:27:\
    \ expected: {-4, -3, 5}\nactual: {0, 0, 5}\nstack traceback:\n\t/tmp/tmpy5dg1nll.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = -math.inf\n    for i = 1, k do\n\
    \        local num = arr[i]\n        if num > max_num then\n            max_num\
    \ = num\n        end\n    end\n    for i = 1, k do\n        local num = arr[i]\n\
    \        if num > max_num then\n            max_arr[i] = num\n        end\n  \
    \  end\n    return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0hpyywvd.lua:12:\
    \ attempt to perform arithmetic on field 'inf' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp0hpyywvd.lua:12: in function 'candidate'\n\t/tmp/tmp0hpyywvd.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n        max_num\
    \ = math.max(max_num, arr[i])\n    end\n    for i = 1, k do\n        max_arr[i]\
    \ = max_num\n    end\n    return max_arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp94uxjtdp.lua:25:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp94uxjtdp.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\n  -- Get the maximum\
    \ number in the first k elements\n  local max_element = arr[1]\n  -- Get the maximum\
    \ number in the remaining elements\n  for i = 2, k do\n    if arr[i] > max_element\
    \ then\n      max_element = arr[i]\n    end\n  end\n  -- Return the maximum number\
    \ in the first k elements\n  return arr[1:k+1]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzykcra_t.lua:24: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n        max_num\
    \ = max_num + arr[i]\n    end\n    for i = 1, k do\n        if arr[i] > max_num\
    \ then\n            max_num = arr[i]\n        end\n    end\n    for i = 1, k do\n\
    \        max_arr[i] = max_num\n    end\n    return max_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpogp3rif2.lua:30:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpogp3rif2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n        max_num\
    \ = max_num + arr[i]\n    end\n    for i = 1, k do\n        max_arr[i] = max_num\n\
    \    end\n    return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfykolkxi.lua:25:\
    \ expected: {-4, -3, 5}\nactual: {-2, -2, -2}\nstack traceback:\n\t/tmp/tmpfykolkxi.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max = 0\n    local max_index = 0\n    for i = 1, k do\n        if arr[i]\
    \ > max then\n            max = arr[i]\n            max_index = i\n        end\n\
    \    end\n    local max_value = arr[max_index]\n    for i = 1, k do\n        if\
    \ arr[i] > max_value then\n            arr[max_index] = arr[i]\n        end\n\
    \    end\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv10es8ab.lua:31:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpv10es8ab.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local max_arr = {}\n  local max_k = 0\n  for i = 1, k do\n    local max_value\
    \ = -1000\n    for j = 1, #arr do\n      if arr[j] > max_value then\n        max_value\
    \ = arr[j]\n      end\n    end\n    max_arr[i] = max_value\n    max_k = i\n  end\n\
    \  return max_arr, max_k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpah_v9d2c.lua:29:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpah_v9d2c.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local maxArr = {}\n    local maxVal = -1000\n    for i = 1, k do\n      \
    \  local maxIndex = -1\n        for j = 1, #arr do\n            if arr[j] > maxVal\
    \ then\n                maxVal = arr[j]\n                maxIndex = j\n      \
    \      end\n        end\n        maxArr[i] = arr[maxIndex]\n    end\n    return\
    \ maxArr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8mpjx1m.lua:29:\
    \ expected: {-4, -3, 5}\nactual: {5}\nstack traceback:\n\t/tmp/tmpv8mpjx1m.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local maxArr = {} -- the result array\n    local maxNum = arr[1]\n    for\
    \ i = 2, k do\n        if arr[i] > maxNum then\n            maxNum = arr[i]\n\
    \        end\n    end\n    for i = 1, k do\n        maxArr[i] = maxNum\n    end\n\
    \    return maxArr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8k9q6ph6.lua:27:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp8k9q6ph6.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Get the max\
    \ number in the first k elements\n  local max_element = arr[1]\n  for i = 2, k\
    \ do\n    if arr[i] > max_element then\n      max_element = arr[i]\n    end\n\
    \  end\n  \n  -- Sort the remaining elements and return them\n  local sorted_arr\
    \ = {}\n  for i = 2, k do\n    table.insert(sorted_arr, arr[i])\n  end\n  table.sort(sorted_arr)\n\
    \  return sorted_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk3hg9iva.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {-4, 5}\nstack traceback:\n\t/tmp/tmpk3hg9iva.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local results = {}\n    local max = 0\n    local i = 1\n    while i <= k\
    \ do\n        if arr[i] > max then\n            max = arr[i]\n        end\n  \
    \      i = i + 1\n    end\n    local j = 1\n    while j <= k do\n        if arr[j]\
    \ > max then\n            results[j] = arr[j]\n        end\n        j = j + 1\n\
    \    end\n    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxijilwv.lua:33:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpoxijilwv.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then\n        return arr\n    end\n    local max_arr = {}\n   \
    \ local max_num = 0\n    for i = 1, k do\n        if arr[i] > max_num then\n \
    \           max_num = arr[i]\n        end\n    end\n    max_arr[1] = max_num\n\
    \    for i = 2, k do\n        if arr[i] > max_num then\n            max_arr[i]\
    \ = arr[i]\n        end\n    end\n    return max_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmyfbp533.lua:33:\
    \ expected: {-4, -3, 5}\nactual: {5}\nstack traceback:\n\t/tmp/tmpmyfbp533.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n        max_num\
    \ = math.max(max_num, arr[i])\n    end\n    for i = 1, k do\n        max_arr[i]\
    \ = max_num\n    end\n    return max_arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp94uxjtdp.lua:25:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp94uxjtdp.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n        max_num\
    \ = math.max(max_num, arr[i])\n    end\n    for i = 1, k do\n        max_arr[i]\
    \ = max_num\n    end\n    return max_arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp94uxjtdp.lua:25:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp94uxjtdp.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n        max_num\
    \ = math.max(max_num, arr[i])\n    end\n    for i = 1, k do\n        max_arr[i]\
    \ = max_num\n    end\n    return max_arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp94uxjtdp.lua:25:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp94uxjtdp.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 0 then\n    return arr\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxaqkcc26.lua:32: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = 0\n    local max_idx = 0\n    for\
    \ i = 1, k do\n        if arr[i] > max_num then\n            max_num = arr[i]\n\
    \            max_idx = i\n        end\n    end\n    max_arr[max_idx] = max_num\n\
    \    for i = k + 1, #arr do\n        if arr[i] > max_num then\n            max_num\
    \ = arr[i]\n            max_idx = i\n        end\n    end\n    return max_arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpon5m8inb.lua:33:\
    \ expected: {-4, -3, 5}\nactual: {3=5}\nstack traceback:\n\t/tmp/tmpon5m8inb.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local maxArr\n    local maxNum\n    local maxIndex\n    local maxLen\n  \
    \  local maxIndex\n    local maxNum\n    local maxIndex\n    local maxLen\n  \
    \  local maxIndex\n    local maxNum\n    local maxIndex\n    local maxLen\n  \
    \  local maxIndex\n    local maxNum\n    local maxIndex\n    local maxLen\n  \
    \  local maxIndex\n    local maxNum\n    local maxIndex\n    local maxLen\n  \
    \  local maxIndex\n    local maxNum\n    local maxIndex\n    local maxLen\n  \
    \  local maxIndex\n    local maxNum\n    local maxIndex\n    local maxLen\n  \
    \  local maxIndex\n    local maxNum\n    local maxIndex\n    local maxLen\n  \
    \  local maxIndex\n    local maxNum\n    local maxIndex\n    local maxLen\n  \
    \  local maxIndex\n    local maxNum\n    local maxIndex\n    local maxLen\n  \
    \  local maxIndex\n    local maxNum\n    local maxIndex\n    local maxLen\n  \
    \  local maxIndex\n    local maxNum\n    local maxIndex\n    local maxLen\n  \
    \  local maxIndex\n    local maxNum\n    local maxIndex\n    local maxLen\n  \
    \  local maxIndex\n    local maxNum\n    local maxIndex\n    local maxLen\n  \
    \  local maxIndex\n    local maxNum\n    local maxIndex\n    local maxLen\n  \
    \  local maxIndex\n    local maxNum\n    local maxIndex\n    local maxLen\n  \
    \  local maxIndex\n    local maxNum\n    local maxIndex\n    local maxLen\n  \
    \  local maxIndex\n    local maxNum\n    local maxIndex\n    local maxLen\n  \
    \  local maxIndex\n    local maxNum\n    local maxIndex\n    local maxLen\n  \
    \  local maxIndex\n    local maxNum\n    local maxIndex\n    local maxLen\n  \
    \  local maxIndex\n    local maxNum\n    local maxIndex\n    local maxLen\n  \
    \  local maxIndex\n    local maxNum\n    local maxIndex\n    local maxLen\n  \
    \  local maxIndex\n    local maxNum\n    local maxIndex\n    local maxLen\n  \
    \  local maxIndex\n    local maxNum\n    local maxIndex\n    local maxLen\n  \
    \  local maxIndex\n    local maxNum\n    local maxIndex\n    local maxLen\n  \
    \  local maxIndex\n    local maxNum\n    local \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj_k5rsqx.lua:131: ''end'' expected (to close ''function''
    at line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local maxArr = {} -- the max array\n    local maxLen = 0 -- length of max\
    \ array\n    for i = 1, k do\n        local curMax = arr[1]\n        for j = 2,\
    \ #arr do\n            if arr[j] > curMax then\n                curMax = arr[j]\n\
    \            end\n        end\n        maxArr[#maxArr + 1] = curMax\n        maxLen\
    \ = #maxArr\n    end\n    return maxArr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmzbawao2.lua:29:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpmzbawao2.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n        max_num\
    \ = max_num > arr[i] and max_num or arr[i]\n        max_arr[i] = max_num\n   \
    \ end\n    return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvgq3yfl3.lua:23:\
    \ expected: {-4, -3, 5}\nactual: {0, 0, 5}\nstack traceback:\n\t/tmp/tmpvgq3yfl3.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local results = {}\n  local max = 0\n  local index = 0\n  local length = #arr\n\
    \  for i = 1, length do\n    if arr[i] > max then\n      max = arr[i]\n      index\
    \ = i\n    end\n  end\n  \n  for i = 1, k do\n    table.insert(results, max)\n\
    \    max = max - 1\n  end\n  \n  return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk2s38yny.lua:33:\
    \ expected: {-4, -3, 5}\nactual: {5, 4, 3}\nstack traceback:\n\t/tmp/tmpk2s38yny.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  if k == 0 then\n    return arr\n  end\n  \n  local max_arr = {}\n  local max_idx\
    \ = 1\n  \n  for i = 1, k do\n    if arr[i] > arr[max_idx] then\n      max_idx\
    \ = i\n    end\n  end\n  \n  table.insert(max_arr, arr[max_idx])\n  \n  for i\
    \ = k + 1, #arr do\n    if arr[i] > arr[max_idx] then\n      max_idx = i\n   \
    \ end\n  end\n  \n  table.insert(max_arr, arr[max_idx])\n  \n  return max_arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ynekkq5.lua:40:\
    \ expected: {-4, -3, 5}\nactual: {5, 5}\nstack traceback:\n\t/tmp/tmp_ynekkq5.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphhnjck0r.lua:32: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local result = {}\n    local max = 0\n    for i = 1, k do\n        local\
    \ element = arr[i]\n        if element > max then\n            max = element\n\
    \        end\n    end\n    for i = 1, k do\n        table.insert(result, max)\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu4hxq_j4.lua:28:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpu4hxq_j4.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Write your code here.\n  local max = 0\n  local max_index = 0\n  for i =\
    \ 1, k do\n    if arr[i] > max then\n      max = arr[i]\n      max_index = i\n\
    \    end\n  end\n  return arr[max_index], max_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppoz1ms7d.lua:26:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmppoz1ms7d.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n        max_num\
    \ = max_num or arr[i]\n        if arr[i] > max_num then\n            max_num =\
    \ arr[i]\n        end\n    end\n    for i = k + 1, #arr do\n        if arr[i]\
    \ > max_num then\n            max_num = arr[i]\n        end\n    end\n    max_arr\
    \ = max_arr or arr\n    return max_arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgrz1g5u2.lua:31:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpgrz1g5u2.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\n  -- Get the maximum\
    \ element in the first k elements\n  local max_element = arr[1]\n  -- Get the\
    \ maximum element in the remaining elements\n  for i = 2, k do\n    if arr[i]\
    \ > max_element then\n      max_element = arr[i]\n    end\n  end\n  -- Return\
    \ the maximum element in the first k elements\n  return maximum(arr, k - 1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_xfbkjm.lua:30:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpj_xfbkjm.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local result = {}\n  local max = 0\n  local index = 0\n  local size = #arr\n\
    \  \n  for i = 1, size do\n    if arr[i] > max then\n      max = arr[i]\n    \
    \  index = i\n    end\n  end\n  \n  for i = 1, k do\n    if arr[index] > max then\n\
    \      max = arr[index]\n    end\n    index = index + 1\n  end\n  \n  for i =\
    \ 1, size do\n    if arr[i] > max then\n      table.insert(result, arr[i])\n \
    \   end\n  end\n  \n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz35_w5hh.lua:24:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpz35_w5hh.lua:24:\
    \ in function 'candidate'\n\t/tmp/tmpz35_w5hh.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  if k == 0 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpebzcfar9.lua:31: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphhnjck0r.lua:32: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then\n        return arr\n    end\n    local max_so_far = arr[1]\n\
    \    local max_ending_here = arr[1]\n    for i = 2, k do\n        if arr[i] >\
    \ max_ending_here then\n            max_ending_here = arr[i]\n        end\n  \
    \      if arr[i] > max_so_far then\n            max_so_far = arr[i]\n        end\n\
    \    end\n    return max_so_far, max_ending_here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6v1s3ih.lua:30:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmpj6v1s3ih.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local results = {}\n    for i = 1, k do\n        local max = arr[1]\n   \
    \     for j = 2, #arr do\n            if arr[j] > max then\n                max\
    \ = arr[j]\n            end\n        end\n        results[i] = max\n    end\n\
    \    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9qlihvwh.lua:27:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp9qlihvwh.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphhnjck0r.lua:32: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then\n        return arr\n    end\n    local max_arr = {}\n   \
    \ local max_num = arr[1]\n    for i = 2, k do\n        if arr[i] > max_num then\n\
    \            max_num = arr[i]\n        end\n    end\n    max_arr[1] = max_num\n\
    \    for i = 2, k do\n        if arr[i] > max_num then\n            max_arr[i]\
    \ = arr[i]\n        end\n    end\n    return max_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_emyd7r.lua:33:\
    \ expected: {-4, -3, 5}\nactual: {5}\nstack traceback:\n\t/tmp/tmpc_emyd7r.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n        max_num\
    \ = max_num + arr[i]\n    end\n    for i = 1, k do\n        if max_num > arr[i]\
    \ then\n            max_num = arr[i]\n        end\n    end\n    for i = 1, k do\n\
    \        max_arr[i] = max_num\n    end\n    return max_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu4_73du0.lua:30:\
    \ expected: {-4, -3, 5}\nactual: {-4, -4, -4}\nstack traceback:\n\t/tmp/tmpu4_73du0.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local max = 0\n  local result = {} -- The result list\n  for i = 1, k do\n\
    \    local maxVal = arr[1]\n    for j = 2, #arr do\n      if arr[j] > maxVal then\n\
    \        maxVal = arr[j]\n      end\n    end\n    table.insert(result, maxVal)\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyu3jbe5a.lua:28:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpyu3jbe5a.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max = 0\n    local max_index = 0\n    for i = 1, k do\n        if arr[i]\
    \ > max then\n            max = arr[i]\n            max_index = i\n        end\n\
    \    end\n    return max_index, max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppw98oafx.lua:25:\
    \ expected: {-4, -3, 5}\nactual: 3\nstack traceback:\n\t/tmp/tmppw98oafx.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local maxArr = {} -- the result array\n    local maxNum = 0 -- The maximum\
    \ number in the array\n    local i = 1\n    while i <= k do\n        if arr[i]\
    \ > maxNum then\n            maxNum = arr[i]\n        end\n        i = i + 1\n\
    \    end\n    \n    for i = 1, k do\n        maxArr[i] = maxNum\n    end\n   \
    \ return maxArr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqr29byxe.lua:30:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpqr29byxe.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Get the maximum\
    \ element in the first k elements\n  local max_element = arr[1]\n  for i = 2,\
    \ k do\n    if arr[i] > max_element then\n      max_element = arr[i]\n    end\n\
    \  end\n  \n  -- Sort the remaining elements and return them\n  local sorted_arr\
    \ = {}\n  for i = 2, k do\n    table.insert(sorted_arr, arr[i])\n  end\n  table.sort(sorted_arr)\n\
    \  return sorted_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc8u1fm6v.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {-4, 5}\nstack traceback:\n\t/tmp/tmpc8u1fm6v.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  if k > #arr then return nil end\n  if k == 1 then return arr end\n  local max_so_far\
    \ = arr[1]\n  local max_ending_here = arr[1]\n  for i = 2, #arr do\n    if arr[i]\
    \ > max_ending_here then\n      max_ending_here = max_so_far\n      max_so_far\
    \ = arr[i]\n    end\n  end\n  return max_so_far, arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jnon0a2.lua:27:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmp8jnon0a2.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local max_arr = {}\n  local max_num = 0\n  for i = 1, k do\n    max_num = math.max(max_num,\
    \ arr[i])\n  end\n  for i = 1, k do\n    max_arr[i] = max_num\n  end\n  return\
    \ max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuzj_ytk8.lua:25:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpuzj_ytk8.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\n  -- Get the max number\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  -- Sort the remaining elements and return them\n  return maximum(arr, k - 1)\
    \ + [max_element]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvzbntdx1.lua:23: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local results = {}\n    for i = 1, k do\n        local max_val = -1000\n\
    \        for j = 1, #arr do\n            if arr[j] > max_val then\n          \
    \      max_val = arr[j]\n            end\n        end\n        results[i] = max_val\n\
    \    end\n    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpug4eoag2.lua:27:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpug4eoag2.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then\n        return arr\n    end\n    local max_arr = {}\n   \
    \ local max_num = arr[1]\n    for i = 2, k do\n        if arr[i] > max_num then\n\
    \            max_num = arr[i]\n        end\n    end\n    for i = 2, k do\n   \
    \     if arr[i] > max_num then\n            max_arr[i] = arr[i]\n        end\n\
    \    end\n    return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_aw9qc0b.lua:32:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmp_aw9qc0b.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local result = {}\n    local max = 0\n    for i = 1, k do\n        local\
    \ element = arr[i]\n        if element > max then\n            max = element\n\
    \        end\n    end\n    for i = 1, k do\n        local element = arr[i]\n \
    \       if element == max then\n            result[i] = element\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7py8j7n.lua:31:\
    \ expected: {-4, -3, 5}\nactual: {3=5}\nstack traceback:\n\t/tmp/tmpv7py8j7n.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n        max_num\
    \ = max_num > arr[i] and max_num or arr[i]\n    end\n    for i = 1, k do\n   \
    \     max_arr[i] = max_num\n    end\n    return max_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa558ey35.lua:25:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpa558ey35.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = -math.inf\n    for i = 1, k do\n\
    \        local max_elem = arr[i]\n        for j = 1, k do\n            if arr[j]\
    \ > max_elem then\n                max_elem = arr[j]\n            end\n      \
    \  end\n        max_arr[i] = max_elem\n        if max_num < max_elem then\n  \
    \          max_num = max_elem\n        end\n    end\n    return max_arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx56gfa1k.lua:12:\
    \ attempt to perform arithmetic on field 'inf' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpx56gfa1k.lua:12: in function 'candidate'\n\t/tmp/tmpx56gfa1k.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max = 0\n    local max_index = 0\n    for i = 1, k do\n        if arr[i]\
    \ > max then\n            max = arr[i]\n            max_index = i\n        end\n\
    \    end\n    return max_index, max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppw98oafx.lua:25:\
    \ expected: {-4, -3, 5}\nactual: 3\nstack traceback:\n\t/tmp/tmppw98oafx.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphhnjck0r.lua:32: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local result = {}\n  local max = 0\n  local index = 0\n  for i = 1, k do\n\
    \    local element = arr[index]\n    if element > max then\n      max = element\n\
    \      index = i\n    end\n  end\n  table.insert(result, max)\n  for i = k + 1,\
    \ #arr do\n    local element = arr[index]\n    if element > max then\n      max\
    \ = element\n      index = i\n    end\n  end\n  table.insert(result, max)\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb2j_9ea7.lua:16:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpb2j_9ea7.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpb2j_9ea7.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphhnjck0r.lua:32: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphhnjck0r.lua:32: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local result = {}\n    local max = 0\n    for i = 1, k do\n        if arr[i]\
    \ > max then\n            max = arr[i]\n        end\n    end\n    for i = 1, k\
    \ do\n        if arr[i] > max then\n            result[i] = arr[i]\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqz_o8e98.lua:29:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpqz_o8e98.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphhnjck0r.lua:32: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local results = {}\n    for i = 1, k do\n        local max = -1000\n    \
    \    for j = 1, #arr do\n            if arr[j] > max then\n                max\
    \ = arr[j]\n            end\n        end\n        results[i] = max\n    end\n\
    \    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkx1nmbe.lua:27:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpgkx1nmbe.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then\n        return arr\n    end\n    local max_arr = {}\n   \
    \ for i = 1, k do\n        max_arr[i] = arr[i]\n    end\n    local max_idx = k\
    \ - 1\n    for i = k, 1, -1 do\n        if arr[i] > max_arr[max_idx] then\n  \
    \          max_arr[max_idx] = arr[i]\n            max_idx = i\n        end\n \
    \   end\n    return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6qla7s07.lua:31:\
    \ expected: {-4, -3, 5}\nactual: {-3, 5, 5}\nstack traceback:\n\t/tmp/tmp6qla7s07.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = arr[1]\n    for i = 2, k do\n   \
    \     if arr[i] > max_num then\n            max_num = arr[i]\n        end\n  \
    \  end\n    max_arr[1] = max_num\n    for i = 2, k do\n        if arr[i] > max_num\
    \ then\n            max_arr[i] = arr[i]\n        end\n    end\n    return max_arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapo6ok16.lua:30:\
    \ expected: {-4, -3, 5}\nactual: {5}\nstack traceback:\n\t/tmp/tmpapo6ok16.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then\n        return arr\n    end\n    local max_so_far = arr[1]\n\
    \    local max_ending_here = arr[1]\n    for i = 2, k do\n        if arr[i] >\
    \ max_ending_here then\n            max_ending_here = arr[i]\n        end\n  \
    \      if arr[i] > max_so_far then\n            max_so_far = arr[i]\n        end\n\
    \    end\n    return max_so_far, max_ending_here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6v1s3ih.lua:30:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmpj6v1s3ih.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local result = {}\n    local max = 0\n    for i = 1, k do\n        local\
    \ cur = arr[i]\n        if cur > max then\n            max = cur\n        end\n\
    \    end\n    for i = 1, k do\n        table.insert(result, max)\n        max\
    \ = max - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbmc2iu_s.lua:29:\
    \ expected: {-4, -3, 5}\nactual: {5, 4, 3}\nstack traceback:\n\t/tmp/tmpbmc2iu_s.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 0 then\n    return arr\n  end\n  -- Get the first k\
    \ elements\n  local max_arr = arr:sub(1, k)\n  -- Get the max element in the remaining\
    \ array\n  local max_elem = max_arr[1]\n  -- Get the remaining array\n  local\
    \ rest_arr = arr:sub(k + 1)\n  -- Get the max element in the remaining array\n\
    \  local rest_elem = rest_arr[1]\n  -- Get the max element in the remaining array\n\
    \  local rest_max_arr = rest_arr:sub(1, k)\n  -- Get the max element in the remaining\
    \ array\n  local rest_max_elem = rest_max_arr[1]\n  -- Get the max element in\
    \ the remaining array\n  local rest_rest_max_arr = rest_arr:sub(k + 1)\n  -- Get\
    \ the max element in the remaining array\n  local rest_rest_max_elem = rest_rest_max_arr[1]\n\
    \  -- Get the max element in the remaining array\n  local rest_rest_rest_max_arr\
    \ = rest_arr:sub(k + 1)\n  -- Get the max element in the remaining array\n  local\
    \ rest_rest_rest_max_elem = rest_rest_rest_max_arr[1]\n  -- Get the max element\
    \ in the remaining array\n  local rest_rest_rest_rest_max_arr = rest_arr:sub(k\
    \ + 1)\n  -- Get the max element in the remaining array\n  local rest_rest_rest_rest_max_elem\
    \ = rest_rest_rest_rest_max_arr[1]\n  -- Get the max element in the remaining\
    \ array\n  local rest_rest_rest_rest_rest_max_arr = rest_arr:sub(k + 1)\n  --\
    \ Get the max element in the remaining array\n  local rest_rest_rest_rest_max_elem\
    \ = rest_rest_rest_rest_max_arr[1]\n  -- Get the max element in the remaining\
    \ array\n  local rest_rest_rest_rest_rest_max_arr = rest_arr:sub(k + 1)\n  --\
    \ Get the max element in the remaining array\n  local rest_rest_rest_rest_rest_max_elem\
    \ = rest_rest_rest_rest_rest_max_arr[1]\n  -- Get the max element in the remaining\
    \ array\n  local rest_rest_rest_rest_rest_rest_max_arr = rest_arr:sub(k + 1)\n\
    \  -- Get the max element in the remaining array\n  local rest_rest_rest_rest_rest_max_elem\
    \ = rest_rest_rest_rest_rest_max_arr[1]\n  -- Get the max element in the remaining\
    \ array\n  local rest_rest_rest_rest_rest_rest_max_arr = rest_arr:sub(k + 1)\n\
    \  -- Get the max element in the remaining array\n  local rest_rest_rest_rest_rest_rest_max_elem\
    \ = rest_rest_rest_rest_rest_rest_max_arr[1]\n  -- Get the max element in the\
    \ remaining array\n  local rest_rest_rest_rest_rest_rest_max_arr = rest_arr:sub(k\
    \ + 1)\n  -- Get the max element in the remaining array\n  local rest_rest_rest_rest_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpde5xa21d.lua:76: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_k = 0\n    local max_num = 0\n    for i\
    \ = 1, k do\n        max_num = max_num + arr[i]\n        if max_num > max_arr[k]\
    \ then\n            max_arr[k] = max_num\n        end\n    end\n    return max_arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_k86lb7y.lua:16:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp_k86lb7y.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmp_k86lb7y.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then\n        return arr\n    end\n    local max_so_far = arr[1]\n\
    \    local max_ending_here = arr[1]\n    for i = 2, k do\n        if arr[i] >\
    \ max_ending_here then\n            max_ending_here = arr[i]\n        end\n  \
    \      if max_ending_here > max_so_far then\n            max_so_far = max_ending_here\n\
    \        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvluatza.lua:30:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmpuvluatza.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max = 0\n    local results = {}\n    for i = 1, k do\n        local\
    \ element = arr[i]\n        if element > max then\n            max = element\n\
    \        end\n    end\n    for i = 1, k do\n        local element = arr[i]\n \
    \       if element == max then\n            results[i] = element\n        end\n\
    \    end\n    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfw98pb_e.lua:31:\
    \ expected: {-4, -3, 5}\nactual: {3=5}\nstack traceback:\n\t/tmp/tmpfw98pb_e.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local results = {}\n    local max = 0\n    for i = 1, k do\n        local\
    \ element = arr[i]\n        if element > max then\n            max = element\n\
    \        end\n    end\n    for i = 1, k do\n        local element = arr[i]\n \
    \       if element == max then\n            results[i] = element\n        end\n\
    \    end\n    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapphe5ib.lua:31:\
    \ expected: {-4, -3, 5}\nactual: {3=5}\nstack traceback:\n\t/tmp/tmpapphe5ib.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = nil\n    for i = 1, k do\n      \
    \  max_num = arr[i]\n        for j = 1, k do\n            if arr[j] > max_num\
    \ then\n                max_num = arr[j]\n            end\n        end\n     \
    \   table.insert(max_arr, max_num)\n    end\n    return max_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4f31ttl.lua:28:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpy4f31ttl.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local result = {}\n  local max = 0\n  local index = 0\n  for i = 1, k do\n\
    \    if arr[index] > max then\n      max = arr[index]\n    end\n    index = index\
    \ + 1\n  end\n  \n  for i = 1, k do\n    if arr[index] > max then\n      max =\
    \ arr[index]\n    end\n    index = index + 1\n  end\n  \n  for i = 1, k do\n \
    \   table.insert(result, max)\n    index = index + 1\n  end\n  \n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplgsyjfi4.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmplgsyjfi4.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmplgsyjfi4.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n        max_num\
    \ = math.max(max_num, arr[i])\n    end\n    for i = 1, k do\n        max_arr[i]\
    \ = max_num\n    end\n    return max_arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp94uxjtdp.lua:25:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp94uxjtdp.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then\n        return arr\n    end\n    local max_so_far = arr[1]\n\
    \    local max_ending_here = arr[1]\n    for i = 2, k do\n        if arr[i] >\
    \ max_ending_here then\n            max_ending_here = arr[i]\n        end\n  \
    \      if max_ending_here > max_so_far then\n            max_so_far = max_ending_here\n\
    \        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvluatza.lua:30:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmpuvluatza.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  if k > #arr then return nil end\n  if k == 1 then return arr end\n  local max_so_far\
    \ = arr[1]\n  local max_ending_here = arr[1]\n  for i = 2, k do\n    if arr[i]\
    \ > max_ending_here then\n      max_ending_here = arr[i]\n    end\n    if max_ending_here\
    \ > max_so_far then\n      max_so_far = max_ending_here\n    end\n  end\n  return\
    \ max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfv9qu2kq.lua:29:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmpfv9qu2kq.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphhnjck0r.lua:32: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local max_arr = {}\n  local max_arr_len = 0\n  local max_arr_i = 0\n  local\
    \ max_arr_j = 0\n  local max_arr_k = 0\n  local max_arr_arr_i = 0\n  local max_arr_arr_j\
    \ = 0\n  local max_arr_arr_k = 0\n  local max_arr_arr_arr_i = 0\n  local max_arr_arr_arr_j\
    \ = 0\n  local max_arr_arr_arr_k = 0\n  local max_arr_arr_arr_arr_i = 0\n  local\
    \ max_arr_arr_arr_arr_j = 0\n  local max_arr_arr_arr_arr_k = 0\n  local max_arr_arr_arr_arr_arr_i\
    \ = 0\n  local max_arr_arr_arr_arr_arr_j = 0\n  local max_arr_arr_arr_arr_arr_k\
    \ = 0\n  local max_arr_arr_arr_arr_arr_i = 0\n  local max_arr_arr_arr_arr_arr_j\
    \ = 0\n  local max_arr_arr_arr_arr_arr_k = 0\n  local max_arr_arr_arr_arr_arr_arr_i\
    \ = 0\n  local max_arr_arr_arr_arr_arr_arr_j = 0\n  local max_arr_arr_arr_arr_arr_arr_k\
    \ = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_i = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_j\
    \ = 0\n  local max_arr_arr_arr_arr_arr_arr_k = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_i\
    \ = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_j = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_k\
    \ = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_arr_i = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_j\
    \ = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_k = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_arr_i\
    \ = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_j = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_k\
    \ = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_arr_i = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_arr_j\
    \ = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_arr_k = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_arr_i\
    \ = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_arr_j = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_arr_k\
    \ = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_arr_i = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_arr_j\
    \ = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_k = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_arr_i\
    \ = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_arr_j = 0\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8ftj3lci.lua:75: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local maxArr = {} -- the max array\n    local maxLen = -1 -- length of max\
    \ array\n    for i = 1, k do\n        local curMax = arr[1]\n        for j = 2,\
    \ #arr do\n            if arr[j] > curMax then\n                curMax = arr[j]\n\
    \            end\n        end\n        maxArr[#maxArr + 1] = curMax\n    end\n\
    \    return maxArr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqded1a9r.lua:28:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpqded1a9r.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphhnjck0r.lua:32: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then\n        return arr\n    end\n    local max_so_far = arr[1]\n\
    \    local max_ending_here = arr[1]\n    for i = 2, k do\n        if arr[i] >\
    \ max_ending_here then\n            max_ending_here = arr[i]\n        end\n  \
    \      if max_ending_here > max_so_far then\n            max_so_far = max_ending_here\n\
    \        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvluatza.lua:30:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmpuvluatza.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then\n        return arr\n    end\n    local max_so_far = arr[1]\n\
    \    local max_ending_here = arr[1]\n    for i = 2, k do\n        if arr[i] >\
    \ max_ending_here then\n            max_ending_here = arr[i]\n        end\n  \
    \      if max_ending_here > max_so_far then\n            max_so_far = max_ending_here\n\
    \        end\n    end\n    return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm0pxuq3b.lua:30:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpm0pxuq3b.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local maxArr = {} -- the result array\n  local maxNum = arr[1]\n  for i = 2,\
    \ k do\n    if arr[i] > maxNum then\n      maxNum = arr[i]\n    end\n  end\n \
    \ maxArr[1] = maxNum\n  for i = 2, k do\n    maxArr[i] = arr[i]\n  end\n  return\
    \ maxArr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2qnp0gvk.lua:28:\
    \ expected: {-4, -3, 5}\nactual: {5, -4, 5}\nstack traceback:\n\t/tmp/tmp2qnp0gvk.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_count = 0\n    for i = 1, k do\n      \
    \  max_count = max_count + 1\n        if max_count > #arr then\n            max_count\
    \ = #arr\n        end\n        max_arr[i] = arr[max_count]\n    end\n    return\
    \ max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphrn7gyft.lua:26:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmphrn7gyft.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local results = {}\n    for i = 1, k do\n        local max_value = -1000\n\
    \        for j = 1, #arr do\n            if arr[j] > max_value then\n        \
    \        max_value = arr[j]\n            end\n        end\n        results[i]\
    \ = max_value\n    end\n    return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3vq_jdcg.lua:27:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp3vq_jdcg.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then\n        return arr\n    end\n    local max_so_far = arr[1]\n\
    \    local max_ending_here = arr[1]\n    for i = 2, k do\n        if arr[i] >\
    \ max_ending_here then\n            max_ending_here = arr[i]\n        end\n  \
    \      if arr[i] > max_so_far then\n            max_so_far = arr[i]\n        end\n\
    \    end\n    return max_so_far, max_ending_here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6v1s3ih.lua:30:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmpj6v1s3ih.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphhnjck0r.lua:32: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Get the maximum\
    \ number in the first k elements\n  local max_element = arr[1]\n  for i = 2, k\
    \ do\n    if arr[i] > max_element then\n      max_element = arr[i]\n    end\n\
    \  end\n  \n  -- Sort the remaining elements and return them\n  local sorted_arr\
    \ = {}\n  for i = 2, k do\n    if arr[i] > max_element then\n      table.insert(sorted_arr,\
    \ arr[i])\n    end\n  end\n  return sorted_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu831eo9l.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpu831eo9l.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then\n        return arr\n    end\n    local max_arr = {}\n   \
    \ local max_num = 0\n    for i = 1, k do\n        if arr[i] > max_num then\n \
    \           max_num = arr[i]\n        end\n    end\n    max_arr[1] = max_num\n\
    \    for i = 2, k do\n        if arr[i] > max_num then\n            max_arr[i]\
    \ = arr[i]\n        end\n    end\n    return max_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmyfbp533.lua:33:\
    \ expected: {-4, -3, 5}\nactual: {5}\nstack traceback:\n\t/tmp/tmpmyfbp533.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then\n        return arr\n    end\n    local max_so_far = arr[1]\n\
    \    local max_ending_here = arr[1]\n    for i = 2, k do\n        if arr[i] >\
    \ max_ending_here then\n            max_ending_here = arr[i]\n        end\n  \
    \      if max_ending_here > max_so_far then\n            max_so_far = max_ending_here\n\
    \        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvluatza.lua:30:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmpuvluatza.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 0 then\n    return arr\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxaqkcc26.lua:32: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_count = 0\n    for i = 1, k do\n      \
    \  max_count = max_count + 1\n        if max_count > #max_arr then\n         \
    \   max_count = #max_arr\n        end\n        max_arr[max_count] = arr[i]\n \
    \   end\n    return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeghiqlkf.lua:26:\
    \ expected: {-4, -3, 5}\nactual: {0=5}\nstack traceback:\n\t/tmp/tmpeghiqlkf.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 0 then\n    return arr\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxaqkcc26.lua:32: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local maxArr = {} -- the max array\n    local maxLen = k\n    for i = 1,\
    \ k do\n        local maxNum = arr[1]\n        for j = 2, #arr do\n          \
    \  if arr[j] > maxNum then\n                maxNum = arr[j]\n            end\n\
    \        end\n        maxArr[i] = maxNum\n    end\n    return maxArr\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5cjbjyj2.lua:28:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp5cjbjyj2.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local maxArray = {}\n    local maxLength = 0\n    for i = 1, k do\n     \
    \   local maxElement = arr[1]\n        for j = 2, #arr do\n            if arr[j]\
    \ > maxElement then\n                maxElement = arr[j]\n            end\n  \
    \      end\n        maxArray[i] = maxElement\n        if maxLength < #maxArray\
    \ then\n            maxLength = #maxArray\n        end\n    end\n    return maxArray\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptz2dx4fu.lua:31:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmptz2dx4fu.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local result = {}\n  local max = 0\n  local pos = 1\n  local len = #arr\n \
    \ while pos < len do\n    if arr[pos] > max then\n      max = arr[pos]\n    end\n\
    \    pos = pos + 1\n  end\n  \n  -- If k is less than or equal to zero, return\
    \ an empty array\n  if k == 0 then\n    return result\n  end\n  \n  -- If k is\
    \ greater than or equal to length of array, return an empty array\n  if k > len\
    \ then\n    return result\n  end\n  \n  -- If k is equal to length of array, return\
    \ arr\n  if k == len then\n    for i = 1, len do\n      result[i] = arr[i]\n \
    \   end\n    return result\n  end\n  \n  -- If k is greater than length of array,\
    \ then return arr\n  local i = 1\n  while i <= k do\n    local max = 0\n    local\
    \ pos = 1\n    local len = #arr\n    while pos < len do\n      if arr[pos] > max\
    \ then\n        max = arr[pos]\n      end\n      pos = pos + 1\n    end\n    \n\
    \    if max > result[i - 1] or i == 1 then\n      result[i - 1] = max\n    end\n\
    \    i = i + 1\n  end\n  \n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_550k6w.lua:65:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpt_550k6w.lua:65:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then\n        return arr\n    end\n    local max_num = arr[1]\n\
    \    local max_idx = 1\n    for idx = 2, k do\n        if arr[idx] > max_num then\n\
    \            max_num = arr[idx]\n            max_idx = idx\n        end\n    end\n\
    \    return arr[k - 1], arr[max_idx]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjf1s5j76.lua:28:\
    \ expected: {-4, -3, 5}\nactual: -4\nstack traceback:\n\t/tmp/tmpjf1s5j76.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\n  -- Find the max number\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  -- Sort the remaining elements and return them\n  return arr:sub(1, k - 1):sort(function(a,\
    \ b) return a > b end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9lf5ugc.lua:23:\
    \ attempt to call method 'sub' (a nil value)\nstack traceback:\n\t/tmp/tmp_9lf5ugc.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmp_9lf5ugc.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  if k == 0 then\n    return arr\n  else\n    local max_arr = {}\n    for i =\
    \ 1, k do\n      local max_num = -1000\n      for j = 1, #arr do\n        if arr[j]\
    \ > max_num then\n          max_num = arr[j]\n        end\n      end\n      table.insert(max_arr,\
    \ max_num)\n    end\n    return max_arr\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfdsslsnr.lua:31:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpfdsslsnr.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphhnjck0r.lua:32: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Write your code here.\n  local max = 0\n  local max_index = 0\n  for i =\
    \ 1, k do\n    if arr[i] > max then\n      max = arr[i]\n      max_index = i\n\
    \    end\n  end\n  local max_array = arr\n  max_array[max_index] = max\n  return\
    \ max_array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2s_lvwn.lua:28:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpy2s_lvwn.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local maxArr = {} -- the result array\n    local maxNum = arr[1]\n    for\
    \ i = 2, k do\n        if arr[i] > maxNum then\n            maxNum = arr[i]\n\
    \        end\n    end\n    for i = 1, k do\n        maxArr[i] = maxNum\n    end\n\
    \    return maxArr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8k9q6ph6.lua:27:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp8k9q6ph6.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local max_arr = {}\n  local max_num = 0\n  local max_idx = 0\n  for i = 1,\
    \ k do\n    max_num = arr[i]\n    max_idx = i\n  end\n  for i = k + 1, #arr do\n\
    \    if arr[i] > max_num then\n      max_num = arr[i]\n      max_idx = i\n   \
    \ end\n  end\n  table.insert(max_arr, arr[max_idx])\n  return max_arr\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8q1uioiz.lua:31:\
    \ expected: {-4, -3, 5}\nactual: {5}\nstack traceback:\n\t/tmp/tmp8q1uioiz.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local maxArr = {} -- The result array\n  local maxNum = 0 -- The maximum number\n\
    \  local i = 1\n  while i <= k do\n    if arr[i] > maxNum then\n      maxNum =\
    \ arr[i]\n    end\n    table.insert(maxArr, maxNum)\n    i = i + 1\n  end\n  return\
    \ maxArr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp837v76_r.lua:27:\
    \ expected: {-4, -3, 5}\nactual: {0, 0, 5}\nstack traceback:\n\t/tmp/tmp837v76_r.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n        max_num\
    \ = max_num or arr[i]\n        max_arr[i] = max_num\n    end\n    for i = k +\
    \ 1, #arr do\n        max_num = max_num or arr[i]\n        max_arr[i] = max_num\n\
    \    end\n    return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9iz97ghs.lua:27:\
    \ expected: {-4, -3, 5}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp9iz97ghs.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphhnjck0r.lua:32: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then\n        return arr\n    end\n    local max_so_far = arr[1]\n\
    \    local max_ending_here = arr[1]\n    for i = 2, k do\n        if arr[i] >\
    \ max_ending_here then\n            max_ending_here = arr[i]\n        end\n  \
    \      if max_ending_here > max_so_far then\n            max_so_far = max_ending_here\n\
    \        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvluatza.lua:30:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmpuvluatza.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = 0\n    local max_index = 0\n    for\
    \ i = 1, k do\n        max_num = max_num + arr[i]\n        if max_num > arr[i]\
    \ then\n            max_num = arr[i]\n            max_index = i\n        end\n\
    \    end\n    max_arr[max_index] = max_num\n    for i = k + 1, #arr do\n     \
    \   max_num = max_num + arr[i]\n        if max_num > arr[i] then\n           \
    \ max_num = arr[i]\n            max_index = i\n        end\n    end\n    max_arr[max_index]\
    \ = max_num\n    return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpap29usp1.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {0=-2}\nstack traceback:\n\t/tmp/tmpap29usp1.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local maxArr = {} -- the max array\n    local maxLen = k\n    for i = 1,\
    \ k do\n        local maxNum = arr[1]\n        for j = 2, #arr do\n          \
    \  if arr[j] > maxNum then\n                maxNum = arr[j]\n            end\n\
    \        end\n        maxArr[i] = maxNum\n    end\n    return maxArr\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5cjbjyj2.lua:28:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp5cjbjyj2.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphhnjck0r.lua:32: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n        max_num\
    \ = max_num or arr[i]\n        max_arr[i] = max_num\n    end\n    for i = k +\
    \ 1, #arr do\n        max_num = max_num or arr[i]\n        max_arr[i] = max_num\n\
    \    end\n    return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9iz97ghs.lua:27:\
    \ expected: {-4, -3, 5}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp9iz97ghs.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\n  -- Find the max number\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  -- Sort the remaining elements and return them\n  return arr:sub(1, k - 1):sort(function(a,\
    \ b) return a > b end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9lf5ugc.lua:23:\
    \ attempt to call method 'sub' (a nil value)\nstack traceback:\n\t/tmp/tmp_9lf5ugc.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmp_9lf5ugc.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local result = {}\n    local max = 0\n    for i = 1, k do\n        local\
    \ element = arr[i]\n        if element > max then\n            max = element\n\
    \        end\n    end\n    for i = 1, k do\n        local element = arr[i]\n \
    \       if element == max then\n            result[i] = element\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7py8j7n.lua:31:\
    \ expected: {-4, -3, 5}\nactual: {3=5}\nstack traceback:\n\t/tmp/tmpv7py8j7n.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local maxArr = {} -- the result array\n    local maxNum = arr[1]\n    for\
    \ i = 2, k do\n        if arr[i] > maxNum then\n            maxNum = arr[i]\n\
    \        end\n    end\n    for i = 1, k do\n        maxArr[i] = maxNum\n    end\n\
    \    return maxArr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8k9q6ph6.lua:27:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp8k9q6ph6.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 0 then\n    return arr\n  end\n  \n  -- Find the max\
    \ number in the first k elements\n  local max_element = arr[1]\n  for i = 2, k\
    \ do\n    if arr[i] > max_element then\n      max_element = arr[i]\n    end\n\
    \  end\n  \n  -- Find the max number in the remaining elements\n  local max_element_rest\
    \ = arr[k]\n  for i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n\
    \      max_element_rest = arr[i]\n    end\n  end\n  \n  -- Return the max number\
    \ in the first k elements\n  return arr .. [max_element] .. arr .. [max_element_rest]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4jqwgair.lua:33: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_count = 0\n    for i = 1, k do\n      \
    \  max_count = max_count + 1\n        if max_count == 1 then\n            max_arr[i]\
    \ = arr[i]\n        else\n            if arr[i] > max_arr[i] then\n          \
    \      max_arr[i] = arr[i]\n            end\n        end\n    end\n    return\
    \ max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplha0444f.lua:18:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmplha0444f.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmplha0444f.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local result = {}\n    local max = 0\n    for i = 1, k do\n        local\
    \ element = arr[i]\n        if element > max then\n            max = element\n\
    \        end\n    end\n    for i = 1, k do\n        local element = arr[i]\n \
    \       if element == max then\n            result[i] = element\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7py8j7n.lua:31:\
    \ expected: {-4, -3, 5}\nactual: {3=5}\nstack traceback:\n\t/tmp/tmpv7py8j7n.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local max = 0\n  local max_index = 0\n  for i = 1, k do\n    if arr[i] > max\
    \ then\n      max = arr[i]\n      max_index = i\n    end\n  end\n  return max_index,\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8m4dvb3.lua:25:\
    \ expected: {-4, -3, 5}\nactual: 3\nstack traceback:\n\t/tmp/tmpd8m4dvb3.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphhnjck0r.lua:32: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = -math.inf\n    for i = 1, k do\n\
    \        if arr[i] > max_num then\n            max_num = arr[i]\n        end\n\
    \    end\n    for i = 1, k do\n        if arr[i] > max_num then\n            max_arr[i]\
    \ = arr[i]\n        end\n    end\n    return max_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplwjz1t6r.lua:12:\
    \ attempt to perform arithmetic on field 'inf' (a nil value)\nstack traceback:\n\
    \t/tmp/tmplwjz1t6r.lua:12: in function 'candidate'\n\t/tmp/tmplwjz1t6r.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then\n        return arr\n    end\n    local max_so_far = arr[1]\n\
    \    local max_ending_here = arr[1]\n    for i = 2, k do\n        if arr[i] >\
    \ max_ending_here then\n            max_ending_here = arr[i]\n        end\n  \
    \      if max_ending_here > max_so_far then\n            max_so_far = max_ending_here\n\
    \        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvluatza.lua:30:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmpuvluatza.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k > #arr then return nil end\n    local max = 0\n    local max_index =\
    \ 0\n    for i = 1, k do\n        if arr[i] > max then\n            max = arr[i]\n\
    \            max_index = i\n        end\n    end\n    return max_index, max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqx87gsxk.lua:26:\
    \ expected: {-4, -3, 5}\nactual: 3\nstack traceback:\n\t/tmp/tmpqx87gsxk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local result = {}\n    local max = 0\n    local i = 1\n    while i <= k do\n\
    \        if arr[i] > max then\n            max = arr[i]\n        end\n       \
    \ i = i + 1\n    end\n    for i = 1, k do\n        if arr[i] > max then\n    \
    \        result[i] = arr[i]\n        end\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ffhuo3w.lua:31:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmp4ffhuo3w.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n        max_num\
    \ = math.max(max_num, arr[i])\n    end\n    for i = 1, k do\n        max_arr[i]\
    \ = max_num\n    end\n    return max_arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp94uxjtdp.lua:25:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp94uxjtdp.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_so_far = arr[1]\n    local max_ending_here = arr[1]\n    for i\
    \ = 2, #arr do\n        if arr[i] > max_ending_here then\n            max_ending_here\
    \ = arr[i]\n        end\n        if max_ending_here > max_so_far then\n      \
    \      max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpro_eeug3.lua:27:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmpro_eeug3.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local result = {}\n    local max = 0\n    for i = 1, k do\n        if arr[i]\
    \ > max then\n            max = arr[i]\n        end\n    end\n    for i = 1, k\
    \ do\n        if arr[i] > max then\n            result[i] = arr[i]\n        end\n\
    \    end\n    for i = k + 1, #arr do\n        if arr[i] > max then\n         \
    \   result[i] = arr[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpewe3rzdv.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpewe3rzdv.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local maxArr = {} -- the max array\n    local maxNum = 0 -- max number\n\
    \    local i = 1\n    while i <= k do\n        if arr[i] > maxNum then\n     \
    \       maxNum = arr[i]\n        end\n        table.insert(maxArr, maxNum)\n \
    \       i = i + 1\n    end\n    return maxArr\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65ce59fw.lua:27:\
    \ expected: {-4, -3, 5}\nactual: {0, 0, 5}\nstack traceback:\n\t/tmp/tmp65ce59fw.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n        max_num\
    \ = math.max(max_num, arr[i])\n    end\n    for i = 1, k do\n        max_arr[i]\
    \ = max_num\n    end\n    return max_arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp94uxjtdp.lua:25:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp94uxjtdp.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local maxArr = {} -- the max array\n    local maxLen = 0 -- length of max\
    \ array\n    local maxNum = 0 -- max number\n    local i = 1\n    while i <= k\
    \ do\n        local curNum = arr[i]\n        if curNum > maxNum then\n       \
    \     maxNum = curNum\n            maxLen = i\n        end\n        i = i + 1\n\
    \    end\n    for i = 1, k do\n        table.insert(maxArr, arr[i])\n    end\n\
    \    return maxArr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1g73f2o.lua:32:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpw1g73f2o.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphhnjck0r.lua:32: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local result = {}\n    local max = 0\n    local index = 0\n    for i = 1,\
    \ k do\n        if arr[i] > max then\n            max = arr[i]\n            index\
    \ = i\n        end\n    end\n    for i = 1, k do\n        if arr[i] > max then\n\
    \            result[i] = arr[i]\n        else\n            result[i] = max\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuhdeld95.lua:33:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpuhdeld95.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local result = {}\n  local max = 0\n  local index = 0\n  for i = 1, k do\n\
    \    if arr[i] > max then\n      max = arr[i]\n      index = i\n    end\n  end\n\
    \  table.insert(result, max)\n  for i = k + 1, #arr do\n    if arr[i] > max then\n\
    \      max = arr[i]\n      index = i\n    end\n  end\n  table.insert(result, max)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjajkbfje.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {5, 5}\nstack traceback:\n\t/tmp/tmpjajkbfje.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Write your code here\n  local max = 0\n  local maxIndex = 0\n  for i = 1,\
    \ k do\n    if arr[i] > max then\n      max = arr[i]\n      maxIndex = i\n   \
    \ end\n  end\n  local sortedArray = {}\n  for i = 1, k do\n    sortedArray[i]\
    \ = arr[maxIndex + i]\n  end\n  return sortedArray\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz6477j4a.lua:30:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpz6477j4a.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = -math.inf\n    for i = 1, k do\n\
    \        if arr[i] > max_num then\n            max_num = arr[i]\n        end\n\
    \    end\n    for i = 1, k do\n        if arr[i] > max_num then\n            max_arr[i]\
    \ = arr[i]\n        end\n    end\n    return max_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplwjz1t6r.lua:12:\
    \ attempt to perform arithmetic on field 'inf' (a nil value)\nstack traceback:\n\
    \t/tmp/tmplwjz1t6r.lua:12: in function 'candidate'\n\t/tmp/tmplwjz1t6r.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local result = {}\n    for i = 1, k do\n        local max_element = arr[1]\n\
    \        for j = 2, #arr do\n            if arr[j] > max_element then\n      \
    \          max_element = arr[j]\n            end\n        end\n        result[#result\
    \ + 1] = max_element\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx58m6ly6.lua:27:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpx58m6ly6.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local result = {}\n    for i = 1, k do\n        local max_element = arr[1]\n\
    \        for j = 2, #arr do\n            if arr[j] > max_element then\n      \
    \          max_element = arr[j]\n            end\n        end\n        result[i]\
    \ = max_element\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kud74uh.lua:27:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp3kud74uh.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n        max_num\
    \ = max_num + arr[i]\n    end\n    for i = 1, k do\n        if max_num > arr[i]\
    \ then\n            max_num = arr[i]\n        end\n    end\n    for i = 1, k do\n\
    \        max_arr[i] = max_num\n    end\n    return max_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu4_73du0.lua:30:\
    \ expected: {-4, -3, 5}\nactual: {-4, -4, -4}\nstack traceback:\n\t/tmp/tmpu4_73du0.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local maxArr = {}\n    for i = 1, k do\n        maxArr[i] = arr[i]\n    end\n\
    \    for i = k + 1, #arr do\n        maxArr[i] = arr[i]\n    end\n    return maxArr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1qite46p.lua:24:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp1qite46p.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_count = 0\n    for i = 1, k do\n      \
    \  max_count = max_count + 1\n        if max_count > #max_arr then\n         \
    \   max_count = #max_arr\n        end\n        max_arr[i] = arr[i]\n    end\n\
    \    for i = k + 1, #arr do\n        max_arr[i] = arr[i]\n    end\n    return\
    \ max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi27bwrhb.lua:29:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpi27bwrhb.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\n  -- Get the maximum\
    \ element in the first k elements\n  local max_element = arr[1]\n  -- Get the\
    \ maximum element in the remaining elements\n  for i = 2, k do\n    if arr[i]\
    \ > max_element then\n      max_element = arr[i]\n    end\n  end\n  -- Return\
    \ the maximum element in the first k elements\n  return arr[k] .. maximum(arr[k+1],\
    \ k-1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsshv3xft.lua:16:\
    \ attempt to index local 'arr' (a nil value)\nstack traceback:\n\t/tmp/tmpsshv3xft.lua:16:\
    \ in function 'maximum'\n\t/tmp/tmpsshv3xft.lua:24: in function 'candidate'\n\t\
    /tmp/tmpsshv3xft.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Get the first\
    \ k elements\n  local max_arr = arr:sub(1, k)\n  \n  -- Get the rest of the array\n\
    \  local rest_arr = arr:sub(k + 1)\n  \n  -- Recursively find the maximum among\
    \ rest of array\n  local max_rest = maximum(arr, k - 1)\n  \n  -- Return the maximum\
    \ among rest of array and max of current array\n  return max_arr + max_rest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpffdejs8g.lua:17:\
    \ attempt to call method 'sub' (a nil value)\nstack traceback:\n\t/tmp/tmpffdejs8g.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpffdejs8g.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  if k == 0 then\n    return arr\n  else\n    local max_arr = {}\n    local max_idx\
    \ = 1\n    for i = 1, k do\n      if arr[i] > arr[max_idx] then\n        max_idx\
    \ = i\n      end\n    end\n    max_arr[max_idx] = arr[max_idx]\n    return maximum(arr,\
    \ k - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32xlssiw.lua:29:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp32xlssiw.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then\n        return arr\n    end\n    local max_arr = {}\n   \
    \ local max_idx = 1\n    for i = 1, k do\n        if arr[i] > arr[max_idx] then\n\
    \            max_idx = i\n        end\n    end\n    max_arr[max_idx] = arr[max_idx]\n\
    \    for i = k + 1, #arr do\n        if arr[i] > arr[max_idx] then\n         \
    \   max_idx = i\n        end\n    end\n    max_arr[max_idx] = arr[max_idx]\n \
    \   return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9yajghpd.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {3=5}\nstack traceback:\n\t/tmp/tmp9yajghpd.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n        max_num\
    \ = math.max(max_num, arr[i])\n    end\n    for i = 1, k do\n        table.insert(max_arr,\
    \ max_num)\n    end\n    return max_arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqqh5k7z7.lua:25:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpqqh5k7z7.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n        max_num\
    \ = max_num + arr[i]\n    end\n    for i = 1, k do\n        if max_num > arr[i]\
    \ then\n            max_num = arr[i]\n        end\n    end\n    max_arr = max_arr\
    \ + max_num\n    return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1td__bmb.lua:21:\
    \ attempt to perform arithmetic on local 'max_arr' (a table value)\nstack traceback:\n\
    \t/tmp/tmp1td__bmb.lua:21: in function 'candidate'\n\t/tmp/tmp1td__bmb.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local results = {}\n    local max = 0\n    local i = 1\n    while i <= k\
    \ do\n        if arr[i] > max then\n            max = arr[i]\n        end\n  \
    \      i = i + 1\n    end\n    local j = 1\n    while j <= k do\n        if arr[j]\
    \ > max then\n            results[j] = arr[j]\n        end\n        j = j + 1\n\
    \    end\n    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxijilwv.lua:33:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpoxijilwv.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local maxArr = {} -- the max array\n    local maxNum = 0 -- max number\n\
    \    for i = 1, k do\n        maxNum = arr[i]\n        for j = 1, k do\n     \
    \       if arr[j] > maxNum then\n                maxNum = arr[j]\n           \
    \ end\n        end\n        maxArr[i] = maxNum\n    end\n    return maxArr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70s1_cko.lua:28:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp70s1_cko.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local result = {}\n    local maxNum = arr[1]\n    for i = 2, k do\n     \
    \   if arr[i] > maxNum then\n            maxNum = arr[i]\n        end\n    end\n\
    \    for i = 2, k do\n        result[i] = maxNum\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp42nuhf56.lua:27:\
    \ expected: {-4, -3, 5}\nactual: {2=5, 3=5}\nstack traceback:\n\t/tmp/tmp42nuhf56.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local maxArr = {} -- The result array\n    local maxLength = 0 -- The length\
    \ of the result array\n    local maxNum = 0 -- The maximum number in the result\
    \ array\n    local i = 1\n    \n    -- The first k elements are the maximum\n\
    \    for i = 1, k do\n        local element = arr[i]\n        if element > maxNum\
    \ then\n            maxNum = element\n        end\n    end\n    \n    -- The remaining\
    \ elements are the maximum\n    for i = k, #arr do\n        local element = arr[i]\n\
    \        if element > maxNum then\n            maxNum = element\n        end\n\
    \    end\n    \n    -- Add the first k elements to the result array\n    for i\
    \ = 1, k do\n        local element = arr[i]\n        if element > maxNum then\n\
    \            maxNum = element\n        end\n    end\n    \n    -- Add the remaining\
    \ elements to the result array\n    for i = k, #arr do\n        local element\
    \ = arr[i]\n        if element > maxNum then\n            maxNum = element\n \
    \       end\n    end\n    \n    -- Add the first k elements to the result array\n\
    \    for i = 1, k do\n        local element = arr[i]\n        if element > maxNum\
    \ then\n            maxNum = element\n        end\n    end\n    \n    -- Add the\
    \ remaining elements to the result array\n    for i = k, #arr do\n        local\
    \ element = arr[i]\n        if element > maxNum then\n            maxNum = element\n\
    \        end\n    end\n    \n    -- Add the first k elements to the result array\n\
    \    for i = 1, k do\n        local element = arr[i]\n        if element > maxNum\
    \ then\n            maxNum = element\n        end\n    end\n    \n    -- Add the\
    \ remaining elements to the result array\n    for i = k, #arr do\n        local\
    \ element = arr[i]\n        if element > maxNum then\n            maxNum = element\n\
    \        end\n    end\n    \n    -- Add the first k elements to the result array\n\
    \    for i = 1, k do\n        local element = arr[i]\n        if element > maxNum\
    \ then\n            maxNum = element\n        end\n    end\n    \n    -- Add the\
    \ remaining elements to the result array\n    for i = k, #arr do\n        local\
    \ element = arr[i]\n        if element > maxNum then\n            maxNum = element\n\
    \        end\n    end\n    \n    -- Add the first k elements to the result array\n\
    \    for i = 1, k do\n        local element = arr[i]\n        if element > maxNum\
    \ then\n            maxNum = element\n        end\n    end\n    \n    -- Add the\
    \ remaining elements to the result array\n    for i = k, #arr do\n        local\
    \ element = arr[i]\n        if element > \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpadsgw2cv.lua:108: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local result = {}\n  local max = 0\n  local i = 1\n  while i <= k do\n    if\
    \ arr[i] > max then\n      max = arr[i]\n    end\n    i = i + 1\n  end\n  local\
    \ j = 1\n  while j <= k do\n    if arr[j] > max then\n      max = arr[j]\n   \
    \ end\n    j = j + 1\n  end\n  local i = 1\n  while i <= k do\n    if arr[i] <\
    \ max then\n      result[i] = arr[i]\n    end\n    i = i + 1\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptpe70iu7.lua:40:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4}\nstack traceback:\n\t/tmp/tmptpe70iu7.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then\n        return arr\n    end\n    local max_arr = {}\n   \
    \ local max_num = arr[1]\n    for i = 2, k do\n        if arr[i] > max_num then\n\
    \            max_num = arr[i]\n        end\n    end\n    for i = 2, k do\n   \
    \     if arr[i] > max_num then\n            max_arr[i] = arr[i]\n        end\n\
    \    end\n    return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_aw9qc0b.lua:32:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmp_aw9qc0b.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local result = {}\n  local max = 0\n  local i = 1\n  while i <= k do\n    if\
    \ arr[i] > max then\n      max = arr[i]\n    end\n    i = i + 1\n  end\n  local\
    \ j = 1\n  while j <= k do\n    if arr[j] > max then\n      max = arr[j]\n   \
    \ end\n    j = j + 1\n  end\n  local i = 1\n  while i <= k do\n    if arr[i] <\
    \ max then\n      result[i] = arr[i]\n    end\n    i = i + 1\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptpe70iu7.lua:40:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4}\nstack traceback:\n\t/tmp/tmptpe70iu7.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local result = {}\n    local max = 0\n    for i = 1, k do\n        local\
    \ element = arr[i]\n        if element > max then\n            max = element\n\
    \        end\n    end\n    for i = 1, k do\n        local element = arr[i]\n \
    \       if element > max then\n            result[i] = element\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nsmm_5z.lua:31:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmp5nsmm_5z.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n        max_num\
    \ = max_num + arr[i]\n    end\n    for i = 1, k do\n        if max_num > arr[i]\
    \ then\n            max_num = max_num - arr[i]\n        else\n            max_arr[i]\
    \ = max_num\n            max_num = 0\n        end\n    end\n    return max_arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1b2tc351.lua:30:\
    \ expected: {-4, -3, 5}\nactual: {3=5}\nstack traceback:\n\t/tmp/tmp1b2tc351.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphhnjck0r.lua:32: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- base case\n  if k == 0 then\n    return arr\n  end\n  -- base case\n  if\
    \ k == 1 then\n    return arr[1]\n  end\n  -- recursive case\n  local max_element\
    \ = maximum(arr, k - 1)\n  local max_index = -1\n  for i = 1, k do\n    if arr[i]\
    \ > max_element then\n      max_element = arr[i]\n      max_index = i\n    end\n\
    \  end\n  return max_index, max_element\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6ahk_18.lua:34:\
    \ expected: {-4, -3, 5}\nactual: 3\nstack traceback:\n\t/tmp/tmpx6ahk_18.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local maxArr = {} -- the max array\n    local maxLen = 0 -- length of max\
    \ array\n    local maxNum = 0 -- max number in max array\n    local i = 1\n  \
    \  local j = 1\n    local k = 1\n    while i <= k do\n        if arr[i] > maxNum\
    \ then\n            maxNum = arr[i]\n            maxArr = {arr[i]}\n        else\n\
    \            j = i + 1\n            while j <= k do\n                if arr[j]\
    \ > maxNum then\n                    maxNum = arr[j]\n                    maxArr\
    \ = {arr[j]}\n                else\n                    j = j + 1\n          \
    \      end\n            end\n        end\n        i = i + 1\n    end\n    return\
    \ maxArr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw72ki6qu.lua:40:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpw72ki6qu.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_count = 0\n    for i = 1, k do\n      \
    \  local max_val = -1000\n        for j = 1, #arr do\n            if arr[j] >\
    \ max_val then\n                max_val = arr[j]\n            end\n        end\n\
    \        max_arr[i] = max_val\n        if max_count < i then\n            max_count\
    \ = i\n        end\n    end\n    return max_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_3nqoxa.lua:31:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpc_3nqoxa.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then\n        return arr\n    end\n    local max_arr = {}\n   \
    \ local max_num = arr[1]\n    for i = 2, k do\n        if arr[i] > max_num then\n\
    \            max_num = arr[i]\n        end\n    end\n    for i = 1, k do\n   \
    \     if arr[i] > max_num then\n            max_arr[i] = arr[i]\n        else\n\
    \            max_arr[i] = max_num\n        end\n    end\n    return max_arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpub2uyvsh.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpub2uyvsh.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k > #arr then return nil end\n    local max_so_far = arr[1]\n    local\
    \ max_ending_here = arr[1]\n    for i = 2, k do\n        if arr[i] > max_ending_here\
    \ then\n            max_ending_here = arr[i]\n        end\n        if arr[i] >\
    \ max_so_far then\n            max_so_far = arr[i]\n        end\n    end\n   \
    \ return max_so_far, max_ending_here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvgvuhvjq.lua:28:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmpvgvuhvjq.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local maxArray = {}\n  local maxLength = 0\n  local maxValue = 0\n  local i\
    \ = 1\n  while i <= k do\n    if arr[i] > maxValue then\n      maxValue = arr[i]\n\
    \      maxLength = i\n    end\n    i = i + 1\n  end\n  maxArray = arr:sub(1, maxLength)\n\
    \  return maxArray\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6txvt4gw.lua:22:\
    \ attempt to call method 'sub' (a nil value)\nstack traceback:\n\t/tmp/tmp6txvt4gw.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp6txvt4gw.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then\n        return arr\n    end\n    local max_arr = {}\n   \
    \ local max_num = 0\n    for i = 1, k do\n        if arr[i] > max_num then\n \
    \           max_num = arr[i]\n        end\n    end\n    for i = 1, k do\n    \
    \    if arr[i] > max_num then\n            max_arr[i] = arr[i]\n        end\n\
    \    end\n    return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykzqr7vv.lua:32:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpykzqr7vv.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_count = 0\n    for i = 1, k do\n      \
    \  local max_element = arr[1]\n        for j = 2, #arr do\n            if arr[j]\
    \ > max_element then\n                max_element = arr[j]\n            end\n\
    \        end\n        max_arr[i] = max_element\n        max_count = max_count\
    \ + 1\n    end\n    return max_arr, max_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpedmdtohf.lua:29:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpedmdtohf.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then\n        return arr\n    end\n    local max_so_far = arr[1]\n\
    \    local max_ending_here = arr[1]\n    for i = 2, k do\n        if arr[i] >\
    \ max_ending_here then\n            max_ending_here = arr[i]\n        end\n  \
    \      if arr[i] > max_so_far then\n            max_so_far = arr[i]\n        end\n\
    \    end\n    return max_so_far, max_ending_here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6v1s3ih.lua:30:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmpj6v1s3ih.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local maxArr = {} -- the result array\n    local maxNum = 0 -- stores the\
    \ maximum number in arr\n    local i = 1\n    while i <= k do\n        if arr[i]\
    \ > maxNum then\n            maxNum = arr[i]\n        end\n        i = i + 1\n\
    \    end\n    maxArr = maxArr + maxNum\n    return maxArr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9wi79c0l.lua:20:\
    \ attempt to perform arithmetic on local 'maxArr' (a table value)\nstack traceback:\n\
    \t/tmp/tmp9wi79c0l.lua:20: in function 'candidate'\n\t/tmp/tmp9wi79c0l.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then\n        return arr\n    end\n    local max_so_far = arr[1]\n\
    \    local max_ending_here = arr[1]\n    for i = 2, k do\n        if arr[i] >\
    \ max_ending_here then\n            max_ending_here = arr[i]\n        end\n  \
    \      if max_ending_here > max_so_far then\n            max_so_far = max_ending_here\n\
    \        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvluatza.lua:30:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmpuvluatza.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Write your code here.\n  local max_arr = {}\n  local max_num = 0\n  for\
    \ i = 1, k do\n    max_num = max_num + arr[i]\n  end\n  for i = 1, k do\n    if\
    \ arr[i] > max_num then\n      max_num = arr[i]\n    end\n  end\n  for i = 1,\
    \ k do\n    max_arr[i] = max_num\n  end\n  return max_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpydr2ug4f.lua:31:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpydr2ug4f.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k > #arr then return nil end\n    local max_so_far = arr[1]\n    local\
    \ max_ending_here = arr[1]\n    for i = 2, k do\n        if arr[i] > max_ending_here\
    \ then\n            max_ending_here = arr[i]\n        end\n        if max_ending_here\
    \ > max_so_far then\n            max_so_far = max_ending_here\n        end\n \
    \   end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpca2kn7li.lua:28:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmpca2kn7li.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local result = {}\n  local max = 0\n  local pos = 1\n  local len = #arr\n \
    \ while pos < len do\n    if arr[pos] > max then\n      max = arr[pos]\n    end\n\
    \    pos = pos + 1\n  end\n  \n  while k >= 1 do\n    local pos = 1\n    local\
    \ len = #result\n    while pos < len do\n      if result[pos] > max then\n   \
    \     max = result[pos]\n      end\n      pos = pos + 1\n    end\n    \n    local\
    \ pos = 1\n    local len = #result\n    while pos < len do\n      result[pos]\
    \ = arr[pos]\n      pos = pos + 1\n    end\n    \n    local pos = 1\n    local\
    \ len = #result\n    while pos < len do\n      arr[pos] = max\n      pos = pos\
    \ + 1\n    end\n    \n    k = k - 1\n  end\n  \n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq9pb9fcl.lua:55:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpq9pb9fcl.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n        max_num\
    \ = max_num or arr[i]\n        if arr[i] > max_num then\n            max_num =\
    \ arr[i]\n        end\n    end\n    for i = 1, k do\n        max_arr[i] = max_num\n\
    \    end\n    return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ma5pig6.lua:28:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp9ma5pig6.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n        max_num\
    \ = math.max(max_num, arr[i])\n    end\n    for i = 1, k do\n        max_arr[i]\
    \ = max_num\n    end\n    return max_arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp94uxjtdp.lua:25:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp94uxjtdp.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local max_arr = {}\n  local max_num = 0\n  for i = 1, k do\n    max_num = max_num\
    \ or arr[i]\n    max_arr[i] = max_num\n  end\n  for i = k + 1, #arr do\n    max_num\
    \ = max_num or arr[i]\n    if max_num > max_arr[i] then\n      max_arr[i] = max_num\n\
    \    end\n  end\n  return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppu3jyq8s.lua:29:\
    \ expected: {-4, -3, 5}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmppu3jyq8s.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n        max_num\
    \ = math.max(max_num, arr[i])\n    end\n    for i = 1, k do\n        max_arr[i]\
    \ = max_num\n    end\n    return max_arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp94uxjtdp.lua:25:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp94uxjtdp.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local result = {}\n    local max = 0\n    for i = 1, k do\n        local\
    \ element = arr[i]\n        if element > max then\n            max = element\n\
    \        end\n    end\n    for i = 1, k do\n        local element = arr[i]\n \
    \       if element == max then\n            result[#result + 1] = element\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgjcllyb.lua:31:\
    \ expected: {-4, -3, 5}\nactual: {5}\nstack traceback:\n\t/tmp/tmpzgjcllyb.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- base case\n  if k == 1 then\n    return arr\n  end\n  \n  -- recursive case\n\
    \  local max_arr = {}\n  local max_idx = nil\n  for i = 1, k do\n    local max_val\
    \ = -math.inf\n    for j = 1, #arr do\n      if arr[j] > max_val then\n      \
    \  max_val = arr[j]\n      end\n    end\n    max_arr[i] = max_val\n  end\n  \n\
    \  return maximum(max_arr, k-1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbh1k54cp.lua:20:\
    \ attempt to perform arithmetic on field 'inf' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpbh1k54cp.lua:20: in function 'candidate'\n\t/tmp/tmpbh1k54cp.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- base case\n  if k == 1 then\n    return arr\n  end\n  -- recursive case\n\
    \  local max_so_far = arr[1]\n  local max_ending_here = arr[1]\n  for i = 2, #arr\
    \ do\n    if arr[i] > max_ending_here then\n      max_ending_here = arr[i]\n \
    \   end\n    if max_ending_here > max_so_far then\n      max_so_far = max_ending_here\n\
    \    end\n  end\n  return maximum(arr, k - 1) + [max_so_far]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw7m6ywgt.lua:26: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 0 then\n    return arr\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxaqkcc26.lua:32: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local max_so_far = nil\n  local max_ending_here = nil\n  for i = 1, k do\n\
    \    if max_ending_here == nil then\n      max_ending_here = arr[i]\n    else\n\
    \      if max_ending_here > arr[i] then\n        max_ending_here = arr[i]\n  \
    \    end\n    end\n    if max_so_far == nil then\n      max_so_far = max_ending_here\n\
    \    else\n      if max_so_far > max_ending_here then\n        max_so_far = max_ending_here\n\
    \      end\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaa5b5l9c.lua:35:\
    \ expected: {-4, -3, 5}\nactual: -4\nstack traceback:\n\t/tmp/tmpaa5b5l9c.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 0 then\n    return arr\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxaqkcc26.lua:32: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local maxArr = {} -- the result array\n    local maxLen = k -- length of\
    \ the result array\n    local curMax = arr[1]\n    for i = 2, k do\n        if\
    \ arr[i] > curMax then\n            curMax = arr[i]\n        end\n    end\n  \
    \  maxArr[1] = curMax\n    for i = 2, k do\n        if arr[i] > curMax then\n\
    \            table.insert(maxArr, arr[i])\n        end\n    end\n    return maxArr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7lnr731q.lua:31:\
    \ expected: {-4, -3, 5}\nactual: {5}\nstack traceback:\n\t/tmp/tmp7lnr731q.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local maxArr = {} -- the max array\n  local maxLen = 0 -- length of max array\n\
    \  local i = 1\n  while i <= k do\n    local curMax = arr[i]\n    for j = i +\
    \ 1, k do\n      if arr[j] > curMax then\n        curMax = arr[j]\n      end\n\
    \    end\n    maxArr[i] = curMax\n    maxLen = i\n    i = i + 1\n  end\n  return\
    \ maxArr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph4j28fci.lua:31:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmph4j28fci.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphhnjck0r.lua:32: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then\n        return arr\n    end\n    local max_so_far = arr[1]\n\
    \    local max_ending_here = arr[1]\n    for i = 2, k do\n        if arr[i] >\
    \ max_ending_here then\n            max_ending_here = arr[i]\n        end\n  \
    \      if max_ending_here > max_so_far then\n            max_so_far = max_ending_here\n\
    \        end\n    end\n    return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm0pxuq3b.lua:30:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpm0pxuq3b.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_so_far = arr[1]\n    local max_ending_here = arr[1]\n    for i\
    \ = 2, k do\n        if arr[i] > max_ending_here then\n            max_ending_here\
    \ = arr[i]\n        else\n            max_so_far = max_ending_here\n         \
    \   max_ending_here = arr[i]\n        end\n    end\n    return max_so_far, max_ending_here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxb715b1w.lua:27:\
    \ expected: {-4, -3, 5}\nactual: -3\nstack traceback:\n\t/tmp/tmpxb715b1w.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max = 0\n    local results = {}\n    for i = 1, k do\n        local\
    \ element = arr[i]\n        if element > max then\n            max = element\n\
    \        end\n    end\n    for i = 1, k do\n        local element = arr[i]\n \
    \       if element == max then\n            results[i] = element\n        end\n\
    \    end\n    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfw98pb_e.lua:31:\
    \ expected: {-4, -3, 5}\nactual: {3=5}\nstack traceback:\n\t/tmp/tmpfw98pb_e.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local result = {}\n    local max = 0\n    for i = 1, k do\n        if arr[i]\
    \ > max then\n            max = arr[i]\n        end\n    end\n    for i = 1, k\
    \ do\n        if arr[i] > max then\n            result[i] = arr[i]\n        end\n\
    \    end\n    for i = k + 1, #arr do\n        if arr[i] > max then\n         \
    \   result[i] = arr[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpewe3rzdv.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpewe3rzdv.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  if k > #arr then return nil end\n  local max_so_far = arr[1]\n  local max_ending_here\
    \ = arr[1]\n  for i = 2, k do\n    if arr[i] > max_ending_here then\n      max_ending_here\
    \ = arr[i]\n    end\n    if max_ending_here > max_so_far then\n      max_so_far\
    \ = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprqax0kvr.lua:28:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmprqax0kvr.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local maxArr = {} -- the max array\n    local maxIndex = 0 -- index of max\
    \ element\n    local maxValue = arr[1]\n    for i = 2, k do\n        if arr[i]\
    \ > maxValue then\n            maxValue = arr[i]\n            maxIndex = i\n \
    \       end\n    end\n    for i = 1, k do\n        maxArr[i] = arr[maxIndex +\
    \ 1]\n    end\n    return maxArr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq3gz7qau.lua:29:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpq3gz7qau.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local results = {}\n    local max = 0\n    local index = 0\n    local length\
    \ = #arr\n    while index < length do\n        if arr[index] > max then\n    \
    \        max = arr[index]\n        end\n        index = index + 1\n    end\n \
    \   local i = 0\n    while i < k do\n        if arr[i] > max then\n          \
    \  results[i] = arr[i]\n        end\n        i = i + 1\n    end\n    return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt0izakag.lua:16:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpt0izakag.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpt0izakag.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local result = {}\n  local max = 0\n  local i = 1\n  while i <= k do\n    if\
    \ arr[i] > max then\n      max = arr[i]\n    end\n    i = i + 1\n  end\n  \n \
    \ local j = 1\n  while j <= k do\n    if arr[j] > max then\n      max = arr[j]\n\
    \    end\n    j = j + 1\n  end\n  \n  local i = 1\n  while i <= k do\n    if arr[i]\
    \ < max then\n      table.insert(result, max)\n    end\n    i = i + 1\n  end\n\
    \  \n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1vshw2n.lua:43:\
    \ expected: {-4, -3, 5}\nactual: {5, 5}\nstack traceback:\n\t/tmp/tmpx1vshw2n.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local result = {}\n  local max = 0\n  local i = 1\n  while i <= k do\n    local\
    \ element = arr[i]\n    if element > max then\n      max = element\n    end\n\
    \    i = i + 1\n  end\n  local j = 1\n  while j <= k do\n    local element = arr[j]\n\
    \    if element > max then\n      max = element\n    end\n    j = j + 1\n  end\n\
    \  local i = 1\n  while i <= k do\n    local element = arr[i]\n    if element\
    \ > max then\n      max = element\n    end\n    i = i + 1\n  end\n  while j <=\
    \ k do\n    local element = arr[j]\n    if element > max then\n      max = element\n\
    \    end\n    j = j + 1\n  end\n  while i <= k do\n    local element = arr[i]\n\
    \    if element > max then\n      max = element\n    end\n    i = i + 1\n  end\n\
    \  while j <= k do\n    local element = arr[j]\n    if element > max then\n  \
    \    max = element\n    end\n    j = j + 1\n  end\n  while i <= k do\n    local\
    \ element = arr[i]\n    if element > max then\n      max = element\n    end\n\
    \    i = i + 1\n  end\n  while j <= k do\n    local element = arr[j]\n    if element\
    \ > max then\n      max = element\n    end\n    j = j + 1\n  end\n  while i <=\
    \ k do\n    local element = arr[i]\n    if element > max then\n      max = element\n\
    \    end\n    i = i + 1\n  end\n  while j <= k do\n    local element = arr[j]\n\
    \    if element > max then\n      max = element\n    end\n    j = j + 1\n  end\n\
    \  while i <= k do\n    local element = arr[i]\n    if element > max then\n  \
    \    max = element\n    end\n    i = i + 1\n  end\n  while j <= k do\n    local\
    \ element = arr[j]\n    if element > max then\n      max = element\n    end\n\
    \    j = j + 1\n  end\n  while i <= k do\n    local element = arr[i]\n    if element\
    \ > max then\n      max = element\n    end\n    i = i + 1\n  end\n  while j <=\
    \ k do\n    local element = arr[j]\n    if element > max then\n      max = element\n\
    \    end\n    j = j + 1\n  end\n  while i <= k do\n    local element = arr[i]\n\
    \    if element > max then\n      max = element\n    end\n    i = i + 1\n  end\n\
    \  while j <= k do\n    local element = arr[j]\n    if element > max then\n  \
    \    max = element\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwif8iy1y.lua:143: ''end'' expected (to close ''if'' at line
    123) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local result = {}\n  local max = 0\n  local i = 1\n  while i <= k do\n    if\
    \ arr[i] > max then\n      max = arr[i]\n    end\n    i = i + 1\n  end\n  local\
    \ j = 1\n  while j <= k do\n    if arr[j] > max then\n      max = arr[j]\n   \
    \ end\n    j = j + 1\n  end\n  local i = 1\n  while i <= k do\n    if arr[i] <\
    \ max then\n      table.insert(result, max)\n    end\n    i = i + 1\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpesbuefm_.lua:40:\
    \ expected: {-4, -3, 5}\nactual: {5, 5}\nstack traceback:\n\t/tmp/tmpesbuefm_.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_so_far = nil\n    local max_ending_here = nil\n    local i = 1\n\
    \    while i <= k do\n        if max_ending_here == nil then\n            max_ending_here\
    \ = arr[i]\n        else\n            if arr[i] > max_ending_here then\n     \
    \           max_ending_here = arr[i]\n            end\n        end\n        i\
    \ = i + 1\n    end\n    if max_ending_here ~= nil then\n        max_so_far = max_ending_here\n\
    \    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuafkt7tv.lua:33:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmpuafkt7tv.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then\n        return arr\n    end\n    local max_so_far = arr[1]\n\
    \    local max_ending_here = arr[1]\n    for i = 2, k do\n        if arr[i] >\
    \ max_ending_here then\n            max_ending_here = arr[i]\n        end\n  \
    \      if max_ending_here > max_so_far then\n            max_so_far = max_ending_here\n\
    \        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvluatza.lua:30:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmpuvluatza.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  if k > #arr then\n    return nil\n  end\n  local max_so_far = arr[1]\n  local\
    \ max_ending_here = arr[1]\n  for i = 2, k do\n    if arr[i] > max_ending_here\
    \ then\n      max_ending_here = arr[i]\n    end\n    if max_ending_here > max_so_far\
    \ then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3b8kdfy.lua:30:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmpv3b8kdfy.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k > #arr then\n        return nil\n    end\n    local max_so_far = arr[1]\n\
    \    local max_ending_here = arr[1]\n    for i = 2, k do\n        if arr[i] >\
    \ max_ending_here then\n            max_ending_here = arr[i]\n        end\n  \
    \      if arr[i] > max_so_far then\n            max_so_far = arr[i]\n        end\n\
    \    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpng6b91tg.lua:30:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmpng6b91tg.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Write your code here.\n  local max_arr = {}\n  local max_num = nil\n  for\
    \ i = 1, k do\n    max_num = arr[i]\n    for j = 1, k do\n      if arr[j] > max_num\
    \ then\n        max_num = arr[j]\n      end\n    end\n    max_arr[i] = max_num\n\
    \  end\n  return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkh3fqitu.lua:29:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpkh3fqitu.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = nil\n    for i = 1, k do\n      \
    \  max_num = -1000\n        for j = 1, k do\n            if arr[j] > max_num then\n\
    \                max_num = arr[j]\n            end\n        end\n        max_arr[i]\
    \ = max_num\n    end\n    return max_arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4xwss6ld.lua:28:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp4xwss6ld.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local result = {}\n    local max = 0\n    for i = 1, k do\n        if arr[i]\
    \ > max then\n            max = arr[i]\n        end\n    end\n    for i = 1, k\
    \ do\n        if arr[i] > max then\n            result[i] = max\n        else\n\
    \            result[i] = arr[i]\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp629c7dd6.lua:31:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp629c7dd6.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Get the max\
    \ element in the first k elements\n  local max_element = arr[1]\n  for i = 2,\
    \ k do\n    if arr[i] > max_element then\n      max_element = arr[i]\n    end\n\
    \  end\n  \n  -- Sort the remaining elements\n  local sorted_array = arr\n  for\
    \ i = 2, k do\n    table.insert(sorted_array, arr[i])\n  end\n  \n  return sorted_array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzcaxeltu.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5, -4, 5}\nstack traceback:\n\t/tmp/tmpzcaxeltu.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local max_arr = {}\n  local max_num = 0\n  for i = 1, k do\n    max_num = math.max(max_num,\
    \ arr[i])\n  end\n  for i = 1, k do\n    if arr[i] > max_num then\n      max_num\
    \ = arr[i]\n    end\n  end\n  for i = 1, k do\n    max_arr[i] = max_num\n  end\n\
    \  return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgp4m1bzt.lua:30:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpgp4m1bzt.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  -- Base case\n  if k == 1 then\n    return arr\n  end\n  -- Get the max element\
    \ in the first k elements\n  local max_element = arr[1]\n  -- Get the max element\
    \ in the remaining elements\n  for i = 2, k do\n    if arr[i] > max_element then\n\
    \      max_element = arr[i]\n    end\n  end\n  -- Return the max element in the\
    \ first k elements\n  return arr[k]:max(max_element)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjg_iq_9z.lua:24:\
    \ attempt to index field '?' (a number value)\nstack traceback:\n\t/tmp/tmpjg_iq_9z.lua:24:\
    \ in function 'candidate'\n\t/tmp/tmpjg_iq_9z.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max_arr = {}\n    local max_num = arr[1]\n    for i = 2, k do\n   \
    \     if arr[i] > max_num then\n            max_num = arr[i]\n        end\n  \
    \  end\n    for i = 1, k do\n        if arr[i] > max_num then\n            max_arr[i]\
    \ = arr[i]\n        end\n    end\n    return max_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkidni7ev.lua:29:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpkidni7ev.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local maxArr = {} -- the result array\n    local maxNum = 0 -- stores the\
    \ maximum number in the array\n    local i = 1\n    while i <= k do\n        if\
    \ arr[i] > maxNum then\n            maxNum = arr[i]\n        end\n        i =\
    \ i + 1\n    end\n    maxArr = maxArr + maxNum\n    return maxArr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg3voaiao.lua:20:\
    \ attempt to perform arithmetic on local 'maxArr' (a table value)\nstack traceback:\n\
    \t/tmp/tmpg3voaiao.lua:20: in function 'candidate'\n\t/tmp/tmpg3voaiao.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local results = {}\n    local max = 0\n    local index = 0\n    for i = 1,\
    \ k do\n        if arr[i] > max then\n            max = arr[i]\n            index\
    \ = i\n        end\n    end\n    table.insert(results, max)\n    for i = k + 1,\
    \ #arr do\n        if arr[i] > max then\n            max = arr[i]\n          \
    \  index = i\n        end\n    end\n    table.insert(results, arr[index])\n  \
    \  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gvqu9dd.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {5, 5}\nstack traceback:\n\t/tmp/tmp3gvqu9dd.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
