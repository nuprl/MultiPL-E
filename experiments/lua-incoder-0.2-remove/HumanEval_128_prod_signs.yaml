name: HumanEval_128_prod_signs
language: lua
prompt: "-- You are given an array arr of integers and you need to return\n-- sum\
  \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
  \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
  -- Example:\nlocal function prod_signs(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
  \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
  \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
  \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
  \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
  \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i] <\
    \ 0 and 1 or -1\n    table.insert(signs, sign)\n  end\n  return table.aggregate(signs,\
    \ 1, function(acc, sign)\n    return acc * sign\n  end)\nend", "    local signs\
    \ = {}\n    for i = 1, #arr do\n        local sign = arr[i] < 0 and 1 or -1\n\
    \        table.insert(signs, sign)\n    end\n    return table.product(signs)\n\
    end", "    local signs = { }\n    local sum = 0\n    for i = 1, #arr do\n    \
    \    local sign = arr[i] < 0 and 1 or -1\n        sum = sum + sign * math.abs(arr[i])\n\
    \        table.insert(signs, sign)\n    end\n    return sum, table.concat(signs,\
    \ 1)\nend", "  local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i]\
    \ < 0 and 1 or -1\n    table.insert(signs, sign)\n  end\n  return table.aggregate(signs,\
    \ 1, function(acc, sign)\n    return acc * sign\n  end)\nend", "  local signs\
    \ = { }\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n    signs[#signs\
    \ + 1] = sign\n  end\n  local product = 1\n  for i = 1, #signs do\n    product\
    \ = product * signs[i]\n  end\n  return product\nend", "  local signs = {}\n \
    \ for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n    table.insert(signs,\
    \ sign)\n  end\n  return table.aggregate(signs, 1, function(total, sign)\n   \
    \ return total * sign\n  end)\nend", "  local signs = {}\n  for i = 1, #arr do\n\
    \    local sign = arr[i] < 0 and 1 or -1\n    table.insert(signs, sign)\n  end\n\
    \  return table.aggregate(signs, 1, function(acc, sign)\n    return acc * sign\n\
    \  end)\nend", "  local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i]\
    \ < 0 and 1 or -1\n    table.insert(signs, sign)\n  end\n  return table.aggregate(signs,\
    \ function(total, sign)\n    return total + sign * math.abs(sign)\n  end)\nend",
  "  local signs = {}\n  for i = 1, #arr do\n    signs[i] = math.sign( arr[i] )\n\
    \  end\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + signs[i] * math.abs(\
    \ arr[i] )\n  end\n  return sum\nend", "  local sum = 0\n  for i = 1, #arr do\n\
    \    sum = sum + math.abs(arr[i])\n  end\n  return sum\nend", "  local signs =\
    \ { [1] = 1, [-1] = -1, [0] = 0 }\n  local sum = 0\n  for i = 1, #arr do\n   \
    \ sum = sum + signs[arr[i]]\n  end\n  return sum\nend", "  local signs = { [1]\
    \ = 1, [-1] = -1, [0] = 0 }\n  local sum = 0\n  for i = 1, #arr do\n    sum =\
    \ sum + signs[arr[i]]\n  end\n  return sum\nend", "  local signs = { [1] = 1,\
    \ [-1] = -1, [0] = 0 }\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum +\
    \ signs[arr[i]]\n  end\n  return sum\nend", "  local signs = {}\n  for i = 1,\
    \ #arr do\n    local sign = arr[i] > 0 and 1 or -1\n    table.insert(signs, sign)\n\
    \  end\n  return table.aggregate(signs, 1, function(acc, sign)\n    return acc\
    \ * sign\n  end)\nend", "  local signs = { [1] = 1, [-1] = -1, [0] = 0 }\n  local\
    \ product = 1\n  for i = 1, #arr do\n    product = product * signs[arr[i]]\n \
    \ end\n  return product\nend", "  local signs = {}\n  for i = 1, #arr do\n   \
    \ local sign = arr[i] > 0 and 1 or -1\n    table.insert(signs, sign)\n  end\n\
    \  return table.aggregate(signs, 1, function(total, sign)\n    return total +\
    \ sign * math.abs(sign)\n  end)\nend", "  local signs = {}\n  for i = 1, #arr\
    \ do\n    signs[i] = arr[i] < 0 and 1 or -1\n  end\n  return table.aggregate(signs,\
    \ 1, function(acc, x)\n    return acc * math.abs(x)\n  end)\nend", "  local signs\
    \ = {}\n  for i = 1, #arr do\n    signs[i] = math.sign( arr[i] )\n  end\n  local\
    \ sum = 0\n  for i = 1, #arr do\n    sum = sum + math.abs( arr[i] * signs[i] )\n\
    \  end\n  return sum\nend", "  local signs = { [1] = 1, [-1] = -1, [0] = 0 }\n\
    \  local sum = 0\n  for i = 1, #arr do\n    sum = sum + signs[arr[i]]\n  end\n\
    \  return sum\nend", "  local signs = {}\n  for i = 1, #arr do\n    local sign\
    \ = arr[i] < 0 and 1 or -1\n    table.insert(signs, sign)\n  end\n  return table.aggregate(signs,\
    \ 1, function(total, sign)\n    return total * sign\n  end)\nend", "  local signs\
    \ = {}\n  for i = 1, #arr do\n    signs[i] = arr[i] > 0 and 1 or -1\n  end\n \
    \ local sum = 0\n  for i = 1, #arr do\n    sum = sum + signs[i] * math.abs(arr[i])\n\
    \  end\n  return sum\nend", "  local signs = {}\n  for i = 1, #arr do\n    signs[i]\
    \ = arr[i] < 0 and 1 or -1\n  end\n  local sum = 0\n  for i = 1, #arr do\n   \
    \ sum = sum + signs[i] * math.abs(arr[i])\n  end\n  return sum\nend", "  local\
    \ signs = {}\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n\
    \    table.insert(signs, sign)\n  end\n  return table.aggregate(signs, function(s1,\
    \ s2)\n    return s1 * s2\n  end)\nend", "  local signs = {}\n  for i = 1, #arr\
    \ do\n    local sign = arr[i] < 0 and 1 or -1\n    table.insert(signs, sign)\n\
    \  end\n  local sum = 0\n  for i = 1, #signs do\n    sum = sum + signs[i] * math.abs(arr[i])\n\
    \  end\n  return sum\nend", "  local sum = 0\n  for i = 1, #arr do\n    sum =\
    \ sum + math.abs(arr[i])\n  end\n  return sum * math.sign( arr[1] )\nend", " \
    \ local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or\
    \ -1\n    table.insert(signs, sign)\n  end\n  return table.aggregate(signs, 1,\
    \ function(acc, sign)\n    return acc * sign\n  end)\nend", "  local signs = {}\n\
    \  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n    table.insert(signs,\
    \ sign)\n  end\n  return table.concat(signs, 1)\nend", "    local signs = { [1]\
    \ = 1, [-1] = -1, [0] = 0 }\n    local sum = 0\n    for i = 1, #arr do\n     \
    \   sum = sum + signs[arr[i]]\n    end\n    return sum\nend", "  local signs =\
    \ {}\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n    table.insert(signs,\
    \ sign)\n  end\n  return table.aggregate(signs, 1, function(sum, sign)\n    return\
    \ sum * sign\n  end)\nend", "  local signs = {}\n  for i = 1, #arr do\n    local\
    \ sign = arr[i] < 0 and -1 or 1\n    signs[#signs + 1] = sign\n  end\n  return\
    \ table.concat(signs, 1)\nend", "  local signs = {}\n  for i = 1, #arr do\n  \
    \  signs[arr[i]] = signs[arr[i]] or 1\n  end\n  local product = 1\n  for i = 1,\
    \ #arr do\n    product = product * signs[arr[i]]\n  end\n  return product\nend",
  "  if #arr == 0 then return nil end\n  local sign = 1\n  local sum = 0\n  for i\
    \ = 1, #arr do\n    local v = arr[i]\n    if v ~= 0 then\n      sum = sum + sign\
    \ * v\n      sign = -sign\n    end\n  end\n  return sum\nend", "  local signs\
    \ = {}\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n    table.insert(signs,\
    \ sign)\n  end\n  local sum = 0\n  for i = 1, #signs do\n    sum = sum + signs[i]\
    \ * math.abs(arr[i])\n  end\n  return sum\nend", "  local signs = {}\n  for i\
    \ = 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n    table.insert(signs,\
    \ sign)\n  end\n  return table.aggregate(signs, 1, function(acc, sign)\n    return\
    \ acc * sign\n  end)\nend", "  local signs = {}\n  for i = 1, #arr do\n    local\
    \ sign = arr[i] < 0 and 1 or -1\n    table.insert(signs, sign)\n  end\n  return\
    \ table.aggregate(signs, 1, function(acc, sign)\n    return acc * sign\n  end)\n\
    end", "  local signs = {}\n  local product = 1\n  for i = 1, #arr do\n    local\
    \ sign = arr[i] < 0 and 1 or -1\n    signs[#signs + 1] = sign\n    product = product\
    \ * sign\n  end\n  return product, signs\nend", "  local signs = {}\n  for i =\
    \ 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n    signs[#signs + 1] =\
    \ sign\n  end\n  local sum = 0\n  for i = 1, #signs do\n    sum = sum + signs[i]\
    \ * math.abs(arr[i])\n  end\n  return sum\nend", "  if #arr == 0 then return nil\
    \ end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local v =\
    \ arr[i]\n    if v < 0 then\n      sign = -sign\n    end\n    sum = sum + sign\
    \ * v\n  end\n  return sum\nend", "  local signs = {}\n  for i = 1, #arr do\n\
    \    local sign = arr[i] < 0 and 1 or -1\n    table.insert(signs, sign)\n  end\n\
    \  return table.aggregate(signs, 1, function(total, sign)\n    return total *\
    \ sign\n  end)\nend", "  local signs = {}\n  for i = 1, #arr do\n    local sign\
    \ = arr[i] < 0 and 1 or -1\n    table.insert(signs, sign)\n  end\n  return table.aggregate(signs,\
    \ 1, function(acc, sign)\n    return acc * sign\n  end)\nend", "    local signs\
    \ = {}\n    for i = 1, #arr do\n        local sign = arr[i] < 0 and 1 or -1\n\
    \        table.insert(signs, sign)\n    end\n    return table.aggregate(signs,\
    \ function(total, sign)\n        return total + sign * math.abs(sign)\n    end)\n\
    end", "  local signs = { }\n  local product = 1\n  for i = 1, #arr do\n    local\
    \ sign = arr[i] < 0 and 1 or -1\n    signs[#signs + 1] = sign\n    product = product\
    \ * sign\n  end\n  return product, signs\nend", "  local signs = { [1] = 1, [-1]\
    \ = -1, [0] = 0 }\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + signs[arr[i]]\n\
    \  end\n  return sum\nend", "  local signs = {}\n  for i = 1, #arr do\n    local\
    \ sign = arr[i] < 0 and 1 or -1\n    table.insert(signs, sign)\n  end\n  return\
    \ table.aggregate(signs, 1, function(total, sign)\n    return total + sign * math.abs(sign)\n\
    \  end)\nend", "  local signs = { [1] = 1, [-1] = -1, [0] = 0 }\n  local product\
    \ = 1\n  for i = 1, #arr do\n    product = product * signs[arr[i]]\n  end\n  return\
    \ product\nend", "  local signs = { [1] = 1, [-1] = -1, [0] = 0 }\n  local sum\
    \ = 0\n  for i = 1, #arr do\n    sum = sum + signs[arr[i]]\n  end\n  return sum\n\
    end", "    local signs = {}\n    for i = 1, #arr do\n        table.insert(signs,\
    \ arr[i] < 0 and 1 or -1)\n    end\n    return table.aggregate(signs, function(acc,\
    \ v)\n        return acc + v * math.sign(v)\n    end, 0)\nend", "  local signs\
    \ = {}\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n    table.insert(signs,\
    \ sign)\n  end\n  local product = 1\n  for i = 1, #signs do\n    product = product\
    \ * signs[i]\n  end\n  return product\nend", "  local signs = {}\n  local product\
    \ = 1\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n    signs[#signs\
    \ + 1] = sign\n    product = product * sign\n  end\n  return product, signs\n\
    end", "  local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and\
    \ 1 or -1\n    table.insert(signs, sign)\n  end\n  return table.aggregate(signs,\
    \ function(total, sign)\n    return total + sign * math.abs(sign)\n  end)\nend",
  "  local signs = { }\n  local sign = 1\n  for i = 1, #arr do\n    sign = sign *\
    \ arr[i]\n    signs[arr[i]] = sign\n  end\n  return signs\nend", "    local signs\
    \ = {}\n    for i = 1, #arr do\n        local sign = arr[i] < 0 and 1 or -1\n\
    \        table.insert(signs, sign)\n    end\n    return table.aggregate(signs,\
    \ 1, function(acc, sign)\n        return acc + sign * math.abs(sign)\n    end)\n\
    end", "  local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and\
    \ 1 or -1\n    signs[#signs + 1] = sign\n  end\n  return table.concat(signs)\n\
    end", "  local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and\
    \ 1 or -1\n    table.insert(signs, sign)\n  end\n  return table.aggregate(signs,\
    \ 1, function(total, sign)\n    return total + sign * math.abs(sign)\n  end)\n\
    end", "  local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i] > 0 and\
    \ 1 or -1\n    table.insert(signs, sign)\n  end\n  local product = 1\n  for i\
    \ = 1, #signs do\n    product = product * signs[i]\n  end\n  return product\n\
    end", "  local signs = {}\n  for i = 1, #arr do\n    signs[arr[i]] = signs[arr[i]]\
    \ or 1\n  end\n  local sign = 1\n  for i = 1, #arr do\n    sign = sign * signs[arr[i]]\n\
    \  end\n  return sign\nend", "  local signs = { [1] = 1, [-1] = -1, [0] = 0 }\n\
    \  local sum = 0\n  for i = 1, #arr do\n    sum = sum + signs[arr[i]]\n  end\n\
    \  return sum\nend", "  local signs = { [1] = 1, [-1] = -1, [0] = 0 }\n  local\
    \ sum = 0\n  for i = 1, #arr do\n    sum = sum + signs[arr[i]] * math.abs(arr[i])\n\
    \  end\n  return sum\nend", "  local signs = {}\n  for i = 1, #arr do\n    local\
    \ sign = arr[i] < 0 and 1 or -1\n    signs[#signs + 1] = sign\n  end\n  return\
    \ table.concat(signs, 1)\nend", "  local signs = {}\n  local sign = 1\n  for i\
    \ = 1, #arr do\n    sign = sign * arr[i]\n    signs[#signs + 1] = sign\n  end\n\
    \  return signs\nend", "  local sum = 0\n  for i = 1, #arr do\n    sum = sum +\
    \ math.abs(arr[i])\n  end\n  return sum\nend", "  local signs = { [1] = 1, [-1]\
    \ = -1, [0] = 0 }\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + signs[arr[i]]\n\
    \  end\n  return sum\nend", "    local signs = { }\n    local sum = 0\n    for\
    \ i = 1, #arr do\n        local sign = arr[i] < 0 and 1 or -1\n        sum = sum\
    \ + sign * math.abs(arr[i])\n        table.insert(signs, sign)\n    end\n    return\
    \ sum, table.concat(signs, 1)\nend", "    local signs = { [1] = 1, [-1] = -1,\
    \ [0] = 0 }\n    local sum = 0\n    for i = 1, #arr do\n        sum = sum + signs[arr[i]]\
    \ * math.abs(arr[i])\n    end\n    return sum\nend", "  local signs = {}\n  local\
    \ sum = 0\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and -1 or 1\n   \
    \ sum = sum + sign * math.abs(arr[i])\n    table.insert(signs, sign)\n  end\n\
    \  return sum, table.concat(signs, 1)\nend", "  local signs = {}\n  for i = 1,\
    \ #arr do\n    local sign = arr[i] < 0 and 1 or -1\n    table.insert(signs, sign)\n\
    \  end\n  return table.aggregate(signs, 1, function(acc, sign)\n    return acc\
    \ * sign\n  end)\nend", "  if #arr == 0 then return nil end\n  local sign = 1\n\
    \  local sum = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v < 0 then\n\
    \      sign = -sign\n    end\n    sum = sum + sign * v\n  end\n  return sum\n\
    end", "  local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and\
    \ 1 or -1\n    signs[#signs + 1] = sign\n  end\n  return table.concat(signs, 1)\n\
    end", "  local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and\
    \ 1 or -1\n    table.insert(signs, sign)\n  end\n  return table.aggregate(signs,\
    \ function(sum, sign)\n    return sum + sign * math.abs(sign)\n  end)\nend", " \
    \ local signs = {}\n  for i = 1, #arr do\n    signs[arr[i]] = signs[arr[i]] or\
    \ 1\n  end\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + signs[i] *\
    \ math.abs(arr[i])\n  end\n  return sum\nend", "  local signs = {}\n  local sum\
    \ = 0\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n    signs[#signs\
    \ + 1] = sign\n    sum = sum + sign * arr[i]\n  end\n  return sum, signs\nend",
  "  local signs = { [1] = 1, [-1] = -1, [0] = 1 }\n  local sum = 0\n  for i = 1,\
    \ #arr do\n    sum = sum + signs[arr[i]] * math.abs(arr[i])\n  end\n  return sum\n\
    end", "  if #arr == 0 then return nil end\n  local sign = 1\n  for i = 1, #arr\
    \ do\n    sign = sign * arr[i]\n  end\n  return sign\nend", "  local signs = {}\n\
    \  for i = 1, #arr do\n    signs[i] = arr[i] < 0 and 1 or -1\n  end\n  return\
    \ table.aggregate(signs, 1, function(s, v)\n    return s * v\n  end)\nend", " \
    \ local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or\
    \ -1\n    table.insert(signs, sign)\n  end\n  return table.aggregate(signs, 1,\
    \ function(acc, sign)\n    return acc * sign\n  end)\nend", "  local signs = {}\n\
    \  local sum = 0\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n\
    \    sum = sum + sign * math.abs(arr[i])\n    table.insert(signs, sign)\n  end\n\
    \  return sum, table.concat(signs, 1)\nend", "  local signs = {}\n  for i = 1,\
    \ #arr do\n    local sign = arr[i] < 0 and 1 or -1\n    table.insert(signs, sign)\n\
    \  end\n  local sum = 0\n  for i = 1, #signs do\n    sum = sum + signs[i] * math.abs(arr[i])\n\
    \  end\n  return sum\nend", "  local signs = {}\n  local sign = 1\n  for i = 1,\
    \ #arr do\n    sign = sign * arr[i]\n    table.insert(signs, sign)\n  end\n  return\
    \ signs\nend", "  local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i]\
    \ > 0 and 1 or -1\n    table.insert(signs, sign)\n  end\n  return table.aggregate(signs,\
    \ function(s1, s2)\n    return s1 * s2\n  end)\nend", "  if #arr == 0 then return\
    \ nil end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local\
    \ sign = sign * arr[i]\n    sum = sum + sign * math.abs(arr[i])\n  end\n  return\
    \ sum\nend", "  local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i]\
    \ < 0 and 1 or -1\n    table.insert(signs, sign)\n  end\n  local signs_prod =\
    \ 1\n  for i = 1, #signs do\n    signs_prod = signs_prod * signs[i]\n  end\n \
    \ return signs_prod\nend", "  local signs = {}\n  for i = 1, #arr do\n    local\
    \ sign = arr[i] < 0 and 1 or -1\n    signs[#signs + 1] = sign\n  end\n  return\
    \ table.concat(signs, 1)\nend", "  local signs = {}\n  for i = 1, #arr do\n  \
    \  signs[arr[i]] = signs[arr[i]] or 1\n  end\n  local sum = 0\n  for i = 1, #arr\
    \ do\n    sum = sum + signs[i] * math.abs(arr[i])\n  end\n  return sum\nend",
  "  local signs = { [1] = 1, [-1] = -1, [0] = 0 }\n  local product = 1\n  for i =\
    \ 1, #arr do\n    product = product * signs[arr[i]]\n  end\n  return product\n\
    end", "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum\
    \ = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v < 0 then\n      sign\
    \ = sign * -1\n    end\n    sum = sum + v * sign\n  end\n  return sum\nend", " \
    \ local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or\
    \ -1\n    table.insert(signs, sign)\n  end\n  return table.aggregate(signs, 1,\
    \ function(sum, sign)\n    return sum * sign\n  end)\nend", "  local signs = {\
    \ [1] = 1, [-1] = -1, [0] = 0 }\n  local sum = 0\n  for i = 1, #arr do\n    sum\
    \ = sum + signs[arr[i]]\n  end\n  return sum\nend", "  local signs = {}\n  local\
    \ sign = 1\n  for i = 1, #arr do\n    local v = arr[i]\n    if v ~= 0 then\n \
    \     sign = sign * v\n      table.insert(signs, sign)\n    end\n  end\n  return\
    \ table.concat(signs, 1)\nend", "  local signs = { [1] = 1, [-1] = -1, [0] = 0\
    \ }\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + signs[arr[i]]\n  end\n\
    \  return sum\nend", "  local signs = { [1] = 1, [-1] = -1, [0] = 0 }\n  local\
    \ sum = 0\n  for i = 1, #arr do\n    sum = sum + signs[arr[i]]\n  end\n  return\
    \ sum\nend", "  local signs = { [1] = 1, [-1] = -1, [0] = 0 }\n  local sum = 0\n\
    \  for i = 1, #arr do\n    sum = sum + signs[arr[i]] * math.abs(arr[i])\n  end\n\
    \  return sum\nend", "  local signs = { [1] = 1, [-1] = -1, [0] = 0 }\n  local\
    \ sum = 0\n  for i = 1, #arr do\n    sum = sum + signs[arr[i]]\n  end\n  return\
    \ sum\nend", "  local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i]\
    \ > 0 and 1 or -1\n    table.insert(signs, sign)\n  end\n  return table.aggregate(signs,\
    \ 1, function(sum, sign)\n    return sum * sign\n  end)\nend", "  local signs\
    \ = { [1] = 1, [-1] = -1, [0] = 0 }\n  local sum = 0\n  for i = 1, #arr do\n \
    \   sum = sum + signs[arr[i]]\n  end\n  return sum\nend", "  local signs = {}\n\
    \  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n    table.insert(signs,\
    \ sign)\n  end\n  return table.aggregate(signs, 1, function(acc, sign)\n    return\
    \ acc * sign\n  end)\nend", "  local signs = {}\n  for i = 1, #arr do\n    local\
    \ sign = arr[i] < 0 and 1 or -1\n    table.insert(signs, sign)\n  end\n  local\
    \ product = 1\n  for i = 1, #signs do\n    product = product * signs[i]\n  end\n\
    \  return product\nend", "  local signs = {}\n  for i = 1, #arr do\n    signs[i]\
    \ = math.sign( arr[i] )\n  end\n  local sum = 0\n  for i = 1, #arr do\n    sum\
    \ = sum + signs[i] * math.abs(arr[i])\n  end\n  return sum\nend", "  if #arr ==\
    \ 0 then return nil end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr\
    \ do\n    sum = sum + arr[i] * sign\n    sign = -sign\n  end\n  return sum\nend",
  "  if #arr == 0 then return nil end\n  local sign = 1\n  local sum = 0\n  for i\
    \ = 1, #arr do\n    local x = arr[i]\n    if x < 0 then\n      x = -x\n      sign\
    \ = sign * -1\n    end\n    sum = sum + x * sign\n  end\n  return sum\nend", " \
    \ local signs = { [1] = 1, [-1] = -1, [0] = 1 }\n  local sum = 0\n  for i = 1,\
    \ #arr do\n    sum = sum + signs[arr[i]]\n  end\n  return sum\nend", "  local\
    \ signs = {}\n  for i = 1, #arr do\n    local sign = arr[i] > 0 and 1 or -1\n\
    \    table.insert(signs, sign)\n  end\n  return table.aggregate(signs, 1, function(acc,\
    \ sign)\n    return acc * sign\n  end)\nend", "  local signs = {}\n  for i = 1,\
    \ #arr do\n    signs[i] = arr[i] < 0 and 1 or -1\n  end\n  local sum = 0\n  for\
    \ i = 1, #arr do\n    sum = sum + signs[i] * math.abs(arr[i])\n  end\n  return\
    \ sum\nend", "  local signs = {}\n  for i = 1, #arr do\n    signs[arr[i]] = signs[arr[i]]\
    \ or 1\n  end\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + signs[i]\
    \ * math.abs(arr[i])\n  end\n  return sum\nend", "  if #arr == 0 then return nil\
    \ end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local v =\
    \ arr[i]\n    if v < 0 then\n      sign = -sign\n    end\n    sum = sum + sign\
    \ * v\n  end\n  return sum\nend", "  local signs = {}\n  for i = 1, #arr do\n\
    \    local sign = arr[i] < 0 and 1 or -1\n    table.insert(signs, sign)\n  end\n\
    \  local product = 1\n  for i = 1, #signs do\n    product = product * signs[i]\n\
    \  end\n  return product\nend", "  local sum = 0\n  for i = 1, #arr do\n    sum\
    \ = sum + math.abs(arr[i])\n  end\n  return sum\nend", "  local signs = { [1]\
    \ = 1, [-1] = -1, [0] = 0 }\n  local sum = 0\n  for i = 1, #arr do\n    sum =\
    \ sum + signs[arr[i]]\n  end\n  return sum\nend", "  if #arr == 0 then return\
    \ nil end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    sum =\
    \ sum + arr[i] * sign\n    sign = sign * -1\n  end\n  return sum\nend", "  local\
    \ signs = {}\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n\
    \    table.insert(signs, sign)\n  end\n  return table.aggregate(signs, function(sum,\
    \ sign)\n    return sum + sign * math.abs(sign)\n  end)\nend", "  if #arr == 0\
    \ then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i = 1,\
    \ #arr do\n    local x = arr[i]\n    if x ~= 0 then\n      sum = sum + x * sign\n\
    \    end\n    sign = -sign\n  end\n  return sum\nend", "  local signs = {}\n \
    \ for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n    table.insert(signs,\
    \ sign)\n  end\n  return table.aggregate(signs, 1, function(sum, sign)\n    return\
    \ sum * sign\n  end)\nend", "  if #arr == 0 then return nil end\n  local sign\
    \ = 1\n  local sum = 0\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n\
    \    sum = sum + sign * math.abs(arr[i])\n  end\n  return sum\nend", "  local\
    \ signs = {}\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n\
    \    table.insert(signs, sign)\n  end\n  return table.aggregate(signs, 1, function(acc,\
    \ sign)\n    return acc * sign\n  end)\nend", "  local signs = {}\n  for i = 1,\
    \ #arr do\n    local sign = arr[i] > 0 and 1 or -1\n    table.insert(signs, sign)\n\
    \  end\n  local sum = 0\n  for i = 1, #signs do\n    sum = sum + signs[i] * math.abs(arr[i])\n\
    \  end\n  return sum\nend", "  local signs = { [1] = 1, [-1] = -1, [0] = 1 }\n\
    \  local sum = 0\n  for i = 1, #arr do\n    sum = sum + signs[arr[i]]\n  end\n\
    \  return sum\nend", "  local sum = 0\n  for i = 1, #arr do\n    sum = sum + math.abs(arr[i])\n\
    \  end\n  return sum * math.abs(math.prod(arr))\nend", "  local signs = { [1]\
    \ = 1, [-1] = -1, [0] = 0 }\n  local sum = 0\n  for i = 1, #arr do\n    sum =\
    \ sum + signs[arr[i]]\n  end\n  return sum\nend", "  if #arr == 0 then return\
    \ nil end\n  local signs = { [1] = 1, [-1] = -1, [0] = 0 }\n  local sum = 0\n\
    \  for i = 1, #arr do\n    sum = sum + signs[arr[i]]\n  end\n  return sum\nend",
  "  local signs = { }\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or\
    \ -1\n    table.insert(signs, sign)\n  end\n  local product = 1\n  for i = 1,\
    \ #signs do\n    product = product * signs[i]\n  end\n  return product\nend",
  "  local signs = {}\n  for i = 1, #arr do\n    signs[i] = math.sign( arr[i] )\n\
    \  end\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + math.abs( arr[i]\
    \ * signs[i] )\n  end\n  return sum\nend", "  local sum = 0\n  for i = 1, #arr\
    \ do\n    sum = sum + math.abs(arr[i])\n  end\n  return sum\nend", "  if #arr\
    \ == 0 then return nil end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr\
    \ do\n    sum = sum + arr[i] * sign\n    sign = -sign\n  end\n  return sum\nend",
  "  local signs = { }\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or\
    \ -1\n    table.insert(signs, sign)\n  end\n  return table.aggregate(signs, 1,\
    \ function(acc, sign)\n    return acc * sign\n  end)\nend", "  local signs = {\
    \ }\n  local sum = 0\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1\
    \ or -1\n    signs[#signs + 1] = sign\n    sum = sum + sign * arr[i]\n  end\n\
    \  return sum, signs\nend", "  local signs = { }\n  local sum = 0\n  for i = 1,\
    \ #arr do\n    local sign = arr[i] < 0 and 1 or -1\n    signs[#signs + 1] = sign\n\
    \    sum = sum + sign * math.abs(arr[i])\n  end\n  return sum, signs\nend", " \
    \ local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or\
    \ -1\n    table.insert(signs, sign)\n  end\n  return table.aggregate(signs, 1,\
    \ function(total, sign)\n    return total + sign * math.abs(sign)\n  end)\nend",
  "  local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or\
    \ -1\n    signs[#signs + 1] = sign\n  end\n  return table.concat(signs, 1)\nend",
  "  local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or\
    \ -1\n    table.insert(signs, sign)\n  end\n  return table.aggregate(signs, 1,\
    \ function(acc, sign)\n    return acc * sign\n  end)\nend", "  local signs = {}\n\
    \  local sum = 0\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n\
    \    signs[#signs + 1] = sign\n    sum = sum + sign * arr[i]\n  end\n  return\
    \ sum, signs\nend", "  local signs = { [1] = 1, [-1] = -1, [0] = 0 }\n  local\
    \ sum = 0\n  for i = 1, #arr do\n    sum = sum + signs[arr[i]]\n  end\n  return\
    \ sum\nend", "  local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i]\
    \ < 0 and -1 or 1\n    signs[#signs + 1] = sign\n  end\n  return table.concat(signs)\n\
    end", "  local sum = 0\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and\
    \ -1 or 1\n    sum = sum + sign * math.abs(arr[i])\n  end\n  return sum\nend",
  "  local signs = { }\n  for i = 1, #arr do\n    signs[arr[i]] = signs[arr[i]] +\
    \ 1\n  end\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + signs[i] *\
    \ math.abs(arr[i])\n  end\n  return sum\nend", "  local signs = {}\n  for i =\
    \ 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n    table.insert(signs,\
    \ sign)\n  end\n  local product = 1\n  for i = 1, #signs do\n    product = product\
    \ * signs[i]\n  end\n  return product\nend", "  local signs = {}\n  for i = 1,\
    \ #arr do\n    local sign = arr[i] < 0 and 1 or -1\n    table.insert(signs, sign)\n\
    \  end\n  return table.aggregate(signs, 1, function(total, sign)\n    return total\
    \ * sign\n  end)\nend", "  if #arr == 0 then return nil end\n  local sign = 1\n\
    \  local sum = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v < 0 then\n\
    \      sign = sign * -1\n    end\n    sum = sum + sign * v\n  end\n  return sum\n\
    end", "  local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and\
    \ 1 or -1\n    table.insert(signs, sign)\n  end\n  return table.aggregate(signs,\
    \ 1, function(acc, sign)\n    return acc * sign\n  end)\nend", "  local signs\
    \ = { [1] = 1, [-1] = -1, [0] = 0 }\n  local sum = 0\n  for i = 1, #arr do\n \
    \   sum = sum + signs[arr[i]]\n  end\n  return sum\nend", "    local sum = 0\n\
    \    for i = 1, #arr do\n        sum = sum + math.abs(arr[i])\n    end\n    return\
    \ sum\nend", "  local signs = {}\n  for i = 1, #arr do\n    signs[i] = arr[i]\
    \ > 0 and 1 or -1\n  end\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum\
    \ + signs[i] * math.abs(arr[i])\n  end\n  return sum\nend", "  local signs = {}\n\
    \  for i = 1, #arr do\n    local sign = arr[i] > 0 and 1 or -1\n    table.insert(signs,\
    \ sign)\n  end\n  return table.aggregate(signs, function(a, b) return a*b end)\n\
    end", "  if #arr == 0 then return nil end\n  local sign = 1\n  local sum = 0\n\
    \  for i = 1, #arr do\n    sum = sum + arr[i] * sign\n    sign = -sign\n  end\n\
    \  return sum\nend", "  local signs = {}\n  for i = 1, #arr do\n    local sign\
    \ = arr[i] < 0 and 1 or -1\n    table.insert(signs, sign)\n  end\n  return table.aggregate(signs,\
    \ 1, function(acc, sign)\n    return acc * sign\n  end)\nend", "  if #arr == 0\
    \ then\n    return nil\n  end\n  local sum = 0\n  for i = 1, #arr do\n    sum\
    \ = sum + arr[i]\n  end\n  local sign = 1\n  for i = 1, #arr do\n    sum = sum\
    \ * sign\n    sign = -sign\n  end\n  return sum\nend", "  local signs = { }\n\
    \  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n    signs[#signs\
    \ + 1] = sign\n  end\n  return table.concat(signs, 1)\nend", "  local signs =\
    \ {}\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n    signs[#signs\
    \ + 1] = sign\n  end\n  return table.concat(signs)\nend", "  local signs = {}\n\
    \  for i = 1, #arr do\n    local sign = arr[i] > 0 and 1 or -1\n    table.insert(signs,\
    \ sign)\n  end\n  return table.aggregate(signs, 1, function(acc, sign)\n    return\
    \ acc * sign\n  end)\nend", "  local signs = {}\n  for i = 1, #arr do\n    signs[i]\
    \ = arr[i] < 0 and 1 or -1\n  end\n  local sum = 0\n  for i = 1, #arr do\n   \
    \ sum = sum + signs[i] * math.abs(arr[i])\n  end\n  return sum\nend", "  local\
    \ signs = {}\n  local sum = 0\n  for i = 1, #arr do\n    local sign = arr[i] <\
    \ 0 and 1 or -1\n    signs[#signs + 1] = sign\n    sum = sum + sign * math.abs(arr[i])\n\
    \  end\n  return sum, signs\nend", "  local sum = 0\n  for i = 1, #arr do\n  \
    \  sum = sum + math.abs(arr[i])\n  end\n  return sum\nend", "    local signs =\
    \ {}\n    for i = 1, #arr do\n        local sign = arr[i] < 0 and 1 or -1\n  \
    \      table.insert(signs, sign)\n    end\n    return table.aggregate(signs, 1,\
    \ function(acc, sign)\n        return acc * sign\n    end)\nend", "  local signs\
    \ = {}\n  for i = 1, #arr do\n    local sign = arr[i] > 0 and 1 or -1\n    table.insert(signs,\
    \ sign)\n  end\n  return table.aggregate(signs, function(acc, sign)\n    return\
    \ acc * sign\n  end, 1)\nend", "  local signs = {}\n  for i = 1, #arr do\n   \
    \ local sign = arr[i] < 0 and 1 or -1\n    table.insert(signs, sign)\n  end\n\
    \  return table.aggregate(signs, 1, function(acc, sign)\n    return acc * sign\n\
    \  end)\nend", "    local signs = {}\n    for i = 1, #arr do\n        local sign\
    \ = arr[i] < 0 and 1 or -1\n        table.insert(signs, sign)\n    end\n    return\
    \ table.aggregate(signs, 1, function(total, sign)\n        return total + sign\
    \ * math.abs(sign)\n    end)\nend", "  local signs = {}\n  for i = 1, #arr do\n\
    \    local sign = arr[i] > 0 and 1 or -1\n    table.insert(signs, sign)\n  end\n\
    \  return table.aggregate(signs, function(acc, sign)\n    return acc * sign\n\
    \  end)\nend", "  local signs = { [1] = 1, [-1] = -1, [0] = 0 }\n  local sum =\
    \ 0\n  for i = 1, #arr do\n    sum = sum + signs[arr[i]]\n  end\n  return sum\n\
    end", "  local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and\
    \ 1 or -1\n    table.insert(signs, sign)\n  end\n  return table.aggregate(signs,\
    \ function(s1, s2)\n    return s1 * s2\n  end)\nend", "  local signs = {}\n  for\
    \ i = 1, #arr do\n    local sign = arr[i] > 0 and 1 or -1\n    table.insert(signs,\
    \ sign)\n  end\n  return table.aggregate(signs, 1, function(acc, sign)\n    return\
    \ acc * sign\n  end)\nend", "  if #arr == 0 then\n    return nil\n  end\n  local\
    \ sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i] * sign\n\
    \    sign = -sign\n  end\n  return sum\nend", "  local signs = { [1] = 1, [-1]\
    \ = -1, [0] = 1 }\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + signs[arr[i]]\n\
    \  end\n  return sum\nend", "  local signs = { [1] = 1, [-1] = -1, [0] = 0 }\n\
    \  local sum = 0\n  for i = 1, #arr do\n    sum = sum + signs[arr[i]]\n  end\n\
    \  return sum\nend", "  local signs = {}\n  for i = 1, #arr do\n    local sign\
    \ = arr[i] < 0 and 1 or -1\n    signs[#signs + 1] = sign\n  end\n  return table.concat(signs,\
    \ 1)\nend", "  local signs = {}\n  for i = 1, #arr do\n    signs[i] = arr[i] <\
    \ 0 and 1 or -1\n  end\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum +\
    \ signs[i] * math.abs(arr[i])\n  end\n  return sum\nend", "  local signs = {}\n\
    \  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n    table.insert(signs,\
    \ sign)\n  end\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\
    \ * signs[i]\n  end\n  return sum\nend", "  local signs = {}\n  local sum = 0\n\
    \  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n    signs[sign]\
    \ = signs[sign] + 1 or 1\n    sum = sum + sign * arr[i]\n  end\n  return sum,\
    \ signs\nend", "  local signs = { [1] = 1, [-1] = -1, [0] = 0 }\n  local sum =\
    \ 0\n  for i = 1, #arr do\n    sum = sum + signs[arr[i]]\n  end\n  return sum\n\
    end", "  local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i] > 0 and\
    \ 1 or -1\n    table.insert(signs, sign)\n  end\n  return table.aggregate(signs,\
    \ 1, function(acc, sign)\n    return acc * sign\n  end)\nend", "  local signs\
    \ = {}\n  local sum = 0\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and\
    \ 1 or -1\n    signs[#signs + 1] = sign\n    sum = sum + sign * abs(arr[i])\n\
    \  end\n  return sum, signs\nend", "  local signs = { [1] = 1, [-1] = -1, [0]\
    \ = 0 }\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + signs[arr[i]]\n\
    \  end\n  return sum\nend", "  local signs = { [1] = 1, [-1] = -1, [0] = 0 }\n\
    \  local sum = 0\n  for i = 1, #arr do\n    sum = sum + signs[arr[i]]\n  end\n\
    \  return sum\nend", "  local sum = 0\n  for i = 1, #arr do\n    sum = sum + math.abs(arr[i])\n\
    \  end\n  return sum\nend", "  local signs = {}\n  for i = 1, #arr do\n    local\
    \ sign = arr[i] > 0 and 1 or -1\n    table.insert(signs, sign)\n  end\n  return\
    \ table.aggregate(signs, 1, function(acc, sign)\n    return acc * sign\n  end)\n\
    end", "  local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and\
    \ 1 or -1\n    signs[#signs + 1] = sign\n  end\n  return table.concat(signs, 1)\n\
    end", "  local signs = { [1] = 1, [-1] = -1, [0] = 0 }\n  local product = 1\n\
    \  for i = 1, #arr do\n    product = product * signs[arr[i]]\n  end\n  return\
    \ product\nend", "  local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i]\
    \ < 0 and -1 or 1\n    signs[#signs + 1] = sign\n  end\n  return table.concat(signs,\
    \ 1)\nend", "  local signs = { [1] = 1, [-1] = -1, [0] = 0 }\n  local sum = 0\n\
    \  for i = 1, #arr do\n    sum = sum + signs[arr[i]]\n  end\n  return sum\nend",
  "  local signs = { [1] = 1, [-1] = -1, [0] = 0 }\n  local sum = 0\n  for i = 1,\
    \ #arr do\n    sum = sum + signs[arr[i]]\n  end\n  return sum\nend", "  local\
    \ signs = {}\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n\
    \    table.insert(signs, sign)\n  end\n  local product = 1\n  for i = 1, #signs\
    \ do\n    product = product * signs[i]\n  end\n  return product\nend", "    local\
    \ signs = {}\n    for i = 1, #arr do\n        signs[i] = arr[i] < 0 and 1 or -1\n\
    \    end\n    return signs * math.abs(math.prod(signs))\nend", "  local signs\
    \ = { [1] = 1, [-1] = -1, [0] = 0 }\n  local sum = 0\n  for i = 1, #arr do\n \
    \   sum = sum + signs[arr[i]]\n  end\n  return sum\nend", "    local sum = 0\n\
    \    for i = 1, #arr do\n        sum = sum + math.abs(arr[i])\n    end\n    return\
    \ sum * math.abs(math.prod(arr))\nend", "  local signs = {}\n  for i = 1, #arr\
    \ do\n    local sign = arr[i] < 0 and 1 or -1\n    table.insert(signs, sign)\n\
    \  end\n  local product = 1\n  for i = 1, #signs do\n    product = product * signs[i]\n\
    \  end\n  return product\nend", "  local signs = {}\n  for i = 1, #arr do\n  \
    \  local sign = arr[i] < 0 and 1 or -1\n    table.insert(signs, sign)\n  end\n\
    \  return table.aggregate(signs, 1, function(acc, sign)\n    return acc * sign\n\
    \  end)\nend", "  local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i]\
    \ < 0 and 1 or -1\n    signs[#signs + 1] = sign\n  end\n  local sum = 0\n  for\
    \ i = 1, #signs do\n    sum = sum + signs[i] * math.abs(arr[i])\n  end\n  return\
    \ sum\nend", "  local signs = { [1] = 1, [-1] = -1, [0] = 0 }\n  local sum = 0\n\
    \  for i = 1, #arr do\n    sum = sum + signs[arr[i]]\n  end\n  return sum\nend",
  "  local sum = 0\n  for i = 1, #arr do\n    sum = sum + math.abs(arr[i])\n  end\n\
    \  return sum\nend", "  local signs = {}\n  for i = 1, #arr do\n    local sign\
    \ = arr[i] < 0 and 1 or -1\n    table.insert(signs, sign)\n  end\n  return table.aggregate(signs,\
    \ 1, function(total, sign)\n    return total + sign * math.abs(sign)\n  end)\n\
    end", "  local signs = {}\n  for i = 1, #arr do\n    signs[i] = math.sign( arr[i]\
    \ )\n  end\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + signs[i] *\
    \ math.abs(arr[i])\n  end\n  return sum\nend", "  if #arr == 0 then\n    return\
    \ nil\n  end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local\
    \ v = arr[i]\n    if v < 0 then\n      sign = -sign\n    end\n    sum = sum +\
    \ sign * v\n  end\n  return sum\nend", "  local sum = 0\n  for i = 1, #arr do\n\
    \    sum = sum + math.abs(arr[i])\n  end\n  return sum\nend", "  local signs =\
    \ {}\n  for i = 1, #arr do\n    signs[arr[i]] = signs[arr[i]] or 1\n  end\n  local\
    \ sign = 1\n  for i = 1, #arr do\n    sign = sign * signs[arr[i]]\n  end\n  return\
    \ sign\nend", "  local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i]\
    \ < 0 and 1 or -1\n    signs[#signs + 1] = sign\n  end\n  return table.concat(signs,\
    \ 1)\nend", "    local signs = { [1] = 1, [-1] = -1, [0] = 0 }\n    local sum\
    \ = 0\n    for i = 1, #arr do\n        sum = sum + signs[arr[i]]\n    end\n  \
    \  return sum\nend", "  local signs = { [1] = 1, [-1] = -1, [0] = 0 }\n  local\
    \ sum = 0\n  for i = 1, #arr do\n    sum = sum + signs[arr[i]]\n  end\n  return\
    \ sum\nend", "  local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i]\
    \ < 0 and -1 or 1\n    signs[i] = sign\n  end\n  local product = 1\n  for i =\
    \ 1, #arr do\n    product = product * signs[i]\n  end\n  return product\nend",
  "  local signs = { [1] = 1, [-1] = -1, [0] = 0 }\n  local sum = 0\n  for i = 1,\
    \ #arr do\n    sum = sum + signs[arr[i]]\n  end\n  return sum\nend", "  local\
    \ signs = {}\n  for i = 1, #arr do\n    signs[i] = math.sign( arr[i] )\n  end\n\
    \  local sum = 0\n  for i = 1, #arr do\n    sum = sum + signs[i] * math.abs(arr[i])\n\
    \  end\n  return sum\nend", "  if #arr == 0 then\n    return nil\n  end\n  local\
    \ sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i] * sign\n\
    \    sign = -sign\n  end\n  return sum\nend", "  local signs = { [1] = 1, [-1]\
    \ = -1, [0] = 0 }\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + signs[arr[i]]\n\
    \  end\n  return sum\nend", "  local signs = { [1] = 1, [-1] = -1, [0] = 0 }\n\
    \  local sum = 0\n  for i = 1, #arr do\n    sum = sum + signs[arr[i]]\n  end\n\
    \  return sum\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
