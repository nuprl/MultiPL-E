language: lua
name: HumanEval_85_add
results:
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local evens =\
    \ lst:filter(function(x) return x % 2 == 0 end):map(function(x) return x + 1 end)\n\
    \  local odds = lst:filter(function(x) return x % 2 == 1 end):map(function(x)\
    \ return x + 1 end)\n  return evens + odds\nend\nprint(add({ 1, 2, 3, 4 }))\n\
    print(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4\
    \ }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1,\
    \ 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\n\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpbjv14gv3.lua:4: attempt to call method 'filter' (a nil value)\n\
    stack traceback:\n\t/tmp/tmpbjv14gv3.lua:4: in function 'add'\n\t/tmp/tmpbjv14gv3.lua:8:\
    \ in main chunk\n\t[C]: ?\n"
  stdout: ''
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ nil\n  local odd = nil\n  for i = 1, #lst do\n    if i % 2 == 0 then\n     \
    \ even = lst.new()\n      even:insert(i)\n    else\n      odd = lst.new()\n  \
    \    odd:insert(i)\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3ram0s6f.lua:11:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmp3ram0s6f.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp3ram0s6f.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local even\
    \ = 0\n    local odd = 0\n    for i = 1, #lst do\n        if i % 2 == 0 then\n\
    \            even = even + lst[i]\n        else\n            odd = odd + lst[i]\n\
    \        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2q5z0e5.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp_2q5z0e5.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even, lst[i])\n\
    \    end\n  end\n  return even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmau6wf1y.lua:16:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpmau6wf1y.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ lst:sub(1,#lst)\n  local odd = lst:sub(2,#lst)\n  local eveneven = even:sub(1,#even)\n\
    \  local oddodd = odd:sub(1,#odd)\n  local evenodd = even:sub(1,#even)\n  local\
    \ oddeven = odd:sub(1,#odd)\n  local eveneveneven = eveneven:sub(1,#eveneven)\n\
    \  local oddoddodd = oddodd:sub(1,#oddodd)\n  local evenevenodd = evenodd:sub(1,#evenodd)\n\
    \  local oddeveneven = oddeven:sub(1,#oddeven)\n  local eveneveneven = eveneven:sub(1,#eveneven)\n\
    \  local oddoddeven = oddeven:sub(1,#oddeven)\n  local eveneveneven = eveneven:sub(1,#eveneven)\n\
    \  local oddevenodd = oddeven:sub(1,#oddeven)\n  local eveneveneven = eveneven:sub(1,#eveneven)\n\
    \  local oddoddeven = oddeven:sub(1,#oddeven)\n  local eveneveneven = eveneven:sub(1,#eveneven)\n\
    \  local oddeveneven = oddeven:sub(1,#oddeven)\n  local eveneveneven = eveneven:sub(1,#eveneven)\n\
    \  local oddoddeven = oddeven:sub(1,#oddeven)\n  local eveneveneven = eveneven:sub(1,#eveneven)\n\
    \  local oddeveneven = oddeven:sub(1,#oddeven)\n  local eveneveneven = eveneven:sub(1,#eveneven)\n\
    \  local oddoddeven = oddeven:sub(1,#oddeven)\n  local eveneveneven = eveneven:sub(1,#eveneven)\n\
    \  local oddeveneven = oddeven:sub(1,#oddeven)\n  local eveneveneven = eveneven:sub(1,#eveneven)\n\
    \  local oddoddeven = oddeven:sub(1,#oddeven)\n  local eveneveneven = eveneven:sub(1,#eveneven)\n\
    \  local oddeveneven = oddeven:sub(1,#oddeven)\n  local eveneveneven = eveneven:sub(1,#eveneven)\n\
    \  local oddoddeven = oddeven:sub(1,#oddeven)\n  local eveneveneven = eveneven:sub(1,#eveneven)\n\
    \  local oddeven\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp_lq2f8j.lua:48: ''end'' expected (to close ''function'' at
    line 3) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even, lst[i])\n\
    \    end\n  end\n  return even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmau6wf1y.lua:16:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpmau6wf1y.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ lst:filter(function(x) return x % 2 == 0 end)\n  local odd = lst:filter(function(x)\
    \ return x % 2 ~= 0 end)\n  return even:concat( odd:map(function(x) return x +\
    \ 1 end) )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpobpzgig4.lua:4:\
    \ attempt to call method 'filter' (a nil value)\nstack traceback:\n\t/tmp/tmpobpzgig4.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmpobpzgig4.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ lst:filter(function(x) return x % 2 == 0 end)\n  local odd = lst:filter(function(x)\
    \ return x % 2 == 1 end)\n  return even:concat( odd )\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp0qru9xp.lua:4:\
    \ attempt to call method 'filter' (a nil value)\nstack traceback:\n\t/tmp/tmpp0qru9xp.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmpp0qru9xp.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ lst:sub(1,2):map(function(x) return x*2 end)\n  local odd = lst:sub(1,2):map(function(x)\
    \ return x*2+1 end)\n  return even:concat(odd)\nend\nprint(add({1,2,3,4,5}))\n\
    print(add({1,2,3,4,5,6}))\nprint(add({1,2,3,4,5,6,7}))\nprint(add({1,2,3,4,5,6,7,8}))\n\
    print(add({1,2,3,4,5,6,7,8,9}))\nprint(add({1,2,3,4,5,6,7,8,9,10}))\nprint(add({1,2,3,4,5,6,7,8,9,10,11}))\n\
    print(add({1,2,3,4,5,6,7,8,9,10,11,12}))\nprint(add({1,2,3,4,5,6,7,8,9,10,11,12,13}))\n\
    print(add({1,2,3,4,5,6,7,8,9,10,11,12,13,14}))\nprint(add({1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}))\n\
    print(add({1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}))\nprint(add({1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17}))\n\
    print(add({1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18}))\nprint(add({1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19}))\n\
    print(add({1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20}))\nprint(add({1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21}))\n\
    print(add({1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22}))\nprint(add({1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23}))\n\
    print(add({1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24}))\n\
    print(add({1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25}))\n\
    print(add({1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26}))\n\
    print(add({1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27}))\n\
    print(add({1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28}))\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmphrd18nwj.lua:4: attempt to call method 'sub' (a nil value)\n\
    stack traceback:\n\t/tmp/tmphrd18nwj.lua:4: in function 'add'\n\t/tmp/tmphrd18nwj.lua:8:\
    \ in main chunk\n\t[C]: ?\n"
  stdout: ''
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local even\
    \ = 0\n    local odd = 0\n    for i = 1, #lst do\n        if i % 2 == 0 then\n\
    \            even = even + lst[i]\n        else\n            odd = odd + lst[i]\n\
    \        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2q5z0e5.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp_2q5z0e5.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  local odd  = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeclrr4no.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpeclrr4no.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ lst:sub(1,lst:len()/2):map(function(x)\n    return x*2\n  end)\n  local odd\
    \ = lst:sub(1,lst:len()/2):map(function(x)\n    return x*2\n  end)\n  local result\
    \ = {}\n  for i = 1, lst:len()/2 do\n    table.insert(result, even[i])\n    table.insert(result,\
    \ odd[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpct8ergbp.lua:4:\
    \ attempt to call method 'len' (a nil value)\nstack traceback:\n\t/tmp/tmpct8ergbp.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmpct8ergbp.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local evens\
    \ = lst:filter(function(x) return x % 2 == 0 end)\n    local odds = lst:filter(function(x)\
    \ return x % 2 == 1 end)\n    return evens + odds\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppa7c7vqp.lua:4:\
    \ attempt to call method 'filter' (a nil value)\nstack traceback:\n\t/tmp/tmppa7c7vqp.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmppa7c7vqp.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even, lst[i])\n\
    \    end\n  end\n  return even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmau6wf1y.lua:16:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpmau6wf1y.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local evens =\
    \ lst:filter(function(x) return x % 2 == 0 end)\n  local odds = lst:filter(function(x)\
    \ return x % 2 == 1 end)\n  local result = {}\n  for i = 1, #evens do\n    table.insert(result,\
    \ evens[i])\n  end\n  for i = 1, #odds do\n    table.insert(result, odds[i])\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplgrs0ukb.lua:4:\
    \ attempt to call method 'filter' (a nil value)\nstack traceback:\n\t/tmp/tmplgrs0ukb.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmplgrs0ukb.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local even\
    \ = 0\n    local odd = 0\n    for i = 1, #lst do\n        if i % 2 == 0 then\n\
    \            even = even + lst[i]\n        else\n            odd = odd + lst[i]\n\
    \        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2q5z0e5.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp_2q5z0e5.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ lst:filter(function(x)\n    return x % 2 == 0\n  end)\n  local odd = lst:filter(function(x)\n\
    \    return x % 2 == 1\n  end)\n  local result = {}\n  for i = 1, #even do\n \
    \   result[#result + 1] = even[i]\n  end\n  for i = 1, #odd do\n    result[#result\
    \ + 1] = odd[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxq_8oy7g.lua:4:\
    \ attempt to call method 'filter' (a nil value)\nstack traceback:\n\t/tmp/tmpxq_8oy7g.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmpxq_8oy7g.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ lst:filter(function(x)\n    return x % 2 == 0\n  end)\n  local odd = lst:filter(function(x)\n\
    \    return x % 2 ~= 0\n  end)\n  local result = {}\n  for i = 1, #even do\n \
    \   result[#result + 1] = even[i]\n  end\n  for i = 1, #odd do\n    result[#result\
    \ + 1] = odd[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfzw9qa2z.lua:4:\
    \ attempt to call method 'filter' (a nil value)\nstack traceback:\n\t/tmp/tmpfzw9qa2z.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmpfzw9qa2z.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local evens =\
    \ lst:sub(1,#lst)\n  local odds = lst:sub(2,#lst)\n  local evens_at_odds = evens:map(function(x)\n\
    \    return x % 2\n  end)\n  local result = evens_at_odds:concat(odds)\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxv8unoy_.lua:4:\
    \ attempt to call method 'sub' (a nil value)\nstack traceback:\n\t/tmp/tmpxv8unoy_.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmpxv8unoy_.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ lst:sub(1,lst:len()/2):map(function(x)\n    return x:sub(1,1)\n  end)\n  local\
    \ odd = lst:sub(1,lst:len()/2+1):map(function(x)\n    return x:sub(1,1)\n  end)\n\
    \  local result = {}\n  for i = 1, lst:len()/2 do\n    result[i] = even[i] + odd[i]\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ruy5owk.lua:4:\
    \ attempt to call method 'len' (a nil value)\nstack traceback:\n\t/tmp/tmp4ruy5owk.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmp4ruy5owk.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local even\
    \ = 0\n    local odd = 0\n    for i = 1, #lst do\n        if i % 2 == 0 then\n\
    \            even = even + lst[i]\n        else\n            odd = odd + lst[i]\n\
    \        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2q5z0e5.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp_2q5z0e5.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local evens =\
    \ lst:filter(function(x)\n    return x % 2 == 0\n  end)\n  local odds = lst:filter(function(x)\n\
    \    return x % 2 == 1\n  end)\n  local result = {}\n  for _, v in ipairs(evens)\
    \ do\n    result[#result + 1] = v\n  end\n  for _, v in ipairs(odds) do\n    result[#result\
    \ + 1] = v\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4hzma1jf.lua:4:\
    \ attempt to call method 'filter' (a nil value)\nstack traceback:\n\t/tmp/tmp4hzma1jf.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmp4hzma1jf.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ nil\n  local odd = nil\n  for i = 1, #lst do\n    if i % 2 == 0 then\n     \
    \ even = lst[i]\n    else\n      odd = lst[i]\n    end\n  end\n  return even +\
    \ odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0301q19m.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp0301q19m.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  local odd = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmk2_6ckp.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpmk2_6ckp.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even, lst[i])\n\
    \    end\n  end\n  return even\nend\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1,\
    \ 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplx54hna1.lua:74: ''}'' expected (to close ''{'' at line 71)
    near ''function''

    '
  stdout: ''
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ lst:sub(1,lst:len()/2):map(function(x) return x % 2 ~= 0 end)\n  local odd =\
    \ lst:sub(1,lst:len()/2):map(function(x) return x % 2 == 0 end)\n  return even:cat(odd)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpliulpxa0.lua:4:\
    \ attempt to call method 'len' (a nil value)\nstack traceback:\n\t/tmp/tmpliulpxa0.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmpliulpxa0.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  local odd = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmk2_6ckp.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpmk2_6ckp.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ lst:sub(1,2)\n  local odd = lst:sub(3)\n  return even:concat( odd:gsub(\"%d+\"\
    ,\"%d\") )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1e81do5c.lua:4:\
    \ attempt to call method 'sub' (a nil value)\nstack traceback:\n\t/tmp/tmp1e81do5c.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmp1e81do5c.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ lst:sub(1,2):map(function(x)\n    return x*2\n  end)\n  local odd = lst:sub(1,2):map(function(x)\n\
    \    return x*2\n  end)\n  local result = {}\n  for i = 1, #even do\n    table.insert(result,\
    \ even[i])\n  end\n  for i = 1, #odd do\n    table.insert(result, odd[i])\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2nbgi810.lua:4:\
    \ attempt to call method 'sub' (a nil value)\nstack traceback:\n\t/tmp/tmp2nbgi810.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmp2nbgi810.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1,\
    \ 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1,\
    \ 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1,\
    \ 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1,\
    \ 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1,\
    \ 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1,\
    \ 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1,\
    \ 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1,\
    \ 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1,\
    \ 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1,\
    \ 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1,\
    \ 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1,\
    \ 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1,\
    \ 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1,\
    \ 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1,\
    \ 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1,\
    \ 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1,\
    \ 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1,\
    \ 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1, 2, 3, 4, 5}))\nprint(add({1,\
    \ 2, 3, 4, 5}))\nprint(add({1, 2, \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpje64jvfg.lua:74: ''}'' expected (to close ''{'' at line 71)
    near ''function''

    '
  stdout: ''
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even, lst[i])\n\
    \    end\n  end\n  return even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmau6wf1y.lua:16:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpmau6wf1y.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local evens =\
    \ lst:filter(function(x)\n    return x % 2 == 0\n  end)\n  local odds = lst:filter(function(x)\n\
    \    return x % 2 ~= 0\n  end)\n  local result = {}\n  for _, x in ipairs(evens)\
    \ do\n    table.insert(result, x)\n  end\n  for _, x in ipairs(odds) do\n    table.insert(result,\
    \ x)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2l0_5gv7.lua:4:\
    \ attempt to call method 'filter' (a nil value)\nstack traceback:\n\t/tmp/tmp2l0_5gv7.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmp2l0_5gv7.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  local odd = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmk2_6ckp.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpmk2_6ckp.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  local odd = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmk2_6ckp.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpmk2_6ckp.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even, lst[i])\n\
    \    end\n  end\n  return even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmau6wf1y.lua:16:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpmau6wf1y.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ lst:sub(1,2):map(function(x)\n    return x * 2\n  end)\n  local odd = lst:sub(1,2):map(function(x)\n\
    \    return x * 2\n  end)\n  local result = {}\n  for i = 1, #even do\n    table.insert(result,\
    \ even[i])\n  end\n  for i = 1, #odd do\n    table.insert(result, odd[i])\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp80lbxd0g.lua:4:\
    \ attempt to call method 'sub' (a nil value)\nstack traceback:\n\t/tmp/tmp80lbxd0g.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmp80lbxd0g.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local evens =\
    \ {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(evens,\
    \ lst[i])\n    end\n  end\n  return evens\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkvdnuwuc.lua:16:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpkvdnuwuc.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfny171iw.lua:74: ''}'' expected (to close ''{'' at line 71)
    near ''function''

    '
  stdout: ''
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even, lst[i])\n\
    \    end\n  end\n  return even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmau6wf1y.lua:16:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpmau6wf1y.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local even\
    \ = {}\n    for i = 1, #lst do\n        if i % 2 == 0 then\n            table.insert(even,\
    \ lst[i])\n        end\n    end\n    return even\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0x2dzbjr.lua:16:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp0x2dzbjr.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  local odd = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmk2_6ckp.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpmk2_6ckp.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local evens =\
    \ {}\n  local odds = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(evens,\
    \ lst[i])\n    else\n      table.insert(odds, lst[i])\n    end\n  end\n  table.insert(evens,\
    \ table.concat(odds, \" \"))\n  return evens\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp34z9rvvg.lua:20:\
    \ expected: 88, actual: {88, \"4\"}\nstack traceback:\n\t/tmp/tmp34z9rvvg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local evens =\
    \ {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(evens,\
    \ lst[i])\n    end\n  end\n  return evens\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkvdnuwuc.lua:16:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpkvdnuwuc.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ lst:sub(1,lst:len()/2):map(function(x)\n    return x:mod(2)\n  end)\n  local\
    \ odd = lst:sub(1,lst:len()/2):map(function(x)\n    return x:mod(2)\n  end)\n\
    \  local evenSum = even:sum()\n  local oddSum = odd:sum()\n  return evenSum +\
    \ oddSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0g9dyhy0.lua:4:\
    \ attempt to call method 'len' (a nil value)\nstack traceback:\n\t/tmp/tmp0g9dyhy0.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmp0g9dyhy0.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ lst:sub(1,lst:len()/2):map(function(x)\n    return x:mod(2)\n  end)\n  local\
    \ odd = lst:sub(1,lst:len()/2):map(function(x)\n    return x:mod(2)\n  end)\n\
    \  local result = {}\n  for i=1,#even do\n    if even[i] then\n      table.insert(result,\
    \ even[i])\n    end\n  end\n  for i=1,#odd do\n    if odd[i] then\n      table.insert(result,\
    \ odd[i])\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0z1_w8c3.lua:4:\
    \ attempt to call method 'len' (a nil value)\nstack traceback:\n\t/tmp/tmp0z1_w8c3.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmp0z1_w8c3.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ lst:sub(1,lst:len()/2):map(function(x)\n    return x:mod(2)\n  end)\n  local\
    \ odd = lst:sub(1,lst:len()/2):map(function(x)\n    return x:mod(2)\n  end)\n\
    \  local result = {}\n  for i = 1, lst:len()/2 do\n    result[#result+1] = even[i]\
    \ + odd[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbej6tz2g.lua:4:\
    \ attempt to call method 'len' (a nil value)\nstack traceback:\n\t/tmp/tmpbej6tz2g.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmpbej6tz2g.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ lst:sub(1,lst:len()/2):map(function(x)\n    return x*2\n  end)\n  local odd\
    \ = lst:sub(1,lst:len()/2):map(function(x)\n    return x*2\n  end)\n  local result\
    \ = {}\n  for i = 1, lst:len()/2 do\n    result[i] = even[i] + odd[i]\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpspm1ppkv.lua:4:\
    \ attempt to call method 'len' (a nil value)\nstack traceback:\n\t/tmp/tmpspm1ppkv.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmpspm1ppkv.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  local odd = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmk2_6ckp.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpmk2_6ckp.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local even\
    \ = lst:sub(1,lst:len()/2):map(function(x)\n        return x:mod(2)\n    end)\n\
    \    local odd = lst:sub(1,lst:len()/2):map(function(x)\n        return x:mod(2)\n\
    \    end)\n    return even:concat({odd})\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2d2dn0zz.lua:4:\
    \ attempt to call method 'len' (a nil value)\nstack traceback:\n\t/tmp/tmp2d2dn0zz.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmp2d2dn0zz.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  local odd = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmk2_6ckp.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpmk2_6ckp.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ nil\n  local odd  = nil\n  for i = 1, #lst do\n    if i % 2 == 0 then\n    \
    \  even = lst.new()\n      even:insert(i)\n    else\n      odd = lst.new()\n \
    \     odd:insert(i)\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqzaq5smn.lua:11:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpqzaq5smn.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpqzaq5smn.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfny171iw.lua:74: ''}'' expected (to close ''{'' at line 71)
    near ''function''

    '
  stdout: ''
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  local odd = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmk2_6ckp.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpmk2_6ckp.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local evens =\
    \ {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(evens,\
    \ lst[i])\n    end\n  end\n  return evens\nend\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfpoxq9ry.lua:74: ''}'' expected (to close ''{'' at line 71)
    near ''function''

    '
  stdout: ''
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local even\
    \ = lst:filter(function(x)\n        return x % 2 == 0\n    end)\n    local odd\
    \ = lst:filter(function(x)\n        return x % 2 == 1\n    end)\n    even:extend(odd)\n\
    \    return even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpznwmoigi.lua:4:\
    \ attempt to call method 'filter' (a nil value)\nstack traceback:\n\t/tmp/tmpznwmoigi.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmpznwmoigi.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  local odd = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmk2_6ckp.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpmk2_6ckp.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local evens =\
    \ lst:filter(function(x)\n    return x % 2 == 0\n  end)\n  local odds = lst:filter(function(x)\n\
    \    return x % 2 ~= 0\n  end)\n  return evens:concat(odds)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl7w2fnmx.lua:4:\
    \ attempt to call method 'filter' (a nil value)\nstack traceback:\n\t/tmp/tmpl7w2fnmx.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmpl7w2fnmx.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  local odd = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmk2_6ckp.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpmk2_6ckp.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ lst:sub(1,lst:len()/2):map(function(x)\n    return x*2\n  end)\n  local odd\
    \ = lst:sub(1,lst:len()/2):map(function(x)\n    return x*2\n  end)\n  local result\
    \ = {}\n  for i = 1, lst:len()/2 do\n    result[#result+1] = even[i] + odd[i]\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz9gyyj6n.lua:4:\
    \ attempt to call method 'len' (a nil value)\nstack traceback:\n\t/tmp/tmpz9gyyj6n.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmpz9gyyj6n.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  local odd = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmk2_6ckp.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpmk2_6ckp.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ lst:sub(1,#lst)\n  local odd = lst:sub(2,#lst)\n  local sum = 0\n  for i = 1,\
    \ #even do\n    if i % 2 == 1 then\n      sum = sum + even[i]\n    end\n  end\n\
    \  for i = 1, #odd do\n    if i % 2 == 0 then\n      sum = sum + odd[i]\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsb9buimn.lua:4:\
    \ attempt to call method 'sub' (a nil value)\nstack traceback:\n\t/tmp/tmpsb9buimn.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmpsb9buimn.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local evens =\
    \ {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(evens,\
    \ lst[i])\n    end\n  end\n  return evens\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkvdnuwuc.lua:16:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpkvdnuwuc.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ lst:sub(1,#lst)\n  local odd = lst:sub(2,#lst)\n  local eveneven = even:sub(1,#even)\n\
    \  local oddodd = odd:sub(1,#odd)\n  local evenodd = even:sub(1,#even)\n  local\
    \ oddeven = odd:sub(1,#odd)\n  local evenevenodd = eveneven:sub(1,#eveneven)\n\
    \  local oddoddeven = oddodd:sub(1,#oddodd)\n  local evenevenodd = eveneven:sub(1,#eveneven)\n\
    \  local oddoddeveneven = oddoddeven:sub(1,#oddoddeven)\n  local evenevenevenodd\
    \ = evenevenodd:sub(1,#evenevenodd)\n  local oddoddeveneven = oddoddeveneven:sub(1,#oddoddeveneven)\n\
    \  local evenevenevenoddeven = evenevenevenodd:sub(1,#evenevenevenodd)\n  local\
    \ oddoddeveneveneven = oddoddeveneven:sub(1,#oddoddeveneven)\n  local evenevenevenoddeveneven\
    \ = evenevenevenoddeven:sub(1,#evenevenevenoddeven)\n  local oddoddeveneveneven\
    \ = oddoddeveneven:sub(1,#oddoddeveneven)\n  local evenevenevenoddeveneven = evenevenevenoddeven:sub(1,#evenevenevenoddeven)\n\
    \  local oddoddeveneveneven = oddoddeveneven:sub(1,#oddoddeveneven)\n  local evenevenevenoddeveneven\
    \ = evenevenevenoddeven:sub(1,#evenevenevenoddeven)\n  local oddoddeveneveneven\
    \ = oddoddeveneven:sub(1,#oddoddeveneven)\n  local evenevenevenoddeveneven = evenevenevenoddeven:sub(1,#evenevenevenoddeven)\n\
    \  local oddoddeveneveneven = oddoddeveneven:sub(1,#oddoddeveneven)\n  local evenevenevenoddeveneven\
    \ = evenevenevenoddeven:sub(1,#evenevenevenoddeven)\n  local oddoddeveneveneven\
    \ = oddoddeveneven:sub(1,#oddoddeveneven)\n  local evenevenevenoddeveneven = evenevenevenoddeven:sub(1,#evenevenevenoddeven)\n\
    \  local oddoddeveneveneven = oddoddeveneven:sub(1,#oddoddeveneven)\n  local even\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps8av3ls1.lua:41: ''end'' expected (to close ''function'' at
    line 3) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local evens =\
    \ {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(evens,\
    \ lst[i])\n    end\n  end\n  return evens\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkvdnuwuc.lua:16:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpkvdnuwuc.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even, lst[i])\n\
    \    end\n  end\n  return even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmau6wf1y.lua:16:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpmau6wf1y.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even, lst[i])\n\
    \    end\n  end\n  return even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmau6wf1y.lua:16:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpmau6wf1y.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  local odd = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmk2_6ckp.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpmk2_6ckp.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({ 1, 2, 3, 4 }))\nprint(add({\
    \ 1, 2, 3, 4 }))\nprint(add({ 1, 2, \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfny171iw.lua:74: ''}'' expected (to close ''{'' at line 71)
    near ''function''

    '
  stdout: ''
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local evens =\
    \ {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(evens,\
    \ lst[i])\n    end\n  end\n  return evens\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkvdnuwuc.lua:16:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpkvdnuwuc.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  local odd  = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeclrr4no.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpeclrr4no.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ lst:sub(1,2)\n  local odd = lst:sub(3)\n  local even = even:gsub(\"^0*\",\"\"\
    )\n  local odd = odd:gsub(\"^0*\",\"\")\n  return even .. \"-\" .. odd .. \"-\"\
    \ .. lst:sub(3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpian3kylv.lua:4:\
    \ attempt to call method 'sub' (a nil value)\nstack traceback:\n\t/tmp/tmpian3kylv.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmpian3kylv.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ lst:sub(1,lst:len()/2):map(function(x)\n    return x*2\n  end)\n  local odd\
    \ = lst:sub(1,lst:len()/2):map(function(x)\n    return x*2\n  end)\n  local result\
    \ = {}\n  for i = 1, lst:len()/2 do\n    table.insert(result, even[i])\n    table.insert(result,\
    \ odd[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpct8ergbp.lua:4:\
    \ attempt to call method 'len' (a nil value)\nstack traceback:\n\t/tmp/tmpct8ergbp.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmpct8ergbp.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local even,\
    \ odd = {}, {}\n    for i = 1, #lst do\n        if i % 2 == 0 then\n         \
    \   table.insert(even, lst[i])\n        else\n            table.insert(odd, lst[i])\n\
    \        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp781e_5c6.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp781e_5c6.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ lst:filter(function(x)\n    return x % 2 == 0\n  end)\n  local odd = lst:filter(function(x)\n\
    \    return x % 2 ~= 0\n  end)\n  return even:concat(odd)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy1k7qsld.lua:4:\
    \ attempt to call method 'filter' (a nil value)\nstack traceback:\n\t/tmp/tmpy1k7qsld.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmpy1k7qsld.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local evens =\
    \ lst:filter(function(x) return x % 2 == 0 end)\n  local odds = lst:filter(function(x)\
    \ return x % 2 == 1 end)\n  return evens:concat(odds)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyuszxud.lua:4:\
    \ attempt to call method 'filter' (a nil value)\nstack traceback:\n\t/tmp/tmphyuszxud.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmphyuszxud.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local evens =\
    \ {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(evens,\
    \ lst[i])\n    end\n  end\n  return evens\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkvdnuwuc.lua:16:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpkvdnuwuc.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  local odd = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmk2_6ckp.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpmk2_6ckp.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even, lst[i])\n\
    \    end\n  end\n  return even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmau6wf1y.lua:16:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpmau6wf1y.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local evens =\
    \ lst:filter(function(x) return x % 2 == 0 end)\n  local odds = lst:filter(function(x)\
    \ return x % 2 == 1 end)\n  return evens + odds\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq0lh8xla.lua:4:\
    \ attempt to call method 'filter' (a nil value)\nstack traceback:\n\t/tmp/tmpq0lh8xla.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmpq0lh8xla.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  local odd = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ table.concat(even, \",\") .. table.concat(odd, \",\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphfwfj3q8.lua:19:\
    \ expected: 88, actual: \"884\"\nstack traceback:\n\t/tmp/tmphfwfj3q8.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ lst:sub(1,lst:len()/2)\n  local odd = lst:sub(lst:len()/2+1,lst:len())\n  return\
    \ even:concat({even,odd})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpggf9c8fg.lua:4:\
    \ attempt to call method 'len' (a nil value)\nstack traceback:\n\t/tmp/tmpggf9c8fg.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmpggf9c8fg.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  local odd = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmk2_6ckp.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpmk2_6ckp.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even, lst[i])\n\
    \    end\n  end\n  return even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmau6wf1y.lua:16:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpmau6wf1y.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  local odd = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ table.concat(even, \",\") .. table.concat(odd, \",\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphfwfj3q8.lua:19:\
    \ expected: 88, actual: \"884\"\nstack traceback:\n\t/tmp/tmphfwfj3q8.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local evens =\
    \ {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(evens,\
    \ lst[i])\n    end\n  end\n  return evens\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkvdnuwuc.lua:16:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpkvdnuwuc.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local evens =\
    \ {}\n  local odds = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(evens,\
    \ lst[i])\n    else\n      table.insert(odds, lst[i])\n    end\n  end\n  return\
    \ table.concat(evens, \",\") .. table.concat(odds, \",\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu28uwbei.lua:19:\
    \ expected: 88, actual: \"884\"\nstack traceback:\n\t/tmp/tmpu28uwbei.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even, lst[i])\n\
    \    end\n  end\n  return even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmau6wf1y.lua:16:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpmau6wf1y.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ lst:sub(1,lst:len()/2):map(function(x)\n    return x*2\n  end)\n  local odd\
    \ = lst:sub(1,lst:len()/2):map(function(x)\n    return x*2\n  end)\n  local result\
    \ = {}\n  for i = 1, lst:len()/2 do\n    table.insert(result, even[i])\n    table.insert(result,\
    \ odd[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpct8ergbp.lua:4:\
    \ attempt to call method 'len' (a nil value)\nstack traceback:\n\t/tmp/tmpct8ergbp.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmpct8ergbp.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ lst:sub(1,2)\n  local odd = lst:sub(3)\n  return even:concat( odd:gsub(\"%d%d+\"\
    ,function(a,b) return a+b end) )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiqu0wa39.lua:4:\
    \ attempt to call method 'sub' (a nil value)\nstack traceback:\n\t/tmp/tmpiqu0wa39.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmpiqu0wa39.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local evens =\
    \ {}\n  local odds = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(evens,\
    \ lst[i])\n    else\n      table.insert(odds, lst[i])\n    end\n  end\n  return\
    \ table.concat(evens, \",\") .. table.concat(odds, \",\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu28uwbei.lua:19:\
    \ expected: 88, actual: \"884\"\nstack traceback:\n\t/tmp/tmpu28uwbei.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local even,\
    \ odd = {}, {}\n    for i = 1, #lst do\n        if i % 2 == 0 then\n         \
    \   even[#even+1] = lst[i]\n        else\n            odd[#odd+1] = lst[i]\n \
    \       end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7n14mug2.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp7n14mug2.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local evens =\
    \ lst:filter(function(x)\n    return x % 2 == 0\n  end)\n  local odds = lst:filter(function(x)\n\
    \    return x % 2 ~= 0\n  end)\n  local evens_at_odds = evens:map(function(x)\n\
    \    return x + 1\n  end)\n  local odds_at_evens = odds:map(function(x)\n    return\
    \ x - 1\n  end)\n  return evens_at_odds + odds_at_evens\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6yqqxpuh.lua:4:\
    \ attempt to call method 'filter' (a nil value)\nstack traceback:\n\t/tmp/tmp6yqqxpuh.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmp6yqqxpuh.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ lst:sub(1,#lst)\n  local odd = lst:sub(2,#lst)\n  local result = {}\n  for i\
    \ = 1, #even do\n    result[#result+1] = even[i] + odd[i]\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9qpf9el6.lua:4:\
    \ attempt to call method 'sub' (a nil value)\nstack traceback:\n\t/tmp/tmp9qpf9el6.lua:4:\
    \ in function 'candidate'\n\t/tmp/tmp9qpf9el6.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even, odd\
    \ = {}, {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59n9y8af.lua:18:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmp59n9y8af.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ {}\n  local odd  = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      table.insert(even,\
    \ lst[i])\n    else\n      table.insert(odd, lst[i])\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeclrr4no.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpeclrr4no.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local even =\
    \ 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even\
    \ = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zsz0z_x.lua:20:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0zsz0z_x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750511
