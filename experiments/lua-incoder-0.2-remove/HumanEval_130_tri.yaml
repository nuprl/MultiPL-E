name: HumanEval_130_tri
language: lua
prompt: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) = 3\n\
  -- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2) + tri(n\
  \ + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n-- tri(4) =\
  \ 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You are given\
  \ a non-negative integer number n, you have to a return a list of the \n-- first\
  \ n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function tri(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
  \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
  \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n   \
  \ lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
  \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8, 3,\
  \ 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
  \ 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
  \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0), {1})\n\
  \    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local function tri_aux(n, acc)\n    if n == 0 then\n      return\
    \ acc\n    end\n    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc +\
    \ acc)\n    return acc\n  end\n  return tri_aux(n, 3)\nend", "  local function\
    \ tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n    local tri_aux\
    \ = tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, acc)))\n    return tri_aux\n\
    \  end\n  return tri_aux(n, tri_aux(n, tri_aux(n, 0)))\nend", "    local function\
    \ tri_aux(n, a, b, c)\n        if n == 0 then\n            return a\n        elseif\
    \ n == 1 then\n            return b\n        else\n            return tri_aux(n\
    \ - 1, b, a + c, c)\n        end\n    end\n    return tri_aux(n, 0, 0, 1)\nend",
  "  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n\
    \    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc + acc)\n    return\
    \ acc\n  end\n  return tri_aux(n, 3)\nend", "  local function tri_aux(n)\n   \
    \ if n == 1 then\n      return 3\n    elseif n == 2 then\n      return 1 + n /\
    \ 2\n    else\n      return tri_aux(n - 1) + tri_aux(n - 2) + tri(n + 1)\n   \
    \ end\n  end\n  return tri_aux(n)\nend", "  local function tri_aux(n, acc)\n \
    \   if n == 0 then\n      return acc\n    end\n    local tri_aux = tri_aux(n -\
    \ 1, acc)\n    local tri_aux = tri_aux(n - 2, tri_aux + tri_aux + tri_aux + tri_aux)\n\
    \    return tri_aux\n  end\n  return tri_aux(n, 3)\nend", "  local function tri_aux(n,\
    \ acc)\n    if n == 1 then\n      return acc\n    else\n      return tri_aux(n\
    \ - 1, acc) + tri_aux(n - 2, acc + acc)\n    end\n  end\n  return tri_aux(n, 0)\n\
    end", "  if n == 0 then\n    return nil\n  elseif n == 1 then\n    return [3]\n\
    \  elseif n % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \ else\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4)\n  end\nend", "  local function tri_aux(n)\n    if n == 1 then\n      return\
    \ 3\n    elseif n == 2 then\n      return 1\n    else\n      return tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri_aux(n - 3)\n    end\n  end\n  return tri_aux(n)\n\
    end", "  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n\
    \    if n % 2 == 0 then\n      return tri_aux\n    else\n      return tri_aux\
    \ + tri(n - 1)\n    end\n  end\n  return tri_aux(n, 3)\nend", "  -- Base case\n\
    \  if n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    -- Recursive case\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  end\n\
    end", "  local result = {1,3,5}\n  local i = 1\n  while i <= n do\n    table.insert(result,\
    \ tri(i - 1) + tri(i - 2) + tri(i + 1))\n    i = i + 2\n  end\n  return result\n\
    end", "  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n\
    \    if n % 2 == 0 then\n      return tri_aux\n    else\n      return tri_aux\
    \ + tri_aux\n    end\n  end\n  return tri_aux(n, 3)\nend", "  -- Base case\n \
    \ if n == 1 then\n    return [3]\n  -- Recursive case\n  elseif n == 2 then\n\
    \    return [1]\n  -- Odd case\n  elseif n % 2 == 1 then\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n  -- Even case\n  else\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 1) + tri(n - 2)\n  end\nend", "  -- base case\n\
    \  if n == 1 then\n    return 3\n  -- recursive case\n  elseif n == 2 then\n \
    \   return 1 + 2\n  -- base case\n  elseif n == 3 then\n    return 1 + 2 + 3\n\
    \  -- recursive case\n  elseif n % 2 == 0 then\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  -- base case\n  else\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  end\nend", "  local function tri_aux(n,\
    \ acc)\n    if n == 0 then\n      return acc\n    end\n    local tri_aux = tri_aux(n\
    \ - 1, acc + tri(n - 1) + tri(n - 2))\n    if n % 2 == 1 then\n      tri_aux =\
    \ tri_aux + tri(n - 1) + tri(n - 2)\n    end\n    return tri_aux\n  end\n  return\
    \ tri_aux(n, 3)\nend", "  -- base case\n  if n == 1 then\n    return [3]\n  --\
    \ recursive case\n  elseif n == 2 then\n    return [3] + [2,1]\n  -- base case\n\
    \  elseif n == 3 then\n    return [3] + [3,2]\n  -- recursive case\n  elseif n\
    \ % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  -- base case\n\
    \  else\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  end\nend", "  local function tri_aux(n, acc)\n    if n\
    \ == 0 then\n      return acc\n    elseif n == 1 then\n      return acc\n    elseif\
    \ n % 2 == 0 then\n      return tri_aux(n - 1, tri_aux(n - 1, acc))\n    else\n\
    \      return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, acc) + tri(n - 2)))\n\
    \    end\n  end\n  return tri_aux(n, {})\nend", "    local function tri_aux(n,\
    \ acc)\n        if n == 1 then\n            return acc\n        else\n       \
    \     local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n        \
    \    return tri_aux\n        end\n    end\n    return tri_aux(n, 3)\nend", " \
    \ local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    elseif\
    \ n == 1 then\n      return acc\n    elseif n % 2 == 0 then\n      return tri_aux(n\
    \ - 1, acc)\n    else\n      return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n -\
    \ 1, acc) + acc))\n    end\n  end\n  return tri_aux(n, 0)\nend", "  local function\
    \ tri_aux(n)\n    if n == 1 then\n      return 3\n    elseif n == 2 then\n   \
    \   return 1 + n / 2\n    else\n      return tri_aux(n - 1) + tri_aux(n - 2) +\
    \ tri_aux(n - 3)\n    end\n  end\n  return tri_aux(n)\nend", "  local function\
    \ tri_aux(n, acc)\n    if n == 1 then\n      table.insert(acc, 1)\n    else\n\
    \      table.insert(acc, tri_aux(n - 1, acc))\n      table.insert(acc, tri_aux(n\
    \ - 2, acc))\n    end\n    return acc\n  end\n  return tri_aux(n, {})\nend", "\t\
    local function tri_aux(n, acc)\n\t\tif n == 1 then\n\t\t\treturn acc\n\t\telse\n\
    \t\t\tlocal new_acc = tri_aux(n - 1, acc)\n\t\t\tnew_acc = new_acc + (n / 2)\n\
    \t\t\tif n % 2 == 0 then\n\t\t\t\tnew_acc = new_acc + tri_aux(n - 2, new_acc)\n\
    \t\t\tend\n\t\t\treturn new_acc\n\t\tend\n\tend\n\treturn tri_aux(n, 3)\nend",
  "  -- Base case\n  if n == 0 then\n    return 0\n  -- Even case\n  elseif n % 2\
    \ == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  -- Odd case\n\
    \  else\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4)\n  end\nend", "  local function tri_aux(n)\n    if n == 0 then\n      return\
    \ 0\n    end\n    if n == 1 then\n      return 1\n    end\n    return tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri_aux(n - 3)\n  end\n  return tri_aux(n)\nend", " \
    \ local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    elseif\
    \ n == 1 then\n      return { 1 }\n    else\n      local tri_aux = tri_aux(n -\
    \ 1, { acc[1] })\n      local tri_aux = tri_aux(n - 2, { acc[1], acc[2] })\n \
    \     return tri_aux\n    end\n  end\n  return tri_aux(n, { 1 })\nend", "  local\
    \ function tri_aux(n)\n    if n == 1 then\n      return 3\n    elseif n == 2 then\n\
    \      return 1\n    elseif n % 2 == 0 then\n      return tri_aux(n - 1) + tri_aux(n\
    \ - 2) + tri_aux(n - 1)\n    else\n      return tri_aux(n - 1) + tri_aux(n - 2)\
    \ + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n - 2)\n    end\n\
    \  end\n  return tri_aux(n)\nend", "  local function tri_aux(n, tri_aux, tri_sum)\n\
    \    if n == 0 then\n      return tri_sum\n    end\n    tri_aux(n - 1, tri_aux,\
    \ tri_sum + tri_aux(n - 1, tri_aux, tri_sum))\n  end\n  return tri_aux(n, {},\
    \ 0)\nend", "  local function tri_aux(n)\n    if n == 0 then\n      return 0\n\
    \    end\n    if n == 1 then\n      return 1\n    end\n    return tri_aux(n -\
    \ 1) + tri_aux(n - 2) + tri_aux(n - 3)\n  end\n  return tri_aux(n)\nend", "  local\
    \ function tri_aux(n, a, b)\n    if n == 0 then\n      return a\n    end\n   \
    \ local c = a + b\n    a = b\n    b = c\n    return tri_aux(n - 1, b, c)\n  end\n\
    \  return tri_aux(n, 0, 1)\nend", "  local function tri_aux(n, a, b, c)\n    if\
    \ n == 0 then\n      return a\n    end\n    if n == 1 then\n      return b\n \
    \   end\n    return tri_aux(n - 1, a + b + c, b, c)\n  end\n  return tri_aux(n,\
    \ 0, 0, 1)\nend", "  -- Base case\n  if n == 1 then\n    return [3]\n  end\n \
    \ -- Recursive case\n  local tri_result = tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \  return tri_result\nend", "  local function tri_aux(n, acc)\n    if n == 1 then\n\
    \      return acc\n    else\n      return tri_aux(n - 1, acc)\n    end\n  end\n\
    \  return tri_aux(n, {})\nend", "  local function tri_aux(n)\n    if n == 1 then\n\
    \      return 3\n    elseif n == 2 then\n      return 1\n    elseif n % 2 == 0\
    \ then\n      return tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1)\n    else\n\
    \      return tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n - 2)\
    \ + tri_aux(n - 3)\n    end\n  end\n  return tri_aux(n)\nend", "  local function\
    \ tri_aux(n, a, b, c)\n    if n == 0 then\n      return a\n    end\n    if n ==\
    \ 1 then\n      return b\n    end\n    return tri_aux(n - 1, a + b + c, b, c)\n\
    \  end\n  return tri_aux(n, 0, 0, 1)\nend", "    local function tri_aux(n, acc)\n\
    \        if n == 1 then\n            return acc\n        elseif n == 2 then\n\
    \            return tri_aux(n - 1, acc)\n        else\n            return tri_aux(n\
    \ - 1, tri_aux(n - 2, tri_aux(n - 1, acc) + tri(n - 2)))\n        end\n    end\n\
    \    return tri_aux(n, 0)\nend", "  local function tri_aux(n, acc)\n    if n ==\
    \ 0 then\n      return acc\n    end\n    local tri_aux = tri_aux(n - 1, tri_aux(n\
    \ - 1, acc))\n    return tri_aux + tri_aux\n  end\n  return tri_aux(n, 3)\nend",
  "  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n\
    \    local tri_aux_1 = tri_aux(n - 1, acc)\n    local tri_aux_2 = tri_aux(n -\
    \ 2, tri_aux_1 + tri_aux_1)\n    return tri_aux_2 + tri_aux_1\n  end\n  return\
    \ tri_aux(n, 3)\nend", "  local function tri_aux(n, acc)\n    if n == 1 then\n\
    \      return acc\n    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1)\
    \ + tri(n - 2))\n    if n % 2 == 0 then\n      return tri_aux\n    else\n    \
    \  return tri_aux + tri(n - 1)\n    end\n  end\n  return tri_aux(n, 3)\nend",
  "\tlocal function tri_aux(n, acc)\n\t\tif n == 1 then\n\t\t\ttable.insert(acc, 1)\n\
    \t\telseif n == 2 then\n\t\t\ttable.insert(acc, 2)\n\t\telse\n\t\t\tlocal tri_aux_1\
    \ = tri_aux(n - 1, acc)\n\t\t\tlocal tri_aux_2 = tri_aux(n - 2, tri_aux_1 + tri_aux_1)\n\
    \t\t\ttable.insert(acc, tri_aux_1 + tri_aux_2)\n\t\tend\n\tend\n\ttri_aux(n, {})\n\
    end", "    local function tri_aux(n, acc)\n        if n == 0 then\n          \
    \  return acc\n        elseif n == 1 then\n            return acc\n        else\n\
    \            return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, acc) + acc))\n\
    \        end\n    end\n    return tri_aux(n, 3)\nend", "  local function tri_aux(n,\
    \ acc)\n    if n == 0 then\n      return acc\n    end\n    local tri_aux = tri_aux(n\
    \ - 1, acc + tri(n - 1) + tri(n - 2))\n    if n % 2 == 1 then\n      tri_aux =\
    \ tri_aux + tri(n - 1)\n    end\n    return tri_aux\n  end\n  return tri_aux(n,\
    \ 3)\nend", "  local function tri_aux(n, acc)\n    if n == 0 then\n      return\
    \ acc\n    end\n    local tri_aux = tri_aux(n - 1, acc)\n    tri_aux = tri_aux\
    \ + tri_aux\n    tri_aux = tri_aux + tri_aux\n    return tri_aux\n  end\n  return\
    \ tri_aux(n, 3)\nend", "  -- Base case\n  if n == 1 then\n    return 3\n  -- Recursive\
    \ case\n  elseif n % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)\n  else\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4)\n  end\nend", "  -- Base case\n  if n == 1 then\n    return 3\n  -- Recursive\
    \ case\n  elseif n % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)\n  else\n    return tri(n - 1) + tri(n - 2) + tri(n - 1)\n  end\nend", " \
    \ local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n\
    \    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc + acc)\n    return\
    \ acc\n  end\n  return tri_aux(n, 3)\nend", "  local function tri_aux(n, acc)\n\
    \    if n == 0 then\n      return acc\n    elseif n == 1 then\n      return acc\n\
    \    elseif n % 2 == 0 then\n      return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n\
    \ - 1, acc)))\n    else\n      return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n\
    \ - 1, tri_aux(n - 2, acc)))))\n    end\n  end\n  return tri_aux(n, {})\nend",
  "  local function tri_aux(n, a, b, c)\n    if n == 0 then\n      return a\n    elseif\
    \ n == 1 then\n      return b\n    else\n      return tri_aux(n - 1, b, a + c,\
    \ c)\n    end\n  end\n  return tri_aux(n, 0, 0, 1)\nend", "  local function tri_aux(n,\
    \ tri_aux, tri_sum)\n    if n == 0 then\n      tri_aux[1] = tri_sum\n      return\n\
    \    end\n    tri_aux[1] = tri_sum + n / 2\n    tri_aux[2] = tri_aux[1]\n    tri_aux[3]\
    \ = tri_aux[1] + tri_aux[2]\n    tri_aux[4] = tri_aux[3] + tri_aux[2]\n    tri_aux[5]\
    \ = tri_aux[3] + tri_aux[4]\n    tri_aux[6] = tri_aux[5] + tri_aux[4]\n    tri_aux[7]\
    \ = tri_aux[6] + tri_aux[4]\n    tri_aux[8] = tri_aux[7] + tri_aux[4]\n    tri_aux[9]\
    \ = tri_aux[8] + tri_aux[4]\n    tri_aux[10] = tri_aux[9] + tri_aux[4]\n    tri_aux[11]\
    \ = tri_aux[10] + tri_aux[4]\n    tri_aux[12] = tri_aux[11] + tri_aux[4]\n   \
    \ tri_aux[13] = tri_aux[12] + tri_aux[4]\n    tri_aux[14] = tri_aux[13] + tri_aux[4]\n\
    \    tri_aux[15] = tri_aux[14] + tri_aux[4]\n    tri_aux[16] = tri_aux[15] + tri_aux[4]\n\
    \    tri_aux[17] = tri_aux[16] + tri_aux[4]\n    tri_aux[18] = tri_aux[17] + tri_aux[4]\n\
    \    tri_aux[19] = tri_aux[18] + tri_aux[4]\n    tri_aux[20] = tri_aux[19] + tri_aux[4]\n\
    \    tri_aux[21] = tri_aux[20] + tri_aux[4]\n    tri_aux[22] = tri_aux[21] + tri_aux[4]\n\
    \    tri_aux[23] = tri_aux[22] + tri_aux[4]\n    tri_aux[24] = tri_aux[23] + tri_aux[4]\n\
    \    tri_aux[25] = tri_aux[24] + tri_aux[4]\n    tri_aux[26] = tri_aux[25] + tri_aux[4]\n\
    \    tri_aux[27] = tri_aux[26] + tri_aux[4]\n    tri_aux[28] = tri_aux[27] + tri_aux[4]\n\
    \    tri_aux[29] = tri", "  local function tri_aux(n, acc)\n    if n == 0 then\n\
    \      return acc\n    end\n    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n\
    \ - 2, acc + acc)\n    return acc\n  end\n  return tri_aux(n, 3)\nend", "  local\
    \ function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n  \
    \  local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n    if n % 2\
    \ == 0 then\n      return tri_aux\n    else\n      return tri_aux + tri(n - 1)\n\
    \    end\n  end\n  return tri_aux(n, 3)\nend", "\tlocal function tri_aux(n, acc)\n\
    \t\tif n == 0 then\n\t\t\treturn acc\n\t\telseif n == 1 then\n\t\t\treturn {acc[1],\
    \ acc[2]}\n\t\telse\n\t\t\tlocal a = tri_aux(n - 1, {acc[1], acc[2]})\n\t\t\t\
    local b = tri_aux(n - 2, {acc[2], acc[3]})\n\t\t\treturn {a[1], a[2], b[1], a[3],\
    \ b[2], b[3]}\n\t\tend\n\tend\n\treturn tri_aux(n, {})\nend", "  -- Base case\n\
    \  if n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    -- Recursive case\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  end\n\
    end", "  local function tri_aux(n, acc)\n    if n == 1 then\n      return acc\n\
    \    elseif n == 2 then\n      return tri_aux(n - 1, acc)\n    elseif n % 2 ==\
    \ 0 then\n      return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, acc) + acc))\n\
    \    else\n      return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, acc) + tri(n\
    \ - 2) + tri(n - 1)))\n    end\n  end\n  return tri_aux(n, 0)\nend", "  local\
    \ function tri_aux(n, a, b, c)\n    if n == 0 then\n      return a\n    elseif\
    \ n == 1 then\n      return b\n    else\n      return tri_aux(n - 1, b, a + c,\
    \ c)\n    end\n  end\n  return tri_aux(n, 0, 0, 1)\nend", "  local function tri_aux(n)\n\
    \    if n == 1 then\n      return 3\n    elseif n == 2 then\n      return 1 +\
    \ n / 2\n    elseif n % 2 == 0 then\n      return tri_aux(n - 1) + tri_aux(n -\
    \ 2) + tri(n / 2)\n    else\n      return tri_aux(n - 1) + tri_aux(n - 2) + tri(n\
    \ + 1)\n    end\n  end\n  return tri_aux(n)\nend", "  local function tri_aux(n,\
    \ acc)\n    if n == 1 then\n      table.insert(acc, 1)\n    else\n      table.insert(acc,\
    \ tri_aux(n - 1, acc))\n      table.insert(acc, tri_aux(n - 2, acc))\n    end\n\
    \    return acc\n  end\n  return tri_aux(n, {})\nend", "  local function tri_aux(n,\
    \ acc)\n    if n == 1 then\n      return acc\n    end\n    local tri_aux = tri_aux(n\
    \ - 1, acc + tri(n - 1) + tri(n - 2))\n    if n % 2 == 1 then\n      tri_aux =\
    \ tri_aux + tri(n - 1) + tri(n - 2)\n    end\n    return tri_aux\n  end\n  return\
    \ tri_aux(n, 3)\nend", "    local function tri_aux(n, acc)\n        if n == 1\
    \ then\n            table.insert(acc, 1)\n        else\n            local tri_aux_1\
    \ = tri_aux(n - 1, acc)\n            local tri_aux_2 = tri_aux(n - 2, tri_aux_1\
    \ + tri_aux_1)\n            table.insert(acc, tri_aux_1 + tri_aux_2)\n       \
    \ end\n        return acc\n    end\n    return tri_aux(n, {})\nend", "  -- Base\
    \ case\n  if n == 0 then\n    return 0\n  -- Even case\n  elseif n % 2 == 0 then\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  -- Odd case\n  else\n    return\
    \ tri(n - 1) + tri(n - 2)\n  end\nend", "  local function tri_aux(n, acc)\n  \
    \  if n == 0 then\n      return acc\n    end\n    local tri_aux = tri_aux(n -\
    \ 1, acc)\n    tri_aux = tri_aux + tri_aux\n    tri_aux = tri_aux + tri_aux\n\
    \    return tri_aux\n  end\n  return tri_aux(n, 3)\nend", "  local function tri_aux(n)\n\
    \    if n == 1 then\n      return 3\n    elseif n == 2 then\n      return 1 +\
    \ n / 2\n    else\n      return tri_aux(n - 1) + tri_aux(n - 2) + tri(n + 1)\n\
    \    end\n  end\n  return tri_aux(n)\nend", "  local function tri_aux(n, acc)\n\
    \    if n == 1 then\n      return acc\n    end\n    local tri_aux = tri_aux(n\
    \ - 1, tri_aux(n - 1, acc))\n    if n % 2 == 0 then\n      return tri_aux + tri_aux\n\
    \    else\n      return tri_aux + tri_aux + tri_aux\n    end\n  end\n  return\
    \ tri_aux(n, 3)\nend", "  if n == 0 then\n    return nil\n  elseif n == 1 then\n\
    \    return [3]\n  else\n    local a = tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    return a\n  end\nend", "  local function tri_aux(n, acc)\n    if n == 0 then\n\
    \      return acc\n    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1)\
    \ + tri(n - 2))\n    if n % 2 == 1 then\n      tri_aux = tri_aux + tri(n - 1)\n\
    \    end\n    return tri_aux\n  end\n  return tri_aux(n, 3)\nend", "  if n ==\
    \ 0 then\n    return nil\n  elseif n == 1 then\n    return [3]\n  elseif n % 2\
    \ == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  else\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  end\nend", "  local function\
    \ tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n    acc = tri_aux(n\
    \ - 1, acc)\n    acc = tri_aux(n - 2, acc + acc)\n    return acc\n  end\n  return\
    \ tri_aux(n, 3)\nend", "  local function tri_aux(n, a, b)\n    if n == 0 then\n\
    \      return a\n    end\n    if n == 1 then\n      return b\n    end\n    return\
    \ tri_aux(n - 1, a + b, b)\n  end\n  return tri_aux(n, 3, 1)\nend", "  local function\
    \ tri_aux(n, acc)\n    if n == 1 then\n      return acc\n    end\n    local tri_aux\
    \ = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n    if n % 2 == 1 then\n  \
    \    tri_aux = tri_aux + tri(n - 1) + tri(n - 2)\n    end\n    return tri_aux\n\
    \  end\n  return tri_aux(n, 3)\nend", "  local function tri_aux(n, acc)\n    if\
    \ n == 0 then\n      return acc\n    end\n    acc = tri_aux(n - 1, acc)\n    acc\
    \ = tri_aux(n - 2, acc + acc)\n    return acc\n  end\n  return tri_aux(n, 3)\n\
    end", "  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    elseif n == 1 then\n      return acc\n    else\n      return tri_aux(n -\
    \ 1, acc) + tri_aux(n - 2, acc + acc)\n    end\n  end\n  return tri_aux(n, {})\n\
    end", "  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, tri_aux(n - 1, acc))\n    if n %\
    \ 2 == 0 then\n      return tri_aux + tri_aux\n    else\n      return tri_aux\
    \ + tri_aux + tri_aux\n    end\n  end\n  return tri_aux(n, 3)\nend", "  if n ==\
    \ 1 then\n    return [3]\n  elseif n == 2 then\n    return [1, 3]\n  elseif n\
    \ % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  else\n   \
    \ return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  end\nend", "  local\
    \ function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n  \
    \  local tri_aux = tri_aux(n - 1, acc)\n    tri_aux = tri_aux + tri_aux\n    tri_aux\
    \ = tri_aux + tri_aux\n    return tri_aux\n  end\n  return tri_aux(n, 3)\nend",
  "  local function tri_aux(n, tri_aux, tri_sum)\n    if n == 0 then\n      return\
    \ tri_sum\n    elseif n == 1 then\n      return tri_aux(n - 1, tri_sum, tri_sum\
    \ + tri_aux(n - 1, tri_sum, tri_sum))\n    else\n      return tri_aux(n - 1, tri_sum\
    \ + tri_aux(n - 2, tri_sum, tri_sum), tri_sum)\n    end\n  end\n  return tri_aux(n,\
    \ 0, 0, 0)\nend", "  -- Base case\n  if n == 1 then\n    return 3\n  -- Recursive\
    \ case\n  elseif n % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)\n  else\n    return tri(n - 1) + tri(n - 2) + tri(n - 1)\n  end\nend", " \
    \ local function tri_aux(n, a, b, c)\n    if n == 0 then\n      return a\n   \
    \ elseif n == 1 then\n      return b\n    else\n      return tri_aux(n - 1, b,\
    \ a + b, b + c)\n    end\n  end\n  return tri_aux(n, 0, 0, 1)\nend", "    local\
    \ function tri_aux(n, a, b)\n        if n == 0 then\n            return a\n  \
    \      elseif n == 1 then\n            return b\n        else\n            return\
    \ tri_aux(n - 1, a + b, b)\n        end\n    end\n    return tri_aux(n, 3, 1)\n\
    end", "    local function tri_aux(n, acc)\n        if n == 0 then\n          \
    \  return acc\n        elseif n == 1 then\n            return acc\n        elseif\
    \ n % 2 == 0 then\n            return tri_aux(n - 1, tri_aux(n - 1, acc))\n  \
    \      else\n            return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, tri_aux(n\
    \ - 2, acc)))))\n        end\n    end\n    return tri_aux(n, {})\nend", "  local\
    \ function tri_aux(n, a, b)\n    if n == 0 then\n      return a\n    elseif n\
    \ == 1 then\n      return b\n    else\n      return tri_aux(n - 1, b, a + b)\n\
    \    end\n  end\n  return tri_aux(n, 3, 1)\nend", "    local function tri_aux(n,\
    \ a, b)\n        if n == 0 then\n            return a\n        end\n        if\
    \ n == 1 then\n            return b\n        end\n        return tri_aux(n - 1,\
    \ a + b, b)\n    end\n    return tri_aux(n, 3, 1)\nend", "  local function tri_aux(n,\
    \ acc)\n    if n == 0 then\n      return acc\n    end\n    local tri_aux = tri_aux(n\
    \ - 1, tri_aux(n - 1, acc))\n    if n % 2 == 0 then\n      return tri_aux + tri_aux\n\
    \    else\n      return tri_aux + tri_aux + tri_aux\n    end\n  end\n  return\
    \ tri_aux(n, 3)\nend", "  local function tri_aux(n, tri_aux)\n    if n == 0 then\n\
    \      return 0\n    end\n    if n == 1 then\n      return 1\n    end\n    if\
    \ n % 2 == 0 then\n      return tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n\
    \ - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n -\
    \ 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1,\
    \ tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n\
    \ - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n -\
    \ 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1,\
    \ tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n\
    \ - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n -\
    \ 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1,\
    \ tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n\
    \ - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n -\
    \ 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1,\
    \ tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n\
    \ - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n -\
    \ 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1,\
    \ tri_aux(n - ", "  local function tri_aux(n, acc)\n    if n == 0 then\n     \
    \ return acc\n    end\n    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2,\
    \ acc + acc)\n    acc = tri_aux(n - 3, acc + acc)\n    return acc\n  end\n  return\
    \ tri_aux(n, 3)\nend", "  local function tri_aux(n, acc)\n    if n == 1 then\n\
    \      table.insert(acc, 1)\n    else\n      table.insert(acc, tri_aux(n - 1,\
    \ acc))\n      table.insert(acc, tri_aux(n - 2, acc))\n    end\n    return acc\n\
    \  end\n  return tri_aux(n, {})\nend", "  local function tri_aux(n, acc)\n   \
    \ if n == 0 then\n      return acc\n    end\n    acc = tri_aux(n - 1, acc)\n \
    \   acc = tri_aux(n - 2, acc + acc)\n    acc = tri_aux(n - 3, acc + acc)\n   \
    \ return acc\n  end\n  return tri_aux(n, 3)\nend", "  local function tri_aux(n)\n\
    \    if n == 1 then\n      return 3\n    elseif n % 2 == 0 then\n      return\
    \ tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1)\n    else\n      return tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n\
    \ - 2)\n    end\n  end\n  return tri_aux(n)\nend", "    local function tri_aux(n)\n\
    \        if n == 1 then\n            return 3\n        end\n        if n % 2 ==\
    \ 0 then\n            return tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1)\n\
    \        else\n            return tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n\
    \ - 1) + tri_aux(n - 2)\n        end\n    end\n    return tri_aux(n)\nend", " \
    \ -- Base case\n  if n == 1 then\n    return [3]\n  -- Recursive case\n  elseif\
    \ n == 2 then\n    return [1]\n  -- Odd case\n  elseif n % 2 == 0 then\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  -- Even case\n  else\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n  end\n\
    end", "    local function tri_aux(n, acc)\n        if n == 0 then\n          \
    \  return acc\n        elseif n == 1 then\n            return acc\n        else\n\
    \            return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, acc) + acc))\n\
    \        end\n    end\n    return tri_aux(n, 3)\nend", "  local function tri_aux(n,\
    \ acc)\n    if n == 0 then\n      return acc\n    end\n    local tri_aux_1 = tri_aux(n\
    \ - 1, acc)\n    local tri_aux_2 = tri_aux(n - 2, tri_aux_1 + tri_aux_1)\n   \
    \ return tri_aux_2 + tri_aux_1\n  end\n  return tri_aux(n, 3)\nend", "  if n <\
    \ 2 then return n end\n  return tri(n - 1) + tri(n - 2) + tri(n + 1)\nend", " \
    \ local function tri_aux(n)\n    if n == 1 then\n      return 3\n    elseif n\
    \ == 2 then\n      return 1 + n / 2\n    elseif n % 2 == 0 then\n      return\
    \ tri_aux(n - 1) + tri_aux(n - 2) + tri(n / 2)\n    else\n      return tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri(n / 2) + tri(n / 2)\n    end\n  end\n  return tri_aux(n)\n\
    end", "  local function tri_aux(n, a, b)\n    if n == 0 then\n      return a\n\
    \    end\n    if n == 1 then\n      return b\n    end\n    return tri_aux(n -\
    \ 1, a + b, b)\n  end\n  return tri_aux(n, 3, 1)\nend", "  local result = {n}\n\
    \  if n <= 1 then return result end\n  local tri1 = tri(n - 1)\n  local tri2 =\
    \ tri(n - 2)\n  local tri3 = tri(n - 3)\n  table.insert(result, tri1)\n  table.insert(result,\
    \ tri2)\n  table.insert(result, tri3)\n  return result\nend", "\t-- Base case\n\
    \tif n == 1 then\n\t\treturn {3}\n\tend\n\t-- Recursive case\n\tlocal result =\
    \ {}\n\tlocal i = 1\n\twhile i <= n do\n\t\ttable.insert(result, i)\n\t\ti = i\
    \ + 2\n\tend\n\treturn result\nend", "  local function tri_aux(n, a, b, c)\n \
    \   if n == 0 then\n      return a\n    elseif n == 1 then\n      return b\n \
    \   else\n      return tri_aux(n - 1, b, a + c, c)\n    end\n  end\n  return tri_aux(n,\
    \ 0, 0, 1)\nend", "  local function tri_aux(n, acc)\n    if n == 1 then\n    \
    \  return acc\n    elseif n == 2 then\n      return tri_aux(n - 1, acc)\n    elseif\
    \ n % 2 == 0 then\n      return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, acc)))\n\
    \    else\n      return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, tri_aux(n\
    \ - 2, acc)))))\n    end\n  end\n  return tri_aux(n, {})\nend", "  local function\
    \ tri_aux(n)\n    if n == 1 then\n      return 3\n    elseif n == 0 then\n   \
    \   return 0\n    elseif n % 2 == 0 then\n      return tri_aux(n - 1) + tri_aux(n\
    \ - 2) + tri_aux(n - 1)\n    else\n      return tri_aux(n - 1) + tri_aux(n - 2)\
    \ + tri_aux(n - 1) + tri_aux(n - 2)\n    end\n  end\n  return tri_aux(n)\nend",
  "  local function tri_aux(n, a, b, c)\n    if n == 0 then\n      return a\n    elseif\
    \ n == 1 then\n      return b\n    else\n      return tri_aux(n - 1, a + b + c,\
    \ b, c)\n    end\n  end\n  return tri_aux(n, 0, 0, 1)\nend", "  local function\
    \ tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    elseif n == 1 then\n\
    \      return acc\n    elseif n % 2 == 0 then\n      return tri_aux(n - 1, acc)\n\
    \    else\n      return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, acc) + acc))\n\
    \    end\n  end\n  return tri_aux(n, 0)\nend", "  local function tri_aux(n)\n\
    \    if n == 1 then\n      return 3\n    elseif n == 2 then\n      return 1\n\
    \    elseif n % 2 == 0 then\n      return tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n\
    \ - 1)\n    else\n      return tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1)\
    \ + tri_aux(n - 2) + tri_aux(n - 1)\n    end\n  end\n  return tri_aux(n)\nend",
  "  -- Base case\n  if n == 1 then\n    return 3\n  elseif n == 2 then\n    return\
    \ 1\n  else\n    -- Recursive case\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n  end\nend", "  -- Base case\n  if n == 1 then\n    return 3\n  -- Recursive\
    \ case\n  elseif n % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)\n  else\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3)\n \
    \ end\nend", "  if n == 0 then\n    return nil\n  elseif n == 1 then\n    return\
    \ [3]\n  else\n    local a, b, c = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    return\
    \ a + b + c\n  end\nend", "  local function tri_aux(n, acc)\n    if n == 0 then\n\
    \      return acc\n    end\n    local tri_aux = tri_aux(n - 1, tri_aux(n - 1,\
    \ acc))\n    tri_aux = tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, tri_aux(n\
    \ - 2, acc))))\n    return tri_aux\n  end\n  return tri_aux(n, {})\nend", "  local\
    \ function tri_aux(n, acc)\n    if n == 1 then\n      return acc\n    elseif n\
    \ == 2 then\n      return tri_aux(n - 1, acc)\n    elseif n % 2 == 0 then\n  \
    \    return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, acc) + acc))\n    else\n\
    \      return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, acc) + tri(n - 2) +\
    \ tri(n - 1)))\n    end\n  end\n  return tri_aux(n, 0)\nend", "  local function\
    \ tri_aux(n, acc)\n    if n == 1 then\n      table.insert(acc, 1)\n    elseif\
    \ n == 2 then\n      table.insert(acc, 3)\n    else\n      table.insert(acc, tri_aux(n\
    \ - 1, acc))\n      table.insert(acc, tri_aux(n - 2, acc))\n    end\n    return\
    \ acc\n  end\n  return tri_aux(n, {})\nend", "  local function tri_aux(n, tri_1,\
    \ tri_2)\n    if n == 0 then\n      return tri_1\n    elseif n == 1 then\n   \
    \   return tri_2\n    else\n      return tri_1 + tri_2 + tri_aux(n - 1, tri_1,\
    \ tri_2)\n    end\n  end\n  return tri_aux(n, 3, 1)\nend", "  local function tri_aux(n,\
    \ tri_aux, tri_sum)\n    if n == 0 then\n      return tri_sum\n    end\n    tri_aux\
    \ = (tri_aux[1] or 0) + n\n    if n % 2 == 0 then\n      tri_sum = tri_sum + tri_aux\n\
    \    end\n    return tri_aux\n  end\n  return tri_aux(n, {}, 0)\nend", "  local\
    \ function tri_aux(n, acc)\n    if n == 1 then\n      return acc\n    end\n  \
    \  local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n    if n % 2\
    \ == 1 then\n      return tri_aux\n    end\n    return tri_aux(n - 1, tri_aux(n\
    \ - 2, acc))\n  end\n  return tri_aux(n, 0)\nend", "    local function tri_aux(n)\n\
    \        if n == 1 then\n            return 3\n        elseif n == 2 then\n  \
    \          return 1\n        elseif n == 3 then\n            return 2\n      \
    \  else\n            return tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 3)\n\
    \        end\n    end\n    return tri_aux(n)\nend", "  local function tri_aux(n,\
    \ acc)\n    if n == 1 then\n      table.insert(acc, 1)\n    else\n      table.insert(acc,\
    \ tri_aux(n - 1, acc))\n      table.insert(acc, tri_aux(n - 2, acc))\n    end\n\
    \    return acc\n  end\n  return tri_aux(n, {})\nend", "  local function tri_aux(n,\
    \ acc)\n    if n == 0 then\n      return acc\n    end\n    local tri_aux = tri_aux(n\
    \ - 1, acc + tri(n - 1) + tri(n - 2))\n    if n % 2 == 1 then\n      tri_aux =\
    \ tri_aux + tri(n - 1) + tri(n - 2)\n    end\n    return tri_aux\n  end\n  return\
    \ tri_aux(n, 3)\nend", "    local function tri_aux(n, a, b, c)\n        if n ==\
    \ 0 then\n            return a\n        end\n        if n == 1 then\n        \
    \    return b\n        end\n        return tri_aux(n - 1, b, a + c, c)\n    end\n\
    \    return tri_aux(n, 0, 0, 1)\nend", "    local function tri_aux(n)\n      \
    \  if n == 1 then\n            return 3\n        elseif n == 2 then\n        \
    \    return 1 + n / 2\n        else\n            return tri_aux(n - 1) + tri_aux(n\
    \ - 2) + tri(n + 1)\n        end\n    end\n    return tri_aux(n)\nend", "  local\
    \ result = {1}\n  local i = 1\n  while i <= n do\n    table.insert(result, i)\n\
    \    i = i + 2\n  end\n  return result\nend", "  -- Base case\n  if n == 1 then\n\
    \    return 3\n  else\n    -- Recursive case\n    return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n  end\nend", "  local function tri_aux(n, acc)\n    if n ==\
    \ 0 then\n      return acc\n    elseif n == 1 then\n      return acc\n    else\n\
    \      return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, acc) + acc))\n    end\n\
    \  end\n  return tri_aux(n, 0)\nend", "  local function tri_aux(n, acc)\n    if\
    \ n == 0 then\n      return acc\n    end\n    acc = tri_aux(n - 1, acc)\n    acc\
    \ = tri_aux(n - 2, acc + acc)\n    return acc\n  end\n  return tri_aux(n, 3)\n\
    end", "  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n\
    \    if n % 2 == 0 then\n      return tri_aux\n    else\n      return tri_aux\
    \ + tri_aux\n    end\n  end\n  return tri_aux(n, 3)\nend", "  if n == 0 then\n\
    \    return nil\n  elseif n == 1 then\n    return [3]\n  elseif n % 2 == 0 then\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  else\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  end\nend", "    local\
    \ function tri_aux(n, acc)\n        if n == 1 then\n            table.insert(acc,\
    \ 1)\n        else\n            tri_aux(n - 1, acc)\n            tri_aux(n - 2,\
    \ acc)\n            table.insert(acc, 1 + n / 2)\n        end\n    end\n    tri_aux(n,\
    \ {})\nend", "  local function tri_aux(n, a, b, c)\n    if n == 0 then\n     \
    \ return a\n    elseif n == 1 then\n      return b\n    else\n      return tri_aux(n\
    \ - 1, b, a + c, c)\n    end\n  end\n  return tri_aux(n, 0, 0, 1)\nend", "  local\
    \ function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n  \
    \  acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc + acc)\n    return\
    \ acc\n  end\n  return tri_aux(n, 3)\nend", "  local function tri_aux(n, acc)\n\
    \    if n == 1 then\n      table.insert(acc, 1)\n      return acc\n    end\n \
    \   table.insert(acc, tri_aux(n - 1, acc))\n    table.insert(acc, tri_aux(n -\
    \ 2, acc))\n    table.insert(acc, tri_aux(n - 3, acc))\n    return acc\n  end\n\
    \  return tri_aux(n, {})\nend", "  local result = {1,3,5}\n  if n <= 1 then return\
    \ result[n] end\n  if n % 2 == 0 then return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) end\n  return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\nend", " \
    \ -- Base case\n  if n == 0 then\n    return 0\n  -- Even case\n  elseif n % 2\
    \ == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  -- Odd case\n\
    \  else\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4)\n  end\nend", "  local function tri_aux(n)\n    if n == 0 then\n      return\
    \ 0\n    elseif n == 1 then\n      return 1\n    else\n      return tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri_aux(n - 3)\n    end\n  end\n  return tri_aux(n)\n\
    end", "  local function tri_aux(n, a, b)\n    if n == 0 then\n      return a\n\
    \    elseif n == 1 then\n      return b\n    else\n      return tri_aux(n - 1,\
    \ a + b, b)\n    end\n  end\n  return tri_aux(n, 3, 1)\nend", "  local function\
    \ tri_aux(n)\n    if n == 1 then\n      return 3\n    elseif n == 2 then\n   \
    \   return 1 + n / 2\n    else\n      return tri_aux(n - 1) + tri_aux(n - 2) +\
    \ tri(n + 1)\n    end\n  end\n  return tri_aux(n)\nend", "  local function tri_aux(n,\
    \ acc)\n    if n == 0 then\n      return acc\n    end\n    acc = tri_aux(n - 1,\
    \ acc)\n    acc = tri_aux(n - 2, acc + acc)\n    return acc\n  end\n  return tri_aux(n,\
    \ 3)\nend", "  -- Base case\n  if n == 0 then\n    return 0\n  end\n  -- Recursive\
    \ case\n  if n % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \  else\n    return tri(n - 1) + tri(n - 2)\n  end\nend", "  local function tri_aux(n,\
    \ acc)\n    if n == 0 then\n      return acc\n    end\n    \n    local tri_aux\
    \ = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n    \n    if n % 2 == 1 then\n\
    \      tri_aux = tri_aux + tri(n - 1) + tri(n - 2)\n    end\n    \n    return\
    \ tri_aux\n  end\n  \n  return tri_aux(n, 3)\nend", "  local function tri_aux(n)\n\
    \    if n == 1 then\n      return 3\n    elseif n == 2 then\n      return 1 +\
    \ n / 2\n    elseif n % 2 == 0 then\n      return tri_aux(n - 1) + tri_aux(n -\
    \ 2) + tri(n + 1)\n    else\n      return tri_aux(n - 1) + tri_aux(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n    end\n  end\n  return tri_aux(n)\nend", "  local function\
    \ tri_aux(n)\n    if n == 1 then\n      return 3\n    elseif n == 2 then\n   \
    \   return 1\n    elseif n % 2 == 0 then\n      return tri_aux(n - 1) + tri_aux(n\
    \ - 2) + tri_aux(n - 1)\n    else\n      return tri_aux(n - 1) + tri_aux(n - 2)\
    \ + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 3)\n    end\n  end\n  return\
    \ tri_aux(n)\nend", "  local function tri_aux(n, acc)\n    if n == 0 then\n  \
    \    return acc\n    end\n    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n -\
    \ 2, acc + acc)\n    return acc\n  end\n  return tri_aux(n, 3)\nend", "\tlocal\
    \ function tri_aux(n, sum)\n\t\tif n == 1 then\n\t\t\tsum[1] = 3\n\t\telse\n\t\
    \t\tsum[1] = sum[1] + n / 2\n\t\t\tif n % 2 == 0 then\n\t\t\t\tsum[2] = sum[1]\
    \ + sum[2]\n\t\t\telse\n\t\t\t\tsum[2] = sum[1] + sum[2] + sum[3]\n\t\t\tend\n\
    \t\tend\n\t\treturn sum\n\tend\n\tlocal sum = {}\n\tsum[1] = n + 1\n\treturn tri_aux(n,\
    \ sum)\nend", "\tlocal function tri_aux(n, a, b)\n\t\tif n == 0 then\n\t\t\treturn\
    \ a\n\t\telseif n == 1 then\n\t\t\treturn b\n\t\telse\n\t\t\treturn tri_aux(n\
    \ - 1, b, a + b)\n\t\tend\n\tend\n\treturn tri_aux(n, 3, 1)\nend", "  local function\
    \ tri_aux(n, a, b)\n    if n == 0 then\n      return a\n    elseif n == 1 then\n\
    \      return b\n    else\n      return tri_aux(n - 1, a + b, a + b)\n    end\n\
    \  end\n  return tri_aux(n, 3, 1)\nend", "  -- Base case\n  if n == 1 then\n \
    \   return [3]\n  -- Recursive case\n  elseif n % 2 == 0 then\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n  -- Odd case\n  else\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  end\nend", "  local function tri_aux(n,\
    \ a, b, c)\n    if n == 0 then\n      return a\n    end\n    if n == 1 then\n\
    \      return b\n    end\n    return tri_aux(n - 1, b, a + c, c)\n  end\n  return\
    \ tri_aux(n, 0, 0, 1)\nend", "  local function tri_aux(n, acc)\n    if n == 0\
    \ then\n      return acc\n    end\n    \n    local tri_aux_1 = tri_aux(n - 1,\
    \ acc + 1)\n    local tri_aux_2 = tri_aux(n - 2, acc + tri_aux_1 + tri_aux_1)\n\
    \    \n    return tri_aux_1 + tri_aux_2 + tri_aux_2\n  end\n  \n  return tri_aux(n,\
    \ 3)\nend", "  local function tri_aux(n, acc)\n    if n == 0 then\n      return\
    \ acc\n    end\n    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc +\
    \ acc)\n    return acc\n  end\n  return tri_aux(n, 3)\nend", "\t-- Base case\n\
    \tif n == 1 then\n\t\treturn 3\n\tend\n\t-- Recursive case\n\treturn tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\nend", "  local function tri_aux(n, acc)\n    if n\
    \ == 0 then\n      return acc\n    end\n    \n    local tri_aux_aux = tri_aux(n\
    \ - 1, acc)\n    \n    if n % 2 == 0 then\n      tri_aux_aux = tri_aux_aux + tri_aux(n\
    \ - 1, tri_aux_aux + tri_aux(n - 2, tri_aux_aux))\n    end\n    \n    return tri_aux_aux\n\
    \  end\n  \n  return tri_aux(n, 3)\nend", "  local function tri_aux(n, a, b, c)\n\
    \    if n == 0 then\n      return a, b, c\n    end\n    local new_a = a + b\n\
    \    local new_b = a + c\n    local new_c = b + c\n    return tri_aux(n - 1, new_a,\
    \ new_b, new_c)\n  end\n  return tri_aux(n, 0, 0, 1)\nend", "\t-- Base case\n\t\
    if n == 1 then\n\t\treturn {3}\n\t-- Odd case\n\telseif n % 2 == 1 then\n\t\t\
    return {tri(n - 1) + tri(n - 2) + tri(n + 1)}\n\t-- Even case\n\telse\n\t\treturn\
    \ {tri(n - 1) + tri(n - 2)}\n\tend\nend", "  local function tri_aux(n)\n    if\
    \ n == 0 then\n      return 0\n    end\n    if n == 1 then\n      return 1\n \
    \   end\n    return tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 3)\n  end\n\
    \  return tri_aux(n)\nend", "  local function tri_aux(n, a, b)\n    if n == 0\
    \ then\n      return a\n    elseif n == 1 then\n      return b\n    else\n   \
    \   return tri_aux(n - 1, b, a + b)\n    end\n  end\n  return tri_aux(n, 3, 1)\n\
    end", "  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\nend", "\t-- Base case\n\tif n == 0 then\n\
    \t\treturn {0, 1, 1}\n\tend\n\t-- Recursive case\n\tlocal a, b, c = tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n\treturn a, b, c\nend", "  local function tri_aux(n,\
    \ a, b)\n    if n == 0 then\n      return a\n    elseif n == 1 then\n      return\
    \ b\n    else\n      return tri_aux(n - 1, b, a + b)\n    end\n  end\n  return\
    \ tri_aux(n, 3, 1)\nend", "  -- Base case\n  if n == 1 then\n    return [3]\n\
    \  -- Recursive case\n  elseif n == 2 then\n    return [1]\n  -- Odd case\n  elseif\
    \ n % 2 == 1 then\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  -- Even\
    \ case\n  else\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) +\
    \ tri(n - 4)\n  end\nend", "  local function tri_aux(n, acc)\n    if n == 0 then\n\
    \      return acc\n    end\n    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n\
    \ - 2, acc + acc)\n    return acc\n  end\n  return tri_aux(n, 3)\nend", "  local\
    \ function tri_aux(n, acc)\n    if n == 1 then\n      return acc\n    end\n  \
    \  local new_acc = tri_aux(n - 1, acc)\n    return tri_aux(n - 1, new_acc)\n \
    \ end\n  return tri_aux(n, 3)\nend", "  local function tri_aux(n)\n    if n ==\
    \ 1 then\n      return 3\n    elseif n == 2 then\n      return 1\n    elseif n\
    \ == 3 then\n      return 2\n    elseif n % 2 == 0 then\n      return tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri_aux(n - 3)\n    else\n      return tri_aux(n - 1)\
    \ + tri_aux(n - 2) + tri_aux(n - 3) + tri_aux(n - 4)\n    end\n  end\n  return\
    \ tri_aux(n)\nend", "  local function tri_aux(n, acc)\n    if n == 0 then\n  \
    \    return acc\n    elseif n == 1 then\n      return acc\n    elseif n % 2 ==\
    \ 0 then\n      return tri_aux(n - 1, tri_aux(n - 1, acc))\n    else\n      return\
    \ tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, tri_aux(n - 2, acc))))\n    end\n\
    \  end\n  return tri_aux(n, {})\nend", "  local function tri_aux(n, acc)\n   \
    \ if n == 0 then\n      return acc\n    end\n    \n    local tri_aux2\n    tri_aux2\
    \ = function(n)\n      local tri_aux3 = function(n)\n        return tri_aux(n\
    \ + 1) + tri_aux(n + 2) + tri_aux(n + 3)\n      end\n      return tri_aux3(n)\n\
    \    end\n    \n    return tri_aux2(n)\n  end\n  \n  return tri_aux(n, {})\nend",
  "  if n < 1 then return nil end\n  if n == 1 then return 3 end\n  if n == 2 then\
    \ return 1 end\n  local a = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  return a\n\
    end", "  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc + acc)\n\
    \    return acc\n  end\n  return tri_aux(n, 3)\nend", "    local function tri_aux(n,\
    \ a, b)\n        if n == 0 then\n            return a\n        end\n        if\
    \ n == 1 then\n            return b\n        end\n        return tri_aux(n - 1,\
    \ a + b, b)\n    end\n    return tri_aux(n, 3, 1)\nend", "  local function tri_aux(n)\n\
    \    if n == 1 then\n      return 3\n    elseif n == 2 then\n      return 1 +\
    \ n / 2\n    elseif n % 2 == 0 then\n      return tri_aux(n - 1) + tri_aux(n -\
    \ 2) + tri(n / 2)\n    else\n      return tri_aux(n - 1) + tri_aux(n - 2) + tri(n\
    \ + 1)\n    end\n  end\n  return tri_aux(n)\nend", "  -- Base case: Tribonacci\
    \ sequence is defined for even and odd numbers.\n  if n <= 1 then\n    return\
    \ [1]\n  else\n    -- Recursive case: Tribonacci sequence is defined for even\
    \ and odd numbers.\n    if n % 2 == 0 then\n      -- Tribonacci sequence is defined\
    \ for even numbers.\n      return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n\
    \      -- Tribonacci sequence is defined for odd numbers.\n      return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n    end\n  end\nend",
  "  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n\
    \    local tri_aux = tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 3, tri_aux(n -\
    \ 1, acc))))\n    return tri_aux\n  end\n  return tri_aux(n, {})\nend", "  local\
    \ function tri_aux(n, a, b, c)\n    if n == 0 then\n      return a\n    end\n\
    \    if n == 1 then\n      return b\n    end\n    return tri_aux(n - 1, b, a +\
    \ b, c + a)\n  end\n  return tri_aux(n, 0, 0, 1)\nend", "  local function tri_aux(n)\n\
    \    if n == 1 then\n      return 3\n    elseif n == 2 then\n      return 1\n\
    \    else\n      return tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 3)\n   \
    \ end\n  end\n  return tri_aux(n)\nend", "\tlocal function tri_aux(n, tri_1, tri_2)\n\
    \t\tif n == 0 then\n\t\t\treturn tri_1, tri_2\n\t\telseif n == 1 then\n\t\t\t\
    return tri_1 + tri_2, tri_1 + tri_2\n\t\telse\n\t\t\treturn tri_aux(n - 1, tri_1\
    \ + tri_2, tri_1 + tri_2 + tri_1)\n\t\tend\n\tend\n\treturn tri_aux(n, 3, 1)\n\
    end", "  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, acc)\n    local tri_aux = tri_aux(n\
    \ - 1, tri_aux + tri_aux + tri_aux)\n    return tri_aux\n  end\n  return tri_aux(n,\
    \ 3)\nend", "  local result = {1}\n  local i = 1\n  while i <= n do\n    table.insert(result,\
    \ i)\n    i = i + 2\n  end\n  return result\nend", "  -- Base case\n  if n ==\
    \ 1 then\n    return [3]\n  -- Recursive case\n  elseif n == 2 then\n    return\
    \ [1]\n  -- Odd case\n  elseif n % 2 == 1 then\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n - 1)\n  -- Even case\n  else\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  end\nend", "  local function tri_aux(n, a, b)\n    if n == 0\
    \ then\n      return a\n    end\n    if n == 1 then\n      return b\n    end\n\
    \    return tri_aux(n - 1, b, a + b)\n  end\n  return tri_aux(n, 3, 1)\nend",
  "    local function tri_aux(n, a, b, c)\n        if n == 0 then\n            return\
    \ a, b, c\n        end\n        if n % 2 == 0 then\n            return tri_aux(n\
    \ - 1, b, a + b + c, a)\n        else\n            return tri_aux(n - 1, c, a\
    \ + b + c, b)\n        end\n    end\n    return tri_aux(n, 0, 0, 1)\nend", " \
    \ local function tri_aux(n)\n    if n == 1 then\n      return 3\n    elseif n\
    \ == 2 then\n      return 1 + n / 2\n    elseif n % 2 == 0 then\n      return\
    \ tri_aux(n - 1) + tri_aux(n - 2) + tri(n + 1)\n    else\n      return tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri(n + 1) + tri(n - 1)\n    end\n  end\n  return tri_aux(n)\n\
    end", "  -- Base case\n  if n == 1 then\n    return [3]\n  end", "  -- base case\n\
    \  if n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    -- recursive case\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  end\n\
    end", "  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    elseif n == 1 then\n      return acc\n    elseif n % 2 == 0 then\n      return\
    \ tri_aux(n / 2, tri_aux(n - 1, acc + (n / 2)))\n    else\n      return tri_aux(n\
    \ / 2, tri_aux(n - 1, acc + (n / 2)) + tri_aux(n - 2, acc + (n / 2)))\n    end\n\
    \  end\n  return tri_aux(n, 3)\nend", "    local function tri_aux(n, a, b, c)\n\
    \        if n == 0 then\n            return a\n        elseif n == 1 then\n  \
    \          return b\n        else\n            return tri_aux(n - 1, b, a + c,\
    \ c)\n        end\n    end\n    return tri_aux(n, 0, 0, 1)\nend", "  local function\
    \ tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n    local tri_aux\
    \ = tri_aux(n - 1, tri_aux(n - 1, acc))\n    if n % 2 == 1 then\n      tri_aux\
    \ = tri_aux + tri_aux\n    end\n    return tri_aux\n  end\n  return tri_aux(n,\
    \ 3)\nend", "    local function tri_aux(n)\n        if n == 1 then\n         \
    \   return 3\n        elseif n % 2 == 0 then\n            return tri_aux(n - 1)\
    \ + tri_aux(n - 2) + tri_aux(n - 1)\n        else\n            return tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n\
    \ - 2) + tri_aux(n - 1)\n        end\n    end\n    return tri_aux(n)\nend", " \
    \   local function tri_aux(n, acc)\n        if n == 1 then\n            table.insert(acc,\
    \ 1)\n        else\n            local tri_aux_1 = tri_aux(n - 1, acc)\n      \
    \      local tri_aux_2 = tri_aux(n - 2, acc + tri_aux_1)\n            table.insert(acc,\
    \ tri_aux_1 + tri_aux_2)\n        end\n    end\n    tri_aux(n, {})\nend", "  \
    \  local function tri_aux(n, a, b)\n        if n == 0 then\n            return\
    \ a\n        elseif n == 1 then\n            return b\n        else\n        \
    \    return tri_aux(n - 1, a + b, b)\n        end\n    end\n    return tri_aux(n,\
    \ 3, 1)\nend", "  -- Base case: Tribonacci sequence is defined for n = 0 and n\
    \ = 1.\n  if n == 0 or n == 1 then\n    return 3\n  -- Base case: Tribonacci sequence\
    \ is defined for n = 2.\n  elseif n == 2 then\n    return 1 + n / 2\n  -- Recursive\
    \ case: Tribonacci sequence is defined for n > 2.\n  else\n    return tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n  end\nend", "  -- Base case\n  if n == 0 then\n\
    \    return 0\n  elseif n == 1 then\n    return 1\n  else\n    -- Recursive case\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  end\nend", "  local function\
    \ tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n    local tri_aux\
    \ = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n    if n % 2 == 1 then\n  \
    \    tri_aux = tri_aux + tri(n - 1) + tri(n - 2)\n    end\n    return tri_aux\n\
    \  end\n  return tri_aux(n, 3)\nend", "  local function tri_aux(n, acc)\n    if\
    \ n == 0 then\n      return acc\n    end\n    acc = tri_aux(n - 1, acc)\n    acc\
    \ = tri_aux(n - 2, acc + acc)\n    return acc\n  end\n  return tri_aux(n, 3)\n\
    end", "  local function tri_aux(n)\n    if n == 1 then\n      return 3\n    elseif\
    \ n == 2 then\n      return 1 + n / 2\n    elseif n % 2 == 0 then\n      return\
    \ tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n +1)\n    else\n      return tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri_aux(n +1)\n    end\n  end\n  return tri_aux(n)\n\
    end", "  local function tri_aux(n, acc)\n    if n == 1 then\n      return acc\n\
    \    elseif n == 2 then\n      return tri_aux(n - 1, acc)\n    else\n      return\
    \ tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, acc) + tri(n - 1) + tri(n - 2)))\n\
    \    end\n  end\n  return tri_aux(n, 0)\nend", "\tlocal function tri_aux(n, a,\
    \ b, c)\n\t\tif n == 0 then\n\t\t\treturn a\n\t\telseif n == 1 then\n\t\t\treturn\
    \ b\n\t\telse\n\t\t\treturn tri_aux(n - 1, a + b + c, b, c)\n\t\tend\n\tend\n\t\
    return tri_aux(n, 0, 0, 1)\nend", "    local function tri_aux(n, acc)\n      \
    \  if n == 0 then\n            return acc\n        elseif n == 1 then\n      \
    \      return acc\n        else\n            return tri_aux(n - 1, tri_aux(n -\
    \ 2, acc + tri(n - 1) + tri(n - 2)))\n        end\n    end\n    return tri_aux(n,\
    \ 0)\nend", "  local function tri_aux(n, acc)\n    if n == 1 then\n      return\
    \ acc\n    end\n    local tri_aux_1 = tri_aux(n - 1, acc)\n    local tri_aux_2\
    \ = tri_aux(n - 2, tri_aux_1 + tri_aux_1)\n    return tri_aux_1 + tri_aux_2 +\
    \ tri_aux(n - 1, tri_aux_2 + tri_aux_1)\n  end\n  return tri_aux(n, 3)\nend",
  "  local function tri_aux(n, tri_aux, tri_sum)\n    if n == 0 then\n      tri_aux[1]\
    \ = tri_sum\n      return tri_aux\n    end\n    tri_aux[1] = tri_sum + n / 2\n\
    \    tri_aux[2] = tri_aux[1]\n    tri_aux[3] = tri_aux[1] + tri_aux[2]\n    return\
    \ tri_aux\n  end\n  return tri_aux(n, {}, 0)\nend", "  local result = {n}\n  local\
    \ i = 1\n  while i <= n do\n    local tmp = i\n    i = i + 2\n    table.insert(result,\
    \ tmp)\n  end\n  return result\nend", "    local function tri_aux(n, a, b)\n \
    \       if n == 0 then\n            return a\n        elseif n == 1 then\n   \
    \         return b\n        else\n            return tri_aux(n - 1, a + b, b)\n\
    \        end\n    end\n    return tri_aux(n, 3, 1)\nend", "    local function\
    \ tri_aux(n, acc)\n        if n == 1 then\n            table.insert(acc, 1)\n\
    \        else\n            table.insert(acc, tri_aux(n - 1, acc))\n          \
    \  table.insert(acc, tri_aux(n - 2, acc))\n        end\n        return acc\n \
    \   end\n    return tri_aux(n, {})\nend", "  -- Base case: n is 0 or 1.\n  if\
    \ n == 0 or n == 1 then\n    return 3\n  -- Base case: n is even.\n  elseif n\
    \ % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  -- Base case:\
    \ n is odd.\n  else\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n +\
    \ 1)\n  end\nend", "  local function tri_aux(n, acc)\n    if n == 0 then\n   \
    \   return acc\n    end\n    local tri_aux = tri_aux(n - 1, acc)\n    tri_aux\
    \ = tri_aux + tri_aux\n    if n % 2 == 0 then\n      tri_aux = tri_aux + tri_aux\n\
    \    end\n    return tri_aux\n  end\n  return tri_aux(n, 3)\nend", "    local\
    \ function tri_aux(n, acc)\n        if n == 0 then\n            return acc\n \
    \       end\n        local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n -\
    \ 2))\n        if n % 2 == 1 then\n            tri_aux = tri_aux + tri(n - 1)\
    \ + tri(n - 2)\n        end\n        return tri_aux\n    end\n    return tri_aux(n,\
    \ 3)\nend", "    local function tri_aux(n, a, b)\n        if n == 0 then\n   \
    \         return a\n        elseif n == 1 then\n            return b\n       \
    \ else\n            return tri_aux(n - 1, b, a + b)\n        end\n    end\n  \
    \  return tri_aux(n, 0, 1)\nend", "  local function tri_aux(n, acc)\n    if n\
    \ == 0 then\n      return acc\n    end\n    local tri_aux = tri_aux(n - 1, acc\
    \ + tri(n - 1) + tri(n - 2))\n    if n % 2 == 1 then\n      tri_aux = tri_aux\
    \ + tri(n - 1) + tri(n - 2)\n    end\n    return tri_aux\n  end\n  return tri_aux(n,\
    \ 3)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
