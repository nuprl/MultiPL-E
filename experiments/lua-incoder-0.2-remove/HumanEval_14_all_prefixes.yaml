name: HumanEval_14_all_prefixes
language: lua
prompt: "-- Return list of all prefixes from shortest to longest of the input string\n\
  local function all_prefixes(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
  \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
  \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
  \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local\
    \ i = #string\n  while i do\n    prefixes[#prefixes + 1] = string\n    i = i -\
    \ 1\n  end\n  return prefixes\nend", "    local prefixes = {}\n    for i = 1,\
    \ #string do\n        prefixes[i] = string\n    end\n    local longest_prefix\
    \ = prefixes[1]\n    for i = 2, #prefixes do\n        local prefix = prefixes[i]\n\
    \        local prefix_length = #prefix\n        for j = 1, prefix_length do\n\
    \            local prefix = prefix .. string[j]\n            if prefix ~= longest_prefix\
    \ then\n                longest_prefix = prefix\n            end\n        end\n\
    \    end\n    return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end", "    local prefixes = {}\n    for i = 1, #string do\n        table.insert(prefixes,\
    \ string[i])\n    end\n    return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes,\
    \ string:sub(1, i))\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  local prefix = \"\"\n  for i = 1, #string do\n    prefix = prefix .. string[i]\n\
    \    if prefix:len() > 0 then\n      table.insert(prefixes, prefix)\n    end\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  table.sort(prefixes)\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  local longest, shortest = string.find(string,\
    \ \"^%s*\", \"\")\n  while longest ~= nil do\n    prefixes[#prefixes + 1] = longest\n\
    \    longest, shortest = string.find(string, \"^%s*\", longest)\n  end\n  return\
    \ prefixes\nend", "    local prefixes = {}\n    for i = 1, #string do\n      \
    \  prefixes[#prefixes + 1] = string\n    end\n    return prefixes\nend", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string[i])\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend", " \
    \ local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(i,\
    \ i))\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    local prefix = string\n    for j = 1, i do\n      prefix = prefix ..\
    \ string[j]\n    end\n    table.insert(prefixes, prefix)\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes,\
    \ string:sub(1, i))\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    table.insert(prefixes, string:sub(1, i))\n  end\n\
    \  return prefixes\nend", "    local prefixes = {}\n    for i = 1, #string do\n\
    \        prefixes[#prefixes + 1] = string\n    end\n    return prefixes\nend",
  "  local prefixes = {}\n  local i = #string\n  while i ~= 0 do\n    prefixes[#prefixes\
    \ + 1] = string[i]\n    i = i - 1\n  end\n  return prefixes\nend", "  local prefixes\
    \ = {}\n  for i = 1, #string do\n    prefixes[i] = string\n  end\n  local i =\
    \ #string\n  while i > 0 do\n    local j = i - 1\n    while j > 0 do\n      prefixes[j]\
    \ = prefixes[j] .. string[j]\n      j = j - 1\n    end\n    i = i - 1\n  end\n\
    \  return prefixes\nend", "  local prefixes = {}\n  local longest_prefix = \"\"\
    \n  for i = 1, #string do\n    local prefix = string:sub(i, i)\n    if prefix\
    \ ~= longest_prefix then\n      table.insert(prefixes, prefix)\n    end\n    longest_prefix\
    \ = prefix\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i =\
    \ 1, #string do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  local last_prefix = \"\"\n  for i\
    \ = 1, #string do\n    local prefix = string:sub(i, i)\n    if prefix ~= last_prefix\
    \ then\n      table.insert(prefixes, prefix)\n      last_prefix = prefix\n   \
    \ end\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local index =\
    \ 1\n  while true do\n    local prefix = string\n    for i = 1, index do\n   \
    \   prefix = prefix .. string[i]\n    end\n    table.insert(prefixes, prefix)\n\
    \    index = index + 1\n    if index > #string then\n      break\n    end\n  end\n\
    \  return prefixes\nend", "  local prefixes = {}\n  local longest, shortest\n\
    \  for i = 1, #string do\n    longest, shortest = longest, shortest\n    if string[i]\
    \ ~= string[#string] then\n      longest = string[i]\n    end\n  end\n  for i\
    \ = 1, #string do\n    if string[i] ~= string[#string] then\n      shortest =\
    \ string[i]\n    end\n    prefixes[#prefixes + 1] = string[#string]\n  end\n \
    \ return prefixes, longest, shortest\nend", "    local prefixes = {}\n    for\
    \ i = 1, #string do\n        prefixes[#prefixes + 1] = string\n    end\n    return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes,\
    \ string:sub(i, i))\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  table.sort(prefixes, function(a, b)\n    return #a <\
    \ #b\n  end)\n  return prefixes\nend", "  local prefixes = {}\n  local prefix\n\
    \  for prefix in string.gmatch(\"^([^%s]+)%s*$\", \"%S+\") do\n    table.insert(prefixes,\
    \ prefix)\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1,\
    \ #string do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  local index = 1\n  while true do\n    local prefix\
    \ = string\n    while index <= #string do\n      prefix = prefix .. string[index]\n\
    \      index = index + 1\n    end\n    table.insert(prefixes, prefix)\n    if\
    \ index > #string then\n      break\n    end\n    index = index + 1\n  end\n \
    \ return prefixes\nend", "  local prefixes = {}\n  local len = #string\n  local\
    \ i = 1\n  while i <= len do\n    prefixes[#prefixes + 1] = string[1:i]\n    i\
    \ = i + 1\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1,\
    \ #string do\n    prefixes[i] = string\n  end\n  local longest = #string\n  local\
    \ shortest = #string\n  while shortest > 1 do\n    shortest = #string - 1\n  \
    \  for i = 1, shortest do\n      local prefix = string[1:i]\n      if not prefixes[prefix]\
    \ then\n        prefixes[prefix] = prefix\n      else\n        shortest = shortest\
    \ - 1\n      end\n    end\n  end\n  return prefixes\nend", "    local prefixes\
    \ = {}\n    for i = 1, #string do\n        table.insert(prefixes, string:sub(1,\
    \ i))\n    end\n    return prefixes\nend", "    local prefixes = {}\n    for i\
    \ = 1, #string do\n        table.insert(prefixes, string:sub(1, i))\n    end\n\
    \    return prefixes\nend", "  local prefixes = {}\n  local prefix = \"\"\n  for\
    \ i = 1, #string do\n    prefix = prefix .. string[i]\n    prefixes[#prefixes\
    \ + 1] = prefix\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[i] = string\n\
    \  end\n  local i = 1\n  while i <= #string do\n    local prefix = string\n  \
    \  while i <= #string and string[i] == prefix do\n      i = i + 1\n    end\n \
    \   if i > #string then\n      break\n    end\n    prefixes[#prefixes + 1] = prefix\n\
    \  end\n  return prefixes\nend", "    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string\n    end\n    return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes,\
    \ string:sub(1, i))\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    local prefix\
    \ = string:sub(i, i)\n    table.insert(prefixes, prefix)\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  local i = #string\n  while i do\n    prefixes[#prefixes\
    \ + 1] = string\n    i = i - 1\n  end\n  return prefixes\nend", "  local prefixes\
    \ = {}\n  for i = 1, #string do\n    prefixes[i] = string\n  end\n  local function\
    \ add_prefixes(prefix)\n    local i = #prefixes\n    prefixes[i] = prefix\n  \
    \  return i\n  end\n  local function remove_prefixes(prefix)\n    local i = #prefixes\n\
    \    prefixes[i] = prefix:sub(1, #prefix)\n    return i\n  end\n  local function\
    \ add_prefix(prefix)\n    local i = #prefixes\n    prefixes[i] = prefix .. string\n\
    \    return i\n  end\n  local function remove_prefix(prefix)\n    local i = #prefixes\n\
    \    prefixes[i] = prefix:sub(1, #prefix) .. string\n    return i\n  end\n  local\
    \ function add_suffix(suffix)\n    local i = #prefixes\n    prefixes[i] = string\
    \ .. suffix\n    return i\n  end\n  local function remove_suffix(suffix)\n   \
    \ local i = #prefixes\n    prefixes[i] = string:sub(1, #string) .. suffix\n  \
    \  return i\n  end\n  local function add_suffixes(suffix)\n    local i = #prefixes\n\
    \    prefixes[i] = string .. suffix\n    return i\n  end\n  local function remove_suffixes(suffix)\n\
    \    local i = #prefixes\n    prefixes[i] = string:sub(1, #string) .. suffix\n\
    \    return i\n  end\n  local function add_suffixes(suffix)\n    local i = #prefixes\n\
    \    prefixes[i] = string .. suffix\n    return i\n  end\n  local function remove_suffixes(suffix)\n\
    \    local i = #prefixes\n    prefixes[i] = string:sub(1, #string) .. suffix\n\
    \    return i\n  end\n  local function add_suffix(suffix)\n    local i = #prefixes\n\
    \    prefixes[i] = string .. suffix\n    return i\n  end\n  local function remove_suffix(suffix)\n\
    \    local i = #prefixes\n    prefixes[i] = string:sub(1, #string) .. suffix\n\
    \    return i\n  end\n  local function add_prefix(prefix)\n    local i = #prefixes\n\
    \    prefixes[i] = prefix .. string\n    return i\n  end\n  local function remove_prefix(prefix)\n\
    \    local i = #prefixes\n    prefixes[i] = prefix:sub(1, #prefix) .. string\n\
    \    return i\n  end\n  local function add_prefixes(prefix)\n    local i = #prefixes\n\
    \    prefixes[i] = prefix .. string\n    return i\n  end\n  local function remove_prefixes(prefix)\n\
    \    local i = #prefixes\n    prefixes[i] = prefix:sub(1, #prefix) .. string\n\
    \    return ", "    local prefixes = {}\n    for i = 1, #string do\n        table.insert(prefixes,\
    \ string:sub(1, i))\n    end\n    return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    prefixes[i] = string\n  end\n  local i = #string\n\
    \  while i do\n    prefixes[#prefixes + 1] = string\n    i = i - 1\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  local longest_prefix = \"\"\n  local\
    \ longest_prefix_length = 0\n  for i = 1, #string do\n    local prefix = string:sub(i,\
    \ i)\n    local prefix_length = #prefix\n    if longest_prefix_length < prefix_length\
    \ then\n      longest_prefix_length = prefix_length\n      longest_prefix = prefix\n\
    \    end\n    prefixes[#prefixes + 1] = prefix\n  end\n  return prefixes, longest_prefix\n\
    end", "  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n   \
    \ table.insert(prefixes, string[i])\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    prefixes[i] = string\n  end\n  local\
    \ i = #string\n  while i > 0 do\n    local prefix = string\n    for j = 1, i do\n\
    \      prefix = prefix .. string[j]\n    end\n    prefixes[#prefixes+1] = prefix\n\
    \    i = i - 1\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local\
    \ pos = 1\n  while pos <= #string do\n    prefixes[pos] = string\n    pos = pos\
    \ + 1\n  end\n  return prefixes\nend", "    local prefixes = {}\n    for i = 1,\
    \ #string do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local\
    \ prefix = \"\"\n  for i = 1, #string do\n    prefix = prefix .. string[i]\n \
    \   prefixes[#prefixes + 1] = prefix\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local longest_prefix\
    \ = \"\"\n  local longest_prefix_len = 0\n  for i = 1, #string do\n    local prefix\
    \ = string:sub(i, i)\n    local prefix_len = #prefix\n    if prefix_len > longest_prefix_len\
    \ then\n      longest_prefix_len = prefix_len\n      longest_prefix = prefix\n\
    \    end\n    prefixes[prefix] = true\n  end\n  return prefixes, longest_prefix\n\
    end", "  local prefixes = {}\n  local longest_prefix = \"\"\n  local longest_prefix_len\
    \ = 0\n  local longest_prefix_start = nil\n  local longest_prefix_end = nil\n\
    \  for i = 1, #string do\n    local prefix = string:sub(i, i)\n    local prefix_len\
    \ = #prefix\n    if longest_prefix_len < prefix_len then\n      longest_prefix_len\
    \ = prefix_len\n      longest_prefix_start = prefix\n      longest_prefix_end\
    \ = prefix\n    end\n    if longest_prefix_len == prefix_len then\n      longest_prefix_end\
    \ = prefix\n    end\n    prefixes[#prefixes + 1] = prefix\n  end\n  return prefixes,\
    \ longest_prefix_start, longest_prefix_end\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  local len = #string\n  local i = 1\n\
    \  while i <= len do\n    prefixes[#prefixes + 1] = string\n    i = i + 1\n  end\n\
    \  return prefixes\nend", "  local prefixes = {}\n  local prefix = \"\"\n  for\
    \ i = 1, #string do\n    prefix = prefix .. string[i]\n    if prefix:sub(1, #prefix)\
    \ == prefix then\n      table.insert(prefixes, prefix)\n    end\n  end\n  return\
    \ prefixes\nend", "    local prefixes = {}\n    for i = 1, #string do\n      \
    \  table.insert(prefixes, string:sub(1, i - 1))\n    end\n    return prefixes\n\
    end", "  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n   \
    \ local prefix = string[1:i]\n    table.insert(prefixes, prefix)\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes,\
    \ string:sub(1, i))\n  end\n  return prefixes\nend", "    local prefixes = {}\n\
    \    for i = 1, #string do\n        table.insert(prefixes, string:sub(1, i))\n\
    \    end\n    return prefixes\nend", "  local prefixes = {}\n  local longest =\
    \ #string\n  for i = 1, longest do\n    local prefix = string[1:i]\n    if not\
    \ prefixes[prefix] then\n      table.insert(prefixes, prefix)\n    end\n  end\n\
    \  return prefixes\nend", "  local prefixes = {}\n  local prefix_length = 1\n\
    \  local prefix = string\n  while true do\n    prefixes[#prefixes + 1] = prefix\n\
    \    if string.len(prefix) > prefix_length then\n      prefix_length = string.len(prefix)\n\
    \    end\n    prefix = prefix:sub(1, prefix_length)\n    if prefix == \"\" then\n\
    \      break\n    end\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  local pos = 1\n  while pos <= #string do\n    local prefix = string\n    for\
    \ i = 1, pos do\n      prefix = prefix .. string[i]\n    end\n    table.insert(prefixes,\
    \ prefix)\n    pos = pos + 1\n  end\n  return prefixes\nend", "  local prefixes\
    \ = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1, i))\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  table.sort(prefixes, function(a,\
    \ b)\n    return #a < #b\n  end)\n  return prefixes\nend", "  local prefixes =\
    \ {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1, i))\n\
    \  end\n  return prefixes\nend", "    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[i] = string\n    end\n    for i = 1, #string do\n     \
    \   for j = 1, #string do\n            if string[i] == string[j] then\n      \
    \          prefixes[i] = prefixes[i] .. string[j]\n                break\n   \
    \         end\n        end\n    end\n    return prefixes\nend", "  local prefixes\
    \ = {}\n  for i = 1, #string do\n    table.insert(prefixes, string[i])\n  end\n\
    \  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n  \
    \  table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\nend", " \
    \ local prefixes = {}\n  local prefix = \"\"\n  for i = 1, #string do\n    prefix\
    \ = prefix .. string[i]\n    prefixes[#prefixes + 1] = prefix\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  local last_prefix = \"\"\n  local\
    \ last_suffix = \"\"\n  for i = 1, #string do\n    local prefix = string:sub(i,\
    \ i)\n    if prefix ~= last_prefix then\n      table.insert(prefixes, last_prefix)\n\
    \    end\n    last_prefix = prefix\n    local suffix = string:sub(i + 1, #string)\n\
    \    if suffix ~= last_suffix then\n      table.insert(prefixes, last_suffix)\n\
    \    end\n    last_suffix = suffix\n  end\n  return prefixes\nend", "  local prefixes\
    \ = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1, i))\n\
    \  end\n  return prefixes\nend", "    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[i] = string\n    end\n    for i = #string, 1, -1 do\n \
    \       prefixes[i] = prefixes[i-1]..string[i]\n    end\n    return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    prefixes[i] = string\n  end\n  local i = #string\n  while\
    \ i > 0 do\n    local prefix = string\n    i = i - 1\n    for j = 1, #string do\n\
    \      prefix = prefix .. string[j]\n      prefixes[j] = prefix\n    end\n  end\n\
    \  return prefixes\nend", "  local prefixes = {}\n  local pos = 1\n  while pos\
    \ <= #string do\n    local prefix = string\n    pos = 1\n    while pos < #prefix\
    \ do\n      prefix = prefix .. string\n      pos = pos + 1\n    end\n    table.insert(prefixes,\
    \ prefix)\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local longest\
    \ = #string\n  for i = 1, longest do\n    prefixes[#prefixes + 1] = string[1:i]\n\
    \  end\n  return prefixes\nend", "    local prefixes = {}\n    local longest =\
    \ #string\n    for i = 1, longest do\n        prefixes[#prefixes + 1] = string[1:i]\n\
    \    end\n    return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[i] = string\n  end\n  local i = 1\n  while i <= #string do\n\
    \    local prefix = string\n    while i <= #string and string[i] ~= prefix do\n\
    \      prefix = prefix .. string[i]\n      i = i + 1\n    end\n    prefixes[i]\
    \ = prefix\n    i = i + 1\n  end\n  return prefixes\nend", "  local prefixes =\
    \ {}\n  local longest_prefix = \"\"\n  for i = 1, #string do\n    local prefix\
    \ = string:sub(i, i)\n    local prefix_length = #prefix\n    if longest_prefix\
    \ ~= \"\" then\n      local prefix_length = #longest_prefix\n      if prefix_length\
    \ < prefix_length then\n        prefixes[#prefixes + 1] = prefix\n      end\n\
    \    end\n    longest_prefix = prefix\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string\n    i = i + 1\n  end\n  return prefixes\nend", "  local prefixes\
    \ = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1, i))\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  table.sort(prefixes, function(a,\
    \ b) return #a < #b end)\n  return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    prefixes[#prefixes + 1] = string\n  end\n  table.sort(prefixes,\
    \ function(a, b) return #a < #b end)\n  return prefixes\nend", "  local prefixes\
    \ = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1, i))\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[i] = string\n\
    \  end\n  local longest = #string\n  for i = 1, #string do\n    local prefix =\
    \ string[1:i]\n    local suffix = string[#prefix+i]\n    local new_prefix = prefix\n\
    \    if #prefix > longest then\n      new_prefix = prefix\n      longest = #prefix\n\
    \    end\n    if #suffix > longest then\n      new_prefix = prefix .. suffix\n\
    \      longest = #suffix\n    end\n    prefixes[#prefixes+1] = new_prefix\n  end\n\
    \  return prefixes, longest\nend", "  local prefixes = {}\n  local last_prefix\
    \ = \"\"\n  for i = 1, #string do\n    local prefix = string:sub(i, i)\n    if\
    \ prefix ~= last_prefix then\n      table.insert(prefixes, prefix)\n    end\n\
    \    last_prefix = prefix\n  end\n  return prefixes\nend", "  local prefixes =\
    \ {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n  end\n \
    \ table.sort(prefixes, function(a, b) return #a < #b end)\n  return prefixes\n\
    end", "  local prefixes = {}\n  local prefix = \"\"\n  for i = 1, #string do\n\
    \    prefix = prefix .. string[i]\n    if prefix:len() > 0 then\n      table.insert(prefixes,\
    \ prefix)\n    end\n  end\n  return prefixes\nend", "  local prefixes = {}\n \
    \ for i = 1, #string do\n    table.insert(prefixes, string[i])\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[i]\
    \ = string\n  end\n  local i = #string\n  while i > 0 do\n    local prefix = string\n\
    \    for j = 1, i do\n      prefix = prefix .. string[j]\n    end\n    prefixes[#prefixes\
    \ + 1] = prefix\n    i = i - 1\n  end\n  return prefixes\nend", "  local prefixes\
    \ = {}\n  local index = 1\n  while true do\n    local prefix = string\n    for\
    \ i = 1, index do\n      prefix = prefix .. string[i]\n    end\n    table.insert(prefixes,\
    \ prefix)\n    index = index + 1\n    if index > #string then\n      break\n \
    \   end\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1,\
    \ #string do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end", "    local prefixes = {}\n    for i = 1, #string do\n        table.insert(prefixes,\
    \ string:sub(1, i))\n    end\n    return prefixes\nend", "    local prefixes =\
    \ {}\n    for i = 1, #string do\n        prefixes[#prefixes + 1] = string\n  \
    \  end\n    return prefixes\nend", "    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string\n    end\n    return prefixes\n\
    end", "  local prefixes = {}\n  local longest_prefix = \"\"\n  local longest_prefix_len\
    \ = 0\n  for i = 1, #string do\n    local prefix = string:sub(i, i)\n    local\
    \ prefix_len = #prefix\n    if prefix_len > longest_prefix_len then\n      longest_prefix\
    \ = prefix\n      longest_prefix_len = prefix_len\n    end\n    prefixes[#prefixes\
    \ + 1] = prefix\n  end\n  return prefixes, longest_prefix\nend", "  local prefixes\
    \ = {}\n  for i = 1, #string do\n    prefixes[i] = string\n  end\n  local i =\
    \ 1\n  while i <= #string do\n    local j = i\n    while j <= #string do\n   \
    \   prefixes[j] = prefixes[j] .. string[j]\n      j = j + 1\n    end\n    i =\
    \ i + 1\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local i = 1\n\
    \  while i <= #string do\n    prefixes[#prefixes + 1] = string\n    i = i + 1\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  local longest = #string\n\
    \  local shortest = longest\n  while longest > 0 do\n    shortest = longest\n\
    \    for i = 1, #string do\n      if string[i] == string[shortest] then\n    \
    \    shortest = shortest-1\n      else\n        prefixes[#prefixes+1] = string[shortest]\n\
    \      end\n    end\n    longest = shortest\n  end\n  return prefixes\nend", " \
    \ local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string[i])\n  end\n  return prefixes\nend", " \
    \ local prefixes = {}\n  for i = 1, #string do\n    local prefix = string\n  \
    \  for j = 1, i do\n      prefix = prefix .. string[j]\n    end\n    table.insert(prefixes,\
    \ prefix)\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local last_prefix\
    \ = \"\"\n  for i = 1, #string do\n    local prefix = string:sub(i, i)\n    if\
    \ prefix ~= last_prefix then\n      table.insert(prefixes, prefix)\n      last_prefix\
    \ = prefix\n    end\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  local longest_prefix = \"\"\n  local\
    \ longest_prefix_length = 0\n  for i = 1, #string do\n    local prefix = string:sub(i,\
    \ i)\n    local prefix_length = #prefix\n    if longest_prefix_length < prefix_length\
    \ then\n      longest_prefix_length = prefix_length\n      longest_prefix = prefix\n\
    \    end\n    prefixes[prefix] = true\n  end\n  return prefixes, longest_prefix\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes,\
    \ string:sub(1, i))\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    table.insert(prefixes, string:sub(1, i))\n  end\n\
    \  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n  \
    \  table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\nend", " \
    \ local prefixes = {}\n  local longest_prefix = \"\"\n  local longest_prefix_len\
    \ = 0\n  for i = 1, #string do\n    local prefix = string:sub(i, i)\n    local\
    \ prefix_len = #prefix\n    if prefix_len > longest_prefix_len then\n      longest_prefix_len\
    \ = prefix_len\n      longest_prefix = prefix\n    end\n    prefixes[#prefixes\
    \ + 1] = prefix\n  end\n  return prefixes, longest_prefix\nend", "  local prefixes\
    \ = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1, i))\n\
    \  end\n  return prefixes\nend", "    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[i] = string\n\
    \  end\n  local function add_prefixes(prefix, prefix)\n    if prefix then\n  \
    \    prefixes[#prefixes + 1] = prefix\n    end\n  end\n  add_prefixes(\"\", \"\
    \")\n  for i = 1, #string do\n    local prefix = string\n    for j = 1, i do\n\
    \      prefix = prefix .. string[j]\n    end\n    add_prefixes(prefix, prefix)\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[i] = string\n  end\n  local longest = #string\n  for i = 1,\
    \ #string do\n    local prefix = string[1:i]\n    local suffix = string[(i+1):]\n\
    \    local length = #prefix\n    if length > longest then\n      longest = length\n\
    \    end\n    for j = 1, length do\n      prefixes[length + j] = prefix .. suffix\n\
    \    end\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1,\
    \ #string do\n    table.insert(prefixes, string[i])\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[i] = string\n\
    \  end\n  while #prefixes > 0 do\n    local prefix = prefixes[1]\n    prefixes\
    \ = prefixes[#prefixes]:gsub(\"^\" .. prefix, \"\")\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  local longest_prefix = \"\"\n  local longest_prefix_length\
    \ = 0\n  for i = 1, #string do\n    local prefix = string:sub(i, i)\n    local\
    \ prefix_length = #prefix\n    if longest_prefix_length < prefix_length then\n\
    \      longest_prefix_length = prefix_length\n      longest_prefix = prefix\n\
    \    end\n    prefixes[prefix] = true\n  end\n  return prefixes, longest_prefix\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local\
    \ longest_prefix = \"\"\n  for i = 1, #string do\n    local prefix = string:sub(i,\
    \ i)\n    local prefix_length = #prefix\n    if longest_prefix ~= \"\" then\n\
    \      if prefix_length < longest_prefix:len() then\n        prefixes[#prefixes\
    \ + 1] = prefix\n      end\n    else\n      prefixes[#prefixes + 1] = prefix\n\
    \    end\n    longest_prefix = prefix\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  local prefix = \"\"\n  local i = #string\n  while i ~= 0 do\n\
    \    prefix = prefix .. string[i]\n    i = i - 1\n    prefixes[#prefixes + 1]\
    \ = prefix\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local prefix\
    \ = \"\"\n  local i = #string\n  while i do\n    prefix = prefix .. string[i]\n\
    \    i = i - 1\n    if i ~= 0 then\n      prefixes[#prefixes + 1] = prefix\n \
    \   end\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local prefix\
    \ = \"\"\n  local i = #string\n  while i ~= 0 do\n    prefix = prefix .. string[i]\n\
    \    i = i - 1\n    prefixes[#prefixes + 1] = prefix\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  local longest_prefix = \"\"\n  local longest_prefix_len\
    \ = 0\n  for i = 1, #string do\n    local prefix = string:sub(i, i)\n    local\
    \ prefix_len = #prefix\n    if longest_prefix_len < prefix_len then\n      longest_prefix_len\
    \ = prefix_len\n      longest_prefix = prefix\n    end\n    prefixes[#prefixes\
    \ + 1] = prefix\n  end\n  return prefixes, longest_prefix\nend", "  local prefixes\
    \ = {}\n  local index = 1\n  while true do\n    local prefix = string\n    for\
    \ i = 1, index do\n      prefix = prefix .. string[i]\n    end\n    table.insert(prefixes,\
    \ prefix)\n    index = index + 1\n    if index > #string then\n      break\n \
    \   end\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1,\
    \ #string do\n    prefixes[i] = string\n  end\n  local function add_prefixes(prefix)\n\
    \    for i = 1, #prefix do\n      prefixes[#prefixes + 1] = prefix:sub(1, i -\
    \ 1)\n    end\n  end\n  add_prefixes(\"http://\")\n  add_prefixes(\"https://\"\
    )\n  add_prefixes(\"ftp://\")\n  add_prefixes(\"mailto:\")\n  add_prefixes(\"\
    news:\")\n  add_prefixes(\"telnet://\")\n  add_prefixes(\"imap://\")\n  add_prefixes(\"\
    news://\")\n  add_prefixes(\"smb://\")\n  add_prefixes(\"nfs://\")\n  add_prefixes(\"\
    ftps://\")\n  add_prefixes(\"sftp://\")\n  add_prefixes(\"ssh://\")\n  add_prefixes(\"\
    svn+ssh://\")\n  add_prefixes(\"svn+sftp://\")\n  add_prefixes(\"svn+ftp://\"\
    )\n  add_prefixes(\"svn+http:/\")\n  add_prefixes(\"svn+https:/\")\n  add_prefixes(\"\
    svn+file://\")\n  add_prefixes(\"svn+ftp://\")\n  add_prefixes(\"svn+ssh://\"\
    )\n  add_prefixes(\"svn+sftp://\")\n  add_prefixes(\"svn+http:/\")\n  add_prefixes(\"\
    svn+https:/\")\n  add_prefixes(\"svn+file://\")\n  add_prefixes(\"svn+ftp://\"\
    )\n  add_prefixes(\"svn+ssh://\")\n  add_prefixes(\"svn+sftp://\")\n  add_prefixes(\"\
    svn+http:/\")\n  add_prefixes(\"svn+https:/\")\n  add_prefixes(\"svn+file://\"\
    )\n  add_prefixes(\"svn+ftp://\")\n  add_prefixes(\"svn+ssh://\")\n  add_prefixes(\"\
    svn+sftp://\")\n  add_prefixes(\"svn+http:/\")\n  add_prefixes(\"svn+https:/\"\
    )\n  add_prefixes(\"svn+file://\")\n  add_prefixes(\"svn+ftp://\")\n  add_prefixes(\"\
    svn+ssh://\")\n  add_prefixes(\"svn+sftp://\")\n  add_prefixes(\"svn+", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend", "    local prefixes = {}\n    for i = 1,\
    \ #string do\n        prefixes[i] = string\n    end\n    for i = 1, #string do\n\
    \        for j = 1, #string do\n            if string[i] == string[j] then\n \
    \               prefixes[i] = prefixes[i] .. string[j]\n                break\n\
    \            end\n        end\n    end\n    return prefixes\nend", "  local prefixes\
    \ = {}\n  for i = 1, #string do\n    prefixes[i] = string\n  end\n  local i =\
    \ #string\n  while i > 0 do\n    local j = i - 1\n    while j > 0 do\n      prefixes[#prefixes\
    \ + 1] = string[j..i]\n      j = j - 1\n    end\n    i = i - 1\n  end\n  return\
    \ prefixes\nend", "    local prefixes = {}\n    for i = 1, #string do\n      \
    \  prefixes[#prefixes + 1] = string\n    end\n    return prefixes\nend", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    local prefix = string\n    for j\
    \ = 1, i do\n      prefix = prefix .. string[j]\n    end\n    table.insert(prefixes,\
    \ prefix)\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local i =\
    \ #string\n  while i do\n    prefixes[#prefixes + 1] = string[i]\n    i = i -\
    \ 1\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  local pos = 1\n  while pos <= #string do\n   \
    \ prefixes[#prefixes + 1] = string\n    pos = pos + 1\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    local prefix = string\n\
    \    for j = 1, i do\n      prefix = prefix .. string[j]\n    end\n    table.insert(prefixes,\
    \ prefix)\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1,\
    \ #string do\n    table.insert(prefixes, string[i])\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  local prefix = \"\"\n  local i = #string\n  while\
    \ i do\n    prefix = prefix .. string[i]\n    i = i - 1\n    prefixes[#prefixes\
    \ + 1] = prefix\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    local prefix = string\n    for j = 1, i do\n      prefix\
    \ = prefix .. string[j]\n    end\n    table.insert(prefixes, prefix)\n  end\n\
    \  return prefixes\nend", "    local prefixes = {}\n    for i = 1, #string do\n\
    \        prefixes[#prefixes + 1] = string\n    end\n    return prefixes\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local prefix\
    \ = \"\"\n  local i = #string\n  while i do\n    prefix = prefix .. string[i]\n\
    \    i = i - 1\n    if i then\n      prefixes[#prefixes + 1] = prefix\n    end\n\
    \  end\n  return prefixes\nend", "    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end", "  local prefixes = {}\n  local pos = 1\n  while pos <= #string do\n   \
    \ prefixes[#prefixes + 1] = string.sub(string,1,pos)\n    pos = pos + 1\n  end\n\
    \  return prefixes\nend", "    local prefixes = {}\n    for i = 1, #string do\n\
    \        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end", "  local prefixes = {}\n  local last_index = 1\n  local index = 1\n  while\
    \ index <= #string do\n    local prefix = string[index]:sub(1, last_index)\n \
    \   table.insert(prefixes, prefix)\n    last_index = index\n    index = index\
    \ + 1\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes,\
    \ string:sub(1, i))\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    prefixes[i] = string\n  end\n  local i = 1\n  while\
    \ i <= #string do\n    local j = i - 1\n    while j > 0 and string[i] == string[j]\
    \ do\n      j = j - 1\n    end\n    prefixes[i] = string[i]\n    i = j + 1\n \
    \ end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n\
    \    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\nend",
  "    local prefixes = {}\n    for i = 1, #string do\n        prefixes[#prefixes\
    \ + 1] = string\n    end\n    return prefixes\nend", "  local prefixes = {}\n\
    \  local prefix = \"\"\n  for i = 1, #string do\n    prefix = prefix .. string[i]\n\
    \    if prefix:len() > 0 then\n      table.insert(prefixes, prefix)\n    end\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string[i])\n  end\n  return prefixes\nend", " \
    \ local prefixes = {}\n  for i = 1, #string do\n    prefixes[i] = string\n  end\n\
    \  local i = #string\n  while i > 0 do\n    prefixes[#prefixes + 1] = string\n\
    \    i = i - 1\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local\
    \ prefix = \"\"\n  local i = #string\n  while i do\n    prefix = prefix .. string[i]\n\
    \    i = i - 1\n    prefixes[#prefixes + 1] = prefix\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  local last_prefix = \"\"\n  for i = 1, #string\
    \ do\n    local prefix = string:sub(i, i)\n    if prefix ~= last_prefix then\n\
    \      table.insert(prefixes, prefix)\n      last_prefix = prefix\n    end\n \
    \ end\n  return prefixes\nend", "  local prefixes = {}\n  local prefix\n  for\
    \ prefix in string.gmatch(\"^(.-)$\", \"%1\") do\n    table.insert(prefixes, prefix)\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  local prefix = \"\"\
    \n  for i = 1, #string do\n    prefix = prefix .. string[i]\n    prefixes[#prefixes\
    \ + 1] = prefix\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local\
    \ longest = #string\n  local shortest = 1\n  while shortest <= longest do\n  \
    \  local prefix = string[shortest]\n    local i = shortest\n    while i <= longest\
    \ and string[i] ~= prefix do\n      i = i + 1\n    end\n    if i > longest then\n\
    \      break\n    end\n    prefixes[#prefixes + 1] = prefix\n    shortest = i\n\
    \  end\n  return prefixes\nend", "    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end", "  local prefixes = {}\n  local prefix = ''\n  for i = 1, #string do\n \
    \   prefix = prefix .. string[i]\n    prefixes[#prefixes + 1] = prefix\n  end\n\
    \  return prefixes\nend", "  local prefixes = {}\n  local pos = 1\n  while pos\
    \ <= #string do\n    prefixes[pos] = string\n    pos = pos + 1\n  end\n  return\
    \ prefixes\nend", "    local prefixes = {}\n    for i = 1, #string do\n      \
    \  prefixes[#prefixes + 1] = string\n    end\n    return prefixes\nend", "  local\
    \ prefixes = {}\n  local prefix = ''\n  local i = 1\n  while i <= #string do\n\
    \    prefix = prefix .. string[i]\n    i = i + 1\n    prefixes[#prefixes + 1]\
    \ = prefix\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i =\
    \ 1, #string do\n    prefixes[i] = string\n  end\n  local longest = #string\n\
    \  local shortest = #string\n  while longest > 0 do\n    longest = longest - 1\n\
    \    shortest = shortest - 1\n    for i = 1, #string do\n      if string[shortest]\
    \ == string[i] then\n        prefixes[longest] = string\n        longest = longest\
    \ - 1\n        shortest = shortest - 1\n      end\n    end\n  end\n  return prefixes\n\
    end", "    local prefixes = {}\n    for i = 1, #string do\n        prefixes[i]\
    \ = string\n    end\n    local longest_prefix = prefixes[1]\n    for i = 2, #prefixes\
    \ do\n        local prefix = prefixes[i]\n        local prefix_length = #prefix\n\
    \        for j = 1, prefix_length do\n            if prefix:sub(1, j) == longest_prefix\
    \ then\n                longest_prefix = prefix:sub(1, j)\n            end\n \
    \       end\n    end\n    return prefixes\nend", "  local prefixes = {}\n  local\
    \ longest_prefix = \"\"\n  local longest_prefix_len = 0\n  for i = 1, #string\
    \ do\n    local prefix = string[1:i]\n    local prefix_len = #prefix\n    if prefix_len\
    \ > longest_prefix_len then\n      longest_prefix = prefix\n      longest_prefix_len\
    \ = prefix_len\n    end\n    prefixes[#prefixes + 1] = prefix\n  end\n  return\
    \ prefixes, longest_prefix\nend", "    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string[i])\n    end\n    return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    table.insert(prefixes, string:sub(i, i))\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  table.sort(prefixes, function(a, b)\n    return #a <\
    \ #b\n  end)\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  table.sort(prefixes)\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  local prefix = \"\"\n  local i = #string\n\
    \  while i do\n    prefix = prefix .. string[i]\n    i = i - 1\n    prefixes[#prefixes\
    \ + 1] = prefix\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local\
    \ i = 1\n  while i <= #string do\n    prefixes[i] = string\n    i = i + 1\n  end\n\
    \  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n  \
    \  prefixes[i] = string\n  end\n  for i = #string, 1, -1 do\n    prefixes[i] =\
    \ prefixes[i-1]..string[i]\n  end\n  return prefixes\nend", "    local prefixes\
    \ = {}\n    for i = 1, #string do\n        prefixes[i] = string\n    end\n   \
    \ for i = 1, #string do\n        for j = 1, #string do\n            if string[i]\
    \ == string[j] then\n                prefixes[i] = prefixes[i] .. string[j]\n\
    \                prefixes[j] = prefixes[j] .. string[i]\n            end\n   \
    \     end\n    end\n    return prefixes\nend", "  local prefixes = {}\n  local\
    \ longest = #string\n  local shortest = 1\n  while shortest <= longest do\n  \
    \  prefixes[#prefixes + 1] = string[shortest]\n    shortest = shortest + 1\n \
    \ end\n  return prefixes\nend", "    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string\n    end\n    return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    table.insert(prefixes, string[i])\n  end\n  return prefixes\n\
    end", "    local prefixes = {}\n    for i = 1, #string do\n        table.insert(prefixes,\
    \ string:sub(1, i - 1))\n    end\n    return prefixes\nend", "  local prefixes\
    \ = {}\n  local prefix\n  for prefix in string.gmatch(\"^(.-)$\", \"%1\") do\n\
    \    table.insert(prefixes, prefix)\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string\n    i = i + 1\n  end\n  return prefixes\nend", "    local prefixes\
    \ = {}\n    local pos = 1\n    while pos <= #string do\n        local prefix =\
    \ string\n        for i = 1, pos do\n            prefix = prefix .. string[i]\n\
    \        end\n        table.insert(prefixes, prefix)\n        pos = pos + 1\n\
    \    end\n    return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(i, i))\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  local prefix = \"\"\n  local i = #string\n  while\
    \ i do\n    prefix = prefix .. string[i]\n    i = i - 1\n    prefixes[#prefixes\
    \ + 1] = prefix\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    table.insert(prefixes, string[i])\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes,\
    \ string[i])\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local\
    \ longest = #string\n  for i = 1, longest do\n    local prefix = string[1:i]\n\
    \    if prefixes[prefix] == nil then\n      table.insert(prefixes, prefix)\n \
    \   end\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local len =\
    \ #string\n  for i = 1, len do\n    prefixes[#prefixes + 1] = string\n  end\n\
    \  table.sort(prefixes)\n  return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    prefixes[i] = string\n  end\n  local i = 1\n  while i\
    \ <= #string do\n    local prefix = string\n    while i <= #string do\n      prefix\
    \ = prefix .. string[i]\n      i = i + 1\n    end\n    prefixes[#prefixes + 1]\
    \ = prefix\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local prefix_length\
    \ = 1\n  local i = 1\n  while i <= #string do\n    local prefix = string[1:i]\n\
    \    prefixes[#prefixes + 1] = prefix\n    i = i + 1\n    prefix_length = prefix_length\
    \ + 1\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local prefix\
    \ = \"\"\n  local i = #string\n  while i do\n    prefix = prefix .. string[i]\n\
    \    i = i - 1\n    if i == 0 then\n      prefixes[#prefixes + 1] = prefix\n \
    \   end\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local longest_prefix\
    \ = \"\"\n  for i = 1, #string do\n    local prefix = string:sub(i, i)\n    if\
    \ prefix ~= longest_prefix then\n      table.insert(prefixes, prefix)\n    end\n\
    \    longest_prefix = prefix\n  end\n  return prefixes\nend", "  local prefixes\
    \ = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1, i))\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  local longest = #string\n\
    \  for i = 1, longest do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n \
    \ return prefixes\nend", "    local prefixes = {}\n    for i = 1, #string do\n\
    \        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
