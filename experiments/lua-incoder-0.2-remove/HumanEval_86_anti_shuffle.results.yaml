language: lua
name: HumanEval_86_anti_shuffle
results:
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ char = string.sub(s,i,i)\n    local ascii = string.byte(char) -- ascii value\
    \ of char\n    local new_char = string.char(ascii - 1) -- ascii value of char\
    \ - 1\n    new_s = new_s .. new_char\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpouwdtbyw.lua:22:\
    \ expected: \"Hi\"\nactual: \"Gh\"\nstack traceback:\n\t/tmp/tmpouwdtbyw.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    if c ~= \" \" then\n      new_s = new_s .. c\n  \
    \  end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjks2k_wr.lua:23:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpjks2k_wr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    if c ~= \" \" then\n      new_s = new_s .. c\n  \
    \  else\n      new_s = new_s .. string.sub(s,i+1,i+1)\n    end\n  end\n  return\
    \ new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi3_vmzcp.lua:25:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpi3_vmzcp.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local words = {}\n  for w in string.gmatch(s, \"\
    [^ ]+\") do\n    table.insert(words, w)\n  end\n  table.sort(words)\n  local new_s\
    \ = \"\"\n  for _, w in ipairs(words) do\n    new_s = new_s .. w .. \" \"\n  end\n\
    \  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdou1ierp.lua:24:\
    \ expected: \"Hi\"\nactual: \"Hi \"\nstack traceback:\n\t/tmp/tmpdou1ierp.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    if c ~= \" \" then\n      new_s = new_s .. c\n  \
    \  end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjks2k_wr.lua:23:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpjks2k_wr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    if c ~= \" \" then\n      new_s = new_s .. c\n  \
    \  end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjks2k_wr.lua:23:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpjks2k_wr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local s = s:gsub(\"%w+\", function (w) return w:lower()\
    \ end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"\
    %S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w)\
    \ return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n\
    \  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppl8i58ng.lua:38: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  -- Example: anti_shuffle(\"Hello World\") --> \"\
    Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n \
    \ -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\")\
    \ --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\
    \n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example:\
    \ anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\")\
    \ --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\
    \n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example:\
    \ anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\")\
    \ --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\
    \n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example:\
    \ anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\")\
    \ --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\
    \n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example:\
    \ anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hllo Wrdl\"\n  -- \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvfayvrio.lua:47: ''end'' expected (to close ''function'' at
    line 7) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  -- Note: You should keep the order of words and\
    \ blank spaces in the sentence.\n  -- For example:\n  local function anti_shuffle(s)\n\
    \    local words = string.gmatch(s, '[%w\\s]+')\n    local shuffled_words = {}\n\
    \    for i = 1, #words do\n      local word = words[i]\n      local sorted_word\
    \ = word\n      local j = 1\n      while j <= #word do\n        if string.byte(sorted_word)\
    \ > string.byte(word[j]) then\n          sorted_word = word[j]\n        else\n\
    \          j = j + 1\n        end\n      end\n      table.insert(shuffled_words,\
    \ sorted_word)\n    end\n    return table.concat(shuffled_words, ' ')\n  end\n\
    \  return anti_shuffle(s)\nend\nprint(anti_shuffle(\"The quick brown fox jumps\
    \ over the lazy dog\"))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpavuh3ziq.lua:14: attempt to get length of local 'words' (a\
    \ function value)\nstack traceback:\n\t/tmp/tmpavuh3ziq.lua:14: in function </tmp/tmpavuh3ziq.lua:11>\n\
    \t(tail call): ?\n\t/tmp/tmpavuh3ziq.lua:31: in main chunk\n\t[C]: ?\n"
  stdout: ''
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpow8v8emm.lua:16:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpow8v8emm.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    if c ~= \" \" then\n      new_s = new_s .. c\n  \
    \  end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjks2k_wr.lua:23:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpjks2k_wr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local s = s:gsub(\"%w+\", function (w) return w:lower()\
    \ end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"\
    %S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w)\
    \ return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n\
    \  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppl8i58ng.lua:38: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local new_s = \"\"\n    local words = s:gmatch(\"([^ ]+)\")\n    for _, word\
    \ in pairs(words) do\n        local new_word = word\n        local new_word_len\
    \ = 0\n        for i = 1, #word do\n            local c = string.byte(word[i])\n\
    \            local new_c = string.byte(new_word[i])\n            if c > new_c\
    \ then\n                new_word = new_word .. string.sub(word, 1, i)\n      \
    \          new_word_len = i\n            end\n        end\n        new_s = new_s\
    \ .. new_word .. \" \"\n    end\n    return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp87o8cxlk.lua:10:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp87o8cxlk.lua:10: in function 'candidate'\n\t/tmp/tmp87o8cxlk.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    if c ~= \" \" then\n      new_s = new_s .. c\n  \
    \  end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjks2k_wr.lua:23:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpjks2k_wr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ char = string.sub(s,i,i)\n    local new_char = string.char(string.byte(char)\
    \ + 1)\n    new_s = new_s .. new_char\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphj66oed_.lua:21:\
    \ expected: \"Hi\"\nactual: \"Ij\"\nstack traceback:\n\t/tmp/tmphj66oed_.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = string.gmatch(s, \"[^ ]+\")\n    local new_words = {}\n   \
    \ for _, word in pairs(words) do\n        table.insert(new_words, word)\n    end\n\
    \    return table.concat(new_words, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpepoipj7a.lua:10:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpepoipj7a.lua:10: in function 'candidate'\n\t/tmp/tmpepoipj7a.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  -- return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9v6xl_5.lua:15:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpz9v6xl_5.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local words = string.gmatch(s, \"[%w\\s]+\") --\
    \ get all words in the string\n  local sorted_words = {}\n  for i = 1, #words\
    \ do\n    sorted_words[#sorted_words + 1] = words[i] -- add each word to the sorted\
    \ list\n  end\n  table.sort(sorted_words) -- sort the words in ascending order\n\
    \  local new_s = \"\"\n  for i = 1, #sorted_words do\n    new_s = new_s .. sorted_words[i]\
    \ .. \" \"\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_oss9i2z.lua:11:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmp_oss9i2z.lua:11: in function 'candidate'\n\t/tmp/tmp_oss9i2z.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqrklced.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpeqrklced.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local words = s:gmatch(\"([^ ]+)\")\n  local shuffled_words = {}\n  for _,\
    \ word in pairs(words) do\n    table.insert(shuffled_words, word:gsub(\"%W\",\
    \ function (c)\n      return string.char(tonumber(c) + 1)\n    end))\n  end\n\
    \  return table.concat(shuffled_words, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk81bu97r.lua:10:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpk81bu97r.lua:10: in function 'candidate'\n\t/tmp/tmpk81bu97r.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  -- return \"antishuffle\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74sd6hhl.lua:15:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp74sd6hhl.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  local words = string.gmatch(s,\
    \ \"([^ ]+)\")\n  for _, word in pairs(words) do\n    local new_word = word\n\
    \    local new_word_ascii = \"\"\n    for i = 1, #word do\n      new_word_ascii\
    \ = new_word_ascii .. string.char(string.byte(word[i]) + 1)\n    end\n    new_word\
    \ = new_word .. new_word_ascii\n    new_s = new_s .. new_word\n  end\n  return\
    \ new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ijb3mmh.lua:11:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp5ijb3mmh.lua:11: in function 'candidate'\n\t/tmp/tmp5ijb3mmh.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == \" \" then\n      new_s = new_s .. string.sub(s,i,i)\n    else\n      new_s\
    \ = new_s .. string.sub(s,i,i) .. \" \"\n    end\n  end\n  return new_s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpye_d8e3k.lua:23:\
    \ expected: \"Hi\"\nactual: \"H i \"\nstack traceback:\n\t/tmp/tmpye_d8e3k.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    if string.find(c, \"[%a]\") then\n      new_s = new_s\
    \ .. string.sub(s,i,i-1) .. string.sub(s,i+1,i+1)\n    else\n      new_s = new_s\
    \ .. c\n    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_te43d5.lua:24:\
    \ expected: \"Hi\"\nactual: \"i\"\nstack traceback:\n\t/tmp/tmp3_te43d5.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  -- return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9v6xl_5.lua:15:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpz9v6xl_5.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  -- return \"antishuffle\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwxkqcjs.lua:15:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmptwxkqcjs.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  -- Example: anti_shuffle(\"Hello World\") --> \"\
    olleH dlroW\"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH\
    \   dlroW   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH\
    \   dlroW   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH\
    \   dlroW   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH\
    \   dlroW   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH\
    \   dlroW   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH\
    \   dlroW   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH\
    \   dlroW   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH\
    \   dlroW   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH\
    \   dlroW   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH\
    \   dlroW   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH\
    \   dlroW   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH\
    \   dlroW   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH\
    \   dlroW   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH\
    \   dlroW   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH\
    \   dlroW   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH\
    \   dlroW   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH\
    \   dlroW   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH\
    \   dlroW   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_lkszay7.lua:42: ''end'' expected (to close ''function'' at
    line 7) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpow8v8emm.lua:16:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpow8v8emm.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    if string.find(c, \"\\n\") then\n      new_s = new_s\
    \ .. c\n    else\n      new_s = new_s .. string.sub(s,i,i-1) .. c\n    end\n \
    \ end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_voy7pqv.lua:25:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmp_voy7pqv.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  -- Note: You should keep the order of words and\
    \ blank spaces in the sentence.\n  -- For example:\n  local function anti_shuffle(s)\n\
    \    local new_s = \"\"\n    local words = s:gmatch(\"([^ ]+)\") -- Split string\
    \ into words\n    for i = 1, #words do\n      local word = words[i]\n      local\
    \ new_word = word\n      local j = 1\n      while j <= #word do\n        local\
    \ c = string.byte(word:sub(j, j + 1))\n        if c > 127 then\n          new_word\
    \ = new_word .. string.char(c - 32)\n        else\n          new_word = new_word\
    \ .. string.char(c)\n        end\n        j = j + 1\n      end\n      new_s =\
    \ new_s .. new_word\n    end\n    return new_s\n  end\n  -- Write your code here.\n\
    \  -- Note: You should keep the order of words and blank spaces in the sentence.\n\
    \  -- For example:\n  local function anti_shuffle(s)\n    local new_s = \"\"\n\
    \    local words = s:gmatch(\"([^ ]+)\") -- Split string into words\n    for i\
    \ = 1, #words do\n      local word = words[i]\n      local new_word = word\n \
    \     local j = 1\n      while j <= #word do\n        local c = string.byte(word:sub(j,\
    \ j + 1))\n        if c > 127 then\n          new_word = new_word .. string.char(c\
    \ - 32)\n        else\n          new_word = new_word .. string.char(c)\n     \
    \   end\n        j = j + 1\n      end\n      new_s = new_s .. new_word\n    end\n\
    \    return new_s\n  end\n  -- Write your code here.\n  -- Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n  -- For example:\n  local\
    \ function anti_shuffle(s)\n    local new_s = \"\"\n    local words = s:gmatch(\"\
    ([^ ]+)\") -- Split string into words\n    for i = 1, #words do\n      local word\
    \ = words[i]\n      local new_word = word\n      local j = 1\n      while j <=\
    \ #word do\n        local c = string.byte(word:sub(j, j + 1))\n        if c >\
    \ 127 then\n          new_word = new_word .. string.char(c - 32)\n        else\n\
    \          new_word = new_word .. string.char(c)\n        end\n        j = j +\
    \ 1\n      end\n      new_s = new_s .. new_word\n    end\n    return new_s\n \
    \ end\n  -- Write your code here.\n  -- Note: You should keep the order of words\
    \ and blank spaces in the sentence.\n  -- For example:\n  local function anti_shuffle(s)\n\
    \    local new_s = \"\"\n    local words = s:\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf2bgml2v.lua:83: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  -- return \"antishuffle\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74sd6hhl.lua:15:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp74sd6hhl.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ char = string.sub(s,i,i)\n    local ascii = string.byte(char) -- ascii value\
    \ of char\n    if ascii < 65 then\n      new_s = new_s .. string.char(ascii+32)\n\
    \    elseif ascii < 70 then\n      new_s = new_s .. string.char(ascii-32) .. \"\
    \ \" -- add space before char\n    elseif ascii < 76 then\n      new_s = new_s\
    \ .. string.char(ascii-32) .. \" \" -- add space before char\n    elseif ascii\
    \ < 80 then\n      new_s = new_s .. string.char(ascii-32) .. \" \" -- add space\
    \ before char\n    elseif ascii < 104 then\n      new_s = new_s .. string.char(ascii-32)\
    \ .. \" \" -- add space before char\n    else\n      new_s = new_s .. char\n \
    \   end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvw6kdrhl.lua:33:\
    \ expected: \"Hi\"\nactual: \"( i\"\nstack traceback:\n\t/tmp/tmpvw6kdrhl.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your solution here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmne9kp3r.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpmne9kp3r.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbhpqqvvg.lua:16:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpbhpqqvvg.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  -- return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl2b7f_wy.lua:15:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpl2b7f_wy.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ char = string.sub(s,i,i)\n    local ascii = string.byte(char) -- ascii value\
    \ of char\n    if ascii < 65 then\n      new_s = new_s .. string.sub(s,i,i)\n\
    \    elseif ascii < 91 then\n      new_s = new_s .. string.sub(s,i,i-1)\n    elseif\
    \ ascii < 97 then\n      new_s = new_s .. string.sub(s,i-1,i-1)\n    elseif ascii\
    \ < 123 then\n      new_s = new_s .. string.sub(s,i-1,i)\n    end\n  end\n  return\
    \ new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwy5cw86p.lua:30:\
    \ expected: \"ehllo\"\nactual: \"hheellllo\"\nstack traceback:\n\t/tmp/tmpwy5cw86p.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ char = string.sub(s,i,i)\n    local ascii = string.byte(char,1,1)\n    local\
    \ new_char = string.char(ascii,ascii,ascii)\n    new_s = new_s .. new_char\n \
    \ end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbvggm7o7.lua:22:\
    \ expected: \"Hi\"\nactual: \"HHHiii\"\nstack traceback:\n\t/tmp/tmpbvggm7o7.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your solution here\n  local words = {}\n  for w in s:gmatch(\"[^ ]+\"\
    ) do\n    table.insert(words, w)\n  end\n  table.sort(words)\n  local new_s =\
    \ \"\"\n  for _, w in ipairs(words) do\n    new_s = new_s .. w .. \" \"\n  end\n\
    \  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3qlvhxeb.lua:24:\
    \ expected: \"Hi\"\nactual: \"Hi \"\nstack traceback:\n\t/tmp/tmp3qlvhxeb.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = string.gmatch(s, \"[%w\\s]+\") -- Split string into words\n\
    \    local new_words = {}\n    local word_index = 1\n    for word in words do\n\
    \        local new_word = \"\"\n        for char in word do -- Iterate over each\
    \ character in word\n            -- If the character is alphabetic character then\
    \ add it to new_word\n            if string.byte(char) > 64 then\n           \
    \     new_word = new_word .. string.byte(char) -- Add ascii value to new_word\n\
    \            else\n                new_word = new_word .. string.byte(string.lower(char))\
    \ -- Add ascii value to new_word\n            end\n        end\n        new_words[word_index]\
    \ = new_word -- Add new_word to new_words\n        word_index = word_index + 1\n\
    \    end\n    return table.concat(new_words) -- Return new_words as string\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp9o9xhn5.lua:13:\
    \ attempt to call a string value\nstack traceback:\n\t/tmp/tmpp9o9xhn5.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmpp9o9xhn5.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpow8v8emm.lua:16:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpow8v8emm.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == \" \" then\n      new_s = new_s .. string.sub(s,i,i)\n    else\n      new_s\
    \ = new_s .. string.sub(s,i,i) .. \" \"\n    end\n  end\n  return new_s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpye_d8e3k.lua:23:\
    \ expected: \"Hi\"\nactual: \"H i \"\nstack traceback:\n\t/tmp/tmpye_d8e3k.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqrklced.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpeqrklced.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ char = string.sub(s,i,i)\n    if char == \" \" then\n      new_s = new_s ..\
    \ \" \"\n    else\n      new_s = new_s .. string.char(string.byte(char) - 97)\n\
    \    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm54n8dyf.lua:15:\
    \ bad argument #1 to 'char' (invalid value)\nstack traceback:\n\t/tmp/tmpm54n8dyf.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpm54n8dyf.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpow8v8emm.lua:16:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpow8v8emm.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    if c ~= \" \" then\n      new_s = new_s .. c\n  \
    \  else\n      new_s = new_s .. string.sub(s,i,i+1)\n    end\n  end\n  return\
    \ new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoiaa99d9.lua:25:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpoiaa99d9.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    if string.find(c,\"[%a]\") then\n      new_s = new_s\
    \ .. string.sub(s,i,i)\n    else\n      new_s = new_s .. c\n    end\n  end\n \
    \ return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfumnqh5r.lua:25:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpfumnqh5r.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbhpqqvvg.lua:16:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpbhpqqvvg.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    if string.find(s,\
    \ \" \") then\n      new_s = new_s .. string.sub(s,1,string.find(s, \" \")-1)\n\
    \      new_s = new_s .. string.sub(s,string.find(s, \" \")+1, #s)\n    else\n\
    \      new_s = new_s .. string.sub(s,1,i)\n    end\n  end\n  return new_s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprst3n4q6.lua:24:\
    \ expected: \"Hi\"\nactual: \"HHi\"\nstack traceback:\n\t/tmp/tmprst3n4q6.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local new_s = \"\"\n    local words = s:gmatch(\"[%w]+\")\n    for _, word\
    \ in pairs(words) do\n        local new_word = word\n        local new_word_len\
    \ = #word\n        for i = 1, #word do\n            local c = string.byte(word[i])\n\
    \            if c > 127 then\n                new_word = new_word .. string.char(c\
    \ - 256)\n            else\n                new_word = new_word .. string.char(c)\n\
    \            end\n        end\n        new_s = new_s .. new_word\n    end\n  \
    \  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy8dcmrbu.lua:10:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpy8dcmrbu.lua:10: in function 'candidate'\n\t/tmp/tmpy8dcmrbu.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    if c ~= \" \" then\n      new_s = new_s .. c\n  \
    \  end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjks2k_wr.lua:23:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpjks2k_wr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local words = string.gmatch(s, \"[^ ]+\") -- Split string into words\n  local\
    \ new_words = {}\n  local new_word = \"\"\n  for i = 1, #words do\n    local word\
    \ = words[i]\n    if word ~= \"\" then\n      new_word = new_word .. word\n  \
    \    new_words[#new_words+1] = word\n    end\n  end\n  new_word = new_word ..\
    \ \" \"\n  for i = 1, #words do\n    local word = words[i]\n    if word ~= \"\"\
    \ then\n      new_word = new_word .. word\n      new_words[#new_words+1] = word\n\
    \    end\n  end\n  return new_word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptxj45gd3.lua:11:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmptxj45gd3.lua:11: in function 'candidate'\n\t/tmp/tmptxj45gd3.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpow8v8emm.lua:16:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpow8v8emm.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  -- return \"antishuffle\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwxkqcjs.lua:15:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmptwxkqcjs.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local words = s:gmatch(\"([^ ]+)\")\n  local new_words = {}\n  for i = 1, #words\
    \ do\n    local word = words[i]\n    local new_word = \"\"\n    for j = 1, #word\
    \ do\n      local c = word[j]\n      local ascii = string.byte(c)\n      if ascii\
    \ < 97 then\n        ascii = ascii + 26\n      elseif ascii < 123 then\n     \
    \   ascii = ascii - 26\n      end\n      new_word = new_word .. string.char(ascii)\n\
    \    end\n    new_words[i] = new_word\n  end\n  return table.concat(new_words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4t3wf8op.lua:10:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmp4t3wf8op.lua:10: in function 'candidate'\n\t/tmp/tmp4t3wf8op.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqrklced.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpeqrklced.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpow8v8emm.lua:16:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpow8v8emm.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ char = string.sub(s,i,i)\n    if char == \" \" then\n      new_s = new_s ..\
    \ char\n    else\n      new_s = new_s .. string.char(math.abs(string.byte(char)))\n\
    \    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgfgx4__m.lua:25:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpgfgx4__m.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqrklced.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpeqrklced.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local new_s = \"\"\n  for w in s:gmatch(\"[^ ]+\") do\n    local new_w = \"\
    \"\n    for c in w:gmatch(\"%S+\") do\n      local ascii = string.byte(c)\n  \
    \    if ascii < 32 then\n        ascii = ascii + 32\n      else\n        ascii\
    \ = ascii - 32\n      end\n      new_w = new_w .. string.char(ascii)\n    end\n\
    \    new_s = new_s .. new_w\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmt5c2uix.lua:28:\
    \ expected: \"Hi\"\nactual: \"(\"\nstack traceback:\n\t/tmp/tmpmt5c2uix.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = string.gmatch(s, \"([^ ]+)\") -- Split sentence into words\n\
    \    local new_words = {}\n    for _, word in pairs(words) do\n        local new_word\
    \ = \"\"\n        for i = 1, #word do -- Iterate through each character in word\n\
    \            local ascii = string.byte(word[i]) -- Get the ascii value of current\
    \ character\n            -- If the ascii value is greater than the ascii value\
    \ of previous character\n            -- then swap the character\n            if\
    \ ascii > string.byte(new_word:sub(1, #new_word)) then\n                new_word\
    \ = new_word .. string.char(string.byte(word[i]) + 1)\n            else\n    \
    \            new_word = new_word .. string.char(string.byte(word[i]) - 1)\n  \
    \          end\n        end\n        new_words[#new_words + 1] = new_word -- Add\
    \ the new word to new_words\n    end\n    return table.concat(new_words, \" \"\
    ) -- Join new_words with space\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9vhww91_.lua:10:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp9vhww91_.lua:10: in function 'candidate'\n\t/tmp/tmp9vhww91_.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = string.gmatch(s, \"[^ ]+\")\n    local result = \"\"\n    for\
    \ _, word in pairs(words) do\n        local new_word = word\n        for i = 1,\
    \ #word do\n            local char = string.sub(word, i, i)\n            local\
    \ ascii = string.byte(char) + 128\n            if ascii < 127 then\n         \
    \       new_word = new_word .. string.char(ascii)\n            else\n        \
    \        new_word = new_word .. string.char(ascii - 127)\n            end\n  \
    \      end\n        result = result .. new_word\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplyumlump.lua:10:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmplyumlump.lua:10: in function 'candidate'\n\t/tmp/tmplyumlump.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  -- Note: Use a for loop to iterate through each\
    \ character in the string.\n  -- Use a while loop to iterate through each character\
    \ in the string.\n  -- Use a table to store the characters in ascending order.\n\
    \  -- Use a table to store the characters in descending order.\n  -- Use a table\
    \ to store the characters in ascending order and store the\n  -- characters in\
    \ descending order in the table.\n  -- Use a table to store the characters in\
    \ ascending order and store the\n  -- characters in descending order in the table.\n\
    \  -- Use a table to store the characters in ascending order and store the\n \
    \ -- characters in descending order in the table.\n  -- Use a table to store the\
    \ characters in ascending order and store the\n  -- characters in descending order\
    \ in the table.\n  -- Use a table to store the characters in ascending order and\
    \ store the\n  -- characters in descending order in the table.\n  -- Use a table\
    \ to store the characters in ascending order and store the\n  -- characters in\
    \ descending order in the table.\n  -- Use a table to store the characters in\
    \ ascending order and store the\n  -- characters in descending order in the table.\n\
    \  -- Use a table to store the characters in ascending order and store the\n \
    \ -- characters in descending order in the table.\n  -- Use a table to store the\
    \ characters in ascending order and store the\n  -- characters in descending order\
    \ in the table.\n  -- Use a table to store the characters in ascending order and\
    \ store the\n  -- characters in descending order in the table.\n  -- Use a table\
    \ to store the characters in ascending order and store the\n  -- characters in\
    \ descending order in the table.\n  -- Use a table to store the characters in\
    \ ascending order and store the\n  -- characters in descending order in the table.\n\
    \  -- Use a table to store the characters in ascending order and store the\n \
    \ -- characters in descending order in the table.\n  -- Use a table to store the\
    \ characters in ascending order and store the\n  -- characters in descending order\
    \ in the table.\n  -- Use a table to store the characters in ascending order and\
    \ store the\n  -- characters in descending order in the table.\n  -- Use a table\
    \ to store the characters in ascending order and store the\n  -- characters in\
    \ descending order in the table.\n  -- Use a table to store the characters in\
    \ ascending order and store the\n  -- characters in descending order in the table.\n\
    \  -- Use a table to store the characters in \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc3dbgj0p.lua:61: ''end'' expected (to close ''function'' at
    line 7) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local new_s = \"\"\n    local words = string.gmatch(s, \"([^ ]+)\") -- Split\
    \ string into words\n    for _, word in pairs(words) do\n        -- Convert each\
    \ word to ascii value\n        local word_ascii = string.byte(word)\n        --\
    \ Find out which character is bigger and replace it with that character\n    \
    \    local bigger_char = word_ascii\n        for i = 1, #word do\n           \
    \ bigger_char = bigger_char > string.byte(word[i]) and bigger_char or string.byte(word[i])\n\
    \        end\n        -- Replace the word with that character\n        new_s =\
    \ new_s .. string.sub(word, 1, #word) .. bigger_char\n    end\n    return new_s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyxakcwlw.lua:10:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpyxakcwlw.lua:10: in function 'candidate'\n\t/tmp/tmpyxakcwlw.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  -- return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl2b7f_wy.lua:15:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpl2b7f_wy.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  -- return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9v6xl_5.lua:15:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpz9v6xl_5.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  -- return \"antishuffle\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74sd6hhl.lua:15:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp74sd6hhl.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ char = string.sub(s,i,i)\n    if char == \" \" then\n      new_s = new_s ..\
    \ char\n    else\n      new_s = new_s .. string.char(string.byte(char) + 1)\n\
    \    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptrjmpnhv.lua:24:\
    \ expected: \"Hi\"\nactual: \"Ij\"\nstack traceback:\n\t/tmp/tmptrjmpnhv.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ char = string.sub(s,i,i)\n    local ascii = string.byte(char) -- ascii value\
    \ of char\n    if ascii < 97 then\n      new_s = new_s .. string.sub(s,i,i)\n\
    \    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe390ww1i.lua:23:\
    \ expected: \"Hi\"\nactual: \"H\"\nstack traceback:\n\t/tmp/tmpe390ww1i.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ word = s:sub(i,i)\n    local new_word = word\n    local j = 1\n    while j <=\
    \ #word do\n      local c = word[j]\n      local c_ascii = string.byte(c)\n  \
    \    local c_ord = string.byte(string.sub(word,j,j))\n      if c_ascii < c_ord\
    \ then\n        new_word = new_word .. string.sub(word,j,j-1)\n      else\n  \
    \      new_word = new_word .. c\n      end\n      j = j + 1\n    end\n    new_s\
    \ = new_s .. new_word\n  end\n  return new_s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl7vg34pn.lua:16:\
    \ bad argument #1 to 'byte' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpl7vg34pn.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpl7vg34pn.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == \" \" then\n      new_s = new_s .. string.sub(s,i,i)\n    else\n      new_s\
    \ = new_s .. string.sub(s,i,i) .. \" \"\n    end\n  end\n  return new_s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpye_d8e3k.lua:23:\
    \ expected: \"Hi\"\nactual: \"H i \"\nstack traceback:\n\t/tmp/tmpye_d8e3k.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    if c ~= \" \" then\n      new_s = new_s .. c\n  \
    \  end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjks2k_wr.lua:23:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpjks2k_wr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ char = string.sub(s,i,i)\n    local ascii = string.byte(char) -- ascii value\
    \ of char\n    if ascii < 127 then\n      new_s = new_s .. char\n    else\n  \
    \    new_s = new_s .. string.sub(s,i,i-1)\n    end\n  end\n  return new_s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmploo26s1t.lua:26:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmploo26s1t.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  local words = s:gmatch(\"\
    ([^ ]+)\") -- get all words in the sentence\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = word\n    local j = 1\n    while j <=\
    \ #word do\n      local c = string.byte(word:sub(j, j + 1))\n      if c > 127\
    \ then\n        local new_c = string.byte(new_word:sub(j, j + 1))\n        new_word\
    \ = new_word:sub(1, j - 1) .. string.char(new_c - 1)\n      else\n        local\
    \ new_c = string.byte(new_word:sub(j, j + 1))\n        new_word = new_word:sub(1,\
    \ j - 1) .. string.char(new_c + 1)\n      end\n      j = j + 1\n    end\n    new_s\
    \ = new_s .. new_word\n  end\n  return new_s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpji4f3qhn.lua:11:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmpji4f3qhn.lua:11: in function 'candidate'\n\t/tmp/tmpji4f3qhn.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = string.gmatch(s, \"[%w\\s]+\") -- Split string into words\n\
    \    local new_words = {}\n    for i = 1, #words do\n        local word = words[i]\n\
    \        local new_word = word\n        for j = 1, #word do\n            local\
    \ c = string.sub(word, j, j)\n            local ascii = string.byte(c)\n     \
    \       if ascii < 97 then\n                ascii = ascii + 26\n            else\n\
    \                ascii = ascii - 26\n            end\n            new_word = new_word\
    \ .. string.char(ascii)\n        end\n        new_words[i] = new_word\n    end\n\
    \    return table.concat(new_words, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbh7mv1x4.lua:10:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmpbh7mv1x4.lua:10: in function 'candidate'\n\t/tmp/tmpbh7mv1x4.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbhpqqvvg.lua:16:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpbhpqqvvg.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqrklced.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpeqrklced.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local words = s:gmatch(\"([^ ]+)\") -- get all words in string\n  local new_words\
    \ = {}\n  for _, word in pairs(words) do\n    local new_word = word\n    local\
    \ new_word_len = 0\n    for i = 1, #word do\n      local c = string.byte(word[i])\n\
    \      -- if c is between 32 and 126, then replace it with 32\n      if c >= 32\
    \ and c <= 126 then\n        c = 32\n      else\n        -- if c is between 97\
    \ and 122, then replace it with 97\n        if c >= 97 and c <= 122 then\n   \
    \       c = 97\n        else\n          -- if c is between 65 and 90, then replace\
    \ it with 65\n          if c >= 65 and c <= 90 then\n            c = 65\n    \
    \      else\n            -- if c is between 48 and 57, then replace it with 48\n\
    \            if c >= 48 and c <= 57 then\n              c = 48\n            end\n\
    \          end\n        end\n      end\n      new_word = new_word .. string.format(\"\
    %c\", c)\n      new_word_len = new_word_len + 1\n    end\n    new_words[#new_words\
    \ + 1] = new_word\n  end\n  return table.concat(new_words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6cs4srd5.lua:10:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp6cs4srd5.lua:10: in function 'candidate'\n\t/tmp/tmp6cs4srd5.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbhpqqvvg.lua:16:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpbhpqqvvg.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpow8v8emm.lua:16:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpow8v8emm.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  local s = s:gsub(\"%w+\", function (w) return w:lower()\
    \ end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"\
    %S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w)\
    \ return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n\
    \  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv6w_8zty.lua:38: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    if string.find(s,\
    \ \" \") then\n      local words = string.gmatch(s, \" ([^ ]+)\") -- get all words\
    \ in sentence\n      local new_words = {}\n      for _, word in pairs(words) do\n\
    \        table.insert(new_words, string.char(string.byte(word)))\n      end\n\
    \      table.sort(new_words, function(a, b) return string.byte(a) > string.byte(b)\
    \ end)\n      table.insert(new_s, table.concat(new_words, \" \"))\n    else\n\
    \      table.insert(new_s, string.char(string.byte(s[i])))\n    end\n  end\n \
    \ return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpav9ig8y4.lua:20:\
    \ bad argument #1 to 'byte' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpav9ig8y4.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpav9ig8y4.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpow8v8emm.lua:16:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpow8v8emm.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = s:gmatch(\"([^ ]+)\") -- get all words in the string\n    local\
    \ new_words = {}\n    for _, word in pairs(words) do\n        table.insert(new_words,\
    \ word:gsub(\"%W\", function (c) return string.char(tonumber(c)) end))\n    end\n\
    \    return table.concat(new_words, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_jx998bx.lua:10:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp_jx998bx.lua:10: in function 'candidate'\n\t/tmp/tmp_jx998bx.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ char = string.sub(s,i,i)\n    local ascii = string.byte(char) -- ascii value\
    \ of char\n    local new_char = string.char(ascii - 1)\n    new_s = new_s .. new_char\n\
    \  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1c7l6lkt.lua:22:\
    \ expected: \"Hi\"\nactual: \"Gh\"\nstack traceback:\n\t/tmp/tmp1c7l6lkt.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  -- return \"antishuffle\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74sd6hhl.lua:15:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp74sd6hhl.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = s:gmatch(\"[%w]+\")\n    local new_words = {}\n    local word_count\
    \ = {}\n    for i = 1, #words do\n        local word = words[i]\n        local\
    \ word_ascii = string.byte(word)\n        -- If the word is not in the dictionary,\
    \ add it to the dictionary.\n        if word_ascii >= #dictionary then\n     \
    \       table.insert(new_words, word)\n            table.insert(word_count, word_ascii)\n\
    \        end\n    end\n    -- Sort the dictionary in ascending order.\n    table.sort(word_count,\
    \ function(a, b) return word_count[a] < word_count[b] end)\n    -- Replace the\
    \ words in the string with the sorted words.\n    for i = 1, #words do\n     \
    \   local word = words[i]\n        local word_ascii = word_count[string.byte(word)]\n\
    \        -- If the word is not in the dictionary, add it to the dictionary.\n\
    \        if word_ascii >= #dictionary then\n            table.insert(new_words,\
    \ word)\n            table.insert(word_count, word_ascii)\n        end\n    end\n\
    \    return table.concat(new_words, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjdq3r8s_.lua:11:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmpjdq3r8s_.lua:11: in function 'candidate'\n\t/tmp/tmpjdq3r8s_.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    if string.find(c, \"[%a]\") then\n      new_s = new_s\
    \ .. c\n    else\n      new_s = new_s .. string.sub(s,i,i-1)\n    end\n  end\n\
    \  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptco15q1f.lua:25:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmptco15q1f.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    if string.find(c,\"[%a]\") then\n      new_s = new_s\
    \ .. string.sub(s,i,i)\n    else\n      new_s = new_s .. string.sub(s,i,i) ..\
    \ \" \"\n    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmsb5wkh.lua:25:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpdmsb5wkh.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local words = string.gmatch(s, \"[%w\\s]+\") --\
    \ Split string into words\n  local sorted_words = {}\n  for i = 1, #words do\n\
    \    sorted_words[i] = words[i] .. \" \" .. string.char(string.byte(words[i]))\
    \ -- Add space before each character\n  end\n  return table.concat(sorted_words,\
    \ \"  \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8e_l0wrn.lua:11:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmp8e_l0wrn.lua:11: in function 'candidate'\n\t/tmp/tmp8e_l0wrn.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == \" \" then\n      new_s = new_s .. string.sub(s,i,i)\n    else\n      new_s\
    \ = new_s .. string.sub(s,i,i) .. \" \"\n    end\n  end\n  return new_s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpye_d8e3k.lua:23:\
    \ expected: \"Hi\"\nactual: \"H i \"\nstack traceback:\n\t/tmp/tmpye_d8e3k.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = s:gmatch(\"[^ ]+\")\n    local new_words = {}\n    for _, word\
    \ in pairs(words) do\n        table.insert(new_words, word)\n    end\n    table.sort(new_words)\n\
    \    return table.concat(new_words, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc_pahlzm.lua:10:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpc_pahlzm.lua:10: in function 'candidate'\n\t/tmp/tmpc_pahlzm.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local result = {}\n  for i = 1, #s do\n    local\
    \ word = s:sub(i,i)\n    local new_word = \"\"\n    for j = 1, #word do\n    \
    \  local c = word:sub(j,j)\n      local ascii = string.byte(c)\n      if ascii\
    \ < 97 then\n        ascii = ascii + 26\n      else\n        ascii = ascii - 26\n\
    \      end\n      new_word = new_word .. string.char(ascii)\n    end\n    result[#result\
    \ + 1] = new_word\n  end\n  return table.concat(result,\" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14wg5y6_.lua:31:\
    \ expected: \"Hi\"\nactual: \"b O\"\nstack traceback:\n\t/tmp/tmp14wg5y6_.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  local words = s:gmatch(\"\
    [%w]+\")\n  for i = 1, #words do\n    local word = words[i]\n    local new_word\
    \ = word:gsub(\"%c\", function (c)\n      local ascii = tonumber(c)\n      if\
    \ ascii < 32 then\n        return c\n      else\n        return string.char(tonumber(c)\
    \ - 32)\n      end\n    end)\n    new_s = new_s .. new_word\n  end\n  return new_s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpce0fy2oj.lua:11:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmpce0fy2oj.lua:11: in function 'candidate'\n\t/tmp/tmpce0fy2oj.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local new_s = \"\"\n    for i = 1, #s do\n        local word = s:sub(i, i)\n\
    \        local new_word = word\n        for j = 1, #word do\n            local\
    \ c = word[j]\n            local ascii = string.byte(c)\n            if ascii\
    \ < 127 then\n                new_word = new_word .. string.char(ascii + 32)\n\
    \            else\n                new_word = new_word .. c\n            end\n\
    \        end\n        new_s = new_s .. new_word\n    end\n    return new_s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr5rjwrdi.lua:14:\
    \ bad argument #1 to 'byte' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpr5rjwrdi.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpr5rjwrdi.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = s:gmatch(\"([^ ]+)\") -- Split string into words\n    local\
    \ sorted_words = {}\n    for _, word in pairs(words) do\n        sorted_words[#sorted_words\
    \ + 1] = word\n    end\n    table.sort(sorted_words) -- Sort the words\n    local\
    \ sorted_s = \"\"\n    for _, word in pairs(sorted_words) do\n        sorted_s\
    \ = sorted_s .. word .. \" \"\n    end\n    return sorted_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1zwcspei.lua:10:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp1zwcspei.lua:10: in function 'candidate'\n\t/tmp/tmp1zwcspei.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpow8v8emm.lua:16:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpow8v8emm.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  -- Example: anti_shuffle(\"Hello World\") --> \"\
    Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n \
    \ -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\")\
    \ --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\
    \n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example:\
    \ anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\")\
    \ --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\
    \n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example:\
    \ anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\")\
    \ --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\
    \n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example:\
    \ anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\")\
    \ --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\
    \n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example:\
    \ anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hllo Wrdl\"\n  -- \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2l__jqh5.lua:47: ''end'' expected (to close ''function'' at
    line 7) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    if string.find(c, \"\\n\") then\n      new_s = new_s\
    \ .. c\n    else\n      new_s = new_s .. string.char(string.byte(c) - 32)\n  \
    \  end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt9rcdknk.lua:24:\
    \ expected: \"Hi\"\nactual: \"(I\"\nstack traceback:\n\t/tmp/tmpt9rcdknk.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ char = string.sub(s,i,i)\n    if char == \" \" then\n      new_s = new_s ..\
    \ char\n    else\n      new_s = new_s .. string.char(string.byte(char) + 1)\n\
    \    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptrjmpnhv.lua:24:\
    \ expected: \"Hi\"\nactual: \"Ij\"\nstack traceback:\n\t/tmp/tmptrjmpnhv.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ word = s:sub(i,i)\n    local new_word = word\n    for j = 1, #word do\n    \
    \  local c = word:sub(j,j)\n      local ascii = string.byte(c)\n      if ascii\
    \ < 97 then\n        ascii = ascii + 26\n      elseif ascii < 123 then\n     \
    \   ascii = ascii - 26\n      else\n        ascii = ascii - 32\n      end\n  \
    \    new_word = new_word .. string.char(ascii)\n    end\n    new_s = new_s ..\
    \ new_word\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5tw_d4cm.lua:33:\
    \ expected: \"Hi\"\nactual: \"HbiO\"\nstack traceback:\n\t/tmp/tmp5tw_d4cm.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == \" \" then\n      new_s = new_s .. \" \"\n    else\n      new_s = new_s ..\
    \ string.sub(s,i,i)\n    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa836682o.lua:24:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpa836682o.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local result = \"\"\n  for i = 1, #s do\n    if\
    \ s[i] ~= \" \" then\n      result = result .. s[i]\n    else\n      result =\
    \ result .. \"-\"\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqalhpg52.lua:12:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpqalhpg52.lua:12:\
    \ in function 'candidate'\n\t/tmp/tmpqalhpg52.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbhpqqvvg.lua:16:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpbhpqqvvg.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local words = string.gmatch(s, \"[%w\\s]+\") --\
    \ Split string into words\n  local new_words = {}\n  for i = 1, #words do\n  \
    \  local word = words[i]\n    local new_word = word\n    local j = 1\n    while\
    \ true do\n      local c = string.byte(new_word)\n      local new_word = string.sub(anti_shuffle(new_word),\
    \ 1, j) .. string.sub(anti_shuffle(new_word), j + 1, #new_word)\n      if not\
    \ c then\n        break\n      end\n      j = j + 1\n    end\n    new_words[#new_words\
    \ + 1] = new_word\n  end\n  return table.concat(new_words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphjvlfed3.lua:11:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmphjvlfed3.lua:11: in function 'candidate'\n\t/tmp/tmphjvlfed3.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local words = string.gmatch(s, \"[%w\\s]+\") --\
    \ Split string into words\n  local sorted_words = {}\n  local word_index = 1\n\
    \  for i = 1, #words do\n    sorted_words[word_index] = words[i] -- Store words\
    \ in sorted order\n    word_index = word_index + 1\n  end\n  -- Write your code\
    \ here\n  return table.concat(sorted_words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp1emt6be.lua:12:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmpp1emt6be.lua:12: in function 'candidate'\n\t/tmp/tmpp1emt6be.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local result = \"\"\n  for i = 1, #s do\n    local\
    \ word = s:sub(i,i)\n    local new_word = \"\"\n    for j = 1, #word do\n    \
    \  local ascii = string.byte(word[j])\n      if ascii < 65 then\n        ascii\
    \ = ascii + 32\n      elseif ascii < 91 then\n        ascii = ascii - 32\n   \
    \   else\n        ascii = ascii - 64\n      end\n      new_word = new_word ..\
    \ string.char(ascii)\n    end\n    result = result .. new_word\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgq4yezgw.lua:14:\
    \ bad argument #1 to 'byte' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpgq4yezgw.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpgq4yezgw.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local words = {}\n  for word in string.gmatch(s,\
    \ \"([^ ]+)\") do\n    table.insert(words, word)\n  end\n  table.sort(words)\n\
    \  local new_s = \"\"\n  for _, word in ipairs(words) do\n    new_s = new_s ..\
    \ word .. \" \"\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgrjg5vks.lua:24:\
    \ expected: \"Hi\"\nactual: \"Hi \"\nstack traceback:\n\t/tmp/tmpgrjg5vks.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbhpqqvvg.lua:16:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpbhpqqvvg.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  local words = s:gmatch(\"\
    ([^ ]+)\")\n  for i = 1, #words do\n    local word = words[i]\n    local new_word\
    \ = word\n    local j = 1\n    while j <= #word do\n      local c = string.byte(word:sub(1,\
    \ j))\n      if c > 127 then\n        c = string.byte(word:sub(1, j))\n      end\n\
    \      if c < 97 then\n        c = string.byte(word:sub(1, j))\n      end\n  \
    \    new_word = new_word .. string.char(c)\n      j = j + 1\n    end\n    new_s\
    \ = new_s .. new_word\n  end\n  return new_s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpec8zgxt5.lua:11:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmpec8zgxt5.lua:11: in function 'candidate'\n\t/tmp/tmpec8zgxt5.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpow8v8emm.lua:16:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpow8v8emm.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local words = string.gmatch(s, \"([^ ]+)\") -- Split string into words\n  local\
    \ new_words = {}\n  local new_word = \"\"\n  local i = 0\n  for word in words\
    \ do\n    i = i + 1\n    new_word = new_word .. word\n    if i > #words then break\
    \ end\n  end\n  return new_word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptw8phy43.lua:15:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmptw8phy43.lua:15: in function 'candidate'\n\t/tmp/tmptw8phy43.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == \" \" then\n      new_s = new_s .. \" \"\n    else\n      new_s = new_s ..\
    \ string.sub(s,i,i)\n    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa836682o.lua:24:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpa836682o.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  -- return \"antishuffle\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74sd6hhl.lua:15:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp74sd6hhl.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    if s[i]\
    \ ~= \" \" then\n      new_s = new_s .. s[i]\n    else\n      new_s = new_s ..\
    \ \"-\"\n    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjz7a2o_3.lua:12:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpjz7a2o_3.lua:12:\
    \ in function 'candidate'\n\t/tmp/tmpjz7a2o_3.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  -- return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl2b7f_wy.lua:15:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpl2b7f_wy.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = string.gmatch(s, \"([^ ]+)\") -- Split string into words\n\
    \    local new_words = {}\n    local new_s = \"\"\n    for i = 1, #words do\n\
    \        local word = words[i]\n        local new_word = word\n        local j\
    \ = 1\n        while j <= #word do\n            local c = string.byte(word:sub(j,\
    \ j + 1))\n            local new_c = c\n            if c > 127 then\n        \
    \        new_c = string.byte(word:sub(j, j + 1))\n                new_word = new_word\
    \ .. string.char(c - 127)\n            else\n                new_word = new_word\
    \ .. string.char(c + 127)\n            end\n            j = j + 1\n        end\n\
    \        new_words[#new_words + 1] = new_word\n    end\n    for i = 1, #words\
    \ do\n        local word = words[i]\n        local new_word = new_words[i]\n \
    \       new_s = new_s .. new_word .. \" \"\n    end\n    return new_s\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwcevg7zj.lua:11:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmpwcevg7zj.lua:11: in function 'candidate'\n\t/tmp/tmpwcevg7zj.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = s:gmatch(\"([^ ]+)\") -- Split string into words\n    local\
    \ new_words = {}\n    local new_s = \"\"\n    for i = 1, #words do\n        local\
    \ word = words[i]\n        local new_word = \"\"\n        for j = 1, #word do\n\
    \            local c = word[j]\n            local ascii = string.byte(c)\n   \
    \         if ascii < 32 then\n                new_word = new_word .. string.char((ascii\
    \ + 32) % 256)\n            else\n                new_word = new_word .. c\n \
    \           end\n        end\n        new_words[#new_words+1] = new_word\n   \
    \ end\n    for i = 1, #words do\n        local word = words[i]\n        local\
    \ new_word = \"\"\n        for j = 1, #word do\n            local c = word[j]\n\
    \            local ascii = string.byte(c)\n            if ascii < 32 then\n  \
    \              new_word = new_word .. string.char((ascii - 32 + 256) % 256)\n\
    \            else\n                new_word = new_word .. c\n            end\n\
    \        end\n        new_s = new_s .. new_word\n    end\n    return new_s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zmhez81.lua:11:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmp6zmhez81.lua:11: in function 'candidate'\n\t/tmp/tmp6zmhez81.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  -- return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl2b7f_wy.lua:15:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpl2b7f_wy.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  local words = s:gmatch(\"\
    ([^ ]+)\")\n  for _, word in pairs(words) do\n    local new_word = word:gsub(\"\
    %W\", function (c)\n      return string.char((string.byte(c) - string.byte(\"\
    a\") + 26) % 26 + string.byte(\"a\"))\n    end)\n    new_s = new_s .. new_word\
    \ .. \" \"\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbzfkff0v.lua:11:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpbzfkff0v.lua:11: in function 'candidate'\n\t/tmp/tmpbzfkff0v.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local words = s:gmatch(\"([^ ]+)\") -- Split string into words\n  local result\
    \ = \"\" -- Initialize result string\n  for _, word in pairs(words) do\n    local\
    \ new_word = word:gsub(\"%W\", function (c) -- Replace each word with its ascii\
    \ value\n      return string.char(tonumber(c))\n    end)\n    result = result\
    \ .. new_word .. \" \"\n  end\n  return result:sub(1, #result) -- Remove last\
    \ space\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvh46utwf.lua:10:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpvh46utwf.lua:10: in function 'candidate'\n\t/tmp/tmpvh46utwf.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  local words = s:gmatch(\"\
    [%w-]+\")\n  for i = 1, #words do\n    local word = words[i]\n    local new_word\
    \ = word\n    local j = 1\n    while j <= #word do\n      local c = string.byte(word:sub(1,\
    \ j))\n      if c > 127 then\n        local new_c = string.byte(new_word:sub(1,\
    \ j))\n        new_word:sub(1, j) = string.char(new_c - 1)\n      else\n     \
    \   local new_c = string.byte(new_word:sub(1, j))\n        new_word:sub(1, j)\
    \ = string.char(new_c + 1)\n      end\n      j = j + 1\n    end\n    new_s = new_s\
    \ .. new_word .. \" \"\n  end\n  return new_s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprpg0m1fq.lua:19: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpow8v8emm.lua:16:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpow8v8emm.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local words = s:gmatch(\"([^ ]+)\") -- split string\
    \ into words\n  local sorted_words = {}\n  for i = 1, #words do\n    sorted_words[#sorted_words+1]\
    \ = words[i] -- insert each word into sorted list\n  end\n  sorted_words[#sorted_words+1]\
    \ = \"\" -- append a blank word at the end\n  -- return sorted_words\n  return\
    \ table.concat(sorted_words, \"-\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxp_2wtvd.lua:11:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmpxp_2wtvd.lua:11: in function 'candidate'\n\t/tmp/tmpxp_2wtvd.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  -- return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9v6xl_5.lua:15:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpz9v6xl_5.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ char = string.sub(s,i,i)\n    if char == \" \" then\n      new_s = new_s ..\
    \ \" \"\n    else\n      new_s = new_s .. string.char(string.byte(char) + 1)\n\
    \    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcpgc4wtd.lua:24:\
    \ expected: \"Hi\"\nactual: \"Ij\"\nstack traceback:\n\t/tmp/tmpcpgc4wtd.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  -- return \"antishuffle\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74sd6hhl.lua:15:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp74sd6hhl.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpow8v8emm.lua:16:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpow8v8emm.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == \" \" then\n      new_s = new_s .. string.sub(s,i,i)\n    else\n      new_s\
    \ = new_s .. string.sub(s,i,i) .. \" \"\n    end\n  end\n  return new_s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpye_d8e3k.lua:23:\
    \ expected: \"Hi\"\nactual: \"H i \"\nstack traceback:\n\t/tmp/tmpye_d8e3k.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpow8v8emm.lua:16:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpow8v8emm.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpow8v8emm.lua:16:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpow8v8emm.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local new_s = \"\"\n    local words = s:gmatch(\"([^ ]+)\")\n    for _, word\
    \ in pairs(words) do\n        local new_word = word\n        for i = 1, #word\
    \ do\n            local c = string.sub(word, 1, i)\n            local n = string.byte(c)\n\
    \            new_word = new_word .. string.char(n + #new_word)\n        end\n\
    \        new_s = new_s .. new_word\n    end\n    return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprx_0ia8n.lua:10:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmprx_0ia8n.lua:10: in function 'candidate'\n\t/tmp/tmprx_0ia8n.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpow8v8emm.lua:16:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpow8v8emm.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ char = string.sub(s,i,i)\n    if char == \" \" then\n      new_s = new_s ..\
    \ char\n    else\n      new_s = new_s .. string.char(string.byte(char) + 1)\n\
    \    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptrjmpnhv.lua:24:\
    \ expected: \"Hi\"\nactual: \"Ij\"\nstack traceback:\n\t/tmp/tmptrjmpnhv.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = string.gmatch(s, \"([^ ]+)\") -- Split string into words\n\
    \    local new_words = {}\n    for _, word in pairs(words) do\n        table.insert(new_words,\
    \ string.char(string.byte(word)))\n    end\n    return table.concat(new_words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprc6dcoza.lua:10:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmprc6dcoza.lua:10: in function 'candidate'\n\t/tmp/tmprc6dcoza.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your solution here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmne9kp3r.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpmne9kp3r.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  local words = s:gmatch(\"\
    [%w]+\")\n  for i = 1, #words do\n    local word = words[i]\n    local new_word\
    \ = word\n    local j = 1\n    while j <= #word do\n      local c = word[j]\n\
    \      local c_ascii = string.byte(c)\n      if c_ascii < 65 then\n        --\
    \ If the character is lower case then swap it with upper case\n        if c_ascii\
    \ < 97 then\n          new_word = new_word .. string.char(97 + c_ascii - 65)\n\
    \        else\n          new_word = new_word .. string.char(c_ascii - 97)\n  \
    \      end\n      else\n        -- If the character is upper case then swap it\
    \ with lower case\n        if c_ascii < 123 then\n          new_word = new_word\
    \ .. string.char(123 + c_ascii - 64)\n        else\n          new_word = new_word\
    \ .. string.char(c_ascii - 123)\n        end\n      end\n      j = j + 1\n   \
    \ end\n    new_s = new_s .. new_word\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpruewi7xf.lua:11:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmpruewi7xf.lua:11: in function 'candidate'\n\t/tmp/tmpruewi7xf.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbhpqqvvg.lua:16:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpbhpqqvvg.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == \" \" then\n      new_s = new_s .. \" \"\n    else\n      new_s = new_s ..\
    \ string.sub(s,i,i)\n    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa836682o.lua:24:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpa836682o.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local s = s:gsub(\"%w+\", function (w)\n    local\
    \ s = \"\"\n    for i = 1, #w do\n      s = s .. string.char(string.byte(w, i)\
    \ - i)\n    end\n    return s\n  end)\n  s = s:gsub(\"%S+\", function (w)\n  \
    \  local s = \"\"\n    for i = 1, #w do\n      s = s .. string.char(string.byte(w,\
    \ i) + i)\n    end\n    return s\n  end)\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa2lzv00v.lua:30:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpa2lzv00v.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ char = string.sub(s,i,i)\n    if char == \" \" then\n      new_s = new_s ..\
    \ char\n    else\n      new_s = new_s .. string.char(string.byte(char) - 64)\n\
    \    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_42_sz56.lua:24:\
    \ expected: \"Hi\"\nactual: \"\b)\"\nstack traceback:\n\t/tmp/tmp_42_sz56.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local new_s = \"\"\n  for i = 1, #s do\n    local word = s:sub(i,i)\n    local\
    \ new_word = \"\"\n    for j = 1, #word do\n      local c = word:sub(j,j)\n  \
    \    local ascii = string.byte(c)\n      local new_c = string.char(ascii - 1)\n\
    \      new_word = new_word .. new_c\n    end\n    new_s = new_s .. new_word\n\
    \  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi2xuwf65.lua:26:\
    \ expected: \"Hi\"\nactual: \"Gh\"\nstack traceback:\n\t/tmp/tmpi2xuwf65.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ word = s:sub(i,i)\n    local new_word = word\n    local j = 1\n    while j <=\
    \ #word do\n      local c = word:sub(j,j)\n      local ascii = string.byte(c)\n\
    \      if ascii < 97 then\n        ascii = ascii + 26\n      else\n        ascii\
    \ = ascii - 26\n      end\n      new_word = new_word .. string.char(ascii)\n \
    \     j = j + 1\n    end\n    new_s = new_s .. new_word\n  end\n  return new_s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zuxgoe2.lua:33:\
    \ expected: \"Hi\"\nactual: \"HbiO\"\nstack traceback:\n\t/tmp/tmp5zuxgoe2.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  -- return \"antishuffle\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74sd6hhl.lua:15:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp74sd6hhl.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  -- return \"antishuffle\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74sd6hhl.lua:15:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp74sd6hhl.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ word = s:sub(i,i)\n    if word ~= \"\" then\n      new_s = new_s .. word:gsub(\"\
    %w+\", function(c) return c:lower() end)\n    end\n  end\n  return new_s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2t_cof_.lua:22:\
    \ expected: \"Hi\"\nactual: \"hi\"\nstack traceback:\n\t/tmp/tmpy2t_cof_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  -- return \"antishuffle\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74sd6hhl.lua:15:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp74sd6hhl.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  local words = s:gmatch(\"\
    [%w]+\")\n  for i = 1, #words do\n    local word = words[i]\n    local new_word\
    \ = word\n    local j = 1\n    while j <= #word do\n      local c = word[j]\n\
    \      if c ~= \" \" then\n        new_word = new_word .. c\n      else\n    \
    \    new_word = new_word .. word[j + 1]\n      end\n      j = j + 1\n    end\n\
    \    new_s = new_s .. new_word\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcs4u8i4h.lua:11:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmpcs4u8i4h.lua:11: in function 'candidate'\n\t/tmp/tmpcs4u8i4h.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local new_s = \"\"\n    local words = s:gmatch(\"([^ ]+)\") -- get all words\
    \ in the sentence\n    for _, word in ipairs(words) do\n        local new_word\
    \ = word:gsub(\"%W\", function (c) \n            return string.char((string.byte(c)\
    \ - string.byte(\"a\"))) \n        end) -- replace each word with its ascii value\n\
    \        new_s = new_s .. new_word .. \" \"\n    end\n    return new_s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfn7c9ku3.lua:10:\
    \ bad argument #1 to 'ipairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpfn7c9ku3.lua:10: in function 'candidate'\n\t/tmp/tmpfn7c9ku3.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local words = s:gmatch(\"([^ ]+)\") -- Split string into words\n  local new_words\
    \ = {}\n  for i = 1, #words do\n    local word = words[i]\n    local new_word\
    \ = word\n    for j = 1, #word do\n      local c = word[j]\n      local ascii\
    \ = string.byte(c)\n      if ascii < 97 then\n        ascii = ascii + 26\n   \
    \   elseif ascii < 123 then\n        ascii = ascii - 26\n      else\n        ascii\
    \ = ascii - 32\n      end\n      new_word = new_word .. string.char(ascii)\n \
    \   end\n    new_words[i] = new_word\n  end\n  return table.concat(new_words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_etygvsg.lua:10:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmp_etygvsg.lua:10: in function 'candidate'\n\t/tmp/tmp_etygvsg.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == \" \" then\n      new_s = new_s .. string.sub(s,i,i)\n    else\n      new_s\
    \ = new_s .. string.sub(s,i,i) .. \" \"\n    end\n  end\n  return new_s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpye_d8e3k.lua:23:\
    \ expected: \"Hi\"\nactual: \"H i \"\nstack traceback:\n\t/tmp/tmpye_d8e3k.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ char = string.sub(s,i,i)\n    if char == \" \" then\n      new_s = new_s ..\
    \ char\n    else\n      new_s = new_s .. string.char(string.byte(char) + 1)\n\
    \    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptrjmpnhv.lua:24:\
    \ expected: \"Hi\"\nactual: \"Ij\"\nstack traceback:\n\t/tmp/tmptrjmpnhv.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = s:gmatch(\"[^ ]+\")\n    local new_words = {}\n    for _, word\
    \ in pairs(words) do\n        local new_word = \"\"\n        for i = 1, #word\
    \ do\n            local c = word[i]\n            local ascii = string.byte(c)\n\
    \            if ascii < 65 then\n                new_word = new_word .. string.char(ascii\
    \ + 32)\n            elseif ascii < 91 then\n                new_word = new_word\
    \ .. string.char(ascii - 32)\n            else\n                new_word = new_word\
    \ .. c\n            end\n        end\n        new_words[#new_words + 1] = new_word\n\
    \    end\n    return table.concat(new_words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcsauz4fb.lua:10:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpcsauz4fb.lua:10: in function 'candidate'\n\t/tmp/tmpcsauz4fb.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  -- Example: anti_shuffle(\"Hello World\") --> \"\
    Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo World\"\n\
    \  -- Example: anti_shuffle(\"Hello World\") --> \"Hello World\"\n  -- Example:\
    \ anti_shuffle(\"Hello World\") --> \"Hello Wrdl\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hello World\"\n  -- Example: anti_shuffle(\"Hello World\"\
    ) --> \"Hello World\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hello\
    \ World\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hello World\"\n \
    \ -- Example: anti_shuffle(\"Hello World\") --> \"Hello World\"\n  -- Example:\
    \ anti_shuffle(\"Hello World\") --> \"Hello World\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hello World\"\n  -- Example: anti_shuffle(\"Hello World\"\
    ) --> \"Hello World\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hello\
    \ World\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hello World\"\n \
    \ -- Example: anti_shuffle(\"Hello World\") --> \"Hello World\"\n  -- Example:\
    \ anti_shuffle(\"Hello World\") --> \"Hello World\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hello World\"\n  -- Example: anti_shuffle(\"Hello World\"\
    ) --> \"Hello World\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hello\
    \ World\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hello World\"\n \
    \ -- Example: anti_shuffle(\"Hello World\") --> \"Hello World\"\n  -- Example:\
    \ anti_shuffle(\"Hello World\") --> \"Hello World\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hello World\"\n  -- Example: anti_shuffle(\"Hello World\"\
    ) --> \"Hello World\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hello\
    \ World\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hello World\"\n \
    \ -- Example: anti_shuffle(\"Hello World\") --> \"Hello World\"\n  -- Example:\
    \ anti_shuffle(\"Hello World\") --> \"Hello World\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hello World\"\n  -- Example: anti\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn521b6rk.lua:52: ''end'' expected (to close ''function'' at
    line 7) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local words = string.gmatch(s, \"([^ ]+)\") -- split on space\n  local new_words\
    \ = {}\n  for i = 1, #words do\n    local word = words[i]\n    local new_word\
    \ = \"\"\n    for j = 1, #word do -- loop through each character in word\n   \
    \   local c = word[j]\n      local ascii = string.byte(c) -- get ascii value of\
    \ character\n      if ascii < 97 then -- if ascii value is less than 97\n    \
    \    new_word = new_word .. string.char(97 + ascii - 1) -- replace with ascii\
    \ value\n      else -- ascii value is greater than 97\n        new_word = new_word\
    \ .. string.char(ascii - 97) -- replace with ascii value\n      end\n    end\n\
    \    new_words[i] = new_word -- add new word to new_words\n  end\n  return table.concat(new_words)\
    \ -- return new string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7gkklajm.lua:10:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmp7gkklajm.lua:10: in function 'candidate'\n\t/tmp/tmp7gkklajm.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local result = \"\"\n  for i = 1, #s do\n    local\
    \ word = s:sub(i,i)\n    local new_word = \"\"\n    for j = 1, #word do\n    \
    \  local ascii = string.byte(word:sub(j,j))\n      if ascii < 65 then\n      \
    \  new_word = new_word .. string.char(97 + ascii)\n      elseif ascii < 91 then\n\
    \        new_word = new_word .. string.char(ascii - 65)\n      else\n        new_word\
    \ = new_word .. string.char(ascii - 90)\n      end\n    end\n    result = result\
    \ .. new_word\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpij29cpcm.lua:31:\
    \ expected: \"Hi\"\nactual: \"\a\x0F\"\nstack traceback:\n\t/tmp/tmpij29cpcm.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  -- return \"antishuffle\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74sd6hhl.lua:15:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp74sd6hhl.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbhpqqvvg.lua:16:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpbhpqqvvg.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  -- return string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2bfub_oi.lua:15:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp2bfub_oi.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  -- Example: anti_shuffle(\"Hello World\") --> \"\
    Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World!\") --> \"Hllo Wrdl!\"\n\
    \  -- Example: anti_shuffle(\"Hello World!!\") --> \"Hllo Wrdl!!\"\n  -- Example:\
    \ anti_shuffle(\"Hello World!!!\") --> \"Hllo Wrdl!!!\"\n  -- Example: anti_shuffle(\"\
    Hello World!!!!\") --> \"Hllo Wrdl!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!\"\
    ) --> \"Hllo Wrdl!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!\") -->\
    \ \"Hllo Wrdl!!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!!\") -->\
    \ \"Hllo Wrdl!!!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!!\") -->\
    \ \"Hllo Wrdl!!!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!!\") -->\
    \ \"Hllo Wrdl!!!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!!\") -->\
    \ \"Hllo Wrdl!!!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!!\") -->\
    \ \"Hllo Wrdl!!!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!!\") -->\
    \ \"Hllo Wrdl!!!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!!\") -->\
    \ \"Hllo Wrdl!!!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!!\") -->\
    \ \"Hllo Wrdl!!!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!!\") -->\
    \ \"Hllo Wrdl!!!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!!\") -->\
    \ \"Hllo Wrdl!!!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!!\") -->\
    \ \"Hllo Wrdl!!!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!!\") -->\
    \ \"Hllo Wrdl!!!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!!\") -->\
    \ \"Hllo Wrdl!!!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!!\") -->\
    \ \"Hllo Wrd\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqmfhw1x3.lua:43: ''end'' expected (to close ''function'' at
    line 7) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  -- return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl2b7f_wy.lua:15:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpl2b7f_wy.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpow8v8emm.lua:16:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpow8v8emm.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your solution here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmne9kp3r.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpmne9kp3r.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  -- return string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2bfub_oi.lua:15:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp2bfub_oi.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    if c ~= \" \" then\n      new_s = new_s .. c\n  \
    \  else\n      new_s = new_s .. \" \"\n    end\n  end\n  return new_s\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx05egure.lua:25:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpx05egure.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    if string.find(c, \"[%a]\") then\n      new_s = new_s\
    \ .. string.sub(s,i,i)\n    else\n      new_s = new_s .. c\n    end\n  end\n \
    \ return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpojfdb1iy.lua:25:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpojfdb1iy.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    if c ~= \" \" then\n      new_s = new_s .. c\n  \
    \  else\n      new_s = new_s .. string.sub(s,i,i)\n    end\n  end\n  return new_s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp209dzqh1.lua:25:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmp209dzqh1.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  local words = s:gmatch(\"\
    [%w-]+\")\n  for _, word in pairs(words) do\n    local new_word = word\n    local\
    \ new_word_len = 0\n    for i = 1, #word do\n      local c = string.byte(word[i])\n\
    \      if c > 127 then\n        c = string.byte(string.sub(word, 1, i) + string.sub(word,\
    \ i + 1))\n      end\n      new_word = new_word .. string.char(c)\n      new_word_len\
    \ = new_word_len + 1\n    end\n    new_s = new_s .. new_word\n  end\n  return\
    \ new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ei44rxz.lua:11:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp4ei44rxz.lua:11: in function 'candidate'\n\t/tmp/tmp4ei44rxz.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your solution here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmne9kp3r.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpmne9kp3r.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ char = string.sub(s,i,i)\n    if char == \" \" then\n      new_s = new_s ..\
    \ char\n    else\n      new_s = new_s .. string.char(string.byte(char) + 1)\n\
    \    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptrjmpnhv.lua:24:\
    \ expected: \"Hi\"\nactual: \"Ij\"\nstack traceback:\n\t/tmp/tmptrjmpnhv.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ char = string.sub(s,i,i)\n    if char == \" \" then\n      new_s = new_s ..\
    \ \" \"\n    else\n      new_s = new_s .. string.char(string.byte(char) - 32)\n\
    \    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxbx1tcj4.lua:24:\
    \ expected: \"Hi\"\nactual: \"(I\"\nstack traceback:\n\t/tmp/tmpxbx1tcj4.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ char = string.sub(s,i,i)\n    local ascii = string.byte(char) -- ascii value\
    \ of char\n    if ascii < 32 then\n      new_s = new_s .. char\n    else\n   \
    \   new_s = new_s .. string.sub(s,i,i-1) .. string.sub(s,i+1,i)\n    end\n  end\n\
    \  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_hv89au.lua:25:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpt_hv89au.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ char = string.sub(s,i,i)\n    local ascii = string.byte(char) -- ascii value\
    \ of char\n    if ascii < 97 then\n      new_s = new_s .. string.sub(s,i,i)\n\
    \    elseif ascii < 123 then\n      new_s = new_s .. string.sub(s,i,i-1) .. string.sub(s,i+1,i)\n\
    \    else\n      new_s = new_s .. string.sub(s,i,i-1) .. string.sub(s,i+1,i-1)\
    \ .. string.sub(s,i+2,i)\n    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw82qnee3.lua:27:\
    \ expected: \"Hi\"\nactual: \"H\"\nstack traceback:\n\t/tmp/tmpw82qnee3.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqrklced.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpeqrklced.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    if c ~= \" \" then\n      new_s = new_s .. c\n  \
    \  end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjks2k_wr.lua:23:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpjks2k_wr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ char = string.sub(s,i,i)\n    if char == \" \" then\n      new_s = new_s ..\
    \ char\n    else\n      new_s = new_s .. string.char(math.abs(string.byte(char)))\n\
    \    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgfgx4__m.lua:25:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpgfgx4__m.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ word = s:sub(i,i)\n    local new_word = \"\"\n    for j = 1, #word do\n    \
    \  local c = word:sub(j,j)\n      local ascii = string.byte(c)\n      if ascii\
    \ < 97 then\n        ascii = ascii + 26\n      elseif ascii < 123 then\n     \
    \   ascii = ascii - 26\n      else\n        ascii = ascii - 32\n      end\n  \
    \    new_word = new_word .. string.char(ascii)\n    end\n    new_s = new_s ..\
    \ new_word\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6gmkv14.lua:33:\
    \ expected: \"Hi\"\nactual: \"bO\"\nstack traceback:\n\t/tmp/tmpo6gmkv14.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ char = string.sub(s,i,i)\n    if char == \" \" then\n      new_s = new_s ..\
    \ char\n    else\n      new_s = new_s .. string.char(string.byte(char) + 64)\n\
    \    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprf7w43du.lua:24:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmprf7w43du.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  -- return \"antishuffle\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74sd6hhl.lua:15:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp74sd6hhl.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local result = \"\"\n  for i = 1, #s do\n    local\
    \ word = s:sub(i,i)\n    local new_word = \"\"\n    for j = 1, #word do\n    \
    \  local c = word:sub(j,j)\n      local ascii = string.byte(c)\n      local new_c\
    \ = string.char(ascii-32)\n      new_word = new_word .. new_c\n    end\n    result\
    \ = result .. new_word\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5vn0bf8f.lua:27:\
    \ expected: \"Hi\"\nactual: \"(I\"\nstack traceback:\n\t/tmp/tmp5vn0bf8f.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    if string.find(c, \"[%a]\") then\n      new_s = new_s\
    \ .. string.sub(s,i,i)\n    else\n      new_s = new_s .. c\n    end\n  end\n \
    \ return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpojfdb1iy.lua:25:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpojfdb1iy.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local words = s:gmatch(\"[^ ]+\")\n  local new_words\
    \ = {}\n  for i = 1, #words do\n    local word = words[i]\n    local new_word\
    \ = word\n    local j = 1\n    while j <= #word do\n      local c = string.byte(word:sub(j,\
    \ j))\n      if c > 127 then\n        local new_c = string.byte(new_word:sub(j,\
    \ j))\n        new_word:insert(new_c - 32)\n      else\n        new_word:insert(c)\n\
    \      end\n      j = j + 1\n    end\n    new_words[i] = new_word\n  end\n  return\
    \ table.concat(new_words, \"_\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8f0e9n1z.lua:11:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmp8f0e9n1z.lua:11: in function 'candidate'\n\t/tmp/tmp8f0e9n1z.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local words = {}\n  local spaces = {}\n  for i =\
    \ 1, #s do\n    if s[i] ~= ' ' then\n      table.insert(words, s[i])\n      table.insert(spaces,\
    \ ' ') -- insert space after each word\n    else\n      table.insert(words, s[i])\n\
    \      table.insert(spaces, ' ') -- insert space after each word\n    end\n  end\n\
    \  table.sort(words)\n  table.sort(spaces)\n  local new_s = ''\n  for i = 1, #words\
    \ do\n    new_s = new_s .. words[i] .. spaces[i]\n  end\n  return new_s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxfjua94_.lua:32:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpxfjua94_.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = s:gmatch(\"([^ ]+)\") -- Split string into words\n    local\
    \ new_words = {}\n    for _, word in pairs(words) do\n        local new_word =\
    \ word\n        for i = 1, #word do\n            local c = string.sub(word, i,\
    \ i)\n            local ascii = string.byte(c)\n            if ascii < 97 then\n\
    \                new_word = new_word .. string.sub(word, i - 1, i)\n         \
    \   end\n        end\n        new_words[#new_words + 1] = new_word\n    end\n\
    \    return table.concat(new_words, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0qvoqbx5.lua:10:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp0qvoqbx5.lua:10: in function 'candidate'\n\t/tmp/tmp0qvoqbx5.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  -- return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9v6xl_5.lua:15:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpz9v6xl_5.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = string.gmatch(s, \"([^ ]+)\") -- Split string into words\n\
    \    local new_words = {}\n    local new_word = \"\"\n    local i = 0\n    while\
    \ i < #words do\n        -- Find a word that has all its characters arranged in\
    \ ascending order\n        local word = words[i]\n        local j = 1\n      \
    \  while j < #word and word[j] < word[j+1] do\n            j = j + 1\n       \
    \ end\n        -- If word has all its characters arranged in ascending order,\n\
    \        -- append it to new_words and increment i\n        if j == #word then\n\
    \            new_words[#new_words+1] = word\n            i = i + 1\n        else\n\
    \            -- Otherwise, append the word and increment i\n            new_word\
    \ = new_word .. word[j]\n            i = i + 1\n        end\n    end\n    return\
    \ new_word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8f45xjkd.lua:12:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmp8f45xjkd.lua:12: in function 'candidate'\n\t/tmp/tmp8f45xjkd.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == \" \" then\n      new_s = new_s .. \" \"\n    else\n      new_s = new_s ..\
    \ string.sub(s,i,i)\n    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa836682o.lua:24:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpa836682o.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpow8v8emm.lua:16:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpow8v8emm.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    if c ~= \" \" then\n      new_s = new_s .. c\n  \
    \  end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjks2k_wr.lua:23:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpjks2k_wr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local new_s = \"\"\n    local words = string.gmatch(s, \"([^ ]+)\")\n   \
    \ for _, word in pairs(words) do\n        local new_word = word\n        local\
    \ new_words = {}\n        for i = 1, #word do\n            local c = string.byte(word[i])\n\
    \            new_words[i] = string.char(c > 127 ? 255 : c - 32)\n        end\n\
    \        new_word = table.concat(new_words, \"-\")\n        new_s = new_s .. new_word\n\
    \    end\n    return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3_gc4jtk.lua:15: '')'' expected near ''?''

    '
  stdout: ''
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local words = string.gmatch(s, '[%w\\s]+')\n  local\
    \ new_words = {}\n  for i = 1, #words do\n    local word = words[i]\n    local\
    \ new_word = ''\n    for j = 1, #word do\n      local c = string.byte(word[j])\n\
    \      new_word = new_word .. string.char((c - 97) + 64)\n    end\n    new_words[#new_words\
    \ + 1] = new_word\n  end\n  return table.concat(new_words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsqkh7viq.lua:11:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmpsqkh7viq.lua:11: in function 'candidate'\n\t/tmp/tmpsqkh7viq.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == \" \" then\n      new_s = new_s .. string.sub(s,i,i)\n    else\n      new_s\
    \ = new_s .. string.sub(s,i,i) + string.sub(s,i+1,i+1)\n    end\n  end\n  return\
    \ new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx1c85gui.lua:14:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmpx1c85gui.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpx1c85gui.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local words = string.gmatch(s, \"([^ ]+)\")\n  local\
    \ new_words = {}\n  for _, word in pairs(words) do\n    local new_word = word\n\
    \    local new_word_len = 0\n    for i = 1, #word do\n      local c = string.byte(word[i])\n\
    \      new_word = new_word .. string.char(c - 97)\n      new_word_len = new_word_len\
    \ + 1\n    end\n    new_words[#new_words + 1] = new_word\n  end\n  return table.concat(new_words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8wt135yq.lua:11:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp8wt135yq.lua:11: in function 'candidate'\n\t/tmp/tmp8wt135yq.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  -- return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9v6xl_5.lua:15:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpz9v6xl_5.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  local words = s:gmatch(\"\
    ([^ ]+)\")\n  for i = 1, #words do\n    local word = words[i]\n    local new_word\
    \ = word\n    local j = 1\n    while j <= #word do\n      local c = string.byte(word:sub(j,j+1))\n\
    \      if c > 127 then\n        local new_c = string.byte(new_word:sub(j,j+1))\n\
    \        if new_c > 127 then\n          new_c = new_c - 256\n        end\n   \
    \     new_word = new_word .. string.char(new_c)\n      else\n        new_word\
    \ = new_word .. word:sub(j,j+1)\n      end\n      j = j + 1\n    end\n    new_s\
    \ = new_s .. new_word\n  end\n  return new_s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgwcu2sqb.lua:11:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmpgwcu2sqb.lua:11: in function 'candidate'\n\t/tmp/tmpgwcu2sqb.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    if string.find(c, \"\\n\") then\n      new_s = new_s\
    \ .. c\n    else\n      new_s = new_s .. string.char(string.byte(c) - 32)\n  \
    \  end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt9rcdknk.lua:24:\
    \ expected: \"Hi\"\nactual: \"(I\"\nstack traceback:\n\t/tmp/tmpt9rcdknk.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ char = string.sub(s,i,i)\n    if char == \" \" then\n      new_s = new_s ..\
    \ char\n    else\n      new_s = new_s .. string.char(string.byte(char) - 32)\n\
    \    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprqyfd80o.lua:24:\
    \ expected: \"Hi\"\nactual: \"(I\"\nstack traceback:\n\t/tmp/tmprqyfd80o.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here.\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpow8v8emm.lua:16:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpow8v8emm.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local new_s = \"\"\n  for w in s:gmatch(\"([^ ]+)\") do\n    local new_w =\
    \ \"\"\n    for c in w:gmatch(\"([%a]+)\") do\n      local new_c = c:lower()\n\
    \      new_c = string.char(tonumber(new_c) + 1)\n      new_w = new_w .. new_c\n\
    \    end\n    new_s = new_s .. new_w .. \" \"\n  end\n  return new_s\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_b7p9edf.lua:13:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp_b7p9edf.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmp_b7p9edf.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    local j = i\n    while j do\n      local k = j -\
    \ 1\n      if string.sub(s,j,j) == c then\n        j = k\n      else\n       \
    \ break\n      end\n    end\n    table.insert(new_s,string.sub(s,i,j))\n  end\n\
    \  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1wbk44z_.lua:21:\
    \ bad argument #1 to 'insert' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp1wbk44z_.lua:21: in function 'candidate'\n\t/tmp/tmp1wbk44z_.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Write your code here\n  local words = string.gmatch(s, '([^ ]+)')\n  local\
    \ new_words = {}\n  for i = 1, #words do\n    local word = words[i]\n    local\
    \ new_word = ''\n    for j = 1, #word do\n      local c = string.byte(word[j])\n\
    \      if c > 127 then\n        c = string.byte(string.sub(word, 1, j))\n    \
    \  end\n      new_word = new_word .. string.char(c)\n    end\n    new_words[i]\
    \ = new_word\n  end\n  return table.concat(new_words, '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7qr0mmh7.lua:11:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmp7qr0mmh7.lua:11: in function 'candidate'\n\t/tmp/tmp7qr0mmh7.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750540
