language: lua
name: HumanEval_125_split_words
results:
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = txt:gsub(\"[%z]+\", \" \")\n\tlocal words = words:gsub(\"[%a]+\", \"\
    \ \")\n\tlocal words = words:gsub(\"[%A]+\", \" \")\n\tlocal words = words:gsub(\"\
    [%w]+\", \" \")\n\tlocal words = words:gsub(\"[%W]+\", \" \")\n\tlocal words =\
    \ words:gsub(\"[%c]+\", \" \")\n\tlocal words = words:gsub(\"[%C]+\", \" \")\n\
    \tlocal words = words:gsub(\"[%p]+\", \" \")\n\tlocal words = words:gsub(\"[%P]+\"\
    , \" \")\n\tlocal words = words:gsub(\"[%x]+\", \" \")\n\tlocal words = words:gsub(\"\
    [%X]+\", \" \")\n\tlocal words = words:gsub(\"[%u]+\", \" \")\n\tlocal words =\
    \ words:gsub(\"[%U]+\", \" \")\n\tlocal words = words:gsub(\"[%n]+\", \" \")\n\
    \tlocal words = words:gsub(\"[%N]+\", \" \")\n\tlocal words = words:gsub(\"[%t]+\"\
    , \" \")\n\tlocal words = words:gsub(\"[%T]+\", \" \")\n\tlocal words = words:gsub(\"\
    [%e]+\", \" \")\n\tlocal words = words:gsub(\"[%E]+\", \" \")\n\tlocal words =\
    \ words:gsub(\"[%g]+\", \" \")\n\tlocal words = words:gsub(\"[%G]+\", \" \")\n\
    \tlocal words = words:gsub(\"[%v]+\", \" \")\n\tlocal words = words:gsub(\"[%V]+\"\
    , \" \")\n\tlocal words = words:gsub(\"[%x]+\", \" \")\n\tlocal words = words:gsub(\"\
    [%X]+\", \" \")\n\tlocal words = words:gsub(\"[%z]+\", \" \")\n\tlocal words =\
    \ words:gsub(\"[%Z]+\", \" \")\n\tlocal words = words:gsub(\"[%u]+\", \" \")\n\
    \tlocal words = words:gsub(\"[%U]+\", \" \")\n\tlocal words = words:gsub(\"[%n]+\"\
    , \" \")\n\tlocal words = words:gsub(\"[%N]+\", \" \")\n\tlocal words = words:gsub(\"\
    [%t]+\", \" \")\n\tlocal words = words:gsub(\"[%T]+\", \" \")\n\tlocal words =\
    \ words:gsub(\"[%e]+\", \" \")\n\tlocal words = words:gsub(\"[%E]+\", \" \")\n\
    \tlocal words = words:gsub(\"[%g]+\", \" \")\n\tlocal words = words:gsub(\"\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1qgzfwy5.lua:44: unfinished string near ''"''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \" \"):gsub(\"%w+\", \",\")\n    local wordCount =\
    \ #words\n    local wordCountOdd = 0\n    for i = 1, #words do\n        if words[i]\
    \ % 2 == 1 then\n            wordCountOdd = wordCountOdd + 1\n        end\n  \
    \  end\n    return wordCount, wordCountOdd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplkkfqcaw.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmplkkfqcaw.lua:12: in function 'candidate'\n\t/tmp/tmplkkfqcaw.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = string.gsub(txt, \"[^a-zA-Z]\", \" \")\n    local count = 1\n    for\
    \ word in string.gmatch(words, \"([^ ]+)\")\n        do\n            count = count\
    \ + 1\n        end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgfobg8u3.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 3\nstack traceback:\n\t/tmp/tmpgfobg8u3.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \"\"):gsub(\"%w+,\", \"\"):gsub(\"%w+.\", \"\"):gsub(\"\
    %w+,.\", \"\")\n    local words = words:gsub(\"%w+,\", \"%w+\")\n    local words\
    \ = words:gsub(\"%w+.\", \"%w\")\n    local words = words:gsub(\"%w+,.\", \"%w\"\
    )\n    local words = words:gsub(\"%w+,\", \"\")\n    local words = words:gsub(\"\
    %w+.\", \"\")\n    local words = words:gsub(\"%w+\", \"\")\n    local words =\
    \ words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local\
    \ words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"%w\", \"\"\
    )\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = word\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwsyboxu1.lua:62: ''end'' expected (to close ''function'' at
    line 7) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = \"\"\n  local count = 0\n  for w in txt:gmatch(\"[^ ]+\") do\n    count\
    \ = count + 1\n    if count % 2 == 1 then\n      words = words + w .. \",\"\n\
    \    else\n      words = words + w\n    end\n  end\n  return words:sub(1, #words)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplr4c8iuh.lua:13:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmplr4c8iuh.lua:13: in function 'candidate'\n\t/tmp/tmplr4c8iuh.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = string.gsub(txt, \"[^a-zA-Z ]\", \"\")\n    local count = 1\n    for\
    \ i = 1, #words do\n        if string.find(words[i], \" \") then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpowy8kq6n.lua:11:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpowy8kq6n.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpowy8kq6n.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = \"\"\n    local count = 0\n    for w in txt:gmatch(\"[^ ]+\") do\n \
    \       count = count + 1\n        if w ~= \"\" then\n            words = words\
    \ + w .. \",\"\n        end\n    end\n    if count % 2 == 1 then\n        words\
    \ = words:sub(1, words:len() - 1)\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdcrdzblx.lua:13:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmpdcrdzblx.lua:13: in function 'candidate'\n\t/tmp/tmpdcrdzblx.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \"\")\n    local splits = words:gsub(\",\", \" \"\
    )\n    local splitsCount = splits:gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp65icazd8.lua:10: unfinished string near ''"%''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"%w+\", \"\")\n  local comma = txt:gsub(\"%w+,\", \"\")\n\
    \  local letters = txt:gsub(\"%w+[%w]+\", \"\")\n  local letters_odd = letters:gsub(\"\
    [%w]+\", \"\")\n  return words:len() + comma:len() + letters_odd:len()\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy8ov6gf7.lua:18:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 16\nstack traceback:\n\t/tmp/tmpy8ov6gf7.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"[%z\\1-\\127\\194-\\244\\255-\\327\\331-\\346]\", \"\"):gsub(\"\
    [%z\\1-\\127\\194-\\244\\255-\\327\\331-\\346]\", \"\"):gsub(\"[%z\\1-\\127\\\
    194-\\244\\255-\\327\\331-\\346]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\255-\\\
    327\\331-\\346]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\255-\\327\\331-\\346]\"\
    , \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\255-\\327\\331-\\346]\", \"\"):gsub(\"\
    [%z\\1-\\127\\194-\\244\\255-\\327\\331-\\346]\", \"\"):gsub(\"[%z\\1-\\127\\\
    194-\\244\\255-\\327\\331-\\346]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\255-\\\
    327\\331-\\346]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\255-\\327\\331-\\346]\"\
    , \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\255-\\327\\331-\\346]\", \"\"):gsub(\"\
    [%z\\1-\\127\\194-\\244\\255-\\327\\331-\\346]\", \"\"):gsub(\"[%z\\1-\\127\\\
    194-\\244\\255-\\327\\331-\\346]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\255-\\\
    327\\331-\\346]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\255-\\327\\331-\\346]\"\
    , \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\255-\\327\\331-\\346]\", \"\"):gsub(\"\
    [%z\\1-\\127\\194-\\244\\255-\\327\\331-\\346]\", \"\"):gsub(\"[%z\\1-\\127\\\
    194-\\244\\255-\\327\\331-\\346]\", \"\"):gsub(\"\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmptue21eof.lua:8: escape sequence too large near '\"[%z\x01\
    -\x7F--'\n"
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"[%w]+\",\
    \ \",\")\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"\
    [%w]+\", \",\")\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words\
    \ = words:gsub(\"[%w]+\", \",\")\n    local words = words:gsub(\"[%w]+\", \" \"\
    )\n    local words = words:gsub(\"[%w]+\", \",\")\n    local words = words:gsub(\"\
    [%w]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \",\")\n    local words\
    \ = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \",\"\
    )\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"\
    [%w]+\", \",\")\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words\
    \ = words:gsub(\"[%w]+\", \",\")\n    local words = words:gsub(\"[%w]+\", \" \"\
    )\n    local words = words:gsub(\"[%w]+\", \",\")\n    local words = words:gsub(\"\
    [%w]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \",\")\n    local words\
    \ = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \",\"\
    )\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"\
    [%w]+\", \",\")\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words\
    \ = words:gsub(\"[%w]+\", \",\")\n    local words = words:gsub(\"[%w]+\", \" \"\
    )\n    local words = words:gsub(\"[%w]+\", \",\")\n    local words = words:gsub(\"\
    [%w]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \",\")\n    local words\
    \ = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \",\"\
    )\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"\
    [%w]+\", \",\")\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words\
    \ = words:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdl8g1mgb.lua:44: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = \"\"\n    local count = 0\n    for w in txt:gmatch(\"[%w]+\") do\n \
    \       count = count + 1\n        if count % 2 == 1 then\n            words =\
    \ words + w .. \",\"\n        else\n            words = words + w\n        end\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppm1ta8tz.lua:13:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmppm1ta8tz.lua:13: in function 'candidate'\n\t/tmp/tmppm1ta8tz.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = txt:gmatch(\"[%w-]+\")\n\tlocal count = 1\n\tlocal letters = {}\n\t\
    for i = 1, #words do\n\t\tlocal letter = words[i]\n\t\tif letter ~= \"\" then\n\
    \t\t\ttable.insert(letters, letter)\n\t\tend\n\tend\n\tfor i = 1, #letters do\n\
    \t\tif letters[i] ~= \"\" then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj6psm8o0.lua:11:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmpj6psm8o0.lua:11: in function 'candidate'\n\t/tmp/tmpj6psm8o0.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\")\n    local letters\
    \ = {}\n    for i = 1, #words do\n        table.insert(letters, words[i])\n  \
    \  end\n    local count = 0\n    for i = 1, #letters do\n        if letters[i]\
    \ ~= letters[i+1] then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpom9vzfck.lua:25:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 0\nstack traceback:\n\t/tmp/tmpom9vzfck.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = \"\"\n    local count = 0\n    for w in txt:gmatch(\"[%w-]+\") do\n\
    \        count = count + 1\n        if w ~= \"\" then\n            words = words\
    \ .. w .. \",\"\n        end\n    end\n    if count % 2 == 1 then\n        words\
    \ = words .. \"-\"\n    end\n    return words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjkqlf72v.lua:25:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello,world,\"\nstack traceback:\n\
    \t/tmp/tmpjkqlf72v.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = string.gsub(txt, \"[^a-zA-Z]+\", \"\")\n  local count = 1\n  for i =\
    \ 1, #words do\n    if string.find(words[i], \" \") then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp04166c2g.lua:11:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp04166c2g.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp04166c2g.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = string.gsub(txt, \"[%z\\1-\\127\\194-\\244\\377\\370-\\377\\377]\",\
    \ \"\")\n    local num_words = #words\n    local num_letters = #string.gsub(words,\
    \ \"[^%z\\1-\\127\\194-\\244\\377\\370-\\377\\377]\", \"\")\n    return num_letters,\
    \ num_words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp055xry67.lua:8: escape sequence too large near '\"[%z\x01\
    -\x7F-'\n"
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = \"\"\n  local count = 0\n  for w in txt:gmatch(\"%w+\") do\n    count\
    \ = count + 1\n    if count % 2 == 1 then\n      words = words + w .. \",\"\n\
    \    else\n      words = words + w\n    end\n  end\n  return words:sub(1, #words)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq6rwnknd.lua:13:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmpq6rwnknd.lua:13: in function 'candidate'\n\t/tmp/tmpq6rwnknd.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = txt:gsub(\"%w+\", \"\")\n\tlocal spaces = txt:gsub(\"%w+\", \" \")\n\
    \tlocal commas = txt:gsub(\"%w+\", \",\")\n\tlocal letters = txt:gsub(\"%w+\"\
    , \"a\")\n\tlocal oddletters = txt:gsub(\"%w+\", \"b\")\n\tlocal evenletters =\
    \ txt:gsub(\"%w+\", \"c\")\n\tlocal oddletters = txt:gsub(\"%w+\", \"d\")\n\t\
    local evenletters = txt:gsub(\"%w+\", \"e\")\n\tlocal oddletters = txt:gsub(\"\
    %w+\", \"f\")\n\tlocal evenletters = txt:gsub(\"%w+\", \"g\")\n\tlocal oddletters\
    \ = txt:gsub(\"%w+\", \"h\")\n\tlocal evenletters = txt:gsub(\"%w+\", \"i\")\n\
    \tlocal oddletters = txt:gsub(\"%w+\", \"j\")\n\tlocal evenletters = txt:gsub(\"\
    %w+\", \"k\")\n\tlocal oddletters = txt:gsub(\"%w+\", \"l\")\n\tlocal evenletters\
    \ = txt:gsub(\"%w+\", \"m\")\n\tlocal oddletters = txt:gsub(\"%w+\", \"n\")\n\t\
    local evenletters = txt:gsub(\"%w+\", \"o\")\n\tlocal oddletters = txt:gsub(\"\
    %w+\", \"p\")\n\tlocal evenletters = txt:gsub(\"%w+\", \"q\")\n\tlocal oddletters\
    \ = txt:gsub(\"%w+\", \"r\")\n\tlocal evenletters = txt:gsub(\"%w+\", \"s\")\n\
    \tlocal oddletters = txt:gsub(\"%w+\", \"t\")\n\tlocal evenletters = txt:gsub(\"\
    %w+\", \"u\")\n\tlocal oddletters = txt:gsub(\"%w+\", \"v\")\n\tlocal evenletters\
    \ = txt:gsub(\"%w+\", \"w\")\n\tlocal oddletters = txt:gsub(\"%w+\", \"x\")\n\t\
    local evenletters = txt:gsub(\"%w+\", \"y\")\n\tlocal oddletters = txt:gsub(\"\
    %w+\", \"z\")\n\tlocal evenletters = txt:gsub(\"%w+\", \"a\")\n\tlocal oddletters\
    \ = txt:gsub(\"%w+\", \"b\")\n\tlocal evenletters = txt:gsub(\"%w+\", \"c\")\n\
    \tlocal oddletters = txt:gsub(\"%w+\", \"d\")\n\tlocal evenletter\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnd5_969_.lua:56: ''end'' expected (to close ''function'' at
    line 7) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \" \")\n    local comma = txt:gsub(\"%w+,\", \" \"\
    )\n    local letters = txt:gsub(\"%w+[%w]\", \" \")\n    local count = letters:gsub(\"\
    %w+\", \" \")\n    local letters = letters:gsub(\"%w+,\", \" \")\n    local count\
    \ = count:gsub(\"%w+\", \" \")\n    local count = count:gsub(\"%w+,\", \" \")\n\
    \    local count = count:gsub(\"%w+,\", \" \")\n    local count = count:gsub(\"\
    %w+,\", \" \")\n    local count = count:gsub(\"%w+,\", \" \")\n    local count\
    \ = count:gsub(\"%w+,\", \" \")\n    local count = count:gsub(\"%w+,\", \" \"\
    )\n    local count = count:gsub(\"%w+,\", \" \")\n    local count = count:gsub(\"\
    %w+,\", \" \")\n    local count = count:gsub(\"%w+,\", \" \")\n    local count\
    \ = count:gsub(\"%w+,\", \" \")\n    local count = count:gsub(\"%w+,\", \" \"\
    )\n    local count = count:gsub(\"%w+,\", \" \")\n    local count = count:gsub(\"\
    %w+,\", \" \")\n    local count = count:gsub(\"%w+,\", \" \")\n    local count\
    \ = count:gsub(\"%w+,\", \" \")\n    local count = count:gsub(\"%w+,\", \" \"\
    )\n    local count = count:gsub(\"%w+,\", \" \")\n    local count = count:gsub(\"\
    %w+,\", \" \")\n    local count = count:gsub(\"%w+,\", \" \")\n    local count\
    \ = count:gsub(\"%w+,\", \" \")\n    local count = count:gsub(\"%w+,\", \" \"\
    )\n    local count = count:gsub(\"%w+,\", \" \")\n    local count = count:gsub(\"\
    %w+,\", \" \")\n    local count = count:gsub(\"%w+,\", \" \")\n    local count\
    \ = count:gsub(\"%w+,\", \" \")\n    local count = count:gsub(\"%w+,\", \" \"\
    )\n    local count = count:gsub(\"%w+,\", \" \")\n    local count = count:gsub(\"\
    %w+,\", \" \")\n    local count = count:gsub(\"%w+,\", \" \")\n    local count\
    \ = count:gsub(\"%w+,\", \" \")\n    local count = count:gsub(\"%w+,\", \" \"\
    )\n    local count = count:gsub(\"%w+,\", \" \")\n    local count = count:gsub(\"\
    %w+,\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq21g2s8h.lua:46: unfinished string near ''"%w+,''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \"\"):gsub(\"%w+,\",\",\"):gsub(\"%w+.\",\".\")\n\
    \    local letters = {}\n    for i = 1, #words do\n        table.insert(letters,\
    \ words[i])\n    end\n    local count = 0\n    for i = 1, #letters do\n      \
    \  if letters[i] ~= letters[i+1] then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9gg1q6qx.lua:25:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 0\nstack traceback:\n\t/tmp/tmp9gg1q6qx.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \"\")\n    local num_words = #words\n    local num_letters\
    \ = 0\n    for i = 1, num_words do\n        local letter = words[i]\n        if\
    \ letter:sub(1, 1) == 'a' then\n            num_letters = num_letters + 1\n  \
    \      end\n    end\n    return num_letters - 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp92n_n573.lua:13:\
    \ attempt to index local 'letter' (a nil value)\nstack traceback:\n\t/tmp/tmp92n_n573.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmp92n_n573.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = string.gsub(txt, \"[^a-zA-Z ]\", \"\")\n\tlocal num_words = string.len(words)\n\
    \tlocal num_letters = string.len(string.gsub(txt, \"[^a-zA-Z]\", \"\"))\n\t\n\t\
    if num_letters % 2 ~= 0 then\n\t\treturn num_words / 2\n\telse\n\t\treturn num_words\
    \ / 2 + 1\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8pc3d0sa.lua:22:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 6.5\nstack traceback:\n\t/tmp/tmp8pc3d0sa.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = \"\"\n    local count = 0\n    for letter in string.gmatch(txt, \"([^\
    \ ,]+)\") do\n        count = count + 1\n        if count % 2 == 1 then\n    \
    \        words = words .. letter\n        else\n            words = words .. \"\
    ,\" .. letter\n        end\n    end\n    return string.len(words) -- return number\
    \ of words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpozyziap8.lua:24:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 12\nstack traceback:\n\t/tmp/tmpozyziap8.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = \"\"\n  local count = 0\n  for c in txt:gmatch(\"[%w]+\") do\n    count\
    \ = count + 1\n    if count % 2 == 1 then\n      words = words + c\n    else\n\
    \      words = words + \",\" + c\n    end\n  end\n  return words:gsub(\",+\",\
    \ \",\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi80u3wa9.lua:13:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmpi80u3wa9.lua:13: in function 'candidate'\n\t/tmp/tmpi80u3wa9.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"[%a]\", \" \"):gsub(\"[%A]\", \" \"):gsub(\"[%w]\", \" \"\
    ):gsub(\"[%W]\", \" \"):gsub(\"[%c]\", \" \"):gsub(\"[%C]\", \" \")\n  local words\
    \ = words:gsub(\"[%w]\", \" \"):gsub(\"[%W]\", \" \"):gsub(\"[%c]\", \" \"):gsub(\"\
    [%C]\", \" \")\n  local words = words:gsub(\"[%w]\", \" \"):gsub(\"[%W]\", \"\
    \ \"):gsub(\"[%c]\", \" \"):gsub(\"[%C]\", \" \")\n  local words = words:gsub(\"\
    [%w]\", \" \"):gsub(\"[%W]\", \" \"):gsub(\"[%c]\", \" \"):gsub(\"[%C]\", \" \"\
    )\n  local words = words:gsub(\"[%w]\", \" \"):gsub(\"[%W]\", \" \"):gsub(\"[%c]\"\
    , \" \"):gsub(\"[%C]\", \" \")\n  local words = words:gsub(\"[%w]\", \" \"):gsub(\"\
    [%W]\", \" \"):gsub(\"[%c]\", \" \"):gsub(\"[%C]\", \" \")\n  local words = words:gsub(\"\
    [%w]\", \" \"):gsub(\"[%W]\", \" \"):gsub(\"[%c]\", \" \"):gsub(\"[%C]\", \" \"\
    )\n  local words = words:gsub(\"[%w]\", \" \"):gsub(\"[%W]\", \" \"):gsub(\"[%c]\"\
    , \" \"):gsub(\"[%C]\", \" \")\n  local words = words:gsub(\"[%w]\", \" \"):gsub(\"\
    [%W]\", \" \"):gsub(\"[%c]\", \" \"):gsub(\"[%C]\", \" \")\n  local words = words:gsub(\"\
    [%w]\", \" \"):gsub(\"[%W]\", \" \"):gsub(\"[%c]\", \" \"):gsub(\"[%C]\", \" \"\
    )\n  local words = words:gsub(\"[%w]\", \" \"):gsub(\"[%W]\", \" \"):gsub(\"[%c]\"\
    , \" \"):gsub(\"[%C]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa4rpm95d.lua:18: unfinished string near ''"[%C]''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = \"\"\n    local count = 0\n    for letter in txt:gmatch(\"[%a%A]+\"\
    ) do\n        if letter:len() ~= 0 then\n            count = count + 1\n     \
    \       if letter:lower() ~= letter then\n                words = words .. letter\n\
    \            end\n        end\n    end\n    return count, words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7bon18fa.lua:24:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 1\nstack traceback:\n\t/tmp/tmp7bon18fa.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = \"\"\n  local count = 0\n  for w in txt:gmatch(\"%w+\") do\n    count\
    \ = count + 1\n    if w ~= \"\" then\n      words = words .. w .. \",\"\n    end\n\
    \  end\n  if count % 2 ~= 0 then\n    words = words .. \"and\"\n  end\n  return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwc9b8m33.lua:25:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello,world,\"\nstack traceback:\n\
    \t/tmp/tmpwc9b8m33.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%z]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \"\
    ,\")\n    local words = words:gsub(\",\", \" \")\n    local words = words:gsub(\"\
    %w+\", \"\")\n    local words = words:gsub(\"%z\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = words:gsub(\"\
    %w\", \"\")\n    local words = words:gsub(\"%w\", \"\")\n    local words = \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8bi5xvsu.lua:53: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = \"\"\n    local count = 0\n    for w in txt:gmatch(\"[%w]+\") do\n \
    \       count = count + 1\n        if w ~= \"\" then\n            words = words\
    \ .. w .. \",\"\n        end\n    end\n    if count % 2 == 1 then\n        words\
    \ = words .. \"and \"\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbp_iqk19.lua:25:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello,world,\"\nstack traceback:\n\
    \t/tmp/tmpbp_iqk19.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = string.gsub(txt, \"[^a-zA-Z]+\", \"\")\n  local wordCount = #words\n\
    \  local wordCountOdd = 0\n  local wordCountEven = 0\n  for i = 1, #words do\n\
    \    if string.sub(words, i, i) == string.sub(words, i, i) then\n      wordCountEven\
    \ = wordCountEven+1\n    else\n      wordCountOdd = wordCountOdd+1\n    end\n\
    \  end\n  if wordCountEven % 2 == 1 then\n    return wordCountEven\n  else\n \
    \   return wordCountOdd\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvgv3rify.lua:29:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 0\nstack traceback:\n\t/tmp/tmpvgv3rify.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = txt:gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\377\\377]\", \"\"):gsub(\"\
    [%z\\1-\\127\\194-\\244\\377\\370-\\377]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\\
    244]\", \"\"):gsub(\"[%z\\1-\\127\\194]\", \"\"):gsub(\"[%z\\1-\\127]\", \"\"\
    ):gsub(\"[%z\\1]\", \"\"):gsub(\"[%z]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\\
    377\\370-\\377\\377]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\377]\"\
    , \"\"):gsub(\"[%z\\1-\\127\\194-\\244]\", \"\"):gsub(\"[%z\\1-\\127\\194]\",\
    \ \"\"):gsub(\"[%z\\1-\\127]\", \"\"):gsub(\"[%z\\1]\", \"\"):gsub(\"[%z]\", \"\
    \"):gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\377\\377]\", \"\"):gsub(\"[%z\\\
    1-\\127\\194-\\244\\377\\370-\\377]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\244]\"\
    , \"\"):gsub(\"[%z\\1-\\127\\194]\", \"\"):gsub(\"[%z\\1-\\127]\", \"\"):gsub(\"\
    [%z\\1]\", \"\"):gsub(\"[%z]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\\
    377\\377]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\377]\", \"\"):gsub(\"\
    [%z\\1-\\127\\194-\\244]\", \"\"):gsub(\"[%z\\1-\\127\\194]\", \"\"):gsub(\"[%z\\\
    1-\\127]\", \"\"):gsub(\"[%z\\1]\", \"\"):gsub(\"[%z]\", \"\"):gsub(\"[%z\\1-\\\
    127\\194-\\244\\377\\370-\\377\\377]\", \"\"):gsub(\"[%z\\1-\\127\\194\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpnf620ckl.lua:8: escape sequence too large near '\"[%z\x01\
    -\x7F-'\n"
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = string.gsub(txt, \"[^a-zA-Z ]\", \"\")\n    local words = string.gsub(words,\
    \ \"[,]\", \" \")\n    local words = string.gsub(words, \"[\\n\\r]\", \" \")\n\
    \    local words = string.gsub(words, \"[\\t]\", \" \")\n    local words = string.gsub(words,\
    \ \"[,]\", \" \")\n    local words = string.gsub(words, \"[\\n\\r]\", \" \")\n\
    \    local words = string.gsub(words, \"[\\t]\", \" \")\n    local words = string.gsub(words,\
    \ \"[,]\", \" \")\n    local words = string.gsub(words, \"[\\n\\r]\", \" \")\n\
    \    local words = string.gsub(words, \"[\\t]\", \" \")\n    local words = string.gsub(words,\
    \ \"[,]\", \" \")\n    local words = string.gsub(words, \"[\\n\\r]\", \" \")\n\
    \    local words = string.gsub(words, \"[\\t]\", \" \")\n    local words = string.gsub(words,\
    \ \"[,]\", \" \")\n    local words = string.gsub(words, \"[\\n\\r]\", \" \")\n\
    \    local words = string.gsub(words, \"[\\t]\", \" \")\n    local words = string.gsub(words,\
    \ \"[,]\", \" \")\n    local words = string.gsub(words, \"[\\n\\r]\", \" \")\n\
    \    local words = string.gsub(words, \"[\\t]\", \" \")\n    local words = string.gsub(words,\
    \ \"[,]\", \" \")\n    local words = string.gsub(words, \"[\\n\\r]\", \" \")\n\
    \    local words = string.gsub(words, \"[\\t]\", \" \")\n    local words = string.gsub(words,\
    \ \"[,]\", \" \")\n    local words = string.gsub(words, \"[\\n\\r]\", \" \")\n\
    \    local words = string.gsub(words, \"[\\t]\", \" \")\n    local words = string.gsub(words,\
    \ \"[,]\", \" \")\n    local words = string.gsub(words, \"[\\n\\r]\", \" \")\n\
    \    local words = string.gsub(words, \"[\\t]\", \" \")\n    local words = string.gsub(words,\
    \ \"[,]\", \" \")\n    local words = string.gsub(words, \"[\\n\\r]\", \" \")\n\
    \    local words = string.gsub(words, \"[\\t]\", \" \")\n    local words = string.gsub(words,\
    \ \"[,]\", \" \")\n    local words = string.gsub(words, \"[\\n\\r]\", \" \")\n\
    \    local words = string.gsub(words, \"[\\t]\", \" \")\n    local words = string.gsub(words,\
    \ \"[,]\", \" \")\n    local words = string.gsub(words, \"[\\n\\r\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpetwfr0dx.lua:43: unfinished string near '\"[\n\r'\n"
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = string.gsub(txt, \"[%z\\1-\\127\\194-\\244\\377\\370-\\376\\377]\",\
    \ \"\")\n  return #words > 0 and #words == string.len(words) and #words or 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp96y7larw.lua:8: escape sequence too large near '\"[%z\x01\
    -\x7F-'\n"
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[,.]\", \" \"):gsub(\"[%c]\", function(c)\n        return\
    \ string.lower(string.sub(c, 1, 1))\n    end)\n    return words:gsub(\"^%s+\"\
    , \"\"):gsub(\"%s+$\", \"\"):gsub(\"^%s+\", \"\"):gsub(\"%s+$\", \"\")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbj96ldq.lua:17:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello world!\"\nstack traceback:\n\
    \t/tmp/tmpsbj96ldq.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \"\")\n    local count = #words\n    if count > 0\
    \ then\n        words = words[1]\n        count = count - 1\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpongeblxh.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 1\nstack traceback:\n\t/tmp/tmpongeblxh.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%z]+\", \" \")\n    local words = words:gsub(\"[%w]+\",\
    \ \" \")\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"\
    [%w]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words\
    \ = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \" \"\
    )\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"\
    [%w]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words\
    \ = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \" \"\
    )\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"\
    [%w]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words\
    \ = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \" \"\
    )\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"\
    [%w]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words\
    \ = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \" \"\
    )\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"\
    [%w]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words\
    \ = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \" \"\
    )\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"\
    [%w]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words\
    \ = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \" \"\
    )\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"\
    [%w]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words\
    \ = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpop1gzuwv.lua:44: unfinished string near ''"''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%z]+\", \" \")\n    words = words:gsub(\"[%w]+\", \" \"\
    )\n    words = words:gsub(\"[%w]+\", \" \")\n    words = words:gsub(\"[%w]+\"\
    , \" \")\n    words = words:gsub(\"[%w]+\", \" \")\n    words = words:gsub(\"\
    [%w]+\", \" \")\n    words = words:gsub(\"[%w]+\", \" \")\n    words = words:gsub(\"\
    [%w]+\", \" \")\n    words = words:gsub(\"[%w]+\", \" \")\n    words = words:gsub(\"\
    [%w]+\", \" \")\n    words = words:gsub(\"[%w]+\", \" \")\n    words = words:gsub(\"\
    [%w]+\", \" \")\n    words = words:gsub(\"[%w]+\", \" \")\n    words = words:gsub(\"\
    [%w]+\", \" \")\n    words = words:gsub(\"[%w]+\", \" \")\n    words = words:gsub(\"\
    [%w]+\", \" \")\n    words = words:gsub(\"[%w]+\", \" \")\n    words = words:gsub(\"\
    [%w]+\", \" \")\n    words = words:gsub(\"[%w]+\", \" \")\n    words = words:gsub(\"\
    [%w]+\", \" \")\n    words = words:gsub(\"[%w]+\", \" \")\n    words = words:gsub(\"\
    [%w]+\", \" \")\n    words = words:gsub(\"[%w]+\", \" \")\n    words = words:gsub(\"\
    [%w]+\", \" \")\n    words = words:gsub(\"[%w]+\", \" \")\n    words = words:gsub(\"\
    [%w]+\", \" \")\n    words = words:gsub(\"[%w]+\", \" \")\n    words = words:gsub(\"\
    [%w]+\", \" \")\n    words = words:gsub(\"[%w]+\", \" \")\n    words = words:gsub(\"\
    [%w]+\", \" \")\n    words = words:gsub(\"[%w]+\", \" \")\n    words = words:gsub(\"\
    [%w]+\", \" \")\n    words = words:gsub(\"[%w]+\", \" \")\n    words = words:gsub(\"\
    [%w]+\", \" \")\n    words = words:gsub(\"[%w]+\", \" \")\n    words = words:gsub(\"\
    [%w]+\", \" \")\n    words = words:gsub(\"[%w]+\", \" \")\n    words = words:gsub(\"\
    [%w]+\", \" \")\n    words = words:gsub(\"[%w]+\", \" \")\n    words = words:\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpib02jtme.lua:48: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"[%z]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \"\
    \ \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvxa3c25f.lua:8: unfinished string near ''"[%w]+''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \"\")\n    local whitespaces = txt:gsub(\"%w+,\",\
    \ \"\")\n    local commas = txt:gsub(\"%w+,\", \"\")\n    local letters = txt:gsub(\"\
    %w+,\", \"\")\n    local odd_letters = txt:gsub(\"%w+,\", \"\")\n    local odd_letters_count\
    \ = txt:gsub(\"%w+,\", \"\")\n    local odd_letters_count_count = txt:gsub(\"\
    %w+,\", \"\")\n    local odd_letters_count_count_count = txt:gsub(\"%w+,\", \"\
    \")\n    local odd_letters_count_count_count_count = txt:gsub(\"%w+,\", \"\")\n\
    \    local odd_letters_count_count_count_count_count = txt:gsub(\"%w+,\", \"\"\
    )\n    local odd_letters_count_count_count_count_count_count = txt:gsub(\"%w+,\"\
    , \"\")\n    local odd_letters_count_count_count_count_count_count_count_count\
    \ = txt:gsub(\"%w+,\", \"\")\n    local odd_letters_count_count_count_count_count_count_count_count_count\
    \ = txt:gsub(\"%w+,\", \"\")\n    local odd_letters_count_count_count_count_count_count_count_count_count_count\
    \ = txt:gsub(\"%w+,\", \"\")\n    local odd_letters_count_count_count_count_count_count_count_count_count_count_count\
    \ = txt:gsub(\"%w+,\", \"\")\n    local odd_letters_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = txt:gsub(\"%w+,\", \"\")\n    local odd_letters_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = txt:gsub(\"%w+,\", \"\")\n    local odd_letters_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = txt:gsub(\"%w+,\", \"\")\n    local odd_letters_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = txt:gsub(\"%w+,\", \"\")\n    local odd_letters_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = txt:gsub(\"%w+,\", \"\")\n    local odd_letters_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = txt:gsub(\"%w+,\", \"\")\n    local odd_letters_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = txt:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4k3oinz_.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = string.gsub(txt, \"[^a-zA-Z ]\", \"\")\n\tlocal letters = {}\n\tfor\
    \ i = 1, #words do\n\t\ttable.insert(letters, string.lower(words[i]))\n\tend\n\
    \treturn #letters, letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkwmr7ojv.lua:11:\
    \ bad argument #1 to 'lower' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpkwmr7ojv.lua:11: in function 'candidate'\n\t/tmp/tmpkwmr7ojv.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"[%z]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \"\
    ,\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkt56bck_.lua:8: unfinished string near ''"[%w]+''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"[%z]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \"\
    \ \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"\
    [%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words =\
    \ words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n\
    \  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\"\
    , \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"\
    [%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words =\
    \ words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n\
    \  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\"\
    , \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"\
    [%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words =\
    \ words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n\
    \  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\"\
    , \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"\
    [%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words =\
    \ words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n\
    \  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\"\
    , \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"\
    [%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words =\
    \ words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n\
    \  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr2z92df_.lua:44: unfinished string near ''"''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%w]+\",\"\"):gsub(\"[%w]+$\",\"\")\n    local words = words:gsub(\"\
    [%w]+\",\",\")\n    local words = words:gsub(\"^,\",\"\")\n    local words = words:gsub(\"\
    ,$\",\"\")\n    local words = words:gsub(\",\",\"\")\n    local words = words:gsub(\"\
    ,$\",\"\")\n    local words = words:gsub(\",\",\"\")\n    local words = words:gsub(\"\
    ,$\",\"\")\n    local words = words:gsub(\",\",\"\")\n    local words = words:gsub(\"\
    ,$\",\"\")\n    local words = words:gsub(\",\",\"\")\n    local words = words:gsub(\"\
    ,$\",\"\")\n    local words = words:gsub(\",\",\"\")\n    local words = words:gsub(\"\
    ,$\",\"\")\n    local words = words:gsub(\",\",\"\")\n    local words = words:gsub(\"\
    ,$\",\"\")\n    local words = words:gsub(\",\",\"\")\n    local words = words:gsub(\"\
    ,$\",\"\")\n    local words = words:gsub(\",\",\"\")\n    local words = words:gsub(\"\
    ,$\",\"\")\n    local words = words:gsub(\",\",\"\")\n    local words = words:gsub(\"\
    ,$\",\"\")\n    local words = words:gsub(\",\",\"\")\n    local words = words:gsub(\"\
    ,$\",\"\")\n    local words = words:gsub(\",\",\"\")\n    local words = words:gsub(\"\
    ,$\",\"\")\n    local words = words:gsub(\",\",\"\")\n    local words = words:gsub(\"\
    ,$\",\"\")\n    local words = words:gsub(\",\",\"\")\n    local words = words:gsub(\"\
    ,$\",\"\")\n    local words = words:gsub(\",\",\"\")\n    local words = words:gsub(\"\
    ,$\",\"\")\n    local words = words:gsub(\",\",\"\")\n    local words = words:gsub(\"\
    ,$\",\"\")\n    local words = words:gsub(\",\",\"\")\n    local words = words:gsub(\"\
    ,$\",\"\")\n    local words = words:gsub(\",\",\"\")\n    local words = words:gsub(\"\
    ,$\",\"\")\n    local words = words:gsub(\",\",\"\")\n    local words = words:gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpskgouw9z.lua:48: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%z\\1-\\127\\194-\\244][%z\\1-\\127\\194-\\244][%z\\1-\\\
    127\\194-\\244]\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]\", \"%z\")\n    return\
    \ words:gsub(\"%z\", \"%1\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpofhycjza.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"zzzz\"\nstack traceback:\n\t/tmp/tmpofhycjza.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"%w+\", \"\"):gsub(\"%w+,\", \"%w+\")\n  local words = words:gsub(\"\
    %w+,\", \"%w+\")\n  local words = words:gsub(\"%w+,\", \"%w+\")\n  local words\
    \ = words:gsub(\"%w+,\", \"%w+\")\n  local words = words:gsub(\"%w+,\", \"%w+\"\
    )\n  local words = words:gsub(\"%w+,\", \"%w+\")\n  local words = words:gsub(\"\
    %w+,\", \"%w+\")\n  local words = words:gsub(\"%w+,\", \"%w+\")\n  local words\
    \ = words:gsub(\"%w+,\", \"%w+\")\n  local words = words:gsub(\"%w+,\", \"%w+\"\
    )\n  local words = words:gsub(\"%w+,\", \"%w+\")\n  local words = words:gsub(\"\
    %w+,\", \"%w+\")\n  local words = words:gsub(\"%w+,\", \"%w+\")\n  local words\
    \ = words:gsub(\"%w+,\", \"%w+\")\n  local words = words:gsub(\"%w+,\", \"%w+\"\
    )\n  local words = words:gsub(\"%w+,\", \"%w+\")\n  local words = words:gsub(\"\
    %w+,\", \"%w+\")\n  local words = words:gsub(\"%w+,\", \"%w+\")\n  local words\
    \ = words:gsub(\"%w+,\", \"%w+\")\n  local words = words:gsub(\"%w+,\", \"%w+\"\
    )\n  local words = words:gsub(\"%w+,\", \"%w+\")\n  local words = words:gsub(\"\
    %w+,\", \"%w+\")\n  local words = words:gsub(\"%w+,\", \"%w+\")\n  local words\
    \ = words:gsub(\"%w+,\", \"%w+\")\n  local words = words:gsub(\"%w+,\", \"%w+\"\
    )\n  local words = words:gsub(\"%w+,\", \"%w+\")\n  local words = words:gsub(\"\
    %w+,\", \"%w+\")\n  local words = words:gsub(\"%w+,\", \"%w+\")\n  local words\
    \ = words:gsub(\"%w+,\", \"%w+\")\n  local words = words:gsub(\"%w+,\", \"%w+\"\
    )\n  local words = words:gsub(\"%w+,\", \"%w+\")\n  local words = words:gsub(\"\
    %\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0l8odhhx.lua:39: unfinished string near ''"%''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpc7je2iiw.lua:8: escape sequence too large near '\"[%z\x01\
    -\x7F-'\n"
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = string.gsub(txt, \"[^a-zA-Z ]\", \"\")\n\tlocal num_words = string.len(words)\n\
    \tlocal num_commas = string.len(string.gsub(words,\",\",\"\"))\n\tlocal num_letters\
    \ = string.len(string.gsub(words,\"a\",\"\"))\n\tlocal num_odd_letters = num_letters\
    \ - num_commas\n\treturn num_words - num_commas\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4iofrjpp.lua:19:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 0\nstack traceback:\n\t/tmp/tmp4iofrjpp.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"%w+\", \"\")\n  local comma = txt:gsub(\"%w+,\", \"\")\n\
    \  local letters = txt:gsub(\"%w+[%w]+\", \"\")\n  return words:len() + comma:len()\
    \ + letters:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpazg5un8p.lua:17:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 16\nstack traceback:\n\t/tmp/tmpazg5un8p.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = \"\"\n    local count = 0\n    for w in txt:gmatch(\"%w+\") do\n   \
    \     count = count + 1\n        if count % 2 == 1 then\n            words = words\
    \ + w .. \",\"\n        else\n            words = words + w\n        end\n   \
    \ end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvmc1x7ja.lua:13:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmpvmc1x7ja.lua:13: in function 'candidate'\n\t/tmp/tmpvmc1x7ja.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"[%z]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \"\
    ,\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkt56bck_.lua:8: unfinished string near ''"[%w]+''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"[%z]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \"\
    \ \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"\
    [%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words =\
    \ words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n\
    \  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\"\
    , \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"\
    [%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words =\
    \ words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n\
    \  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\"\
    , \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"\
    [%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words =\
    \ words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n\
    \  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\"\
    , \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"\
    [%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words =\
    \ words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n\
    \  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\"\
    , \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"\
    [%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words =\
    \ words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n\
    \  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr2z92df_.lua:44: unfinished string near ''"''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"%w+\", \"\")\n  local words = words:gsub(\"%w+,\", \"\")\n\
    \  local words = words:gsub(\"%w+,\", \"\")\n  local words = words:gsub(\"%w+,\"\
    , \"\")\n  local words = words:gsub(\"%w+,\", \"\")\n  local words = words:gsub(\"\
    %w+,\", \"\")\n  local words = words:gsub(\"%w+,\", \"\")\n  local words = words:gsub(\"\
    %w+,\", \"\")\n  local words = words:gsub(\"%w+,\", \"\")\n  local words = words:gsub(\"\
    %w+,\", \"\")\n  local words = words:gsub(\"%w+,\", \"\")\n  local words = words:gsub(\"\
    %w+,\", \"\")\n  local words = words:gsub(\"%w+,\", \"\")\n  local words = words:gsub(\"\
    %w+,\", \"\")\n  local words = words:gsub(\"%w+,\", \"\")\n  local words = words:gsub(\"\
    %w+,\", \"\")\n  local words = words:gsub(\"%w+,\", \"\")\n  local words = words:gsub(\"\
    %w+,\", \"\")\n  local words = words:gsub(\"%w+,\", \"\")\n  local words = words:gsub(\"\
    %w+,\", \"\")\n  local words = words:gsub(\"%w+,\", \"\")\n  local words = words:gsub(\"\
    %w+,\", \"\")\n  local words = words:gsub(\"%w+,\", \"\")\n  local words = words:gsub(\"\
    %w+,\", \"\")\n  local words = words:gsub(\"%w+,\", \"\")\n  local words = words:gsub(\"\
    %w+,\", \"\")\n  local words = words:gsub(\"%w+,\", \"\")\n  local words = words:gsub(\"\
    %w+,\", \"\")\n  local words = words:gsub(\"%w+,\", \"\")\n  local words = words:gsub(\"\
    %w+,\", \"\")\n  local words = words:gsub(\"%w+,\", \"\")\n  local words = words:gsub(\"\
    %w+,\", \"\")\n  local words = words:gsub(\"%w+,\", \"\")\n  local words = words:gsub(\"\
    %w+,\", \"\")\n  local words = words:gsub(\"%w+,\", \"\")\n  local words = words:gsub(\"\
    %w+,\", \"\")\n  local words = words:gsub(\"%w+,\", \"\")\n  local words = words:gsub(\"\
    %w+,\", \"\")\n  local words = words:gsub(\"%w+,\", \"\")\n  local words = words:g\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn4rc3tet.lua:48: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = string.gsub(txt, \"[^a-zA-Z ]+\", \" \")\n\tlocal words = string.gsub(words,\
    \ \" \", \"+\")\n\tlocal words = string.gsub(words, \"[,]+\", \"|\")\n\tlocal\
    \ words = string.gsub(words, \"[|]+\", \"|\")\n\tlocal words = string.gsub(words,\
    \ \"[|]+\", \"|\")\n\tlocal words = string.gsub(words, \"[|]+\", \"|\")\n\tlocal\
    \ words = string.gsub(words, \"[|]+\", \"|\")\n\tlocal words = string.gsub(words,\
    \ \"[|]+\", \"|\")\n\tlocal words = string.gsub(words, \"[|]+\", \"|\")\n\tlocal\
    \ words = string.gsub(words, \"[|]+\", \"|\")\n\tlocal words = string.gsub(words,\
    \ \"[|]+\", \"|\")\n\tlocal words = string.gsub(words, \"[|]+\", \"|\")\n\tlocal\
    \ words = string.gsub(words, \"[|]+\", \"|\")\n\tlocal words = string.gsub(words,\
    \ \"[|]+\", \"|\")\n\tlocal words = string.gsub(words, \"[|]+\", \"|\")\n\tlocal\
    \ words = string.gsub(words, \"[|]+\", \"|\")\n\tlocal words = string.gsub(words,\
    \ \"[|]+\", \"|\")\n\tlocal words = string.gsub(words, \"[|]+\", \"|\")\n\tlocal\
    \ words = string.gsub(words, \"[|]+\", \"|\")\n\tlocal words = string.gsub(words,\
    \ \"[|]+\", \"|\")\n\tlocal words = string.gsub(words, \"[|]+\", \"|\")\n\tlocal\
    \ words = string.gsub(words, \"[|]+\", \"|\")\n\tlocal words = string.gsub(words,\
    \ \"[|]+\", \"|\")\n\tlocal words = string.gsub(words, \"[|]+\", \"|\")\n\tlocal\
    \ words = string.gsub(words, \"[|]+\", \"|\")\n\tlocal words = string.gsub(words,\
    \ \"[|]+\", \"|\")\n\tlocal words = string.gsub(words, \"[|]+\", \"|\")\n\tlocal\
    \ words = string.gsub(words, \"[|]+\", \"|\")\n\tlocal words = string.gsub(words,\
    \ \"[|]+\", \"|\")\n\tlocal words = string.gsub(words, \"[|]+\", \"|\")\n\tlocal\
    \ words = string.gsub(words, \"[|]+\", \"|\")\n\tlocal words = string.gsub(words,\
    \ \"[|]+\", \"|\")\n\tlocal words = string.gsub(words, \"[|]+\", \"|\")\n\tlocal\
    \ words = string.gsub(words, \"[|]+\", \"|\")\n\tlocal words = string.gsub(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgxm727_d.lua:43: '')'' expected (to close ''('' at line 42)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = \"\"\n  local num_letters = 0\n  for w in txt:gmatch(\"%w+\") do\n \
    \   words = words .. w .. \" \"\n    num_letters = num_letters + #w\n  end\n \
    \ if num_letters % 2 ~= 0 then\n    return num_letters / 2\n  else\n    return\
    \ num_letters / 2 + 1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp4z337fk.lua:24:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 6\nstack traceback:\n\t/tmp/tmpp4z337fk.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = txt:gsub(\"%w+\", \"\")\n\tlocal num_words = #words\n\tlocal num_letters\
    \ = 0\n\tfor i = 1, num_words do\n\t\tlocal letter = words[i]\n\t\tif letter:lower()\
    \ ~= letter then\n\t\t\tnum_letters = num_letters + 1\n\t\tend\n\tend\n\tif num_letters\
    \ % 2 ~= 0 then\n\t\treturn num_letters / 2\n\telse\n\t\treturn num_letters /\
    \ 2 + 1\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ap5jfmt.lua:13:\
    \ attempt to index local 'letter' (a nil value)\nstack traceback:\n\t/tmp/tmp0ap5jfmt.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmp0ap5jfmt.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"[%z]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \"\
    \ \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"\
    [%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words =\
    \ words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n\
    \  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\"\
    , \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"\
    [%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words =\
    \ words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n\
    \  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\"\
    , \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"\
    [%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words =\
    \ words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n\
    \  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\"\
    , \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"\
    [%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words =\
    \ words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n\
    \  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\"\
    , \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"\
    [%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n  local words =\
    \ words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"[%w]+\", \" \")\n\
    \  local words = words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr2z92df_.lua:44: unfinished string near ''"''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"[%S]+\", \" \"):gsub(\"[%S]\", \" \")\n  return words:gsub(\"\
    %S+\", \" \"):gsub(\"%S\", \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3j8j2yrf.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"   \"\nstack traceback:\n\t/tmp/tmp3j8j2yrf.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"[%S]+\", \" \"):gsub(\"[%S]\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnsfmudiw.lua:50: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = \"\"\n    local count = 0\n    for c in txt:gmatch(\"[%a%A]+\") do\n\
    \        if c == \" \" then\n            count = count + 1\n        else\n   \
    \         count = count - 1\n        end\n        words = words + c\n    end\n\
    \    return count, words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmrkne_5i.lua:16:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmpmrkne_5i.lua:16: in function 'candidate'\n\t/tmp/tmpmrkne_5i.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[,.]\", \" \")\n    local words = words:gsub(\"^%s+\", \"\
    \ \")\n    local words = words:gsub(\"%s+$\", \"\")\n    return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp51niyd0d.lua:17:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello world!\"\nstack traceback:\n\
    \t/tmp/tmp51niyd0d.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\377\\376\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpsvb__slp.lua:8: escape sequence too large near '\"[%z\x01\
    -\x7F-'\n"
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = string.gsub(txt, \"[^a-zA-Z ]\", \"\")\n  local words = string.gsub(words,\
    \ \" \", \"\")\n  local words = string.gsub(words, \",\", \" \")\n  local words\
    \ = string.gsub(words, \"[aeiouAEIOU]\", \"|\")\n  local words = string.gsub(words,\
    \ \"^|\", \"\")\n  local words = string.gsub(words, \"$|\", \"\")\n  local words\
    \ = string.gsub(words, \"[|]\", \"\")\n  local words = string.gsub(words, \"[|]\"\
    , \"\")\n  local words = string.gsub(words, \"[|]\", \"\")\n  local words = string.gsub(words,\
    \ \"[|]\", \"\")\n  local words = string.gsub(words, \"[|]\", \"\")\n  local words\
    \ = string.gsub(words, \"[|]\", \"\")\n  local words = string.gsub(words, \"[|]\"\
    , \"\")\n  local words = string.gsub(words, \"[|]\", \"\")\n  local words = string.gsub(words,\
    \ \"[|]\", \"\")\n  local words = string.gsub(words, \"[|]\", \"\")\n  local words\
    \ = string.gsub(words, \"[|]\", \"\")\n  local words = string.gsub(words, \"[|]\"\
    , \"\")\n  local words = string.gsub(words, \"[|]\", \"\")\n  local words = string.gsub(words,\
    \ \"[|]\", \"\")\n  local words = string.gsub(words, \"[|]\", \"\")\n  local words\
    \ = string.gsub(words, \"[|]\", \"\")\n  local words = string.gsub(words, \"[|]\"\
    , \"\")\n  local words = string.gsub(words, \"[|]\", \"\")\n  local words = string.gsub(words,\
    \ \"[|]\", \"\")\n  local words = string.gsub(words, \"[|]\", \"\")\n  local words\
    \ = string.gsub(words, \"[|]\", \"\")\n  local words = string.gsub(words, \"[|]\"\
    , \"\")\n  local words = string.gsub(words, \"[|]\", \"\")\n  local words = string.gsub(words,\
    \ \"[|]\", \"\")\n  local words = string.gsub(words, \"[|]\", \"\")\n  local words\
    \ = string.gsub(words, \"[|]\", \"\")\n  local words = string.gsub(words, \"[|]\"\
    , \"\")\n  local words = string.gsub(words, \"[|]\", \"\")\n  local words = string.gsub(words,\
    \ \"[|]\", \"\")\n  local words = string.gsub(words, \"[|]\", \"\")\n  local words\
    \ = string.gsub(words, \"[|]\", \"\")\n  local words = string.gsub(words, \"[|]\"\
    , \"\")\n  local words = string.gsub(words, \"[|]\", \"\")\n  local words = string.g\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzzd2qsy_.lua:62: ''end'' expected (to close ''function'' at
    line 7) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = string.gsub(txt, \"[%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph2tilsn8.lua:8: unfinished string near ''"[%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+$\", \"\")\n    return words:gsub(\"\
    %w+\", \" \"):gsub(\"%w+$\", \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpculmzubx.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"   !\"\nstack traceback:\n\t/tmp/tmpculmzubx.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = string.gsub(txt, \"[^a-zA-Z]+\", \"\")\n\tlocal num_words = string.len(words)\n\
    \tlocal num_letters = string.len(string.gsub(txt, \"[^a-zA-Z]\", \"\"))\n\treturn\
    \ num_letters - num_words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcq72qtgn.lua:17:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 0\nstack traceback:\n\t/tmp/tmpcq72qtgn.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%a]+\", \" \"):gsub(\"[%a]+$\", \"\")\n    local words =\
    \ words:gsub(\"[%a]+\", \" \"):gsub(\"[%a]+$\", \"\")\n    local words = words:gsub(\"\
    [%a]+\", \" \"):gsub(\"[%a]+$\", \"\")\n    local words = words:gsub(\"[%a]+\"\
    , \" \"):gsub(\"[%a]+$\", \"\")\n    local words = words:gsub(\"[%a]+\", \" \"\
    ):gsub(\"[%a]+$\", \"\")\n    local words = words:gsub(\"[%a]+\", \" \"):gsub(\"\
    [%a]+$\", \"\")\n    local words = words:gsub(\"[%a]+\", \" \"):gsub(\"[%a]+$\"\
    , \"\")\n    local words = words:gsub(\"[%a]+\", \" \"):gsub(\"[%a]+$\", \"\"\
    )\n    local words = words:gsub(\"[%a]+\", \" \"):gsub(\"[%a]+$\", \"\")\n   \
    \ local words = words:gsub(\"[%a]+\", \" \"):gsub(\"[%a]+$\", \"\")\n    local\
    \ words = words:gsub(\"[%a]+\", \" \"):gsub(\"[%a]+$\", \"\")\n    local words\
    \ = words:gsub(\"[%a]+\", \" \"):gsub(\"[%a]+$\", \"\")\n    local words = words:gsub(\"\
    [%a]+\", \" \"):gsub(\"[%a]+$\", \"\")\n    local words = words:gsub(\"[%a]+\"\
    , \" \"):gsub(\"[%a]+$\", \"\")\n    local words = words:gsub(\"[%a]+\", \" \"\
    ):gsub(\"[%a]+$\", \"\")\n    local words = words:gsub(\"[%a]+\", \" \"):gsub(\"\
    [%a]+$\", \"\")\n    local words = words:gsub(\"[%a]+\", \" \"):gsub(\"[%a]+$\"\
    , \"\")\n    local words = words:gsub(\"[%a]+\", \" \"):gsub(\"[%a]+$\", \"\"\
    )\n    local words = words:gsub(\"[%a]+\", \" \"):gsub(\"[%a]+$\", \"\")\n   \
    \ local words = words:gsub(\"[%a]+\", \" \"):gsub(\"[%a]+$\", \"\")\n    local\
    \ words = words:gsub(\"[%a]+\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkced1nwm.lua:28: unfinished string near ''"[%a]+''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[,.]\", \" \"):gsub(\"[%z]\", function (c) return string.char(c)\
    \ end):gsub(\"[%a]\", function (c) return string.char(c):lower() end):gsub(\"\
    [%A]\", function (c) return string.char(c):lower() end)\n    return words:gsub(\"\
    ^%s+\", \"\"):gsub(\"%s+$\", \"\"):gsub(\"%s+\", \" \"):gsub(\"^%s+\", \" \"):gsub(\"\
    %s+$\", \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx4dubt0p.lua:8:\
    \ bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpx4dubt0p.lua:8: in function </tmp/tmpx4dubt0p.lua:8>\n\t[C]: in function\
    \ 'gsub'\n\t/tmp/tmpx4dubt0p.lua:8: in function 'candidate'\n\t/tmp/tmpx4dubt0p.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\376\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp8ptf671i.lua:8: escape sequence too large near '\"[%z\x01\
    -\x7F-'\n"
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = \"\"\n    local count = 0\n    for c in txt:gmatch(\"[%a%A]+\") do\n\
    \        if c ~= \" \" then\n            count = count + 1\n        end\n    \
    \    words = words + c\n    end\n    if count % 2 ~= 0 then\n        return count\n\
    \    else\n        return count + 1\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp895lyrnp.lua:14:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmp895lyrnp.lua:14: in function 'candidate'\n\t/tmp/tmp895lyrnp.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpxm13st8k.lua:8: escape sequence too large near '\"[%z\x01\
    -\x7F-'\n"
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = txt:gsub(\"%w+\", \" \"):gsub(\"%w+\", \",\"):gsub(\"%w+\", \"%w\"):gsub(\"\
    %w+\", \"%w\")\n\tlocal num_words = #words\n\tlocal num_letters = #(words):gsub(\"\
    %w+\", \"\")\n\tlocal num_letters_odd = num_letters % 2\n\tlocal num_letters_even\
    \ = num_letters - num_letters_odd\n\t\n\tif num_letters_odd > 0 then\n\t\treturn\
    \ num_words - 1\n\telse\n\t\treturn num_words\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp58jptgqn.lua:24:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 4\nstack traceback:\n\t/tmp/tmp58jptgqn.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%a]+\", \" \"):gsub(\"[%a]+$\", \"\")\n    local wordCount\
    \ = #words\n    local wordList = words:gsub(\"[%a]+\", \" \"):gsub(\"[%a]+$\"\
    , \"\")\n    local wordListCount = #wordList\n    if wordCount > wordListCount\
    \ then\n        return wordListCount\n    else\n        return wordCount\n   \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptrgwx8k4.lua:22:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 4\nstack traceback:\n\t/tmp/tmptrgwx8k4.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \" \"):gsub(\"%w+\", \",\")\n    return words:gsub(\"\
    ,\", \" \"):gsub(\"%w+\", \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3y554kjt.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"   !\"\nstack traceback:\n\t/tmp/tmp3y554kjt.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = string.gsub(txt, \"[^a-zA-Z]+\", \"\")\n    local num_words = #words\n\
    \    local num_letters = 0\n    for i = 1, num_words do\n        local letter\
    \ = string.sub(words, i, i)\n        if letter ~= \"\" then\n            num_letters\
    \ = num_letters + 1\n        end\n    end\n    return num_letters % 2 ~= 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp788saze.lua:23:\
    \ expected: {\"Hello\", \"world!\"}\nactual: false\nstack traceback:\n\t/tmp/tmpp788saze.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = \"\"\n    local count = 0\n    for c in txt:gmatch(\"[%a%A]+\") do\n\
    \        if c == \" \" then\n            count = count + 1\n        else\n   \
    \         count = count - 1\n        end\n        if count % 2 == 1 then\n   \
    \         words = words .. c\n        end\n    end\n    return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxq2vf1bb.lua:26:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello world!\"\nstack traceback:\n\
    \t/tmp/tmpxq2vf1bb.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+$\", \"\")\n  return words:gsub(\"\
    %w+\", function(word)\n    local letters = word:gsub(\"%w+\", function(letter)\n\
    \      return letter:lower()\n    end):gsub(\"%w+\", function(letter)\n      return\
    \ letter:upper()\n    end):gsub(\"%w+\", function(letter)\n      return letter:lower()\n\
    \    end):gsub(\"%w+\", function(letter)\n      return letter:upper()\n    end)\n\
    \  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgmus6di.lua:25:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"   !\"\nstack traceback:\n\t/tmp/tmptgmus6di.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = \"\"\n  local count = 0\n  for c in txt:gmatch(\"[%a%A]+\") do\n   \
    \ count = count + 1\n    if count % 2 == 1 then\n      words = words + c\n   \
    \ else\n      words = words + \",\" + c\n    end\n  end\n  return words:gsub(\"\
    ,$\", \"\"):gsub(\"^,\", \"\"):gsub(\",$\", \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg5r1dl_v.lua:13:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmpg5r1dl_v.lua:13: in function 'candidate'\n\t/tmp/tmpg5r1dl_v.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = txt:gsub(\"[%a%A]+\", \" \"):gsub(\"[%w%W]+\", \" \"):gsub(\"[%w%W]+\"\
    , \" \"):gsub(\"[%w%W]+\", \" \"):gsub(\"[%w%W]+\", \" \"):gsub(\"[%w%W]+\", \"\
    \ \"):gsub(\"[%w%W]+\", \" \"):gsub(\"[%w%W]+\", \" \"):gsub(\"[%w%W]+\", \" \"\
    ):gsub(\"[%w%W]+\", \" \"):gsub(\"[%w%W]+\", \" \"):gsub(\"[%w%W]+\", \" \"):gsub(\"\
    [%w%W]+\", \" \"):gsub(\"[%w%W]+\", \" \"):gsub(\"[%w%W]+\", \" \"):gsub(\"[%w%W]+\"\
    , \" \"):gsub(\"[%w%W]+\", \" \"):gsub(\"[%w%W]+\", \" \"):gsub(\"[%w%W]+\", \"\
    \ \"):gsub(\"[%w%W]+\", \" \"):gsub(\"[%w%W]+\", \" \"):gsub(\"[%w%W]+\", \" \"\
    ):gsub(\"[%w%W]+\", \" \"):gsub(\"[%w%W]+\", \" \"):gsub(\"[%w%W]+\", \" \"):gsub(\"\
    [%w%W]+\", \" \"):gsub(\"[%w%W]+\", \" \"):gsub(\"[%w%W]+\", \" \"):gsub(\"[%w%W]+\"\
    , \" \"):gsub(\"[%w%W]+\", \" \"):gsub(\"[%w%W]+\", \" \"):gsub(\"[%w%W]+\", \"\
    \ \"):gsub(\"[%w%W]+\", \" \"):gsub(\"[%w%W]+\", \" \"):gsub(\"[%w%W]+\", \" \"\
    ):gsub(\"[%w%W]+\", \" \"):gsub(\"[%w%W]+\", \" \"):gsub(\"[%w%W]+\", \" \"):gsub(\"\
    [%w%W]+\", \" \"):gsub(\"[%w%W]+\", \" \"):gsub(\"[%w%W]+\", \" \"):gsub(\"[%w%W]+\"\
    , \" \"):gsub(\"\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpku33ivgk.lua:8: unfinished string near ''"''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%z]+\", \" \")\n    local words = words:gsub(\"[%a]+\",\
    \ \" \")\n    local words = words:gsub(\"[%A]+\", \" \")\n    local words = words:gsub(\"\
    [%w]+\", \" \")\n    local words = words:gsub(\"[%W]+\", \" \")\n    local words\
    \ = words:gsub(\"[%p]+\", \" \")\n    local words = words:gsub(\"[%P]+\", \" \"\
    )\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"\
    [%W]+\", \" \")\n    local words = words:gsub(\"[%p]+\", \" \")\n    local words\
    \ = words:gsub(\"[%P]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \" \"\
    )\n    local words = words:gsub(\"[%W]+\", \" \")\n    local words = words:gsub(\"\
    [%p]+\", \" \")\n    local words = words:gsub(\"[%P]+\", \" \")\n    local words\
    \ = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"[%W]+\", \" \"\
    )\n    local words = words:gsub(\"[%p]+\", \" \")\n    local words = words:gsub(\"\
    [%P]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words\
    \ = words:gsub(\"[%W]+\", \" \")\n    local words = words:gsub(\"[%p]+\", \" \"\
    )\n    local words = words:gsub(\"[%P]+\", \" \")\n    local words = words:gsub(\"\
    [%w]+\", \" \")\n    local words = words:gsub(\"[%W]+\", \" \")\n    local words\
    \ = words:gsub(\"[%p]+\", \" \")\n    local words = words:gsub(\"[%P]+\", \" \"\
    )\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"\
    [%W]+\", \" \")\n    local words = words:gsub(\"[%p]+\", \" \")\n    local words\
    \ = words:gsub(\"[%P]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \" \"\
    )\n    local words = words:gsub(\"[%W]+\", \" \")\n    local words = words:gsub(\"\
    [%p]+\", \" \")\n    local words = words:gsub(\"[%P]+\", \" \")\n    local words\
    \ = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpedyxvake.lua:44: unfinished string near ''"''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = \"\"\n  local count = 0\n  for w in txt:gmatch(\"%w+\") do\n    count\
    \ = count + 1\n    if count % 2 == 1 then\n      words = words .. w\n    else\n\
    \      words = words .. \",\" .. w\n    end\n  end\n  return words\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwjc_rox3.lua:24:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello,world\"\nstack traceback:\n\
    \t/tmp/tmpwjc_rox3.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"%w+\", \" \"):gsub(\"%w+\", \",\")\n  local num_words = words:gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"%w+\", \"\"):gsub(\"\
    %w+\", \"\"):gsub\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpus41s91q.lua:10: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"[%z]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \"\
    ,\")\n  local words = words:gsub(\",\", \" \")\n  local words = words:gsub(\"\
    %w+\", \" \")\n  local words = words:gsub(\"%w\", \"\")\n  local words = words:gsub(\"\
    %z\", \"\")\n  local words = words:gsub(\"%z\", \"\")\n  local words = words:gsub(\"\
    %z\", \"\")\n  local words = words:gsub(\"%z\", \"\")\n  local words = words:gsub(\"\
    %z\", \"\")\n  local words = words:gsub(\"%z\", \"\")\n  local words = words:gsub(\"\
    %z\", \"\")\n  local words = words:gsub(\"%z\", \"\")\n  local words = words:gsub(\"\
    %z\", \"\")\n  local words = words:gsub(\"%z\", \"\")\n  local words = words:gsub(\"\
    %z\", \"\")\n  local words = words:gsub(\"%z\", \"\")\n  local words = words:gsub(\"\
    %z\", \"\")\n  local words = words:gsub(\"%z\", \"\")\n  local words = words:gsub(\"\
    %z\", \"\")\n  local words = words:gsub(\"%z\", \"\")\n  local words = words:gsub(\"\
    %z\", \"\")\n  local words = words:gsub(\"%z\", \"\")\n  local words = words:gsub(\"\
    %z\", \"\")\n  local words = words:gsub(\"%z\", \"\")\n  local words = words:gsub(\"\
    %z\", \"\")\n  local words = words:gsub(\"%z\", \"\")\n  local words = words:gsub(\"\
    %z\", \"\")\n  local words = words:gsub(\"%z\", \"\")\n  local words = words:gsub(\"\
    %z\", \"\")\n  local words = words:gsub(\"%z\", \"\")\n  local words = words:gsub(\"\
    %z\", \"\")\n  local words = words:gsub(\"%z\", \"\")\n  local words = words:gsub(\"\
    %z\", \"\")\n  local words = words:gsub(\"%z\", \"\")\n  local words = words:gsub(\"\
    %z\", \"\")\n  local words = words:gsub(\"%z\", \"\")\n  local words = words:gsub(\"\
    %z\", \"\")\n  local words = words:gsub(\"%z\", \"\")\n  local words = words:gsub(\"\
    %z\", \"\")\n  local words = words:gsub(\"%z\", \"\")\n  local words = words:gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_w7ompuh.lua:49: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = string.gsub(txt, \"[%c]+\", \" \")\n    local words = string.gsub(words,\
    \ \"[%c]+\", \",\")\n    local words = string.gsub(words, \"[%c]+\", \" \")\n\
    \    local words = string.gsub(words, \"[%c]+\", \",\")\n    local words = string.gsub(words,\
    \ \"[%c]+\", \" \")\n    local words = string.gsub(words, \"[%c]+\", \",\")\n\
    \    local words = string.gsub(words, \"[%c]+\", \" \")\n    local words = string.gsub(words,\
    \ \"[%c]+\", \",\")\n    local words = string.gsub(words, \"[%c]+\", \" \")\n\
    \    local words = string.gsub(words, \"[%c]+\", \",\")\n    local words = string.gsub(words,\
    \ \"[%c]+\", \" \")\n    local words = string.gsub(words, \"[%c]+\", \",\")\n\
    \    local words = string.gsub(words, \"[%c]+\", \" \")\n    local words = string.gsub(words,\
    \ \"[%c]+\", \",\")\n    local words = string.gsub(words, \"[%c]+\", \" \")\n\
    \    local words = string.gsub(words, \"[%c]+\", \",\")\n    local words = string.gsub(words,\
    \ \"[%c]+\", \" \")\n    local words = string.gsub(words, \"[%c]+\", \",\")\n\
    \    local words = string.gsub(words, \"[%c]+\", \" \")\n    local words = string.gsub(words,\
    \ \"[%c]+\", \",\")\n    local words = string.gsub(words, \"[%c]+\", \" \")\n\
    \    local words = string.gsub(words, \"[%c]+\", \",\")\n    local words = string.gsub(words,\
    \ \"[%c]+\", \" \")\n    local words = string.gsub(words, \"[%c]+\", \",\")\n\
    \    local words = string.gsub(words, \"[%c]+\", \" \")\n    local words = string.gsub(words,\
    \ \"[%c]+\", \",\")\n    local words = string.gsub(words, \"[%c]+\", \" \")\n\
    \    local words = string.gsub(words, \"[%c]+\", \",\")\n    local words = string.gsub(words,\
    \ \"[%c]+\", \" \")\n    local words = string.gsub(words, \"[%c]+\", \",\")\n\
    \    local words = string.gsub(words, \"[%c]+\", \" \")\n    local words = string.gsub(words,\
    \ \"[%c]+\", \",\")\n    local words = string.gsub(words, \"[%c]+\", \" \")\n\
    \    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6yhehsfr.lua:56: ''end'' expected (to close ''function'' at
    line 7) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[,.]+\", \" \"):gsub(\"[%c]+\", \" \"):gsub(\"[%w]+\", \"\
    \ \"):gsub(\"[%W]+\", \" \"):gsub(\"[%S]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%W]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \" \"):gsub(\"[%W]+\"\
    , \" \")\n    local words = words:gsub(\"[%S]+\", \" \"):gsub(\"[%w]+\", \" \"\
    )\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"\
    [%W]+\", \" \")\n    local words = words:gsub(\"[%S]+\", \" \")\n    local words\
    \ = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"[%W]+\", \" \"\
    )\n    local words = words:gsub(\"[%S]+\", \" \")\n    local words = words:gsub(\"\
    [%w]+\", \" \")\n    local words = words:gsub(\"[%W]+\", \" \")\n    local words\
    \ = words:gsub(\"[%S]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \" \"\
    )\n    local words = words:gsub(\"[%W]+\", \" \")\n    local words = words:gsub(\"\
    [%S]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words\
    \ = words:gsub(\"[%W]+\", \" \")\n    local words = words:gsub(\"[%S]+\", \" \"\
    )\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"\
    [%W]+\", \" \")\n    local words = words:gsub(\"[%S]+\", \" \")\n    local words\
    \ = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"[%W]+\", \" \"\
    )\n    local words = words:gsub(\"[%S]+\", \" \")\n    local words = words:gsub(\"\
    [%w]+\", \" \")\n    local words = words:gsub(\"[%W]+\", \" \")\n    local words\
    \ = words:gsub(\"[%S]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \" \"\
    )\n    local words = words:gsub(\"[%W]+\", \" \")\n    local words = words:gsub(\"\
    [%S]+\", \" \")\n    local words = words:gsub(\"[%w]+\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpi4ywushx.lua:38: unfinished string near ''"[%w]+''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \"\")\n    local count = 1\n    for word in words:gmatch(\"\
    %w+\") do\n        if word:sub(1, 1) ~= \" \" then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o_9weft.lua:21:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 1\nstack traceback:\n\t/tmp/tmp3o_9weft.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"%w+\", \" \"):gsub(\"%w+\", \",\")\n  return words:gsub(\"\
    ,\", \" \"):gsub(\"%w+\", \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppotaslru.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"   !\"\nstack traceback:\n\t/tmp/tmppotaslru.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"%w+\", \" \"):gsub(\"%S+\", \" \"):gsub(\"%w+\", \",\")\n\
    \  return words:gsub(\",+\", \",\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxeigrm60.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"    \"\nstack traceback:\n\t/tmp/tmpxeigrm60.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = \"\"\n    local count = 0\n    for w in txt:gmatch(\"[%w]+\") do\n \
    \       count = count + 1\n        if w ~= \"\" then\n            words = words\
    \ .. w .. \",\"\n        end\n    end\n    if count % 2 == 1 then\n        words\
    \ = words .. \"and \" .. words[#words]\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21upy1jw.lua:25:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello,world,\"\nstack traceback:\n\
    \t/tmp/tmp21upy1jw.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = txt:gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\377\\376\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpu7irxn3m.lua:8: escape sequence too large near '\"[%z\x01\
    -\x7F-'\n"
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"[%z]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \"\
    \ \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvxa3c25f.lua:8: unfinished string near ''"[%w]+''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = \"\"\n  local count = 0\n  for w in txt:gmatch(\"%w+\") do\n    count\
    \ = count + 1\n    if count % 2 == 1 then\n      words = words + w .. \",\"\n\
    \    else\n      words = words + w\n    end\n  end\n  return words:gsub(\",$\"\
    , \"\"):gsub(\"^,\", \"\"):gsub(\",$\", \"\")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq9janejf.lua:13:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmpq9janejf.lua:13: in function 'candidate'\n\t/tmp/tmpq9janejf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = \"\"\n    local count = 1\n    for w in txt:gmatch(\"[%w-]+\") do\n\
    \        count = count + 1\n        words = words .. w .. \",\"\n    end\n   \
    \ if words == \"\" then\n        return count\n    else\n        return #words\
    \ - 1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq3ge8xxo.lua:24:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 11\nstack traceback:\n\t/tmp/tmpq3ge8xxo.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \"\")\n    local num_words = #words\n    local num_letters\
    \ = #words\n    local num_letters_with_odd_order = 0\n    for i = 1, num_letters\
    \ do\n        if words[i] < \"a\" or words[i] > \"z\" then\n            num_letters_with_odd_order\
    \ = num_letters_with_odd_order + 1\n        end\n    end\n    return num_letters_with_odd_order\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_2xadyt.lua:13:\
    \ attempt to compare nil with string\nstack traceback:\n\t/tmp/tmp3_2xadyt.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmp3_2xadyt.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = \"\"\n    local num_words = 0\n    local num_letters = 0\n    for w\
    \ in txt:gmatch(\"%w+\") do\n        num_words = num_words + 1\n        words\
    \ = words + w \n        num_letters = num_letters + #w\n    end\n    if num_words\
    \ == 0 then\n        return num_letters\n    else\n        return num_letters\
    \ - #words\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx3yyxtlm.lua:13:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmpx3yyxtlm.lua:13: in function 'candidate'\n\t/tmp/tmpx3yyxtlm.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"%w+\", \"\")\n  local count = 1\n  local letters = {}\n \
    \ for i = 1, #words do\n    letters[words[i]] = count\n    count = count + 1\n\
    \  end\n  local odd_letters = {}\n  for i = 1, #letters do\n    if letters[i]\
    \ > 1 then\n      odd_letters[letters[i]] = letters[i]\n    end\n  end\n  return\
    \ #odd_letters, odd_letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcnnmfy6s.lua:12:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpcnnmfy6s.lua:12: in function\
    \ 'candidate'\n\t/tmp/tmpcnnmfy6s.lua:27: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = txt:gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\376\\377]\", \"\"):gsub(\"\
    [%z\\1-\\127\\194-\\244\\377\\370-\\376\\377\\177-\\377]\", \"\")\n\tlocal count\
    \ = 1\n\tlocal letters = {}\n\tfor letter in string.gmatch(words, \"%z\") do\n\
    \t\ttable.insert(letters, letter)\n\t\tcount = count + 1\n\tend\n\treturn count,\
    \ letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpsvsd6edf.lua:8: escape sequence too large near '\"[%z\x01\
    -\x7F-'\n"
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%z]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \"\
    ,\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpim8iy5jc.lua:8: unfinished string near ''"[%w]+''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = string.gsub(txt, \"[^a-zA-Z]+\", \"\")\n  local wordCount = #words\n\
    \  local words = {}\n  for i = 1, wordCount do\n    table.insert(words, string.lower(words[i]))\n\
    \  end\n  return wordCount, words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8_bm74yg.lua:12:\
    \ bad argument #1 to 'lower' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmp8_bm74yg.lua:12: in function 'candidate'\n\t/tmp/tmp8_bm74yg.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = \"\"\n    local count = 0\n    for i = 1, #txt do\n        if string.sub(txt,\
    \ i, i) == \" \" then\n            count = count + 1\n        elseif string.sub(txt,\
    \ i, i) == \",\" then\n            count = count + 1\n        end\n    end\n \
    \   if count % 2 == 1 then\n        words = string.sub(txt, 1, count - 1)\n  \
    \  else\n        words = string.sub(txt, 1, count - 1) + \",\" + string.sub(txt,\
    \ count + 1)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn5pjsbu_.lua:28:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"\"\nstack traceback:\n\t/tmp/tmpn5pjsbu_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpqbql1rkz.lua:8: escape sequence too large near '\"[%z\x01\
    -\x7F-'\n"
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\377\\377]\", \"\"):gsub(\"\
    [%z\\1-\\127\\194-\\244\\377\\370-\\377]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\\
    244]\", \"\"):gsub(\"[%z\\1-\\127\\194]\", \"\"):gsub(\"[%z\\1-\\127]\", \"\"\
    ):gsub(\"[%z\\1]\", \"\")\n    local words = words:gsub(\",\", \" \")\n    local\
    \ words = words:gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\377\\377]\", \"\"):gsub(\"\
    [%z\\1-\\127\\194-\\244\\377\\370-\\377]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\\
    244]\", \"\"):gsub(\"[%z\\1-\\127\\194]\", \"\"):gsub(\"[%z\\1-\\127]\", \"\"\
    ):gsub(\"[%z\\1]\", \"\")\n    local words = words:gsub(\"%z\", \"\")\n    local\
    \ words = words:gsub(\"%z\", \"\")\n    local words = words:gsub(\"%z\", \"\"\
    )\n    local words = words:gsub(\"%z\", \"\")\n    local words = words:gsub(\"\
    %z\", \"\")\n    local words = words:gsub(\"%z\", \"\")\n    local words = words:gsub(\"\
    %z\", \"\")\n    local words = words:gsub(\"%z\", \"\")\n    local words = words:gsub(\"\
    %z\", \"\")\n    local words = words:gsub(\"%z\", \"\")\n    local words = words:gsub(\"\
    %z\", \"\")\n    local words = words:gsub(\"%z\", \"\")\n    local words = words:gsub(\"\
    %z\", \"\")\n    local words = words:gsub(\"%z\", \"\")\n    local words = words:gsub(\"\
    %z\", \"\")\n    local words = words:gsub(\"%z\", \"\")\n    local words = words:gsub(\"\
    %z\", \"\")\n    local words = words:gsub(\"%z\", \"\")\n    local words = words:gsub(\"\
    %z\", \"\")\n    local words = words:gsub(\"%z\", \"\")\n    local words = words:gsub(\"\
    %z\", \"\")\n    local words = words:gsub(\"%z\", \"\")\n    local words = words:gsub(\"\
    %z\", \"\")\n    local words = words:gsub(\"%z\", \"\")\n    local words = words:gsub(\"\
    %z\", \"\")\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp2gkmdc29.lua:8: escape sequence too large near '\"[%z\x01\
    -\x7F-'\n"
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\376\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp1657rmok.lua:8: escape sequence too large near '\"[%z\x01\
    -\x7F-'\n"
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = string.gsub(txt, \"[%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph2tilsn8.lua:8: unfinished string near ''"[%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \"\")\n    local whitespaces = txt:gsub(\"%w+,\",\
    \ \"\")\n    local comma = txt:gsub(\"%w+,\", \",\")\n    local letters = txt:gsub(\"\
    %w+\", string.lower)\n    local odds = letters:gsub(\"[%a]\", function(c)\n  \
    \      return string.sub(c, 2, 1):byte()\n    end)\n    return #odds\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgfproak.lua:21:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 12\nstack traceback:\n\t/tmp/tmprgfproak.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%z\\1-\\127\\194-\\244][%z\\1-\\127\\194-\\244]*[%z\\1-\\\
    127\\194-\\244]\", \"%z\")\n    return words:gsub(\"%z\", \"%1\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzbxxo4s4.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpzbxxo4s4.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = string.gsub(txt, \"[^a-zA-Z ]\", \"\")\n    local words = string.gsub(words,\
    \ \" \", \"\")\n    local words = string.gsub(words, \",\", \" \")\n    local\
    \ words = string.gsub(words, \"[aeiouAEIOU]\", \" $0\")\n    local words = string.gsub(words,\
    \ \"^[aeiouAEIOU]\", \"\")\n    local words = string.gsub(words, \"[aeiouAEIOU]$\"\
    , \"\")\n    local words = string.gsub(words, \"^$\", \"\")\n    local words =\
    \ string.gsub(words, \"^,\", \"\")\n    local words = string.gsub(words, \"^.\"\
    , \"\")\n    local words = string.gsub(words, \"^.,\", \"\")\n    local words\
    \ = string.gsub(words, \"^.,$\", \"\")\n    local words = string.gsub(words, \"\
    ^.,.\", \"\")\n    local words = string.gsub(words, \"^.,.,\", \"\")\n    local\
    \ words = string.gsub(words, \"^.,.,$\", \"\")\n    local words = string.gsub(words,\
    \ \"^.,.,.\", \"\")\n    local words = string.gsub(words, \"^.,.,.,\", \"\")\n\
    \    local words = string.gsub(words, \"^.,.,.,$\", \"\")\n    local words = string.gsub(words,\
    \ \"^.,.,.,.\", \"\")\n    local words = string.gsub(words, \"^.,.,.,.,\", \"\"\
    )\n    local words = string.gsub(words, \"^.,.,.,.,$\", \"\")\n    local words\
    \ = string.gsub(words, \"^.,.,.,.,.\", \"\")\n    local words = string.gsub(words,\
    \ \"^.,.,.,.,.,\", \"\")\n    local words = string.gsub(words, \"^.,.,.,.,.,$\"\
    , \"\")\n    local words = string.gsub(words, \"^.,.,.,.,.,.\", \"\")\n    local\
    \ words = string.gsub(words, \"^.,.,.,.,.,.,\", \"\")\n    local words = string.gsub(words,\
    \ \"^.,.,.,.,.,.,.\", \"\")\n    local words = string.gsub(words, \"^.,.,.,.,.,.,.,\"\
    , \"\")\n    local words = string.gsub(words, \"^.,.,.,.,.,.,.,\", \"\")\n   \
    \ local words = string.gsub(words, \"^.,.,.,.,.,.,.,\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8tsa0kvs.lua:36: unfinished string near ''"^.,.,.,.,.,.,.,''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"[%a]+\", \" \"):gsub(\"[%a]+$\", \"\")\n  return words:gsub(\"\
    [%a]+\", \" \"):gsub(\"[%a]+$\", \"\"):gsub(\"[%a]+\", \",\"):gsub(\"[%a]+$\"\
    , \",\"):gsub(\"[%a]+\", \" \"):gsub(\"[%a]+$\", \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs4t3bqj.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"   !\"\nstack traceback:\n\t/tmp/tmpqs4t3bqj.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"%w+\", \"\")\n  local num_words = #words\n  local num_letters\
    \ = #(words)\n  local num_letters_with_odd_order = num_letters - 1\n  local letters\
    \ = {}\n  for i = 1, num_letters_with_odd_order do\n    table.insert(letters,\
    \ words[i])\n  end\n  return num_words, letters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdxppdpkk.lua:22:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 2\nstack traceback:\n\t/tmp/tmpdxppdpkk.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = \"\"\n    local count = 0\n    for c in txt:gmatch(\"[%z\\1-\\127]+\"\
    ) do\n        if c ~= \" \" then\n            count = count + 1\n            words\
    \ = words .. c\n        else\n            count = count + 1\n            words\
    \ = words .. \",\"\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6e9p8nzu.lua:25:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 1\nstack traceback:\n\t/tmp/tmp6e9p8nzu.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%z\\1-\\127\\194-\\244\\377]\", \"\"):gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\177-\\377]\", \"\")\n    local wordCount = #words\n    local wordCountOdd\
    \ = 0\n    local wordCountEven = 0\n    local wordCountLower = 0\n    for i =\
    \ 1, #words do\n        if words[i] ~= \"\" then\n            if words[i] < \"\
    a\" then\n                wordCountEven = wordCountEven + 1\n            elseif\
    \ words[i] < \"b\" then\n                wordCountOdd = wordCountOdd + 1\n   \
    \         elseif words[i] < \"c\" then\n                wordCountLower = wordCountLower\
    \ + 1\n            elseif words[i] < \"d\" then\n                wordCountLower\
    \ = wordCountLower + 1\n            elseif words[i] < \"e\" then\n           \
    \     wordCountLower = wordCountLower + 1\n            elseif words[i] < \"f\"\
    \ then\n                wordCountLower = wordCountLower + 1\n            elseif\
    \ words[i] < \"g\" then\n                wordCountLower = wordCountLower + 1\n\
    \            elseif words[i] < \"h\" then\n                wordCountLower = wordCountLower\
    \ + 1\n            elseif words[i] < \"i\" then\n                wordCountLower\
    \ = wordCountLower + 1\n            elseif words[i] < \"j\" then\n           \
    \     wordCountLower = wordCountLower + 1\n            elseif words[i] < \"k\"\
    \ then\n                wordCountLower = wordCountLower + 1\n            elseif\
    \ words[i] < \"l\" then\n                wordCountLower = wordCountLower + 1\n\
    \            elseif words[i] < \"m\" then\n                wordCountLower = wordCountLower\
    \ + 1\n            elseif words[i] < \"n\" then\n                wordCountLower\
    \ = wordCountLower + 1\n            elseif words[i] < \"o\" then\n           \
    \     wordCountLower = wordCountLower + 1\n            elseif words[i] < \"p\"\
    \ then\n                wordCountLower = wordCountLower + 1\n            elseif\
    \ words[i] < \"q\" then\n                wordCountLower = wordCountLower + 1\n\
    \            elseif words[i] < \"r\" then\n                wordCountLower = wordCountLower\
    \ + 1\n            elseif words[i] < \"s\" then\n                wordCountLower\
    \ = wordCountLower + 1\n            elseif \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp08d7k_7t.lua:8: escape sequence too large near '\"[%z\x01\
    -\x7F-'\n"
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = \"\"\n  local count = 0\n  for c in txt:gmatch(\"[%w]+\") do\n    count\
    \ = count + 1\n    if count % 2 == 1 then\n      words = words + c\n    else\n\
    \      words = words + \",\" .. c\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaqpsgqmg.lua:13:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmpaqpsgqmg.lua:13: in function 'candidate'\n\t/tmp/tmpaqpsgqmg.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = \"\"\n    local count = 0\n    for c in txt:gmatch(\"%w+\") do\n   \
    \     count = count + 1\n        if count % 2 == 1 then\n            words = words\
    \ + c\n        else\n            words = words + \",\" .. c\n        end\n   \
    \ end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzp55_e90.lua:13:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmpzp55_e90.lua:13: in function 'candidate'\n\t/tmp/tmpzp55_e90.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%a]+\", \" \"):gsub(\"[%A]+\", \" \"):gsub(\"[%w]+\", \"\
    \ \"):gsub(\"[%W]+\", \" \"):gsub(\"[%c]+\", \" \"):gsub(\"[%C]+\", \" \"):gsub(\"\
    [%x]+\", \" \"):gsub(\"[%X]+\", \" \"):gsub(\"[%]+\", \" \"):gsub(\"[%]+\", \"\
    \ \"):gsub(\"[%]+\", \" \"):gsub(\"[%]+\", \" \"):gsub(\"[%]+\", \" \"):gsub(\"\
    [%]+\", \" \"):gsub(\"[%]+\", \" \"):gsub(\"[%]+\", \" \"):gsub(\"[%]+\", \" \"\
    ):gsub(\"[%]+\", \" \"):gsub(\"[%]+\", \" \"):gsub(\"[%]+\", \" \"):gsub(\"[%]+\"\
    , \" \"):gsub(\"[%]+\", \" \"):gsub(\"[%]+\", \" \"):gsub(\"[%]+\", \" \"):gsub(\"\
    [%]+\", \" \"):gsub(\"[%]+\", \" \"):gsub(\"[%]+\", \" \"):gsub(\"[%]+\", \" \"\
    ):gsub(\"[%]+\", \" \"):gsub(\"[%]+\", \" \"):gsub(\"[%]+\", \" \"):gsub(\"[%]+\"\
    , \" \"):gsub(\"[%]+\", \" \"):gsub(\"[%]+\", \" \"):gsub(\"[%]+\", \" \"):gsub(\"\
    [%]+\", \" \"):gsub(\"[%]+\", \" \"):gsub(\"[%]+\", \" \"):gsub(\"[%]+\", \" \"\
    ):gsub(\"[%]+\", \" \"):gsub(\"[%]+\", \" \"):gsub(\"[%]+\", \" \"):gsub(\"[%]+\"\
    , \" \"):gsub(\"[%]+\", \" \"):gsub(\"[%]+\", \" \"):gsub(\"[%]+\", \" \"):gsub(\"\
    [%]+\", \" \"):gsub(\"[%]+\", \" \"):gsub(\"[%]+\", \" \"):gsub(\"[%]+\", \" \"\
    ):gsub(\"[%]+\", \" \"):gsub(\"[%]+\", \" \"):gsub(\"[%]+\", \" \"):gsub(\"[%]+\"\
    , \" \"):gsub(\"[%]+\", \" \"):gsub(\"[\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe3wbo1c8.lua:8: unfinished string near ''"[''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = \"\"\n  local count = 0\n  for c in txt:gmatch(\"[%w-]+\") do\n    count\
    \ = count + 1\n    if count % 2 == 1 then\n      words = words + c\n    else\n\
    \      words = words + \",\" + c\n    end\n  end\n  return words:gsub(\",+\",\
    \ \",\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzc9rgz2e.lua:13:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmpzc9rgz2e.lua:13: in function 'candidate'\n\t/tmp/tmpzc9rgz2e.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%z\\1-\\127\\194-\\244]+\", \"\")\n    local wordCount =\
    \ #words\n    local wordCountOdd = wordCount\n    local wordCountEven = wordCount\n\
    \    local wordCountEvenOdd = wordCount\n    local wordCountOddEven = wordCount\n\
    \    local wordCountEvenOddEven = wordCount\n    local wordCountOddEvenOdd = wordCount\n\
    \    local wordCountEvenOddEvenOdd = wordCount\n    local wordCountOddEvenOddEven\
    \ = wordCount\n    local wordCountEvenOddEvenOddEven = wordCount\n    local wordCountOddEvenOddEvenOddEven\
    \ = wordCount\n    local wordCountEvenOddEvenOddEvenOddEven = wordCount\n    local\
    \ wordCountOddEvenOddEvenOddEvenOddEven = wordCount\n    local wordCountEvenOddEvenOddEvenOddEvenOddEven\
    \ = wordCount\n    local wordCountOddEvenOddEvenOddEvenOddEvenOddEven = wordCount\n\
    \    local wordCountEvenOddEvenOddEvenOddEvenOddEvenOddEven = wordCount\n    local\
    \ wordCountOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = wordCount\n    local wordCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = wordCount\n    local wordCountOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = wordCount\n    local wordCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = wordCount\n    local wordCountOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = wordCount\n    local wordCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = wordCount\n    local wordCountOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = wordCount\n    local wordCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = wordCount\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp554gm_1h.lua:47: ''end'' expected (to close ''function'' at
    line 7) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \"\"):gsub(\"%w+,\",\",\")\n    local num_letters\
    \ = #words\n    local num_words = 0\n    local num_commas = 0\n    for i = 1,\
    \ num_letters do\n        if words[i]:sub(1,1) == 'a' then\n            num_words\
    \ = num_words + 1\n        elseif words[i]:sub(1,1) == 'b' then\n            num_words\
    \ = num_words + 1\n        elseif words[i]:sub(1,1) == 'c' then\n            num_words\
    \ = num_words + 1\n        elseif words[i]:sub(1,1) == 'd' then\n            num_words\
    \ = num_words + 1\n        elseif words[i]:sub(1,1) == 'e' then\n            num_words\
    \ = num_words + 1\n        elseif words[i]:sub(1,1) == 'f' then\n            num_words\
    \ = num_words + 1\n        elseif words[i]:sub(1,1) == 'g' then\n            num_words\
    \ = num_words + 1\n        elseif words[i]:sub(1,1) == 'h' then\n            num_words\
    \ = num_words + 1\n        elseif words[i]:sub(1,1) == 'i' then\n            num_words\
    \ = num_words + 1\n        elseif words[i]:sub(1,1) == 'j' then\n            num_words\
    \ = num_words + 1\n        elseif words[i]:sub(1,1) == 'k' then\n            num_words\
    \ = num_words + 1\n        elseif words[i]:sub(1,1) == 'l' then\n            num_words\
    \ = num_words + 1\n        elseif words[i]:sub(1,1) == 'm' then\n            num_words\
    \ = num_words + 1\n        elseif words[i]:sub(1,1) == 'n' then\n            num_words\
    \ = num_words + 1\n        elseif words[i]:sub(1,1) == 'o' then\n            num_words\
    \ = num_words + 1\n        elseif words[i]:sub(1,1) == 'p' then\n            num_words\
    \ = num_words + 1\n        elseif words[i]:sub(1,1) == 'q' then\n            num_words\
    \ = num_words + 1\n        elseif words[i]:sub(1,1) == 'r' then\n            num_words\
    \ = num_words + 1\n        elseif words[i]:sub(1,1) == 's' then\n            num_words\
    \ = num_words + 1\n        elseif words[i]:sub(1,1) == 't' then\n            num_words\
    \ = num_words + 1\n        elseif words[i]:sub(1,1) == 'u' then\n            num_words\
    \ = num_words + 1\n        elseif words[i]:sub(1,1) == 'v' then\n            num_words\
    \ = num_words + 1\n        elseif words[i]:sub(1,1) == 'w' then\n            num_words\
    \ = num_words + 1\n        elseif word\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc1ylcmsf.lua:60: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpqbql1rkz.lua:8: escape sequence too large near '\"[%z\x01\
    -\x7F-'\n"
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = string.gsub(txt, \"[^a-zA-Z ]\", \"\")\n    local words = string.gsub(words,\
    \ \" \", \",\")\n    local words = string.gsub(words, \"^,\", \"\")\n    local\
    \ words = string.gsub(words, \"$\", \"\")\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjhvxap8a.lua:18:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello,world\"\nstack traceback:\n\
    \t/tmp/tmpjhvxap8a.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = \"\"\n    local count = 0\n    for i = 1, #txt do\n        if string.sub(txt,\
    \ i, i+1) ~= \" \" then\n            count = count + 1\n            if count %\
    \ 2 == 1 then\n                words = words + string.sub(txt, i, i+1)\n     \
    \       else\n                words = words + \",\" \n            end\n      \
    \  else\n            count = count + 1\n            if count % 2 == 1 then\n \
    \               words = words + string.sub(txt, i, i+1)\n            else\n  \
    \              words = words + \",\" \n            end\n        end\n    end\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnu3o9lr9.lua:14:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmpnu3o9lr9.lua:14: in function 'candidate'\n\t/tmp/tmpnu3o9lr9.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \"\"):gsub(\",+\", \",\")\n    local wordCount = #words\n\
    \    local wordCountOdd = 0\n    for i = 1, wordCount do\n        if words[i]\
    \ % 2 ~= 0 then\n            wordCountOdd = wordCountOdd + 1\n        end\n  \
    \  end\n    return wordCountOdd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplv5k4rf2.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmplv5k4rf2.lua:12: in function 'candidate'\n\t/tmp/tmplv5k4rf2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%z]+\", \" \"):gsub(\"[%w]+\", \" \")\n    local words =\
    \ words:gsub(\"[%a]+\", \"\")\n    local words = words:gsub(\"[%A]+\", \"\")\n\
    \    local words = words:gsub(\"[%b]+\", \"\")\n    local words = words:gsub(\"\
    [%B]+\", \"\")\n    local words = words:gsub(\"[%c]+\", \"\")\n    local words\
    \ = words:gsub(\"[%C]+\", \"\")\n    local words = words:gsub(\"[%d]+\", \"\"\
    )\n    local words = words:gsub(\"[%D]+\", \"\")\n    local words = words:gsub(\"\
    [%e]+\", \"\")\n    local words = words:gsub(\"[%F]+\", \"\")\n    local words\
    \ = words:gsub(\"[%g]+\", \"\")\n    local words = words:gsub(\"[%G]+\", \"\"\
    )\n    local words = words:gsub(\"[%h]+\", \"\")\n    local words = words:gsub(\"\
    [%h]+\", \"\")\n    local words = words:gsub(\"[%i]+\", \"\")\n    local words\
    \ = words:gsub(\"[%I]+\", \"\")\n    local words = words:gsub(\"[%j]+\", \"\"\
    )\n    local words = words:gsub(\"[%k]+\", \"\")\n    local words = words:gsub(\"\
    [%l]+\", \"\")\n    local words = words:gsub(\"[%m]+\", \"\")\n    local words\
    \ = words:gsub(\"[%M]+\", \"\")\n    local words = words:gsub(\"[%n]+\", \"\"\
    )\n    local words = words:gsub(\"[%p]+\", \"\")\n    local words = words:gsub(\"\
    [%q]+\", \"\")\n    local words = words:gsub(\"[%r]+\", \"\")\n    local words\
    \ = words:gsub(\"[%s]+\", \"\")\n    local words = words:gsub(\"[%t]+\", \"\"\
    )\n    local words = words:gsub(\"[%u]+\", \"\")\n    local words = words:gsub(\"\
    [%v]+\", \"\")\n    local words = words:gsub(\"[%w]+\", \"\")\n    local words\
    \ = words:gsub(\"[%x]+\", \"\")\n    local words = words:gsub(\"[%y]+\", \"\"\
    )\n    local words = words:gsub(\"[%z]+\", \"\")\n    local words = words:gsub(\"\
    [%A]+\", \"\")\n    local words = words:gsub(\"[%B]+\", \"\")\n    local words\
    \ = words:gsub(\"[%C]+\", \"\")\n    local words = words:gsub(\"[%D]+\", \"\"\
    )\n    local words = words:gsub(\"[%E]+\", \"\")\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmhd9n_xr.lua:61: ''end'' expected (to close ''function'' at
    line 7) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \"\")\n    local comma = txt:gsub(\"%w+,\", \"\")\n\
    \    local lower = txt:gsub(\"%w+[a-z]\", \"\")\n    local count = txt:gsub(\"\
    %w+[a-z]\", \"\")\n    return words or comma or lower or count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ao3gx3r.lua:18:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \" !\"\nstack traceback:\n\t/tmp/tmp9ao3gx3r.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"%w+\", \" \"):gsub(\"%w+\", \",\")\n  return words:gsub(\"\
    ,\", \" \"):gsub(\"%w+\", \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppotaslru.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"   !\"\nstack traceback:\n\t/tmp/tmppotaslru.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \"\")\n    local words = words:gsub(\"%w+,\", \"\"\
    )\n    local words = words:gsub(\"%w+,%w+\", \"\")\n    local words = words:gsub(\"\
    %w+,%w+,\", \"\")\n    local words = words:gsub(\"%w+,%w+,%w+\", \"\")\n    local\
    \ words = words:gsub(\"%w+,%w+,%w+,\", \"\")\n    local words = words:gsub(\"\
    %w+,%w+,%w+,%w+\", \"\")\n    local words = words:gsub(\"%w+,%w+,%w+,%w+,\", \"\
    \")\n    local words = words:gsub(\"%w+,%w+,%w+,%w+,%w+\", \"\")\n    local words\
    \ = words:gsub(\"%w+,%w+,%w+,%w+,%w+,\", \"\")\n    local words = words:gsub(\"\
    %w+,%w+,%w+,%w+,%w+,%w+\", \"\")\n    local words = words:gsub(\"%w+,%w+,%w+,%w+,%w+,%w+,\"\
    , \"\")\n    local words = words:gsub(\"%w+,%w+,%w+,%w+,%w+,%w+,%w+\", \"\")\n\
    \    local words = words:gsub(\"%w+,%w+,%w+,%w+,%w+,%w+,%w+,\", \"\")\n    local\
    \ words = words:gsub(\"%w+,%w+,%w+,%w+,%w+,%w+,%w+,%w+\", \"\")\n    local words\
    \ = words:gsub(\"%w+,%w+,%w+,%w+,%w+,%w+,%w+,%w+,\", \"\")\n    local words =\
    \ words:gsub(\"%w+,%w+,%w+,%w+,%w+,%w+,%w+,%w+,%w+\", \"\")\n    local words =\
    \ words:gsub(\"%w+,%w+,%w+,%w+,%w+,%w+,%w+,%w+,%w+,\", \"\")\n    local words\
    \ = words:gsub(\"%w+,%w+,%w+,%w+,%w+,%w+,%w+,%w+,%w+,%w+\", \"\")\n    local words\
    \ = words:gsub(\"%w+,%w+,%w+,%w+,%w+,%w+,%w+,%w+,\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqbvt29s5.lua:27: unfinished string near ''"%w+,%w+,%w+,%w+,%w+,%w+,%w+,%w+,''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \" \"):gsub(\"%S+\", \" \"):gsub(\"%w+\", \",\")\n\
    \    return words and words:gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\"\
    , \",\"):gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\"\
    , \",\"):gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\"\
    , \",\"):gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\"\
    , \",\"):gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\"\
    , \",\"):gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\"\
    , \",\"):gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\"\
    , \",\"):gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\"\
    , \",\"):gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\"\
    , \",\"):gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\"\
    , \",\"):gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\"\
    , \",\"):gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\"\
    , \",\"):gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\"\
    , \",\"):gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\"\
    , \",\"):gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\", \",\"):gsub(\",+\"\
    , \",\"):gsub(\",\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5c3csbuw.lua:9: unfinished string near ''",''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = \"\"\n    local count = 0\n    for w in txt:gmatch(\"[%a]+\") do\n \
    \       count = count + 1\n        if w ~= \"\" then\n            words = words\
    \ + w \n        end\n    end\n    if count % 2 == 1 then\n        words = words\
    \ + \",\"\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0r1pyqsf.lua:13:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmp0r1pyqsf.lua:13: in function 'candidate'\n\t/tmp/tmp0r1pyqsf.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = \"\"\n    local count = 0\n    for c in txt:gmatch(\"[%a%A]+\") do\n\
    \        if c == \" \" then\n            count = count + 1\n        else\n   \
    \         count = count - 1\n        end\n        if count % 2 == 1 then\n   \
    \         words = words + c\n        end\n    end\n    return words\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvu0owbg7.lua:17:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmpvu0owbg7.lua:17: in function 'candidate'\n\t/tmp/tmpvu0owbg7.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"%w+\", \" \"):gsub(\"%w+\", \",\")\n  local letters = {}\n\
    \  for i = 1, #words do\n    table.insert(letters, words[i])\n  end\n  table.sort(letters)\n\
    \  local count = 0\n  for i = 1, #letters do\n    if letters[i] ~= letters[i -\
    \ 1] + 1 then\n      count = count + 1\n    end\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9iqome7.lua:26:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 0\nstack traceback:\n\t/tmp/tmpy9iqome7.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[,]+\", \" \")\n    local words = words:gsub(\"[%a]+\", \"\
    \ \")\n    local words = words:gsub(\"[%A]+\", \" \")\n    local words = words:gsub(\"\
    [%w]+\", \" \")\n    local words = words:gsub(\"[%W]+\", \" \")\n    local words\
    \ = words:gsub(\"[%c]+\", \" \")\n    local words = words:gsub(\"[%C]+\", \" \"\
    )\n    local words = words:gsub(\"[%x]+\", \" \")\n    local words = words:gsub(\"\
    [%X]+\", \" \")\n    local words = words:gsub(\"[%b]+\", \" \")\n    local words\
    \ = words:gsub(\"[%B]+\", \" \")\n    local words = words:gsub(\"[%n]+\", \" \"\
    )\n    local words = words:gsub(\"[%N]+\", \" \")\n    local words = words:gsub(\"\
    [%t]+\", \" \")\n    local words = words:gsub(\"[%T]+\", \" \")\n    local words\
    \ = words:gsub(\"[%u]+\", \" \")\n    local words = words:gsub(\"[%U]+\", \" \"\
    )\n    local words = words:gsub(\"[%v]+\", \" \")\n    local words = words:gsub(\"\
    [%V]+\", \" \")\n    local words = words:gsub(\"[%x]+\", \" \")\n    local words\
    \ = words:gsub(\"[%X]+\", \" \")\n    local words = words:gsub(\"[%p]+\", \" \"\
    )\n    local words = words:gsub(\"[%P]+\", \" \")\n    local words = words:gsub(\"\
    [%x]+\", \" \")\n    local words = words:gsub(\"[%X]+\", \" \")\n    local words\
    \ = words:gsub(\"[%c]+\", \" \")\n    local words = words:gsub(\"[%C]+\", \" \"\
    )\n    local words = words:gsub(\"[%p]+\", \" \")\n    local words = words:gsub(\"\
    [%P]+\", \" \")\n    local words = words:gsub(\"[%p]+\", \" \")\n    local words\
    \ = words:gsub(\"[%P]+\", \" \")\n    local words = words:gsub(\"[%p]+\", \" \"\
    )\n    local words = words:gsub(\"[%P]+\", \" \")\n    local words = words:gsub(\"\
    [%p]+\", \" \")\n    local words = words:gsub(\"[%P]+\", \" \")\n    local words\
    \ = words:gsub(\"[%p]+\", \" \")\n    local words = words:gsub(\"[\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1qqmmw26.lua:44: unfinished string near ''"[''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = \"\"\n  local count = 0\n  for w in txt:gmatch(\"[%w]+\") do\n    count\
    \ = count + 1\n    if count % 2 == 1 then\n      words = words + w .. \",\"\n\
    \    else\n      words = words + w\n    end\n  end\n  return words:gsub(\",$\"\
    , \"\"):gsub(\"^,\", \"\"):gsub(\",$\", \"\")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp96_0bf26.lua:13:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmp96_0bf26.lua:13: in function 'candidate'\n\t/tmp/tmp96_0bf26.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \" \")\n    local wordCount = #words\n    local wordCountOdd\
    \ = 0\n    local wordCountEven = 0\n    local wordCountLower = 0\n    local wordCountUpper\
    \ = 0\n    local wordCountSpace = 0\n    local wordCountComma = 0\n    local wordCountOther\
    \ = 0\n    local wordCountAll = 0\n    local wordCountAllOdd = 0\n    local wordCountAllEven\
    \ = 0\n    local wordCountAllLower = 0\n    local wordCountAllUpper = 0\n    local\
    \ wordCountAllSpace = 0\n    local wordCountAllComma = 0\n    local wordCountAllOther\
    \ = 0\n    local wordCountAllAll = 0\n    local wordCountAllAllOdd = 0\n    local\
    \ wordCountAllAllEven = 0\n    local wordCountAllAllLower = 0\n    local wordCountAllAllUpper\
    \ = 0\n    local wordCountAllAllSpace = 0\n    local wordCountAllAllComma = 0\n\
    \    local wordCountAllAllOther = 0\n    local wordCountAllAllAll = 0\n    local\
    \ wordCountAllAllAllOdd = 0\n    local wordCountAllAllAllEven = 0\n    local wordCountAllAllAllLower\
    \ = 0\n    local wordCountAllAllAllUpper = 0\n    local wordCountAllAllAllSpace\
    \ = 0\n    local wordCountAllAllAllComma = 0\n    local wordCountAllAllAllOther\
    \ = 0\n    local wordCountAllAllAllAll = 0\n    local wordCountAllAllAllOdd =\
    \ 0\n    local wordCountAllAllAllEven = 0\n    local wordCountAllAllAllLower =\
    \ 0\n    local wordCountAllAllAllUpper = 0\n    local wordCountAllAllAllSpace\
    \ = 0\n    local wordCountAllAllAllComma = 0\n    local wordCountAllAllAllOther\
    \ = 0\n    local wordCountAllAllAllAll = 0\n    local wordCountAllAllAllOdd =\
    \ 0\n    local wordCountAllAllAllEven = 0\n    local wordCountAllAllAllLower =\
    \ 0\n    local wordCountAllAllAllUpper = 0\n    local wordCountAllAllAllSpace\
    \ = 0\n    local wordCountAllAllAllComma = 0\n    local wordCountAllAllAllOther\
    \ = 0\n    local wordCountAllAllAllAll = 0\n    local wordCountAllAllAllOdd =\
    \ 0\n    local wordCountAllAllAllEven = 0\n    local wordCountAllAllAllLower =\
    \ 0\n    local wordCountAllAllAllUpper = 0\n    local wordCountAllAllAll\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp331ipq8b.lua:77: ''end'' expected (to close ''function'' at
    line 7) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = string.gsub(txt, \"[^a-zA-Z ]\", \" \")\n    local num_words = string.len(words)\n\
    \    local num_letters = 0\n    for i = 1, num_words do\n        local letter\
    \ = string.sub(words, i, i)\n        if letter ~= \" \" then\n            num_letters\
    \ = num_letters + 1\n        end\n    end\n    return num_letters, words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzx1u9dht.lua:23:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 10\nstack traceback:\n\t/tmp/tmpzx1u9dht.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \" \"):gsub(\"%w+\", \",\")\n    local num_words =\
    \ 0\n    for word in words:gmatch(\"%w+\") do\n        num_words = num_words +\
    \ 1\n    end\n    return num_words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnacxbxt3.lua:19:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 0\nstack traceback:\n\t/tmp/tmpnacxbxt3.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = txt:gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\376\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp2vtt6gxg.lua:8: escape sequence too large near '\"[%z\x01\
    -\x7F-'\n"
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = string.gsub(txt, \"[%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmg0gwzmk.lua:8: unfinished string near ''"[%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \"\")\n    local splits = words:gsub(\"%w+\", \",\"\
    )\n    local letters = splits:gsub(\"%w+\", \"a\")\n    local odd_letters = letters:gsub(\"\
    %w+\", \"b\")\n    local even = odd_letters:gsub(\"%w+\", \"c\")\n    local odd\
    \ = even:gsub(\"%w+\", \"d\")\n    local even = even:gsub(\"%w+\", \"e\")\n  \
    \  local odd = odd:gsub(\"%w+\", \"f\")\n    local even = even:gsub(\"%w+\", \"\
    g\")\n    local odd = odd:gsub(\"%w+\", \"h\")\n    local even = even:gsub(\"\
    %w+\", \"i\")\n    local odd = odd:gsub(\"%w+\", \"j\")\n    local even = even:gsub(\"\
    %w+\", \"k\")\n    local odd = odd:gsub(\"%w+\", \"l\")\n    local even = even:gsub(\"\
    %w+\", \"m\")\n    local odd = odd:gsub(\"%w+\", \"n\")\n    local even = even:gsub(\"\
    %w+\", \"o\")\n    local odd = odd:gsub(\"%w+\", \"p\")\n    local even = even:gsub(\"\
    %w+\", \"q\")\n    local odd = odd:gsub(\"%w+\", \"r\")\n    local even = even:gsub(\"\
    %w+\", \"s\")\n    local odd = odd:gsub(\"%w+\", \"t\")\n    local even = even:gsub(\"\
    %w+\", \"u\")\n    local odd = odd:gsub(\"%w+\", \"v\")\n    local even = even:gsub(\"\
    %w+\", \"w\")\n    local odd = odd:gsub(\"%w+\", \"x\")\n    local even = even:gsub(\"\
    %w+\", \"y\")\n    local odd = odd:gsub(\"%w+\", \"z\")\n    local even = even:gsub(\"\
    %w+\", \"a\")\n    local odd = odd:gsub(\"%w+\", \"b\")\n    local even = even:gsub(\"\
    %w+\", \"c\")\n    local odd = odd:gsub(\"%w+\", \"d\")\n    local even = even:gsub(\"\
    %w+\", \"e\")\n    local odd = odd:gsub(\"%w+\", \"f\")\n    local even = even:gsub(\"\
    %w+\", \"g\")\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf8xq6krg.lua:58: ''end'' expected (to close ''function'' at
    line 7) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"%w+\", \"\")\n  local words = words:gsub(\"%w+,\", \"\")\n\
    \  local words = words:gsub(\"%w+.\", \"\")\n  local words = words:gsub(\"%w+,.\"\
    , \"\")\n  local words = words:gsub(\"%w+.,\", \"\")\n  local words = words:gsub(\"\
    %w+,.,\", \"\")\n  local words = words:gsub(\"%w+.,.\", \"\")\n  local words =\
    \ words:gsub(\"%w+,.,.\", \"\")\n  local words = words:gsub(\"%w+.,.,\", \"\"\
    )\n  local words = words:gsub(\"%w+,.,.\", \"\")\n  local words = words:gsub(\"\
    %w+,.,.,\", \"\")\n  local words = words:gsub(\"%w+.,.,.\", \"\")\n  local words\
    \ = words:gsub(\"%w+,.,.,\", \"\")\n  local words = words:gsub(\"%w+,.,.,\", \"\
    \")\n  local words = words:gsub(\"%w+.,.,.\", \"\")\n  local words = words:gsub(\"\
    %w+,.,.,\", \"\")\n  local words = words:gsub(\"%w+,.,.,\", \"\")\n  local words\
    \ = words:gsub(\"%w+.,.,.\", \"\")\n  local words = words:gsub(\"%w+,.,.,\", \"\
    \")\n  local words = words:gsub(\"%w+,.,.,\", \"\")\n  local words = words:gsub(\"\
    %w+.,.,.\", \"\")\n  local words = words:gsub(\"%w+,.,.,\", \"\")\n  local words\
    \ = words:gsub(\"%w+,.,.,\", \"\")\n  local words = words:gsub(\"%w+.,.,.\", \"\
    \")\n  local words = words:gsub(\"%w+,.,.,\", \"\")\n  local words = words:gsub(\"\
    %w+,.,.,\", \"\")\n  local words = words:gsub(\"%w+.,.,.\", \"\")\n  local words\
    \ = words:gsub(\"%w+,.,.,\", \"\")\n  local words = words:gsub(\"%w+,.,.,\", \"\
    \")\n  local words = words:gsub(\"%w+.,.,.\", \"\")\n  local words = words:gsub(\"\
    %w+,.,.,\", \"\")\n  local words = words:gsub(\"%w+,\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw32fz6q7.lua:39: unfinished string near ''"%w+,''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+$\", \"\")\n  local words = words:gsub(\"\
    ^%s+\", \" \")\n  local words = words:gsub(\"%s+$\", \"\")\n  local words = words:gsub(\"\
    ,\", \" \")\n  local words = words:gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %S+$\", \"\")\n  local words = words:gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %S+$\", \"\")\n  local words = words:gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %S+$\", \"\")\n  local words = words:gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %S+$\", \"\")\n  local words = words:gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %S+$\", \"\")\n  local words = words:gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %S+$\", \"\")\n  local words = words:gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %S+$\", \"\")\n  local words = words:gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %S+$\", \"\")\n  local words = words:gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %S+$\", \"\")\n  local words = words:gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %S+$\", \"\")\n  local words = words:gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %S+$\", \"\")\n  local words = words:gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %S+$\", \"\")\n  local words = words:gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %S+$\", \"\")\n  local words = words:gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %S+$\", \"\")\n  local words = words:gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %S+$\", \"\")\n  local words = words:gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %S+$\", \"\")\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr3enc2u7.lua:59: ''end'' expected (to close ''function'' at
    line 7) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = \"\"\n  local count = 0\n  for w in txt:gmatch(\"[^ ]+\") do\n    count\
    \ = count + 1\n    if w ~= \"\" then\n      words = words + w .. \",\"\n    end\n\
    \  end\n  if count % 2 ~= 0 then\n    words = words:sub(1, words:len() - 1)\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyvwcmfa3.lua:13:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmpyvwcmfa3.lua:13: in function 'candidate'\n\t/tmp/tmpyvwcmfa3.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%z]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \"\
    ,\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpim8iy5jc.lua:8: unfinished string near ''"[%w]+''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = \"\"\n  local count = 0\n  for c in txt:gmatch(\"%w+\") do\n    count\
    \ = count + 1\n    if count % 2 == 1 then\n      words = words + c\n    end\n\
    \  end\n  if words == \"\" then\n    words = txt:gsub(\"%w+\", \",\")\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsc85y9dt.lua:13:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmpsc85y9dt.lua:13: in function 'candidate'\n\t/tmp/tmpsc85y9dt.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = string.gsub(txt, \"[^A-Za-z]+\", \" \")\n    local num_words = #words\n\
    \    local num_letters = 0\n    for i = 1, num_words do\n        local letter\
    \ = string.sub(words, i, i)\n        if letter ~= \"\" then\n            num_letters\
    \ = num_letters + 1\n        end\n    end\n    return num_letters % 2\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sxykpc1.lua:23:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 0\nstack traceback:\n\t/tmp/tmp7sxykpc1.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%a]+\", \" \")\n    local words = words:gsub(\"[%a]+\",\
    \ \",\")\n    local words = words:gsub(\"[%a]+\", \" \")\n    local words = words:gsub(\"\
    [%a]+\", \",\")\n    local words = words:gsub(\"[%a]+\", \" \")\n    local words\
    \ = words:gsub(\"[%a]+\", \",\")\n    local words = words:gsub(\"[%a]+\", \" \"\
    )\n    local words = words:gsub(\"[%a]+\", \",\")\n    local words = words:gsub(\"\
    [%a]+\", \" \")\n    local words = words:gsub(\"[%a]+\", \",\")\n    local words\
    \ = words:gsub(\"[%a]+\", \" \")\n    local words = words:gsub(\"[%a]+\", \",\"\
    )\n    local words = words:gsub(\"[%a]+\", \" \")\n    local words = words:gsub(\"\
    [%a]+\", \",\")\n    local words = words:gsub(\"[%a]+\", \" \")\n    local words\
    \ = words:gsub(\"[%a]+\", \",\")\n    local words = words:gsub(\"[%a]+\", \" \"\
    )\n    local words = words:gsub(\"[%a]+\", \",\")\n    local words = words:gsub(\"\
    [%a]+\", \" \")\n    local words = words:gsub(\"[%a]+\", \",\")\n    local words\
    \ = words:gsub(\"[%a]+\", \" \")\n    local words = words:gsub(\"[%a]+\", \",\"\
    )\n    local words = words:gsub(\"[%a]+\", \" \")\n    local words = words:gsub(\"\
    [%a]+\", \",\")\n    local words = words:gsub(\"[%a]+\", \" \")\n    local words\
    \ = words:gsub(\"[%a]+\", \",\")\n    local words = words:gsub(\"[%a]+\", \" \"\
    )\n    local words = words:gsub(\"[%a]+\", \",\")\n    local words = words:gsub(\"\
    [%a]+\", \" \")\n    local words = words:gsub(\"[%a]+\", \",\")\n    local words\
    \ = words:gsub(\"[%a]+\", \" \")\n    local words = words:gsub(\"[%a]+\", \",\"\
    )\n    local words = words:gsub(\"[%a]+\", \" \")\n    local words = words:gsub(\"\
    [%a]+\", \",\")\n    local words = words:gsub(\"[%a]+\", \" \")\n    local words\
    \ = words:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpeflxm36q.lua:44: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = \"\"\n  local count = 0\n  for w in txt:gmatch(\"%w+\") do\n    count\
    \ = count + 1\n    if count % 2 == 1 then\n      words = words + w .. \",\"\n\
    \    else\n      words = words + w\n    end\n  end\n  return words:gsub(\",$\"\
    , \"\"):gsub(\"^,\", \"\"):gsub(\",$\", \"\")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq9janejf.lua:13:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmpq9janejf.lua:13: in function 'candidate'\n\t/tmp/tmpq9janejf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = \"\"\n  local count = 0\n  for w in txt:gmatch(\"[^ ]+\") do\n    count\
    \ = count + 1\n    if w ~= \"\" then\n      words = words .. w .. \",\"\n    end\n\
    \  end\n  if count % 2 == 1 then\n    words = words .. \"and \" .. words[#words]\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmwosir5w.lua:25:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello,world!,\"\nstack traceback:\n\
    \t/tmp/tmpmwosir5w.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"%w+\", \"\")\n  local whitespace = txt:gsub(\"%w+,\", \"\"\
    )\n  if whitespace == \"\" then\n    return #words\n  else\n    return #words\
    \ + #whitespace\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpojtm9e0u.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 14\nstack traceback:\n\t/tmp/tmpojtm9e0u.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = \"\"\n    local count = 0\n    for w in txt:gmatch(\"[%w]+\") do\n \
    \       count = count + 1\n        if w ~= \"\" then\n            words = words\
    \ + w .. \",\"\n        end\n    end\n    if words == \"\" then\n        words\
    \ = count\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl1wv37k4.lua:13:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmpl1wv37k4.lua:13: in function 'candidate'\n\t/tmp/tmpl1wv37k4.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[,.]+\", \" \"):gsub(\"[%c]+\", \" \"):gsub(\"[%w]+\", \"\
    \ \"):gsub(\"[%W]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%W]+\", \" \"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%W]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%W]+\",\
    \ \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%W]+\", \" \")\n    local words = words:gsub(\"\
    [%c]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%W]+\", \" \")\n    local words\
    \ = words:gsub(\"[%c]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%W]+\", \" \"\
    )\n    local words = words:gsub(\"[%c]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%W]+\", \" \")\n    local words = words:gsub(\"[%c]+\", \" \"):gsub(\"[%w]+\"\
    , \" \"):gsub(\"[%W]+\", \" \")\n    local words = words:gsub(\"[%c]+\", \" \"\
    ):gsub(\"[%w]+\", \" \"):gsub(\"[%W]+\", \" \")\n    local words = words:gsub(\"\
    [%c]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%W]+\", \" \")\n    local words\
    \ = words:gsub(\"[%c]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%W]+\", \" \"\
    )\n    local words = words:gsub(\"[%c]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%W]+\", \" \")\n    local words = words:gsub(\"[%c]+\", \" \"):gsub(\"[%w]+\"\
    , \" \"):gsub(\"[%W]+\", \" \")\n    local words = words:gsub(\"[%c]+\", \" \"\
    ):gsub(\"[%w]+\", \" \"):gsub(\"[%W]+\", \" \")\n    local words = words:gsub(\"\
    [%c]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%W]+\", \" \")\n    local words\
    \ = words:gsub(\"[%c]+\", \" \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzfeiseqh.lua:20: unfinished string near ''" ''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \"\")\n    local comma = txt:gsub(\"%w+,\", \"\")\n\
    \    local lower = txt:gsub(\"%w+[a-z]\", \"\")\n    local odd = txt:gsub(\"%w+[a-z]%w+\"\
    , \"\")\n    \n    if words == \"\" then\n        return #lower + 1\n    end\n\
    \    if comma == \"\" then\n        return #lower + 1\n    end\n    if odd ~=\
    \ \"\" then\n        return #lower + 1\n    end\n    return #lower + 1\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw4ex2lgu.lua:28:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 3\nstack traceback:\n\t/tmp/tmpw4ex2lgu.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = string.gsub(txt, \"[%c]+\", \" \")\n  local words = string.gsub(words,\
    \ \"[%c]+\", \",\")\n  local words = string.gsub(words, \"[%c]+\", \" \")\n  local\
    \ words = string.gsub(words, \"[%c]+\", \",\")\n  local words = string.gsub(words,\
    \ \"[%c]+\", \" \")\n  local words = string.gsub(words, \"[%c]+\", \",\")\n  local\
    \ words = string.gsub(words, \"[%c]+\", \" \")\n  local words = string.gsub(words,\
    \ \"[%c]+\", \",\")\n  local words = string.gsub(words, \"[%c]+\", \" \")\n  local\
    \ words = string.gsub(words, \"[%c]+\", \",\")\n  local words = string.gsub(words,\
    \ \"[%c]+\", \" \")\n  local words = string.gsub(words, \"[%c]+\", \",\")\n  local\
    \ words = string.gsub(words, \"[%c]+\", \" \")\n  local words = string.gsub(words,\
    \ \"[%c]+\", \",\")\n  local words = string.gsub(words, \"[%c]+\", \" \")\n  local\
    \ words = string.gsub(words, \"[%c]+\", \",\")\n  local words = string.gsub(words,\
    \ \"[%c]+\", \" \")\n  local words = string.gsub(words, \"[%c]+\", \",\")\n  local\
    \ words = string.gsub(words, \"[%c]+\", \" \")\n  local words = string.gsub(words,\
    \ \"[%c]+\", \",\")\n  local words = string.gsub(words, \"[%c]+\", \" \")\n  local\
    \ words = string.gsub(words, \"[%c]+\", \",\")\n  local words = string.gsub(words,\
    \ \"[%c]+\", \" \")\n  local words = string.gsub(words, \"[%c]+\", \",\")\n  local\
    \ words = string.gsub(words, \"[%c]+\", \" \")\n  local words = string.gsub(words,\
    \ \"[%c]+\", \",\")\n  local words = string.gsub(words, \"[%c]+\", \" \")\n  local\
    \ words = string.gsub(words, \"[%c]+\", \",\")\n  local words = string.gsub(words,\
    \ \"[%c]+\", \" \")\n  local words = string.gsub(words, \"[%c]+\", \",\")\n  local\
    \ words = string.gsub(words, \"[%c]+\", \" \")\n  local words = string.gsub(words,\
    \ \"[%c]+\", \",\")\n  local words = string.gsub(words, \"[%c]+\", \" \")\n  \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf8_h2fv9.lua:56: ''end'' expected (to close ''function'' at
    line 7) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\376\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp8ptf671i.lua:8: escape sequence too large near '\"[%z\x01\
    -\x7F-'\n"
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%z]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+,\", \"\
    \ \")\n    local words = words:gsub(\"^%s+\", \"\"):gsub(\"%s+$\", \"\"):gsub(\"\
    ^%s+\", \" \")\n    local words = words:gsub(\"^%s+\", \"\"):gsub(\"%s+$\", \"\
    \"):gsub(\"^%s+\", \" \")\n    local words = words:gsub(\"^%s+\", \"\"):gsub(\"\
    %s+$\", \"\"):gsub(\"^%s+\", \" \")\n    local words = words:gsub(\"^%s+\", \"\
    \"):gsub(\"%s+$\", \"\"):gsub(\"^%s+\", \" \")\n    local words = words:gsub(\"\
    ^%s+\", \"\"):gsub(\"%s+$\", \"\"):gsub(\"^%s+\", \" \")\n    local words = words:gsub(\"\
    ^%s+\", \"\"):gsub(\"%s+$\", \"\"):gsub(\"^%s+\", \" \")\n    local words = words:gsub(\"\
    ^%s+\", \"\"):gsub(\"%s+$\", \"\"):gsub(\"^%s+\", \" \")\n    local words = words:gsub(\"\
    ^%s+\", \"\"):gsub(\"%s+$\", \"\"):gsub(\"^%s+\", \" \")\n    local words = words:gsub(\"\
    ^%s+\", \"\"):gsub(\"%s+$\", \"\"):gsub(\"^%s+\", \" \")\n    local words = words:gsub(\"\
    ^%s+\", \"\"):gsub(\"%s+$\", \"\"):gsub(\"^%s+\", \" \")\n    local words = words:gsub(\"\
    ^%s+\", \"\"):gsub(\"%s+$\", \"\"):gsub(\"^%s+\", \" \")\n    local words = words:gsub(\"\
    ^%s+\", \"\"):gsub(\"%s+$\", \"\"):gsub(\"^%s+\", \" \")\n    local words = words:gsub(\"\
    ^%s+\", \"\"):gsub(\"%s+$\", \"\"):gsub(\"^%s+\", \" \")\n    local words = words:gsub(\"\
    ^%s+\", \"\"):gsub(\"%s+$\", \"\"):gsub(\"^%s+\", \" \")\n    local words = words:gsub(\"\
    ^%s+\", \"\"):gsub(\"%s+$\", \"\"):gsub(\"^%s+\", \" \")\n    local words = words:gsub(\"\
    ^%s+\", \"\"):gsub(\"%s+$\", \"\"):gsub(\"^%s+\", \" \")\n    local words = words:gsub(\"\
    ^%s+\", \"\"):\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp27gtstua.lua:26: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\376\\377]\", \"\"):gsub(\"\
    [%z\\1-\\127\\194-\\244\\377\\370-\\376]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\\
    244]\", \"\"):gsub(\"[%z\\1-\\127\\194]\", \"\"):gsub(\"[%z\\1-\\124]\", \"\"\
    ):gsub(\"[%z\\1]\", \"\")\n    return words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpyy_8w2yc.lua:8: escape sequence too large near '\"[%z\x01\
    -\x7F-'\n"
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \" \"):gsub(\"%w+\", \",\")\n    local letters = {}\n\
    \    for i = 1, #words do\n        local letter = words[i]:lower()\n        if\
    \ letters[letter] == nil then\n            letters[letter] = i\n        end\n\
    \    end\n    return #letters, letters\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdgli0hnh.lua:11:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpdgli0hnh.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpdgli0hnh.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"%w+\", \"\")\n  local wordCount = #words\n  local wordCountOdd\
    \ = 0\n  for i = 1, #words do\n    if words[i] % 2 ~= 0 then\n      wordCountOdd\
    \ = wordCountOdd + 1\n    end\n  end\n  return wordCount, wordCountOdd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpucuutr36.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpucuutr36.lua:12: in function 'candidate'\n\t/tmp/tmpucuutr36.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\376\\377\\377]\", \"\"\
    ):gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\376\\377\\377\\377]\", \"\")\n  local\
    \ words = words:gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\376\\377\\377\\377]\"\
    , \"\")\n  local words = words:gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\376\\\
    377\\377\\377\\377]\", \"\")\n  local words = words:gsub(\"[%z\\1-\\127\\194-\\\
    244\\377\\370-\\376\\377\\377\\377\\377\\377]\", \"\")\n  local words = words:gsub(\"\
    [%z\\1-\\127\\194-\\244\\377\\370-\\376\\377\\377\\377\\377\\377\\377]\", \"\"\
    )\n  local words = words:gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\376\\377\\\
    377\\377\\377\\377\\377\\377]\", \"\")\n  local words = words:gsub(\"[%z\\1-\\\
    127\\194-\\244\\377\\370-\\376\\377\\377\\377\\377\\377\\377\\377\\377\\377]\"\
    , \"\")\n  local words = words:gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\376\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377]\", \"\")\n  local words = words:gsub(\"\
    [%z\\1-\\127\\194-\\244\\377\\370-\\376\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377]\", \"\")\n  local words = words:gsub(\"[%z\\1-\\127\\194-\\244\\\
    377\\370-\\376\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377]\", \"\"\
    )\n  local words = words:gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\376\\377\\\
    377\\377\\377\\377\\377\\377\\377\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpupejh42g.lua:8: escape sequence too large near '\"[%z\x01\
    -\x7F-'\n"
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = txt:gmatch(\"[%w-]+\")\n\tlocal count = 0\n\tlocal letters = {}\n\t\
    for i = 1, #words do\n\t\tlocal letter = words[i]\n\t\tif letter:sub(1, 1) ==\
    \ 'a' then\n\t\t\tcount = count + 1\n\t\t\tletters[#letters + 1] = letter\n\t\t\
    elseif letter:sub(1, 1) == 'b' then\n\t\t\tcount = count + 1\n\t\t\tletters[#letters\
    \ + 1] = letter\n\t\telseif letter:sub(1, 1) == 'c' then\n\t\t\tcount = count\
    \ + 1\n\t\t\tletters[#letters + 1] = letter\n\t\telseif letter:sub(1, 1) == 'd'\
    \ then\n\t\t\tcount = count + 1\n\t\t\tletters[#letters + 1] = letter\n\t\telseif\
    \ letter:sub(1, 1) == 'e' then\n\t\t\tcount = count + 1\n\t\t\tletters[#letters\
    \ + 1] = letter\n\t\telseif letter:sub(1, 1) == 'f' then\n\t\t\tcount = count\
    \ + 1\n\t\t\tletters[#letters + 1] = letter\n\t\telseif letter:sub(1, 1) == 'g'\
    \ then\n\t\t\tcount = count + 1\n\t\t\tletters[#letters + 1] = letter\n\t\telseif\
    \ letter:sub(1, 1) == 'h' then\n\t\t\tcount = count + 1\n\t\t\tletters[#letters\
    \ + 1] = letter\n\t\telseif letter:sub(1, 1) == 'i' then\n\t\t\tcount = count\
    \ + 1\n\t\t\tletters[#letters + 1] = letter\n\t\telseif letter:sub(1, 1) == 'j'\
    \ then\n\t\t\tcount = count + 1\n\t\t\tletters[#letters + 1] = letter\n\t\telseif\
    \ letter:sub(1, 1) == 'k' then\n\t\t\tcount = count + 1\n\t\t\tletters[#letters\
    \ + 1] = letter\n\t\telseif letter:sub(1, 1) == 'l' then\n\t\t\tcount = count\
    \ + 1\n\t\t\tletters[#letters + 1] = letter\n\t\telseif letter:sub(1, 1) == 'm'\
    \ then\n\t\t\tcount = count + 1\n\t\t\tletters[#letters + 1] = letter\n\t\telseif\
    \ letter:sub(1, 1) == 'n' then\n\t\t\tcount = count + 1\n\t\t\tletters[#letters\
    \ + 1] = letter\n\t\telseif letter:sub(1, 1) == 'o' then\n\t\t\tcount = count\
    \ + 1\n\t\t\tletters[#letters + 1] = letter\n\t\telseif letter:sub(1, 1) == 'p'\
    \ then\n\t\t\tcount = count + 1\n\t\t\tletters[#letters + 1] = letter\n\t\telseif\
    \ letter:sub(1, 1) == 'q' then\n\t\t\tcount = count + 1\n\t\t\tletters[#letters\
    \ + 1] = letter\n\t\telseif letter:sub(1, 1) == 'r' then\n\t\t\tcount = count\
    \ + 1\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuuqmzw22.lua:81: ''end'' expected (to close ''if'' at line
    13) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = string.gsub(txt, \"[^a-zA-Z ]+\", \"\")\n    local count = 0\n    for\
    \ i = 1, #words do\n        if string.find(words[i], \" \") then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgeleaolp.lua:11:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpgeleaolp.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpgeleaolp.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = string.gsub(txt, \"[%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph2tilsn8.lua:8: unfinished string near ''"[%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = \"\"\n    local count = 1\n    for c in txt:gmatch(\"[%a%A]+\") do\n\
    \        if c ~= \" \" then\n            count = count + 1\n        end\n    \
    \    words = words + c\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnb49lvdu.lua:14:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmpnb49lvdu.lua:14: in function 'candidate'\n\t/tmp/tmpnb49lvdu.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \"\")\n    local words = words:gsub(\",+\", \",\"\
    )\n    local words = words:gsub(\"%w+\", \"\")\n    local words = words:gsub(\"\
    %w+\", \"\")\n    local words = words:gsub(\"%w+\", \"\")\n    local words = words:gsub(\"\
    %w+\", \"\")\n    local words = words:gsub(\"%w+\", \"\")\n    local words = words:gsub(\"\
    %w+\", \"\")\n    local words = words:gsub(\"%w+\", \"\")\n    local words = words:gsub(\"\
    %w+\", \"\")\n    local words = words:gsub(\"%w+\", \"\")\n    local words = words:gsub(\"\
    %w+\", \"\")\n    local words = words:gsub(\"%w+\", \"\")\n    local words = words:gsub(\"\
    %w+\", \"\")\n    local words = words:gsub(\"%w+\", \"\")\n    local words = words:gsub(\"\
    %w+\", \"\")\n    local words = words:gsub(\"%w+\", \"\")\n    local words = words:gsub(\"\
    %w+\", \"\")\n    local words = words:gsub(\"%w+\", \"\")\n    local words = words:gsub(\"\
    %w+\", \"\")\n    local words = words:gsub(\"%w+\", \"\")\n    local words = words:gsub(\"\
    %w+\", \"\")\n    local words = words:gsub(\"%w+\", \"\")\n    local words = words:gsub(\"\
    %w+\", \"\")\n    local words = words:gsub(\"%w+\", \"\")\n    local words = words:gsub(\"\
    %w+\", \"\")\n    local words = words:gsub(\"%w+\", \"\")\n    local words = words:gsub(\"\
    %w+\", \"\")\n    local words = words:gsub(\"%w+\", \"\")\n    local words = words:gsub(\"\
    %w+\", \"\")\n    local words = words:gsub(\"%w+\", \"\")\n    local words = words:gsub(\"\
    %w+\", \"\")\n    local words = words:gsub(\"%w+\", \"\")\n    local words = words:gsub(\"\
    %w+\", \"\")\n    local words = words:gsub(\"%w+\", \"\")\n    local words = words:gsub(\"\
    %w+\", \"\")\n    local words = words:gsub(\"%w+\", \"\")\n    local words = words:gsub(\"\
    %w+\", \"\")\n    local words = words:gsub(\"%w+\", \"\")\n    local words = words:gsub(\"\
    %w+\", \"\")\n    local words = words:gsub(\"%w+\", \"\")\n    local words = words:gsub(\"\
    %w+\", \"\")\n    local words = words:gsub(\"%w+\", \"\")\n    local words = words:gsub(\"\
    %w+\", \"\")\n    local words = words:gsub(\"%w+\", \"\")\n    local words = words:gsub(\"\
    %w+\", \"\")\n    local words = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn3nb6ei3.lua:55: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \"\")\n    local comma = txt:gsub(\"%w+,\", \"\")\n\
    \    local letters = txt:gsub(\"%w+[%w]+\", \"\")\n    local letters_odd = txt:gsub(\"\
    %w+[%w]+[%w]+\", \"\")\n    local letters_even = txt:gsub(\"%w+[%w]+[%w]+[%w]+\"\
    , \"\")\n    local letters_odd_even = txt:gsub(\"%w+[%w]+[%w]+[%w]+[%w]+\", \"\
    \")\n    local letters_odd_odd = txt:gsub(\"%w+[%w]+[%w]+[%w]+[%w]+[%w]+\", \"\
    \")\n    local letters_odd_odd_even = txt:gsub(\"%w+[%w]+[%w]+[%w]+[%w]+[%w]+[%w]+\"\
    , \"\")\n    local letters_odd_odd_odd = txt:gsub(\"%w+[%w]+[%w]+[%w]+[%w]+[%w]+[%w]+[%w]+\"\
    , \"\")\n    local letters_odd_odd_odd_even = txt:gsub(\"%w+[%w]+[%w]+[%w]+[%w]+[%w]+[%w]+[%w]+[%w]+\"\
    , \"\")\n    local letters_odd_odd_odd_odd = txt:gsub(\"%w+[%w]+[%w]+[%w]+[%w]+[%w]+[%w]+[%w]+[%w]+[%w]+\"\
    , \"\")\n    local letters_odd_odd_odd_odd_even = txt:gsub(\"%w+[%w]+[%w]+[%w]+[%w]+[%w]+[%w]+[%w]+[%w]+[%w]+[%w]+\"\
    , \"\")\n    local letters_odd_odd_odd_odd_odd = txt:gsub(\"%w+[%w]+[%w]+[%w]+[%w]+[%w]+[%w]+[%w]+[%w]+[%w]+[%w]+[%w]+\"\
    , \"\")\n    local letters_odd_odd_odd_odd_odd_even = txt:g\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpae1hgj9o.lua:22: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%z]+\", \" \")\n    local words = words:gsub(\"[%a]+\",\
    \ \" \")\n    local words = words:gsub(\"[%A]+\", \" \")\n    local words = words:gsub(\"\
    [%w]+\", \" \")\n    local words = words:gsub(\"[%W]+\", \" \")\n    local words\
    \ = words:gsub(\"[%S]+\", \" \")\n    local words = words:gsub(\"[%S]+\", \" \"\
    )\n    local words = words:gsub(\"[%z]+\", \" \")\n    local words = words:gsub(\"\
    [%z]+\", \" \")\n    local words = words:gsub(\"[%z]+\", \" \")\n    local words\
    \ = words:gsub(\"[%z]+\", \" \")\n    local words = words:gsub(\"[%z]+\", \" \"\
    )\n    local words = words:gsub(\"[%z]+\", \" \")\n    local words = words:gsub(\"\
    [%z]+\", \" \")\n    local words = words:gsub(\"[%z]+\", \" \")\n    local words\
    \ = words:gsub(\"[%z]+\", \" \")\n    local words = words:gsub(\"[%z]+\", \" \"\
    )\n    local words = words:gsub(\"[%z]+\", \" \")\n    local words = words:gsub(\"\
    [%z]+\", \" \")\n    local words = words:gsub(\"[%z]+\", \" \")\n    local words\
    \ = words:gsub(\"[%z]+\", \" \")\n    local words = words:gsub(\"[%z]+\", \" \"\
    )\n    local words = words:gsub(\"[%z]+\", \" \")\n    local words = words:gsub(\"\
    [%z]+\", \" \")\n    local words = words:gsub(\"[%z]+\", \" \")\n    local words\
    \ = words:gsub(\"[%z]+\", \" \")\n    local words = words:gsub(\"[%z]+\", \" \"\
    )\n    local words = words:gsub(\"[%z]+\", \" \")\n    local words = words:gsub(\"\
    [%z]+\", \" \")\n    local words = words:gsub(\"[%z]+\", \" \")\n    local words\
    \ = words:gsub(\"[%z]+\", \" \")\n    local words = words:gsub(\"[%z]+\", \" \"\
    )\n    local words = words:gsub(\"[%z]+\", \" \")\n    local words = words:gsub(\"\
    [%z]+\", \" \")\n    local words = words:gsub(\"[%z]+\", \" \")\n    local words\
    \ = words:gsub(\"[%z]+\", \" \")\n    local words = words:gsub(\"\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwui08jaa.lua:44: unfinished string near ''"''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%a]+\", \" \"):gsub(\"[%A]+\", \" \"):gsub(\"[%w]+\", \"\
    \ \"):gsub(\"[%W]+\", \" \"):gsub(\"[%c]+\", \" \"):gsub(\"[%C]+\", \" \"):gsub(\"\
    [%d]+\", \" \"):gsub(\"[%D]+\", \" \"):gsub(\"[%e]+\", \" \"):gsub(\"[%E]+\",\
    \ \" \"):gsub(\"[%f]+\", \" \"):gsub(\"[%F]+\", \" \"):gsub(\"[%g]+\", \" \"):gsub(\"\
    [%G]+\", \" \"):gsub(\"[%h]+\", \" \"):gsub(\"[%H]+\", \" \"):gsub(\"[%j]+\",\
    \ \" \"):gsub(\"[%J]+\", \" \"):gsub(\"[%k]+\", \" \"):gsub(\"[%K]+\", \" \"):gsub(\"\
    [%l]+\", \" \"):gsub(\"[%L]+\", \" \"):gsub(\"[%m]+\", \" \"):gsub(\"[%M]+\",\
    \ \" \"):gsub(\"[%n]+\", \" \"):gsub(\"[%N]+\", \" \"):gsub(\"[%p]+\", \" \"):gsub(\"\
    [%P]+\", \" \"):gsub(\"[%r]+\", \" \"):gsub(\"[%R]+\", \" \"):gsub(\"[%t]+\",\
    \ \" \"):gsub(\"[%T]+\", \" \"):gsub(\"[%u]+\", \" \"):gsub(\"[%U]+\", \" \"):gsub(\"\
    [%v]+\", \" \"):gsub(\"[%V]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%W]+\",\
    \ \" \"):gsub(\"[%x]+\", \" \"):gsub(\"[%X]+\", \" \"):gsub(\"[%y]+\", \" \"):gsub(\"\
    [%Y]+\", \" \"):gsub(\"[%z]+\", \" \"):gsub(\"[%Z]+\", \" \")\n    local words\
    \ = words:gsub(\"[%,]+\", \",\")\n    local words = words:gsub(\"[%,]+\", \",\"\
    )\n    local words = words:gsub(\"[%,]+\", \",\")\n    local words = words:gsub(\"\
    [%,]+\", \",\")\n    local words = words:gsub(\"[%,]+\", \",\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1nxr88r5.lua:13: unfinished string near ''",''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = string.gsub(txt, \"[%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmg0gwzmk.lua:8: unfinished string near ''"[%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[,.]+\", \" \"):gsub(\"[%c]+\", \" \"):gsub(\"[%w]+\", \"\
    \ \"):gsub(\"[%W]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%W]+\", \" \"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%W]+\", \" \")\n    local wordCount = #words\n    local\
    \ wordCountOdd = wordCount\n    local wordCountEven = wordCount\n    local wordCountEvenOdd\
    \ = wordCount\n    local wordCountEvenEven = wordCount\n    local wordCountEvenOddOdd\
    \ = wordCount\n    local wordCountEvenEvenOdd = wordCount\n    local wordCountEvenOddEven\
    \ = wordCount\n    local wordCountEvenOddOddOdd = wordCount\n    local wordCountEvenEvenEvenOdd\
    \ = wordCount\n    local wordCountEvenOddEvenEven = wordCount\n    local wordCountEvenOddOddEven\
    \ = wordCount\n    local wordCountEvenEvenEvenOddOdd = wordCount\n    local wordCountEvenOddEvenOddEven\
    \ = wordCount\n    local wordCountEvenEvenEvenOddEvenOdd = wordCount\n    local\
    \ wordCountEvenOddOddEvenEven = wordCount\n    local wordCountEvenEvenOddOddEven\
    \ = wordCount\n    local wordCountEvenEvenEvenOddEvenOdd = wordCount\n    local\
    \ wordCountEvenOddEvenEvenEvenOdd = wordCount\n    local wordCountEvenOddOddEvenEvenEven\
    \ = wordCount\n    local wordCountEvenEvenOddOddEvenEvenOdd = wordCount\n    local\
    \ wordCountEvenEvenEvenOddEvenEvenOdd = wordCount\n    local wordCountEvenOddEvenEvenEvenEvenOdd\
    \ = wordCount\n    local wordCountEvenOddOddEvenEvenEvenEvenOdd = wordCount\n\
    \    local wordCountEvenEvenOddOddEvenEvenEvenOdd = wordCount\n    local wordCountEvenOddEvenEvenEvenEvenEvenOdd\
    \ = wordCount\n    local wordCountEvenOddOddEvenEvenEvenEvenEvenOdd = wordCount\n\
    \    local wordCountEvenEvenOddOddEvenEvenEvenEvenOdd = wordCount\n    local wordCountEvenEvenEvenOddOddEvenEvenEvenOd\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnppi22f1.lua:52: ''end'' expected (to close ''function'' at
    line 7) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \"\")\n    local count = 1\n    for word in words:gmatch(\"\
    %w+\") do\n        if word:sub(1, 1) ~= \" \" then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o_9weft.lua:21:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 1\nstack traceback:\n\t/tmp/tmp3o_9weft.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = \"\"\n    local count = 0\n    for w in txt:gmatch(\"%w+\") do\n   \
    \     count = count + 1\n        if w ~= \"\" then\n            words = words\
    \ + w .. \" \"\n        end\n    end\n    if count % 2 == 1 then\n        words\
    \ = words + \",\" \n    end\n    return words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpue7ew7fm.lua:13:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmpue7ew7fm.lua:13: in function 'candidate'\n\t/tmp/tmpue7ew7fm.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = \"\"\n    local count = 0\n    for c in txt:gmatch(\"[%a%A]+\") do\n\
    \        if c ~= \" \" then\n            count = count + 1\n            words\
    \ = words + c\n        else\n            count = count + 1\n            words\
    \ = words + \",\"\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyd4onfbx.lua:13:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmpyd4onfbx.lua:13: in function 'candidate'\n\t/tmp/tmpyd4onfbx.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \"\")\n    local words = words:gsub(\"%w+,\", \"\"\
    )\n    local words = words:gsub(\"%w+,\", \"\")\n    local words = words:gsub(\"\
    %w+,\", \"\")\n    local words = words:gsub(\"%w+,\", \"\")\n    local words =\
    \ words:gsub(\"%w+,\", \"\")\n    local words = words:gsub(\"%w+,\", \"\")\n \
    \   local words = words:gsub(\"%w+,\", \"\")\n    local words = words:gsub(\"\
    %w+,\", \"\")\n    local words = words:gsub(\"%w+,\", \"\")\n    local words =\
    \ words:gsub(\"%w+,\", \"\")\n    local words = words:gsub(\"%w+,\", \"\")\n \
    \   local words = words:gsub(\"%w+,\", \"\")\n    local words = words:gsub(\"\
    %w+,\", \"\")\n    local words = words:gsub(\"%w+,\", \"\")\n    local words =\
    \ words:gsub(\"%w+,\", \"\")\n    local words = words:gsub(\"%w+,\", \"\")\n \
    \   local words = words:gsub(\"%w+,\", \"\")\n    local words = words:gsub(\"\
    %w+,\", \"\")\n    local words = words:gsub(\"%w+,\", \"\")\n    local words =\
    \ words:gsub(\"%w+,\", \"\")\n    local words = words:gsub(\"%w+,\", \"\")\n \
    \   local words = words:gsub(\"%w+,\", \"\")\n    local words = words:gsub(\"\
    %w+,\", \"\")\n    local words = words:gsub(\"%w+,\", \"\")\n    local words =\
    \ words:gsub(\"%w+,\", \"\")\n    local words = words:gsub(\"%w+,\", \"\")\n \
    \   local words = words:gsub(\"%w+,\", \"\")\n    local words = words:gsub(\"\
    %w+,\", \"\")\n    local words = words:gsub(\"%w+,\", \"\")\n    local words =\
    \ words:gsub(\"%w+,\", \"\")\n    local words = words:gsub(\"%w+,\", \"\")\n \
    \   local words = words:gsub(\"%w+,\", \"\")\n    local words = words:gsub(\"\
    %w+,\", \"\")\n    local words = words:gsub(\"%w+,\", \"\")\n    local words =\
    \ words:gsub(\"%w+,\", \"\")\n    local words = words:gsub(\"%w+,\", \"\")\n \
    \   local words = words:gsub(\"%w+,\", \"\")\n    local words = words:gsub(\"\
    %w+,\", \"\")\n    local words = words:gsub(\"%w+,\", \"\")\n    local words =\
    \ words:gsub(\"%w+,\", \"\")\n    local words = words:gsub(\"%w+,\", \"\")\n \
    \   local words = words:gsub(\"%\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_jrztnrf.lua:50: unfinished string near ''"%''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[,.]+\", \" \"):gsub(\"[%c]+\", \" \"):gsub(\"[%w]+\", \"\
    \ \"):gsub(\"[%W]+\", \" \"):gsub(\"[%S]+\", \" \"):gsub(\"[%S%w]+\", \" \"):gsub(\"\
    [%S%W]+\", \" \")\n    local wordCount = #words\n    local wordCountOdd = 0\n\
    \    local wordCountEven = 0\n    for i = 1, wordCount do\n        if words[i]:lower()\
    \ ~= words[i]:lower() then\n            wordCountEven = wordCountEven+1\n    \
    \    else\n            wordCountOdd = wordCountOdd+1\n        end\n    end\n \
    \   return wordCountOdd, wordCountEven\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpumnlnqsi.lua:13:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpumnlnqsi.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmpumnlnqsi.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \"\")\n    local wordlist = words:gsub(\",\", \" \"\
    )\n    local wordlist = wordlist:gsub(\"%l\", \" \")\n    local wordlist = wordlist:gsub(\"\
    %u\", \" \")\n    local wordlist = wordlist:gsub(\"%S\", \" \")\n    local wordlist\
    \ = wordlist:gsub(\"%p\", \" \")\n    local wordlist = wordlist:gsub(\"%w\", \"\
    \ \")\n    local wordlist = wordlist:gsub(\"%W\", \" \")\n    local wordlist =\
    \ wordlist:gsub(\"%S\", \" \")\n    local wordlist = wordlist:gsub(\"%p\", \"\
    \ \")\n    local wordlist = wordlist:gsub(\"%w\", \" \")\n    local wordlist =\
    \ wordlist:gsub(\"%W\", \" \")\n    local wordlist = wordlist:gsub(\"%S\", \"\
    \ \")\n    local wordlist = wordlist:gsub(\"%p\", \" \")\n    local wordlist =\
    \ wordlist:gsub(\"%w\", \" \")\n    local wordlist = wordlist:gsub(\"%W\", \"\
    \ \")\n    local wordlist = wordlist:gsub(\"%S\", \" \")\n    local wordlist =\
    \ wordlist:gsub(\"%p\", \" \")\n    local wordlist = wordlist:gsub(\"%w\", \"\
    \ \")\n    local wordlist = wordlist:gsub(\"%W\", \" \")\n    local wordlist =\
    \ wordlist:gsub(\"%S\", \" \")\n    local wordlist = wordlist:gsub(\"%p\", \"\
    \ \")\n    local wordlist = wordlist:gsub(\"%w\", \" \")\n    local wordlist =\
    \ wordlist:gsub(\"%W\", \" \")\n    local wordlist = wordlist:gsub(\"%S\", \"\
    \ \")\n    local wordlist = wordlist:gsub(\"%p\", \" \")\n    local wordlist =\
    \ wordlist:gsub(\"%w\", \" \")\n    local wordlist = wordlist:gsub(\"%W\", \"\
    \ \")\n    local wordlist = wordlist:gsub(\"%S\", \" \")\n    local wordlist =\
    \ wordlist:gsub(\"%p\", \" \")\n    local wordlist = wordlist:gsub(\"%w\", \"\
    \ \")\n    local wordlist = wordlist:gsub(\"%W\", \" \")\n    local wordlist =\
    \ wordlist:gsub(\"%S\", \" \")\n    local wordlist = wordlist:gsub(\"%p\", \"\
    \ \")\n    local wordlist = wordlist:gsub(\"%w\", \" \")\n    local wordlist =\
    \ wordlist:gsub(\"%W\", \" \")\n    local wordlist = wordlist:gsub(\"%S\", \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjuak6l08.lua:45: '')'' expected (to close ''('' at line 44)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = \"\"\n    local count = 1\n    for w in txt:gmatch(\"[^ ]+\") do\n \
    \       count = count + 1\n        words = words + w \n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8_0qopg1.lua:12:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmp8_0qopg1.lua:12: in function 'candidate'\n\t/tmp/tmp8_0qopg1.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = txt:gsub(\"%w+\", \"\")\n\tlocal num_words = #words\n\tlocal num_letters\
    \ = #words\n\tlocal num_letters_with_odd_order = num_letters - 1\n\tlocal num_letters_with_odd_order_with_commas\
    \ = num_letters - 1\n\tlocal num_letters_with_odd_order_with_commas_with_whitespace\
    \ = num_letters - 1\n\tlocal num_letters_with_odd_order_with_commas_with_whitespace_and_punctuation\
    \ = num_letters - 1\n\tlocal num_letters_with_odd_order_with_commas_with_whitespace_and_punctuation_and_numbers\
    \ = num_letters - 1\n\tlocal num_letters_with_odd_order_with_commas_with_whitespace_and_punctuation_and_numbers_and_letters\
    \ = num_letters - 1\n\tlocal num_letters_with_odd_order_with_commas_with_whitespace_and_punctuation_and_numbers_and_letters_and_numbers\
    \ = num_letters - 1\n\tlocal num_letters_with_odd_order_with_commas_with_whitespace_and_punctuation_and_numbers_and_letters_and_numbers_and_letters\
    \ = num_letters - 1\n\tlocal num_letters_with_odd_order_with_commas_with_whitespace_and_punctuation_and_numbers_and_letters_and_numbers_and_letters_and_numbers\
    \ = num_letters - 1\n\tlocal num_letters_with_odd_order_with_commas_with_whitespace_and_punctuation_and_numbers_and_letters_and_numbers_and_letters_and_numbers_and_letters\
    \ = num_letters - 1\n\tlocal num_letters_with_odd_order_with_commas_with_whitespace_and_punctuation_and_numbers_and_letters_and_numbers_and_letters_and_numbers_and_letters\
    \ = num_letters - 1\n\tlocal num_letters_with_odd_order_with_commas_with_whitespace_and_punctuation_and_numbers_and_letters_and_numbers_and_letters_and_numbers_and_letters_and_numbers\
    \ = num_letters - 1\n\tlocal num_letters_with_odd_order_with_commas_with_whitespace_and_punctuation_and_numbers_and_letters_and_numbers_and_letters_and_numbers_and_letters_and_numbers_and_letters\
    \ = num_letters - 1\n\tlocal num_letters_with_odd_order_with_commas_with_whitespace_and_punctuation_and_numbers_and_letters_and_numbers_and_letters_and_numbers_and_letters_and_numbers_and_letters_and_numbers\
    \ = num_letters - 1\n\tlocal num_letters_with_odd_order_with_commas_with_whitespace_and_punctuation_and_numbers_and_letters_and_numbers_and_letters_and_numbers_and_letters_and_numbers_and_letters_and_numbers_and_letters\
    \ = num_letters - 1\n\tlocal num_letters_with_odd_order_with_commas_with_whitespace_and_punctuation_and_numbers_and_letters_and_numbers_and_letters_and_numbers_and_letters_and_numbers_and_letters_and_numbers_and_letters_and_number\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk__2qf21.lua:41: ''end'' expected (to close ''function'' at
    line 7) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = txt:gsub(\"[%z]+\",\"\"):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\",\",\"\
    ):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\"\
    ,\",\"):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\",\",\"):gsub(\"\
    [%w]+\",\",\"):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\",\",\"\
    ):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\"\
    ,\",\"):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\",\",\"):gsub(\"\
    [%w]+\",\",\"):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\",\",\"\
    ):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\"\
    ,\",\"):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\",\",\"):gsub(\"\
    [%w]+\",\",\"):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\",\",\"\
    ):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\"\
    ,\",\"):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\",\",\"):gsub(\"\
    [%w]+\",\",\"):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\",\",\"\
    ):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\",\",\"):gsub(\"[%w]+\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfz9hbtgv.lua:8: unfinished string near ''"[%w]+''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = string.gsub(txt, \"[%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph2tilsn8.lua:8: unfinished string near ''"[%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = string.gsub(txt, \"[^a-zA-Z]+\", \"\")\n    return #words > 0 and #words\
    \ == #string.gsub(words, \"[^a-z]+\", \"\") or 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvjgj0tas.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 0\nstack traceback:\n\t/tmp/tmpvjgj0tas.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%z]+\", \" \"):gsub(\"[%w]+\", \" \")\n    local words =\
    \ words:gsub(\"[%a]+\", \"\")\n    local words = words:gsub(\"[%A]+\", \"\")\n\
    \    local words = words:gsub(\"[%b]+\", \"\")\n    local words = words:gsub(\"\
    [%B]+\", \"\")\n    local words = words:gsub(\"[%c]+\", \"\")\n    local words\
    \ = words:gsub(\"[%C]+\", \"\")\n    local words = words:gsub(\"[%d]+\", \"\"\
    )\n    local words = words:gsub(\"[%D]+\", \"\")\n    local words = words:gsub(\"\
    [%e]+\", \"\")\n    local words = words:gsub(\"[%F]+\", \"\")\n    local words\
    \ = words:gsub(\"[%g]+\", \"\")\n    local words = words:gsub(\"[%G]+\", \"\"\
    )\n    local words = words:gsub(\"[%h]+\", \"\")\n    local words = words:gsub(\"\
    [%H]+\", \"\")\n    local words = words:gsub(\"[%i]+\", \"\")\n    local words\
    \ = words:gsub(\"[%I]+\", \"\")\n    local words = words:gsub(\"[%j]+\", \"\"\
    )\n    local words = words:gsub(\"[%J]+\", \"\")\n    local words = words:gsub(\"\
    [%k]+\", \"\")\n    local words = words:gsub(\"[%K]+\", \"\")\n    local words\
    \ = words:gsub(\"[%l]+\", \"\")\n    local words = words:gsub(\"[%L]+\", \"\"\
    )\n    local words = words:gsub(\"[%m]+\", \"\")\n    local words = words:gsub(\"\
    [%M]+\", \"\")\n    local words = words:gsub(\"[%n]+\", \"\")\n    local words\
    \ = words:gsub(\"[%N]+\", \"\")\n    local words = words:gsub(\"[%p]+\", \"\"\
    )\n    local words = words:gsub(\"[%P]+\", \"\")\n    local words = words:gsub(\"\
    [%r]+\", \"\")\n    local words = words:gsub(\"[%R]+\", \"\")\n    local words\
    \ = words:gsub(\"[%s]+\", \"\")\n    local words = words:gsub(\"[%S]+\", \"\"\
    )\n    local words = words:gsub(\"[%t]+\", \"\")\n    local words = words:gsub(\"\
    [%T]+\", \"\")\n    local words = words:gsub(\"[%u]+\", \"\")\n    local words\
    \ = words:gsub(\"[%U]+\", \"\")\n    local words = words:gsub(\"[%v]+\", \"\"\
    )\n    local words = words:gsub(\"[%V]+\", \"\")\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg0yxt53v.lua:61: ''end'' expected (to close ''function'' at
    line 7) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = string.gsub(txt, \"[^a-zA-Z ]\", \"\")\n    local words = string.gsub(words,\
    \ \" \", \"\")\n    local words = string.gsub(words, \",\", \" \")\n    local\
    \ words = string.gsub(words, \"[aeiou]\", \"\")\n    local words = string.gsub(words,\
    \ \"^\", \"\")\n    local words = string.gsub(words, \"$\", \"\")\n    local words\
    \ = string.gsub(words, \"%\", \"\")\n    local words = string.gsub(words, \"&\"\
    , \"\")\n    local words = string.gsub(words, \"*\", \"\")\n    local words =\
    \ string.gsub(words, \"(\", \"\")\n    local words = string.gsub(words, \")\"\
    , \"\")\n    local words = string.gsub(words, \"[\", \"\")\n    local words =\
    \ string.gsub(words, \"]\", \"\")\n    local words = string.gsub(words, \"{\"\
    , \"\")\n    local words = string.gsub(words, \"}\", \"\")\n    local words =\
    \ string.gsub(words, \"[\", \"\")\n    local words = string.gsub(words, \"]\"\
    , \"\")\n    local words = string.gsub(words, \"{\", \"\")\n    local words =\
    \ string.gsub(words, \"}\", \"\")\n    local words = string.gsub(words, \"<\"\
    , \"\")\n    local words = string.gsub(words, \">\", \"\")\n    local words =\
    \ string.gsub(words, \"/\", \"\")\n    local words = string.gsub(words, \"\\\\\
    \", \"\")\n    local words = string.gsub(words, \"|\", \"\")\n    local words\
    \ = string.gsub(words, \"-\", \"\")\n    local words = string.gsub(words, \"_\"\
    , \"\")\n    local words = string.gsub(words, \"=\", \"\")\n    local words =\
    \ string.gsub(words, \"'\", \"\")\n    local words = string.gsub(words, \"!\"\
    , \"\")\n    local words = string.gsub(words, \"?\", \"\")\n    local words =\
    \ string.gsub(words, \"*\", \"\")\n    local words = string.gsub(words, \"(\"\
    , \"\")\n    local words = string.gsub(words, \")\", \"\")\n    local words =\
    \ string.gsub(words, \"[\", \"\")\n    local words = string.gsub(words, \"]\"\
    , \"\")\n    local words = string.gsub(words, \"{\", \"\")\n    local words =\
    \ string.gsub(words, \"}\", \"\")\n    local words = string.gsub(words, \"[\"\
    , \"\")\n    local words = string.gsub(words, \"]\", \"\")\n    local words =\
    \ string.gsub(words, \"{\", \"\")\n    local words = string.gsub(words, \"}\"\
    , \"\")\n    local words = string.gsub(words, \"<\", \"\")\n    local words =\
    \ string.gsub(words, \">\", \"\")\n    local words = string.gsub(words, \"/\"\
    , \"\")\n    local words = string.gsub(words, \"\\\\\", \"\")\n    local words\
    \ = string.gsub(words, \"|\", \"\")\n    local words = string.gsub(\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwa_a9a6i.lua:55: '')'' expected (to close ''('' at line 54)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = string.gsub(txt, \"[%c]+\", \" \")\n  local words = string.gsub(words,\
    \ \"[%c]+\", \",\")\n  local words = string.gsub(words, \"[%c]+\", \" \")\n  local\
    \ words = string.gsub(words, \"[%c]+\", \",\")\n  local words = string.gsub(words,\
    \ \"[%c]+\", \" \")\n  local words = string.gsub(words, \"[%c]+\", \",\")\n  local\
    \ words = string.gsub(words, \"[%c]+\", \" \")\n  local words = string.gsub(words,\
    \ \"[%c]+\", \",\")\n  local words = string.gsub(words, \"[%c]+\", \" \")\n  local\
    \ words = string.gsub(words, \"[%c]+\", \",\")\n  local words = string.gsub(words,\
    \ \"[%c]+\", \" \")\n  local words = string.gsub(words, \"[%c]+\", \",\")\n  local\
    \ words = string.gsub(words, \"[%c]+\", \" \")\n  local words = string.gsub(words,\
    \ \"[%c]+\", \",\")\n  local words = string.gsub(words, \"[%c]+\", \" \")\n  local\
    \ words = string.gsub(words, \"[%c]+\", \",\")\n  local words = string.gsub(words,\
    \ \"[%c]+\", \" \")\n  local words = string.gsub(words, \"[%c]+\", \",\")\n  local\
    \ words = string.gsub(words, \"[%c]+\", \" \")\n  local words = string.gsub(words,\
    \ \"[%c]+\", \",\")\n  local words = string.gsub(words, \"[%c]+\", \" \")\n  local\
    \ words = string.gsub(words, \"[%c]+\", \",\")\n  local words = string.gsub(words,\
    \ \"[%c]+\", \" \")\n  local words = string.gsub(words, \"[%c]+\", \",\")\n  local\
    \ words = string.gsub(words, \"[%c]+\", \" \")\n  local words = string.gsub(words,\
    \ \"[%c]+\", \",\")\n  local words = string.gsub(words, \"[%c]+\", \" \")\n  local\
    \ words = string.gsub(words, \"[%c]+\", \",\")\n  local words = string.gsub(words,\
    \ \"[%c]+\", \" \")\n  local words = string.gsub(words, \"[%c]+\", \",\")\n  local\
    \ words = string.gsub(words, \"[%c]+\", \" \")\n  local words = string.gsub(words,\
    \ \"[%c]+\", \",\")\n  local words = string.gsub(words, \"[%c]+\", \" \")\n  \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf8_h2fv9.lua:56: ''end'' expected (to close ''function'' at
    line 7) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"%w+\", \" \"):gsub(\"%S+\", \" \"):gsub(\"%w+\", \" \"):gsub(\"\
    %S+\", \" \")\n  local words = words:gsub(\"%S+\", \" \"):gsub(\"%w+\", \" \"\
    ):gsub(\"%S+\", \" \")\n  local words = words:gsub(\"%S+\", \" \"):gsub(\"%w+\"\
    , \" \"):gsub(\"%S+\", \" \")\n  local words = words:gsub(\"%S+\", \" \"):gsub(\"\
    %w+\", \" \"):gsub(\"%S+\", \" \")\n  local words = words:gsub(\"%S+\", \" \"\
    ):gsub(\"%w+\", \" \"):gsub(\"%S+\", \" \")\n  local words = words:gsub(\"%S+\"\
    , \" \"):gsub(\"%w+\", \" \"):gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \"):gsub(\"%w+\", \" \"):gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \"):gsub(\"%w+\", \" \"):gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \"):gsub(\"%w+\", \" \"):gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \"):gsub(\"%w+\", \" \"):gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \"):gsub(\"%w+\", \" \"):gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \"):gsub(\"%w+\", \" \"):gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \"):gsub(\"%w+\", \" \"):gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \"):gsub(\"%w+\", \" \"):gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \"):gsub(\"%w+\", \" \"):gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \"):gsub(\"%w+\", \" \"):gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \"):gsub(\"%w+\", \" \"):gsub\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_7co_jos.lua:25: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = \"\"\n  local count = 0\n  for letter in string.gsub(txt, \"[^a-zA-Z]\"\
    , '') do\n    count = count + 1\n    if count % 2 == 1 then\n      words = words\
    \ .. letter\n    else\n      words = words .. \",\" .. letter\n    end\n  end\n\
    \  return string.gsub(words, \"(^,|,$)\", \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb8elldll.lua:10:\
    \ attempt to call a string value\nstack traceback:\n\t/tmp/tmpb8elldll.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpb8elldll.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = \"\"\n    local count = 0\n    for w in txt:gmatch(\"%w+\") do\n   \
    \     count = count + 1\n        if w ~= \"\" then\n            words = words\
    \ .. w .. \",\"\n        end\n    end\n    if count % 2 == 1 then\n        words\
    \ = words .. \"-\"\n    end\n    return words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmkrobfg.lua:25:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello,world,\"\nstack traceback:\n\
    \t/tmp/tmpvmkrobfg.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"[%w]+\",\
    \ \",\")\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"\
    [%w]+\", \",\")\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words\
    \ = words:gsub(\"[%w]+\", \",\")\n    local words = words:gsub(\"[%w]+\", \" \"\
    )\n    local words = words:gsub(\"[%w]+\", \",\")\n    local words = words:gsub(\"\
    [%w]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \",\")\n    local words\
    \ = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \",\"\
    )\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"\
    [%w]+\", \",\")\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words\
    \ = words:gsub(\"[%w]+\", \",\")\n    local words = words:gsub(\"[%w]+\", \" \"\
    )\n    local words = words:gsub(\"[%w]+\", \",\")\n    local words = words:gsub(\"\
    [%w]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \",\")\n    local words\
    \ = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \",\"\
    )\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"\
    [%w]+\", \",\")\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words\
    \ = words:gsub(\"[%w]+\", \",\")\n    local words = words:gsub(\"[%w]+\", \" \"\
    )\n    local words = words:gsub(\"[%w]+\", \",\")\n    local words = words:gsub(\"\
    [%w]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \",\")\n    local words\
    \ = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"[%w]+\", \",\"\
    )\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words = words:gsub(\"\
    [%w]+\", \",\")\n    local words = words:gsub(\"[%w]+\", \" \")\n    local words\
    \ = words:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdl8g1mgb.lua:44: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"%w+\", \"\"):gsub(\"%w+,\", \"%w+\")\n  local letters = txt:gsub(\"\
    %w+\", \"\"):gsub(\"%w+,\", \"%w\")\n  local letters_count = letters:gsub(\"%w+\"\
    , \"\"):gsub(\"%w+,\", \"%w\"):gsub(\"%w+,\", \"%w\")\n  return words:gsub(\"\
    %w+\", \"\"):gsub(\"%w+,\", \"%w\"):gsub(\"%w+,\", \"%w\"):gsub(\"%w+,\", \"%w\"\
    ):gsub(\"%w+,\", \"%w\"):gsub(\"%w+,\", \"%w\"):gsub(\"%w+,\", \"%w\"):gsub(\"\
    %w+,\", \"%w\"):gsub(\"%w+,\", \"%w\"):gsub(\"%w+,\", \"%w\"):gsub(\"%w+,\", \"\
    %w\"):gsub(\"%w+,\", \"%w\"):gsub(\"%w+,\", \"%w\"):gsub(\"%w+,\", \"%w\"):gsub(\"\
    %w+,\", \"%w\"):gsub(\"%w+,\", \"%w\"):gsub(\"%w+,\", \"%w\"):gsub(\"%w+,\", \"\
    %w\"):gsub(\"%w+,\", \"%w\"):gsub(\"%w+,\", \"%w\"):gsub(\"%w+,\", \"%w\"):gsub(\"\
    %w+,\", \"%w\"):gsub(\"%w+,\", \"%w\"):gsub(\"%w+,\", \"%w\"):gsub(\"%w+,\", \"\
    %w\"):gsub(\"%w+,\", \"%w\"):gsub(\"%w+,\", \"%w\"):gsub(\"%w+,\", \"%w\"):gsub(\"\
    %w+,\", \"%w\"):gsub(\"%w+,\", \"%w\"):gsub(\"%w+,\", \"%w\"):gsub(\"%w+,\", \"\
    %w\"):gsub(\"%w+,\", \"%w\"):gsub(\"%w+,\", \"%w\"):gsub(\"%w+,\", \"%w\"):gsub(\"\
    %w+,\", \"%w\"):gsub(\"%w+,\", \"%w\"):gsub(\"%w+,\", \"%w\"):gsub(\"%w+,\", \"\
    %w\"):gsub(\"%w+,\", \"%w\"):gsub(\"%w+,\", \"%w\"):gsub(\"%w+,\", \"%w\"):gsub(\"\
    %w+,\", \"%w\"):g\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe0snnytj.lua:12: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = \"\"\n\tlocal count = 0\n\tfor letter in txt:gmatch(\"[%a%A]+\") do\n\
    \t\tif letter:sub(1, 1) == \"a\" then\n\t\t\tcount = count + 1\n\t\telse\n\t\t\
    \tcount = count - 1\n\t\tend\n\t\tif count % 2 == 1 then\n\t\t\twords = words\
    \ + letter\n\t\tend\n\tend\n\treturn words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgkweh6hp.lua:17:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmpgkweh6hp.lua:17: in function 'candidate'\n\t/tmp/tmpgkweh6hp.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \"\"):gsub(\"%w+,\", \"\"):gsub(\"%w+.\", \"\"):gsub(\"\
    %w+,.\", \"\")\n    local count = 1\n    for word in words:gmatch(\"%w+\") do\n\
    \        if word:sub(1, 1) ~= \" \" then\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph6v_jnor.lua:21:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 1\nstack traceback:\n\t/tmp/tmph6v_jnor.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = \"\"\n    local count = 0\n    for w in txt:gmatch(\"[%w]+\") do\n \
    \       if w ~= \"\" then\n            count = count + 1\n            words =\
    \ words + w .. \" \"\n        end\n    end\n    if count % 2 == 1 then\n     \
    \   words = words + \",\" \n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwrlqbu7p.lua:13:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmpwrlqbu7p.lua:13: in function 'candidate'\n\t/tmp/tmpwrlqbu7p.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:gsub(\"[%S]+\", \"%S\"):gsub(\"[%S]+$\", \"\")\n  local whitespaces\
    \ = txt:gsub(\"[%S]+\", \"%S\"):gsub(\"[%S]+$\", \"\")\n  if whitespaces ~= \"\
    \" then\n    return whitespaces:gsub(\",\", \"\"):gsub(\"%S+\", \"%S\"):gsub(\"\
    %S+$\", \"\")\n  else\n    return words:gsub(\",\", \"\"):gsub(\"%S+\", \"%S\"\
    ):gsub(\"%S+$\", \"\")\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3voebhwm.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"S \"\nstack traceback:\n\t/tmp/tmp3voebhwm.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \" \"):gsub(\"%S+\", \" \"):gsub(\"%w+\", \" \"):gsub(\"\
    %S+\", \" \")\n    local words = words:gsub(\"%S+\", \",\")\n    local words =\
    \ words:gsub(\"%w+\", \",\")\n    local words = words:gsub(\"%S+\", \",\")\n \
    \   local words = words:gsub(\"%w+\", \",\")\n    local words = words:gsub(\"\
    %S+\", \",\")\n    local words = words:gsub(\"%w+\", \",\")\n    local words =\
    \ words:gsub(\"%S+\", \",\")\n    local words = words:gsub(\"%w+\", \",\")\n \
    \   local words = words:gsub(\"%S+\", \",\")\n    local words = words:gsub(\"\
    %w+\", \",\")\n    local words = words:gsub(\"%S+\", \",\")\n    local words =\
    \ words:gsub(\"%w+\", \",\")\n    local words = words:gsub(\"%S+\", \",\")\n \
    \   local words = words:gsub(\"%w+\", \",\")\n    local words = words:gsub(\"\
    %S+\", \",\")\n    local words = words:gsub(\"%w+\", \",\")\n    local words =\
    \ words:gsub(\"%S+\", \",\")\n    local words = words:gsub(\"%w+\", \",\")\n \
    \   local words = words:gsub(\"%S+\", \",\")\n    local words = words:gsub(\"\
    %w+\", \",\")\n    local words = words:gsub(\"%S+\", \",\")\n    local words =\
    \ words:gsub(\"%w+\", \",\")\n    local words = words:gsub(\"%S+\", \",\")\n \
    \   local words = words:gsub(\"%w+\", \",\")\n    local words = words:gsub(\"\
    %S+\", \",\")\n    local words = words:gsub(\"%w+\", \",\")\n    local words =\
    \ words:gsub(\"%S+\", \",\")\n    local words = words:gsub(\"%w+\", \",\")\n \
    \   local words = words:gsub(\"%S+\", \",\")\n    local words = words:gsub(\"\
    %w+\", \",\")\n    local words = words:gsub(\"%S+\", \",\")\n    local words =\
    \ words:gsub(\"%w+\", \",\")\n    local words = words:gsub(\"%S+\", \",\")\n \
    \   local words = words:gsub(\"%w+\", \",\")\n    local words = words:gsub(\"\
    %S+\", \",\")\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn9rb452i.lua:59: ''end'' expected (to close ''function'' at
    line 7) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpxm13st8k.lua:8: escape sequence too large near '\"[%z\x01\
    -\x7F-'\n"
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%a]+\", \" \"):gsub(\"[%A]+\", \" \"):gsub(\"[%w]+\", \"\
    \ \"):gsub(\"[%W]+\", \" \"):gsub(\"[%c]+\", \" \"):gsub(\"[%C]+\", \" \"):gsub(\"\
    [%x]+\", \" \"):gsub(\"[%X]+\", \" \"):gsub(\"[%z]+\", \" \"):gsub(\"[%Z]+\",\
    \ \" \")\n    local words = words:gsub(\"[%,]+\", \",\")\n    local words = words:gsub(\"\
    [%,]+\", \",\")\n    local words = words:gsub(\"[%,]+\", \",\")\n    local words\
    \ = words:gsub(\"[%,]+\", \",\")\n    local words = words:gsub(\"[%,]+\", \",\"\
    )\n    local words = words:gsub(\"[%,]+\", \",\")\n    local words = words:gsub(\"\
    [%,]+\", \",\")\n    local words = words:gsub(\"[%,]+\", \",\")\n    local words\
    \ = words:gsub(\"[%,]+\", \",\")\n    local words = words:gsub(\"[%,]+\", \",\"\
    )\n    local words = words:gsub(\"[%,]+\", \",\")\n    local words = words:gsub(\"\
    [%,]+\", \",\")\n    local words = words:gsub(\"[%,]+\", \",\")\n    local words\
    \ = words:gsub(\"[%,]+\", \",\")\n    local words = words:gsub(\"[%,]+\", \",\"\
    )\n    local words = words:gsub(\"[%,]+\", \",\")\n    local words = words:gsub(\"\
    [%,]+\", \",\")\n    local words = words:gsub(\"[%,]+\", \",\")\n    local words\
    \ = words:gsub(\"[%,]+\", \",\")\n    local words = words:gsub(\"[%,]+\", \",\"\
    )\n    local words = words:gsub(\"[%,]+\", \",\")\n    local words = words:gsub(\"\
    [%,]+\", \",\")\n    local words = words:gsub(\"[%,]+\", \",\")\n    local words\
    \ = words:gsub(\"[%,]+\", \",\")\n    local words = words:gsub(\"[%,]+\", \",\"\
    )\n    local words = words:gsub(\"[%,]+\", \",\")\n    local words = words:gsub(\"\
    [%,]+\", \",\")\n    local \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqcxl7wbz.lua:51: ''end'' expected (to close ''function'' at
    line 7) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%z]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \"\
    ,\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpim8iy5jc.lua:8: unfinished string near ''"[%w]+''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \"\")\n    local comma = txt:gsub(\"%w+,\", \"\")\n\
    \    local lower = txt:gsub(\"%w+[a-z]\", \"\")\n    local count = txt:gsub(\"\
    %w+[a-z]\", \"\")\n    return words or comma or lower or count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ao3gx3r.lua:18:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \" !\"\nstack traceback:\n\t/tmp/tmp9ao3gx3r.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = \"\"\n    local count = 0\n    for c in txt:gmatch(\"[%a%A]+\") do\n\
    \        if c == \" \" then\n            count = count + 1\n        else\n   \
    \         count = count - 1\n        end\n        words = words + c\n    end\n\
    \    return count, words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmrkne_5i.lua:16:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmpmrkne_5i.lua:16: in function 'candidate'\n\t/tmp/tmpmrkne_5i.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = string.gsub(txt, \"[^a-zA-Z ]\", \"\")\n\tlocal words = string.gsub(words,\
    \ \"[,]+\", \" \")\n\tlocal words = string.gsub(words, \"[,]+$\", \"\")\n\tlocal\
    \ words = string.gsub(words, \"^[,]+\", \"\")\n\tlocal words = string.gsub(words,\
    \ \"[,]+$\", \"\")\n\tlocal words = string.gsub(words, \"^[,]+\", \"\")\n\tlocal\
    \ words = string.gsub(words, \"[,]+$\", \"\")\n\tlocal words = string.gsub(words,\
    \ \"^[,]+\", \"\")\n\tlocal words = string.gsub(words, \"[,]+$\", \"\")\n\tlocal\
    \ words = string.gsub(words, \"^[,]+\", \"\")\n\tlocal words = string.gsub(words,\
    \ \"[,]+$\", \"\")\n\tlocal words = string.gsub(words, \"^[,]+\", \"\")\n\tlocal\
    \ words = string.gsub(words, \"[,]+$\", \"\")\n\tlocal words = string.gsub(words,\
    \ \"^[,]+\", \"\")\n\tlocal words = string.gsub(words, \"[,]+$\", \"\")\n\tlocal\
    \ words = string.gsub(words, \"^[,]+\", \"\")\n\tlocal words = string.gsub(words,\
    \ \"[,]+$\", \"\")\n\tlocal words = string.gsub(words, \"^[,]+\", \"\")\n\tlocal\
    \ words = string.gsub(words, \"[,]+$\", \"\")\n\tlocal words = string.gsub(words,\
    \ \"^[,]+\", \"\")\n\tlocal words = string.gsub(words, \"[,]+$\", \"\")\n\tlocal\
    \ words = string.gsub(words, \"^[,]+\", \"\")\n\tlocal words = string.gsub(words,\
    \ \"[,]+$\", \"\")\n\tlocal words = string.gsub(words, \"^[,]+\", \"\")\n\tlocal\
    \ words = string.gsub(words, \"[,]+$\", \"\")\n\tlocal words = string.gsub(words,\
    \ \"^[,]+\", \"\")\n\tlocal words = string.gsub(words, \"[,]+$\", \"\")\n\tlocal\
    \ words = string.gsub(words, \"^[,]+\", \"\")\n\tlocal words = string.gsub(words,\
    \ \"[,]+$\", \"\")\n\tlocal words = string.gsub(words, \"^[,]+\", \"\")\n\tlocal\
    \ words = string.gsub(words, \"[,]+$\", \"\")\n\tlocal words = string.gsub(words,\
    \ \"^[,]+\", \"\")\n\tlocal words = string.gsub(words, \"[,]+$\", \"\")\n\tlocal\
    \ words = string.gsub(words, \"^[,]+\", \"\")\n\tlocal words = string.gsub(words,\
    \ \"[,]+$\", \"\")\n\tlocal words = string.gsub(words, \"^[,]+\", \"\")\n\tlocal\
    \ words = string.gsub(words, \"\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2yqmhm4a.lua:44: unfinished string near ''"''

    '
  stdout: ''
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"%w+\", \" \"):gsub(\"%w+\", \",\")\n    local letters = {}\n\
    \    for i = 1, #words do\n        local letter = words[i]:lower()\n        if\
    \ letters[letter] == nil then\n            letters[letter] = true\n        else\n\
    \            letters[letter] = letters[letter] + 1\n        end\n    end\n   \
    \ return #letters, letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7sv5m5v2.lua:11:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp7sv5m5v2.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp7sv5m5v2.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = \"\"\n    local count = 0\n    for w in txt:gmatch(\"%w+\") do\n   \
    \     count = count + 1\n        if w ~= w then\n            words = words + \"\
    ,\"\n        end\n        words = words + w\n    end\n    if count % 2 == 1 then\n\
    \        words = words + \",\"\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph662jo10.lua:15:\
    \ attempt to perform arithmetic on local 'words' (a string value)\nstack traceback:\n\
    \t/tmp/tmph662jo10.lua:15: in function 'candidate'\n\t/tmp/tmph662jo10.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750552
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:gsub(\"[%z]+\", \" \"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \"\
    ,\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpim8iy5jc.lua:8: unfinished string near ''"[%w]+''

    '
  stdout: ''
  timestamp: 1659750552
