language: lua
name: HumanEval_47_median
results:
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2.0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpimic8n6y.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpimic8n6y.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local mid = math.floor(n\
    \ / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1jwhzqh.lua:18:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpx1jwhzqh.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local half = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[half]\n  else\n    return (l[half-1] + l[half])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8xr5qs0b.lua:16:\
    \ expected: 3, actual: 2.0\nstack traceback:\n\t/tmp/tmp8xr5qs0b.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n /\
    \ 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpicjfy6ma.lua:16:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpicjfy6ma.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor((n +\
    \ 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid]\
    \ + l[mid+1]) / 2.0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwr6q1mqw.lua:17:\
    \ expected: 8.0, actual: 6\nstack traceback:\n\t/tmp/tmpwr6q1mqw.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor((n +\
    \ 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid]\
    \ + l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1cben3u.lua:17:\
    \ expected: 8.0, actual: 6\nstack traceback:\n\t/tmp/tmp_1cben3u.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n  if #l %\
    \ 2 == 0 then return l[mid] end\n  local lower = l[mid]\n  local upper = l[mid+1]\n\
    \  if lower > upper then return median end\n  local median = (lower + upper) /\
    \ 2\n  while median > l[mid] do\n    median = (median + lower) / 2\n  end\n  return\
    \ median\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfkzm3qi3.lua:19:\
    \ expected: 3, actual: 1.0\nstack traceback:\n\t/tmp/tmpfkzm3qi3.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor((n -\
    \ 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[mid+1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphvfgjhay.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmphvfgjhay.lua:3:\
    \ in function </tmp/tmphvfgjhay.lua:2>\n\t(...tail calls...)\n\t/tmp/tmphvfgjhay.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l\
    \ - 1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8p0kb10k.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp8p0kb10k.lua:3:\
    \ in function </tmp/tmp8p0kb10k.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp8p0kb10k.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2.0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpimic8n6y.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpimic8n6y.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 2 then return nil end\n  local mid = math.floor((n +\
    \ 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[mid-1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1v8m3949.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp1v8m3949.lua:3:\
    \ in function </tmp/tmp1v8m3949.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp1v8m3949.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n <= 1 then return l[1] end\n  local mid = math.floor(n/2)\n\
    \  return median(l[mid], l[#l])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyvcq6p2k.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmpyvcq6p2k.lua:3:\
    \ in function </tmp/tmpyvcq6p2k.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpyvcq6p2k.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7lke3nvu.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp7lke3nvu.lua:3:\
    \ in function </tmp/tmp7lke3nvu.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp7lke3nvu.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor((n +\
    \ 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid]\
    \ + l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1cben3u.lua:17:\
    \ expected: 8.0, actual: 6\nstack traceback:\n\t/tmp/tmp_1cben3u.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n  if #l %\
    \ 2 == 0 then return l[mid] end\n  local lower = l[mid]\n  local upper = l[#l\
    \ - 1]\n  return lower + math.abs(upper - lower) / 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuzbkfkoy.lua:14:\
    \ expected: 3, actual: 2.5\nstack traceback:\n\t/tmp/tmpuzbkfkoy.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid-1],\
    \ l[mid])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iip6836.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp1iip6836.lua:3:\
    \ in function </tmp/tmp1iip6836.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp1iip6836.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n  if #l %\
    \ 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4fg02vod.lua:15:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp4fg02vod.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  if n % 2 == 0 then\n    return\
    \ l[math.floor(n/2)]\n  else\n    return (l[math.floor(n/2)] + l[math.floor(n/2)+1])/2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyklg1z57.lua:15:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpyklg1z57.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l/2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid-1] + l[mid])/2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaa9jdht.lua:17:\
    \ expected: 3, actual: 2.0\nstack traceback:\n\t/tmp/tmpwaa9jdht.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  if n % 2 == 0 then\n    return\
    \ l[math.floor(n/2)]\n  else\n    return (l[math.floor(n/2)] + l[math.floor(n/2)+1])/2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyklg1z57.lua:15:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpyklg1z57.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local mid = math.floor(n\
    \ / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[mid-1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7vdklvnm.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp7vdklvnm.lua:3:\
    \ in function </tmp/tmp7vdklvnm.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp7vdklvnm.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: -1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1 then\n    return\
    \ l[1]\n  else\n    local mid = math.floor((n + 1) / 2)\n    return median(l,\
    \ mid - 1, mid)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659977682
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid-1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsgif427k.lua:17:\
    \ expected: 3, actual: 2.0\nstack traceback:\n\t/tmp/tmpsgif427k.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then return nil end\n  local mid = math.floor(#l/2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return median(l[mid-1], l[mid])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9z72ezme.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp9z72ezme.lua:3:\
    \ in function </tmp/tmp9z72ezme.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp9z72ezme.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n <= 1 then\n    return l[1]\n  end\n  local mid = math.floor((n\
    \ + 1) / 2)\n  local median = median(l[mid], l[n - 1])\n  for i = mid + 1, n do\n\
    \    median = median + l[i] / 2\n  end\n  return median\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxm_9z8tm.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmpxm_9z8tm.lua:3:\
    \ in upvalue 'median'\n\t/tmp/tmpxm_9z8tm.lua:8: in local 'candidate'\n\t/tmp/tmpxm_9z8tm.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  if n % 2 == 0 then\n    return\
    \ l[math.floor(n/2)]\n  else\n    return (l[math.floor(n/2)] + l[math.floor(n/2)+1])/2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyklg1z57.lua:15:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpyklg1z57.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n /\
    \ 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[mid-1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqct95osy.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmpqct95osy.lua:3:\
    \ in function </tmp/tmpqct95osy.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpqct95osy.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid-1],\
    \ l[mid])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iip6836.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp1iip6836.lua:3:\
    \ in function </tmp/tmp1iip6836.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp1iip6836.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor((n +\
    \ 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[mid-1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph4zu1wi2.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmph4zu1wi2.lua:3:\
    \ in function </tmp/tmph4zu1wi2.lua:2>\n\t(...tail calls...)\n\t/tmp/tmph4zu1wi2.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid-1],\
    \ l[mid])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iip6836.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp1iip6836.lua:3:\
    \ in function </tmp/tmp1iip6836.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp1iip6836.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 2 then\n    return nil\n  end\n  local mid = math.floor((n\
    \ + 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid]\
    \ + l[mid+1]) / 2.0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5p4m7_mi.lua:19:\
    \ expected: 8.0, actual: 6\nstack traceback:\n\t/tmp/tmp5p4m7_mi.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n  if #l %\
    \ 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l - 1])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvyknzi2w.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmpvyknzi2w.lua:3:\
    \ in function </tmp/tmpvyknzi2w.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpvyknzi2w.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor((n +\
    \ 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[mid-1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph4zu1wi2.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmph4zu1wi2.lua:3:\
    \ in function </tmp/tmph4zu1wi2.lua:2>\n\t(...tail calls...)\n\t/tmp/tmph4zu1wi2.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid-1],\
    \ l[mid])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iip6836.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp1iip6836.lua:3:\
    \ in function </tmp/tmp1iip6836.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp1iip6836.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n  if #l %\
    \ 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4fg02vod.lua:15:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp4fg02vod.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l/2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid-1] + l[mid])/2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaa9jdht.lua:17:\
    \ expected: 3, actual: 2.0\nstack traceback:\n\t/tmp/tmpwaa9jdht.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then return nil end\n  local mid = math.floor(#l/2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid-1]) / 2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ry7ez20.lua:15:\
    \ expected: 3, actual: 2.0\nstack traceback:\n\t/tmp/tmp9ry7ez20.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor((n +\
    \ 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid]\
    \ + l[mid+1]) / 2.0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwr6q1mqw.lua:17:\
    \ expected: 8.0, actual: 6\nstack traceback:\n\t/tmp/tmpwr6q1mqw.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n % 2 == 1 then\n\
    \    return l[math.floor(n/2)]\n  end\n  local mid = math.floor(n/2)\n  local\
    \ left = l[mid]\n  local right = median(l[mid+1])\n  if right == nil then\n  \
    \  return left\n  end\n  return left + (right-left)*0.5\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpph2hufox.lua:22:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpph2hufox.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: -1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n <= 1 then return l[1] end\n  local mid = math.floor((n\
    \ + 1) / 2)\n  return median(l, mid - 1, mid)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659977682
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[mid-1])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp28fh6z4a.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp28fh6z4a.lua:3:\
    \ in function </tmp/tmp28fh6z4a.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp28fh6z4a.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  if n % 2 == 0 then\n    return\
    \ l[math.floor(n/2)]\n  else\n    local mid = math.floor(n/2)\n    return median(l[mid-1],\
    \ median(l[mid], l[mid+1]))\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpry27e4lx.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmpry27e4lx.lua:3:\
    \ in upvalue 'median'\n\t/tmp/tmpry27e4lx.lua:9: in local 'candidate'\n\t/tmp/tmpry27e4lx.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n  if #l %\
    \ 2 == 0 then return l[mid] end\n  local lower = l[mid]\n  local upper = l[mid+1]\n\
    \  if lower > upper then return median end\n  local median = lower + math.floor((upper\
    \ - lower) / 2)\n  return median\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpugzcrzd7.lua:16:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpugzcrzd7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n <= 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid-1],\
    \ l[mid])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7l1uox8v.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp7l1uox8v.lua:3:\
    \ in function </tmp/tmp7l1uox8v.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp7l1uox8v.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[mid-1])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp28fh6z4a.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp28fh6z4a.lua:3:\
    \ in function </tmp/tmp28fh6z4a.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp28fh6z4a.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then return nil end\n  local mid = math.floor(#l/2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return (l[mid-1] + l[mid])/2\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfkcyl35u.lua:15:\
    \ expected: 3, actual: 2.0\nstack traceback:\n\t/tmp/tmpfkcyl35u.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n % 2 == 0 then\n\
    \    return l[math.floor(n/2)]\n  else\n    return (l[math.floor(n/2)] + l[math.floor(n/2)+1])/2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiacjv7l5.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpiacjv7l5.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n <= 1 then\n    return l[1]\n  end\n  local mid = math.floor((n\
    \ - 1) / 2)\n  return median(l[mid], l[n - 1])\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqkw6gxgb.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmpqkw6gxgb.lua:3:\
    \ in function </tmp/tmpqkw6gxgb.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpqkw6gxgb.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid-1],\
    \ l[mid])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iip6836.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp1iip6836.lua:3:\
    \ in function </tmp/tmp1iip6836.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp1iip6836.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then return nil end\n  local mid = math.floor(#l/2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxawhsxtj.lua:15:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpxawhsxtj.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n <= 1 then\n    return l[1]\n  end\n  local mid = math.floor((n\
    \ + 1) / 2)\n  local median = median(l, mid)\n  if n % 2 == 0 then\n    return\
    \ median\n  else\n    return median + median(l, mid - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3usfyoo6.lua:7:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp3usfyoo6.lua:7: in upvalue 'median'\n\
    \t/tmp/tmp3usfyoo6.lua:8: in upvalue 'median'\n\t/tmp/tmp3usfyoo6.lua:8: in upvalue\
    \ 'median'\n\t/tmp/tmp3usfyoo6.lua:8: in upvalue 'median'\n\t/tmp/tmp3usfyoo6.lua:8:\
    \ in upvalue 'median'\n\t/tmp/tmp3usfyoo6.lua:8: in upvalue 'median'\n\t/tmp/tmp3usfyoo6.lua:8:\
    \ in upvalue 'median'\n\t/tmp/tmp3usfyoo6.lua:8: in upvalue 'median'\n\t/tmp/tmp3usfyoo6.lua:8:\
    \ in upvalue 'median'\n\t...\t(skipping 249969 levels)\n\t/tmp/tmp3usfyoo6.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp3usfyoo6.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.160 seconds, 0 successes, 1 error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l/2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyk3mzfu3.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpyk3mzfu3.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2.0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpimic8n6y.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpimic8n6y.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n % 2 == 1 then\n\
    \    return l[math.floor(n/2)]\n  end\n  local mid = math.floor(n/2)\n  local\
    \ left = l[mid]\n  local right = median(l[mid+1])\n  return left < right and left\
    \ or right\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5q0hhmw1.lua:19:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp5q0hhmw1.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  if n % 2 == 0 then\n    return\
    \ l[((n - 1) / 2) + 1]\n  else\n    return (l[((n - 1) / 2)] + l[((n - 1) / 2)\
    \ + 1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptmb9pgjm.lua:15:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmptmb9pgjm.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  if n % 2 == 0 then\n    return\
    \ l[math.floor(n/2)]\n  else\n    return l[math.floor(n/2)]\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsviuz9l7.lua:15:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpsviuz9l7.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid-1],\
    \ l[mid])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iip6836.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp1iip6836.lua:3:\
    \ in function </tmp/tmp1iip6836.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp1iip6836.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return l[mid+1]\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp03a5rqmz.lua:18:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp03a5rqmz.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n == 0 then\n    return nil\n  elseif n % 2 == 0 then\n\
    \    return l[math.floor(n/2)]\n  else\n    return (l[math.floor(n/2)] + l[math.floor(n/2)+1])/2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmponc0ci89.lua:16:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmponc0ci89.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then return nil end\n  local mid = math.floor(#l/2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return (l[mid-1] + l[mid])/2\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfkcyl35u.lua:15:\
    \ expected: 3, actual: 2.0\nstack traceback:\n\t/tmp/tmpfkcyl35u.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n <= 1 then\n    return l[1]\n  end\n  local mid = math.floor((n\
    \ - 1) / 2)\n  local left = l[mid]\n  local right = l[mid+1]\n  if right < left\
    \ then\n    return right\n  else\n    return left\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqaxethi.lua:20:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmppqaxethi.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l/2)\n  if\
    \ #l % 2 == 1 then\n    return l[mid]\n  else\n    return (l[mid-1] + l[mid])/2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpenw60si9.lua:17:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpenw60si9.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then return nil end\n  local mid = math.floor(#l/2)\n  if #l % 2\
    \ == 0 then return l[mid] end\n  local lower = l[mid]\n  local upper = l[mid+1]\n\
    \  local median = (lower + upper)/2\n  if median == lower then return median end\n\
    \  if median == upper then return median end\n  if median == l[mid] then return\
    \ median end\n  return median\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfby_zcqt.lua:18:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpfby_zcqt.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then return nil end\n  local mid = math.floor(#l/2)\n  if #l % 2\
    \ == 0 then return l[mid] end\n  local lower = l[mid]\n  local upper = l[mid+1]\n\
    \  if lower > upper then return median end\n  return lower + math.floor((upper\
    \ - lower)/2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2rwxrp8.lua:15:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpz2rwxrp8.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1 then\n    return\
    \ l[1]\n  else\n    local mid = math.floor((n + 1) / 2)\n    return median(l[mid],\
    \ l[n - 1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv35ntjld.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmpv35ntjld.lua:3:\
    \ in function </tmp/tmpv35ntjld.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpv35ntjld.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n <= 1 then\n    return l[1]\n  end\n  local mid = math.floor((n\
    \ - 1) / 2)\n  return median(l[mid], l[n - 1])\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqkw6gxgb.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmpqkw6gxgb.lua:3:\
    \ in function </tmp/tmpqkw6gxgb.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpqkw6gxgb.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor((n +\
    \ 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[mid-1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph4zu1wi2.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmph4zu1wi2.lua:3:\
    \ in function </tmp/tmph4zu1wi2.lua:2>\n\t(...tail calls...)\n\t/tmp/tmph4zu1wi2.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2.0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpimic8n6y.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpimic8n6y.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then return nil end\n  local mid = math.floor(#l/2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return (l[mid-1] + l[mid])/2\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfkcyl35u.lua:15:\
    \ expected: 3, actual: 2.0\nstack traceback:\n\t/tmp/tmpfkcyl35u.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local mid = math.floor((n\
    \ - 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid]\
    \ + l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdemupx8i.lua:18:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpdemupx8i.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n <= 1 then\n    return nil\n  end\n  local mid = math.floor(n\
    \ / 2)\n  local median = nil\n  if n % 2 == 0 then\n    median = l[mid]\n  else\n\
    \    median = median(l[mid], l[mid-1])\n  end\n  return median\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwm3eh5qf.lua:12:\
    \ attempt to call a nil value (local 'median')\nstack traceback:\n\t/tmp/tmpwm3eh5qf.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpwm3eh5qf.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l/2)\n  if\
    \ #l % 2 == 1 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6bn4682.lua:17:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpl6bn4682.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid-1],\
    \ l[mid])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iip6836.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp1iip6836.lua:3:\
    \ in function </tmp/tmp1iip6836.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp1iip6836.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n /\
    \ 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[mid-1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqct95osy.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmpqct95osy.lua:3:\
    \ in function </tmp/tmpqct95osy.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpqct95osy.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then return nil end\n  local mid = math.floor(#l/2)\n  if #l % 2\
    \ == 0 then return l[mid] end\n  local lower = l[mid]\n  local upper = l[mid+1]\n\
    \  return lower + math.floor((upper - lower)/2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7whsyin1.lua:14:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp7whsyin1.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l/2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2.0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9l8xwuh.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpm9l8xwuh.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n  if #l %\
    \ 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l - 1])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvyknzi2w.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmpvyknzi2w.lua:3:\
    \ in function </tmp/tmpvyknzi2w.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpvyknzi2w.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l\
    \ - 1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8p0kb10k.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp8p0kb10k.lua:3:\
    \ in function </tmp/tmp8p0kb10k.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp8p0kb10k.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n % 2 == 0 then\n\
    \    return l[math.floor(n/2)]\n  else\n    return (l[math.floor(n/2)] + l[math.floor(n/2)+1])/2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiacjv7l5.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpiacjv7l5.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n <= 1 then\n    return l[1]\n  end\n  local mid = math.floor((n\
    \ + 1) / 2)\n  if n % 2 == 1 then\n    return median(l[mid], l[n - 1])\n  else\n\
    \    return median(l[mid], l[mid])\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf6vvciff.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmpf6vvciff.lua:3:\
    \ in function </tmp/tmpf6vvciff.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpf6vvciff.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor((n +\
    \ 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid]\
    \ + l[mid+1]) / 2.0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwr6q1mqw.lua:17:\
    \ expected: 8.0, actual: 6\nstack traceback:\n\t/tmp/tmpwr6q1mqw.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid-1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsgif427k.lua:17:\
    \ expected: 3, actual: 2.0\nstack traceback:\n\t/tmp/tmpsgif427k.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  if n % 2 == 0 then\n    return\
    \ l[math.floor(n/2)]\n  else\n    return l[math.floor(n/2)]\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsviuz9l7.lua:15:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpsviuz9l7.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l/2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return l[mid-1] + l[mid]/2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5865_x29.lua:17:\
    \ expected: 3, actual: 3.5\nstack traceback:\n\t/tmp/tmp5865_x29.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l/2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return l[mid-1] + l[mid]/2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5865_x29.lua:17:\
    \ expected: 3, actual: 3.5\nstack traceback:\n\t/tmp/tmp5865_x29.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor((n -\
    \ 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid]\
    \ + l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiiu3q_eb.lua:16:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpiiu3q_eb.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1 then\n    return\
    \ l[1]\n  end\n  local mid = math.floor(n/2)\n  local left = l[mid]\n  local right\
    \ = median(l[mid+1])\n  if n == mid then\n    return right\n  elseif n == mid+1\
    \ then\n    return left\n  else\n    return math.floor((left + right)/2)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpczyveqqq.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmpczyveqqq.lua:3:\
    \ in upvalue 'median'\n\t/tmp/tmpczyveqqq.lua:11: in local 'candidate'\n\t/tmp/tmpczyveqqq.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return l[mid] + median(l[mid+1]\
    \ - l[mid])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4wxjexqo.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp4wxjexqo.lua:3:\
    \ in upvalue 'median'\n\t/tmp/tmp4wxjexqo.lua:10: in local 'candidate'\n\t/tmp/tmp4wxjexqo.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local mid = math.floor((n\
    \ + 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid]\
    \ + l[mid+1]) / 2.0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6vje7sp_.lua:19:\
    \ expected: 8.0, actual: 6\nstack traceback:\n\t/tmp/tmp6vje7sp_.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 2 then return nil end\n  local mid = math.floor((n -\
    \ 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[mid+1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbvqk6tkk.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmpbvqk6tkk.lua:3:\
    \ in function </tmp/tmpbvqk6tkk.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpbvqk6tkk.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1 then\n    return\
    \ l[1]\n  end\n  local mid = math.floor((n - 1) / 2)\n  if l[mid] <= l[mid+1]\
    \ then\n    return median(l[mid], l[mid+1])\n  else\n    return median(l[mid],\
    \ l[mid-1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9439ya1w.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp9439ya1w.lua:3:\
    \ in function </tmp/tmp9439ya1w.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp9439ya1w.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2.0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpimic8n6y.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpimic8n6y.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[mid-1])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp28fh6z4a.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp28fh6z4a.lua:3:\
    \ in function </tmp/tmp28fh6z4a.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp28fh6z4a.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then return nil end\n  local mid = math.floor(#l/2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return (l[mid-1] + l[mid]) / 2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc357s80f.lua:15:\
    \ expected: 3, actual: 2.0\nstack traceback:\n\t/tmp/tmpc357s80f.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n == 0 then\n    return nil\n  elseif n % 2 == 0 then\n\
    \    return l[((n - 1) / 2) + 1]\n  else\n    return (l[((n - 1) / 2)] + l[((n\
    \ - 1) / 2) + 1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzijfaivz.lua:16:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpzijfaivz.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n == 0 then\n    return nil\n  elseif n % 2 == 0 then\n\
    \    return l[math.floor(n/2)]\n  else\n    return (l[math.floor(n/2)] + l[math.floor(n/2\
    \ - 1)])/2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdnu8_w2n.lua:16:\
    \ expected: 3, actual: 2.0\nstack traceback:\n\t/tmp/tmpdnu8_w2n.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid-1],\
    \ l[mid])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iip6836.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp1iip6836.lua:3:\
    \ in function </tmp/tmp1iip6836.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp1iip6836.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then return nil end\n  local mid = math.floor(#l/2)\n  if #l % 2\
    \ == 0 then return l[mid] end\n  local lower = l[mid]\n  local upper = l[mid+1]\n\
    \  return lower + math.floor((upper - lower)/2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7whsyin1.lua:14:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp7whsyin1.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n <= 1 then\n    return l[1]\n  end\n  local mid = math.floor(n/2)\n\
    \  return median(l[mid], l[n - 1])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6sospvoq.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp6sospvoq.lua:3:\
    \ in function </tmp/tmp6sospvoq.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp6sospvoq.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then return nil end\n  local mid = math.floor(#l/2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return (l[mid-1] + l[mid]) / 2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc357s80f.lua:15:\
    \ expected: 3, actual: 2.0\nstack traceback:\n\t/tmp/tmpc357s80f.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor((n -\
    \ 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[mid+1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphvfgjhay.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmphvfgjhay.lua:3:\
    \ in function </tmp/tmphvfgjhay.lua:2>\n\t(...tail calls...)\n\t/tmp/tmphvfgjhay.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then return nil end\n  local mid = math.floor(#l/2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return median(l[mid-1], l[mid])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9z72ezme.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp9z72ezme.lua:3:\
    \ in function </tmp/tmp9z72ezme.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp9z72ezme.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[mid-1])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp28fh6z4a.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp28fh6z4a.lua:3:\
    \ in function </tmp/tmp28fh6z4a.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp28fh6z4a.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid-1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsgif427k.lua:17:\
    \ expected: 3, actual: 2.0\nstack traceback:\n\t/tmp/tmpsgif427k.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l/2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid-1] + l[mid])/2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaa9jdht.lua:17:\
    \ expected: 3, actual: 2.0\nstack traceback:\n\t/tmp/tmpwaa9jdht.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid-1],\
    \ l[mid])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iip6836.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp1iip6836.lua:3:\
    \ in function </tmp/tmp1iip6836.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp1iip6836.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  if n % 2 == 0 then\n    return\
    \ l[math.floor(n/2)]\n  else\n    return (l[math.floor(n/2)] + l[math.floor(n/2)+1])/2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyklg1z57.lua:15:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpyklg1z57.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[mid-1])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp28fh6z4a.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp28fh6z4a.lua:3:\
    \ in function </tmp/tmp28fh6z4a.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp28fh6z4a.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l/2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return l[mid-1] + l[mid]/2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5865_x29.lua:17:\
    \ expected: 3, actual: 3.5\nstack traceback:\n\t/tmp/tmp5865_x29.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[mid-1])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp28fh6z4a.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp28fh6z4a.lua:3:\
    \ in function </tmp/tmp28fh6z4a.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp28fh6z4a.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1 then\n    return\
    \ l[1]\n  else\n    local mid = math.floor((n - 1) / 2)\n    return median(l[mid],\
    \ l[n - 1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqf2vgr3s.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmpqf2vgr3s.lua:3:\
    \ in function </tmp/tmpqf2vgr3s.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpqf2vgr3s.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid-1],\
    \ l[mid])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcwmffize.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmpcwmffize.lua:3:\
    \ in function </tmp/tmpcwmffize.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpcwmffize.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[mid-1])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp28fh6z4a.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp28fh6z4a.lua:3:\
    \ in function </tmp/tmp28fh6z4a.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp28fh6z4a.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n <= 1 then\n    return l[1]\n  end\n  local mid = math.floor((n\
    \ - 1) / 2)\n  return median(l[mid], l[n - 1])\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqkw6gxgb.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmpqkw6gxgb.lua:3:\
    \ in function </tmp/tmpqkw6gxgb.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpqkw6gxgb.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local mid = math.floor(n\
    \ / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[mid-1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7vdklvnm.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp7vdklvnm.lua:3:\
    \ in function </tmp/tmp7vdklvnm.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp7vdklvnm.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 2 then\n    return nil\n  end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjc4qec59.lua:18:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpjc4qec59.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid-1],\
    \ l[mid])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iip6836.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp1iip6836.lua:3:\
    \ in function </tmp/tmp1iip6836.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp1iip6836.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n  if #l %\
    \ 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l - 1])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvyknzi2w.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmpvyknzi2w.lua:3:\
    \ in function </tmp/tmpvyknzi2w.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpvyknzi2w.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then return nil end\n  local mid = math.floor(#l/2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return (l[mid-1] + l[mid])/2\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfkcyl35u.lua:15:\
    \ expected: 3, actual: 2.0\nstack traceback:\n\t/tmp/tmpfkcyl35u.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor((n +\
    \ 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid]\
    \ + l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1cben3u.lua:17:\
    \ expected: 8.0, actual: 6\nstack traceback:\n\t/tmp/tmp_1cben3u.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2.0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmoru7llz.lua:16:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpmoru7llz.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local mid = math.floor((n\
    \ - 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid]\
    \ + l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdemupx8i.lua:18:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpdemupx8i.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l\
    \ - 1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8p0kb10k.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp8p0kb10k.lua:3:\
    \ in function </tmp/tmp8p0kb10k.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp8p0kb10k.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l/2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyk3mzfu3.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpyk3mzfu3.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[mid-1])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp28fh6z4a.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp28fh6z4a.lua:3:\
    \ in function </tmp/tmp28fh6z4a.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp28fh6z4a.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n  if #l %\
    \ 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l - 1])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvyknzi2w.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmpvyknzi2w.lua:3:\
    \ in function </tmp/tmpvyknzi2w.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpvyknzi2w.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor((n +\
    \ 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid]\
    \ + l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1cben3u.lua:17:\
    \ expected: 8.0, actual: 6\nstack traceback:\n\t/tmp/tmp_1cben3u.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor((n +\
    \ 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[mid-1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph4zu1wi2.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmph4zu1wi2.lua:3:\
    \ in function </tmp/tmph4zu1wi2.lua:2>\n\t(...tail calls...)\n\t/tmp/tmph4zu1wi2.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return l[mid] + median(l[mid+1])\
    \ or median(l[mid-1]) or median(l[mid])\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxdabgvbb.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmpxdabgvbb.lua:3:\
    \ in upvalue 'median'\n\t/tmp/tmpxdabgvbb.lua:10: in local 'candidate'\n\t/tmp/tmpxdabgvbb.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1 then\n    return\
    \ l[1]\n  end\n  local mid = math.floor(n/2)\n  return median(l[mid], l[n - 1])\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm9lorxar.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmpm9lorxar.lua:3:\
    \ in function </tmp/tmpm9lorxar.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpm9lorxar.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n <= 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then return l[mid] end\n  local lower = median(l[mid-1])\n  local\
    \ upper = median(l[mid+1])\n  return lower + (upper - lower) * 0.5\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqm1k0_x3.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmpqm1k0_x3.lua:3:\
    \ in upvalue 'median'\n\t/tmp/tmpqm1k0_x3.lua:7: in local 'candidate'\n\t/tmp/tmpqm1k0_x3.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n <= 1 then\n    return l[1]\n  end\n  local mid = math.floor(n/2)\n\
    \  local left = l[mid]\n  local right = l[mid+1]\n  if right < left then\n   \
    \ return median(l)\n  else\n    return left + (right-left)/2\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkj_nyrq5.lua:20:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpkj_nyrq5.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n <= 1 then\n    return l[1]\n  end\n  local mid = math.floor((n\
    \ + 1) / 2)\n  if n % 2 == 0 then\n    return median(l[mid], l[n - 1])\n  else\n\
    \    return median(l[mid], l[mid])\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9kqvw9l1.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp9kqvw9l1.lua:3:\
    \ in function </tmp/tmp9kqvw9l1.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp9kqvw9l1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n % 2 == 1 then\n\
    \    return l[((n - 1) / 2) + 1]\n  end\n  local mid = n / 2\n  local left = l[mid]\n\
    \  local right = l[mid+1]\n  if left < right then\n    return median(l)\n  else\n\
    \    return right\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxx9fgais.lua:23:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpxx9fgais.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 2 then\n    return nil\n  end\n  local mid = math.floor((n\
    \ + 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid]\
    \ + l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyb7ix35f.lua:19:\
    \ expected: 8.0, actual: 6\nstack traceback:\n\t/tmp/tmpyb7ix35f.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  if n % 2 == 0 then\n    return\
    \ l[((n - 1) / 2)]:double() + (l[((n - 1) / 2) + 1]:double()) / 2.0\n  else\n\
    \    return l[((n - 1) / 2)]:double()\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphrcf1j20.lua:8:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmphrcf1j20.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmphrcf1j20.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n <= 1 then\n    return l[1]\n  end\n  local mid = math.floor((n\
    \ - 1) / 2)\n  local left = l[mid]\n  local right = l[mid+1]\n  if n == 2 then\n\
    \    return left\n  elseif n == 1 then\n    return right\n  else\n    return math.floor(left\
    \ + right/2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjt0k74xv.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpjt0k74xv.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 2 then\n    return nil\n  end\n  local mid = math.floor((n\
    \ - 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return l[mid]\
    \ + median(l[mid+1], l[mid-1])\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3ixpqsw0.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp3ixpqsw0.lua:3:\
    \ in upvalue 'median'\n\t/tmp/tmp3ixpqsw0.lua:11: in local 'candidate'\n\t/tmp/tmp3ixpqsw0.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n <= 1 then\n    return l[1]\n  end\n  local mid = math.floor((n\
    \ - 1) / 2)\n  local left = l[mid]\n  local right = l[mid+1]\n  if n == 2 then\n\
    \    return left\n  elseif n == 1 then\n    return right\n  else\n    return math.floor(left\
    \ + right) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ammh2s_.lua:22:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2ammh2s_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local half = math.floor(n /\
    \ 2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n    return median(l[half],\
    \ l[half + 1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphhk998x8.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmphhk998x8.lua:3:\
    \ in function </tmp/tmphhk998x8.lua:2>\n\t(...tail calls...)\n\t/tmp/tmphhk998x8.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n  if #l %\
    \ 2 == 0 then return l[mid] end\n  local lower = l[mid]\n  local upper = l[mid+1]\n\
    \  if lower < upper then return lower end\n  return upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8x5vyqar.lua:15:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp8x5vyqar.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l/2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid-1] + l[mid])/2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaa9jdht.lua:17:\
    \ expected: 3, actual: 2.0\nstack traceback:\n\t/tmp/tmpwaa9jdht.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l/2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid-1] + l[mid])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcci2f88m.lua:17:\
    \ expected: 3, actual: 2.0\nstack traceback:\n\t/tmp/tmpcci2f88m.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7lke3nvu.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp7lke3nvu.lua:3:\
    \ in function </tmp/tmp7lke3nvu.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp7lke3nvu.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l/2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid-1] + l[mid])/2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaa9jdht.lua:17:\
    \ expected: 3, actual: 2.0\nstack traceback:\n\t/tmp/tmpwaa9jdht.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n  if #l %\
    \ 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l - 1])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvyknzi2w.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmpvyknzi2w.lua:3:\
    \ in function </tmp/tmpvyknzi2w.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpvyknzi2w.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then return nil end\n  local mid = math.floor(#l/2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return (l[mid-1] + l[mid]) / 2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc357s80f.lua:15:\
    \ expected: 3, actual: 2.0\nstack traceback:\n\t/tmp/tmpc357s80f.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor((n +\
    \ 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid]\
    \ + l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1cben3u.lua:17:\
    \ expected: 8.0, actual: 6\nstack traceback:\n\t/tmp/tmp_1cben3u.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then return nil end\n  local mid = math.floor(#l/2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return (l[mid-1] + l[mid])/2\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfkcyl35u.lua:15:\
    \ expected: 3, actual: 2.0\nstack traceback:\n\t/tmp/tmpfkcyl35u.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l/2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyk3mzfu3.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpyk3mzfu3.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then return nil end\n  local mid = math.floor(#l/2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return (l[mid-1] + l[mid])/2\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfkcyl35u.lua:15:\
    \ expected: 3, actual: 2.0\nstack traceback:\n\t/tmp/tmpfkcyl35u.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n % 2 == 0 then\n\
    \    return l[math.floor(n/2)]\n  else\n    return (l[math.floor(n/2)] + l[math.floor(n/2)+1])/2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiacjv7l5.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmpiacjv7l5.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n /\
    \ 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[mid-1])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqct95osy.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmpqct95osy.lua:3:\
    \ in function </tmp/tmpqct95osy.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpqct95osy.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7lke3nvu.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmp7lke3nvu.lua:3:\
    \ in function </tmp/tmp7lke3nvu.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp7lke3nvu.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1 then\n    return\
    \ l[1]\n  end\n  local mid = math.floor((n - 1) / 2)\n  return median(l[mid],\
    \ l[#l])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz7ikhh6m.lua:3:\
    \ attempt to get length of a number value (local 'l')\nstack traceback:\n\t/tmp/tmpz7ikhh6m.lua:3:\
    \ in function </tmp/tmpz7ikhh6m.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpz7ikhh6m.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid-1] + l[mid])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgln5u0ei.lua:16:\
    \ expected: 3, actual: 2.0\nstack traceback:\n\t/tmp/tmpgln5u0ei.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n < 2 then\n    return nil\n  end\n  local mid = math.floor((n\
    \ + 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid]\
    \ + l[mid+1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyb7ix35f.lua:19:\
    \ expected: 8.0, actual: 6\nstack traceback:\n\t/tmp/tmpyb7ix35f.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return l[mid-1] + l[mid]/2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnsza78d_.lua:18:\
    \ expected: 3, actual: 3.5\nstack traceback:\n\t/tmp/tmpnsza78d_.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
- exit_code: 1
  program: "-- Return median of elements in the list l.\nlocal function median(l)\n\
    \  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n3oth8a.lua:17:\
    \ expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2n3oth8a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977677
