language: lua
name: HumanEval_14_all_prefixes
results:
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtbodo3g.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpqtbodo3g.lua:14: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: -1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local i = #string\n\
    \  while i do\n    prefixes[#prefixes + 1] = string\n    i = i - 1\n  end\n  return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750580
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[i] = string\n    end\n    local longest_prefix = prefixes[1]\n\
    \    for i = 2, #prefixes do\n        local prefix = prefixes[i]\n        local\
    \ prefix_length = #prefix\n        for j = 1, prefix_length do\n            local\
    \ prefix = prefix .. string[j]\n            if prefix ~= longest_prefix then\n\
    \                longest_prefix = prefix\n            end\n        end\n    end\n\
    \    return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptfhtj0md.lua:12:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmptfhtj0md.lua:12:\
    \ in function 'candidate'\n\t/tmp/tmptfhtj0md.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string[i])\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxzzfsbg.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpnxzzfsbg.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local prefix = \"\
    \"\n  for i = 1, #string do\n    prefix = prefix .. string[i]\n    if prefix:len()\
    \ > 0 then\n      table.insert(prefixes, prefix)\n    end\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp095agc5q.lua:6:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp095agc5q.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp095agc5q.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  table.sort(prefixes)\n  return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3rxl30n8.lua:15:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmp3rxl30n8.lua:15: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local longest, shortest\
    \ = string.find(string, \"^%s*\", \"\")\n  while longest ~= nil do\n    prefixes[#prefixes\
    \ + 1] = longest\n    longest, shortest = string.find(string, \"^%s*\", longest)\n\
    \  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzin9br0p.lua:4:\
    \ bad argument #3 to 'find' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpzin9br0p.lua:4: in function 'candidate'\n\t/tmp/tmpzin9br0p.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp996nfx8y.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmp996nfx8y.lua:14: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string[i])\n  end\n  return prefixes\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9ouprxf.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpy9ouprxf.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtbodo3g.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpqtbodo3g.lua:14: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(i, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1x6rph6k.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmp1x6rph6k.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    local prefix = string\n    for j = 1, i do\n      prefix = prefix ..\
    \ string[j]\n    end\n    table.insert(prefixes, prefix)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxmnks8tv.lua:7:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpxmnks8tv.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpxmnks8tv.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp996nfx8y.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmp996nfx8y.lua:14: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local i = #string\n\
    \  while i ~= 0 do\n    prefixes[#prefixes + 1] = string[i]\n    i = i - 1\n \
    \ end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6djtu7i7.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmp6djtu7i7.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[i] = string\n  end\n  local i = #string\n  while i > 0 do\n\
    \    local j = i - 1\n    while j > 0 do\n      prefixes[j] = prefixes[j] .. string[j]\n\
    \      j = j - 1\n    end\n    i = i - 1\n  end\n  return prefixes\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjdxla26y.lua:11:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpjdxla26y.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpjdxla26y.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local longest_prefix\
    \ = \"\"\n  for i = 1, #string do\n    local prefix = string:sub(i, i)\n    if\
    \ prefix ~= longest_prefix then\n      table.insert(prefixes, prefix)\n    end\n\
    \    longest_prefix = prefix\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu588uw96.lua:19:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmpu588uw96.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local last_prefix\
    \ = \"\"\n  for i = 1, #string do\n    local prefix = string:sub(i, i)\n    if\
    \ prefix ~= last_prefix then\n      table.insert(prefixes, prefix)\n      last_prefix\
    \ = prefix\n    end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvcx36e_n.lua:19:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmpvcx36e_n.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local index = 1\n\
    \  while true do\n    local prefix = string\n    for i = 1, index do\n      prefix\
    \ = prefix .. string[i]\n    end\n    table.insert(prefixes, prefix)\n    index\
    \ = index + 1\n    if index > #string then\n      break\n    end\n  end\n  return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8jcsi0rd.lua:8:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp8jcsi0rd.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmp8jcsi0rd.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local longest, shortest\n\
    \  for i = 1, #string do\n    longest, shortest = longest, shortest\n    if string[i]\
    \ ~= string[#string] then\n      longest = string[i]\n    end\n  end\n  for i\
    \ = 1, #string do\n    if string[i] ~= string[#string] then\n      shortest =\
    \ string[i]\n    end\n    prefixes[#prefixes + 1] = string[#string]\n  end\n \
    \ return prefixes, longest, shortest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8m2he1x0.lua:24:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmp8m2he1x0.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp996nfx8y.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmp996nfx8y.lua:14: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(i, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1x6rph6k.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmp1x6rph6k.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtbodo3g.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpqtbodo3g.lua:14: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  table.sort(prefixes, function(a,\
    \ b)\n    return #a < #b\n  end)\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrckp9fc.lua:17:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpwrckp9fc.lua:17: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local prefix\n \
    \ for prefix in string.gmatch(\"^([^%s]+)%s*$\", \"%S+\") do\n    table.insert(prefixes,\
    \ prefix)\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl4d_l47p.lua:14:\
    \ expected: {}\nactual: {\"^([^%s]+)%s*$\"}\nstack traceback:\n\t/tmp/tmpl4d_l47p.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local index = 1\n\
    \  while true do\n    local prefix = string\n    while index <= #string do\n \
    \     prefix = prefix .. string[index]\n      index = index + 1\n    end\n   \
    \ table.insert(prefixes, prefix)\n    if index > #string then\n      break\n \
    \   end\n    index = index + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4qulv06.lua:23:\
    \ expected: {}\nactual: {\"\"}\nstack traceback:\n\t/tmp/tmpo4qulv06.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local len = #string\n\
    \  local i = 1\n  while i <= len do\n    prefixes[#prefixes + 1] = string[1:i]\n\
    \    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcop8tggz.lua:7: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[i] = string\n  end\n  local longest = #string\n  local shortest\
    \ = #string\n  while shortest > 1 do\n    shortest = #string - 1\n    for i =\
    \ 1, shortest do\n      local prefix = string[1:i]\n      if not prefixes[prefix]\
    \ then\n        prefixes[prefix] = prefix\n      else\n        shortest = shortest\
    \ - 1\n      end\n    end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsyvap7gm.lua:12: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local prefix = \"\
    \"\n  for i = 1, #string do\n    prefix = prefix .. string[i]\n    prefixes[#prefixes\
    \ + 1] = prefix\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvw0yyx_h.lua:6:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpvw0yyx_h.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvw0yyx_h.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtbodo3g.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpqtbodo3g.lua:14: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: -1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[i] = string\n  end\n  local i = 1\n  while i <= #string do\n\
    \    local prefix = string\n    while i <= #string and string[i] == prefix do\n\
    \      i = i + 1\n    end\n    if i > #string then\n      break\n    end\n   \
    \ prefixes[#prefixes + 1] = prefix\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750580
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp996nfx8y.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmp996nfx8y.lua:14: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtbodo3g.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpqtbodo3g.lua:14: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    local prefix = string:sub(i, i)\n    table.insert(prefixes, prefix)\n\
    \  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfteqf1w.lua:15:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmpbfteqf1w.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: -1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local i = #string\n\
    \  while i do\n    prefixes[#prefixes + 1] = string\n    i = i - 1\n  end\n  return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750580
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[i] = string\n  end\n  local function add_prefixes(prefix)\n\
    \    local i = #prefixes\n    prefixes[i] = prefix\n    return i\n  end\n  local\
    \ function remove_prefixes(prefix)\n    local i = #prefixes\n    prefixes[i] =\
    \ prefix:sub(1, #prefix)\n    return i\n  end\n  local function add_prefix(prefix)\n\
    \    local i = #prefixes\n    prefixes[i] = prefix .. string\n    return i\n \
    \ end\n  local function remove_prefix(prefix)\n    local i = #prefixes\n    prefixes[i]\
    \ = prefix:sub(1, #prefix) .. string\n    return i\n  end\n  local function add_suffix(suffix)\n\
    \    local i = #prefixes\n    prefixes[i] = string .. suffix\n    return i\n \
    \ end\n  local function remove_suffix(suffix)\n    local i = #prefixes\n    prefixes[i]\
    \ = string:sub(1, #string) .. suffix\n    return i\n  end\n  local function add_suffixes(suffix)\n\
    \    local i = #prefixes\n    prefixes[i] = string .. suffix\n    return i\n \
    \ end\n  local function remove_suffixes(suffix)\n    local i = #prefixes\n   \
    \ prefixes[i] = string:sub(1, #string) .. suffix\n    return i\n  end\n  local\
    \ function add_suffixes(suffix)\n    local i = #prefixes\n    prefixes[i] = string\
    \ .. suffix\n    return i\n  end\n  local function remove_suffixes(suffix)\n \
    \   local i = #prefixes\n    prefixes[i] = string:sub(1, #string) .. suffix\n\
    \    return i\n  end\n  local function add_suffix(suffix)\n    local i = #prefixes\n\
    \    prefixes[i] = string .. suffix\n    return i\n  end\n  local function remove_suffix(suffix)\n\
    \    local i = #prefixes\n    prefixes[i] = string:sub(1, #string) .. suffix\n\
    \    return i\n  end\n  local function add_prefix(prefix)\n    local i = #prefixes\n\
    \    prefixes[i] = prefix .. string\n    return i\n  end\n  local function remove_prefix(prefix)\n\
    \    local i = #prefixes\n    prefixes[i] = prefix:sub(1, #prefix) .. string\n\
    \    return i\n  end\n  local function add_prefixes(prefix)\n    local i = #prefixes\n\
    \    prefixes[i] = prefix .. string\n    return i\n  end\n  local function remove_prefixes(prefix)\n\
    \    local i = #prefixes\n    prefixes[i] = prefix:sub(1, #prefix) .. string\n\
    \    return \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2kcb5xq6.lua:86: ''end'' expected (to close ''function'' at
    line 82) near ''=''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: -1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[i] = string\n  end\n  local i = #string\n  while i do\n   \
    \ prefixes[#prefixes + 1] = string\n    i = i - 1\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750580
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local longest_prefix\
    \ = \"\"\n  local longest_prefix_length = 0\n  for i = 1, #string do\n    local\
    \ prefix = string:sub(i, i)\n    local prefix_length = #prefix\n    if longest_prefix_length\
    \ < prefix_length then\n      longest_prefix_length = prefix_length\n      longest_prefix\
    \ = prefix\n    end\n    prefixes[#prefixes + 1] = prefix\n  end\n  return prefixes,\
    \ longest_prefix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5bbfgtu7.lua:22:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmp5bbfgtu7.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local len = #string\n\
    \  for i = 1, len do\n    table.insert(prefixes, string[i])\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpheg0leiw.lua:15:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpheg0leiw.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[i] = string\n  end\n  local i = #string\n  while i > 0 do\n\
    \    local prefix = string\n    for j = 1, i do\n      prefix = prefix .. string[j]\n\
    \    end\n    prefixes[#prefixes+1] = prefix\n    i = i - 1\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0pu6t6zo.lua:11:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp0pu6t6zo.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp0pu6t6zo.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local pos = 1\n\
    \  while pos <= #string do\n    prefixes[pos] = string\n    pos = pos + 1\n  end\n\
    \  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1kp4zke_.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmp1kp4zke_.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtbodo3g.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpqtbodo3g.lua:14: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local prefix = \"\
    \"\n  for i = 1, #string do\n    prefix = prefix .. string[i]\n    prefixes[#prefixes\
    \ + 1] = prefix\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvw0yyx_h.lua:6:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpvw0yyx_h.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvw0yyx_h.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local longest_prefix\
    \ = \"\"\n  local longest_prefix_len = 0\n  for i = 1, #string do\n    local prefix\
    \ = string:sub(i, i)\n    local prefix_len = #prefix\n    if prefix_len > longest_prefix_len\
    \ then\n      longest_prefix_len = prefix_len\n      longest_prefix = prefix\n\
    \    end\n    prefixes[prefix] = true\n  end\n  return prefixes, longest_prefix\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bvlj3fn.lua:22:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, d=true, f=true, g=true, h=true, s=true}\nstack traceback:\n\t/tmp/tmp_bvlj3fn.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local longest_prefix\
    \ = \"\"\n  local longest_prefix_len = 0\n  local longest_prefix_start = nil\n\
    \  local longest_prefix_end = nil\n  for i = 1, #string do\n    local prefix =\
    \ string:sub(i, i)\n    local prefix_len = #prefix\n    if longest_prefix_len\
    \ < prefix_len then\n      longest_prefix_len = prefix_len\n      longest_prefix_start\
    \ = prefix\n      longest_prefix_end = prefix\n    end\n    if longest_prefix_len\
    \ == prefix_len then\n      longest_prefix_end = prefix\n    end\n    prefixes[#prefixes\
    \ + 1] = prefix\n  end\n  return prefixes, longest_prefix_start, longest_prefix_end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpci8fdkl8.lua:28:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmpci8fdkl8.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local len = #string\n\
    \  local i = 1\n  while i <= len do\n    prefixes[#prefixes + 1] = string\n  \
    \  i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8mkztf_r.lua:17:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmp8mkztf_r.lua:17: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local prefix = \"\
    \"\n  for i = 1, #string do\n    prefix = prefix .. string[i]\n    if prefix:sub(1,\
    \ #prefix) == prefix then\n      table.insert(prefixes, prefix)\n    end\n  end\n\
    \  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_tdlg5ag.lua:6:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp_tdlg5ag.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp_tdlg5ag.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i - 1))\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7mp8ornl.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"}\nstack traceback:\n\t/tmp/tmp7mp8ornl.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local len = #string\n\
    \  for i = 1, len do\n    local prefix = string[1:i]\n    table.insert(prefixes,\
    \ prefix)\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpko0xlcir.lua:6: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local longest =\
    \ #string\n  for i = 1, longest do\n    local prefix = string[1:i]\n    if not\
    \ prefixes[prefix] then\n      table.insert(prefixes, prefix)\n    end\n  end\n\
    \  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuioyzuwr.lua:6: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local prefix_length\
    \ = 1\n  local prefix = string\n  while true do\n    prefixes[#prefixes + 1] =\
    \ prefix\n    if string.len(prefix) > prefix_length then\n      prefix_length\
    \ = string.len(prefix)\n    end\n    prefix = prefix:sub(1, prefix_length)\n \
    \   if prefix == \"\" then\n      break\n    end\n  end\n  return prefixes\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphwdr_mjo.lua:22:\
    \ expected: {}\nactual: {\"\"}\nstack traceback:\n\t/tmp/tmphwdr_mjo.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local pos = 1\n\
    \  while pos <= #string do\n    local prefix = string\n    for i = 1, pos do\n\
    \      prefix = prefix .. string[i]\n    end\n    table.insert(prefixes, prefix)\n\
    \    pos = pos + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp74jhhiu5.lua:8:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp74jhhiu5.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmp74jhhiu5.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  table.sort(prefixes, function(a,\
    \ b)\n    return #a < #b\n  end)\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrckp9fc.lua:17:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpwrckp9fc.lua:17: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[i] = string\n    end\n    for i = 1, #string do\n     \
    \   for j = 1, #string do\n            if string[i] == string[j] then\n      \
    \          prefixes[i] = prefixes[i] .. string[j]\n                break\n   \
    \         end\n        end\n    end\n    return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ivgv6n_.lua:10:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp0ivgv6n_.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmp0ivgv6n_.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string[i])\n  end\n  return prefixes\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9ouprxf.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpy9ouprxf.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local prefix = \"\
    \"\n  for i = 1, #string do\n    prefix = prefix .. string[i]\n    prefixes[#prefixes\
    \ + 1] = prefix\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvw0yyx_h.lua:6:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpvw0yyx_h.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvw0yyx_h.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local last_prefix\
    \ = \"\"\n  local last_suffix = \"\"\n  for i = 1, #string do\n    local prefix\
    \ = string:sub(i, i)\n    if prefix ~= last_prefix then\n      table.insert(prefixes,\
    \ last_prefix)\n    end\n    last_prefix = prefix\n    local suffix = string:sub(i\
    \ + 1, #string)\n    if suffix ~= last_suffix then\n      table.insert(prefixes,\
    \ last_suffix)\n    end\n    last_suffix = suffix\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jweffoo.lua:25:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"\", \"\", \"a\", \"sdfgh\", \"s\", \"dfgh\", \"d\", \"fgh\", \"f\", \"gh\"\
    , \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmp8jweffoo.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[i] = string\n    end\n    for i = #string, 1, -1 do\n \
    \       prefixes[i] = prefixes[i-1]..string[i]\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppau27nkj.lua:8:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmppau27nkj.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmppau27nkj.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtbodo3g.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpqtbodo3g.lua:14: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[i] = string\n  end\n  local i = #string\n  while i > 0 do\n\
    \    local prefix = string\n    i = i - 1\n    for j = 1, #string do\n      prefix\
    \ = prefix .. string[j]\n      prefixes[j] = prefix\n    end\n  end\n  return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqqo9tz_i.lua:12:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpqqo9tz_i.lua:12:\
    \ in function 'candidate'\n\t/tmp/tmpqqo9tz_i.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: -1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local pos = 1\n\
    \  while pos <= #string do\n    local prefix = string\n    pos = 1\n    while\
    \ pos < #prefix do\n      prefix = prefix .. string\n      pos = pos + 1\n   \
    \ end\n    table.insert(prefixes, prefix)\n  end\n  return prefixes\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750580
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local longest =\
    \ #string\n  for i = 1, longest do\n    prefixes[#prefixes + 1] = string[1:i]\n\
    \  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm90igt9p.lua:6: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    local longest\
    \ = #string\n    for i = 1, longest do\n        prefixes[#prefixes + 1] = string[1:i]\n\
    \    end\n    return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwzmu6es6.lua:6: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[i] = string\n  end\n  local i = 1\n  while i <= #string do\n\
    \    local prefix = string\n    while i <= #string and string[i] ~= prefix do\n\
    \      prefix = prefix .. string[i]\n      i = i + 1\n    end\n    prefixes[i]\
    \ = prefix\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq90zfkdm.lua:11:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpq90zfkdm.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpq90zfkdm.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local longest_prefix\
    \ = \"\"\n  for i = 1, #string do\n    local prefix = string:sub(i, i)\n    local\
    \ prefix_length = #prefix\n    if longest_prefix ~= \"\" then\n      local prefix_length\
    \ = #longest_prefix\n      if prefix_length < prefix_length then\n        prefixes[#prefixes\
    \ + 1] = prefix\n      end\n    end\n    longest_prefix = prefix\n  end\n  return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7q66qjaw.lua:23:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmp7q66qjaw.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local i = 1\n  while\
    \ i <= #string do\n    prefixes[#prefixes + 1] = string\n    i = i + 1\n  end\n\
    \  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7bzix3t.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpg7bzix3t.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  table.sort(prefixes, function(a,\
    \ b) return #a < #b end)\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpki49f3us.lua:15:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpki49f3us.lua:15: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  table.sort(prefixes, function(a,\
    \ b) return #a < #b end)\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpki49f3us.lua:15:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpki49f3us.lua:15: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[i] = string\n  end\n  local longest = #string\n  for i = 1,\
    \ #string do\n    local prefix = string[1:i]\n    local suffix = string[#prefix+i]\n\
    \    local new_prefix = prefix\n    if #prefix > longest then\n      new_prefix\
    \ = prefix\n      longest = #prefix\n    end\n    if #suffix > longest then\n\
    \      new_prefix = prefix .. suffix\n      longest = #suffix\n    end\n    prefixes[#prefixes+1]\
    \ = new_prefix\n  end\n  return prefixes, longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpraan7vee.lua:9: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local last_prefix\
    \ = \"\"\n  for i = 1, #string do\n    local prefix = string:sub(i, i)\n    if\
    \ prefix ~= last_prefix then\n      table.insert(prefixes, prefix)\n    end\n\
    \    last_prefix = prefix\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyzoexi08.lua:19:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmpyzoexi08.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  table.sort(prefixes, function(a,\
    \ b) return #a < #b end)\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpki49f3us.lua:15:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpki49f3us.lua:15: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local prefix = \"\
    \"\n  for i = 1, #string do\n    prefix = prefix .. string[i]\n    if prefix:len()\
    \ > 0 then\n      table.insert(prefixes, prefix)\n    end\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp095agc5q.lua:6:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp095agc5q.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp095agc5q.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string[i])\n  end\n  return prefixes\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9ouprxf.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpy9ouprxf.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[i] = string\n  end\n  local i = #string\n  while i > 0 do\n\
    \    local prefix = string\n    for j = 1, i do\n      prefix = prefix .. string[j]\n\
    \    end\n    prefixes[#prefixes + 1] = prefix\n    i = i - 1\n  end\n  return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqyaez2dj.lua:11:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpqyaez2dj.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpqyaez2dj.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local index = 1\n\
    \  while true do\n    local prefix = string\n    for i = 1, index do\n      prefix\
    \ = prefix .. string[i]\n    end\n    table.insert(prefixes, prefix)\n    index\
    \ = index + 1\n    if index > #string then\n      break\n    end\n  end\n  return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8jcsi0rd.lua:8:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp8jcsi0rd.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmp8jcsi0rd.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp996nfx8y.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmp996nfx8y.lua:14: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp996nfx8y.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmp996nfx8y.lua:14: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local longest_prefix\
    \ = \"\"\n  local longest_prefix_len = 0\n  for i = 1, #string do\n    local prefix\
    \ = string:sub(i, i)\n    local prefix_len = #prefix\n    if prefix_len > longest_prefix_len\
    \ then\n      longest_prefix = prefix\n      longest_prefix_len = prefix_len\n\
    \    end\n    prefixes[#prefixes + 1] = prefix\n  end\n  return prefixes, longest_prefix\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeygomrwn.lua:22:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmpeygomrwn.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[i] = string\n  end\n  local i = 1\n  while i <= #string do\n\
    \    local j = i\n    while j <= #string do\n      prefixes[j] = prefixes[j] ..\
    \ string[j]\n      j = j + 1\n    end\n    i = i + 1\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp17jausrq.lua:11:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp17jausrq.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp17jausrq.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local i = 1\n  while\
    \ i <= #string do\n    prefixes[#prefixes + 1] = string\n    i = i + 1\n  end\n\
    \  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7bzix3t.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpg7bzix3t.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local longest =\
    \ #string\n  local shortest = longest\n  while longest > 0 do\n    shortest =\
    \ longest\n    for i = 1, #string do\n      if string[i] == string[shortest] then\n\
    \        shortest = shortest-1\n      else\n        prefixes[#prefixes+1] = string[shortest]\n\
    \      end\n    end\n    longest = shortest\n  end\n  return prefixes\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2rk0459a.lua:24:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmp2rk0459a.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string[i])\n  end\n  return prefixes\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9ouprxf.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpy9ouprxf.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    local prefix = string\n    for j = 1, i do\n      prefix = prefix ..\
    \ string[j]\n    end\n    table.insert(prefixes, prefix)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxmnks8tv.lua:7:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpxmnks8tv.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpxmnks8tv.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local last_prefix\
    \ = \"\"\n  for i = 1, #string do\n    local prefix = string:sub(i, i)\n    if\
    \ prefix ~= last_prefix then\n      table.insert(prefixes, prefix)\n      last_prefix\
    \ = prefix\n    end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvcx36e_n.lua:19:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmpvcx36e_n.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtbodo3g.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpqtbodo3g.lua:14: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local longest_prefix\
    \ = \"\"\n  local longest_prefix_length = 0\n  for i = 1, #string do\n    local\
    \ prefix = string:sub(i, i)\n    local prefix_length = #prefix\n    if longest_prefix_length\
    \ < prefix_length then\n      longest_prefix_length = prefix_length\n      longest_prefix\
    \ = prefix\n    end\n    prefixes[prefix] = true\n  end\n  return prefixes, longest_prefix\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphh_u11b4.lua:22:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, d=true, f=true, g=true, h=true, s=true}\nstack traceback:\n\t/tmp/tmphh_u11b4.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local longest_prefix\
    \ = \"\"\n  local longest_prefix_len = 0\n  for i = 1, #string do\n    local prefix\
    \ = string:sub(i, i)\n    local prefix_len = #prefix\n    if prefix_len > longest_prefix_len\
    \ then\n      longest_prefix_len = prefix_len\n      longest_prefix = prefix\n\
    \    end\n    prefixes[#prefixes + 1] = prefix\n  end\n  return prefixes, longest_prefix\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphcmegwvu.lua:22:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmphcmegwvu.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[i] = string\n  end\n  local function add_prefixes(prefix, prefix)\n\
    \    if prefix then\n      prefixes[#prefixes + 1] = prefix\n    end\n  end\n\
    \  add_prefixes(\"\", \"\")\n  for i = 1, #string do\n    local prefix = string\n\
    \    for j = 1, i do\n      prefix = prefix .. string[j]\n    end\n    add_prefixes(prefix,\
    \ prefix)\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkiqsuqji.lua:26:\
    \ expected: {}\nactual: {\"\"}\nstack traceback:\n\t/tmp/tmpkiqsuqji.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[i] = string\n  end\n  local longest = #string\n  for i = 1,\
    \ #string do\n    local prefix = string[1:i]\n    local suffix = string[(i+1):]\n\
    \    local length = #prefix\n    if length > longest then\n      longest = length\n\
    \    end\n    for j = 1, length do\n      prefixes[length + j] = prefix .. suffix\n\
    \    end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp4nfumwc.lua:9: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string[i])\n  end\n  return prefixes\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9ouprxf.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpy9ouprxf.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[i] = string\n  end\n  while #prefixes > 0 do\n    local prefix\
    \ = prefixes[1]\n    prefixes = prefixes[#prefixes]:gsub(\"^\" .. prefix, \"\"\
    )\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprq2s5_cs.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ \"\"\nstack traceback:\n\t/tmp/tmprq2s5_cs.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local longest_prefix\
    \ = \"\"\n  local longest_prefix_length = 0\n  for i = 1, #string do\n    local\
    \ prefix = string:sub(i, i)\n    local prefix_length = #prefix\n    if longest_prefix_length\
    \ < prefix_length then\n      longest_prefix_length = prefix_length\n      longest_prefix\
    \ = prefix\n    end\n    prefixes[prefix] = true\n  end\n  return prefixes, longest_prefix\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphh_u11b4.lua:22:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, d=true, f=true, g=true, h=true, s=true}\nstack traceback:\n\t/tmp/tmphh_u11b4.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtbodo3g.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpqtbodo3g.lua:14: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local longest_prefix\
    \ = \"\"\n  for i = 1, #string do\n    local prefix = string:sub(i, i)\n    local\
    \ prefix_length = #prefix\n    if longest_prefix ~= \"\" then\n      if prefix_length\
    \ < longest_prefix:len() then\n        prefixes[#prefixes + 1] = prefix\n    \
    \  end\n    else\n      prefixes[#prefixes + 1] = prefix\n    end\n    longest_prefix\
    \ = prefix\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwheh91n3.lua:24:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\"}\nstack traceback:\n\t/tmp/tmpwheh91n3.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local prefix = \"\
    \"\n  local i = #string\n  while i ~= 0 do\n    prefix = prefix .. string[i]\n\
    \    i = i - 1\n    prefixes[#prefixes + 1] = prefix\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ka80d80.lua:7:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp9ka80d80.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmp9ka80d80.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local prefix = \"\
    \"\n  local i = #string\n  while i do\n    prefix = prefix .. string[i]\n    i\
    \ = i - 1\n    if i ~= 0 then\n      prefixes[#prefixes + 1] = prefix\n    end\n\
    \  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8if5c94h.lua:7:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp8if5c94h.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmp8if5c94h.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local prefix = \"\
    \"\n  local i = #string\n  while i ~= 0 do\n    prefix = prefix .. string[i]\n\
    \    i = i - 1\n    prefixes[#prefixes + 1] = prefix\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ka80d80.lua:7:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp9ka80d80.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmp9ka80d80.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local longest_prefix\
    \ = \"\"\n  local longest_prefix_len = 0\n  for i = 1, #string do\n    local prefix\
    \ = string:sub(i, i)\n    local prefix_len = #prefix\n    if longest_prefix_len\
    \ < prefix_len then\n      longest_prefix_len = prefix_len\n      longest_prefix\
    \ = prefix\n    end\n    prefixes[#prefixes + 1] = prefix\n  end\n  return prefixes,\
    \ longest_prefix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvx0dr5bt.lua:22:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmpvx0dr5bt.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local index = 1\n\
    \  while true do\n    local prefix = string\n    for i = 1, index do\n      prefix\
    \ = prefix .. string[i]\n    end\n    table.insert(prefixes, prefix)\n    index\
    \ = index + 1\n    if index > #string then\n      break\n    end\n  end\n  return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8jcsi0rd.lua:8:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp8jcsi0rd.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmp8jcsi0rd.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[i] = string\n  end\n  local function add_prefixes(prefix)\n\
    \    for i = 1, #prefix do\n      prefixes[#prefixes + 1] = prefix:sub(1, i -\
    \ 1)\n    end\n  end\n  add_prefixes(\"http://\")\n  add_prefixes(\"https://\"\
    )\n  add_prefixes(\"ftp://\")\n  add_prefixes(\"mailto:\")\n  add_prefixes(\"\
    news:\")\n  add_prefixes(\"telnet://\")\n  add_prefixes(\"imap://\")\n  add_prefixes(\"\
    news://\")\n  add_prefixes(\"smb://\")\n  add_prefixes(\"nfs://\")\n  add_prefixes(\"\
    ftps://\")\n  add_prefixes(\"sftp://\")\n  add_prefixes(\"ssh://\")\n  add_prefixes(\"\
    svn+ssh://\")\n  add_prefixes(\"svn+sftp://\")\n  add_prefixes(\"svn+ftp://\"\
    )\n  add_prefixes(\"svn+http:/\")\n  add_prefixes(\"svn+https:/\")\n  add_prefixes(\"\
    svn+file://\")\n  add_prefixes(\"svn+ftp://\")\n  add_prefixes(\"svn+ssh://\"\
    )\n  add_prefixes(\"svn+sftp://\")\n  add_prefixes(\"svn+http:/\")\n  add_prefixes(\"\
    svn+https:/\")\n  add_prefixes(\"svn+file://\")\n  add_prefixes(\"svn+ftp://\"\
    )\n  add_prefixes(\"svn+ssh://\")\n  add_prefixes(\"svn+sftp://\")\n  add_prefixes(\"\
    svn+http:/\")\n  add_prefixes(\"svn+https:/\")\n  add_prefixes(\"svn+file://\"\
    )\n  add_prefixes(\"svn+ftp://\")\n  add_prefixes(\"svn+ssh://\")\n  add_prefixes(\"\
    svn+sftp://\")\n  add_prefixes(\"svn+http:/\")\n  add_prefixes(\"svn+https:/\"\
    )\n  add_prefixes(\"svn+file://\")\n  add_prefixes(\"svn+ftp://\")\n  add_prefixes(\"\
    svn+ssh://\")\n  add_prefixes(\"svn+sftp://\")\n  add_prefixes(\"svn+\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl32zprrb.lua:52: unfinished string near ''"svn+''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[i] = string\n    end\n    for i = 1, #string do\n     \
    \   for j = 1, #string do\n            if string[i] == string[j] then\n      \
    \          prefixes[i] = prefixes[i] .. string[j]\n                break\n   \
    \         end\n        end\n    end\n    return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ivgv6n_.lua:10:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp0ivgv6n_.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmp0ivgv6n_.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[i] = string\n  end\n  local i = #string\n  while i > 0 do\n\
    \    local j = i - 1\n    while j > 0 do\n      prefixes[#prefixes + 1] = string[j..i]\n\
    \      j = j - 1\n    end\n    i = i - 1\n  end\n  return prefixes\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqzarwvs0.lua:23:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpqzarwvs0.lua:23: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp996nfx8y.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmp996nfx8y.lua:14: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    local prefix = string\n    for j = 1, i do\n      prefix = prefix ..\
    \ string[j]\n    end\n    table.insert(prefixes, prefix)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxmnks8tv.lua:7:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpxmnks8tv.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpxmnks8tv.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: -1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local i = #string\n\
    \  while i do\n    prefixes[#prefixes + 1] = string[i]\n    i = i - 1\n  end\n\
    \  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750580
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local pos = 1\n\
    \  while pos <= #string do\n    prefixes[#prefixes + 1] = string\n    pos = pos\
    \ + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthf87hua.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpthf87hua.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    local prefix = string\n    for j = 1, i do\n      prefix = prefix ..\
    \ string[j]\n    end\n    table.insert(prefixes, prefix)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxmnks8tv.lua:7:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpxmnks8tv.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpxmnks8tv.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string[i])\n  end\n  return prefixes\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9ouprxf.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpy9ouprxf.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local prefix = \"\
    \"\n  local i = #string\n  while i do\n    prefix = prefix .. string[i]\n    i\
    \ = i - 1\n    prefixes[#prefixes + 1] = prefix\n  end\n  return prefixes\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa7hlgezo.lua:7:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpa7hlgezo.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpa7hlgezo.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    local prefix = string\n    for j = 1, i do\n      prefix = prefix ..\
    \ string[j]\n    end\n    table.insert(prefixes, prefix)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxmnks8tv.lua:7:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpxmnks8tv.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpxmnks8tv.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp996nfx8y.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmp996nfx8y.lua:14: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local prefix = \"\
    \"\n  local i = #string\n  while i do\n    prefix = prefix .. string[i]\n    i\
    \ = i - 1\n    if i then\n      prefixes[#prefixes + 1] = prefix\n    end\n  end\n\
    \  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxbreox5q.lua:7:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpxbreox5q.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpxbreox5q.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local pos = 1\n\
    \  while pos <= #string do\n    prefixes[#prefixes + 1] = string.sub(string,1,pos)\n\
    \    pos = pos + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local last_index\
    \ = 1\n  local index = 1\n  while index <= #string do\n    local prefix = string[index]:sub(1,\
    \ last_index)\n    table.insert(prefixes, prefix)\n    last_index = index\n  \
    \  index = index + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfk253_v8.lua:7:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpfk253_v8.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpfk253_v8.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: -1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[i] = string\n  end\n  local i = 1\n  while i <= #string do\n\
    \    local j = i - 1\n    while j > 0 and string[i] == string[j] do\n      j =\
    \ j - 1\n    end\n    prefixes[i] = string[i]\n    i = j + 1\n  end\n  return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750580
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp996nfx8y.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmp996nfx8y.lua:14: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local prefix = \"\
    \"\n  for i = 1, #string do\n    prefix = prefix .. string[i]\n    if prefix:len()\
    \ > 0 then\n      table.insert(prefixes, prefix)\n    end\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp095agc5q.lua:6:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp095agc5q.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp095agc5q.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string[i])\n  end\n  return prefixes\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9ouprxf.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpy9ouprxf.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[i] = string\n  end\n  local i = #string\n  while i > 0 do\n\
    \    prefixes[#prefixes + 1] = string\n    i = i - 1\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqkg9sdzv.lua:19:\
    \ expected: \n{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ \n{\n    \"asdfgh\",\n    \"asdfgh\",\n    \"asdfgh\",\n    \"asdfgh\",\n  \
    \  \"asdfgh\",\n    \"asdfgh\",\n    \"asdfgh\",\n    \"asdfgh\",\n    \"asdfgh\"\
    ,\n    \"asdfgh\",\n    \"asdfgh\",\n    \"asdfgh\"\n}\nstack traceback:\n\t/tmp/tmpqkg9sdzv.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local prefix = \"\
    \"\n  local i = #string\n  while i do\n    prefix = prefix .. string[i]\n    i\
    \ = i - 1\n    prefixes[#prefixes + 1] = prefix\n  end\n  return prefixes\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa7hlgezo.lua:7:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpa7hlgezo.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpa7hlgezo.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local last_prefix\
    \ = \"\"\n  for i = 1, #string do\n    local prefix = string:sub(i, i)\n    if\
    \ prefix ~= last_prefix then\n      table.insert(prefixes, prefix)\n      last_prefix\
    \ = prefix\n    end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvcx36e_n.lua:19:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmpvcx36e_n.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local prefix\n \
    \ for prefix in string.gmatch(\"^(.-)$\", \"%1\") do\n    table.insert(prefixes,\
    \ prefix)\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp17w2fjq8.lua:5:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmp17w2fjq8.lua:5: in function\
    \ 'candidate'\n\t/tmp/tmp17w2fjq8.lua:14: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local prefix = \"\
    \"\n  for i = 1, #string do\n    prefix = prefix .. string[i]\n    prefixes[#prefixes\
    \ + 1] = prefix\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvw0yyx_h.lua:6:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpvw0yyx_h.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpvw0yyx_h.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: -1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local longest =\
    \ #string\n  local shortest = 1\n  while shortest <= longest do\n    local prefix\
    \ = string[shortest]\n    local i = shortest\n    while i <= longest and string[i]\
    \ ~= prefix do\n      i = i + 1\n    end\n    if i > longest then\n      break\n\
    \    end\n    prefixes[#prefixes + 1] = prefix\n    shortest = i\n  end\n  return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750580
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local prefix = ''\n\
    \  for i = 1, #string do\n    prefix = prefix .. string[i]\n    prefixes[#prefixes\
    \ + 1] = prefix\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo4hdhmxd.lua:6:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpo4hdhmxd.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpo4hdhmxd.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local pos = 1\n\
    \  while pos <= #string do\n    prefixes[pos] = string\n    pos = pos + 1\n  end\n\
    \  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1kp4zke_.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmp1kp4zke_.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp996nfx8y.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmp996nfx8y.lua:14: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local prefix = ''\n\
    \  local i = 1\n  while i <= #string do\n    prefix = prefix .. string[i]\n  \
    \  i = i + 1\n    prefixes[#prefixes + 1] = prefix\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplg2e7s2j.lua:7:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmplg2e7s2j.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmplg2e7s2j.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[i] = string\n  end\n  local longest = #string\n  local shortest\
    \ = #string\n  while longest > 0 do\n    longest = longest - 1\n    shortest =\
    \ shortest - 1\n    for i = 1, #string do\n      if string[shortest] == string[i]\
    \ then\n        prefixes[longest] = string\n        longest = longest - 1\n  \
    \      shortest = shortest - 1\n      end\n    end\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtpn7fdj.lua:27:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {0=\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"\
    asdfgh\"}\nstack traceback:\n\t/tmp/tmphtpn7fdj.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[i] = string\n    end\n    local longest_prefix = prefixes[1]\n\
    \    for i = 2, #prefixes do\n        local prefix = prefixes[i]\n        local\
    \ prefix_length = #prefix\n        for j = 1, prefix_length do\n            if\
    \ prefix:sub(1, j) == longest_prefix then\n                longest_prefix = prefix:sub(1,\
    \ j)\n            end\n        end\n    end\n    return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96hwr9t4.lua:24:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmp96hwr9t4.lua:24: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local longest_prefix\
    \ = \"\"\n  local longest_prefix_len = 0\n  for i = 1, #string do\n    local prefix\
    \ = string[1:i]\n    local prefix_len = #prefix\n    if prefix_len > longest_prefix_len\
    \ then\n      longest_prefix = prefix\n      longest_prefix_len = prefix_len\n\
    \    end\n    prefixes[#prefixes + 1] = prefix\n  end\n  return prefixes, longest_prefix\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6schj2ux.lua:7: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string[i])\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxzzfsbg.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpnxzzfsbg.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtbodo3g.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpqtbodo3g.lua:14: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(i, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1x6rph6k.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmp1x6rph6k.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  table.sort(prefixes, function(a,\
    \ b)\n    return #a < #b\n  end)\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrckp9fc.lua:17:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpwrckp9fc.lua:17: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  table.sort(prefixes)\n  return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3rxl30n8.lua:15:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmp3rxl30n8.lua:15: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local prefix = \"\
    \"\n  local i = #string\n  while i do\n    prefix = prefix .. string[i]\n    i\
    \ = i - 1\n    prefixes[#prefixes + 1] = prefix\n  end\n  return prefixes\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa7hlgezo.lua:7:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpa7hlgezo.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpa7hlgezo.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local i = 1\n  while\
    \ i <= #string do\n    prefixes[i] = string\n    i = i + 1\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3psw525.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpl3psw525.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[i] = string\n  end\n  for i = #string, 1, -1 do\n    prefixes[i]\
    \ = prefixes[i-1]..string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa7fdpxp5.lua:8:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpa7fdpxp5.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpa7fdpxp5.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[i] = string\n    end\n    for i = 1, #string do\n     \
    \   for j = 1, #string do\n            if string[i] == string[j] then\n      \
    \          prefixes[i] = prefixes[i] .. string[j]\n                prefixes[j]\
    \ = prefixes[j] .. string[i]\n            end\n        end\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprqt3ph3e.lua:10:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmprqt3ph3e.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmprqt3ph3e.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local longest =\
    \ #string\n  local shortest = 1\n  while shortest <= longest do\n    prefixes[#prefixes\
    \ + 1] = string[shortest]\n    shortest = shortest + 1\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj5oprbf2.lua:17:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpj5oprbf2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp996nfx8y.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmp996nfx8y.lua:14: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtbodo3g.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpqtbodo3g.lua:14: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string[i])\n  end\n  return prefixes\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9ouprxf.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpy9ouprxf.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i - 1))\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7mp8ornl.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"}\nstack traceback:\n\t/tmp/tmp7mp8ornl.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local prefix\n \
    \ for prefix in string.gmatch(\"^(.-)$\", \"%1\") do\n    table.insert(prefixes,\
    \ prefix)\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp17w2fjq8.lua:5:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmp17w2fjq8.lua:5: in function\
    \ 'candidate'\n\t/tmp/tmp17w2fjq8.lua:14: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local i = 1\n  while\
    \ i <= #string do\n    prefixes[#prefixes + 1] = string\n    i = i + 1\n  end\n\
    \  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7bzix3t.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpg7bzix3t.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    local pos =\
    \ 1\n    while pos <= #string do\n        local prefix = string\n        for i\
    \ = 1, pos do\n            prefix = prefix .. string[i]\n        end\n       \
    \ table.insert(prefixes, prefix)\n        pos = pos + 1\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9_kez8yb.lua:8:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp9_kez8yb.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmp9_kez8yb.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(i, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1x6rph6k.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmp1x6rph6k.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local prefix = \"\
    \"\n  local i = #string\n  while i do\n    prefix = prefix .. string[i]\n    i\
    \ = i - 1\n    prefixes[#prefixes + 1] = prefix\n  end\n  return prefixes\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa7hlgezo.lua:7:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpa7hlgezo.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpa7hlgezo.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string[i])\n  end\n  return prefixes\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9ouprxf.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpy9ouprxf.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string[i])\n  end\n  return prefixes\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9ouprxf.lua:14:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpy9ouprxf.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local longest =\
    \ #string\n  for i = 1, longest do\n    local prefix = string[1:i]\n    if prefixes[prefix]\
    \ == nil then\n      table.insert(prefixes, prefix)\n    end\n  end\n  return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu1yqfffg.lua:6: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local len = #string\n\
    \  for i = 1, len do\n    prefixes[#prefixes + 1] = string\n  end\n  table.sort(prefixes)\n\
    \  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wppa8eh.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmp9wppa8eh.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[i] = string\n  end\n  local i = 1\n  while i <= #string do\n\
    \    local prefix = string\n    while i <= #string do\n      prefix = prefix ..\
    \ string[i]\n      i = i + 1\n    end\n    prefixes[#prefixes + 1] = prefix\n\
    \  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptg1hlzp3.lua:11:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmptg1hlzp3.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmptg1hlzp3.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local prefix_length\
    \ = 1\n  local i = 1\n  while i <= #string do\n    local prefix = string[1:i]\n\
    \    prefixes[#prefixes + 1] = prefix\n    i = i + 1\n    prefix_length = prefix_length\
    \ + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpndvojwf2.lua:7: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local prefix = \"\
    \"\n  local i = #string\n  while i do\n    prefix = prefix .. string[i]\n    i\
    \ = i - 1\n    if i == 0 then\n      prefixes[#prefixes + 1] = prefix\n    end\n\
    \  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsrnkyk4i.lua:7:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpsrnkyk4i.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpsrnkyk4i.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local longest_prefix\
    \ = \"\"\n  for i = 1, #string do\n    local prefix = string:sub(i, i)\n    if\
    \ prefix ~= longest_prefix then\n      table.insert(prefixes, prefix)\n    end\n\
    \    longest_prefix = prefix\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu588uw96.lua:19:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmpu588uw96.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  local longest =\
    \ #string\n  for i = 1, longest do\n    prefixes[#prefixes + 1] = string[1:i]\n\
    \  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm90igt9p.lua:6: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
