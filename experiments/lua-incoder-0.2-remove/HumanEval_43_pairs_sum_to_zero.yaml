name: HumanEval_43_pairs_sum_to_zero
language: lua
prompt: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
  \ True if there are two distinct elements in the list that\n-- sum to zero, and\
  \ False otherwise.\nlocal function pairs_sum_to_zero(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
  \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
  \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
  \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
  \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
  \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
  \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local pairs = {}\n  for i = 1, #l do\n    pairs[i] = l[i]\n  end\n\
    \  local zeros = 0\n  for i = 1, #pairs do\n    zeros = zeros + pairs[i]\n   \
    \ if zeros == 0 then\n      return true\n    end\n  end\n  return false\nend",
  "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs, {l[i], i})\n  end\n\
    \  table.sort(pairs)\n  local i = 1\n  local j = 1\n  while i < #pairs and j <\
    \ #pairs do\n    if pairs[i].first + pairs[j].first == 0 then\n      return true\n\
    \    end\n    i = pairs[i].second\n    j = pairs[j].second\n  end\n  return false\n\
    end", "  local pairs = {}\n  for i = 1, #l do\n    local pair = l[i]\n    pairs[pair]\
    \ = pairs[pair] or {}\n    pairs[pair][#pairs[pair] + 1] = i\n  end\n  for pair,\
    \ indices in pairs do\n    if #indices > 1 then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local pairs = {}\n  for i = 1, #l do\n    local\
    \ pair = l[i]\n    pairs[pair] = pairs[pair] or 0\n    pairs[pair] = pairs[pair]\
    \ + 1\n  end\n  for pair, count in pairs do\n    if count > 1 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local found = false\n    for j = 1, #pairs\
    \ do\n      if pairs[j] == value then\n        found = true\n        break\n \
    \     end\n    end\n    if not found then\n      table.insert(pairs, value)\n\
    \    end\n  end\n  for i = 1, #pairs do\n    local value = pairs[i]\n    for j\
    \ = i + 1, #pairs do\n      if pairs[j] == value then\n        return true\n \
    \     end\n    end\n  end\n  return false\nend", "  local pairs = {}\n  for i\
    \ = 1, #l do\n    table.insert(pairs, {l[i], i})\n  end\n  table.sort(pairs)\n\
    \  local i = 1\n  local j = 1\n  while i <= #pairs and j <= #pairs do\n    if\
    \ pairs[i].first + pairs[j].first == 0 then\n      return true\n    end\n    if\
    \ pairs[i].first + pairs[j].first > 0 then\n      i = pairs[i].second + 1\n  \
    \  else\n      j = pairs[j].second + 1\n    end\n  end\n  return false\nend",
  "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs, {l[i], i})\n  end\n\
    \  table.sort(pairs)\n  local i = 1\n  local j = 1\n  while i <= #pairs and j\
    \ <= #pairs do\n    if pairs[i].0 ~= pairs[j].0 then\n      return false\n   \
    \ end\n    i = i + 1\n    j = j + 1\n  end\n  return true\nend", "  local pairs\
    \ = {}\n  for i = 1, #l do\n    pairs[i] = l[i]\n  end\n  local zeros = 0\n  for\
    \ i = 1, #pairs do\n    zeros = zeros + pairs[i]\n  end\n  return zeros == 0\n\
    end", "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs, {i = i,\
    \ v = l[i]})\n  end\n  table.sort(pairs)\n  for i = 1, #pairs do\n    local j\
    \ = i - 1\n    local k = i + 1\n    while j and pairs[j].v + pairs[k].v > 0 do\n\
    \      table.insert(pairs, {j = pairs[j].i, k = pairs[k].i, v = pairs[j].v + pairs[k].v})\n\
    \      j = j - 1\n      k = k + 1\n    end\n  end\n  for i = 1, #pairs do\n  \
    \  if pairs[i].v == 0 then\n      return true\n    end\n  end\n  return false\n\
    end", "  local pairs = {}\n  for i = 1, #l do\n    pairs[i] = l[i]\n  end\n  local\
    \ zeros = false\n  for i = 1, #pairs do\n    local j = 1\n    while i + j < #pairs\
    \ and pairs[i + j] == pairs[i] do\n      j = j + 1\n    end\n    if j == 1 then\n\
    \      zeros = true\n    end\n  end\n  return zeros\nend", "  local pairs = {}\n\
    \  for i = 1, #l do\n    local value = l[i]\n    for j = i + 1, #l do\n      if\
    \ value == l[j] then\n        table.insert(pairs, {i, j, value})\n      end\n\
    \    end\n  end\n  local zeros = #pairs\n  return zeros == 0 and pairs == nil\n\
    end", "  local pairs = {}\n  for i = 1, #l do\n    pairs[i] = l[i]\n  end\n  local\
    \ zeros = 0\n  local pair\n  for pair in pairs do\n    zeros = zeros + pair\n\
    \    if zeros == 0 then\n      return true\n    end\n  end\n  return false\nend",
  "  local pairs = {}\n  for i = 1, #l do\n    local value = l[i]\n    local found\
    \ = false\n    for j = 1, #pairs do\n      if pairs[j] == value then\n       \
    \ found = true\n        break\n      end\n    end\n    if not found then\n   \
    \   table.insert(pairs, value)\n    end\n  end\n  local zero = true\n  for i =\
    \ 1, #pairs do\n    if pairs[i] != 0 then\n      zero = false\n    end\n  end\n\
    \  return zero\nend", "  local pairs = {}\n  for i = 1, #l do\n    local value\
    \ = l[i]\n    if pairs[value] then\n      return false\n    end\n    pairs[value]\
    \ = true\n  end\n  return true\nend", "  local pairs = {}\n  for i = 1, #l do\n\
    \    table.insert(pairs, {l[i], i})\n  end\n  table.sort(pairs)\n  for i = 1,\
    \ #pairs do\n    local a = pairs[i][1]\n    local b = pairs[i][2]\n    if a +\
    \ b == 0 then\n      return true\n    end\n  end\n  return false\nend", "  local\
    \ pairs = {}\n  for i = 1, #l do\n    table.insert(pairs, {i, l[i]})\n  end\n\
    \  table.sort(pairs)\n  for i = 1, #pairs do\n    if pairs[i].1 + pairs[i].2 ==\
    \ 0 then\n      return true\n    end\n  end\n  return false\nend", "  local pairs\
    \ = {}\n  for i = 1, #l do\n    table.insert(pairs, {l[i], i})\n  end\n  local\
    \ zeros = 0\n  local pair\n  for pair in pairs do\n    if pair[1] ~= 0 then\n\
    \      zeros = zeros + pair[1]\n    end\n  end\n  return zeros == 0\nend", " \
    \ local pairs = {}\n  for i = 1, #l do\n    local pair = l[i], l[i + 1]\n    pairs[#pairs\
    \ + 1] = pair\n  end\n  local zeros = #pairs\n  for i = 1, #pairs do\n    local\
    \ pair = pairs[i]\n    if pair[1] == 0 then\n      zeros = zeros - 1\n    end\n\
    \  end\n  return zeros == 0\nend", "  local pairs = {}\n  for i = 1, #l do\n \
    \   table.insert(pairs, {l[i], i})\n  end\n  table.sort(pairs)\n  local i = 1\n\
    \  local j = 1\n  while i <= #pairs do\n    local k = pairs[i].1\n    local v\
    \ = pairs[i].2\n    if k + v == 0 then\n      return true\n    end\n    i = k\
    \ + v + 1\n    j = k + v + 2\n  end\n  return false\nend", "  local pairs = {}\n\
    \  for i = 1, #l do\n    local value = l[i]\n    local found = false\n    for\
    \ j = 1, #pairs do\n      if pairs[j][1] == value then\n        found = true\n\
    \        break\n      end\n    end\n    if not found then\n      table.insert(pairs,\
    \ {value, 1})\n    end\n  end\n  for i = 1, #pairs do\n    local value = pairs[i][1]\n\
    \    for j = i + 1, #pairs do\n      if pairs[j][1] == 0 then\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "  local pairs = {}\n\
    \  for i = 1, #l do\n    local value = l[i]\n    if pairs[value] then\n      return\
    \ false\n    end\n    pairs[value] = true\n  end\n  return true\nend", "  local\
    \ pairs = {}\n  for i = 1, #l do\n    table.insert(pairs, {i, l[i]})\n  end\n\
    \  table.sort(pairs)\n  local i = 1\n  while i < #pairs do\n    local j = i +\
    \ 1\n    while j < #pairs do\n      if pairs[i].value == pairs[j].value then\n\
    \        return false\n      end\n      j = j + 1\n    end\n    i = i + 1\n  end\n\
    \  return true\nend", "  local pairs = {}\n  for i = 1, #l do\n    pairs[i] =\
    \ l[i]\n  end\n  local sum = 0\n  for i = 1, #pairs do\n    sum = sum + pairs[i]\n\
    \    if sum == 0 then\n      return true\n    end\n  end\n  return false\nend",
  "  local pairs = {}\n  for i = 1, #l do\n    local value = l[i]\n    if pairs[value]\
    \ then\n      return false\n    else\n      pairs[value] = true\n    end\n  end\n\
    \  return true\nend", "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs,\
    \ {value = l[i], index = i})\n  end\n  table.sort(pairs)\n  for i = 1, #pairs\
    \ do\n    local j = i - 1\n    local k = pairs[i].index\n    while j > 0 and pairs[j].value\
    \ < pairs[k].value do\n      table.insert(pairs, {value = pairs[j].value, index\
    \ = pairs[j].index})\n      j = j - 1\n    end\n    table.insert(pairs, {value\
    \ = pairs[k].value, index = pairs[k].index})\n  end\n  local zero = true\n  for\
    \ i = 1, #pairs do\n    if pairs[i].value == 0 then\n      zero = false\n    end\n\
    \  end\n  return zero\nend", "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs,\
    \ {l[i], i - 1})\n  end\n  table.sort(pairs)\n  local i = 1\n  local j = 1\n \
    \ while i <= #pairs and j <= #pairs do\n    local k = pairs[i].key\n    local\
    \ v = pairs[i].value\n    local w = pairs[j].key\n    local x = pairs[j].value\n\
    \    if v + w == 0 then\n      return true\n    end\n    if v + w > 0 then\n \
    \     i = i + 1\n    else\n      j = j + 1\n    end\n  end\n  return false\nend",
  "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs, {l[i], i - 1})\n\
    \  end\n  local zeros = 0\n  for i = 1, #pairs do\n    local p = pairs[i]\n  \
    \  if p[1] > zeros then\n      return false\n    end\n    zeros = zeros + p[1]\n\
    \  end\n  return true\nend", "  local pairs = {}\n  for i = 1, #l do\n    local\
    \ value = l[i]\n    if pairs[value] then\n      return false\n    end\n    pairs[value]\
    \ = true\n  end\n  return true\nend", "  local pairs = {}\n  for i = 1, #l do\n\
    \    local value = l[i]\n    if pairs[value] ~= nil then\n      return false\n\
    \    end\n    pairs[value] = true\n  end\n  return true\nend", "  local pairs\
    \ = {}\n  for i = 1, #l do\n    table.insert(pairs, {l[i], i})\n  end\n  table.sort(pairs)\n\
    \  local i = 1\n  while i < #pairs do\n    local j = i + 1\n    while j < #pairs\
    \ do\n      if pairs[i].first + pairs[j].first == 0 then\n        return true\n\
    \      else\n        j = j + 1\n      end\n    end\n    i = i + 1\n  end\n  return\
    \ false\nend", "  local pairs = {}\n  for i = 1, #l do\n    local pair = l[i],\
    \ l[i - 1] -- pair is pair with index i and i - 1\n    if pair[1] ~= pair[2] then\
    \ -- if pair is not a pair with index i and i - 1\n      table.insert(pairs, pair)\n\
    \    end\n  end\n  local zeros = #pairs\n  for i = 1, #pairs do\n    local pair\
    \ = pairs[i]\n    if pair[1] == pair[2] then -- if pair is a pair with index i\
    \ and i - 1\n      zeros = zeros - 1\n    end\n  end\n  return zeros == 0\nend",
  "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs, {l[i], i})\n  end\n\
    \  table.sort(pairs)\n  local i = 1\n  while i <= #pairs do\n    local j = i +\
    \ 1\n    while j <= #pairs do\n      if pairs[i].first + pairs[j].first == 0 then\n\
    \        return true\n      end\n      if pairs[i].first + pairs[j].first > 0\
    \ then\n        j = j + 1\n      else\n        i = i + 1\n      end\n    end\n\
    \    i = i + 1\n  end\n  return false\nend", "  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i]\n    pairs[pair] = pairs[pair] or 0\n    pairs[pair]\
    \ = pairs[pair] + 1\n  end\n  for pair, count in pairs do\n    if count == 2 then\n\
    \      return true\n    end\n  end\n  return false\nend", "  local pairs = {}\n\
    \  for i = 1, #l do\n    pairs[i] = l[i]\n  end\n  local zeros = 0\n  for i =\
    \ 1, #pairs do\n    zeros = zeros + pairs[i]\n  end\n  return zeros == 0\nend",
  "  local pairs = {}\n  for i = 1, #l do\n    pairs[i] = l[i]\n  end\n  local zero\
    \ = 0\n  for i = 1, #pairs do\n    local pair = pairs[i]\n    if pair == zero\
    \ then\n      return false\n    end\n    zero = pair + zero\n  end\n  return true\n\
    end", "  local pairs = {}\n  for i = 1, #l do\n    local value = l[i]\n    pairs[value]\
    \ = true\n  end\n  for i = 1, #l do\n    local value = l[i]\n    if pairs[value]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  local pairs\
    \ = {}\n  for i = 1, #l do\n    table.insert(pairs, {l[i], i - 1})\n  end\n  local\
    \ zeros = 0\n  for _, v in pairs do\n    if v == 1 then\n      zeros = zeros +\
    \ 1\n    end\n  end\n  return zeros == #pairs\nend", "  local pairs = {}\n  for\
    \ i = 1, #l do\n    table.insert(pairs, {i, l[i]})\n  end\n  local zeros = 0\n\
    \  for _, v in pairs do\n    if v == 0 then\n      zeros = zeros + 1\n    end\n\
    \  end\n  return zeros == #pairs\nend", "  local pairs = {}\n  for i = 1, #l do\n\
    \    local value = l[i]\n    for j = i + 1, #l do\n      pairs[value] = true\n\
    \    end\n  end\n  for key, value in pairs do\n    if value == true then\n   \
    \   return true\n    end\n  end\n  return false\nend", "  local pairs = {}\n \
    \ for i = 1, #l do\n    table.insert(pairs, {i, l[i]})\n  end\n  local zeros =\
    \ 0\n  for _, p in pairs do\n    zeros = zeros + p[1]\n  end\n  return zeros ==\
    \ 0\nend", "  local pairs = {}\n  for i = 1, #l do\n    local pair = l[i]\n  \
    \  pairs[pair] = pairs[pair] or 0\n    pairs[pair] = pairs[pair] + 1\n  end\n\
    \  for pair, count in pairs do\n    if count > 1 then\n      return false\n  \
    \  end\n  end\n  return true\nend", "  local pairs = {}\n  for i = 1, #l do\n\
    \    pairs[i] = l[i]\n  end\n  local zeros = false\n  for i = 1, #pairs do\n \
    \   local j = i + 1\n    while j < #pairs and pairs[j] + pairs[i] == 0 do\n  \
    \    zeros = true\n      break\n      j = j + 1\n    end\n  end\n  return zeros\n\
    end", "  local pairs = {}\n  for i = 1, #l do\n    local value = l[i]\n    for\
    \ j = i + 1, #l do\n      if value == l[j] then\n        table.insert(pairs, {i,\
    \ j, value})\n      end\n    end\n  end\n  local count = 0\n  for _, v in pairs\
    \ do\n    count = count + 1\n  end\n  return count == 1\nend", "  local pairs\
    \ = {}\n  for i = 1, #l do\n    local value = l[i]\n    for j = i + 1, #l do\n\
    \      if value == l[j] then\n        table.insert(pairs, {i, j, value})\n   \
    \   end\n    end\n  end\n  local zeros = {}\n  for _, v in pairs do\n    table.insert(zeros,\
    \ v)\n  end\n  return #zeros == 0\nend", "  local pairs = {}\n  for i = 1, #l\
    \ do\n    local value = l[i]\n    if pairs[value] then\n      return false\n \
    \   end\n    pairs[value] = true\n  end\n  return true\nend", "  local pairs =\
    \ {}\n  for i = 1, #l do\n    local value = l[i]\n    pairs[value] = true\n  end\n\
    \  for i = 1, #l do\n    local value = l[i]\n    if pairs[value] then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local pairs = {}\n  for i = 1,\
    \ #l do\n    pairs[i] = l[i]\n  end\n  local zeros = 0\n  for i = 1, #pairs do\n\
    \    zeros = zeros + pairs[i]\n  end\n  return zeros == 0\nend", "  local pairs\
    \ = {}\n  for i = 1, #l do\n    pairs[i] = l[i]\n  end\n  local zero = 0\n  local\
    \ pair\n  for pair in pairs do\n    zero = zero + pair\n    if zero > 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local pairs = {}\n\
    \  for i = 1, #l do\n    pairs[i] = l[i]\n  end\n  local zeros = false\n  for\
    \ i = 1, #pairs do\n    local zero = true\n    for j = 1, #pairs do\n      if\
    \ pairs[j] == pairs[i] then\n        zero = false\n        break\n      end\n\
    \    end\n    if zero then\n      zeros = true\n      break\n    end\n  end\n\
    \  return zeros\nend", "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs,\
    \ {l[i], i})\n  end\n  table.sort(pairs)\n  for i = 1, #pairs do\n    local a\
    \ = pairs[i].1\n    local b = pairs[i].2\n    if a + b == 0 then\n      return\
    \ true\n    end\n  end\n  return false\nend", "  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    for j = i + 1, #l do\n      if value == l[j]\
    \ then\n        table.insert(pairs, {i, j, value})\n      end\n    end\n  end\n\
    \  local zeros = {}\n  for i = 1, #pairs do\n    local pair = pairs[i]\n    local\
    \ zero = pair[2]\n    if zeros[zero] == nil then\n      zeros[zero] = pair\n \
    \   else\n      table.insert(zeros[zero], pair)\n    end\n  end\n  for zero, pairs\
    \ in pairs(zeros) do\n    local first = pairs[1]\n    local last = pairs[#pairs]\n\
    \    if first == last then\n      return false\n    end\n  end\n  return true\n\
    end", "  local pairs = {}\n  for i = 1, #l do\n    pairs[i] = l[i]\n  end\n  local\
    \ sum = 0\n  for i = 1, #pairs do\n    sum = sum + pairs[i]\n    if sum > 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local pairs = {}\n\
    \  for i = 1, #l do\n    pairs[i] = l[i]\n  end\n  local zeros = 0\n  for i =\
    \ 1, #pairs do\n    zeros = zeros + pairs[i]\n  end\n  return zeros == 0\nend",
  "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs, {l[i], i})\n  end\n\
    \  local zeros = 0\n  for _, v in pairs do\n    zeros = zeros + v\n  end\n  return\
    \ zeros == #pairs\nend", "  local pairs = {}\n  for i = 1, #l do\n    local value\
    \ = l[i]\n    for j = i + 1, #l do\n      if value == l[j] then\n        table.insert(pairs,\
    \ {i, j, value})\n      end\n    end\n  end\n  local zeros = false\n  for _, v\
    \ in pairs do\n    if v[2] ~= 0 then\n      zeros = true\n    end\n  end\n  return\
    \ zeros\nend", "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs,\
    \ {l[i], i})\n  end\n  table.sort(pairs)\n  local i = 1\n  while i < #pairs do\n\
    \    local j = i + 1\n    while j < #pairs do\n      if pairs[i].first + pairs[j].first\
    \ == 0 then\n        return true\n      end\n      j = j + 1\n    end\n    i =\
    \ i + 1\n  end\n  return false\nend", "  local pairs = {}\n  for i = 1, #l do\n\
    \    local value = l[i]\n    if pairs[value] then\n      return false\n    end\n\
    \    pairs[value] = true\n  end\n  return true\nend", "  local pairs = {}\n  for\
    \ i = 1, #l do\n    table.insert(pairs, {l[i], i})\n  end\n  table.sort(pairs)\n\
    \  local i = 1\n  local j = 1\n  while i < #pairs and j < #pairs do\n    if pairs[i].first\
    \ + pairs[j].first == 0 then\n      return true\n    end\n    i = pairs[i].second\n\
    \    j = pairs[j].second\n  end\n  return false\nend", "  local pairs = {}\n \
    \ for i = 1, #l do\n    local value = l[i]\n    for j = i + 1, #l do\n      if\
    \ value == l[j] then\n        table.insert(pairs, {i, j, value})\n      end\n\
    \    end\n  end\n  local zero = false\n  for _, v in pairs do\n    if v[2] ~=\
    \ 0 then\n      zero = true\n    end\n  end\n  return zero\nend", "  local pairs\
    \ = {}\n  for i = 1, #l do\n    local value = l[i]\n    for j = i + 1, #l do\n\
    \      pairs[value] = true\n    end\n  end\n  local zero = false\n  for key, value\
    \ in pairs do\n    if value == true then\n      zero = true\n    end\n  end\n\
    \  return zero\nend", "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs,\
    \ {i = i, v = l[i]})\n  end\n  table.sort(pairs, function(a, b) return a.v > b.v\
    \ end)\n  local i = 1\n  local j = 1\n  local sum = 0\n  while i <= #pairs do\n\
    \    sum = sum + pairs[i].v\n    if sum == 0 then\n      return false\n    end\n\
    \    if i == #pairs then\n      break\n    end\n    j = j + 1\n    i = i + 1\n\
    \  end\n  return true\nend", "  local pairs = {}\n  for i = 1, #l do\n    local\
    \ value = l[i]\n    for j = i + 1, #l do\n      if value == l[j] then\n      \
    \  table.insert(pairs, {i, j, value})\n      end\n    end\n  end\n  local zero\
    \ = {}\n  for i = 1, #pairs do\n    local pair = pairs[i]\n    local value = pair[2]\n\
    \    if value == 0 then\n      table.insert(zero, pair)\n    end\n  end\n  return\
    \ #zero == 1 and pairs[1][1] == pairs[#pairs][1]\nend", "  local pairs = {}\n\
    \  for i = 1, #l do\n    table.insert(pairs, {i, l[i]})\n  end\n  local pairs_with_sum\
    \ = {}\n  for i = 1, #pairs do\n    local pair = pairs[i]\n    local sum = pair[1]\
    \ + pair[2]\n    if sum == 0 then\n      table.insert(pairs_with_sum, pair)\n\
    \    end\n  end\n  return #pairs_with_sum > 0\nend", "  local pairs = {}\n  for\
    \ i = 1, #l do\n    local value = l[i]\n    local found = false\n    for j = 1,\
    \ #pairs do\n      if pairs[j][1] == value then\n        found = true\n      \
    \  break\n      end\n    end\n    if not found then\n      table.insert(pairs,\
    \ value)\n    end\n  end\n  for i = 1, #pairs do\n    local value = pairs[i][1]\n\
    \    for j = i + 1, #pairs do\n      if pairs[j][1] == value then\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "  local pairs = {}\n\
    \  for i = 1, #l do\n    local value = l[i]\n    if pairs[value] then return false\
    \ end\n    pairs[value] = true\n  end\n  return true\nend", "  local pairs = {}\n\
    \  for i = 1, #l do\n    table.insert(pairs, {i, l[i]})\n  end\n  local zeros\
    \ = 0\n  for _, p in pairs do\n    zeros = zeros + p\n  end\n  for _, p in pairs\
    \ do\n    if zeros == 0 then\n      return false\n    end\n    zeros = zeros -\
    \ p\n  end\n  return true\nend", "  local pairs = {}\n  for i = 1, #l do\n   \
    \ local pair = l[i], l[i - 1] -- pair is pair with higher index\n    if pair[1]\
    \ ~= 0 then -- pair[1] is always non-zero\n      table.insert(pairs, pair)\n \
    \   end\n  end\n  local zeros = #pairs\n  if zeros == 1 then\n    return pairs[1][1]\
    \ == 0\n  else\n    return false\n  end\nend", "  local pairs = {}\n  for i =\
    \ 1, #l do\n    local value = l[i]\n    for j = i + 1, #l do\n      if value ==\
    \ l[j] then\n        table.insert(pairs, {i, j, value})\n      end\n    end\n\
    \  end\n  local zeros = false\n  for _, v in pairs do\n    if v[2] ~= 0 then\n\
    \      zeros = true\n    end\n  end\n  return zeros\nend", "  local pairs = {}\n\
    \  for i = 1, #l do\n    local value = l[i]\n    local found = false\n    for\
    \ j = 1, #pairs do\n      if pairs[j][1] == value then\n        found = true\n\
    \        break\n      end\n    end\n    if not found then\n      table.insert(pairs,\
    \ value)\n    end\n  end\n  for i = 1, #pairs do\n    local value = pairs[i]\n\
    \    if value == 0 then\n      return true\n    end\n  end\n  return false\nend",
  "  local pairs = {}\n  for i = 1, #l do\n    local value = l[i]\n    local found\
    \ = false\n    for j = 1, #pairs do\n      if pairs[j] == value then\n       \
    \ found = true\n        break\n      end\n    end\n    if not found then\n   \
    \   table.insert(pairs, value)\n    end\n  end\n  for i = 1, #pairs do\n    local\
    \ value = pairs[i]\n    for j = i + 1, #pairs do\n      if pairs[j] == value then\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  local\
    \ pairs = {}\n  for i = 1, #l do\n    table.insert(pairs, {i, l[i]})\n  end\n\
    \  local zeros = 0\n  for _, v in pairs do\n    zeros = zeros + v\n  end\n  return\
    \ zeros == 0\nend", "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs,\
    \ {l[i], i})\n  end\n  table.sort(pairs)\n  local i = 1\n  while i <= #pairs do\n\
    \    local j = i + 1\n    while j <= #pairs do\n      if pairs[i].first + pairs[j].first\
    \ == 0 then\n        return true\n      elseif pairs[i].first + pairs[j].first\
    \ > 0 then\n        i = j\n      else\n        j = j + 1\n      end\n    end\n\
    \    i = i + 1\n  end\n  return false\nend", "  local pairs = {}\n  for i = 1,\
    \ #l do\n    table.insert(pairs, {i, l[i]})\n  end\n  local zeros = 0\n  for _,\
    \ v in pairs do\n    if v == 0 then\n      zeros = zeros + 1\n    end\n  end\n\
    \  return zeros == 2\nend", "  local pairs = {}\n  for i = 1, #l do\n    local\
    \ pair = l[i]\n    pairs[pair] = pairs[pair] or 0\n    pairs[pair] = pairs[pair]\
    \ + 1\n  end\n  for pair, count in pairs do\n    if count > 1 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    for j = i + 1, #l do\n      local other =\
    \ l[j]\n      if value == 0 and other == 0 then\n        return true\n      elseif\
    \ value == 0 and other ~= 0 then\n        return false\n      elseif value ==\
    \ other then\n        table.insert(pairs, i)\n        table.insert(pairs, j)\n\
    \      end\n    end\n  end\n  return #pairs == 0\nend", "  local pairs = {}\n\
    \  for i = 1, #l do\n    table.insert(pairs, {l[i], i - 1})\n  end\n  local zeros\
    \ = #pairs\n  for i = 1, #pairs do\n    local j = pairs[i][1]\n    if j > i then\n\
    \      pairs[i][1] = pairs[j][1]\n      pairs[j][1] = (i - 1)\n    end\n  end\n\
    \  local zeros_found = 0\n  for i = 1, #pairs do\n    if pairs[i][1] == i then\n\
    \      zeros_found = zeros_found + 1\n    end\n  end\n  return zeros_found ==\
    \ zeros\nend", "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs,\
    \ {i, l[i]})\n  end\n  local zeros = 0\n  for _, v in pairs do\n    zeros = zeros\
    \ + v\n  end\n  return zeros == 0\nend", "  local pairs = {}\n  for i = 1, #l\
    \ do\n    table.insert(pairs, {l[i], i - 1})\n  end\n  local zeros = 0\n  for\
    \ i = 1, #pairs do\n    local pair = pairs[i]\n    if pair[1] == 0 then\n    \
    \  zeros = zeros + 1\n    end\n  end\n  return zeros == #pairs\nend", "  local\
    \ pairs = {}\n  for i = 1, #l do\n    pairs[l[i]] = true\n  end\n  for i = 1,\
    \ #l do\n    if pairs[l[i]] then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  local pairs = {}\n  for i = 1, #l do\n    local pair = l[i]\n\
    \    if pairs[pair] ~= nil then\n      return false\n    end\n    pairs[pair]\
    \ = true\n  end\n  return true\nend", "  local pairs = {}\n  for i = 1, #l do\n\
    \    pairs[i] = l[i]\n  end\n  local zeros = 0\n  for i = 1, #pairs do\n    zeros\
    \ = zeros + pairs[i]\n  end\n  return zeros == 0\nend", "  local pairs = {}\n\
    \  for i = 1, #l do\n    local pair = l[i]\n    if pairs[pair] then\n      return\
    \ false\n    else\n      pairs[pair] = true\n    end\n  end\n  return true\nend",
  "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs, {l[i], i})\n  end\n\
    \  local zeros = {}\n  for i = 1, #pairs do\n    table.insert(zeros, 0)\n  end\n\
    \  local zeros_count = 0\n  for i = 1, #pairs do\n    local zero = pairs[i].0\n\
    \    local index = pairs[i].1\n    zeros[zero] = true\n    zeros_count = zeros_count\
    \ + 1\n  end\n  for i = 1, #pairs do\n    local zero = pairs[i].0\n    local index\
    \ = pairs[i].1\n    if zeros[zero] then\n      zeros[zero] = false\n      zeros_count\
    \ = zeros_count - 1\n    end\n  end\n  if zeros_count > 0 then\n    return false\n\
    \  else\n    return true\n  end\nend", "  local pairs = {}\n  for i = 1, #l do\n\
    \    table.insert(pairs, {l[i], i})\n  end\n  table.sort(pairs)\n  local i = 1\n\
    \  while i <= #pairs do\n    local j = i + 1\n    while j <= #pairs do\n     \
    \ if pairs[i].first + pairs[j].first == 0 then\n        return true\n      elseif\
    \ pairs[i].first + pairs[j].first > 0 then\n        j = j + 1\n      else\n  \
    \      i = i + 1\n      end\n    end\n    i = i + 1\n  end\n  return false\nend",
  "  local pairs = {}\n  for i = 1, #l do\n    local pair = l[i]\n    if pairs[pair]\
    \ then\n      return false\n    else\n      pairs[pair] = true\n    end\n  end\n\
    \  return true\nend", "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs,\
    \ {l[i], i - 1})\n  end\n  local zeros = false\n  for i = 1, #pairs do\n    local\
    \ a = pairs[i].a\n    local b = pairs[i].b\n    if a + b == 0 then\n      zeros\
    \ = true\n    end\n  end\n  return zeros\nend", "  local pairs = {}\n  for i =\
    \ 1, #l do\n    local value = l[i]\n    if pairs[value] then return false end\n\
    \    pairs[value] = true\n  end\n  return true\nend", "  local pairs = {}\n  for\
    \ i = 1, #l do\n    table.insert(pairs, {l[i], i})\n  end\n  local zeros = false\n\
    \  for i = 1, #pairs do\n    local first = pairs[i][1]\n    local second = pairs[i][2]\n\
    \    if first > second then\n      zeros = true\n      break\n    end\n  end\n\
    \  return zeros\nend", "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs,\
    \ {value = l[i], index = i})\n  end\n  table.sort(pairs)\n  local i = 1\n  local\
    \ j = 1\n  while i <= #pairs and j <= #pairs do\n    if pairs[i].value == pairs[j].value\
    \ then\n      i = i + 1\n      j = j + 1\n    else\n      if pairs[i].value ==\
    \ 0 then\n        return true\n      else\n        return false\n      end\n \
    \   end\n  end\n  return false\nend", "  local pairs = {}\n  for i = 1, #l do\n\
    \    local value = l[i]\n    for j = i + 1, #l do\n      if value == l[j] then\n\
    \        table.insert(pairs, {i, j, value})\n      end\n    end\n  end\n  local\
    \ zero = false\n  for _, v in pairs do\n    if zero == true then\n      return\
    \ false\n    end\n    zero = zero + v\n  end\n  return true\nend", "  local pairs\
    \ = {}\n  for i = 1, #l do\n    table.insert(pairs, {i = i, v = l[i]})\n  end\n\
    \  table.sort(pairs)\n  local i = 1\n  local j = 1\n  local sum = 0\n  while i\
    \ <= #pairs do\n    sum = sum + pairs[i].v\n    if sum == 0 then\n      return\
    \ true\n    end\n    if i == #pairs then\n      break\n    end\n    j = j + 1\n\
    \    i = i + 1\n  end\n  return false\nend", "  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local found = false\n    for j = 1, #pairs\
    \ do\n      if pairs[j][1] == value then\n        found = true\n        break\n\
    \      end\n    end\n    if not found then\n      table.insert(pairs, value)\n\
    \    end\n  end\n  for i = 1, #pairs do\n    local value = pairs[i][1]\n    local\
    \ found = false\n    for j = i + 1, #pairs do\n      if pairs[j][1] == value then\n\
    \        found = true\n        break\n      end\n    end\n    if not found then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local pairs = {}\n\
    \  for i = 1, #l do\n    table.insert(pairs, {i, l[i]})\n  end\n  local zeros\
    \ = {}\n  for i = 1, #pairs do\n    local zero = true\n    for j = 1, #pairs do\n\
    \      if pairs[j].0 ~= pairs[i].0 then\n        zero = false\n        break\n\
    \      end\n    end\n    if zero then\n      table.insert(zeros, pairs[i].0)\n\
    \    end\n  end\n  return #zeros == 2\nend", "  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    for j = i + 1, #l do\n      if value == l[j]\
    \ then\n        table.insert(pairs, {i, j, value})\n      end\n    end\n  end\n\
    \  local pair_count = #pairs\n  return pair_count == 2\nend", "  local pairs =\
    \ {}\n  for i = 1, #l do\n    local value = l[i]\n    pairs[value] = true\n  end\n\
    \  for i = 1, #l do\n    local value = l[i]\n    if pairs[value] then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local pairs = {}\n  for i = 1,\
    \ #l do\n    table.insert(pairs, {l[i], i})\n  end\n  table.sort(pairs)\n  for\
    \ i = 1, #pairs do\n    if pairs[i].0 ~= pairs[i - 1].0 then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local pairs = {}\n  for i = 1, #l do\n\
    \    table.insert(pairs, {l[i], i - 1})\n  end\n  table.sort(pairs)\n  local zeros\
    \ = pairs[#pairs]\n  for i = 1, #pairs do\n    if pairs[i].0 == zeros then\n \
    \     return true\n    end\n  end\n  return false\nend", "  local pairs = {}\n\
    \  for i = 1, #l do\n    local value = l[i]\n    for j = i + 1, #l do\n      local\
    \ other_value = l[j]\n      if value == 0 and other_value == 0 then\n        return\
    \ true\n      elseif value == other_value then\n        return false\n      elseif\
    \ value == 0 then\n        table.insert(pairs, other_value)\n      elseif other_value\
    \ == 0 then\n        table.insert(pairs, value)\n      else\n        local pair\
    \ = {}\n        table.insert(pair, value)\n        table.insert(pair, other_value)\n\
    \        table.insert(pairs, pair)\n      end\n    end\n  end\n  return #pairs\
    \ == 0\nend", "  local pairs = {}\n  for i = 1, #l do\n    local value = l[i]\n\
    \    local found = false\n    for j = 1, #pairs do\n      if pairs[j][1] == value\
    \ then\n        found = true\n        break\n      end\n    end\n    if not found\
    \ then\n      table.insert(pairs, value)\n    end\n  end\n  for i = 1, #pairs\
    \ do\n    if pairs[i][1] == pairs[i - 1][1] then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs,\
    \ {l[i], i})\n  end\n  table.sort(pairs)\n  for i = 1, #pairs do\n    if pairs[i].0\
    \ == pairs[i + 1].0 then\n      return false\n    end\n  end\n  return true\n\
    end", "  local pairs = {}\n  for i = 1, #l do\n    local pair = l[i]\n    pairs[pair]\
    \ = pairs[pair] or 0\n    pairs[pair] = pairs[pair] + 1\n  end\n  for pair, count\
    \ in pairs do\n    if count > 1 then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  local pairs = {}\n  for i = 1, #l do\n    local value = l[i]\n\
    \    pairs[value] = true\n  end\n  for i = 1, #l do\n    local value = l[i]\n\
    \    if pairs[value] then\n      return false\n    end\n  end\n  return true\n\
    end", "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs, {l[i],\
    \ i})\n  end\n  table.sort(pairs)\n  for i = 1, #pairs do\n    if pairs[i].0 ==\
    \ pairs[i+1].0 then\n      return false\n    end\n  end\n  return true\nend",
  "  local pairs = {}\n  for i = 1, #l do\n    local value = l[i]\n    for j = i +\
    \ 1, #l do\n      local other = l[j]\n      if value == 0 and other == 0 then\n\
    \        return true\n      elseif value == 0 and other ~= 0 then\n        return\
    \ false\n      elseif value == other then\n        table.insert(pairs, i)\n  \
    \      table.insert(pairs, j)\n      end\n    end\n  end\n  return #pairs == 0\n\
    end", "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs, {i, l[i]})\n\
    \  end\n  local zeros = 0\n  for _, p in pairs do\n    zeros = zeros + p[1]\n\
    \  end\n  for _, p in pairs do\n    if p[1] == zeros then\n      return true\n\
    \    end\n  end\n  return false\nend", "  local pairs = {}\n  for i = 1, #l do\n\
    \    table.insert(pairs, {l[i], i - 1})\n  end\n  local zeros = pairs:map(function(pair)\n\
    \    return pair[1]:zero()\n  end)\n  return #zeros == 0\nend", "  local pairs\
    \ = {}\n  for i = 1, #l do\n    local value = l[i]\n    for j = i + 1, #l do\n\
    \      local other = l[j]\n      if value == 0 and other == 0 then\n        return\
    \ true\n      elseif value == 0 and other ~= 0 then\n        return false\n  \
    \    elseif value == other then\n        pairs[#pairs + 1] = {value, other}\n\
    \      end\n    end\n  end\n  return false\nend", "  local pairs = {}\n  for i\
    \ = 1, #l do\n    local value = l[i]\n    for j = i + 1, #l do\n      if value\
    \ == l[j] then\n        table.insert(pairs, {i, j, value})\n      end\n    end\n\
    \  end\n  local pair_count = 0\n  for _, p in ipairs(pairs) do\n    pair_count\
    \ = pair_count + 1\n  end\n  return pair_count == #pairs\nend", "  local pairs\
    \ = {}\n  for i = 1, #l do\n    local value = l[i]\n    for j = i + 1, #l do\n\
    \      if value == l[j] then\n        table.insert(pairs, {i, j, value})\n   \
    \   end\n    end\n  end\n  local zeros = false\n  for _, v in pairs do\n    if\
    \ v[2] == 0 then\n      zeros = true\n    end\n  end\n  return zeros\nend", " \
    \ local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs, {i, l[i]})\n \
    \ end\n  local zeros = 0\n  for _, v in pairs do\n    if v == 0 then\n      zeros\
    \ = zeros + 1\n    end\n  end\n  return zeros == #pairs\nend", "  local pairs\
    \ = {}\n  for i = 1, #l do\n    table.insert(pairs, {l[i], i})\n  end\n  table.sort(pairs)\n\
    \  local i = 1\n  local j = 1\n  while i <= #pairs do\n    local k = pairs[i].1\n\
    \    local v = pairs[i].2\n    if k + v == 0 then\n      return true\n    end\n\
    \    i = k + v + 1\n    j = k + v + 2\n  end\n  return false\nend", "  local pairs\
    \ = {}\n  for i = 1, #l do\n    pairs[i] = l[i]\n  end\n  local zeros = pairs:map(function(pair)\n\
    \    return pair[1] == 0\n  end)\n  return #zeros == 0\nend", "  local pairs =\
    \ {}\n  for i = 1, #l do\n    local value = l[i]\n    if pairs[value] then return\
    \ false end\n    pairs[value] = true\n  end\n  return true\nend", "  local pairs\
    \ = {}\n  for i = 1, #l do\n    local value = l[i]\n    if pairs[value] then\n\
    \      return false\n    end\n    pairs[value] = true\n  end\n  return true\n\
    end", "  local pairs = {}\n  for i = 1, #l do\n    pairs[i] = l[i]\n  end\n  local\
    \ zeros = pairs.zeros\n  local pairs_size = #pairs\n  local i = 0\n  while i <\
    \ pairs_size do\n    local j = i + 1\n    while j < pairs_size do\n      local\
    \ pair = pairs[i]\n      local pair_zeros = pairs[pair].zeros\n      local pair_zeros_size\
    \ = #pair_zeros\n      local j = 0\n      while j < pair_zeros_size do\n     \
    \   local zero = pair_zeros[j]\n        if pairs[pair][zero] == 0 then\n     \
    \     zeros[zero] = true\n          pairs[pair][zero] = pair\n          pairs[pair].zeros\
    \ = pairs\n          pairs[pair].zeros_size = pairs_size\n          pairs[pair].pairs\
    \ = pairs\n          pairs[pair].pairs_size = pairs_size\n          pairs[pair].pair\
    \ = pair\n          pairs[pair].pair_size = pairs_size\n          pairs[pair].i\
    \ = i\n          pairs[pair].j = j\n          pairs[pair].pairs = pairs\n    \
    \      pairs[pair].pairs_size = pairs_size\n          pairs[pair].pair = pair\n\
    \          pairs[pair].pair_size = pairs_size\n          pairs[pair].i = i\n \
    \         pairs[pair].j = j\n          pairs[pair].pairs = pairs\n          pairs[pair].pairs_size\
    \ = pairs_size\n          pairs[pair].pair = pair\n          pairs[pair].pair_size\
    \ = pairs_size\n          pairs[pair].i = i\n          pairs[pair].j = j\n   \
    \       pairs[pair].pairs = pairs\n          pairs[pair].pairs_size = pairs_size\n\
    \          pairs[pair].pair = pair\n          pairs[pair].pair_size = pairs_size\n\
    \          pairs[pair].i = i\n          pairs[pair].j = j\n          pairs[pair].pairs\
    \ = pairs\n          pairs[pair].pairs_size = pairs_size\n          pairs[pair].pair\
    \ = pair\n          pairs[pair].pair_size = pairs_size\n          pairs[pair].i\
    \ = i\n          pairs[pair].j = j\n          pairs[pair].pairs = pairs\n    \
    \      pairs[pair].pairs_size = pairs_size\n          pairs[pair].pair = pair\n\
    \          pairs[pair].pair_size = pairs_size\n          pairs[pair].i = i\n \
    \         pairs[pair].j = j\n          pairs[pair].pairs = pairs\n          pairs[pair].pairs_size\
    \ = pairs_size", "  local pairs = {}\n  for i = 1, #l do\n    local value = l[i]\n\
    \    for j = i + 1, #l do\n      local other_value = l[j]\n      if value == 0\
    \ and other_value == 0 then\n        return true\n      elseif value == other_value\
    \ then\n        return false\n      elseif value == 0 then\n        table.insert(pairs,\
    \ other_value)\n      else\n        table.insert(pairs, value)\n      end\n  \
    \  end\n  end\n  return #pairs == 0\nend", "  local pairs = {}\n  for i = 1, #l\
    \ do\n    local value = l[i]\n    for j = i + 1, #l do\n      local other_value\
    \ = l[j]\n      if value == 0 and other_value == 0 then\n        return true\n\
    \      elseif value == other_value then\n        pairs[value] = true\n      end\n\
    \    end\n  end\n  return false\nend", "  local pairs = {}\n  for i = 1, #l do\n\
    \    local value = l[i]\n    for j = i + 1, #l do\n      local other = l[j]\n\
    \      if value == 0 and other == 0 then\n        return true\n      elseif value\
    \ == 0 and other ~= 0 then\n        return false\n      elseif value ~= 0 and\
    \ other == 0 then\n        return false\n      elseif value == 0 and other ==\
    \ 0 then\n        return false\n      else\n        pairs[value] = true\n    \
    \  end\n    end\n  end\n  return false\nend", "  local pairs = {}\n  for i = 1,\
    \ #l do\n    pairs[i] = l[i]\n  end\n  table.sort(pairs)\n  for i = 1, #pairs\
    \ do\n    if pairs[i] > 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs, {i, l[i]})\n\
    \  end\n  table.sort(pairs)\n  local i = 1\n  while i < #pairs do\n    local j\
    \ = i + 1\n    while j < #pairs and pairs[j].0 ~= pairs[i].0 do\n      j = j +\
    \ 1\n    end\n    if j - i > 1 then\n      return false\n    end\n    i = j\n\
    \  end\n  return true\nend", "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs,\
    \ {i, l[i]})\n  end\n  local zeros = false\n  for i = 1, #pairs do\n    local\
    \ j = i - 1\n    local k = i + 1\n    local sum = 0\n    while j >= 0 and k <\
    \ #pairs do\n      sum = sum + pairs[j][1]\n      j = j - 1\n      k = k + 1\n\
    \    end\n    if sum == 0 then\n      zeros = true\n    end\n  end\n  return zeros\n\
    end", "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs, {i, l[i]})\n\
    \  end\n  local zeros = {}\n  for i = 1, #pairs do\n    table.insert(zeros, 0)\n\
    \  end\n  for i = 1, #pairs do\n    for j = 1, #pairs do\n      if pairs[i].value\
    \ == pairs[j].value then\n        zeros[pairs[i].value] = zeros[pairs[j].value]\
    \ + 1\n      end\n    end\n  end\n  for i = 1, #pairs do\n    if zeros[pairs[i].value]\
    \ == 2 then\n      return true\n    end\n  end\n  return false\nend", "  local\
    \ pairs = {}\n  for i = 1, #l do\n    local value = l[i]\n    local found = false\n\
    \    for j = 1, #pairs do\n      if pairs[j][1] == value then\n        found =\
    \ true\n        break\n      end\n    end\n    if not found then\n      table.insert(pairs,\
    \ {value, 1})\n    end\n  end\n  for i = 1, #pairs do\n    local value = pairs[i][1]\n\
    \    for j = i + 1, #pairs do\n      if pairs[j][1] == value then\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "  local pairs = {}\n\
    \  for i = 1, #l do\n    table.insert(pairs, {i, l[i]})\n  end\n  local zeros\
    \ = 0\n  for _, p in pairs do\n    if p[1] == 0 then\n      zeros = zeros + 1\n\
    \    end\n  end\n  return zeros == #pairs\nend", "  local pairs = {}\n  for i\
    \ = 1, #l do\n    table.insert(pairs, {i, l[i]})\n  end\n  local zeros = false\n\
    \  for i = 1, #pairs do\n    local j = i\n    while j > 1 do\n      local k =\
    \ j - 1\n      if pairs[k][1] + pairs[k][2] ~= 0 then\n        zeros = true\n\
    \        break\n      end\n      pairs[k] = pairs[k]\n      j = k\n    end\n \
    \ end\n  return zeros\nend", "  local pairs = {}\n  for i = 1, #l do\n    local\
    \ pair = l[i], l[i + 1]\n    if pairs[pair] then return false end\n    pairs[pair]\
    \ = true\n  end\n  return true\nend", "  local pairs = {}\n  for i = 1, #l do\n\
    \    table.insert(pairs, {i, l[i]})\n  end\n  local zeros = 0\n  for _, p in pairs\
    \ do\n    if p[1] == 0 then\n      zeros = zeros + 1\n    end\n  end\n  return\
    \ zeros == #pairs\nend", "  local pairs = {}\n  for i = 1, #l do\n    local value\
    \ = l[i]\n    for j = i + 1, #l do\n      if value == l[j] then\n        table.insert(pairs,\
    \ {i, j, value})\n      end\n    end\n  end\n  local zero = true\n  for _, v in\
    \ pairs do\n    zero = false and zero\n  end\n  return zero\nend", "  local pairs\
    \ = {}\n  for i = 1, #l do\n    local value = l[i]\n    local found = false\n\
    \    for j = 1, #pairs do\n      if pairs[j][1] == value then\n        found =\
    \ true\n        break\n      end\n    end\n    if not found then\n      table.insert(pairs,\
    \ value)\n    end\n  end\n  for i = 1, #pairs do\n    local value = pairs[i]\n\
    \    if value == 0 then\n      return true\n    end\n  end\n  return false\nend",
  "  local pairs = {}\n  for i = 1, #l do\n    pairs[i] = l[i]\n  end\n  local zeros\
    \ = 0\n  for i = 1, #pairs do\n    zeros = zeros + pairs[i]\n  end\n  return zeros\
    \ == 0\nend", "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs,\
    \ {i, l[i]})\n  end\n  local zeros = 0\n  for _, p in pairs do\n    zeros = zeros\
    \ + p[1]\n  end\n  return zeros == 0\nend", "  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    for j = i + 1, #l do\n      if value == l[j]\
    \ then\n        table.insert(pairs, {i, j, value})\n      end\n    end\n  end\n\
    \  local zeros = {}\n  for _, v in pairs do\n    if zeros[v.i] then\n      return\
    \ false\n    end\n    zeros[v.i] = true\n  end\n  return true\nend", "  local\
    \ pairs = {}\n  for i = 1, #l do\n    local value = l[i]\n    local found = false\n\
    \    for j = 1, #pairs do\n      if pairs[j][1] == value then\n        found =\
    \ true\n        break\n      end\n    end\n    if not found then\n      table.insert(pairs,\
    \ value)\n    end\n  end\n  local zero = true\n  for i = 1, #pairs do\n    if\
    \ pairs[i][1] != 0 then\n      zero = false\n    end\n  end\n  return zero\nend",
  "  local pairs = {}\n  for i = 1, #l do\n    local v = l[i]\n    pairs[v] = pairs[v]\
    \ or {}\n    pairs[v][#pairs[v] + 1] = i\n  end\n  for i = 1, #pairs do\n    for\
    \ j = 1, #pairs[i] do\n      local k = pairs[i][j]\n      if k == 1 then\n   \
    \     return true\n      end\n    end\n  end\n  return false\nend", "  local pairs\
    \ = {}\n  for i = 1, #l do\n    table.insert(pairs, {i, l[i]})\n  end\n  local\
    \ zeros = pairs:map(function(pair)\n    return pair[1]:zero()\n  end)\n  return\
    \ #zeros == 0\nend", "  local pairs = {}\n  for i = 1, #l do\n    pairs[i] = l[i]\n\
    \  end\n  local zeros = 0\n  for i = 1, #pairs do\n    zeros = zeros + pairs[i]\n\
    \    if zeros == 0 then\n      return true\n    end\n  end\n  return false\nend",
  "  local pairs = {}\n  for i = 1, #l do\n    local value = l[i]\n    local found\
    \ = false\n    for j = 1, #pairs do\n      if pairs[j][1] == value then\n    \
    \    found = true\n        break\n      end\n    end\n    if not found then\n\
    \      table.insert(pairs, {value, i})\n    end\n  end\n  for i = 1, #pairs do\n\
    \    local value = pairs[i][1]\n    local index = pairs[i][2]\n    if value ==\
    \ 0 then\n      return true\n    end\n  end\n  return false\nend", "  local pairs\
    \ = {}\n  for i = 1, #l do\n    local pair = l[i]\n    pairs[pair] = pairs[pair]\
    \ or 0\n    pairs[pair] = pairs[pair] + 1\n  end\n  for pair, count in pairs do\n\
    \    if count > 1 then\n      return false\n    end\n  end\n  return true\nend",
  "  local pairs = {}\n  for i = 1, #l do\n    local value = l[i]\n    pairs[value]\
    \ = true\n  end\n  local zero = true\n  for i = 1, #l do\n    local value = l[i]\n\
    \    if pairs[value] then\n      zero = false\n    end\n  end\n  return zero\n\
    end", "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs, {l[i],\
    \ i})\n  end\n  table.sort(pairs)\n  local i = 1\n  while i <= #pairs do\n   \
    \ if pairs[i-1][1] == pairs[i][1] then\n      return false\n    end\n    i = i\
    \ + 1\n  end\n  return true\nend", "  local pairs = {}\n  for i = 1, #l do\n \
    \   table.insert(pairs, {l[i], i})\n  end\n  table.sort(pairs)\n  local i = 1\n\
    \  local j = 1\n  while i <= #pairs do\n    local k = pairs[i].1\n    local v\
    \ = pairs[i].2\n    while j <= #pairs do\n      local w = pairs[j].1\n      local\
    \ x = pairs[j].2\n      if v + w == 0 then\n        return true\n      elseif\
    \ v + w > 0 then\n        j = j + 1\n      else\n        i = i + 1\n        j\
    \ = j + 1\n      end\n    end\n    i = i + 1\n  end\n  return false\nend", " \
    \ local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs, {l[i], i})\n \
    \ end\n  table.sort(pairs)\n  local i = 1\n  while i < #pairs do\n    if pairs[i].0\
    \ ~= pairs[i-1].0 then\n      return false\n    end\n    i = i + 1\n  end\n  return\
    \ true\nend", "  local pairs = {}\n  for i = 1, #l do\n    pairs[i] = l[i]\n \
    \ end\n  local zeros = 0\n  for i = 1, #pairs do\n    zeros = zeros + pairs[i]\n\
    \  end\n  return zeros == 0\nend", "  local pairs = {}\n  for i = 1, #l do\n \
    \   local pair = l[i]\n    pairs[pair] = pairs[pair] or {}\n    pairs[pair][#pairs[pair]\
    \ + 1] = i\n  end\n  for pair, indices in pairs do\n    if #indices > 1 then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local pairs = {}\n\
    \  for i = 1, #l do\n    local value = l[i]\n    local found = false\n    for\
    \ j = 1, #pairs do\n      if pairs[j][1] == value then\n        found = true\n\
    \        break\n      end\n    end\n    if not found then\n      table.insert(pairs,\
    \ {value, 1})\n    end\n  end\n  for i = 1, #pairs do\n    if pairs[i][1] > 1\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  local pairs\
    \ = {}\n  for i = 1, #l do\n    pairs[i] = l[i]\n  end\n  local sum = 0\n  for\
    \ i = 1, #pairs do\n    sum = sum + pairs[i]\n  end\n  return sum == 0\nend",
  "  local pairs = {}\n  for i = 1, #l do\n    local value = l[i]\n    for j = i +\
    \ 1, #l do\n      if value == l[j] then\n        table.insert(pairs, {i, j, value})\n\
    \      end\n    end\n  end\n  local result = true\n  for _, pair in pairs do\n\
    \    if pair[2] ~= 0 then\n      result = false\n    end\n  end\n  return result\n\
    end", "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs, {i = i,\
    \ v = l[i]})\n  end\n  table.sort(pairs)\n  local i = 1\n  local j = 1\n  while\
    \ i <= #pairs do\n    local k = i - 1\n    while j >= i and pairs[j].v > pairs[k].v\
    \ do\n      j = j - 1\n    end\n    if j >= i then\n      local v = pairs[i].v\n\
    \      pairs[i].v = pairs[j].v\n      pairs[j].v = v\n      i = i + 1\n      j\
    \ = j + 1\n    end\n  end\n  local k = 1\n  local sum = 0\n  for i = 1, #pairs\
    \ do\n    sum = sum + pairs[i].v\n    if sum == 0 then\n      return true\n  \
    \  end\n    k = k + 1\n  end\n  return false\nend", "  local pairs = {}\n  for\
    \ i = 1, #l do\n    table.insert(pairs, {value = l[i], count = 1, index = i})\n\
    \  end\n  table.sort(pairs, function(a, b) return a.value < b.value end)\n  local\
    \ last_value = pairs[1].value -- The last element in the list.\n  for i = 2, #pairs\
    \ do\n    if pairs[i].value == last_value + 1 then\n      pairs[i].count = pairs[i].count\
    \ + 1\n    else\n      if pairs[i].count > 1 then\n        return false\n    \
    \  else\n        last_value = pairs[i].value\n        pairs[i].count = 1\n   \
    \   end\n    end\n  end\n  return true\nend", "  local pairs = {}\n  for i = 1,\
    \ #l do\n    table.insert(pairs, {l[i], i})\n  end\n  table.sort(pairs)\n  local\
    \ i = 1\n  local j = 1\n  while i < #pairs and j < #pairs do\n    if pairs[i].first\
    \ + pairs[j].first == 0 then\n      return true\n    end\n    i = pairs[i].second\n\
    \    j = pairs[j].second\n  end\n  return false\nend", "  local pairs = {}\n \
    \ for i = 1, #l do\n    local value = l[i]\n    for j = i + 1, #l do\n      if\
    \ value == l[j] then\n        table.insert(pairs, {i, j, value})\n      end\n\
    \    end\n  end\n  local zero = false\n  for _, v in pairs do\n    if v[2] ~=\
    \ 0 then\n      zero = true\n    end\n  end\n  return zero\nend", "  local pairs\
    \ = {}\n  for i = 1, #l do\n    local value = l[i]\n    for j = i + 1, #l do\n\
    \      if value == l[j] then\n        table.insert(pairs, {i, j, value})\n   \
    \   end\n    end\n  end\n  local zero = true\n  for _, v in pairs do\n    zero\
    \ = false and zero\n  end\n  return zero\nend", "  local pairs = {}\n  for i =\
    \ 1, #l do\n    local value = l[i]\n    if pairs[value] then return false end\n\
    \    pairs[value] = true\n  end\n  return true\nend", "  local pairs = {}\n  for\
    \ i = 1, #l do\n    local value = l[i]\n    for j = i + 1, #l do\n      if value\
    \ == l[j] then\n        table.insert(pairs, {i, j, value})\n      end\n    end\n\
    \  end\n  local zeros = {}\n  for i = 1, #pairs do\n    local pair = pairs[i]\n\
    \    if pair[2] ~= 0 then\n      table.insert(zeros, pair)\n    end\n  end\n \
    \ return #zeros > 0\nend", "  local pairs = {}\n  for i = 1, #l do\n    pairs[i]\
    \ = l[i]\n  end\n  local zeros = 0\n  local pair\n  for pair in pairs do\n   \
    \ if pairs[pair] == 0 then\n      zeros = zeros + 1\n    end\n  end\n  return\
    \ zeros == #pairs\nend", "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs,\
    \ {l[i], i - 1})\n  end\n  local zeros = 0\n  for i = 1, #pairs do\n    local\
    \ p = pairs[i]\n    if p[1] == 0 then\n      zeros = zeros + 1\n    end\n  end\n\
    \  return zeros == #pairs\nend", "  local pairs = {}\n  for i = 1, #l do\n   \
    \ local value = l[i]\n    if pairs[value] then return false end\n    pairs[value]\
    \ = true\n  end\n  return true\nend", "  local pairs = {}\n  for i = 1, #l do\n\
    \    pairs[i] = l[i]\n  end\n  local zeros = 0\n  for i = 1, #pairs do\n    zeros\
    \ = zeros + pairs[i]\n  end\n  return zeros == 0\nend", "  local pairs = {}\n\
    \  for i = 1, #l do\n    table.insert(pairs, {l[i], i})\n  end\n  local zeros\
    \ = 0\n  for i = 1, #pairs do\n    local p = pairs[i]\n    if p[1] == 0 then\n\
    \      zeros = zeros + 1\n    end\n  end\n  return zeros == #pairs\nend", "  local\
    \ pairs = {}\n  for i = 1, #l do\n    pairs[i] = l[i]\n  end\n  local zeros =\
    \ 0\n  for i = 1, #pairs do\n    zeros = zeros + pairs[i]\n    if zeros == 0 then\n\
    \      return true\n    end\n  end\n  return false\nend", "  local pairs = {}\n\
    \  for i = 1, #l do\n    table.insert(pairs, {l[i], i})\n  end\n  table.sort(pairs)\n\
    \  for i = 1, #pairs do\n    local first = pairs[i][1]\n    local second = pairs[i][2]\n\
    \    if first + second == 0 then\n      return true\n    end\n  end\n  return\
    \ false\nend", "  local pairs = {}\n  for i = 1, #l do\n    local value = l[i]\n\
    \    if pairs[value] then return false end\n    pairs[value] = true\n  end\n \
    \ return true\nend", "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs,\
    \ {value = l[i], index = i})\n  end\n  table.sort(pairs)\n  local i = 1\n  local\
    \ j = 1\n  local k = 1\n  while i <= #pairs and j <= #pairs do\n    if pairs[i].value\
    \ == pairs[j].value then\n      k = k + 1\n      i = i + 1\n      j = j + 1\n\
    \    else\n      if k > 1 then\n        return false\n      else\n        k =\
    \ k\n        i = pairs[i].index\n        j = pairs[j].index\n      end\n    end\n\
    \  end\n  return k > 1\nend", "  local pairs = {}\n  for i = 1, #l do\n    local\
    \ pair = l[i]\n    pairs[pair] = pairs[pair] or 0\n    pairs[pair] = pairs[pair]\
    \ + 1\n    if pairs[pair] == 2 then\n      return true\n    end\n  end\n  return\
    \ false\nend", "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs,\
    \ {i, l[i]})\n  end\n  table.sort(pairs)\n  for i = 1, #pairs do\n    if pairs[i].1\
    \ + pairs[i].2 == 0 then\n      return true\n    end\n  end\n  return false\n\
    end", "  local pairs = {}\n  for i = 1, #l do\n    local pair = l[i]\n    pairs[pair]\
    \ = pairs[pair] or 0\n    pairs[pair] = pairs[pair] + 1\n  end\n  for pair, count\
    \ in pairs do\n    if count > 1 then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  local pairs = {}\n  for i = 1, #l do\n    local value = l[i]\n\
    \    local found = false\n    for j = 1, #pairs do\n      if pairs[j][1] == value\
    \ then\n        found = true\n        break\n      end\n    end\n    if not found\
    \ then\n      table.insert(pairs, value)\n    end\n  end\n  for i = 1, #pairs\
    \ do\n    if pairs[i][1] == pairs[i - 1][1] then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs,\
    \ {l[i], i})\n  end\n  table.sort(pairs)\n  local i = 1\n  local j = 1\n  while\
    \ i < #pairs and j < #pairs do\n    local a = pairs[i].0\n    local b = pairs[j].0\n\
    \    if a + b == 0 then\n      return true\n    end\n    i = pairs[i].1\n    j\
    \ = pairs[j].1\n  end\n  return false\nend", "  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i]\n    pairs[pair] = pairs[pair] or 0\n    pairs[pair]\
    \ = pairs[pair] + 1\n  end\n  for pair, count in pairs do\n    if count > 1 then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local pairs = {}\n\
    \  for i = 1, #l do\n    table.insert(pairs, {l[i], i})\n  end\n  local zeros\
    \ = 0\n  for i = 1, #pairs do\n    local p = pairs[i]\n    if p[1] == 0 then\n\
    \      zeros = zeros + 1\n    end\n  end\n  return zeros == #pairs\nend", "  local\
    \ pairs = {}\n  for i = 1, #l do\n    table.insert(pairs, {l[i], i})\n  end\n\
    \  local zeros = false\n  for i = 1, #pairs do\n    local v = pairs[i].v\n   \
    \ if v == 0 then\n      zeros = true\n      break\n    end\n  end\n  return zeros\n\
    end", "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs, {l[i],\
    \ i})\n  end\n  local zeros = 0\n  for _, v in pairs do\n    if v[1] == 0 then\n\
    \      zeros = zeros + 1\n    end\n  end\n  return zeros == 2\nend", "  local\
    \ pairs = {}\n  for i = 1, #l do\n    table.insert(pairs, {i = i, v = l[i]})\n\
    \  end\n  local zeros = 0\n  for _, v in pairs do\n    if v.v == 0 then\n    \
    \  zeros = zeros + 1\n    end\n  end\n  return zeros == #pairs\nend", "  local\
    \ pairs = {}\n  for i = 1, #l do\n    table.insert(pairs, {i, l[i]})\n  end\n\
    \  local zeros = 0\n  for _, p in pairs do\n    if p[1] == 0 then\n      zeros\
    \ = zeros + 1\n    end\n  end\n  return zeros == #pairs\nend", "  local pairs\
    \ = {}\n  for i = 1, #l do\n    table.insert(pairs, {l[i], i - 1})\n  end\n  local\
    \ zeros = false\n  for i = 1, #pairs do\n    local first = pairs[i][1]\n    local\
    \ second = pairs[i][2]\n    if first > second then\n      table.insert(pairs,\
    \ {first, second - 1})\n    elseif first < second then\n      table.insert(pairs,\
    \ {second - 1, first})\n    end\n  end\n  for i = 1, #pairs do\n    local first\
    \ = pairs[i][1]\n    local second = pairs[i][2]\n    if first == second then\n\
    \      zeros = true\n    end\n  end\n  return zeros\nend", "  local pairs = {}\n\
    \  for i = 1, #l do\n    table.insert(pairs, {i, l[i]})\n  end\n  local zeros\
    \ = false\n  for i = 1, #pairs do\n    local j = i\n    while j > 1 do\n     \
    \ if pairs[j].0 > pairs[j-1].0 then\n        zeros = true\n        break\n   \
    \   end\n      table.insert(pairs, {j, pairs[j].0})\n      j = pairs[j].1\n  \
    \  end\n  end\n  return zeros\nend", "  local pairs = {}\n  for i = 1, #l do\n\
    \    local v = l[i]\n    pairs[v] = pairs[v] or {}\n    pairs[v][#pairs[v] + 1]\
    \ = i\n  end\n  for i = 1, #pairs do\n    local v = pairs[i]\n    if #v > 1 then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local pairs = {}\n\
    \  for i = 1, #l do\n    local value = l[i]\n    local found = false\n    for\
    \ j = 1, #pairs do\n      if pairs[j][1] == value then\n        found = true\n\
    \        break\n      end\n    end\n    if not found then\n      table.insert(pairs,\
    \ {value, 1})\n    end\n  end\n  for i = 1, #pairs do\n    local value = pairs[i][1]\n\
    \    for j = i + 1, #pairs do\n      if pairs[j][1] == value then\n        pairs[j]\
    \ = nil\n        break\n      end\n    end\n  end\n  local zero = true\n  for\
    \ i = 1, #pairs do\n    if pairs[i] == nil then\n      zero = false\n    end\n\
    \  end\n  return zero\nend", "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs,\
    \ {l[i], i})\n  end\n  table.sort(pairs)\n  local i = 1\n  local j = 1\n  while\
    \ i <= #pairs and j <= #pairs do\n    if pairs[i].first + pairs[j].first == 0\
    \ then\n      return true\n    end\n    i = pairs[i].second\n    j = pairs[j].second\n\
    \  end\n  return false\nend", "  local pairs = {}\n  for i = 1, #l do\n    local\
    \ value = l[i]\n    for j = i + 1, #l do\n      local other = l[j]\n      if value\
    \ == 0 and other == 0 then\n        return true\n      elseif value == 0 and other\
    \ ~= 0 then\n        return false\n      elseif value == other then\n        pairs[#pairs\
    \ + 1] = {value, other}\n      end\n    end\n  end\n  return false\nend", "  local\
    \ pairs = {}\n  for i = 1, #l do\n    local value = l[i]\n    for j = i + 1, #l\
    \ do\n      local other_value = l[j]\n      if value == 0 and other_value == 0\
    \ then\n        return true\n      elseif value == other_value then\n        pairs[#pairs\
    \ + 1] = {value, other_value}\n      end\n    end\n  end\n  return false\nend",
  "  local pairs = {}\n  for i = 1, #l do\n    local value = l[i]\n    for j = i +\
    \ 1, #l do\n      local other_value = l[j]\n      if value == 0 and other_value\
    \ == 0 then\n        return true\n      elseif value == 0 and other_value ~= 0\
    \ then\n        return false\n      elseif other_value == 0 and value ~= 0 then\n\
    \        return false\n      elseif other_value == 0 and value == 0 then\n   \
    \     table.insert(pairs, j)\n      end\n    end\n  end\n  return #pairs == 0\n\
    end", "  local pairs = {}\n  for i = 1, #l do\n    local pair = l[i]\n    pairs[pair]\
    \ = pairs[pair] or 0\n    pairs[pair] = pairs[pair] + 1\n    if pairs[pair] ==\
    \ 2 then\n      return true\n    end\n  end\n  return false\nend", "  local pairs\
    \ = {}\n  for i = 1, #l do\n    table.insert(pairs, {i, l[i]})\n  end\n  local\
    \ zeros = {}\n  for i = 1, #pairs do\n    table.insert(zeros, 0)\n  end\n  for\
    \ i = 1, #pairs do\n    for j = 1, #pairs do\n      if pairs[i].value == pairs[j].value\
    \ then\n        zeros[pairs[i].value] = zeros[pairs[i].value] + 1\n      end\n\
    \    end\n  end\n  for i = 1, #pairs do\n    if zeros[pairs[i].value] == 1 then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local pairs = {}\n\
    \  for i = 1, #l do\n    table.insert(pairs, {l[i], i})\n  end\n  table.sort(pairs)\n\
    \  local i = 1\n  while i <= #pairs do\n    local j = i\n    while j <= #pairs\
    \ do\n      if pairs[j][1] + pairs[j][2] ~= 0 then\n        return false\n   \
    \   end\n      j = j + 1\n    end\n    i = i + 1\n  end\n  return true\nend",
  "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs, {l[i], i - 1})\n\
    \  end\n  local zeros = 0\n  for i = 1, #pairs do\n    local pair = pairs[i]\n\
    \    if pair[1] == 0 then\n      zeros = zeros + 1\n    end\n  end\n  return zeros\
    \ == #pairs\nend", "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs,\
    \ {l[i], i})\n  end\n  table.sort(pairs)\n  local i = 1\n  while i < #pairs do\n\
    \    local j = i + 1\n    while j < #pairs do\n      if pairs[i].first + pairs[j].first\
    \ == 0 then\n        return true\n      end\n      j = j + 1\n    end\n    i =\
    \ i + 1\n  end\n  return false\nend", "  local pairs = {}\n  for i = 1, #l do\n\
    \    pairs[i] = l[i]\n  end\n  local zero = 0\n  for i = 1, #pairs do\n    local\
    \ p = pairs[i]\n    if p == zero then\n      return false\n    end\n    zero =\
    \ zero + p\n  end\n  return true\nend", "  local pairs = {}\n  for i = 1, #l do\n\
    \    table.insert(pairs, {l[i], i - 1})\n  end\n  table.sort(pairs)\n  local i\
    \ = 1\n  while i <= #pairs do\n    local j = i + 1\n    while j <= #pairs do\n\
    \      if pairs[i].first + pairs[j].first == 0 then\n        return true\n   \
    \   elseif pairs[i].first + pairs[j].first > 0 then\n        i = j\n      else\n\
    \        j = j + 1\n      end\n    end\n    i = i + 1\n  end\n  return false\n\
    end", "  local pairs = {}\n  for i = 1, #l do\n    table.insert(pairs, {i = i,\
    \ v = l[i]})\n  end\n  table.sort(pairs)\n  for i = 1, #pairs do\n    local j\
    \ = i\n    while j > 0 and pairs[j].v + pairs[j-1].v == 0 do\n      pairs[j] =\
    \ pairs[j-1]\n      j = j - 1\n    end\n  end\n  local count = 0\n  for _, v in\
    \ pairs do\n    count = count + 1\n  end\n  return count == 2\nend", "  local\
    \ pairs = {}\n  for i = 1, #l do\n    local value = l[i]\n    for j = i + 1, #l\
    \ do\n      if value == l[j] then\n        table.insert(pairs, {i, j, value})\n\
    \      end\n    end\n  end\n  local count = 0\n  for _, v in pairs do\n    count\
    \ = count + 1\n  end\n  return count == 1\nend", "  local pairs = {}\n  for i\
    \ = 1, #l do\n    local value = l[i]\n    local found = false\n    for j = 1,\
    \ #pairs do\n      if pairs[j][1] == value then\n        found = true\n      \
    \  break\n      end\n    end\n    if not found then\n      table.insert(pairs,\
    \ {value, 1})\n    end\n  end\n  for i = 1, #pairs do\n    local value = pairs[i][1]\n\
    \    for j = i + 1, #pairs do\n      if pairs[j][1] == value then\n        pairs[j]\
    \ = nil\n      end\n    end\n  end\n  local zero = true\n  for i = 1, #pairs do\n\
    \    if pairs[i] == nil then\n      zero = false\n    end\n  end\n  return zero\n\
    end", "  local pairs = {}\n  for i = 1, #l do\n    local value = l[i]\n    for\
    \ j = i + 1, #l do\n      if value == l[j] then\n        table.insert(pairs, {i,\
    \ j, value})\n      end\n    end\n  end\n  local zero = {}\n  for i = 1, #pairs\
    \ do\n    table.insert(zero, pairs[i].value)\n  end\n  return #zero ~= #pairs\n\
    end", "  local pairs = {}\n  for i = 1, #l do\n    local value = l[i]\n    local\
    \ found = false\n    for j = 1, #pairs do\n      if pairs[j][1] == value then\n\
    \        found = true\n        break\n      end\n    end\n    if not found then\n\
    \      table.insert(pairs, {value, i})\n    end\n  end\n  for i = 1, #pairs do\n\
    \    local value = pairs[i][1]\n    local index = pairs[i][2]\n    local found\
    \ = false\n    for j = i + 1, #pairs do\n      if pairs[j][1] == value then\n\
    \        found = true\n        break\n      end\n    end\n    if not found then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local pairs = {}\n\
    \  for i = 1, #l do\n    local v = l[i]\n    if pairs[v] then\n      return false\n\
    \    end\n    pairs[v] = true\n  end\n  return true\nend", "  local pairs = {}\n\
    \  for i = 1, #l do\n    local value = l[i]\n    for j = i + 1, #l do\n      local\
    \ other_value = l[j]\n      if value == 0 and other_value == 0 then\n        return\
    \ true\n      elseif value == other_value then\n        pairs[value] = true\n\
    \      end\n    end\n  end\n  return false\nend", "  local pairs = {}\n  for i\
    \ = 1, #l do\n    table.insert(pairs, {l[i], i - 1})\n  end\n  local zeros = 0\n\
    \  for _, p in pairs do\n    zeros = zeros + p\n  end\n  return zeros == #pairs\n\
    end", "  local pairs = {}\n  for i = 1, #l do\n    local value = l[i]\n    pairs[value]\
    \ = true\n  end\n  for i = 1, #l do\n    local value = l[i]\n    if pairs[value]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  local pairs\
    \ = {}\n  for i = 1, #l do\n    table.insert(pairs, {value = l[i], index = i})\n\
    \  end\n  table.sort(pairs)\n  local i = 1\n  local j = 1\n  while i <= #pairs\
    \ and j <= #pairs do\n    if pairs[i].value == pairs[j].value then\n      i =\
    \ i + 1\n      j = j + 1\n    else\n      if pairs[i].value > pairs[j].value then\n\
    \        return false\n      else\n        j = j + 1\n      end\n    end\n  end\n\
    \  return true\nend", "  local pairs = {}\n  for i = 1, #l do\n    pairs[i] =\
    \ l[i]\n  end\n  local zeros = 0\n  for i = 1, #pairs do\n    zeros = zeros +\
    \ pairs[i]\n  end\n  return zeros == 0\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
