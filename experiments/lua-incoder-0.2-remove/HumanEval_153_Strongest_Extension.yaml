name: HumanEval_153_Strongest_Extension
language: lua
prompt: "-- You will be given the name of a class (a string) and a list of extensions.\n\
  -- The extensions are to be used to load additional classes to the class. The\n\
  -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  -- letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n-- You should find the strongest extension and return a string in this \n--\
  \ format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
  \ with the same strength, you should\n-- choose the one that comes first in the\
  \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
  \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n--\
  \ return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n-- (its strength is -1).\n-- Example:\nlocal function Strongest_Extension(class_name,\
  \ extensions)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
  \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
  \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
  \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
  \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n    lu.assertEquals(candidate('K',\
  \ {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n    lu.assertEquals(candidate('__HAHA',\
  \ {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n    lu.assertEquals(candidate('YameRore',\
  \ {'HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-'}), 'YameRore.okIWILL123')\n\
  \    lu.assertEquals(candidate('finNNalLLly', {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n\
  \    lu.assertEquals(candidate('_', {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp',\
  \ {'671235', 'Bb'}), 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal strongest_extension = {}\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1))\n\t\tlocal strength = cap -\
    \ sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest_extension, extension)\n\
    \t\tend\n\tend\n\ttable.sort(strongest_extension, function(a, b) return a:upper()\
    \ - b:upper() end)\n\treturn class_name .. \".\" .. table.unpack(strongest_extension,\
    \ 1)\nend", "   local strongest = {}\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1, #extension))\n      local\
    \ strength = cap - sm\n      if strength > 0 then\n         table.insert(strongest,\
    \ extension)\n      end\n   end\n   if #strongest == 1 then\n      return class_name\
    \ .. '.' .. strongest[1]\n   else\n      local strengths = {}\n      for _, extension\
    \ in ipairs(strongest) do\n         table.insert(strengths, strength)\n      end\n\
    \      table.sort(strengths)\n      return class_name .. '.' .. strongest[1]\n\
    \   end\nend", "   local strongest = {}\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n      local strength = cap\
    \ - sm\n      if strength > 0 then\n         table.insert(strongest, extension)\n\
    \      end\n   end\n   if #strongest == 1 then\n      return class_name .. \"\
    .\" .. strongest[1]\n   else\n      local strongest_strength = #strongest\n  \
    \    for _, extension in ipairs(strongest) do\n         strongest_strength = strongest_strength\
    \ - #extension\n      end\n      if strongest_strength > 0 then\n         return\
    \ class_name .. \".\" .. strongest[1]\n      else\n         return class_name\n\
    \      end\n   end\nend", "  local strongest_extension = {}\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extension, function(a, b)\
    \ return a:lower() > b:lower() end)\n  return class_name .. '.' .. table.concat(strongest_extension,\
    \ '.')\nend", "   local strongest_extension = nil\n   local extension_strengths\
    \ = {}\n   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local cap_strength = #cap - #sm\n      if not extension_strengths[cap_strength]\
    \ then\n         extension_strengths[cap_strength] = extension\n      else\n \
    \        if extension_strengths[cap_strength] < cap_strength then\n          \
    \  extension_strengths[cap_strength] = extension\n         end\n      end\n  \
    \ end\n   for _, strength in ipairs(extension_strengths) do\n      if strongest_extension\
    \ == nil or strength > strongest_extension:upper():byte() then\n         strongest_extension\
    \ = extension_strengths[strength]\n      end\n   end\n   return strongest_extension\n\
    end", "   local strongest_extension = {}\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n      local strength = cap\
    \ - sm\n      if strength > 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      elseif strength == 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      elseif strength < 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      end\n   end\n   if #strongest_extension > 1 then\n      table.sort(strongest_extension,\
    \ function(a, b) return strength - tonumber(a) - tonumber(b) end)\n   end\n  \
    \ return class_name .. \".\" .. table.concat(strongest_extension, \" \")\nend",
  "   local cap_strength = #class_name:upper():bytes()\n   local sm_strength = #class_name:lower():bytes()\n\
    \   local cap_extensions = {}\n   local sm_extensions = {}\n   for _, extension\
    \ in ipairs(extensions) do\n      local cap_extension = extension:upper()\n  \
    \    local sm_extension = extension:lower()\n      local cap_strength_extension\
    \ = cap_extension:bytes()\n      local sm_strength_extension = sm_extension:bytes()\n\
    \      if cap_strength_extension > cap_strength then\n         cap_strength =\
    \ cap_strength_extension\n         cap_extensions[#cap_extensions + 1] =\n   \
    \         cap_extension\n      elseif sm_strength_extension > sm_strength then\n\
    \         sm_strength = sm_strength_extension\n         sm_extensions[#sm_extensions\
    \ + 1] =\n            sm_extension\n      end\n   end\n   if cap_strength == sm_strength\
    \ then\n      return class_name .. cap_extensions[1]\n   elseif cap_strength >\
    \ sm_strength then\n      return class_name .. cap_extensions[1]\n   else\n  \
    \    return class_name .. sm_extensions[1]\n   end\nend", "\tlocal strongest =\
    \ nil\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\
    \t\tlocal cap_diff = cap - sm\n\t\tif cap_diff > 0 then\n\t\t\tif not strongest\
    \ or cap_diff > strongest.strength then\n\t\t\t\tstrongest = { name = extension,\
    \ strength = cap_diff }\n\t\t\tend\n\t\tend\n\tend\n\treturn class_name .. '.'\
    \ .. strongest.name\nend", "  local strongest = nil\n  local strength = -1\n \
    \ for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local diff = cap - sm\n    if diff > strength then\n      strongest = extension\n\
    \      strength = diff\n    end\n  end\n  return class_name .. '.' .. strongest\n\
    end", "   local cap_sum = 0\n   local sml_sum = 0\n   local max_strength = -1\n\
    \   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sml = string.lower(extension:sub(1, #extension))\n\
    \      cap_sum = cap_sum + cap\n      sml_sum = sml_sum + sml\n      if cap >\
    \ max_strength then\n         max_strength = cap\n      end\n   end\n   if cap_sum\
    \ - sml_sum > 0 then\n      return class_name .. \".\" .. extensions[#extensions]\n\
    \   else\n      return class_name .. \".\" .. extensions[#extensions]\n   end\n\
    end", "   local strongest = {}\n   for _, extension in ipairs(extensions) do\n\
    \      local cap = string.upper(extension:sub(1, #extension))\n      local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n      local strength\
    \ = cap - sm\n      if strength > 0 then\n         table.insert(strongest, extension)\n\
    \      end\n   end\n   if #strongest == 1 then\n      return class_name .. '.'\
    \ .. strongest[1]\n   else\n      return class_name .. '.' .. strongest[1]\n \
    \  end\nend", "   local strongest_extension = {}\n   local capitals = {}\n   local\
    \ lowercases = {}\n   for _, extension in ipairs(extensions) do\n      local cap\
    \ = string.upper(extension:sub(1, #extension))\n      local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n      capitals[cap] = capitals[cap] or 0\n      capitals[cap] = capitals[cap]\
    \ + 1\n      lowercases[sm] = lowercases[sm] or 0\n      lowercases[sm] = lowercases[sm]\
    \ + 1\n   end\n   local max_capitals = #capitals\n   local max_lowercases = #lowercases\n\
    \   if max_capitals > max_lowercases then\n      max_capitals = max_lowercases\n\
    \   end\n   for _, cap in ipairs(capitals) do\n      if cap > max_capitals then\n\
    \         max_capitals = cap\n      end\n   end\n   for _, sm in ipairs(lowercases)\
    \ do\n      if sm > max_lowercases then\n         max_lowercases = sm\n      end\n\
    \   end\n   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      if cap == class_name then\n         if capitals[cap] > lowercases[sm] then\n\
    \            strongest_extension = extension\n         end\n      end\n   end\n\
    \   return strongest_extension\nend", "  local strongest_extension = {}\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extension, function(a, b)\
    \ return a:lower() > b:lower() end)\n  return class_name .. \".\" .. table.unpack(strongest_extension,\
    \ 1)\nend", "   local strongest_extension = nil\n   for _, extension in ipairs(extensions)\
    \ do\n      if extension:upper():find(class_name:upper()) == 1 then\n        \
    \ local cap = extension:upper():upper():find(\"^%l\")\n         local sm = extension:upper():upper():find(\"\
    %l$\")\n         local strength = cap - sm\n         if strength > 0 then\n  \
    \          if strongest_extension == nil then\n               strongest_extension\
    \ = extension\n            else\n               if strength > strongest_extension:upper():upper():find(\"\
    ^%l\") then\n                  strongest_extension = extension\n             \
    \  end\n            end\n         end\n      end\n   end\n   return strongest_extension\n\
    end", "   local strongest = {}\n   local cap = #class_name:upper()\n   local sm\
    \ = #class_name:lower()\n   for _, extension in ipairs(extensions) do\n      local\
    \ cap_ext = #extension:upper()\n      local sm_ext = #extension:lower()\n    \
    \  local strength = cap - sm + cap_ext - sm_ext\n      if strength > 0 then\n\
    \         table.insert(strongest, extension)\n      end\n   end\n   if #strongest\
    \ == 1 then\n      return strongest[1]\n   else\n      return table.concat(strongest,\
    \ 1)\n   end\nend", "   local strongest = {}\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n      local strength = cap\
    \ - sm\n      if strength > 0 then\n         table.insert(strongest, extension)\n\
    \      end\n   end\n   if #strongest == 1 then\n      return class_name .. \"\
    .\" .. strongest[1]\n   else\n      return class_name .. \".\" .. strongest[1]\n\
    \   end\nend", "    local strongest = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = string.upper(extension:sub(1, #extension))\n       \
    \ local sm = string.lower(extension:sub((#extension) + 1, #extension))\n     \
    \   local strength = cap - sm\n        if strength > 0 then\n            table.insert(strongest,\
    \ extension)\n        end\n    end\n    table.sort(strongest)\n    return class_name\
    \ .. \".\" .. table.concat(strongest, \"\")\nend", "   local strongest_extension\
    \ = nil\n   local capitals = #class_name:gsub(\"%c\", \"\"):upper()\n   local\
    \ smalls = #class_name:gsub(\"%c\", \"\"):lower()\n   local capitals_count = #capitals\n\
    \   local smalls_count = #smalls\n   for _, extension in ipairs(extensions) do\n\
    \      local capitals_extension = #extension:gsub(\"%c\", \"\"):upper()\n    \
    \  local smalls_extension = #extension:gsub(\"%c\", \"\"):lower()\n      local\
    \ capitals_extension_count = #capitals_extension\n      local smalls_extension_count\
    \ = #smalls_extension\n      local strength = smalls_extension_count - capitals_extension_count\n\
    \      if strength > 0 then\n         if capitals_count > smalls_count then\n\
    \            strongest_extension = class_name .. \".\" .. extension\n        \
    \    break\n         elseif capitals_count < smalls_count then\n            strongest_extension\
    \ = class_name .. \".\" .. smalls_extension\n            break\n         else\n\
    \            strongest_extension = class_name .. \".\" .. capitals_extension\n\
    \            break\n         end\n      elseif strength < 0 then\n         if\
    \ capitals_count > smalls_count then\n            strongest_extension = class_name\
    \ .. \".\" .. smalls_extension\n            break\n         elseif capitals_count\
    \ < smalls_count then\n            strongest_extension = class_name .. \".\" ..\
    \ capitals_extension\n            break\n         else\n            strongest_extension\
    \ = class_name .. \".\" .. extension\n            break\n         end\n      else\n\
    \         strongest_extension = class_name .. \".\" .. extension\n         break\n\
    \      end\n   end\n   return strongest_extension\nend", "   local strongest =\
    \ {}\n   for _, extension in ipairs(extensions) do\n      local cap = #extension:upper()\n\
    \      local sm = #extension:lower()\n      local strength = cap - sm\n      if\
    \ strength > 0 then\n         table.insert(strongest, extension)\n      end\n\
    \   end\n   table.sort(strongest)\n   return class_name .. '.' .. table.concat(strongest,\
    \ ' ')\nend", "   local strongest_extension = nil\n   local capitals = 0\n   local\
    \ smalls = 0\n   for _, extension in ipairs(extensions) do\n      local cap =\
    \ string.upper(extension:sub(1, #extension))\n      local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n      capitals = capitals + cap\n      smalls = smalls + sm\n      if\
    \ capitals - smalls == 0 then\n         strongest_extension = extension\n    \
    \  end\n   end\n   return class_name .. '.' .. strongest_extension\nend", "  --\
    \ Your code here\nend", "  -- Your code here\nend", "   local strongest_extension\
    \ = {}\n   local capitals = string.gsub(class_name, '[A-Z]', '')\n   local lowercases\
    \ = string.gsub(class_name, '[a-z]', '')\n   local capitals_count = #capitals\n\
    \   local lowercases_count = #lowercases\n   for _, extension in ipairs(extensions)\
    \ do\n      local capitals_extension = string.gsub(extension, '[A-Z]', '')\n \
    \     local lowercases_extension = string.gsub(extension, '[a-z]', '')\n     \
    \ local capitals_extension_count = #capitals_extension\n      local lowercases_extension_count\
    \ = #lowercases_extension\n      local strength = capitals_extension_count - lowercases_extension_count\n\
    \      if strength > 0 then\n         if capitals_extension_count > lowercases_extension_count\
    \ then\n            strongest_extension[extension] = capitals_extension\n    \
    \     else\n            strongest_extension[extension] = lowercases_extension\n\
    \         end\n      end\n   end\n   local strongest_extension_strength = #strongest_extension\n\
    \   if strongest_extension_strength == 1 then\n      return strongest_extension[extensions[1]]\n\
    \   elseif strongest_extension_strength > 1 then\n      local strongest_extension_strength_1\
    \ = #strongest_extension\n      local strongest_extension_strength_2 = #strongest_extension\n\
    \      local strongest_extension_strength_3 = #strongest_extension\n      local\
    \ strongest_extension_strength_4 = #strongest_extension\n      local strongest_extension_strength_5\
    \ = #strongest_extension\n      local strongest_extension_strength_6 = #strongest_extension\n\
    \      local strongest_extension_strength_7 = #strongest_extension\n      local\
    \ strongest_extension_strength_8 = #strongest_extension\n      local strongest_extension_strength_9\
    \ = #strongest_extension\n      local strongest_extension_strength_10 = #strongest_extension\n\
    \      local strongest_extension_strength_11 = #strongest_extension\n      local\
    \ strongest_extension_strength_12 = #strongest_extension\n      local strongest_extension_strength_13\
    \ = #strongest_extension\n      local strongest_extension_strength_14 = #strongest_extension\n\
    \      local strongest_extension_strength_15 = #strongest_extension\n      local\
    \ strongest_extension_strength_16 = #strongest_extension\n      local stron",
  "   local strongest_extension = nil\n   local extension_strengths = {}\n   for _,\
    \ extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if not extension_strengths[strength] then\n\
    \         extension_strengths[strength] = extension\n      else\n         if extension_strengths[strength]\
    \ < extension then\n            extension_strengths[strength] = extension\n  \
    \       end\n      end\n   end\n   for _, strength in ipairs(extension_strengths)\
    \ do\n      if strongest_extension == nil or strength > strongest_extension:len()\
    \ then\n         strongest_extension = extension_strengths[strength]\n      end\n\
    \   end\n   return strongest_extension\nend", "  local strongest = nil\n  local\
    \ strongest_strength = -1\n  for _, extension in ipairs(extensions) do\n    local\
    \ cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      if strongest_strength\
    \ == -1 or strength > strongest_strength then\n        strongest = extension\n\
    \        strongest_strength = strength\n      end\n    end\n  end\n  return class_name\
    \ .. '.' .. strongest\nend", "   local strongest_extension = {}\n   for _, extension\
    \ in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1, #extension))\n\
    \      local sm = string.lower(extension:sub((#extension) + 1))\n      local strength\
    \ = cap - sm\n      if strength > 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      end\n   end\n   if #strongest_extension == 1 then\n      return\
    \ class_name .. \".\" .. strongest_extension[1]\n   else\n      return class_name\
    \ .. \".\" .. strongest_extension[1]\n   end\nend", "   local strongest = {}\n\
    \   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > 0 then\n         table.insert(strongest,\
    \ extension)\n      end\n   end\n   if #strongest == 0 then\n      return nil\n\
    \   end\n   table.sort(strongest, function(a, b) return strength > b end)\n  \
    \ return class_name .. '.' .. table.unpack(strongest)[1]\nend", "   local strongest_extension\
    \ = {}\n   local capitals = {}\n   local sms = {}\n   for _, extension in ipairs(extensions)\
    \ do\n      local capitals_count = capitals[#capitals+1]\n      local sms_count\
    \ = sms[#sms+1]\n      capitals[#capitals+1] = string.upper(extension:sub(1, #extension))\n\
    \      sms[#sms+1] = string.lower(extension:sub(1, #extension))\n      local capitals_diff\
    \ = capitals_count-capitals[#capitals]\n      local sms_diff = sms_count-sms[#sms]\n\
    \      if capitals_diff > sms_diff then\n         strongest_extension[#strongest_extension+1]\
    \ = extension\n      else\n         strongest_extension[#strongest_extension+1]\
    \ = sms[#sms]\n      end\n   end\n   local strongest_extension_strength = #strongest_extension\n\
    \   for _, extension in ipairs(extensions) do\n      local capitals_count = capitals[#capitals+1]\n\
    \      local sms_count = sms[#sms+1]\n      capitals[#capitals+1] = string.upper(extension:sub(1,\
    \ #extension))\n      sms[#sms+1] = string.lower(extension:sub(1, #extension))\n\
    \      local capitals_diff = capitals_count-capitals[#capitals]\n      local sms_diff\
    \ = sms_count-sms[#sms]\n      if capitals_diff > sms_diff then\n         strongest_extension_strength\
    \ = capitals_diff\n      else\n         strongest_extension_strength = sms_diff\n\
    \      end\n   end\n   return class_name .. \".\" .. strongest_extension[strongest_extension_strength]\n\
    end", "  local strongest_extension = {}\n  local capitals = {}\n  local smalls\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    capitals[cap] = capitals[cap] or 1\n    smalls[string.lower(extension:sub((#extension)\
    \ + 1))] = smalls[string.lower(extension:sub((#extension) + 1))] or 1\n    capitals[cap]\
    \ = capitals[cap] + 1\n    smalls[string.lower(extension:sub((#extension) + 1))]\
    \ = smalls[string.lower(extension:sub((#extension) + 1))] + 1\n  end\n  local\
    \ max_capitals = #capitals\n  local max_smalls = #smalls\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local small = string.lower(extension:sub((#extension) + 1))\n    if capitals[cap]\
    \ > max_capitals then\n      max_capitals = capitals[cap]\n    end\n    if smalls[small]\
    \ > max_smalls then\n      max_smalls = smalls[small]\n    end\n  end\n  if max_capitals\
    \ == max_smalls then\n    return class_name\n  end\n  local max_capitals_index\
    \ = max_capitals - 1\n  local max_smalls_index = max_smalls - 1\n  local max_strength\
    \ = max_capitals_index - max_smalls_index\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local small\
    \ = string.lower(extension:sub((#extension) + 1))\n    if capitals[cap] > max_capitals_index\
    \ then\n      max_capitals_index = capitals[cap]\n    end\n    if smalls[small]\
    \ > max_smalls_index then\n      max_smalls_index = smalls[small]\n    end\n \
    \   if capitals[cap] > max_capitals_index then\n      max_capitals_index = capitals[cap]\n\
    \    end\n    if smalls[small] > max_smalls_index then\n      max_smalls_index\
    \ = smalls[small]\n    end\n  end\n  if max_capitals_index == max_smalls_index\
    \ then\n    return class_name\n  end\n  return class_name .. '.' .. extensions[max_capitals_index\
    \ + 1]\nend", "  -- Your code here\nend", "   local strongest = {}\n   for _,\
    \ extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > 0 then\n         table.insert(strongest,\
    \ extension)\n      end\n   end\n   if #strongest == 0 then\n      return class_name\n\
    \   else\n      table.sort(strongest)\n      return string.format(class_name ..\
    \ \".%s\", strongest[1])\n   end\nend", "   local strongest_extension = {}\n \
    \  for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      end\n   end\n   if #strongest_extension == 1 then\n      return\
    \ strongest_extension[1]\n   else\n      local strength_sorted = table.sort(strongest_extension,\
    \ function(a, b) return strength > b end)\n      return strength_sorted[1]\n \
    \  end\nend", "   local strongest_extension = nil\n   local strongest_strength\
    \ = -1\n   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > strongest_strength then\n\
    \         strongest_strength = strength\n         strongest_extension = extension\n\
    \      end\n   end\n   return class_name .. '.' .. strongest_extension\nend",
  "   local strongest = {}\n   for _, extension in ipairs(extensions) do\n      local\
    \ cap = string.upper(extension:sub(1, #extension))\n      local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n      local strength = cap - sm\n      if strength > 0 then\n       \
    \  table.insert(strongest, extension)\n      end\n   end\n   if #strongest ==\
    \ 1 then\n      return class_name .. \".\" .. strongest[1]\n   else\n      return\
    \ class_name .. \".\" .. strongest[1]\n   end\nend", "   local strongest = {}\n\
    \   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > 0 then\n         table.insert(strongest,\
    \ extension)\n      end\n   end\n   if #strongest == 1 then\n      return class_name\
    \ .. \".\" .. strongest[1]\n   else\n      local strongest_strength = #strongest\n\
    \      for _, extension in ipairs(strongest) do\n         strongest_strength =\
    \ strongest_strength - #extension\n      end\n      return class_name .. \".\"\
    \ .. strongest[math.min(strongest_strength, #strongest)]\n   end\nend", "   local\
    \ strongest = {}\n   local capitals = {}\n   local sm = 0\n   for _, extension\
    \ in ipairs(extensions) do\n      local capitals = string.gsub(extension, \"[A-Z]\"\
    , \"\")\n      local capitals = string.gsub(capitals, \"[a-z]\", \"\")\n     \
    \ local capitals = string.gsub(capitals, \"[A-Z]\", \"\")\n      local capitals\
    \ = string.gsub(capitals, \"[a-z]\", \"\")\n      local capitals = string.gsub(capitals,\
    \ \"[A-Z]\", \"\")\n      local capitals = string.gsub(capitals, \"[a-z]\", \"\
    \")\n      local capitals = string.gsub(capitals, \"[A-Z]\", \"\")\n      local\
    \ capitals = string.gsub(capitals, \"[a-z]\", \"\")\n      local capitals = string.gsub(capitals,\
    \ \"[A-Z]\", \"\")\n      local capitals = string.gsub(capitals, \"[a-z]\", \"\
    \")\n      local capitals = string.gsub(capitals, \"[A-Z]\", \"\")\n      local\
    \ capitals = string.gsub(capitals, \"[a-z]\", \"\")\n      local capitals = string.gsub(capitals,\
    \ \"[A-Z]\", \"\")\n      local capitals = string.gsub(capitals, \"[a-z]\", \"\
    \")\n      local capitals = string.gsub(capitals, \"[A-Z]\", \"\")\n      local\
    \ capitals = string.gsub(capitals, \"[a-z]\", \"\")\n      local capitals = string.gsub(capitals,\
    \ \"[A-Z]\", \"\")\n      local capitals = string.gsub(capitals, \"[a-z]\", \"\
    \")\n      local capitals = string.gsub(capitals, \"[A-Z]\", \"\")\n      local\
    \ capitals = string.gsub(capitals, \"[a-z]\", \"\")\n      local capitals = string.gsub(capitals,\
    \ \"[A-Z]\", \"\")\n      local capitals = string.gsub(capitals, \"[a-z]\", \"\
    \")\n      local capitals = string.gsub(capitals, \"[A-Z]\", \"\")\n      local\
    \ capitals = string.gsub(capitals, \"[a-z]\", \"\")\n      local capitals = string.gsub(capitals,\
    \ \"[A-Z]\", \"\")\n      local capitals = string.gsub(capitals, \"[a-z]\", \"\
    \")\n      local capitals = string.gsub(capitals, \"[A-Z]\", \"\")\n      local\
    \ capitals = string.gsub(capitals, \"[a-z]\", \"\")\n      local capitals = string.gsub(capitals,\
    \ \"[A-Z]\", \"\")\n      local capitals = string.gsub(capitals, \"[a-z]\", \"\
    \")\n      local capitals = string.gsub(capitals, \"[A-Z]\", \"\")\n      local\
    \ capitals = string.gsub(capitals, \"[a-z]\", \"\")\n      local cap", "   local\
    \ strongest_extension = {}\n   local capitals = {}\n   local lowercases = {}\n\
    \   for _, extension in ipairs(extensions) do\n      local capitals_count = string.gsub(extension,\
    \ \"[A-Z]\", \"\"):gsub(\"%z\", \"\")\n      local lowercases_count = string.gsub(extension,\
    \ \"[a-z]\", \"\"):gsub(\"%z\", \"\")\n      capitals[capitals_count] = capitals_count\n\
    \      lowercases[lowercases_count] = lowercases_count\n   end\n   for _, extension\
    \ in ipairs(extensions) do\n      local capitals_count = string.gsub(extension,\
    \ \"[A-Z]\", \"\"):gsub(\"%z\", \"\")\n      local lowercases_count = string.gsub(extension,\
    \ \"[a-z]\", \"\"):gsub(\"%z\", \"\")\n      if capitals[capitals_count] > lowercases[lowercases_count]\
    \ then\n         strongest_extension[extension] = extension\n      end\n   end\n\
    \   if #strongest_extension > 1 then\n      local strongest_extension_strength\
    \ = capitals[#capitals] - lowercases[#lowercases]\n      for _, extension in ipairs(strongest_extension)\
    \ do\n         if extensions[#extensions] == extension then\n            strongest_extension_strength\
    \ = strongest_extension_strength - 1\n         end\n      end\n      strongest_extension\
    \ = class_name .. \".\" .. strongest_extension[#strongest_extension]\n   end\n\
    \   return strongest_extension\nend", "   local strongest_extension = {}\n   for\
    \ _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = math.abs(cap - sm)\n      if strength > 0 then\n     \
    \    table.insert(strongest_extension, extension)\n      end\n   end\n   if #strongest_extension\
    \ > 0 then\n      table.sort(strongest_extension)\n      return class_name ..\
    \ '.' .. strongest_extension[1]\n   else\n      return class_name\n   end\nend",
  "   local strongest = {}\n   local capitals = {}\n   local sms = {}\n   for _, extension\
    \ in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1, #extension))\n\
    \      local sm = string.lower(extension:sub((#extension) + 1))\n      capitals[cap]\
    \ = capitals[cap] or 0\n      sms[sm] = sms[sm] or 0\n      capitals[cap] = capitals[cap]\
    \ + 1\n      sms[sm] = sms[sm] + 1\n   end\n   for cap, s in pairs(capitals) do\n\
    \      if s == capitals[cap] then\n         strongest[cap] = cap\n      end\n\
    \   end\n   for sm, s in pairs(sms) do\n      if s == sms[sm] then\n         strongest[sm]\
    \ = sm\n      end\n   end\n   if #strongest == 1 then\n      return class_name\
    \ .. \".\" .. strongest[1]\n   else\n      local strongest_cap = #strongest +\
    \ 1\n      local strongest_sm = #strongest + 1\n      for _, cap in ipairs(strongest)\
    \ do\n         if cap == strongest_cap then\n            strongest_cap = strongest_cap\
    \ + 1\n         elseif cap == strongest_sm then\n            strongest_sm = strongest_sm\
    \ + 1\n         else\n            strongest_cap = strongest_cap - 1\n        \
    \    strongest_sm = strongest_sm - 1\n         end\n      end\n      return class_name\
    \ .. \".\" .. strongest[strongest_cap] .. \".\" .. strongest[strongest_sm]\n \
    \  end\nend", "\tlocal strongest_extension = {}\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n\t\tlocal strength\
    \ = cap - sm\n\t\tif strength == 0 then\n\t\t\t-- The extension's name does not\
    \ contain any uppercase letters.\n\t\t\t-- Therefore, it is considered the strongest\
    \ extension.\n\t\t\tstrongest_extension[extension] = -1\n\t\telseif strength >\
    \ 0 then\n\t\t\t-- The extension's name contains at least one uppercase letter,\n\
    \t\t\t-- therefore it is the strongest extension.\n\t\t\tstrongest_extension[extension]\
    \ = strength\n\t\telse\n\t\t\t-- The extension's name contains at least one lowercase\
    \ letter,\n\t\t\t-- therefore it is the strongest extension.\n\t\t\tstrongest_extension[extension]\
    \ = -strength\n\t\tend\n\tend\n\tlocal strongest_extension_strength = #strongest_extension\n\
    \tlocal strongest_extension_strength_sorted = {}\n\tfor k, v in pairs(strongest_extension_strength)\
    \ do\n\t\tstrongest_extension_strength_sorted[#strongest_extension_strength_sorted\
    \ + 1] = k\n\tend\n\ttable.sort(strongest_extension_strength_sorted)\n\treturn\
    \ class_name .. '.' .. strongest_extension_strength_sorted[1]\nend", "\tlocal\
    \ strongest = {}\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal cap =\
    \ string.upper(extension:sub(1, #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension)\
    \ + 1))\n\t\tlocal strength = cap - sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest,\
    \ extension)\n\t\tend\n\tend\n\ttable.sort(strongest)\n\treturn class_name ..\
    \ \".\" .. table.concat(strongest, \" \")\nend", "   local strongest_extension\
    \ = {}\n   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1,\
    \ #extension))\n      local strength = cap - sm\n      if strength > 0 then\n\
    \         table.insert(strongest_extension, extension)\n      end\n   end\n  \
    \ table.sort(strongest_extension, function(a, b) return strength > b end)\n  \
    \ return class_name .. \".\" .. table.concat(strongest_extension, \".\")\nend",
  "  -- Your code here\nend", "\tlocal strongest_extension = nil\n\tlocal extension_strength\
    \ = nil\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\
    \t\tlocal cap_strength = cap - sm\n\t\tif cap_strength > 0 and cap_strength <\
    \ extension_strength then\n\t\t\tstrongest_extension = extension\n\t\t\textension_strength\
    \ = cap_strength\n\t\tend\n\tend\n\treturn strongest_extension\nend", "    local\
    \ strongest_extension = {}\n    for _, extension in ipairs(extensions) do\n  \
    \      local cap = string.upper(extension:sub(1, #extension))\n        local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n        local strength\
    \ = cap - sm\n        if strength > 0 then\n            table.insert(strongest_extension,\
    \ class_name .. '.' .. extension .. '.' .. strength)\n        end\n    end\n \
    \   table.sort(strongest_extension)\n    return strongest_extension[1]\nend",
  "   local strongest_extension = {}\n   local capitals = {}\n   local sms = {}\n\
    \   for _, extension in ipairs(extensions) do\n      local capitals_count = capitals[#capitals]\n\
    \      local sms_count = sms[#sms]\n      capitals[#capitals+1] = #(extension:gsub(\"\
    %l\", ''))\n      sms[#sms+1] = #(extension:gsub(\"%L\", ''))\n      local capitals_diff\
    \ = capitals[#capitals] - capitals_count\n      local sms_diff = sms[#sms] - sms_count\n\
    \      if capitals_diff > sms_diff then\n         strongest_extension[#strongest_extension+1]\
    \ = extension\n      else\n         strongest_extension[#strongest_extension+1]\
    \ = extension\n      end\n   end\n   local strongest_extension_strength = capitals[#capitals]-sms[#sms]\n\
    \   if #strongest_extension > 1 then\n      local strongest_extension_strength_sorted\
    \ = table.sort(strongest_extension_strength)\n      local strongest_extension_strength_sorted\
    \ = strongest_extension_strength_sorted[1]\n      local strongest_extension_strength_sorted\
    \ = strongest_extension_strength_sorted:sub(1,-2)\n      local strongest_extension_strength_sorted\
    \ = strongest_extension_strength_sorted .. '.' .. strongest_extension_strength_sorted\n\
    \   else\n      local strongest_extension_strength_sorted = strongest_extension_strength_sorted[1]\n\
    \   end\n   return class_name .. '.' .. strongest_extension_strength_sorted\n\
    end", "\tlocal cap_extensions = {}\n\tlocal sm_extensions = {}\n\tfor _, extension\
    \ in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\
    \t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\t\tcap_extensions[cap]\
    \ = cap_extensions[cap] or {}\n\t\tcap_extensions[cap][sm] = cap_extensions[cap][sm]\
    \ or 1\n\t\tsm_extensions[sm] = sm_extensions[sm] or {}\n\t\tsm_extensions[sm][cap]\
    \ = sm_extensions[sm][cap] or 1\n\tend\n\tlocal max_strength = -1\n\tlocal max_extension\n\
    \tfor cap, extensions in pairs(cap_extensions) do\n\t\tlocal sm = #extensions\n\
    \t\tif sm > max_strength then\n\t\t\tmax_strength = sm\n\t\t\tmax_extension =\
    \ cap\n\t\tend\n\t\tfor _, extension in ipairs(extensions) do\n\t\t\tlocal cap\
    \ = string.upper(extension:sub(1, #extension))\n\t\t\tlocal sm = string.lower(extension:sub((#extension)\
    \ + 1))\n\t\t\tlocal strength = cap_extensions[cap][sm] - sm_extensions[sm][cap]\n\
    \t\t\tif strength > max_strength then\n\t\t\t\tmax_strength = strength\n\t\t\t\
    \tmax_extension = cap\n\t\t\tend\n\t\tend\n\tend\n\treturn string.sub(class_name,\
    \ 1, #class_name-1) .. max_extension .. '.' .. max_extension\nend", "\tlocal strongest\
    \ = {}\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\
    \t\tlocal strength = cap - sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest,\
    \ extension)\n\t\tend\n\tend\n\ttable.sort(strongest)\n\treturn class_name ..\
    \ '.' .. table.concat(strongest, '.')\nend", "   local strongest = nil\n   local\
    \ max_strength = -1\n   for _, extension in ipairs(extensions) do\n      local\
    \ cap = string.upper(extension:sub(1, #extension))\n      local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n      local strength = cap - sm\n      if strength > max_strength then\n\
    \         max_strength = strength\n         strongest = extension\n      end\n\
    \   end\n   return class_name .. \".\" .. strongest\nend", "   local strongest_extension\
    \ = {}\n   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      else\n         break\n      end\n   end\n   return class_name\
    \ .. '.' .. table.concat(strongest_extension, '.')\nend", "   local strongest_extension\
    \ = nil\n   local strongest_extension_strength = -1\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n      local cap_diff = cap\
    \ - sm\n      if cap_diff > strongest_extension_strength then\n         strongest_extension_strength\
    \ = cap_diff\n         strongest_extension = extension\n      end\n   end\n  \
    \ return class_name .. '.' .. strongest_extension\nend", "   local strongest =\
    \ {}\n   local capitals = {}\n   local sms = {}\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n      capitals[cap] = capitals[cap]\
    \ or 0\n      sms[sm] = sms[sm] or 0\n      capitals[cap] = capitals[cap] + 1\n\
    \      sms[sm] = sms[sm] + 1\n   end\n   for cap, count in pairs(capitals) do\n\
    \      strongest[cap] = count / #extensions\n   end\n   for sm, count in pairs(sms)\
    \ do\n      strongest[sm] = strongest[sm] + (count / #extensions)\n   end\n  \
    \ local max = 0\n   for cap, count in pairs(strongest) do\n      if count > max\
    \ then\n         max = count\n         strongest[cap] = cap\n      end\n   end\n\
    \   return strongest[max]\nend", "   local strongest_extension = {}\n   for _,\
    \ extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength == 0 then\n         return\
    \ nil\n      elseif strength > 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      elseif strength < 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      end\n   end\n   table.sort(strongest_extension, function(a,\
    \ b) return a:byte() - b:byte() end)\n   return class_name .. \".\" .. table.concat(strongest_extension,\
    \ \"\")\nend", "   local strongest = {}\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n      local strength = cap\
    \ - sm\n      if strength > 0 then\n         table.insert(strongest, extension)\n\
    \      end\n   end\n   if #strongest == 1 then\n      return class_name .. \"\
    .\" .. strongest[1]\n   else\n      return class_name .. \".\" .. strongest[1]\n\
    \   end\nend", "   local strongest_extension = {}\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n      local strength = cap\
    \ - sm\n      if strength > 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      else\n         table.insert(strongest_extension, extension)\n\
    \         table.insert(strongest_extension, extension)\n      end\n   end\n  \
    \ table.sort(strongest_extension, function(a, b) return a:upper() - b:upper()\
    \ end)\n   return class_name .. '.' .. table.concat(strongest_extension, '.')\n\
    end", "    local strongest_extension = {}\n    local capitals = {}\n    local\
    \ lowercases = {}\n    for _, extension in ipairs(extensions) do\n        capitals[#capitals\
    \ + 1] = string.upper(extension:sub(1, #extension))\n        lowercases[#lowercases\
    \ + 1] = string.lower(extension:sub(1, #extension))\n    end\n    local cap_strength\
    \ = #capitals\n    local lcl_strength = #lowercases\n    local strength = cap_strength\
    \ - lcl_strength\n    if strength == 0 then\n        return class_name\n    end\n\
    \    local cap_extension = capitals[strength]\n    local lcl_extension = lowercases[strength]\n\
    \    if cap_strength > lcl_strength then\n        return class_name .. \".\" ..\
    \ cap_extension\n    else\n        return class_name .. \".\" .. lcl_extension\n\
    \    end\nend", "  -- Your code here\nend", "   local strongest_extension = {}\n\
    \   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1,\
    \ #extension))\n      local strength = cap - sm\n      if strength > 0 then\n\
    \         table.insert(strongest_extension, extension)\n      elseif strength\
    \ == 0 then\n         table.insert(strongest_extension, extension)\n      else\n\
    \         table.insert(strongest_extension, extension)\n         table.insert(strongest_extension,\
    \ extension)\n      end\n   end\n   table.sort(strongest_extension, function(a,\
    \ b) return a:byte() - b:byte() end)\n   return class_name .. '.' .. table.concat(strongest_extension,\
    \ '.')\nend", "  local strongest_extension = nil\n  local extension_strength =\
    \ nil\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local strength = cap - sm\n    if extension_strength == nil then\n      extension_strength\
    \ = strength\n    elseif extension_strength > strength then\n      extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend", "   local strongest = {}\n \
    \  for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > 0 then\n         table.insert(strongest,\
    \ extension)\n      end\n   end\n   if #strongest == 1 then\n      return class_name\
    \ .. '.' .. strongest[1]\n   else\n      local strongest_strength = #strongest\n\
    \      for _, extension in ipairs(strongest) do\n         strongest_strength =\
    \ strongest_strength - #extension\n      end\n      if strongest_strength > 0\
    \ then\n         return class_name .. '.' .. strongest[1]\n      else\n      \
    \   return nil\n      end\n   end\nend", "\tlocal cap = #class_name:upper()\n\t\
    local sm = #class_name:lower()\n\tlocal strongest = nil\n\tlocal strength = -1\n\
    \tfor _, extension in ipairs(extensions) do\n\t\tlocal cap_ext = #extension:upper()\n\
    \t\tlocal sm_ext = #extension:lower()\n\t\tlocal diff = cap_ext - sm_ext\n\t\t\
    if diff > strength then\n\t\t\tstrength = diff\n\t\t\tstrongest = extension\n\t\
    \tend\n\tend\n\treturn class_name .. '.' .. strongest\nend", "   local strongest_extension\
    \ = {}\n   for _, extension in ipairs(extensions) do\n      local cap = #extension:upper()\n\
    \      local sm = #extension:lower()\n      local strength = cap - sm\n      if\
    \ strength > 0 then\n         table.insert(strongest_extension, extension)\n \
    \     end\n   end\n   if #strongest_extension == 1 then\n      return class_name\
    \ .. \".\" .. strongest_extension[1]\n   else\n      return class_name .. \".\"\
    \ .. strongest_extension[1]\n   end\nend", "   local strongest_extension = nil\n\
    \   local capitals = string.gsub(class_name, '[A-Z]', '')\n   local lowercases\
    \ = string.gsub(class_name, '[a-z]', '')\n   local capitals_count = #capitals\n\
    \   local lowercases_count = #lowercases\n   local strength = capitals_count -\
    \ lowercases_count\n   for _, extension in ipairs(extensions) do\n      local\
    \ capitals_extension = string.gsub(extension, '[A-Z]', '')\n      local lowercases_extension\
    \ = string.gsub(extension, '[a-z]', '')\n      local capitals_extension_count\
    \ = #capitals_extension\n      local lowercases_extension_count = #lowercases_extension\n\
    \      local extension_strength = capitals_extension_count - lowercases_extension_count\n\
    \      if extension_strength > 0 then\n         if extension_strength > strength\
    \ then\n            strongest_extension = extension\n            strength = extension_strength\n\
    \         end\n      end\n   end\n   return strongest_extension\nend", "  local\
    \ cap = #class_name:upper()\n  local sm = #class_name:lower()\n  local strongest\
    \ = nil\n  local strength = -1\n  for _, extension in ipairs(extensions) do\n\
    \    local cap_ext = #extension:upper()\n    local sm_ext = #extension:lower()\n\
    \    local diff = cap_ext - sm_ext\n    if diff > 0 then\n      local diff = math.abs(cap\
    \ - sm)\n      if diff > strength then\n        strength = diff\n        strongest\
    \ = extension\n      end\n    end\n  end\n  return strongest\nend", "  local strongest_extension\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extension, function(a, b)\
    \ return a:sub(1, #a) - b:sub(1, #b) end)\n  return class_name .. '.' .. table.concat(strongest_extension,\
    \ '.')\nend", "   local strongest_extension = {}\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n      local strength = cap\
    \ - sm\n      if strength > 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      elseif strength == 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      elseif strength < 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      end\n   end\n   if #strongest_extension == 1 then\n      return\
    \ strongest_extension[1]\n   else\n      return table.concat(strongest_extension,\
    \ \" \")\n   end\nend", "\tlocal strongest_extension = {}\n\tlocal capitals =\
    \ {}\n\tlocal smalls = {}\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal\
    \ cap = string.upper(extension:sub(1, #extension))\n\t\tcapitals[cap] = capitals[cap]\
    \ or 0\n\t\tcapitals[cap] = capitals[cap] + 1\n\t\tlocal sm = string.lower(extension:sub((#extension)\
    \ + 1))\n\t\tsmalls[sm] = smalls[sm] or 0\n\t\tsmalls[sm] = smalls[sm] + 1\n\t\
    end\n\tlocal max_cap = #capitals\n\tlocal max_sm = #smalls\n\tlocal max_strength\
    \ = -1\n\tlocal max_extension\n\tfor _, extension in ipairs(extensions) do\n\t\
    \tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension)\
    \ + 1))\n\t\tlocal strength = capitals[cap] - smalls[sm]\n\t\tif strength > max_strength\
    \ then\n\t\t\tmax_strength = strength\n\t\t\tmax_extension = extension\n\t\tend\n\
    \tend\n\treturn string.sub(class_name, 1, #class_name-1) .. \".\" .. max_extension\n\
    end", "   local strongest_extension = {}\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n      local strength = cap\
    \ - sm\n      if strength > 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      elseif strength == 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      elseif strength < 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      end\n   end\n   table.sort(strongest_extension)\n   return\
    \ string.format(class_name .. \".%s\", strongest_extension[1])\nend", "   local\
    \ strongest_extension = {}\n   for _, extension in ipairs(extensions) do\n   \
    \   local cap = string.upper(extension:sub(1, #extension))\n      local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n      local strength = cap - sm\n      if strength > 0 then\n       \
    \  table.insert(strongest_extension, extension)\n      elseif strength == 0 then\n\
    \         table.insert(strongest_extension, extension)\n      elseif strength\
    \ < 0 then\n         table.insert(strongest_extension, extension)\n      end\n\
    \   end\n   table.sort(strongest_extension, function(a, b) return strength - tonumber(a)\
    \ - tonumber(b) end)\n   return class_name .. \".\" .. table.concat(strongest_extension,\
    \ \".\")\nend", "   local strongest_extension = {}\n   local capitals = {}\n \
    \  local sms = {}\n   for _, extension in ipairs(extensions) do\n      local capitals_count\
    \ = tonumber(extension:match(\"^(.)%u\"))\n      local sms_count = tonumber(extension:match(\"\
    ^(.)%s\"))\n      capitals[capitals_count] = capitals_count\n      sms[sms_count]\
    \ = sms_count\n   end\n   local max_capitals = max(capitals)\n   local max_sms\
    \ = max(sms)\n   if max_capitals == max_sms then\n      strongest_extension[max_capitals]\
    \ = class_name\n   else\n      local max_capitals_index = capitals[max_capitals]\n\
    \      local max_sms_index = sms[max_sms]\n      local max_capitals_extension\
    \ = extensions[max_capitals_index]\n      local max_sms_extension = extensions[max_sms_index]\n\
    \      local capitals_count = tonumber(max_capitals_extension:match(\"^(.)%u\"\
    ))\n      local sms_count = tonumber(max_sms_extension:match(\"^(.)%s\"))\n  \
    \    strongest_extension[max_capitals_index] = class_name .. \".\" .. max_capitals_extension:sub(1,\
    \ capitals_count - 1)\n      strongest_extension[max_sms_index] = class_name ..\
    \ \".\" .. max_sms_extension:sub(1, sms_count - 1)\n   end\n   return table.concat(strongest_extension,\
    \ \".\")\nend", "\tlocal strongest = {}\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1))\n\t\tlocal strength = cap -\
    \ sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest, extension)\n\t\t\
    end\n\tend\n\ttable.sort(strongest)\n\treturn string.format(class_name .. \".%s\"\
    , strongest[1])\nend", "   local capitals = {}\n   local lowercases = {}\n   for\
    \ _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local low = string.lower(extension:sub(1, #extension))\n\
    \      capitals[cap] = capitals[cap] or 0\n      capitals[cap] = capitals[cap]\
    \ + 1\n      lowercases[low] = lowercases[low] or 0\n      lowercases[low] = lowercases[low]\
    \ + 1\n   end\n   local max_strength = capitals[\"A\"] - lowercases[\"a\"]\n \
    \  if max_strength > 0 then\n      local max_cap = capitals[\"A\"]\n      local\
    \ max_low = lowercases[\"a\"]\n      for _, extension in ipairs(extensions) do\n\
    \         local cap = string.upper(extension:sub(1, #extension))\n         local\
    \ low = string.lower(extension:sub(1, #extension))\n         if capitals[cap]\
    \ > max_cap then\n            max_cap = capitals[cap]\n         end\n        \
    \ if lowercases[low] > max_low then\n            max_low = lowercases[low]\n \
    \        end\n      end\n      return class_name .. \".\" .. max_cap .. string.lower(max_low)\n\
    \   else\n      return class_name\n   end\nend", "   local strongest_extension\
    \ = nil\n   local max_strength = -1\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1, #extension))\n      local\
    \ strength = cap - sm\n      if strength > max_strength then\n         max_strength\
    \ = strength\n         strongest_extension = extension\n      end\n   end\n  \
    \ return class_name .. '.' .. strongest_extension\nend", "   local strongest_extension\
    \ = {}\n   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      elseif strength == 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      elseif strength < 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      end\n   end\n   table.sort(strongest_extension, function(a,\
    \ b) return strength > b end)\n   return class_name .. \".\" .. table.concat(strongest_extension,\
    \ \".\")\nend", "   local strongest_extension = nil\n   local strongest_extension_strength\
    \ = -1\n   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local cap_diff = cap - sm\n      if cap_diff > strongest_extension_strength\
    \ then\n         strongest_extension_strength = cap_diff\n         strongest_extension\
    \ = extension\n      end\n   end\n   return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest = {}\n  for _, extension in ipairs(extensions) do\n \
    \   local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  table.sort(strongest)\n  return string.format(class_name\
    \ .. \".%s\", strongest[1])\nend", "    local strongest = {}\n    for _, extension\
    \ in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1))\n\
    \        local strength = cap - sm\n        if strength > 0 then\n           \
    \ table.insert(strongest, extension)\n        end\n    end\n    table.sort(strongest)\n\
    \    return class_name .. \".\" .. table.concat(strongest, \".\")\nend", "   local\
    \ strongest_extension = nil\n   local strongest_extension_strength = -1\n   for\
    \ _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1,\
    \ #extension))\n      local strength = cap - sm\n      if strength > strongest_extension_strength\
    \ then\n         strongest_extension_strength = strength\n         strongest_extension\
    \ = extension\n      end\n   end\n   return string.sub(class_name, 1, #class_name-1)\
    \ .. '.' .. strongest_extension\nend", "    local strongest = {}\n    for _, extension\
    \ in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1))\n\
    \        local strength = cap - sm\n        if strength == 0 then\n          \
    \  error(\"Extension name should contain at least one uppercase letter and one\
    \ lowercase letter\")\n        end\n        if strength > 0 then\n           \
    \ table.insert(strongest, extension)\n        end\n    end\n    table.sort(strongest)\n\
    \    return class_name .. \".\" .. table.concat(strongest, \".\")\nend", "\tlocal\
    \ strongest = {}\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal cap =\
    \ string.upper(extension:sub(1, #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension)\
    \ + 1))\n\t\tlocal strength = cap - sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest,\
    \ extension)\n\t\tend\n\tend\n\ttable.sort(strongest)\n\treturn class_name ..\
    \ '.' .. table.last(strongest)\nend", "   local strongest_extension = {}\n   for\
    \ _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      end\n   end\n   if #strongest_extension == 1 then\n      return\
    \ strongest_extension[1]\n   else\n      return table.concat(strongest_extension,\
    \ \" \")\n   end\nend", "  local strongest_extension = nil\n  local capitals =\
    \ #class_name\n  local smalls = #class_name:lower():byte()\n  for _, extension\
    \ in ipairs(extensions) do\n    local capitals_ = #extension\n    local smalls_\
    \ = #extension:lower():byte()\n    local strength = capitals_ - smalls_\n    if\
    \ strength > 0 then\n      if strongest_extension ~= nil then\n        if strength\
    \ > strongest_extension.strength then\n          strongest_extension = extension\n\
    \        end\n      else\n        strongest_extension = extension\n      end\n\
    \    end\n  end\n  return strongest_extension\nend", "\tlocal strongest_extension\
    \ = {}\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \t\tlocal strength = cap - sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest_extension,\
    \ extension)\n\t\tend\n\tend\n\ttable.sort(strongest_extension)\n\treturn class_name\
    \ .. '.' .. table.concat(strongest_extension, ' ')\nend", "  local strongest_extension\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = math.abs(cap - sm)\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extension)\n  return class_name\
    \ .. '.' .. table.concat(strongest_extension, '.')\nend", "  local capitals =\
    \ {}\n  local lowercases = {}\n  for _, extension in ipairs(extensions) do\n \
    \   capitals[#capitals + 1] = extension:upper()\n    lowercases[#lowercases +\
    \ 1] = extension:lower()\n  end\n  local capitals_count = #capitals\n  local lowercases_count\
    \ = #lowercases\n  local strength = capitals_count - lowercases_count\n  if strength\
    \ == 0 then\n    return class_name\n  elseif strength > 0 then\n    return class_name\
    \ .. '.' .. capitals[strength]\n  else\n    return class_name .. '.' .. lowercases[strength]\n\
    \  end\nend", "\tlocal strongest_extension = {}\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1))\n\t\tlocal strength = cap -\
    \ sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest_extension, extension)\n\
    \t\tend\n\tend\n\ttable.sort(strongest_extension, function(a, b) return a:byte()\
    \ - b:byte() end)\n\treturn class_name .. \".\" .. table.unpack(strongest_extension,\
    \ 1)\nend", "  local strongest = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest, extension)\n   \
    \ end\n  end\n  table.sort(strongest)\n  return class_name .. \".\" .. table.concat(strongest,\
    \ \".\")\nend", "   local capitals = {}\n   local lowercases = {}\n   for _, extension\
    \ in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1, #extension))\n\
    \      local low = string.lower(extension:sub(1, #extension))\n      capitals[cap]\
    \ = capitals[cap] or 0\n      capitals[cap] = capitals[cap] + 1\n      lowercases[low]\
    \ = lowercases[low] or 0\n      lowercases[low] = lowercases[low] + 1\n   end\n\
    \   local max = 0\n   local strongest = nil\n   for cap, count in pairs(capitals)\
    \ do\n      if count > max then\n         max = count\n         strongest = cap\n\
    \      end\n   end\n   for low, count in pairs(lowercases) do\n      if count\
    \ > max then\n         max = count\n         strongest = low\n      end\n   end\n\
    \   return class_name .. \".\" .. strongest\nend", "   local capitals = {}\n \
    \  local lowercases = {}\n   for _, extension in ipairs(extensions) do\n     \
    \ local cap = string.upper(extension:sub(1, #extension))\n      local low = string.lower(extension:sub(1,\
    \ #extension))\n      capitals[cap] = capitals[cap] or 0\n      capitals[cap]\
    \ = capitals[cap] + 1\n      lowercases[low] = lowercases[low] or 0\n      lowercases[low]\
    \ = lowercases[low] + 1\n   end\n   local max_cap = #capitals\n   local max_low\
    \ = #lowercases\n   if max_cap > max_low then\n      local max_cap_low = max_cap\
    \ - max_low\n      local max_cap_low_idx = 1\n      local max_cap_low_val = capitals[max_cap_low]\n\
    \      for _, cap_low_val in ipairs(capitals) do\n         if cap_low_val > max_cap_low_val\
    \ then\n            max_cap_low_val = cap_low_val\n            max_cap_low_idx\
    \ = max_cap_low_idx + 1\n         end\n      end\n      return class_name .. '.'\
    \ .. max_cap_low_idx .. '_' .. max_cap_low\n   else\n      local max_cap_low =\
    \ max_cap - max_low\n      local max_cap_low_idx = 1\n      local max_cap_low_val\
    \ = capitals[max_cap_low]\n      for _, cap_low_val in ipairs(capitals) do\n \
    \        if cap_low_val > max_cap_low_val then\n            max_cap_low_val =\
    \ cap_low_val\n            max_cap_low_idx = max_cap_low_idx + 1\n         end\n\
    \      end\n      return class_name .. '.' .. max_cap_low_idx .. '_' .. max_cap_low\n\
    \   end\nend", "   local strongest = {}\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n      local strength = cap\
    \ - sm\n      if strength > 0 then\n         table.insert(strongest, extension)\n\
    \      end\n   end\n   if #strongest == 1 then\n      return class_name .. \"\
    .\" .. strongest[1]\n   else\n      return class_name .. \".\" .. strongest[1]\n\
    \   end\nend", "  local strongest_extension = nil\n  local max_strength = -1\n\
    \  local max_extension = nil\n  for _, extension in ipairs(extensions) do\n  \
    \  local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > max_strength then\n\
    \      max_strength = strength\n      max_extension = extension\n    end\n  end\n\
    \  return class_name .. \".\" .. max_extension\nend", "   local strongest_extension\
    \ = nil\n   local strongest_extension_strength = -1\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = #extension:upper()\n      local sm = #extension:lower()\n\
    \      local strength = cap - sm\n      if strength > strongest_extension_strength\
    \ then\n         strongest_extension_strength = strength\n         strongest_extension\
    \ = extension\n      end\n   end\n   return class_name .. '.' .. strongest_extension\n\
    end", "   local strongest_extension = {}\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n      local strength = math.abs(cap\
    \ - sm)\n      if strength > 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      end\n   end\n   if #strongest_extension > 0 then\n      table.sort(strongest_extension,\
    \ function(a, b)\n         return string.upper(a) > string.upper(b)\n      end)\n\
    \      return class_name .. \".\" .. table.unpack(strongest_extension, 1)\n  \
    \ else\n      return class_name\n   end\nend", "  local strongest_extension =\
    \ nil\n  local max_strength = -1\n  for _, extension in ipairs(extensions) do\n\
    \    local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > max_strength then\n\
    \      max_strength = strength\n      strongest_extension = extension\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = nil\n  local max_strength = -1\n  for _, extension in ipairs(extensions) do\n\
    \    local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > max_strength then\n\
    \      max_strength = strength\n      strongest_extension = extension\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend", "\tlocal strongest_extension\
    \ = {}\n\tlocal capitals = {}\n\tlocal lowercases = {}\n\tfor _, extension in\
    \ ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\
    \t\tlocal low = string.lower(extension:sub(1, #extension))\n\t\tcapitals[cap]\
    \ = capitals[cap] or {}\n\t\tcapitals[cap][low] = capitals[cap][low] or 0\n\t\t\
    lowercases[low] = lowercases[low] or {}\n\t\tlowercases[low][cap] = lowercases[low][cap]\
    \ or 0\n\tend\n\tlocal max_capitals = #capitals\n\tlocal max_lowercases = #lowercases\n\
    \tlocal max_strength = max_capitals - max_lowercases\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal low\
    \ = string.lower(extension:sub(1, #extension))\n\t\tcapitals[cap][low] = capitals[cap][low]\
    \ + 1\n\t\tlowercases[low][cap] = lowercases[low][cap] + 1\n\tend\n\tfor cap,\
    \ lowers in pairs(lowercases) do\n\t\tlocal strength = #lowers\n\t\tif strength\
    \ > max_strength then\n\t\t\tmax_strength = strength\n\t\t\tstrongest_extension\
    \ = cap\n\t\tend\n\tend\n\treturn class_name .. '.' .. strongest_extension\nend",
  "   local strongest_extension = nil\n   local capitals = 0\n   local smalls = 0\n\
    \   for _, extension in ipairs(extensions) do\n      capitals = capitals + #extension:match(\"\
    ^[A-Z]\")\n      smalls = smalls + #extension:match(\"^[a-z]\")\n   end\n   if\
    \ capitals > smalls then\n      strongest_extension = class_name..\".\"..extensions[1]\n\
    \   else\n      strongest_extension = class_name..\".\"..extensions[2]\n   end\n\
    \   return strongest_extension\nend", "  local strongest_extension = {}\n  local\
    \ capitals = {}\n  local smalls = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local capitals = capitals or {}\n    local smalls = smalls or {}\n \
    \   for _, c in ipairs(extension:gsub(\"%c\", function (c) return capitals[c]\
    \ or c + 1 end)) do\n      capitals[c] = capitals[c] + 1\n    end\n    for _,\
    \ s in ipairs(extension:gsub(\"%s\", function (c) return smalls[c] or c + 1 end))\
    \ do\n      smalls[c] = smalls[c] + 1\n    end\n    local cap = capitals[#capitals]\n\
    \    local sm = smalls[#smalls]\n    local strength = cap - sm\n    if strength\
    \ > 0 then\n      table.insert(strongest_extension, class_name .. '.' .. extension)\n\
    \    end\n  end\n  table.sort(strongest_extension, function(a, b) return strength\
    \ > b end)\n  return strongest_extension[1]\nend", "\tlocal strongest = {}\n\t\
    local cap = #class_name\n\tlocal sm = #class_name:lower()\n\tfor _, extension\
    \ in ipairs(extensions) do\n\t\tlocal cap_ext = #extension:upper()\n\t\tlocal\
    \ sm_ext = #extension:lower()\n\t\tlocal strength = cap - cap_ext - sm - sm_ext\n\
    \t\tif strength > 0 then\n\t\t\ttable.insert(strongest, extension)\n\t\tend\n\t\
    end\n\ttable.sort(strongest)\n\treturn class_name .. \".\" .. table.concat(strongest,\
    \ \".\")\nend", "\tlocal strongest_extension = {}\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n\t\tlocal strength\
    \ = cap - sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest_extension,\
    \ extension)\n\t\telseif strength == 0 then\n\t\t\ttable.insert(strongest_extension,\
    \ extension)\n\t\telseif strength < 0 then\n\t\t\ttable.insert(strongest_extension,\
    \ extension)\n\t\tend\n\tend\n\ttable.sort(strongest_extension, function(a, b)\
    \ return a:lower() > b:lower() end)\n\treturn class_name .. \".\" .. table.concat(strongest_extension,\
    \ \".\")\nend", "   local strongest_extension = {}\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1, #extension))\n      local\
    \ strength = cap - sm\n      if strength == 0 then\n         return nil\n    \
    \  elseif strength > 0 then\n         table.insert(strongest_extension, extension)\n\
    \      elseif strength < 0 then\n         table.insert(strongest_extension, extension)\n\
    \      end\n   end\n   table.sort(strongest_extension, function(a, b) return a:upper()\
    \ < b:upper() end)\n   return string.format(class_name .. \".%s\", strongest_extension[1])\n\
    end", "   local strongest_extension = nil\n   local strongest_extension_strength\
    \ = -1\n   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > strongest_extension_strength\
    \ then\n         strongest_extension_strength = strength\n         strongest_extension\
    \ = extension\n      end\n   end\n   return class_name .. '.' .. strongest_extension\n\
    end", "\tlocal strongest = {}\n\tfor _, extension in ipairs(extensions) do\n\t\
    \tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension)\
    \ + 1))\n\t\tlocal strength = cap - sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest,\
    \ extension)\n\t\tend\n\tend\n\ttable.sort(strongest, function(a, b) return strength\
    \ < b end)\n\treturn class_name .. '.' .. table.concat(strongest, '.')\nend",
  "   local strongest_extension = {}\n   local capitals = {}\n   local lowercases\
    \ = {}\n   for _, extension in ipairs(extensions) do\n      local capitals_count\
    \ = capitals[#capitals+1]\n      local lowercases_count = lowercases[#lowercases+1]\n\
    \      capitals[#capitals+1] = capitals_count\n      lowercases[#lowercases+1]\
    \ = lowercases_count\n      if capitals_count > lowercases_count then\n      \
    \   capitals[#capitals] = capitals_count\n         lowercases[#lowercases] = lowercases_count\n\
    \      elseif capitals_count < lowercases_count then\n         capitals[#capitals]\
    \ = lowercases_count\n         lowercases[#lowercases] = capitals_count\n    \
    \  else\n         capitals[#capitals] = capitals_count\n         lowercases[#lowercases]\
    \ = capitals_count\n      end\n   end\n   for _, extension in ipairs(extensions)\
    \ do\n      local capitals_count = capitals[#capitals]\n      local lowercases_count\
    \ = lowercases[#lowercases]\n      if capitals_count > lowercases_count then\n\
    \         strongest_extension[#strongest_extension+1] = extension\n      elseif\
    \ capitals_count < lowercases_count then\n         strongest_extension[#strongest_extension+1]\
    \ = extension\n      else\n         strongest_extension[#strongest_extension+1]\
    \ = extension\n      end\n   end\n   for _, extension in ipairs(extensions) do\n\
    \      local capitals_count = capitals[#capitals]\n      local lowercases_count\
    \ = lowercases[#lowercases]\n      if capitals_count > lowercases_count then\n\
    \         capitals[#capitals] = capitals_count\n         lowercases[#lowercases]\
    \ = lowercases_count\n      elseif capitals_count < lowercases_count then\n  \
    \       capitals[#capitals] = lowercases_count\n         lowercases[#lowercases]\
    \ = capitals_count\n      else\n         capitals[#capitals] = capitals_count\n\
    \         lowercases[#lowercases] = capitals_count\n      end\n   end\n   for\
    \ _, extension in ipairs(extensions) do\n      local capitals_count = capitals[#capitals]\n\
    \      local lowercases_count = lowercases[#lowercases]\n      if capitals_count\
    \ > lowercases_count then\n         capitals[#capitals] = capitals_count\n   \
    \      lowercases[#lowercases] = lowercases_count\n      elseif capitals_count\
    \ < lowercases_count then\n         ", "  local strongest_extension = nil\n  local\
    \ strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local cap_diff = cap -\
    \ sm\n    if cap_diff > strongest_extension_strength then\n      strongest_extension_strength\
    \ = cap_diff\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend", "   local strongest_extension\
    \ = nil\n   local capitals = #class_name:gsub(\"%l\",\"\")\n   local lowercases\
    \ = #class_name:gsub(\"%L\",\"\")\n   for _, extension in ipairs(extensions) do\n\
    \      local capitals_extension = #extension:gsub(\"%l\",\"\")\n      local lowercases_extension\
    \ = #extension:gsub(\"%L\",\"\")\n      local strength = capitals - lowercases\n\
    \      if strength > 0 then\n         if capitals_extension > lowercases_extension\
    \ then\n            strongest_extension = extension\n         else\n         \
    \   strongest_extension = extension\n         end\n      end\n   end\n   return\
    \ strongest_extension\nend", "  local strongest_extension = nil\n  local extension_strength\
    \ = nil\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff ~= 0 then\n      if extension_strength\
    \ == nil then\n        extension_strength = cap_diff\n      else\n        extension_strength\
    \ = extension_strength * cap_diff + cap_diff\n      end\n    end\n  end\n  if\
    \ extension_strength ~= nil then\n    if extension_strength > 0 then\n      strongest_extension\
    \ = class_name .. '.' .. extension_strength\n    else\n      strongest_extension\
    \ = class_name .. '.' .. -extension_strength\n    end\n  end\n  return strongest_extension\n\
    end", "    local strongest_extension = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = string.upper(extension:sub(1, #extension))\n       \
    \ local sm = string.lower(extension:sub((#extension) + 1))\n        local strength\
    \ = cap - sm\n        if strength > 0 then\n            table.insert(strongest_extension,\
    \ extension)\n        end\n    end\n    table.sort(strongest_extension, function(a,\
    \ b) return strength > b end)\n    return class_name .. \".\" .. table.concat(strongest_extension,\
    \ \".\")\nend", "\tlocal strongest_extension = {}\n\tlocal capitals = {}\n\tlocal\
    \ lowercases = {}\n\tlocal strengths = {}\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal capitals_count = capitals[#capitals+1]\n\t\tlocal lowercases_count\
    \ = lowercases[#lowercases+1]\n\t\tlocal strengths_count = strengths[#strengths+1]\n\
    \t\tcapitals[#capitals+1] = string.upper(extension:sub(1, #extension))\n\t\tlowercases[#lowercases+1]\
    \ = string.lower(extension:sub(1, #extension))\n\t\tstrengths[#strengths+1] =\
    \ capitals_count-lowercases_count\n\tend\n\ttable.sort(capitals, function(a, b)\
    \ return capitals[a] < capitals[b] end)\n\ttable.sort(lowercases, function(a,\
    \ b) return lowercases[a] < lowercases[b] end)\n\ttable.sort(strengths, function(a,\
    \ b) return strengths[a] < strengths[b] end)\n\tlocal strongest_extension_strength\
    \ = strengths[#strengths]\n\tlocal strongest_extension_class = capitals[#capitals]\n\
    \tfor _, extension in ipairs(extensions) do\n\t\tlocal capitals_count = capitals[#capitals+1]\n\
    \t\tlocal lowercases_count = lowercases[#lowercases+1]\n\t\tlocal strengths_count\
    \ = strengths[#strengths+1]\n\t\tlocal extension_class = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal extension_strength = capitals_count-lowercases_count\n\
    \t\tif extension_strength > strongest_extension_strength then\n\t\t\tstrongest_extension_strength\
    \ = extension_strength\n\t\t\tstrongest_extension_class = extension_class\n\t\t\
    end\n\tend\n\treturn strongest_extension_class .. '.' .. strongest_extension_strength\n\
    end", "   local strongest_extension = {}\n   local cap_counter = 0\n   local sml_counter\
    \ = 0\n   for _, extension in ipairs(extensions) do\n      cap_counter = cap_counter\
    \ + #extension:upper()\n      sml_counter = sml_counter + #extension:lower()\n\
    \   end\n   if cap_counter - sml_counter > 0 then\n      strongest_extension[#strongest_extension\
    \ + 1] = class_name .. \".\" .. extensions[#extensions]\n   elseif cap_counter\
    \ - sml_counter == 0 then\n      strongest_extension[#strongest_extension + 1]\
    \ = class_name .. \".\" .. extensions[#extensions]\n   elseif cap_counter - sml_counter\
    \ < 0 then\n      local strength = cap_counter - sml_counter\n      for _, extension\
    \ in ipairs(extensions) do\n         if #extension:upper() == strength then\n\
    \            strongest_extension[#strongest_extension + 1] = class_name .. \"\
    .\" .. extension\n         end\n      end\n   end\n   return strongest_extension[#strongest_extension]\n\
    end", "   local strongest_extension = nil\n   local capitals = string.gsub(class_name,\
    \ '[A-Z]', '')\n   local lowercases = string.gsub(class_name, '[a-z]', '')\n \
    \  local capitals_count = #capitals\n   local lowercases_count = #lowercases\n\
    \   local strength = capitals_count - lowercases_count\n   for _, extension in\
    \ ipairs(extensions) do\n      local capitals_extension = string.gsub(extension,\
    \ '[A-Z]', '')\n      local lowercases_extension = string.gsub(extension, '[a-z]',\
    \ '')\n      local capitals_extension_count = #capitals_extension\n      local\
    \ lowercases_extension_count = #lowercases_extension\n      local extension_strength\
    \ = capitals_extension_count - lowercases_extension_count\n      if extension_strength\
    \ > strength then\n         strongest_extension = extension\n         strength\
    \ = extension_strength\n      end\n   end\n   return strongest_extension\nend",
  "  local strongest = {}\n  for _, extension in ipairs(extensions) do\n    local\
    \ cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1, #extension))\n    local strength = cap - sm\n    if strength > 0 then\n\
    \      table.insert(strongest, extension)\n    end\n  end\n  if #strongest ==\
    \ 0 then\n    return nil\n  end\n  table.sort(strongest)\n  return class_name\
    \ .. '.' .. strongest[1]\nend", "   local strongest_extension = {}\n   for _,\
    \ extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1,\
    \ #extension))\n      local strength = cap - sm\n      if strength > 0 then\n\
    \         table.insert(strongest_extension, extension)\n      elseif strength\
    \ == 0 then\n         table.insert(strongest_extension, extension)\n      elseif\
    \ strength < 0 then\n         table.insert(strongest_extension, extension)\n \
    \     end\n   end\n   table.sort(strongest_extension, function(a, b) return a\
    \ > b end)\n   return class_name .. \".\" .. table.concat(strongest_extension,\
    \ \".\")\nend", "    local cap_extensions = {}\n    local sm_extensions = {}\n\
    \    for _, extension in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1))\n\
    \        cap_extensions[cap] = cap_extensions[cap] or 0\n        cap_extensions[cap]\
    \ = cap_extensions[cap] + 1\n        sm_extensions[sm] = sm_extensions[sm] or\
    \ 0\n        sm_extensions[sm] = sm_extensions[sm] + 1\n    end\n    local max_strength\
    \ = -1\n    local max_extension\n    for _, extension in ipairs(extensions) do\n\
    \        local cap = string.upper(extension:sub(1, #extension))\n        local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n        if cap_extensions[cap]\
    \ > sm_extensions[sm] then\n            max_strength = cap_extensions[cap] - sm_extensions[sm]\n\
    \            max_extension = extension\n        end\n    end\n    return class_name\
    \ .. '.' .. max_extension\nend", "   local strongest_extension = {}\n   for _,\
    \ extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      end\n   end\n   if #strongest_extension == 1 then\n      return\
    \ class_name .. \".\" .. strongest_extension[1]\n   else\n      local strongest_extension_strength\
    \ = #strongest_extension\n      for _, extension in ipairs(strongest_extension)\
    \ do\n         strongest_extension_strength = strongest_extension_strength - 1\n\
    \      end\n      return class_name .. \".\" .. strongest_extension[strongest_extension_strength]\n\
    \   end\nend", "   local cap = #class_name:upper()\n   local sm = #class_name:lower()\n\
    \   local cap_extensions = {}\n   local sm_extensions = {}\n   for _, extension\
    \ in ipairs(extensions) do\n      local cap_ext = #extension:upper()\n      local\
    \ sm_ext = #extension:lower()\n      local cap_strength = cap_ext - cap\n    \
    \  local sm_strength = sm_ext - sm\n      if cap_strength > sm_strength then\n\
    \         cap_extensions[#cap_extensions + 1] = extension\n      else\n      \
    \   sm_extensions[#sm_extensions + 1] = extension\n      end\n   end\n   if #cap_extensions\
    \ > 1 then\n      cap_extensions[#cap_extensions + 1]\n   elseif #sm_extensions\
    \ > 1 then\n      sm_extensions[#sm_extensions + 1]\n   else\n      extensions[1]\n\
    \   end\nend", "\tlocal strongest = {}\n\tlocal capitals = {}\n\tlocal sms = {}\n\
    \tfor _, extension in ipairs(extensions) do\n\t\tlocal capitals = string.gsub(extension,\
    \ \"[A-Z]\", \"\")\n\t\tlocal sms = string.gsub(extension, \"[a-z]\", \"\")\n\t\
    \tlocal capitals_count = tonumber(capitals)\n\t\tlocal sms_count = tonumber(sms)\n\
    \t\tlocal strength = capitals_count - sms_count\n\t\tif strength > 0 then\n\t\t\
    \ttable.insert(strongest, extension)\n\t\tend\n\tend\n\ttable.sort(strongest)\n\
    \treturn class_name .. \".\" .. table.concat(strongest, \".\")\nend", "   local\
    \ cap_extensions = {}\n   local sml_extensions = {}\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sml = string.lower(extension:sub(1, #extension))\n      cap_extensions[cap]\
    \ = cap_extensions[cap] or {}\n      cap_extensions[cap][sml] = cap_extensions[cap][sml]\
    \ or 1\n      sml_extensions[sml] = sml_extensions[sml] or {}\n      sml_extensions[sml][cap]\
    \ = sml_extensions[sml][cap] or 1\n   end\n   local max_cap, min_sml = nil, nil\n\
    \   local max_sml, min_cap = nil, nil\n   for cap, smls in pairs(cap_extensions)\
    \ do\n      if cap > max_cap then\n         max_cap = cap\n      end\n      if\
    \ cap < min_cap then\n         min_cap = cap\n      end\n      for sml, caps in\
    \ pairs(smls) do\n         if cap > max_cap then\n            max_cap = cap\n\
    \         end\n         if cap < min_cap then\n            min_cap = cap\n   \
    \      end\n         if smls > max_smls then\n            max_smls = smls\n  \
    \       end\n         if smls < min_smls then\n            min_smls = smls\n \
    \        end\n      end\n   end\n   if max_cap == min_cap then\n      return class_name\n\
    \   else\n      return class_name .. '.' .. max_cap .. '_' .. min_sml\n   end\n\
    end", "   local capitals = {}\n   local lowercases = {}\n   for _, extension in\
    \ ipairs(extensions) do\n      local capitals_count = tonumber(extension:sub(1,\
    \ capitals:len()))\n      local lowercases_count = tonumber(extension:sub(capitals:len(),\
    \ capitals_count))\n      capitals[extension] = capitals_count\n      lowercases[extension]\
    \ = lowercases_count\n   end\n   local max_strength = -1\n   local max_extension\n\
    \   for _, extension in ipairs(extensions) do\n      if capitals[extension] >\
    \ lowercases[extension] then\n         max_strength = capitals[extension] - lowercases[extension]\n\
    \         max_extension = extension\n      end\n   end\n   return class_name ..\
    \ \".\" .. max_extension\nend", "   local strongest = {}\n   for _, extension\
    \ in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1, #extension))\n\
    \      local sm = string.lower(extension:sub((#extension) + 1))\n      local strength\
    \ = cap - sm\n      if strength > 0 then\n         table.insert(strongest, extension)\n\
    \      end\n   end\n   if #strongest == 0 then\n      return class_name\n   else\n\
    \      local strongest_extension = strongest[1]\n      for _, extension in ipairs(strongest)\
    \ do\n         if extension:sub(1, #extension) == strongest_extension then\n \
    \           strongest_extension = extension\n         end\n      end\n      return\
    \ class_name .. '.' .. strongest_extension\n   end\nend", "  -- Your code here\n\
    end", "   local strongest_extension = {}\n   local capitals = {}\n   local sms\
    \ = {}\n   for _, extension in ipairs(extensions) do\n      local capitals_count\
    \ = capitals[#capitals+1]\n      local sms_count = sms[#sms+1]\n      capitals[#capitals+1]\
    \ = #(extension:gsub(\"%l\",\"\"))\n      sms[#sms+1] = #(extension:gsub(\"%L\"\
    ,\"\"))\n      local capitals_diff = capitals[#capitals] - capitals_count\n  \
    \    local sms_diff = sms[#sms] - sms_count\n      if capitals_diff > sms_diff\
    \ then\n         strongest_extension[#strongest_extension+1] = extension\n   \
    \   else\n         strongest_extension[#strongest_extension+1] = extension\n \
    \     end\n   end\n   for _, extension in ipairs(strongest_extension) do\n   \
    \   local capitals_count = capitals[#capitals+1]\n      local sms_count = sms[#sms+1]\n\
    \      capitals[#capitals+1] = #(extension:gsub(\"%l\",\"\"))\n      sms[#sms+1]\
    \ = #(extension:gsub(\"%L\",\"\"))\n      local capitals_diff = capitals[#capitals]\
    \ - capitals_count\n      local sms_diff = sms[#sms] - sms_count\n      if capitals_diff\
    \ > sms_diff then\n         return class_name .. \".\" .. extension\n      else\n\
    \         return class_name .. \".\" .. extension\n      end\n   end\nend", " \
    \  local strongest_extension = {}\n   for _, extension in ipairs(extensions) do\n\
    \      local cap = string.upper(extension:sub(1, #extension))\n      local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n      local strength = cap\
    \ - sm\n      if strength == 0 then\n         return nil\n      elseif strength\
    \ > 0 then\n         table.insert(strongest_extension, extension)\n      elseif\
    \ strength < 0 then\n         table.insert(strongest_extension, extension)\n \
    \     end\n   end\n   if #strongest_extension == 1 then\n      return class_name\
    \ .. \".\" .. strongest_extension[1]\n   else\n      return class_name .. \".\"\
    \ .. strongest_extension[1]\n   end\nend", "   local strongest_extension = {}\n\
    \   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      elseif strength == 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      else\n         table.insert(strongest_extension, extension)\n\
    \         table.insert(strongest_extension, extension)\n      end\n   end\n  \
    \ table.sort(strongest_extension, function(a, b) return a:upper() < b:upper()\
    \ end)\n   return class_name .. \".\" .. table.concat(strongest_extension, \"\
    .\")\nend", "   local strongest_extension = {}\n   local capitals = {}\n   local\
    \ smalls = {}\n   for _, extension in ipairs(extensions) do\n      local capitals_count\
    \ = string.gsub(extension, \"[A-Z]\", \"\"):len()\n      local smalls_count =\
    \ string.gsub(extension, \"[a-z]\", \"\"):len()\n      capitals[capitals_count]\
    \ = capitals_count\n      smalls[smalls_count] = smalls_count\n   end\n   local\
    \ max_capitals = max(capitals)\n   local max_smalls = max(smalls)\n   for _, extension\
    \ in ipairs(extensions) do\n      local capitals_count = string.gsub(extension,\
    \ \"[A-Z]\", \"\"):len()\n      local smalls_count = string.gsub(extension, \"\
    [a-z]\", \"\"):len()\n      if capitals_count == max_capitals and smalls_count\
    \ == max_smalls then\n         strongest_extension[extension] = -1\n      elseif\
    \ capitals_count == max_capitals then\n         strongest_extension[extension]\
    \ = capitals_count\n      elseif smalls_count == max_smalls then\n         strongest_extension[extension]\
    \ = smalls_count\n      else\n         strongest_extension[extension] = capitals_count\
    \ - smalls_count\n      end\n   end\n   local max_strength = max(tonumber(strongest_extension))\n\
    \   for _, extension in ipairs(extensions) do\n      if tonumber(strongest_extension[extension])\
    \ == max_strength then\n         return class_name .. \".\" .. extension\n   \
    \   end\n   end\nend", "\tlocal strongest_extension = nil\n\tlocal capitals =\
    \ string.gsub(class_name, '[A-Z]', '')\n\tlocal lowercases = string.gsub(class_name,\
    \ '[a-z]', '')\n\tlocal capitals_count = tonumber(capitals)\n\tlocal lowercases_count\
    \ = tonumber(lowercases)\n\tlocal strength = capitals_count - lowercases_count\n\
    \tfor _, extension in pairs(extensions) do\n\t\tlocal capitals_extension = string.gsub(extension,\
    \ '[A-Z]', '')\n\t\tlocal lowercases_extension = string.gsub(extension, '[a-z]',\
    \ '')\n\t\tlocal capitals_extension_count = tonumber(capitals_extension)\n\t\t\
    local lowercases_extension_count = tonumber(lowercases_extension)\n\t\tlocal extension_strength\
    \ = capitals_extension_count - lowercases_extension_count\n\t\tif extension_strength\
    \ > 0 then\n\t\t\tif extension_strength > strength then\n\t\t\t\tstrongest_extension\
    \ = extension\n\t\t\t\tstrength = extension_strength\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn strongest_extension\nend", "   local strongest_extension = nil\n   local\
    \ strongest_extension_strength = -1\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n      local strength = cap\
    \ - sm\n      if strength > strongest_extension_strength then\n         strongest_extension_strength\
    \ = strength\n         strongest_extension = extension\n      end\n   end\n  \
    \ return class_name .. '.' .. strongest_extension\nend", "   local strongest_extension\
    \ = {}\n   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      end\n   end\n   if #strongest_extension == 1 then\n      return\
    \ class_name .. \".\" .. strongest_extension[1]\n   else\n      return class_name\
    \ .. \".\" .. strongest_extension[1]\n   end\nend", "   local strongest_extension\
    \ = {}\n   local capitals = {}\n   local lowercases = {}\n   for _, extension\
    \ in ipairs(extensions) do\n      local capitals_count = capitals[#capitals]\n\
    \      local lowercases_count = lowercases[#lowercases]\n      capitals[#capitals+1]\
    \ = #extension\n      lowercases[#lowercases+1] = #extension\n      local capitals_extension\
    \ = extension:sub(1, #extension - capitals_count)\n      local lowercases_extension\
    \ = extension:sub(1, #extension - lowercases_count)\n      local capitals_count\
    \ = #capitals_extension\n      local lowercases_count = #lowercases_extension\n\
    \      local capitals_extension_length = capitals_count - lowercases_count\n \
    \     local lowercases_extension_length = lowercases_count - capitals_count\n\
    \      if capitals_extension_length == lowercases_extension_length then\n    \
    \     strongest_extension[#strongest_extension+1] = class_name .. '.' .. capitals_extension\
    \ .. '.' .. lowercases_extension\n      else\n         strongest_extension[#strongest_extension+1]\
    \ = class_name .. '.' .. capitals_extension .. '.' .. lowercases_extension ..\
    \ '.' .. capitals_extension_length .. '.' .. lowercases_extension_length\n   \
    \   end\n   end\n   local strongest_extension_length = #strongest_extension\n\
    \   if strongest_extension_length > 1 then\n      local strongest_extension_strength\
    \ = capitals[#capitals] - lowercases[#lowercases]\n      for _, strongest_extension\
    \ in ipairs(strongest_extension) do\n         if strongest_extension_strength\
    \ > strongest_extension_length then\n            strongest_extension_length =\
    \ strongest_extension_strength\n         end\n         strongest_extension_strength\
    \ = strongest_extension_strength + 1\n      end\n   end\n   return strongest_extension[1]\n\
    end", "  local strongest = {}\n  for _, extension in ipairs(extensions) do\n \
    \   local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  table.sort(strongest)\n  return class_name ..\
    \ \".\" .. table.concat(strongest, \".\")\nend", "   local strongest = {}\n  \
    \ for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > 0 then\n         table.insert(strongest,\
    \ extension)\n      elseif strength == 0 then\n         table.insert(strongest,\
    \ extension)\n      elseif strength < 0 then\n         table.insert(strongest,\
    \ extension)\n      end\n   end\n   if #strongest == 1 then\n      return class_name\
    \ .. \".\" .. strongest[1]\n   else\n      return class_name .. \".\" .. strongest[1]\n\
    \   end\nend", "   local capitals = {}\n   local lowercases = {}\n   for _, extension\
    \ in ipairs(extensions) do\n      local capitals = capitals or {}\n      local\
    \ lowercases = lowercases or {}\n      for _, c in ipairs(extension:gsub(\"%c\"\
    , function (c) return c:upper() end)) do\n         capitals[c] = capitals[c] or\
    \ 0\n         capitals[c] = capitals[c] + 1\n      end\n      for _, l in ipairs(extension:gsub(\"\
    %l\", function (l) return l:lower() end)) do\n         lowercases[l] = lowercases[l]\
    \ or 0\n         lowercases[l] = lowercases[l] + 1\n      end\n   end\n   local\
    \ max_strength = -1\n   local max_extension\n   for _, c in ipairs(capitals) do\n\
    \      if capitals[c] > max_strength then\n         max_strength = capitals[c]\n\
    \         max_extension = c\n      end\n   end\n   for _, l in ipairs(lowercases)\
    \ do\n      if lowercases[l] > max_strength then\n         max_strength = lowercases[l]\n\
    \         max_extension = l\n      end\n   end\n   return class_name .. \".\"\
    \ .. max_extension\nend", "  local capitals = {}\n  local lowercases = {}\n  for\
    \ _, extension in ipairs(extensions) do\n    capitals[#capitals + 1] = string.upper(extension:sub(1,\
    \ #extension))\n    lowercases[#lowercases + 1] = string.lower(extension:sub(1,\
    \ #extension))\n  end\n  local cap = #capitals\n  local sm = #lowercases\n  local\
    \ strength = cap - sm\n  for _, extension in ipairs(extensions) do\n    local\
    \ cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub(1,\
    \ #extension))\n    local diff = cap - sm\n    if diff ~= 0 then\n      local\
    \ strength_diff = strength - diff\n      if strength_diff > 0 then\n        local\
    \ index = #capitals + 1\n        if capitals[index] == capitals[#capitals] then\n\
    \          index = #lowercases + 1\n        end\n        return class_name ..\
    \ \".\" .. capitals[index] .. \".\" .. lowercases[index]\n      end\n    end\n\
    \  end\nend", "   local strongest_extension = {}\n   local capitals = {}\n   local\
    \ sms = {}\n   for _, extension in ipairs(extensions) do\n      local capitals_count\
    \ = capitals[#capitals+1]\n      local sms_count = sms[#sms+1]\n      local capitals_index\
    \ = #capitals\n      local sms_index = #sms\n      for i, c in ipairs(extension)\
    \ do\n         if c == 'A' or c == 'B' or c == 'C' or c == 'D' or c == 'E' or\
    \ c == 'F' or c == 'G' or c == 'H' or c == 'I' or c == 'J' or c == 'K' or c ==\
    \ 'L' or c == 'M' or c == 'N' or c == 'O' or c == 'P' or c == 'Q' or c == 'R'\
    \ or c == 'S' or c == 'T' or c == 'U' or c == 'V' or c == 'W' or c == 'X' or c\
    \ == 'Y' or c == 'Z' then\n            capitals[#capitals+1] = capitals_count\n\
    \            sms[#sms+1] = sms_count\n            capitals_index = #capitals\n\
    \            sms_index = #sms\n         else\n            capitals[capitals_index]\
    \ = capitals_count\n            sms[sms_index] = sms_count\n         end\n   \
    \   end\n   end\n   local capitals_count = capitals[#capitals]\n   local sms_count\
    \ = sms[#sms]\n   if capitals_count > sms_count then\n      strongest_extension[#strongest_extension+1]\
    \ = class_name .. '.' .. extensions[#extensions]\n   else\n      strongest_extension[#strongest_extension+1]\
    \ = class_name .. '.' .. extensions[#extensions] .. '.' .. extensions[#extensions]\n\
    \   end\n   return strongest_extension\nend", "   local strongest = {}\n   for\
    \ _, extension in ipairs(extensions) do\n      local cap = #extension:upper()\n\
    \      local sm = #extension:lower()\n      local strength = cap - sm\n      if\
    \ strongest[strength] == nil then\n         strongest[strength] = extension\n\
    \      elseif strongest[strength] > extension then\n         strongest[strength]\
    \ = extension\n      end\n   end\n   return class_name .. '.' .. table.concat(strongest,\
    \ ' ')\nend", "  -- Write your code here\nend", "  local cap_sum = 0\n  local\
    \ sml_sum = 0\n  local max_strength = -1\n  local max_extension = \"\"\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sml = string.lower(extension:sub(1, #extension))\n \
    \   cap_sum = cap_sum + cap\n    sml_sum = sml_sum + sml\n    if cap > max_strength\
    \ then\n      max_strength = cap\n      max_extension = extension\n    end\n \
    \ end\n  if cap_sum - sml_sum > 0 then\n    max_strength = cap_sum - sml_sum\n\
    \    max_extension = extensions[1]\n  end\n  return class_name .. \".\" .. max_extension\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      if strongest_extension_strength\
    \ == -1 or strength > strongest_extension_strength then\n        strongest_extension_strength\
    \ = strength\n        strongest_extension = extension\n      end\n    end\n  end\n\
    \  return class_name .. '.' .. strongest_extension\nend", "   local strongest\
    \ = {}\n   local capitals = {}\n   local sm = 0\n   for _, extension in ipairs(extensions)\
    \ do\n      local capitals_count = tonumber(extension:sub(1,1):upper())\n    \
    \  local sm = tonumber(extension:sub(1,2):lower())\n      capitals[capitals_count]\
    \ = capitals_count\n      sm = sm * capitals_count\n   end\n   capitals = capitals[1]\n\
    \   for _, extension in ipairs(extensions) do\n      local capitals_count = tonumber(extension:sub(1,1):upper())\n\
    \      local sm = tonumber(extension:sub(1,2):lower())\n      local strength =\
    \ capitals[capitals_count] - sm\n      if strength > 0 then\n         strongest[extension]\
    \ = strength\n      end\n   end\n   table.sort(strongest)\n   return strongest[1]\n\
    end", "   local strongest_extension = {}\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n      local strength = cap\
    \ - sm\n      if strength > 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      end\n   end\n   if #strongest_extension == 1 then\n      return\
    \ strongest_extension[1]\n   else\n      return nil\n   end\nend", "   local strongest_extension\
    \ = nil\n   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1,\
    \ #extension))\n      local strength = cap - sm\n      if strength > 0 then\n\
    \         if strongest_extension == nil then\n            strongest_extension\
    \ = extension\n         elseif strength < 0 then\n            strongest_extension\
    \ = extension\n         end\n      end\n   end\n   return class_name .. '.' ..\
    \ strongest_extension\nend", "    local strongest_extension = nil\n    local strongest_extension_strength\
    \ = -1\n    for _, extension in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1))\n\
    \        local cap_diff = cap - sm\n        if cap_diff > 0 then\n           \
    \ if strongest_extension_strength == -1 or cap_diff > strongest_extension_strength\
    \ then\n                strongest_extension_strength = cap_diff\n            \
    \    strongest_extension = extension\n            end\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend", "  local strongest\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  table.sort(strongest)\n  return class_name ..\
    \ '.' .. table.concat(strongest, '.')\nend", "\tlocal strongest_extension = {}\n\
    \tlocal capitals = {}\n\tlocal smalls = {}\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal capitals_count = string.gsub(extension:sub(1, string.len(extension)\
    \ - 1), '[A-Z]', '') \n\t\tlocal smalls_count = string.gsub(extension:sub(1, string.len(extension)\
    \ - 1), '[a-z]', '') \n\t\tcapitals[capitals_count] = capitals_count\n\t\tsmalls[smalls_count]\
    \ = smalls_count\n\tend\n\tlocal capitals_count = #capitals\n\tlocal smalls_count\
    \ = #smalls\n\tlocal capitals_strength = capitals_count - smalls_count\n\tlocal\
    \ smalls_strength = smalls_count - capitals_count\n\tlocal strength = capitals_strength\
    \ + smalls_strength\n\tif capitals_strength > smalls_strength then\n\t\ttable.insert(strongest_extension,\
    \ class_name .. \".\" .. capitals[capitals_count])\n\telse\n\t\ttable.insert(strongest_extension,\
    \ class_name .. \".\" .. smalls[smalls_count])\n\tend\n\ttable.sort(strongest_extension,\
    \ function(a, b)\n\t\treturn capitals[a] - capitals[b]\n\tend)\n\treturn strongest_extension[1]\n\
    end", "  local cap_extensions = {}\n  local sml_extensions = {}\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sml = string.lower(extension:sub(1, #extension))\n    local cap_strength\
    \ = cap - sml\n    table.insert(cap_extensions, cap_strength)\n    table.insert(sml_extensions,\
    \ sml)\n  end\n  table.sort(cap_extensions)\n  table.sort(sml_extensions)\n  local\
    \ strongest_extension = cap_extensions[#cap_extensions]\n  if #cap_extensions\
    \ > 1 then\n    local cap_extension_strength = cap_extensions[#cap_extensions\
    \ - 1]\n    for _, extension in ipairs(extensions) do\n      local sml = string.lower(extension:sub(1,\
    \ #extension))\n      local cap = string.upper(extension:sub(1, #extension))\n\
    \      local cap_strength = cap - sml\n      if cap_strength > cap_extension_strength\
    \ then\n        strongest_extension = extension\n        cap_extension_strength\
    \ = cap_strength\n      end\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "   local strongest = {}\n   local capitals = {}\n   local sms = {}\n  \
    \ for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#cap + 1), #extension))\n\
    \      capitals[cap] = capitals[cap] or 0\n      sms[sm] = sms[sm] or 0\n    \
    \  capitals[cap] = capitals[cap] + 1\n      sms[sm] = sms[sm] + 1\n   end\n  \
    \ for cap, count in pairs(capitals) do\n      strongest[cap] = count / #extensions\n\
    \   end\n   for sm, count in pairs(sms) do\n      strongest[sm] = strongest[sm]\
    \ / #extensions\n   end\n   local strongest_extension = nil\n   local max_strength\
    \ = -1\n   for cap, strength in pairs(strongest) do\n      if strength > max_strength\
    \ then\n         max_strength = strength\n         strongest_extension = cap\n\
    \      end\n   end\n   return string.format(class_name .. '.%s', strongest_extension)\n\
    end", "\tlocal strongest_extension = {}\n\tlocal capitals = {}\n\tlocal lowercases\
    \ = {}\n\tlocal strengths = {}\n\tfor _, extension in ipairs(extensions) do\n\t\
    \tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension)\
    \ + 1))\n\t\tcapitals[cap] = capitals[cap] or 0\n\t\tcapitals[cap] = capitals[cap]\
    \ + 1\n\t\tlowercases[sm] = lowercases[sm] or 0\n\t\tlowercases[sm] = lowercases[sm]\
    \ + 1\n\t\tstrengths[cap] = strengths[cap] or 0\n\t\tstrengths[cap] = strengths[cap]\
    \ + 1\n\tend\n\tlocal max_capitals = #capitals\n\tlocal max_lowercases = #lowercases\n\
    \tlocal max_strengths = #strengths\n\tlocal max_strength = max_capitals - max_lowercases\n\
    \tlocal max_strength_extension = max_strength - max_lowercases\n\tfor _, extension\
    \ in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\
    \t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\t\tlocal cap_strength\
    \ = capitals[cap] - lowercases[sm]\n\t\tlocal sm_strength = lowercases[sm] - capitals[cap]\n\
    \t\tlocal cap_lowercase_strength = capitals[cap] - lowercases[sm]\n\t\tlocal sm_lowercase_strength\
    \ = lowercases[sm] - capitals[cap]\n\t\tif cap_strength > max_strength then\n\t\
    \t\tmax_strength = cap_strength\n\t\t\tstrongest_extension = cap\n\t\tend\n\t\t\
    if sm_strength > max_strength then\n\t\t\tmax_strength = sm_strength\n\t\t\tstrongest_extension\
    \ = sm\n\t\tend\n\t\tif cap_lowercase_strength > max_lowercase_strength then\n\
    \t\t\tmax_lowercase_strength = cap_lowercase_strength\n\t\t\tstrongest_extension\
    \ = cap\n\t\tend\n\t\tif sm_lowercase_strength > max_lowercase_strength then\n\
    \t\t\tmax_lowercase_strength = sm_lowercase_strength\n\t\t\tstrongest_extension\
    \ = sm\n\t\tend\n\tend\n\treturn class_name .. '.' .. strongest_extension\nend",
  "   local strongest_extension = nil\n   local capitals = {}\n   local lowercases\
    \ = {}\n   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      capitals[cap] = capitals[cap] or 0\n      capitals[cap] = capitals[cap]\
    \ + 1\n      lowercases[sm] = lowercases[sm] or 0\n      lowercases[sm] = lowercases[sm]\
    \ + 1\n   end\n   local cap_strength = #capitals\n   local sm_strength = #lowercases\n\
    \   if cap_strength > sm_strength then\n      strongest_extension = class_name\n\
    \   else\n      strongest_extension = class_name .. \".\" .. extensions[#extensions]\n\
    \   end\n   for _, extension in ipairs(extensions) do\n      if capitals[extension:sub(1,\
    \ #extension)] > lowercases[extension:sub((#extension) + 1)] then\n         strongest_extension\
    \ = strongest_extension .. \".\" .. extension\n      end\n   end\n   return strongest_extension\n\
    end", "   local strongest_extension = {}\n   local capitals = {}\n   local sms\
    \ = {}\n   for _, extension in ipairs(extensions) do\n      local capitals_count\
    \ = string.gsub(extension, \"[A-Z]\", \"\"):len()\n      local sms_count = string.gsub(extension,\
    \ \"[a-z]\", \"\"):len()\n      capitals[capitals_count] = capitals_count\n  \
    \    sms[sms_count] = sms_count\n   end\n   local capitals_count = #capitals\n\
    \   local sms_count = #sms\n   local max_capitals = capitals_count\n   local max_sms\
    \ = sms_count\n   for _, extension in ipairs(extensions) do\n      local capitals_count\
    \ = string.gsub(extension, \"[A-Z]\", \"\"):len()\n      local sms_count = string.gsub(extension,\
    \ \"[a-z]\", \"\"):len()\n      if capitals_count > max_capitals then\n      \
    \   max_capitals = capitals_count\n      end\n      if sms_count > max_sms then\n\
    \         max_sms = sms_count\n      end\n   end\n   if max_capitals > max_sms\
    \ then\n      strongest_extension = class_name..\".\"..extensions[max_capitals]\n\
    \   else\n      strongest_extension = class_name..\".\"..extensions[max_sms]\n\
    \   end\n   return strongest_extension\nend", "   local strongest_extension =\
    \ {}\n   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      else\n         table.insert(strongest_extension, extension)\n\
    \         table.insert(strongest_extension, extension)\n      end\n   end\n  \
    \ table.sort(strongest_extension, function(a, b) return strength < b end)\n  \
    \ return class_name .. \".\" .. table.concat(strongest_extension, \"\")\nend",
  "   local strongest_extension = {}\n   for _, extension in ipairs(extensions) do\n\
    \      local cap = string.upper(extension:sub(1, #extension))\n      local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n      local strength = cap\
    \ - sm\n      if strength > 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      end\n   end\n   if #strongest_extension == 1 then\n      return\
    \ class_name .. \".\" .. strongest_extension[1]\n   else\n      local strongest_extension_strength\
    \ = #strongest_extension\n      for _, extension in ipairs(extensions) do\n  \
    \       local cap = string.upper(extension:sub(1, #extension))\n         local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n         local strength\
    \ = cap - sm\n         if strength > strongest_extension_strength then\n     \
    \       strongest_extension_strength = strength\n         end\n      end\n   \
    \   return class_name .. \".\" .. strongest_extension[1]\n   end\nend", "   local\
    \ strongest = {}\n   for _, extension in ipairs(extensions) do\n      local cap\
    \ = string.upper(extension:sub(1, #extension))\n      local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n      local strength = cap - sm\n      if strength > 0 then\n       \
    \  table.insert(strongest, extension)\n      end\n   end\n   if #strongest ==\
    \ 1 then\n      return class_name .. \".\" .. strongest[1]\n   else\n      return\
    \ class_name .. \".\" .. strongest[1]\n   end\nend", "  local strongest_extension\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  if #strongest_extension == 1 then\n    return\
    \ class_name .. '.' .. strongest_extension[1]\n  end\n  table.sort(strongest_extension)\n\
    \  return class_name .. '.' .. strongest_extension[1]\nend", "  local strongest_extension\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extension, function(a, b)\
    \ return strength < b end)\n  return class_name .. '.' .. table.concat(strongest_extension,\
    \ '.')\nend", "   local strongest = {}\n   local capitals = {}\n   local sm =\
    \ 0\n   for _, extension in ipairs(extensions) do\n      local capitals = string.gsub(extension,\
    \ \"[A-Z]\", \"\")\n      local capitals = string.gsub(capitals, \"[a-z]\", \"\
    \")\n      local capitals = string.gsub(capitals, \"[A-Z]\", \"\")\n      local\
    \ capitals = string.gsub(capitals, \"[a-z]\", \"\")\n      local capitals = string.gsub(capitals,\
    \ \"[A-Z]\", \"\")\n      local capitals = string.gsub(capitals, \"[a-z]\", \"\
    \")\n      local capitals = string.gsub(capitals, \"[A-Z]\", \"\")\n      local\
    \ capitals = string.gsub(capitals, \"[a-z]\", \"\")\n      local capitals = string.gsub(capitals,\
    \ \"[A-Z]\", \"\")\n      local capitals = string.gsub(capitals, \"[a-z]\", \"\
    \")\n      local capitals = string.gsub(capitals, \"[A-Z]\", \"\")\n      local\
    \ capitals = string.gsub(capitals, \"[a-z]\", \"\")\n      local capitals = string.gsub(capitals,\
    \ \"[A-Z]\", \"\")\n      local capitals = string.gsub(capitals, \"[a-z]\", \"\
    \")\n      local capitals = string.gsub(capitals, \"[A-Z]\", \"\")\n      local\
    \ capitals = string.gsub(capitals, \"[a-z]\", \"\")\n      local capitals = string.gsub(capitals,\
    \ \"[A-Z]\", \"\")\n      local capitals = string.gsub(capitals, \"[a-z]\", \"\
    \")\n      local capitals = string.gsub(capitals, \"[A-Z]\", \"\")\n      local\
    \ capitals = string.gsub(capitals, \"[a-z]\", \"\")\n      local capitals = string.gsub(capitals,\
    \ \"[A-Z]\", \"\")\n      local capitals = string.gsub(capitals, \"[a-z]\", \"\
    \")\n      local capitals = string.gsub(capitals, \"[A-Z]\", \"\")\n      local\
    \ capitals = string.gsub(capitals, \"[a-z]\", \"\")\n      local capitals = string.gsub(capitals,\
    \ \"[A-Z]\", \"\")\n      local capitals = string.gsub(capitals, \"[a-z]\", \"\
    \")\n      local capitals = string.gsub(capitals, \"[A-Z]\", \"\")\n      local\
    \ capitals = string.gsub(capitals, \"[a-z]\", \"\")\n      local capitals = string.gsub(capitals,\
    \ \"[A-Z]\", \"\")\n      local capitals = string.gsub(capitals, \"[a-z]\", \"\
    \")\n      local capitals = string.gsub(capitals, \"[A-Z]\", \"\")\n      local\
    \ capitals = string.gsub(capitals, \"[a-z]\", \"\")\n      local cap", "   local\
    \ strongest_extension = {}\n   for _, extension in ipairs(extensions) do\n   \
    \   local cap = string.upper(extension:sub(1, #extension))\n      local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n      local strength = cap - sm\n      if strength == 0 then\n      \
    \   return nil\n      elseif strength > 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      elseif strength < 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      end\n   end\n   return class_name .. '.' .. table.concat(strongest_extension,\
    \ '.')\nend", "   local strongest = {}\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n      local strength = cap\
    \ - sm\n      if strength > 0 then\n         table.insert(strongest, extension)\n\
    \      end\n   end\n   if #strongest == 1 then\n      return class_name .. \"\
    .\" .. strongest[1]\n   else\n      return class_name .. \".\" .. strongest[1]\n\
    \   end\nend", "    local strongest = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = string.upper(extension:sub(1, #extension))\n       \
    \ local sm = string.lower(extension:sub((#extension) + 1))\n        local strength\
    \ = cap - sm\n        if strength > 0 then\n            table.insert(strongest,\
    \ extension)\n        end\n    end\n    table.sort(strongest)\n    return class_name\
    \ .. '.' .. table.concat(strongest, '.')\nend", "  local cap_sum = 0\n  local\
    \ sml_sum = 0\n  for _, extension in ipairs(extensions) do\n    cap_sum = cap_sum\
    \ + #extension:upper()\n    sml_sum = sml_sum + #extension:lower()\n  end\n  return\
    \ class_name .. \".\" .. extensions[cap_sum - sml_sum]\nend", "   local strongest_extension\
    \ = {}\n   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1,\
    \ #extension))\n      local strength = cap - sm\n      if strength > 0 then\n\
    \         table.insert(strongest_extension, extension)\n      elseif strength\
    \ == 0 then\n         table.insert(strongest_extension, extension)\n      elseif\
    \ strength < 0 then\n         table.insert(strongest_extension, extension)\n \
    \     end\n   end\n   if #strongest_extension == 1 then\n      return class_name\
    \ .. \".\" .. strongest_extension[1]\n   else\n      return class_name .. \".\"\
    \ .. strongest_extension[1]\n   end\nend", "   local strongest = {}\n   for _,\
    \ extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > 0 then\n         table.insert(strongest,\
    \ extension)\n      end\n   end\n   if #strongest == 0 then\n      return nil\n\
    \   end\n   local strongest_extension = strongest[1]\n   for _, extension in ipairs(strongest)\
    \ do\n      if extension:sub(1, #strongest_extension) == strongest_extension then\n\
    \         strongest_extension = extension\n      end\n   end\n   return string.format(class_name\
    \ .. \".%s\", strongest_extension)\nend", "   local strongest = {}\n   for _,\
    \ extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1,\
    \ #extension))\n      local strength = cap - sm\n      if strength > 0 then\n\
    \         table.insert(strongest, extension)\n      end\n   end\n   if #strongest\
    \ == 0 then\n      return class_name\n   else\n      return class_name .. \".\"\
    \ .. table.concat(strongest, \" \")\n   end\nend", "   local strongest = {}\n\
    \   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > 0 then\n         table.insert(strongest,\
    \ extension)\n      end\n   end\n   if #strongest == 1 then\n      return class_name\
    \ .. \".\" .. strongest[1]\n   else\n      local strengths = {}\n      for _,\
    \ extension in ipairs(strongest) do\n         local cap = string.upper(extension:sub(1,\
    \ #extension))\n         local sm = string.lower(extension:sub((#extension) +\
    \ 1))\n         table.insert(strengths, cap - sm)\n      end\n      local max_strength\
    \ = #strengths\n      for _, strength in ipairs(strengths) do\n         if strength\
    \ > max_strength then\n            max_strength = strength\n         end\n   \
    \   end\n      return class_name .. \".\" .. strongest[max_strength]\n   end\n\
    end", "   local strongest = {}\n   for _, extension in ipairs(extensions) do\n\
    \      local cap = #extension:upper()\n      local sm = #extension:lower()\n \
    \     local strength = cap - sm\n      if strength > 0 then\n         table.insert(strongest,\
    \ extension)\n      elseif strength == 0 then\n         table.insert(strongest,\
    \ extension:sub(1, cap))\n      elseif strength < 0 then\n         table.insert(strongest,\
    \ extension:sub(1, cap - sm))\n      end\n   end\n   return class_name .. \".\"\
    \ .. table.concat(strongest, \".\")\nend", "   local strongest_extension = nil\n\
    \   local strongest_extension_strength = -1\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n      local strength = cap\
    \ - sm\n      if strength > strongest_extension_strength then\n         strongest_extension_strength\
    \ = strength\n         strongest_extension = extension\n      end\n   end\n  \
    \ return class_name .. '.' .. strongest_extension\nend", "   local strongest_extension\
    \ = nil\n   local strongest_extension_strength = -1\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n      local strength = cap\
    \ - sm\n      if strength > strongest_extension_strength then\n         strongest_extension_strength\
    \ = strength\n         strongest_extension = extension\n      end\n   end\n  \
    \ return class_name .. '.' .. strongest_extension\nend", "\tlocal strongest =\
    \ nil\n\tlocal strongest_strength = -1\n\tlocal strongest_extension = nil\n\t\
    for _, extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\
    \t\tlocal strength = cap - sm\n\t\tif strength > strongest_strength then\n\t\t\
    \tstrongest_strength = strength\n\t\t\tstrongest_extension = extension\n\t\tend\n\
    \tend\n\treturn class_name .. '.' .. strongest_extension\nend", "  local cap =\
    \ #class_name:upper()\n  local sm = #class_name:lower()\n  local strongest = nil\n\
    \  for _, extension in ipairs(extensions) do\n    local cap_ext = #extension:upper()\n\
    \    local sm_ext = #extension:lower()\n    local strength = cap_ext - sm_ext\n\
    \    if strength > 0 then\n      if strongest == nil then\n        strongest =\
    \ extension\n      elseif strength > strongest:strength() then\n        strongest\
    \ = extension\n      end\n    end\n  end\n  return strongest\nend", "   local\
    \ strongest_extension = nil\n   local strongest_extension_strength = -1\n   for\
    \ _, extension in ipairs(extensions) do\n      local cap = #extension:upper()\n\
    \      local sm = #extension:lower()\n      local cap_strength = cap - sm\n  \
    \    if cap_strength > strongest_extension_strength then\n         strongest_extension_strength\
    \ = cap_strength\n         strongest_extension = extension\n      end\n   end\n\
    \   return class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = {}\n  local capitals = {}\n  local sms = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local capitals = string.gsub(extension, \"[A-Z]\", \"\")\n    local\
    \ sms = string.gsub(extension, \"[a-z]\", \"\")\n    local capitals_count = tonumber(capitals)\n\
    \    local sms_count = tonumber(sms)\n    local strength = capitals_count - sms_count\n\
    \    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  table.sort(strongest_extension, function(a, b) return tonumber(a)\
    \ - tonumber(b) end)\n  return class_name .. \".\" .. table.concat(strongest_extension,\
    \ \" \")\nend", "   local strongest_extension = nil\n   local capitals = #class_name:gsub(\"\
    %l\",\"\")\n   local lowercases = #class_name:gsub(\"%L\",\"\")\n   local capitals_index\
    \ = #class_name:gsub(\"%l\",\"\")\n   local lowercases_index = #class_name:gsub(\"\
    %L\",\"\")\n   local capitals_count = #class_name:gsub(\"%l\",\"\")\n   local\
    \ lowercases_count = #class_name:gsub(\"%L\",\"\")\n   local capitals_strength\
    \ = #class_name:gsub(\"%l\",\"\")\n   local lowercases_strength = #class_name:gsub(\"\
    %L\",\"\")\n   for _, extension in ipairs(extensions) do\n      local capitals_index\
    \ = #extension:gsub(\"%l\",\"\")\n      local lowercases_index = #extension:gsub(\"\
    %L\",\"\")\n      local capitals_count = #extension:gsub(\"%l\",\"\")\n      local\
    \ lowercases_count = #extension:gsub(\"%L\",\"\")\n      local capitals_strength\
    \ = #extension:gsub(\"%l\",\"\")\n      local lowercases_strength = #extension:gsub(\"\
    %L\",\"\")\n      if capitals_index == capitals_strength then\n         if lowercases_index\
    \ == lowercases_strength then\n            if capitals_count == lowercases_count\
    \ then\n               if capitals_strength > lowercases_strength then\n     \
    \             strongest_extension = extension\n               end\n          \
    \  end\n         end\n      end\n   end\n   return strongest_extension\nend",
  "  local strongest_extension = {}\n  local capitals = {}\n  local smalls = {}\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    capitals[cap] = capitals[cap] or 0\n    capitals[cap] = capitals[cap]\
    \ + 1\n    local small = string.lower(extension:sub(1, #extension))\n    smalls[small]\
    \ = smalls[small] or 0\n    smalls[small] = smalls[small] + 1\n  end\n  local\
    \ max_capitals = #capitals\n  local max_smalls = #smalls\n  local max_strength\
    \ = -1\n  local max_extension = \"\"\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local small\
    \ = string.lower(extension:sub(1, #extension))\n    local strength = capitals[cap]\
    \ - smalls[small]\n    if strength > max_strength then\n      max_strength = strength\n\
    \      max_extension = extension\n    end\n  end\n  return class_name .. \".\"\
    \ .. max_extension\nend", "   local strongest_extension = {}\n   for _, extension\
    \ in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1, #extension))\n\
    \      local sm = string.lower(extension:sub((#extension) + 1))\n      local strength\
    \ = cap - sm\n      if strength > 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      end\n   end\n   if #strongest_extension == 1 then\n      return\
    \ class_name .. \".\" .. strongest_extension[1]\n   else\n      local strength_sorted\
    \ = table.sort(strongest_extension, function(a, b) return strength > b end)\n\
    \      return class_name .. \".\" .. strength_sorted[1]\n   end\nend", "   local\
    \ strongest_extension = nil\n   local max_strength = -1\n   for _, extension in\
    \ ipairs(extensions) do\n      local cap = string.upper(extension:sub(1, #extension))\n\
    \      local sm = string.lower(extension:sub((#extension) + 1))\n      local strength\
    \ = cap - sm\n      if strength > max_strength then\n         max_strength = strength\n\
    \         strongest_extension = extension\n      end\n   end\n   return class_name\
    \ .. '.' .. strongest_extension\nend", "   local strongest = {}\n   for _, extension\
    \ in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1, #extension))\n\
    \      local sm = string.lower(extension:sub((#extension) + 1))\n      local strength\
    \ = cap - sm\n      if strength > 0 then\n         table.insert(strongest, extension)\n\
    \      end\n   end\n   if #strongest == 1 then\n      return class_name .. \"\
    .\" .. strongest[1]\n   else\n      local strongest_strength = #strongest\n  \
    \    for _, extension in ipairs(strongest) do\n         strongest_strength = strongest_strength\
    \ - 1\n      end\n      return class_name .. \".\" .. strongest[strongest_strength]\n\
    \   end\nend", "   local strongest = {}\n   local capitals = {}\n   local sm =\
    \ 0\n   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,1))\n\
    \      local sm = string.lower(extension:sub(1,1))\n      capitals[cap] = capitals[cap]\
    \ or 0\n      capitals[cap] = capitals[cap] + 1\n      sm = sm + 1\n   end\n \
    \  for cap, count in pairs(capitals) do\n      if count > capitals[cap] then\n\
    \         strongest[cap] = count\n      end\n   end\n   for cap, count in pairs(capitals)\
    \ do\n      if count == capitals[cap] then\n         if cap:sub(1,1) == 'S' then\n\
    \            strongest[cap:sub(2,2)] = count\n         else\n            strongest[cap:sub(1,1)]\
    \ = count\n         end\n      end\n   end\n   for cap, count in pairs(strongest)\
    \ do\n      if count > 1 then\n         return class_name .. '.' .. cap .. '('\
    \ .. strongest[cap] .. ')'\n      end\n   end\n   return class_name\nend", " \
    \  local strongest_extension = {}\n   local capitals = {}\n   local lowercases\
    \ = {}\n   for _, extension in ipairs(extensions) do\n      local capitals_count\
    \ = string.gsub(extension, \"[A-Z]\", \"\")\n      local lowercases_count = string.gsub(extension,\
    \ \"[a-z]\", \"\")\n      local capitals_strength = capitals_count/capitals_count\n\
    \      local lowercases_strength = lowercases_count/lowercases_count\n      if\
    \ capitals_strength > lowercases_strength then\n         capitals[#capitals +\
    \ 1] = extension\n         capitals_strength = capitals_count\n      else\n  \
    \       lowercases[#lowercases + 1] = extension\n         lowercases_strength\
    \ = lowercases_count\n      end\n   end\n   for _, extension in ipairs(capitals)\
    \ do\n      local capitals_count = string.gsub(extension, \"[A-Z]\", \"\")\n \
    \     local capitals_strength = capitals_count/capitals_count\n      if capitals_strength\
    \ > strongest_extension.strength then\n         strongest_extension.extension\
    \ = extension\n         strongest_extension.strength = capitals_strength\n   \
    \   end\n   end\n   for _, extension in ipairs(lowercases) do\n      local lowercases_count\
    \ = string.gsub(extension, \"[a-z]\", \"\")\n      local lowercases_strength =\
    \ lowercases_count/lowercases_count\n      if lowercases_strength > strongest_extension.strength\
    \ then\n         strongest_extension.extension = extension\n         strongest_extension.strength\
    \ = lowercases_strength\n      end\n   end\n   return class_name .. \".\" .. strongest_extension.extension\n\
    end", "  local strongest = {}\n  for _, extension in ipairs(extensions) do\n \
    \   local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  table.sort(strongest)\n  return class_name ..\
    \ \".\" .. table.concat(strongest, \".\")\nend", "   local cap, sm = string.match(class_name,\
    \ '%a([A-Z]+)'), string.match(class_name, '%a([a-z]+)') \n   local strength =\
    \ cap - sm\n   local strongest = nil\n   for _, ext in ipairs(extensions) do\n\
    \      local cap, sm = string.match(ext, '%a([A-Z]+)'), string.match(ext, '%a([a-z]+)')\
    \ \n      local strength_ext = cap - sm\n      if strength > strength_ext then\n\
    \         strongest = ext\n      end\n   end\n   return strongest\nend", "\tlocal\
    \ strongest_extension = {}\n\tlocal capitals = {}\n\tlocal smalls = {}\n\tfor\
    \ _, extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\
    \t\tcapitals[cap] = capitals[cap] or 0\n\t\tsmalls[sm] = smalls[sm] or 0\n\t\t\
    capitals[cap] = capitals[cap] + 1\n\t\tsmalls[sm] = smalls[sm] + 1\n\tend\n\t\
    local max_capitals = #capitals\n\tlocal max_smalls = #smalls\n\tlocal max_strength\
    \ = -1\n\tlocal max_extension = \"\"\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1))\n\t\tlocal strength = capitals[cap]\
    \ - smalls[sm]\n\t\tif strength > max_strength then\n\t\t\tmax_strength = strength\n\
    \t\t\tmax_extension = extension\n\t\tend\n\tend\n\treturn string.sub(class_name,\
    \ 1, #class_name-1) .. \".\" .. max_extension\nend", "   local strongest_extension\
    \ = {}\n   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      elseif strength == 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      elseif strength < 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      end\n   end\n   if #strongest_extension == 1 then\n      return\
    \ strongest_extension[1]\n   else\n      return table.concat(strongest_extension,\
    \ \" \")\n   end\nend", "  local strongest_extension = {}\n  local max_strength\
    \ = -1\n  local max_extension\n  for _, extension in ipairs(extensions) do\n \
    \   local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > max_strength then\n\
    \      max_strength = strength\n      max_extension = extension\n    end\n  end\n\
    \  return string.sub(class_name, 1, #class_name-1) .. max_extension .. '.' ..\
    \ max_extension\nend", "   local strongest_extension = nil\n   local max_strength\
    \ = -1\n   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > max_strength then\n    \
    \     max_strength = strength\n         strongest_extension = extension\n    \
    \  end\n   end\n   return class_name .. '.' .. strongest_extension\nend", "  local\
    \ cap_counter = 0\n  local sm_counter = 0\n  local strongest_extension = \"\"\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    cap_counter = cap_counter + cap:len()\n    sm_counter = sm_counter + sm:len()\n\
    \    if cap_counter > sm_counter then\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. \".\" .. strongest_extension\nend", " \
    \  local strongest_extension = nil\n   local max_strength = -1\n   for _, extension\
    \ in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1, #extension))\n\
    \      local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \      local strength = cap - sm\n      if strength > max_strength then\n    \
    \     max_strength = strength\n         strongest_extension = extension\n    \
    \  end\n   end\n   return class_name .. '.' .. strongest_extension\nend", "  \
    \ local strongest = nil\n   local strength = nil\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1, #extension))\n      local\
    \ cap_diff = cap - sm\n      if cap_diff > strength then\n         strongest =\
    \ extension\n         strength = cap_diff\n      end\n   end\n   return class_name\
    \ .. '.' .. strongest\nend", "\tlocal strongest_extension = {}\n\tlocal capitals\
    \ = {}\n\tlocal smalls = {}\n\tlocal strengths = {}\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal capitals_count = tonumber(extension:sub(1, capitals:len()))\n\t\
    \tlocal smalls_count = tonumber(extension:sub(capitals:len(), capitals:len()+smalls:len()))\n\
    \t\tlocal strength = capitals_count-smalls_count\n\t\tcapitals[#capitals+1] =\
    \ capitals_count\n\t\tsmalls[#smalls+1] = smalls_count\n\t\tstrengths[#strengths+1]\
    \ = strength\n\tend\n\tlocal max_strength = #strengths\n\tlocal max_index = #strengths\n\
    \tfor i, strength in ipairs(strengths) do\n\t\tif strength == max_strength then\n\
    \t\t\tmax_index = i\n\t\tend\n\tend\n\tstrongest_extension[#strongest_extension+1]\
    \ = class_name\n\tstrongest_extension[#strongest_extension+1] = extensions[max_index]\n\
    \treturn table.concat(strongest_extension, '.')\nend", "    local strongest =\
    \ {}\n    for _, extension in ipairs(extensions) do\n        local cap = #extension:upper()\n\
    \        local sm = #extension:lower()\n        local strength = cap - sm\n  \
    \      if strength > 0 then\n            table.insert(strongest, extension)\n\
    \        end\n    end\n    table.sort(strongest)\n    return class_name .. \"\
    .\" .. table.concat(strongest, \"\")\nend", "   local strongest = {}\n   local\
    \ cap = #class_name\n   local sm = #class_name:lower()\n   for _, extension in\
    \ ipairs(extensions) do\n      local cap_ext = #extension:upper()\n      local\
    \ sm_ext = #extension:lower()\n      local strength = cap_ext - sm_ext\n     \
    \ if strength > 0 then\n         if cap - sm > strength then\n            strongest[extension]\
    \ = class_name .. '.' .. extension\n         else\n            strongest[extension]\
    \ = extension\n         end\n      end\n   end\n   if #strongest > 1 then\n  \
    \    table.sort(strongest)\n      return strongest[1]\n   else\n      return nil\n\
    \   end\nend", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_diff\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = nil\n  local extension_strength = nil\n \
    \ for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff ~= 0 then\n      extension_strength\
    \ = cap_diff\n      if extension_strength > 0 then\n        strongest_extension\
    \ = extension\n      end\n    end\n  end\n  return strongest_extension\nend",
  "\tlocal strongest = {}\n\tlocal cap = #class_name\n\tlocal sm = #class_name:lower()\n\
    \tfor _, extension in pairs(extensions) do\n\t\tlocal cap = #extension\n\t\tlocal\
    \ sm = #extension:lower()\n\t\tlocal strength = cap - sm\n\t\tif strength > 0\
    \ then\n\t\t\ttable.insert(strongest, extension)\n\t\tend\n\tend\n\ttable.sort(strongest)\n\
    \treturn string.format('%s.%s', class_name, strongest[1])\nend", "   local strongest_extension\
    \ = nil\n   local extension_strength = nil\n   local extension_strength_counter\
    \ = nil\n   local extension_strength_counter_max = nil\n   for _, extension in\
    \ ipairs(extensions) do\n      local extension_class = string.sub(extension, 1,\
    \ string.len(extension)-2)\n      local extension_class_cap = string.upper(extension_class)\n\
    \      local extension_class_sm = string.lower(extension_class)\n      local extension_strength_counter\
    \ = extension_class_cap - extension_class_sm\n      if extension_strength_counter\
    \ > extension_strength_counter_max then\n         extension_strength_counter_max\
    \ = extension_strength_counter\n         strongest_extension = extension\n   \
    \   end\n   end\n   return strongest_extension\nend", "  local strongest_extension\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      if #strongest_extension\
    \ == 0 then\n        strongest_extension.name = extension\n      else\n      \
    \  if strength > #strongest_extension.strength then\n          strongest_extension.name\
    \ = extension\n          strongest_extension.strength = strength\n        end\n\
    \      end\n    end\n  end\n  if #strongest_extension > 0 then\n    return class_name\
    \ .. '.' .. strongest_extension.name\n  end\nend", "   local strongest_extension\
    \ = nil\n   local strongest_extension_strength = -1\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n      local cap_strength\
    \ = cap - sm\n      if cap_strength > strongest_extension_strength then\n    \
    \     strongest_extension_strength = cap_strength\n         strongest_extension\
    \ = extension\n      end\n   end\n   return class_name .. '.' .. strongest_extension\n\
    end", "\tlocal strongest_extension = nil\n\tlocal strongest_extension_strength\
    \ = -1\n\tlocal extension_strength\n\tlocal extension_class\n\tlocal extension_name\n\
    \tlocal extension_extension", "  local strongest_extension = {}\n  local capitals\
    \ = {}\n  local smalls = {}\n  for _, extension in ipairs(extensions) do\n   \
    \ local cap = string.upper(extension:sub(1, #extension))\n    capitals[cap] =\
    \ capitals[cap] or {}\n    capitals[cap][extension:sub(2)] = true\n    local sm\
    \ = string.lower(extension:sub(1, #extension))\n    smalls[sm] = smalls[sm] or\
    \ {}\n    smalls[sm][extension:sub(2)] = true\n  end\n  local cap_strength = #capitals\n\
    \  local sm_strength = #smalls\n  if cap_strength > sm_strength then\n    cap_strength\
    \ = sm_strength\n  end\n  local cap_strength_sum = cap_strength\n  local sm_strength_sum\
    \ = sm_strength\n  for _, extension in ipairs(extensions) do\n    local cap =\
    \ string.upper(extension:sub(1, #extension))\n    cap_strength_sum = cap_strength_sum\
    \ - capitals[cap][extension:sub(2)]\n  end\n  for _, extension in ipairs(extensions)\
    \ do\n    local sm = string.lower(extension:sub(1, #extension))\n    sm_strength_sum\
    \ = sm_strength_sum - smalls[sm][extension:sub(2)]\n  end\n  if cap_strength_sum\
    \ > sm_strength_sum then\n    cap_strength_sum = sm_strength_sum\n  end\n  local\
    \ cap_strength_avg = cap_strength_sum / #extensions\n  local sm_strength_avg =\
    \ sm_strength_sum / #extensions\n  local cap_strength_max_index = cap_strength_avg\n\
    \  local sm_strength_max_index = sm_strength_avg\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub(1, #extension))\n    if cap_strength_avg > sm_strength_avg\
    \ then\n      cap_strength_max_index = cap_strength_max_index - 1\n    end\n \
    \   if sm_strength_avg > cap_strength_avg then\n      sm_strength_max_index =\
    \ sm_strength_max_index - 1\n    end\n  end\n  local strongest_extension_class\
    \ = class_name .. \".\" .. extensions[cap_strength_max_index]\n  if cap_strength_max_index\
    \ == 1 then\n    return strongest_extension_class\n  end\n  for _, extension in\
    \ ipairs(extensions) do\n    local ", "   local strongest_extension = {}\n   local\
    \ capitals = {}\n   local smalls = {}\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n      capitals[cap] = capitals[cap]\
    \ or 0\n      smalls[sm] = smalls[sm] or 0\n      capitals[cap] = capitals[cap]\
    \ + 1\n      smalls[sm] = smalls[sm] + 1\n   end\n   for cap, count in pairs(capitals)\
    \ do\n      if count > smalls[cap] then\n         strongest_extension[cap] = cap\n\
    \      end\n   end\n   if #strongest_extension > 1 then\n      table.sort(strongest_extension)\n\
    \   end\n   return class_name .. '.' .. strongest_extension[1]\nend", "   local\
    \ strongest_extension = {}\n   for _, extension in ipairs(extensions) do\n   \
    \   local cap = string.upper(extension:sub(1, #extension))\n      local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n      local strength = cap - sm\n      if strength > 0 then\n       \
    \  table.insert(strongest_extension, extension)\n      end\n   end\n   if #strongest_extension\
    \ == 1 then\n      return class_name .. \".\" .. strongest_extension[1]\n   else\n\
    \      local max_strength = -1\n      local max_extension\n      for _, extension\
    \ in ipairs(strongest_extension) do\n         local cap = string.upper(extension:sub(1,\
    \ #extension))\n         local sm = string.lower(extension:sub((#extension) +\
    \ 1))\n         local strength = cap - sm\n         if strength > max_strength\
    \ then\n            max_strength = strength\n            max_extension = extension\n\
    \         end\n      end\n      return class_name .. \".\" .. max_extension\n\
    \   end\nend", "   local strongest_extension = nil\n   local strongest_extension_strength\
    \ = nil\n   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local cap_strength = cap - sm\n      if cap_strength > 0 then\n       \
    \  if strongest_extension_strength == nil then\n            strongest_extension_strength\
    \ = cap_strength\n            strongest_extension = extension\n         elseif\
    \ cap_strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = cap_strength\n            strongest_extension = extension\n         end\n\
    \      end\n   end\n   return strongest_extension\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
