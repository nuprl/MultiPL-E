language: lua
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number ~= nil then\n      sorted_numbers = sorted_numbers + number\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgce5sf6.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmgce5sf6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local sorted_numbers =\
    \ {}\n    for _, number in ipairs(numbers) do\n        table.insert(sorted_numbers,\
    \ tonumber(number))\n    end\n    table.sort(sorted_numbers)\n    return table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxqnx3an6.lua:6:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpxqnx3an6.lua:6: in function 'candidate'\n\t/tmp/tmpxqnx3an6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numbers_sorted =\
    \ {}\n    for _, number in ipairs(numbers) do\n        table.insert(numbers_sorted,\
    \ tonumber(number))\n    end\n    table.sort(numbers_sorted)\n    local sorted_numbers\
    \ = table.concat(numbers_sorted)\n    return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_144zabo.lua:6:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp_144zabo.lua:6: in function 'candidate'\n\t/tmp/tmp_144zabo.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for _, number in ipairs(numbers) do\n    table.insert(sorted_numbers, tonumber(number))\n\
    \  end\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6hbwl7tk.lua:6:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp6hbwl7tk.lua:6: in function 'candidate'\n\t/tmp/tmp6hbwl7tk.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local sorted_numbers =\
    \ \"\"\n    for _, number in ipairs(numbers) do\n        sorted_numbers = sorted_numbers\
    \ .. number\n    end\n    return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp68gh9e2f.lua:6:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp68gh9e2f.lua:6: in function 'candidate'\n\t/tmp/tmp68gh9e2f.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for _, number in ipairs(numbers) do\n    table.insert(sorted_numbers, tonumber(number))\n\
    \  end\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6hbwl7tk.lua:6:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp6hbwl7tk.lua:6: in function 'candidate'\n\t/tmp/tmp6hbwl7tk.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, 9 do\n    sorted_numbers = sorted_numbers .. numbers[i]\n  end\n\
    \  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7p4wwaxo.lua:7:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp7p4wwaxo.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmp7p4wwaxo.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[#sorted_numbers + 1] = tonumber(numbers[i])\n\
    \  end\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv4oqgu2y.lua:17:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpv4oqgu2y.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local sorted_numbers_length = 0\n  local num_digits = 0\n  for i = 1, #numbers\
    \ do\n    local digit = tonumber(numbers[i])\n    if digit ~= nil then\n     \
    \ num_digits = num_digits + 1\n    end\n  end\n  -- Sort numbers from smallest\
    \ to largest\n  for i = 1, num_digits do\n    local digit = tonumber(numbers[i])\n\
    \    if digit ~= nil then\n      sorted_numbers = sorted_numbers .. digit\n  \
    \  end\n  end\n  -- Remove leading zeros from sorted numbers\n  local leading_zeros\
    \ = \"\"\n  local leading_zeros_length = 0\n  for i = 1, #sorted_numbers do\n\
    \    if sorted_numbers[i] ~= '0' then\n      leading_zeros = leading_zeros ..\
    \ sorted_numbers[i]\n      leading_zeros_length = leading_zeros_length + 1\n \
    \   end\n  end\n  -- Remove trailing zeros from sorted numbers\n  local trailing_zeros\
    \ = \"\"\n  local trailing_zeros_length = 0\n  for i = 1, #sorted_numbers do\n\
    \    if sorted_numbers[i] ~= '0' then\n      trailing_zeros = trailing_zeros ..\
    \ sorted_numbers[i]\n      trailing_zeros_length = trailing_zeros_length + 1\n\
    \    end\n  end\n  -- Return sorted numbers\n  return leading_zeros .. sorted_numbers\
    \ .. trailing_zeros\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp324vy5f.lua:47:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpp324vy5f.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\"\
    \ \")\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3tz0fd07.lua:5:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp3tz0fd07.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmp3tz0fd07.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[#sorted_numbers + 1] = numbers[i]\n\
    \  end\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_t9w_om.lua:17:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpo_t9w_om.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number ~= nil then\n      sorted_numbers = sorted_numbers + number\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgce5sf6.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmgce5sf6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local numbers_length = #numbers\n  local numbers_index = 1\n  local current_number\n\
    \  local current_number_index\n  local current_number_length\n  local current_number_value\n\
    \  local current_number_value_index\n  local current_number_value_length\n  local\
    \ current_number_value_char\n  local current_number_value_char_index\n  local\
    \ current_number_value_char_length\n  local current_number_value_char_length_index\n\
    \  local current_number_value_char_length_index_index\n  local current_number_value_char_length_index_index_index\n\
    \  local current_number_value_char_length_index_index_index_index\n  local current_number_value_char_length_index_index_index_index_index\n\
    \  local current_number_value_char_length_index_index_index_index_index_index\n\
    \  local current_number_value_char_length_index_index_index_index_index_index_index\n\
    \  local current_number_value_char_length_index_index_index_index_index_index_index_index\n\
    \  local current_number_value_char_length_index_index_index_index_index_index_index_index\n\
    \  local current_number_value_char_length_index_index_index_index_index_index_index_index_index\n\
    \  local current_number_value_char_length_index_index_index_index_index_index_index_index_index_index\n\
    \  local current_number_value_char_length_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local current_number_value_char_length_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local current_number_value_char_length_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local current_number_value_char_length_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local current_number_value_char_length_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local current_number_value_char_length_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local current_number_value_char_length_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local current_number_value_char_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local current_number_value_char_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local current_number_value_char_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local current_number_value_char_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local current_number_value_char_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local current_number_value_char_length_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpym7w9ctc.lua:52: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = #numbers\n  for i = 1, num_digits do\n    local digit\
    \ = tonumber(numbers[i])\n    if digit ~= nil then\n      sorted_numbers = sorted_numbers\
    \ .. digit\n    end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_vtu03n.lua:20:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpw_vtu03n.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local sorted_numbers =\
    \ {}\n    for _, number in ipairs(numbers) do\n        table.insert(sorted_numbers,\
    \ tonumber(number))\n    end\n    table.sort(sorted_numbers)\n    return table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxqnx3an6.lua:6:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpxqnx3an6.lua:6: in function 'candidate'\n\t/tmp/tmpxqnx3an6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[#sorted_numbers + 1] = tonumber(numbers[i])\n\
    \  end\n  table.sort(sorted_numbers)\n  local sorted_numbers_string = \"\"\n \
    \ for i = 1, #sorted_numbers do\n    sorted_numbers_string = sorted_numbers_string\
    \ .. sorted_numbers[i]\n  end\n  return sorted_numbers_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2k7jklr.lua:21:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpp2k7jklr.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[numbers[i]] = i\n  end\n  table.sort(sorted_numbers)\n\
    \  local sorted_numbers_string = table.concat(sorted_numbers, \" \")\n  return\
    \ sorted_numbers_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppu3qyoac.lua:7:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmppu3qyoac.lua:7: in function\
    \ 'candidate'\n\t/tmp/tmppu3qyoac.lua:18: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\"\
    \ \")\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3tz0fd07.lua:5:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp3tz0fd07.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmp3tz0fd07.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = #numbers\n  local num_digits_used = 0\n  local num_digits_left\n\
    \  local num_digits_left_to_use\n  local num_digits_left_to_use\n  local num_digits_left_to_use\n\
    \  local num_digits_left_to_use\n  local num_digits_left_to_use\n  local num_digits_left_to_use\n\
    \  local num_digits_left_to_use\n  local num_digits_left_to_use\n  local num_digits_left_to_use\n\
    \  local num_digits_left_to_use\n  local num_digits_left_to_use\n  local num_digits_left_to_use\n\
    \  local num_digits_left_to_use\n  local num_digits_left_to_use\n  local num_digits_left_to_use\n\
    \  local num_digits_left_to_use\n  local num_digits_left_to_use\n  local num_digits_left_to_use\n\
    \  local num_digits_left_to_use\n  local num_digits_left_to_use\n  local num_digits_left_to_use\n\
    \  local num_digits_left_to_use\n  local num_digits_left_to_use\n  local num_digits_left_to_use\n\
    \  local num_digits_left_to_use\n  local num_digits_left_to_use\n  local num_digits_left_to_use\n\
    \  local num_digits_left_to_use\n  local num_digits_left_to_use\n  local num_digits_left_to_use\n\
    \  local num_digits_left_to_use\n  local num_digits_left_to_use\n  local num_digits_left_to_use\n\
    \  local num_digits_left_to_use\n  local num_digits_left_to_use\n  local num_digits_left_to_use\n\
    \  local num_digits_left_to_use\n  local num_digits_left_to_use\n  local num_digits_left_to_use\n\
    \  local num_digits_left_to_use\n  local num_digits_left_to_use\n  local num_digits_left_to_use\n\
    \  local num_digits_left_to_use\n  local num_digits_left_to_use\n  local num_digits_left_to_use\n\
    \  local num_digits_left_to_use\n  local num_digits_left_to_use\n  local num_digits_left_to_use\n\
    \  local num_digits_left_to_use\n  local num_digits_left_to_use\n  local num_digits_left_to_use\n\
    \  local num_digits_left_to_use\n  local num_digits_left_to_use\n  local num_digits_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj_weghjm.lua:74: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = #numbers\n  local num_zeros = #numbers - num_digits\n\
    \  local num_ones = 0\n  local num_twos = 0\n  local num_threes = 0\n  local num_fours\
    \ = 0\n  local num_fives = 0\n  local num_sixes = 0\n  local num_sevens = 0\n\
    \  local num_eights = 0\n  local num_nines = 0\n  local num_tens = 0\n  local\
    \ num_elevens = 0\n  local num_twelves = 0\n  local num_thirteens = 0\n  local\
    \ num_fourteens = 0\n  local num_fifteens = 0\n  local num_sixteens = 0\n  local\
    \ num_seventeens = 0\n  local num_eighteens = 0\n  local num_nineteens = 0\n \
    \ local num_twentys = 0\n  local num_thirtys = 0\n  local num_fortys = 0\n  local\
    \ num_fiftys = 0\n  local num_sixtys = 0\n  local num_seventys = 0\n  local num_eightys\
    \ = 0\n  local num_ninetys = 0\n  local num_hundreds = 0\n  local num_thousands\
    \ = 0\n  local num_tenthousands = 0\n  local num_hundredthousands = 0\n  local\
    \ num_millions = 0\n  local num_millionthousands = 0\n  local num_billions = 0\n\
    \  local num_billionthousands = 0\n  local num_trillions = 0\n  local num_trillionthousands\
    \ = 0\n  local num_quadrillions = 0\n  local num_quadrillionthousands = 0\n  local\
    \ num_quintillions = 0\n  local num_quintillionthousands = 0\n  local num_sextillions\
    \ = 0\n  local num_sextillionthousands = 0\n  local num_septillions = 0\n  local\
    \ num_septillionthousands = 0\n  local num_octillions = 0\n  local num_octillionthousands\
    \ = 0\n  local num_nonillions = 0\n  local num_nonillionthousands = 0\n  local\
    \ num_decillions = 0\n  local num_decillionthousands = 0\n  local num_undecillions\
    \ = 0\n  local num_undecillionthousands = 0\n  local num_undecillionmillions =\
    \ 0\n  local num_undecillionbillions = 0\n  local num_undecilliontrillions = 0\n\
    \  local num_undecillionquadrillions = 0\n  local num_undec\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1kvj6v30.lua:77: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local sorted_numbers =\
    \ \"\"\n    local num_digits = #numbers\n    local digits = numbers:gsub(\"%d+\"\
    , \"\")\n    local digits_length = #digits\n    local digits_length = digits_length\
    \ + 1\n    local digits_length = digits_length + 1\n    local digits_length =\
    \ digits_length + 1\n    local digits_length = digits_length + 1\n    local digits_length\
    \ = digits_length + 1\n    local digits_length = digits_length + 1\n    local\
    \ digits_length = digits_length + 1\n    local digits_length = digits_length +\
    \ 1\n    local digits_length = digits_length + 1\n    local digits_length = digits_length\
    \ + 1\n    local digits_length = digits_length + 1\n    local digits_length =\
    \ digits_length + 1\n    local digits_length = digits_length + 1\n    local digits_length\
    \ = digits_length + 1\n    local digits_length = digits_length + 1\n    local\
    \ digits_length = digits_length + 1\n    local digits_length = digits_length +\
    \ 1\n    local digits_length = digits_length + 1\n    local digits_length = digits_length\
    \ + 1\n    local digits_length = digits_length + 1\n    local digits_length =\
    \ digits_length + 1\n    local digits_length = digits_length + 1\n    local digits_length\
    \ = digits_length + 1\n    local digits_length = digits_length + 1\n    local\
    \ digits_length = digits_length + 1\n    local digits_length = digits_length +\
    \ 1\n    local digits_length = digits_length + 1\n    local digits_length = digits_length\
    \ + 1\n    local digits_length = digits_length + 1\n    local digits_length =\
    \ digits_length + 1\n    local digits_length = digits_length + 1\n    local digits_length\
    \ = digits_length + 1\n    local digits_length = digits_length + 1\n    local\
    \ digits_length = digits_length + 1\n    local digits_length = digits_length +\
    \ 1\n    local digits_length = digits_length + 1\n    local digits_length = digits_length\
    \ + 1\n    local digits_length = digits_length + 1\n    local digits_length =\
    \ digits_length + 1\n    local digits_length = digits_length + 1\n    local digits_length\
    \ = digits_length + 1\n    local digits_length = digits_length + 1\n    local\
    \ digits_length = digits_length + 1\n    local digits_length = digits_length +\
    \ 1\n    local digits_length = digits_length + 1\n    local digits_length = digits_length\
    \ + 1\n    local digits_length = digits_length + 1\n    local digits_length =\
    \ digit\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg5g81ei2.lua:68: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[numbers[i]] = i\n  end\n  table.sort(sorted_numbers)\n\
    \  local sorted_numbers_string = \"\"\n  for i = 1, #sorted_numbers do\n    sorted_numbers_string\
    \ = sorted_numbers_string .. sorted_numbers[i]\n  end\n  return sorted_numbers_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82ew9w4n.lua:7:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmp82ew9w4n.lua:7: in function\
    \ 'candidate'\n\t/tmp/tmp82ew9w4n.lua:21: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[#sorted_numbers + 1] = tonumber(numbers[i])\n\
    \  end\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv4oqgu2y.lua:17:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpv4oqgu2y.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local sorted_numbers =\
    \ \"\"\n    local num_digits = 0\n    for i = 1, #numbers do\n        local digit\
    \ = tonumber(numbers[i])\n        if digit ~= nil then\n            if num_digits\
    \ > 0 then\n                sorted_numbers = sorted_numbers:reverse()\n      \
    \      end\n            sorted_numbers = sorted_numbers:concat(tonumber(numbers[i]))\n\
    \            num_digits = num_digits + 1\n        end\n    end\n    return sorted_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn718ajw0.lua:24:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpn718ajw0.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = #numbers\n  local digits = {}\n  local digit_index =\
    \ 1\n  local digit_value\n  local digit_string\n  local digit_string_index\n \
    \ local digit_string_length\n  local digit_string_length_index\n  local digit_string_length_value\n\
    \  local digit_string_length_index\n  local digit_string_length_value\n  local\
    \ digit_string_length_value\n  local digit_string_length_value\n  local digit_string_length_value\n\
    \  local digit_string_length_value\n  local digit_string_length_value\n  local\
    \ digit_string_length_value\n  local digit_string_length_value\n  local digit_string_length_value\n\
    \  local digit_string_length_value\n  local digit_string_length_value\n  local\
    \ digit_string_length_value\n  local digit_string_length_value\n  local digit_string_length_value\n\
    \  local digit_string_length_value\n  local digit_string_length_value\n  local\
    \ digit_string_length_value\n  local digit_string_length_value\n  local digit_string_length_value\n\
    \  local digit_string_length_value\n  local digit_string_length_value\n  local\
    \ digit_string_length_value\n  local digit_string_length_value\n  local digit_string_length_value\n\
    \  local digit_string_length_value\n  local digit_string_length_value\n  local\
    \ digit_string_length_value\n  local digit_string_length_value\n  local digit_string_length_value\n\
    \  local digit_string_length_value\n  local digit_string_length_value\n  local\
    \ digit_string_length_value\n  local digit_string_length_value\n  local digit_string_length_value\n\
    \  local digit_string_length_value\n  local digit_string_length_value\n  local\
    \ digit_string_length_value\n  local digit_string_length_value\n  local digit_string_length_value\n\
    \  local digit_string_length_value\n  local digit_string_length_value\n  local\
    \ digit_string_length_value\n  local digit_string_length_value\n  local digit_string_length_value\n\
    \  local digit_string_length_value\n  local digit_string_length_value\n  local\
    \ digit_string_length_value\n  local digit_string_length_value\n  local digit_string_length_value\n\
    \  local digit_string_length_value\n  local digit_string_length_value\n  local\
    \ digit_string_length_value\n  local digit_string_length_value\n  local digit_string_length_value\n\
    \  local digit_string_length_value\n  local digit_string_length_value\n  local\
    \ digit_string_length_value\n  local digit_string_length_value\n  local digit_string_length_value\n\
    \  local digit_string_length_value\n  local digit_string_length_value\n  local\
    \ digit_string_length_value\n  local digit_string_length_value\n  local \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptiaa980v.lua:91: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[#sorted_numbers + 1] = tonumber(numbers[i])\n\
    \  end\n  table.sort(sorted_numbers)\n  local sorted_numbers_string = \"\"\n \
    \ for i = 1, #sorted_numbers do\n    sorted_numbers_string = sorted_numbers_string\
    \ .. sorted_numbers[i]\n  end\n  return sorted_numbers_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2k7jklr.lua:21:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpp2k7jklr.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number ~= nil then\n      sorted_numbers = sorted_numbers + number\n    end\n\
    \  end\n  table.sort(sorted_numbers)\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqtwc0j1w.lua:12:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpqtwc0j1w.lua:12: in function 'candidate'\n\t/tmp/tmpqtwc0j1w.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number ~= nil then\n      sorted_numbers = sorted_numbers + number\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgce5sf6.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmgce5sf6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, 9 do\n    local number = tonumber(numbers[i])\n    if number\
    \ ~= nil then\n      sorted_numbers = sorted_numbers + number\n    end\n  end\n\
    \  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplgjjookg.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmplgjjookg.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    sorted_numbers = sorted_numbers + numbers[i]\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp28f0gmlj.lua:7:\
    \ attempt to perform arithmetic on local 'sorted_numbers' (a string value)\nstack\
    \ traceback:\n\t/tmp/tmp28f0gmlj.lua:7: in function 'candidate'\n\t/tmp/tmp28f0gmlj.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    sorted_numbers = sorted_numbers .. numbers[i]\
    \ .. \" \"\n  end\n  sorted_numbers = sorted_numbers:sub(1, -2)\n  return sorted_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbu14gdt0.lua:7:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpbu14gdt0.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpbu14gdt0.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for _, number in ipairs(numbers) do\n    sorted_numbers = sorted_numbers\
    \ + number .. \" \"\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpplp5xnt8.lua:6:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpplp5xnt8.lua:6: in function 'candidate'\n\t/tmp/tmpplp5xnt8.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = #numbers\n  local num_digits_used = 0\n  local num_digits_used_in_digits\
    \ = 0\n  local num_digits_used_in_digits_sum = 0\n  local num_digits_used_in_digits_sum2\
    \ = 0\n  local num_digits_used_in_digits_sum3 = 0\n  local num_digits_used_in_digits_sum4\
    \ = 0\n  local num_digits_used_in_digits_sum5 = 0\n  local num_digits_used_in_digits_sum6\
    \ = 0\n  local num_digits_used_in_digits_sum7 = 0\n  local num_digits_used_in_digits_sum8\
    \ = 0\n  local num_digits_used_in_digits_sum9 = 0\n  local num_digits_used_in_digits_sum10\
    \ = 0\n  local num_digits_used_in_digits_sum11 = 0\n  local num_digits_used_in_digits_sum12\
    \ = 0\n  local num_digits_used_in_digits_sum13 = 0\n  local num_digits_used_in_digits_sum14\
    \ = 0\n  local num_digits_used_in_digits_sum15 = 0\n  local num_digits_used_in_digits_sum16\
    \ = 0\n  local num_digits_used_in_digits_sum17 = 0\n  local num_digits_used_in_digits_sum18\
    \ = 0\n  local num_digits_used_in_digits_sum19 = 0\n  local num_digits_used_in_digits_sum20\
    \ = 0\n  local num_digits_used_in_digits_sum21 = 0\n  local num_digits_used_in_digits_sum22\
    \ = 0\n  local num_digits_used_in_digits_sum23 = 0\n  local num_digits_used_in_digits_sum24\
    \ = 0\n  local num_digits_used_in_digits_sum25 = 0\n  local num_digits_used_in_digits_sum26\
    \ = 0\n  local num_digits_used_in_digits_sum27 = 0\n  local num_digits_used_in_digits_sum28\
    \ = 0\n  local num_digits_used_in_digits_sum29 = 0\n  local num_digits_used_in_digits_sum30\
    \ = 0\n  local num_digits_used_in_digits_sum31 = 0\n  local num_digits_used_in_digits_sum32\
    \ = 0\n  local num_digits_used_in_digits_sum33 = 0\n  local num_digits_used_in_digits_sum34\
    \ = 0\n  local num_digits_used_in_digits_sum35 = 0\n  local num_digits_used_in_digits_sum36\
    \ = 0\n  local num_digits_used_in_digits_sum37 = 0\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3pi88zc2.lua:57: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = math.floor(math.log(numbers, 10))\n  for i = 1, num_digits\
    \ do\n    local digit = math.floor(numbers / math.pow(10, i))\n    sorted_numbers\
    \ = sorted_numbers .. numbers[digit] .. \" \"\n    numbers = numbers - math.pow(10,\
    \ i) * digit\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsmebmidv.lua:6:\
    \ bad argument #1 to 'log' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpsmebmidv.lua:6: in function 'candidate'\n\t/tmp/tmpsmebmidv.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number ~= nil then\n      sorted_numbers = sorted_numbers .. number\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv67h8ei7.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpv67h8ei7.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local numbers_array = numbers.split(\" \")\n  for i = 1, #numbers_array\
    \ do\n    local number = numbers_array[i]\n    local number_as_number = tonumber(number)\n\
    \    if number_as_number then\n      sorted_numbers = sorted_numbers .. number\n\
    \    end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprjputhx3.lua:6:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmprjputhx3.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmprjputhx3.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[#sorted_numbers + 1] = tonumber(numbers[i])\n\
    \  end\n  table.sort(sorted_numbers)\n  local result = {}\n  for i = 1, #sorted_numbers\
    \ do\n    result[#result + 1] = sorted_numbers[i]\n  end\n  return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ou8rtyg.lua:21:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp7ou8rtyg.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  local num_digits = #numbers\n  local digits = {}\n  local digit_index = 1\n\
    \  local digit_value\n  local digit\n  local digit_string\n  local digit_index\n\
    \  local digit_string\n  local digit\n  local digit_index\n  local digit_string\n\
    \  local digit\n  local digit_index\n  local digit_string\n  local digit\n  local\
    \ digit_index\n  local digit_string\n  local digit\n  local digit_index\n  local\
    \ digit_string\n  local digit\n  local digit_index\n  local digit_string\n  local\
    \ digit\n  local digit_index\n  local digit_string\n  local digit\n  local digit_index\n\
    \  local digit_string\n  local digit\n  local digit_index\n  local digit_string\n\
    \  local digit\n  local digit_index\n  local digit_string\n  local digit\n  local\
    \ digit_index\n  local digit_string\n  local digit\n  local digit_index\n  local\
    \ digit_string\n  local digit\n  local digit_index\n  local digit_string\n  local\
    \ digit\n  local digit_index\n  local digit_string\n  local digit\n  local digit_index\n\
    \  local digit_string\n  local digit\n  local digit_index\n  local digit_string\n\
    \  local digit\n  local digit_index\n  local digit_string\n  local digit\n  local\
    \ digit_index\n  local digit_string\n  local digit\n  local digit_index\n  local\
    \ digit_string\n  local digit\n  local digit_index\n  local digit_string\n  local\
    \ digit\n  local digit_index\n  local digit_string\n  local digit\n  local digit_index\n\
    \  local digit_string\n  local digit\n  local digit_index\n  local digit_string\n\
    \  local digit\n  local digit_index\n  local digit_string\n  local digit\n  local\
    \ digit_index\n  local digit_string\n  local digit\n  local digit_index\n  local\
    \ digit_string\n  local digit\n  local digit_index\n  local digit_string\n  local\
    \ digit\n  local digit_index\n  local digit_string\n  local digit\n  local digit_index\n\
    \  local digit_string\n  local digit\n  local digit_index\n  local digit_string\n\
    \  local digit\n  local digit_index\n  local digit_string\n  local digit\n  local\
    \ digit_index\n  local digit_string\n  local digit\n  local digit_index\n  local\
    \ digit_string\n  local digit\n  local digit_index\n  local digit_string\n  \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9lztgh_0.lua:125: ''end'' expected (to close ''function''
    at line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = #numbers\n  local num_digits_used = 0\n  local num_digits_used_in_digits\
    \ = 0\n  local num_digits_used_in_digits_digits = 0\n  local num_digits_used_in_digits_digits_digits\
    \ = 0\n  local num_digits_used_in_digits_digits_digits_digits = 0\n  local num_digits_used_in_digits_digits_digits_digits_digits\
    \ = 0\n  local num_digits_used_in_digits_digits_digits_digits_digits_digits =\
    \ 0\n  local num_digits_used_in_digits_digits_digits_digits_digits_digits_digits\
    \ = 0\n  local num_digits_used_in_digits_digits_digits_digits_digits_digits_digits_digits\
    \ = 0\n  local num_digits_used_in_digits_digits_digits_digits_digits_digits_digits_digits_digits\
    \ = 0\n  local num_digits_used_in_digits_digits_digits_digits_digits_digits_digits_digits_digits\
    \ = 0\n  local num_digits_used_in_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits\
    \ = 0\n  local num_digits_used_in_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits\
    \ = 0\n  local num_digits_used_in_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits\
    \ = 0\n  local num_digits_used_in_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits\
    \ = 0\n  local num_digits_used_in_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits\
    \ = 0\n  local num_digits_used_in_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits\
    \ = 0\n  local num_digits_used_in_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits\
    \ = 0\n  local num_digits_used_in_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits\
    \ = 0\n  local num_digits_used_in_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits\
    \ = 0\n  local num_digits_used_in_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc_cylpcb.lua:39: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local sorted_numbers_length = 0\n  local sorted_numbers_index = 0\n  local\
    \ sorted_numbers_length = 0\n  local sorted_numbers_index = 0\n  local sorted_numbers_length\
    \ = 0\n  local sorted_numbers_index = 0\n  local sorted_numbers_length = 0\n \
    \ local sorted_numbers_index = 0\n  local sorted_numbers_length = 0\n  local sorted_numbers_index\
    \ = 0\n  local sorted_numbers_length = 0\n  local sorted_numbers_index = 0\n \
    \ local sorted_numbers_length = 0\n  local sorted_numbers_index = 0\n  local sorted_numbers_length\
    \ = 0\n  local sorted_numbers_index = 0\n  local sorted_numbers_length = 0\n \
    \ local sorted_numbers_index = 0\n  local sorted_numbers_length = 0\n  local sorted_numbers_index\
    \ = 0\n  local sorted_numbers_length = 0\n  local sorted_numbers_index = 0\n \
    \ local sorted_numbers_length = 0\n  local sorted_numbers_index = 0\n  local sorted_numbers_length\
    \ = 0\n  local sorted_numbers_index = 0\n  local sorted_numbers_length = 0\n \
    \ local sorted_numbers_index = 0\n  local sorted_numbers_length = 0\n  local sorted_numbers_index\
    \ = 0\n  local sorted_numbers_length = 0\n  local sorted_numbers_index = 0\n \
    \ local sorted_numbers_length = 0\n  local sorted_numbers_index = 0\n  local sorted_numbers_length\
    \ = 0\n  local sorted_numbers_index = 0\n  local sorted_numbers_length = 0\n \
    \ local sorted_numbers_index = 0\n  local sorted_numbers_length = 0\n  local sorted_numbers_index\
    \ = 0\n  local sorted_numbers_length = 0\n  local sorted_numbers_index = 0\n \
    \ local sorted_numbers_length = 0\n  local sorted_numbers_index = 0\n  local sorted_numbers_length\
    \ = 0\n  local sorted_numbers_index = 0\n  local sorted_numbers_length = 0\n \
    \ local sorted_numbers_index = 0\n  local sorted_numbers_length = 0\n  local sorted_numbers_index\
    \ = 0\n  local sorted_numbers_length = 0\n  local sorted_numbers_index = 0\n \
    \ local sorted_numbers_length = 0\n  local sorted_numbers_index = 0\n  local sorted_numbers_length\
    \ = 0\n  local sorted_numbers_index = 0\n  local sorted_numbers_length = 0\n \
    \ local sorted_numbers_index = 0\n  local sorted_numbers_length = 0\n  local sorted_numbers_index\
    \ = 0\n  local sorted_numbers_length = 0\n  local sorted_numbers_index = 0\n \
    \ local sorted_numbers_length = 0\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9sj931bq.lua:81: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplqysmq1d.lua:109: ''end'' expected (to close ''function''
    at line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = #numbers\n  local num_digits_used = 0\n  local num_digits_left\n\
    \  local num_digits_used\n  local num_digits_left\n  local num_digits_used\n \
    \ local num_digits_left\n  local num_digits_used\n  local num_digits_left\n  local\
    \ num_digits_used\n  local num_digits_left\n  local num_digits_used\n  local num_digits_left\n\
    \  local num_digits_used\n  local num_digits_left\n  local num_digits_used\n \
    \ local num_digits_left\n  local num_digits_used\n  local num_digits_left\n  local\
    \ num_digits_used\n  local num_digits_left\n  local num_digits_used\n  local num_digits_left\n\
    \  local num_digits_used\n  local num_digits_left\n  local num_digits_used\n \
    \ local num_digits_left\n  local num_digits_used\n  local num_digits_left\n  local\
    \ num_digits_used\n  local num_digits_left\n  local num_digits_used\n  local num_digits_left\n\
    \  local num_digits_used\n  local num_digits_left\n  local num_digits_used\n \
    \ local num_digits_left\n  local num_digits_used\n  local num_digits_left\n  local\
    \ num_digits_used\n  local num_digits_left\n  local num_digits_used\n  local num_digits_left\n\
    \  local num_digits_used\n  local num_digits_left\n  local num_digits_used\n \
    \ local num_digits_left\n  local num_digits_used\n  local num_digits_left\n  local\
    \ num_digits_used\n  local num_digits_left\n  local num_digits_used\n  local num_digits_left\n\
    \  local num_digits_used\n  local num_digits_left\n  local num_digits_used\n \
    \ local num_digits_left\n  local num_digits_used\n  local num_digits_left\n  local\
    \ num_digits_used\n  local num_digits_left\n  local num_digits_used\n  local num_digits_left\n\
    \  local num_digits_used\n  local num_digits_left\n  local num_digits_used\n \
    \ local num_digits_left\n  local num_digits_used\n  local num_digits_left\n  local\
    \ num_digits_used\n  local num_digits_left\n  local num_digits_used\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp24alxg_y.lua:89: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local numbers_length = #numbers\n  for i = 1, numbers_length do\n    local\
    \ number = tonumber(numbers[i])\n    if number ~= nil then\n      sorted_numbers\
    \ = sorted_numbers + number\n    end\n  end\n  return sorted_numbers\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2miphebf.lua:20:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp2miphebf.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = math.floor(math.log(numbers, 10))\n  local num_digits_str\
    \ = string.format(\"%0*d\", num_digits, numbers)\n  for i = 1, num_digits do\n\
    \    local digit = num_digits_str:sub(i, i)\n    sorted_numbers = sorted_numbers\
    \ + digit\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkol4ae6b.lua:6:\
    \ bad argument #1 to 'log' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpkol4ae6b.lua:6: in function 'candidate'\n\t/tmp/tmpkol4ae6b.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = #numbers\n  local digit_index = 0\n  local digit_value\n\
    \  local digit_string\n  local digit_string_index\n  local digit_string_value\n\
    \  local digit_string_index\n  local digit_string_value\n  local digit_string_index\n\
    \  local digit_string_value\n  local digit_string_index\n  local digit_string_value\n\
    \  local digit_string_index\n  local digit_string_value\n  local digit_string_index\n\
    \  local digit_string_value\n  local digit_string_index\n  local digit_string_value\n\
    \  local digit_string_index\n  local digit_string_value\n  local digit_string_index\n\
    \  local digit_string_value\n  local digit_string_index\n  local digit_string_value\n\
    \  local digit_string_index\n  local digit_string_value\n  local digit_string_index\n\
    \  local digit_string_value\n  local digit_string_index\n  local digit_string_value\n\
    \  local digit_string_index\n  local digit_string_value\n  local digit_string_index\n\
    \  local digit_string_value\n  local digit_string_index\n  local digit_string_value\n\
    \  local digit_string_index\n  local digit_string_value\n  local digit_string_index\n\
    \  local digit_string_value\n  local digit_string_index\n  local digit_string_value\n\
    \  local digit_string_index\n  local digit_string_value\n  local digit_string_index\n\
    \  local digit_string_value\n  local digit_string_index\n  local digit_string_value\n\
    \  local digit_string_index\n  local digit_string_value\n  local digit_string_index\n\
    \  local digit_string_value\n  local digit_string_index\n  local digit_string_value\n\
    \  local digit_string_index\n  local digit_string_value\n  local digit_string_index\n\
    \  local digit_string_value\n  local digit_string_index\n  local digit_string_value\n\
    \  local digit_string_index\n  local digit_string_value\n  local digit_string_index\n\
    \  local digit_string_value\n  local digit_string_index\n  local digit_string_value\n\
    \  local digit_string_index\n  local digit_string_value\n  local digit_string_index\n\
    \  local digit_string_value\n  local digit_string_index\n  local digit_string_value\n\
    \  local digit_string_index\n  local digit_string_value\n  local digit_string_index\n\
    \  local digit_string_value\n  local digit_string_index\n  local digit_string_value\n\
    \  local digit_string_index\n  local digit_string_value\n  local digit_string_index\n\
    \  local digit_string_value\n  local digit_string_index\n  local digit_string_value\n\
    \  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph4sho6tb.lua:102: ''end'' expected (to close ''function''
    at line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = 0\n  for i = 1, #numbers do\n    local digit = tonumber(numbers[i])\n\
    \    if digit ~= nil then\n      num_digits = num_digits + 1\n      if num_digits\
    \ > 9 then\n        error(\"Too many digits in number\")\n      end\n      sorted_numbers\
    \ = sorted_numbers .. numbers[i]\n    end\n  end\n  table.sort(sorted_numbers)\n\
    \  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8n8v4tf5.lua:17:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmp8n8v4tf5.lua:17: in function 'candidate'\n\t/tmp/tmp8n8v4tf5.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[i] = tonumber(numbers[i])\n  end\n\
    \  table.sort(sorted_numbers)\n  local sorted_numbers_string = \"\"\n  for i =\
    \ 1, #sorted_numbers do\n    sorted_numbers_string = sorted_numbers_string ..\
    \ sorted_numbers[i]\n  end\n  return sorted_numbers_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ya4vwgc.lua:21:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp8ya4vwgc.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local numbers_as_string = \"\"\n  for i = 1, #numbers do\n    numbers_as_string\
    \ = numbers_as_string .. numbers[i]\n  end\n  for i = 1, #numbers do\n    sorted_numbers\
    \ = sorted_numbers .. numbers[#numbers]\n  end\n  return sorted_numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpixe5jce5.lua:8:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpixe5jce5.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpixe5jce5.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local sorted_numbers =\
    \ {}\n    for _, number in ipairs(numbers) do\n        table.insert(sorted_numbers,\
    \ tonumber(number))\n    end\n    table.sort(sorted_numbers)\n    local sorted_numbers_string\
    \ = \"\"\n    for _, number in ipairs(sorted_numbers) do\n        sorted_numbers_string\
    \ = sorted_numbers_string .. number\n    end\n    return sorted_numbers_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplckazuet.lua:6:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmplckazuet.lua:6: in function 'candidate'\n\t/tmp/tmplckazuet.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = math.floor(math.log(numbers, 10))\n  local digits = numbers\
    \ / math.pow(10, num_digits)\n  local digits_string = \"\"\n  for i = 1, num_digits\
    \ do\n    digits_string = digits_string .. tostring(digits[i])\n  end\n  local\
    \ num_digits_string = tostring(num_digits)\n  local digits_string_length = #digits_string\n\
    \  local digits_string_length_digits = digits_string_length - 1\n  local digits_string_length_digits_string\
    \ = \"\"\n  for i = 1, digits_string_length_digits do\n    digits_string_length_digits_string\
    \ = digits_string_length_digits_string .. tostring(digits_string_length_digits)\n\
    \  end\n  local digits_string_length_digits_string_length = #digits_string_length_digits_string\n\
    \  local digits_string_length_digits_string_length_digits = digits_string_length_digits_string\
    \ / math.pow(10, digits_string_length_digits_string_length_digits)\n  local digits_string_length_digits_string_length_digits_string\
    \ = \"\"\n  for i = 1, digits_string_length_digits_string_length_digits do\n \
    \   digits_string_length_digits_string_length_digits_string = digits_string_length_digits_string_length_digits_string\
    \ .. tostring(digits_string_length_digits_string_length_digits)\n  end\n  local\
    \ digits_string_length_digits_string_length_digits_string_length = #digits_string_length_digits_string_length_digits_string\n\
    \  local digits_string_length_digits_string_length_digits_string_length_digits\
    \ = digits_string_length_digits_string_length_digits_string / math.pow(10, digits_string_length_digits_string_length_digits_string_length_digits)\n\
    \  local digits_string_length_digits_string_length_digits_string_length_digits_string\
    \ = \"\"\n  for i = 1, digits_string_length_digits_string_length_digits_string_length_digits\
    \ do\n    digits_string_length_digits_string_length_digits_string_length_digits_string\
    \ = digits_string_length_digits_string_length_digits_string_length_digits_string\
    \ .. tostring(digits_string_length_digits_string_length_digits_string_length_digits)\n\
    \  end\n  local digits_string_length_digits_string_length_digits_string_length_digits_string_length\
    \ = #digits_string_length_digits_string_length_digits_string_length_digits_string\n\
    \  local digits_string_length_digits_string_length_digits_string_length_digits_string_length_digits\
    \ = digits_string_length_digits_string_length_digits_string_length_digits_string\
    \ / math.pow(10, digits_string_length_digits_string_length_digits_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptgrx67if.lua:33: '')'' expected (to close ''('' at line 32)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local sorted_numbers =\
    \ \"\"\n    for i = 1, #numbers do\n        local number = tonumber(numbers[i])\n\
    \        if number ~= nil then\n            sorted_numbers = sorted_numbers +\
    \ number\n        end\n    end\n    return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdulbye8c.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpdulbye8c.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number ~= nil then\n      sorted_numbers = sorted_numbers + number\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgce5sf6.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmgce5sf6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    sorted_numbers = sorted_numbers + numbers[i]\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp28f0gmlj.lua:7:\
    \ attempt to perform arithmetic on local 'sorted_numbers' (a string value)\nstack\
    \ traceback:\n\t/tmp/tmp28f0gmlj.lua:7: in function 'candidate'\n\t/tmp/tmp28f0gmlj.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = #numbers\n  local digits = \"\"\n  local i = 0\n  while\
    \ i < num_digits do\n    local digit = tonumber(numbers[i])\n    if digit ~= nil\
    \ then\n      digits = digits .. digit\n    end\n    i = i + 1\n  end\n  local\
    \ num_digits_sorted = #digits\n  local digits_sorted = \"\"\n  local j = 0\n \
    \ while j < num_digits_sorted do\n    local digit = tonumber(digits[j])\n    if\
    \ digit ~= nil then\n      digits_sorted = digits_sorted .. digit\n    end\n \
    \   j = j + 1\n  end\n  local num_digits_sorted_sorted = #digits_sorted\n  local\
    \ digits_sorted_sorted = \"\"\n  local k = 0\n  while k < num_digits_sorted_sorted\
    \ do\n    local digit = tonumber(digits_sorted[k])\n    if digit ~= nil then\n\
    \      digits_sorted_sorted = digits_sorted_sorted .. digit\n    end\n    k =\
    \ k + 1\n  end\n  local num_digits_sorted_sorted_sorted = #digits_sorted_sorted\n\
    \  local digits_sorted_sorted_sorted = \"\"\n  local l = 0\n  while l < num_digits_sorted_sorted_sorted\
    \ do\n    local digit = tonumber(digits_sorted_sorted_sorted[l])\n    if digit\
    \ ~= nil then\n      digits_sorted_sorted_sorted = digits_sorted_sorted_sorted\
    \ .. digit\n    end\n    l = l + 1\n  end\n  local num_digits_sorted_sorted_sorted_sorted\
    \ = #digits_sorted_sorted_sorted\n  local digits_sorted_sorted_sorted_sorted =\
    \ \"\"\n  local m = 0\n  while m < num_digits_sorted_sorted_sorted_sorted do\n\
    \    local digit = tonumber(digits_sorted_sorted_sorted_sorted[m])\n    if digit\
    \ ~= nil then\n      digits_sorted_sorted_sorted_sorted = digits_sorted_sorted_sorted_sorted\
    \ .. digit\n    end\n    m = m + 1\n  end\n  local num_digits_sorted_sorted_sorted_sorted_sorted\
    \ = #digits_sorted_sorted_sorted_sorted\n  local digits_sorted_sorted_sorted_sorted_sorted\
    \ = \"\"\n  local n = 0\n  while n < num_digits_sorted_sorted_sorted_sorted_sorted\
    \ do\n    local digit = tonumber(digits_sorted_sorted_sorted_sorted_sorted[n])\n\
    \    if digit ~= nil then\n      digits_sorted_sorted_sorted_sorted_sorted = digits_sorted_sorted_sorted_sorted_sorted\
    \ .. digit\n    end\n    n = n + 1\n  end\n  local num_digits_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuf83207v.lua:67: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local i = 0\n  while i < #numbers do\n    local number = tonumber(numbers[i])\n\
    \    if number == nil then\n      error(\"Invalid number: \" .. numbers[i])\n\
    \    end\n    i = i + 1\n    if number < 10 then\n      sorted_numbers = sorted_numbers\
    \ .. number\n    else\n      sorted_numbers = sorted_numbers .. \"ten\"\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptskkenrn.lua:10:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmptskkenrn.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmptskkenrn.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for _, number in ipairs(numbers) do\n    table.insert(sorted_numbers, tonumber(number))\n\
    \  end\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6hbwl7tk.lua:6:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp6hbwl7tk.lua:6: in function 'candidate'\n\t/tmp/tmp6hbwl7tk.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local numbers_as_string = \"\"\n  for i = 1, #numbers do\n    numbers_as_string\
    \ = numbers_as_string .. numbers[i]\n  end\n  for i = 1, #numbers do\n    sorted_numbers\
    \ = sorted_numbers .. numbers[#numbers]\n  end\n  return sorted_numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpixe5jce5.lua:8:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpixe5jce5.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpixe5jce5.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = math.floor(math.log(numbers, 10))\n  for i = 1, num_digits\
    \ do\n    local digit = math.floor(numbers / math.pow(10, num_digits))\n    sorted_numbers\
    \ = sorted_numbers .. numbers[digit]\n    numbers = numbers - math.pow(10, num_digits)\
    \ + digit\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpii06dm5g.lua:6:\
    \ bad argument #1 to 'log' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpii06dm5g.lua:6: in function 'candidate'\n\t/tmp/tmpii06dm5g.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local numbers_as_string = \"\"\n  for i = 1, #numbers do\n    numbers_as_string\
    \ = numbers_as_string .. numbers[i]\n  end\n  table.sort(numbers)\n  for i = 1,\
    \ #numbers do\n    sorted_numbers = sorted_numbers .. numbers[i]\n  end\n  return\
    \ sorted_numbers, numbers_as_string\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphgwjrd1e.lua:10:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmphgwjrd1e.lua:10: in function 'candidate'\n\t/tmp/tmphgwjrd1e.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for _, number in ipairs(numbers) do\n    table.insert(sorted_numbers, tonumber(number))\n\
    \  end\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6hbwl7tk.lua:6:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp6hbwl7tk.lua:6: in function 'candidate'\n\t/tmp/tmp6hbwl7tk.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number then\n      sorted_numbers = sorted_numbers + number\n    end\n  end\n\
    \  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp53blpw7.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpp53blpw7.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local numbers_as_string = \"\"\n  local number_as_string = \"\"\n  local\
    \ number_as_string_with_zero = \"\"\n  local number_as_string_with_one = \"\"\n\
    \  local number_as_string_with_ten = \"\"\n  local number_as_string_with_hundred\
    \ = \"\"\n  local number_as_string_with_thousand = \"\"\n  local number_as_string_with_million\
    \ = \"\"\n  local number_as_string_with_billion = \"\"\n  local number_as_string_with_trillion\
    \ = \"\"\n  local number_as_string_with_quadrillion = \"\"\n  local number_as_string_with_quintillion\
    \ = \"\"\n  local number_as_string_with_sextillion = \"\"\n  local number_as_string_with_septillion\
    \ = \"\"\n  local number_as_string_with_octillion = \"\"\n  local number_as_string_with_nonillion\
    \ = \"\"\n  local number_as_string_with_decillion = \"\"\n  local number_as_string_with_undecillion\
    \ = \"\"\n  local number_as_string_with_unquintillion = \"\"\n  local number_as_string_with_unquadrillion\
    \ = \"\"\n  local number_as_string_with_unsextillion = \"\"\n  local number_as_string_with_unseptillion\
    \ = \"\"\n  local number_as_string_with_unoctillion = \"\"\n  local number_as_string_with_unnonillion\
    \ = \"\"\n  local number_as_string_with_undecillion = \"\"\n  local number_as_string_with_untrillion\
    \ = \"\"\n  local number_as_string_with_unquadrillion = \"\"\n  local number_as_string_with_unquintillion\
    \ = \"\"\n  local number_as_string_with_unsextillion = \"\"\n  local number_as_string_with_unseptillion\
    \ = \"\"\n  local number_as_string_with_unoctillion = \"\"\n  local number_as_string_with_unnonillion\
    \ = \"\"\n  local number_as_string_with_undecillion = \"\"\n  local number_as_string_with_untrillion\
    \ = \"\"\n  local number_as_string_with_unquadrillion = \"\"\n  local number_as_string_with_unquintillion\
    \ = \"\"\n  local number_as_string_with_unsextillion = \"\"\n  local number_as_string_with_unseptillion\
    \ = \"\"\n  local number_as_string_with_unoctillion = \"\"\n  local number_as_string_with_unnonillion\
    \ = \"\"\n  local number_as_string_with_undecillion = \"\"\n  local number_as_string_with_untrillion\
    \ = \"\"\n  local number_as_string_with_unquadrilli\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfx9k8p6k.lua:60: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for _, number in ipairs(numbers) do\n    sorted_numbers[number] = true\n  end\n\
    \  table.sort(sorted_numbers)\n  local sorted_numbers_string = \"\"\n  for _,\
    \ number in ipairs(sorted_numbers) do\n    sorted_numbers_string = sorted_numbers_string\
    \ .. number\n  end\n  return sorted_numbers_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4w8l18h9.lua:6:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp4w8l18h9.lua:6: in function 'candidate'\n\t/tmp/tmp4w8l18h9.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = math.floor(math.log(numbers, 10))\n  for i = 1, num_digits\
    \ do\n    local digit = math.floor(numbers / math.pow(10, i))\n    sorted_numbers\
    \ = sorted_numbers .. tostring(digit)\n  end\n  return sorted_numbers\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv9ox6ib2.lua:6:\
    \ bad argument #1 to 'log' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpv9ox6ib2.lua:6: in function 'candidate'\n\t/tmp/tmpv9ox6ib2.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local numbers_as_string = \"\"\n  for i = 1, #numbers do\n    numbers_as_string\
    \ = numbers_as_string .. numbers[i]\n  end\n  local numbers_as_numbers = tonumber(numbers_as_string)\n\
    \  if numbers_as_numbers then\n    sorted_numbers = sorted_numbers .. numbers_as_numbers\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6nbw0cnl.lua:8:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp6nbw0cnl.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmp6nbw0cnl.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local numbers_length = #numbers\n  local number_string = \"\"\n  local number_length\
    \ = 0\n  local number_string_index = 0\n  local number_string_length = 0\n  local\
    \ number_string_length_index = 0\n  local number_string_length_index2 = 0\n  local\
    \ number_string_length_index3 = 0\n  local number_string_length_index4 = 0\n \
    \ local number_string_length_index5 = 0\n  local number_string_length_index6 =\
    \ 0\n  local number_string_length_index7 = 0\n  local number_string_length_index8\
    \ = 0\n  local number_string_length_index9 = 0\n  local number_string_length_index10\
    \ = 0\n  local number_string_length_index11 = 0\n  local number_string_length_index12\
    \ = 0\n  local number_string_length_index13 = 0\n  local number_string_length_index14\
    \ = 0\n  local number_string_length_index15 = 0\n  local number_string_length_index16\
    \ = 0\n  local number_string_length_index17 = 0\n  local number_string_length_index18\
    \ = 0\n  local number_string_length_index19 = 0\n  local number_string_length_index20\
    \ = 0\n  local number_string_length_index21 = 0\n  local number_string_length_index22\
    \ = 0\n  local number_string_length_index23 = 0\n  local number_string_length_index24\
    \ = 0\n  local number_string_length_index25 = 0\n  local number_string_length_index26\
    \ = 0\n  local number_string_length_index27 = 0\n  local number_string_length_index28\
    \ = 0\n  local number_string_length_index29 = 0\n  local number_string_length_index30\
    \ = 0\n  local number_string_length_index31 = 0\n  local number_string_length_index32\
    \ = 0\n  local number_string_length_index33 = 0\n  local number_string_length_index34\
    \ = 0\n  local number_string_length_index35 = 0\n  local number_string_length_index36\
    \ = 0\n  local number_string_length_index37 = 0\n  local number_string_length_index38\
    \ = 0\n  local number_string_length_index39 = 0\n  local number_string_length_index40\
    \ = 0\n  local number_string_length_index41 = 0\n  local number_string_length_index42\
    \ = 0\n  local number_string_length_index43 = 0\n  local number_string_length_index44\
    \ = 0\n  local number_string_length_index45 = 0\n  local number_string_length_index46\
    \ = 0\n  local number_string_length_index47 = 0\n  local number_string_length_index48\
    \ = 0\n  local number_string_length_index49 = 0\n  local number_string_length_index50\
    \ = 0\n  local number_string_length_index51 = 0\n  local number_string_length_index52\
    \ = 0\n  local number_string_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc98otl9u.lua:75: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number ~= nil then\n      sorted_numbers = sorted_numbers + number\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgce5sf6.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmgce5sf6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  local i = 0\n  local last_digit\n  for number in string.gmatch(numbers, \"\
    %d+\") do\n    local digit = tonumber(number)\n    if digit ~= nil then\n    \
    \  if digit > 9 then\n        -- If the last digit was a 9, we add it to the sorted\
    \ numbers list\n        if last_digit ~= nil then\n          table.insert(sorted_numbers,\
    \ last_digit)\n        end\n        -- Add the new digit\n        table.insert(sorted_numbers,\
    \ digit)\n      else\n        -- If the last digit was a 0, we add it to the sorted\
    \ numbers list\n        if last_digit ~= nil then\n          table.insert(sorted_numbers,\
    \ last_digit)\n        end\n        -- Add the new digit\n        table.insert(sorted_numbers,\
    \ 0)\n        table.insert(sorted_numbers, digit)\n      end\n      last_digit\
    \ = digit\n    end\n    i = i + 1\n  end\n  -- If the last digit was a 9, we add\
    \ it to the sorted numbers list\n  if last_digit ~= nil then\n    table.insert(sorted_numbers,\
    \ last_digit)\n  end\n  return table.concat(sorted_numbers, \" \")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2zh6yt3o.lua:42:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp2zh6yt3o.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number ~= nil then\n      sorted_numbers = sorted_numbers + number\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgce5sf6.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmgce5sf6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = #numbers\n  local digit_count = 1\n  local digit\n  for\
    \ digit in numbers do\n    digit_count = digit_count + 1\n    if digit_count ==\
    \ num_digits then\n      sorted_numbers = sorted_numbers .. digit\n      digit_count\
    \ = 1\n    else\n      sorted_numbers = sorted_numbers .. digit .. \" \"\n   \
    \ end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfctosdbs.lua:9:\
    \ attempt to call a string value\nstack traceback:\n\t/tmp/tmpfctosdbs.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmpfctosdbs.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local number_length = #numbers\n  for i = 1, number_length do\n    local\
    \ number = tonumber(numbers[i])\n    if number ~= nil then\n      sorted_numbers\
    \ = sorted_numbers .. number\n    end\n  end\n  return sorted_numbers\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0duzoba5.lua:20:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp0duzoba5.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local numbers_as_string = \"\"\n  for i = 1, #numbers do\n    numbers_as_string\
    \ = numbers_as_string .. numbers[i]\n  end\n  for i = 1, #numbers do\n    sorted_numbers\
    \ = sorted_numbers .. numbers[#numbers]\n  end\n  return sorted_numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpixe5jce5.lua:8:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpixe5jce5.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpixe5jce5.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: -1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local i = 0\n  while i < #numbers do\n    local number = tonumber(numbers[i])\n\
    \    if number ~= nil then\n      sorted_numbers = sorted_numbers .. number\n\
    \      i = i + 1\n    end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750427
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number then\n      sorted_numbers = sorted_numbers + number\n    end\n  end\n\
    \  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp53blpw7.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpp53blpw7.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: -1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local i = 0\n  while i < #numbers do\n    local number = tonumber(numbers[i])\n\
    \    if number ~= nil then\n      sorted_numbers = sorted_numbers + number\n \
    \     i = i + 1\n    end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750427
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[#sorted_numbers + 1] = tonumber(numbers[i])\n\
    \  end\n  table.sort(sorted_numbers)\n  local sorted_numbers_string = \"\"\n \
    \ for i = 1, #sorted_numbers do\n    sorted_numbers_string = sorted_numbers_string\
    \ .. sorted_numbers[i]\n  end\n  return sorted_numbers_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2k7jklr.lua:21:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpp2k7jklr.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    sorted_numbers = sorted_numbers + numbers[i]\n\
    \  end\n  table.sort(sorted_numbers)\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbi20epv_.lua:9:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpbi20epv_.lua:9: in function 'candidate'\n\t/tmp/tmpbi20epv_.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number ~= nil then\n      sorted_numbers = sorted_numbers + number\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgce5sf6.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmgce5sf6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local sorted_numbers_index = 0\n  for i = 1, #numbers do\n    local number\
    \ = tonumber(numbers[i])\n    if number ~= nil then\n      if sorted_numbers_index\
    \ == 0 then\n        sorted_numbers = number\n      else\n        if number <\
    \ sorted_numbers then\n          sorted_numbers = number\n        end\n      end\n\
    \    end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp72e8bmod.lua:26:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp72e8bmod.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number ~= nil then\n      sorted_numbers = sorted_numbers + number\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgce5sf6.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmgce5sf6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number then\n      sorted_numbers = sorted_numbers .. number\n    end\n  end\n\
    \  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppk58j2y3.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmppk58j2y3.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number ~= nil then\n      sorted_numbers = sorted_numbers .. number\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv67h8ei7.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpv67h8ei7.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number ~= nil then\n      sorted_numbers = sorted_numbers + number\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgce5sf6.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmgce5sf6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local sorted_numbers_length = 0\n  for i = 1, #numbers do\n    local number\
    \ = tonumber(numbers[i])\n    if number ~= nil then\n      if sorted_numbers_length\
    \ == 0 then\n        sorted_numbers = number\n        sorted_numbers_length =\
    \ number\n      elseif sorted_numbers_length < number then\n        sorted_numbers\
    \ = sorted_numbers .. \" \" .. number\n        sorted_numbers_length = number\n\
    \      else\n        sorted_numbers = sorted_numbers .. \" \" .. number\n    \
    \  end\n    end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprq5jwi9e.lua:28:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmprq5jwi9e.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for _, number in ipairs(numbers) do\n    sorted_numbers[number] = true\n  end\n\
    \  table.sort(sorted_numbers)\n  local sorted_numbers_string = \"\"\n  for _,\
    \ number in ipairs(sorted_numbers) do\n    sorted_numbers_string = sorted_numbers_string\
    \ .. number\n  end\n  return sorted_numbers_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4w8l18h9.lua:6:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp4w8l18h9.lua:6: in function 'candidate'\n\t/tmp/tmp4w8l18h9.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[#sorted_numbers + 1] = tonumber(numbers[i])\n\
    \  end\n  table.sort(sorted_numbers)\n  local sorted_numbers_string = \"\"\n \
    \ for i = 1, #sorted_numbers do\n    sorted_numbers_string = sorted_numbers_string\
    \ .. sorted_numbers[i]\n  end\n  return sorted_numbers_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2k7jklr.lua:21:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpp2k7jklr.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = #numbers\n  local num_digits_used = 0\n  local num_digits_used_in_digits\
    \ = #numbers[1]\n  local num_digits_used_in_digits_plus_one = num_digits_used_in_digits\
    \ + 1\n  local num_digits_used_in_digits_plus_two = num_digits_used_in_digits_plus_one\
    \ + 1\n  local num_digits_used_in_digits_plus_three = num_digits_used_in_digits_plus_two\
    \ + 1\n  local num_digits_used_in_digits_plus_four = num_digits_used_in_digits_plus_three\
    \ + 1\n  local num_digits_used_in_digits_plus_five = num_digits_used_in_digits_plus_four\
    \ + 1\n  local num_digits_used_in_digits_plus_six = num_digits_used_in_digits_plus_five\
    \ + 1\n  local num_digits_used_in_digits_plus_seven = num_digits_used_in_digits_plus_six\
    \ + 1\n  local num_digits_used_in_digits_plus_eight = num_digits_used_in_digits_plus_seven\
    \ + 1\n  local num_digits_used_in_digits_plus_nine = num_digits_used_in_digits_plus_eight\
    \ + 1\n  local num_digits_used_in_digits_plus_zero = num_digits_used_in_digits_plus_nine\
    \ + 1\n  local num_digits_used_in_digits_plus_one = num_digits_used_in_digits_plus_zero\
    \ + 1\n  local num_digits_used_in_digits_plus_two = num_digits_used_in_digits_plus_one\
    \ + 1\n  local num_digits_used_in_digits_plus_three = num_digits_used_in_digits_plus_two\
    \ + 1\n  local num_digits_used_in_digits_plus_four = num_digits_used_in_digits_plus_three\
    \ + 1\n  local num_digits_used_in_digits_plus_five = num_digits_used_in_digits_plus_four\
    \ + 1\n  local num_digits_used_in_digits_plus_six = num_digits_used_in_digits_plus_five\
    \ + 1\n  local num_digits_used_in_digits_plus_seven = num_digits_used_in_digits_plus_six\
    \ + 1\n  local num_digits_used_in_digits_plus_eight = num_digits_used_in_digits_plus_seven\
    \ + 1\n  local num_digits_used_in_digits_plus_nine = num_digits_used_in_digits_plus_eight\
    \ + 1\n  local num_digits_used_in_digits_plus_zero = num_digits_used_in_digits_plus_nine\
    \ + 1\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpepdwniia.lua:41: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local numbers_as_string = \"\"\n  for i = 1, #numbers do\n    numbers_as_string\
    \ = numbers_as_string .. numbers[i]\n  end\n  local numbers_as_string_array =\
    \ numbers_as_string:gsub(\"%w+\", \"\")\n  for i = 1, #numbers_as_string_array\
    \ do\n    sorted_numbers = sorted_numbers .. numbers_as_string_array[i]\n  end\n\
    \  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0yqll5wc.lua:8:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp0yqll5wc.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmp0yqll5wc.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[#sorted_numbers + 1] = tonumber(numbers[i])\n\
    \  end\n  table.sort(sorted_numbers)\n  local sorted_numbers_string = \"\"\n \
    \ for i = 1, #sorted_numbers do\n    sorted_numbers_string = sorted_numbers_string\
    \ .. sorted_numbers[i]\n  end\n  return sorted_numbers_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2k7jklr.lua:21:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpp2k7jklr.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local numbers_as_string = \"\"\n  for i = 1, #numbers do\n    numbers_as_string\
    \ = numbers_as_string .. numbers[i]\n  end\n  table.sort(numbers)\n  for i = 1,\
    \ #numbers do\n    sorted_numbers = sorted_numbers .. numbers[i]\n  end\n  return\
    \ sorted_numbers, numbers_as_string\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphgwjrd1e.lua:10:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmphgwjrd1e.lua:10: in function 'candidate'\n\t/tmp/tmphgwjrd1e.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  local num_digits = #numbers\n  local digits = numbers:gsub('(%d+)', ''):gsub('%d+',\
    \ ''):gsub('%d*%d+', '%d*%d*%d+'):gsub('%d*%d*%d*%d+', '%d*%d*%d*%d*%d*%d+'):gsub('%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ '%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+'):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ '%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+'):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ '%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+'):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ '%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+'):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ '%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+'):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ '%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgxz_4sia.lua:7: unfinished string near ''''%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*''

    '
  stdout: ''
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    sorted_numbers = sorted_numbers + numbers[i]\n\
    \  end\n  table.sort(sorted_numbers)\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbi20epv_.lua:9:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpbi20epv_.lua:9: in function 'candidate'\n\t/tmp/tmpbi20epv_.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number ~= nil then\n      sorted_numbers = sorted_numbers .. number\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv67h8ei7.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpv67h8ei7.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[#sorted_numbers + 1] = tonumber(numbers[i])\n\
    \  end\n  table.sort(sorted_numbers)\n  local sorted_numbers_string = \"\"\n \
    \ for i = 1, #sorted_numbers do\n    sorted_numbers_string = sorted_numbers_string\
    \ .. sorted_numbers[i]\n  end\n  return sorted_numbers_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2k7jklr.lua:21:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpp2k7jklr.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for _, number in ipairs(numbers) do\n    sorted_numbers[number] = true\n  end\n\
    \  table.sort(sorted_numbers)\n  local sorted_numbers_string = \"\"\n  for _,\
    \ number in ipairs(sorted_numbers) do\n    sorted_numbers_string = sorted_numbers_string\
    \ .. number\n  end\n  return sorted_numbers_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4w8l18h9.lua:6:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp4w8l18h9.lua:6: in function 'candidate'\n\t/tmp/tmp4w8l18h9.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[#sorted_numbers + 1] = numbers[i]\n\
    \  end\n  table.sort(sorted_numbers)\n  local sorted_numbers_string = table.concat(sorted_numbers,\
    \ \" \")\n  return sorted_numbers_string\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0xglcgmq.lua:18:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp0xglcgmq.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = 0\n  local digit\n  for digit in string.gmatch(numbers,\
    \ \"%d+\") do\n    num_digits = num_digits + 1\n  end\n  for i = 1, num_digits\
    \ do\n    digit = math.floor(i / 10)\n    sorted_numbers = sorted_numbers .. numbers[digit]\n\
    \    i = i - 10 * digit\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpruhuida3.lua:23:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpruhuida3.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[#sorted_numbers + 1] = tonumber(numbers[i])\n\
    \  end\n  table.sort(sorted_numbers)\n  local sorted_numbers_string = table.concat(sorted_numbers,\
    \ \" \")\n  return sorted_numbers_string\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3jh0mzi_.lua:18:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp3jh0mzi_.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = #numbers\n  local digits = \"\"\n  local digit\n  for\
    \ i = 1, num_digits do\n    digit = numbers[i]\n    if digit == \"zero\" then\n\
    \      digits = \"0\"\n    elseif digit == \"one\" then\n      digits = \"1\"\n\
    \    elseif digit == \"two\" then\n      digits = \"2\"\n    elseif digit == \"\
    three\" then\n      digits = \"3\"\n    elseif digit == \"four\" then\n      digits\
    \ = \"4\"\n    elseif digit == \"five\" then\n      digits = \"5\"\n    elseif\
    \ digit == \"six\" then\n      digits = \"6\"\n    elseif digit == \"seven\" then\n\
    \      digits = \"7\"\n    elseif digit == \"eight\" then\n      digits = \"8\"\
    \n    elseif digit == \"nine\" then\n      digits = \"9\"\n    else\n      assert(false,\
    \ \"Invalid number '\" .. digit .. \"'\")\n    end\n    sorted_numbers = sorted_numbers\
    \ .. digits\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbo1hgkjy.lua:32:\
    \ attempt to concatenate local 'digit' (a nil value)\nstack traceback:\n\t/tmp/tmpbo1hgkjy.lua:32:\
    \ in function 'candidate'\n\t/tmp/tmpbo1hgkjy.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\"\
    \ \")\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3tz0fd07.lua:5:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp3tz0fd07.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmp3tz0fd07.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number ~= nil then\n      sorted_numbers = sorted_numbers + number\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgce5sf6.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmgce5sf6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = math.floor(math.log(numbers, 10))\n  local digits = math.pow(10,\
    \ num_digits)\n  local digits_needed = math.floor(numbers / digits)\n  local digits_left\
    \ = numbers - digits_needed * digits\n  local digits_needed_string = \"\"\n  local\
    \ digits_left_string = \"\"\n  local digits_needed_string_index = 0\n  local digits_left_string_index\
    \ = 0\n  while digits_needed > 0 do\n    digits_needed_string = string.format(\"\
    %0*d\", num_digits, digits_needed)\n    digits_needed_string_index = digits_needed_string:sub(1,\
    \ num_digits)\n    digits_needed_string = digits_needed_string:sub(num_digits\
    \ + 1)\n    digits_needed_string = string.format(\"%0*d\", num_digits, digits_needed)\n\
    \    digits_needed_string_index = digits_needed_string:sub(1, num_digits)\n  \
    \  digits_needed_string = digits_needed_string:sub(num_digits + 1)\n    digits_needed_string\
    \ = string.format(\"%0*d\", num_digits, digits_needed)\n    digits_needed_string_index\
    \ = digits_needed_string:sub(1, num_digits)\n    digits_needed_string = digits_needed_string:sub(num_digits\
    \ + 1)\n    digits_needed_string = string.format(\"%0*d\", num_digits, digits_needed)\n\
    \    digits_needed_string_index = digits_needed_string:sub(1, num_digits)\n  \
    \  digits_needed_string = digits_needed_string:sub(num_digits + 1)\n    digits_needed_string\
    \ = string.format(\"%0*d\", num_digits, digits_needed)\n    digits_needed_string_index\
    \ = digits_needed_string:sub(1, num_digits)\n    digits_needed_string = digits_needed_string:sub(num_digits\
    \ + 1)\n    digits_needed_string = string.format(\"%0*d\", num_digits, digits_needed)\n\
    \    digits_needed_string_index = digits_needed_string:sub(1, num_digits)\n  \
    \  digits_needed_string = digits_needed_string:sub(num_digits + 1)\n    digits_needed_string\
    \ = string.format(\"%0*d\", num_digits, digits_needed)\n    digits_needed_string_index\
    \ = digits_needed_string:sub(1, num_digits)\n    digits_needed_string = digits_needed_string:sub(num_digits\
    \ + 1)\n    digits_needed_string = string.format(\"%0*d\", num_digits, digits_needed)\n\
    \    digits_needed_string_index = digits_needed_string:sub\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4hcgc8w7.lua:38: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = math.floor(math.log(numbers, 10))\n  local digits = numbers:sub(1,\
    \ num_digits)\n  local digit_count = 1\n  local digit_index = 1\n  local digit\n\
    \  while digits ~= \"\" do\n    digit = digits:sub(1, digit_count)\n    if digit\
    \ ~= \"\" then\n      if digit_count == 1 then\n        sorted_numbers = sorted_numbers\
    \ .. digit\n      else\n        sorted_numbers = sorted_numbers .. digit .. \"\
    \ \"\n      end\n      digit_count = digit_count + 1\n    end\n    digit_index\
    \ = digit_index + 1\n    digits = digits:sub((digit_index + 1), num_digits)\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwogcj711.lua:6:\
    \ bad argument #1 to 'log' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpwogcj711.lua:6: in function 'candidate'\n\t/tmp/tmpwogcj711.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number ~= nil then\n      sorted_numbers = sorted_numbers + number\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgce5sf6.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmgce5sf6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local numbers_length = #numbers\n  for i = 1, numbers_length do\n    local\
    \ number = tonumber(numbers[i])\n    if number ~= nil then\n      sorted_numbers\
    \ = sorted_numbers + number\n    end\n  end\n  return sorted_numbers\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2miphebf.lua:20:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp2miphebf.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[numbers[i]] = i\n  end\n  table.sort(sorted_numbers)\n\
    \  local sorted_numbers_string = \"\"\n  for i = 1, #sorted_numbers do\n    sorted_numbers_string\
    \ = sorted_numbers_string .. sorted_numbers[i]\n  end\n  return sorted_numbers_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82ew9w4n.lua:7:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmp82ew9w4n.lua:7: in function\
    \ 'candidate'\n\t/tmp/tmp82ew9w4n.lua:21: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = #numbers\n  local digit_index = 1\n  while digit_index\
    \ <= num_digits do\n    local digit = numbers[digit_index]\n    if digit == \"\
    zero\" then\n      sorted_numbers = sorted_numbers .. \"0\"\n    elseif digit\
    \ == \"one\" then\n      sorted_numbers = sorted_numbers .. \"1\"\n    elseif\
    \ digit == \"two\" then\n      sorted_numbers = sorted_numbers .. \"2\"\n    elseif\
    \ digit == \"three\" then\n      sorted_numbers = sorted_numbers .. \"3\"\n  \
    \  elseif digit == \"four\" then\n      sorted_numbers = sorted_numbers .. \"\
    4\"\n    elseif digit == \"five\" then\n      sorted_numbers = sorted_numbers\
    \ .. \"5\"\n    elseif digit == \"six\" then\n      sorted_numbers = sorted_numbers\
    \ .. \"6\"\n    elseif digit == \"seven\" then\n      sorted_numbers = sorted_numbers\
    \ .. \"7\"\n    elseif digit == \"eight\" then\n      sorted_numbers = sorted_numbers\
    \ .. \"8\"\n    elseif digit == \"nine\" then\n      sorted_numbers = sorted_numbers\
    \ .. \"9\"\n    else\n      sorted_numbers = sorted_numbers .. digit\n    end\n\
    \    digit_index = digit_index + 1\n  end\n  return sorted_numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl3cj4wl3.lua:31:\
    \ attempt to concatenate local 'digit' (a nil value)\nstack traceback:\n\t/tmp/tmpl3cj4wl3.lua:31:\
    \ in function 'candidate'\n\t/tmp/tmpl3cj4wl3.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for _, number in ipairs(numbers) do\n    table.insert(sorted_numbers, tonumber(number))\n\
    \  end\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6hbwl7tk.lua:6:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp6hbwl7tk.lua:6: in function 'candidate'\n\t/tmp/tmp6hbwl7tk.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number ~= nil then\n      sorted_numbers = sorted_numbers + number\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgce5sf6.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmgce5sf6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for _, number in ipairs(numbers) do\n    sorted_numbers = sorted_numbers\
    \ + number .. \" \"\n  end\n  sorted_numbers = sorted_numbers:sub(1, -2)\n  return\
    \ sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjhskpw2j.lua:6:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpjhskpw2j.lua:6: in function 'candidate'\n\t/tmp/tmpjhskpw2j.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\"\
    \ \")\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3tz0fd07.lua:5:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp3tz0fd07.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmp3tz0fd07.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[#sorted_numbers + 1] = tonumber(numbers[i])\n\
    \  end\n  table.sort(sorted_numbers)\n  local sorted_numbers_string = \"\"\n \
    \ for i = 1, #sorted_numbers do\n    sorted_numbers_string = sorted_numbers_string\
    \ .. sorted_numbers[i]\n  end\n  return sorted_numbers_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2k7jklr.lua:21:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpp2k7jklr.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = #numbers\n  local digits = numbers:gsub(\"%d+\", \"\"\
    )\n  local digits_length = #digits\n  local digits_array = digits:gsub(\"(%d+)\"\
    , function(digit)\n    return tonumber(digit)\n  end)\n  local digits_array_length\
    \ = #digits_array\n  local digits_array_sorted = {}\n  local digits_array_sorted_length\
    \ = 0\n  for i = 1, digits_array_length do\n    digits_array_sorted[digits_array_sorted_length]\
    \ = digits_array[i]\n    digits_array_sorted_length = digits_array_sorted_length\
    \ + 1\n  end\n  local digits_array_sorted_length = digits_array_sorted_length\n\
    \  local digits_array_sorted_length = digits_array_sorted_length\n  local digits_array_sorted_length\
    \ = digits_array_sorted_length\n  local digits_array_sorted_length = digits_array_sorted_length\n\
    \  local digits_array_sorted_length = digits_array_sorted_length\n  local digits_array_sorted_length\
    \ = digits_array_sorted_length\n  local digits_array_sorted_length = digits_array_sorted_length\n\
    \  local digits_array_sorted_length = digits_array_sorted_length\n  local digits_array_sorted_length\
    \ = digits_array_sorted_length\n  local digits_array_sorted_length = digits_array_sorted_length\n\
    \  local digits_array_sorted_length = digits_array_sorted_length\n  local digits_array_sorted_length\
    \ = digits_array_sorted_length\n  local digits_array_sorted_length = digits_array_sorted_length\n\
    \  local digits_array_sorted_length = digits_array_sorted_length\n  local digits_array_sorted_length\
    \ = digits_array_sorted_length\n  local digits_array_sorted_length = digits_array_sorted_length\n\
    \  local digits_array_sorted_length = digits_array_sorted_length\n  local digits_array_sorted_length\
    \ = digits_array_sorted_length\n  local digits_array_sorted_length = digits_array_sorted_length\n\
    \  local digits_array_sorted_length = digits_array_sorted_length\n  local digits_array_sorted_length\
    \ = digits_array_sorted_length\n  local digits_array_sorted_length = digits_array_sorted_length\n\
    \  local digits_array_sorted_length = digits_array_sorted_length\n  local digits_array_sorted_length\
    \ = digits_array_sorted_length\n  local digits_array_sorted_length = digits_array_sorted_length\n\
    \  local digits_array_sorted_length = digits_array_sorted_length\n  local digits_array_sorted_length\
    \ = digits_array_sorted_length\n  local digits_array_sorted_length = digits_array_sorted_length\n\
    \  local digits_array_sorted_length = digits_array_sorted_length\n  local digit\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_u43vpa3.lua:60: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for _, number in ipairs(numbers) do\n    table.insert(sorted_numbers, tonumber(number))\n\
    \  end\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6hbwl7tk.lua:6:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp6hbwl7tk.lua:6: in function 'candidate'\n\t/tmp/tmp6hbwl7tk.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[i] = tonumber(numbers[i])\n  end\n\
    \  table.sort(sorted_numbers)\n  local sorted_numbers_string = table.concat(sorted_numbers,\
    \ \" \")\n  return sorted_numbers_string\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47f305kf.lua:18:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp47f305kf.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for _, number in ipairs(numbers) do\n    table.insert(sorted_numbers, tonumber(number))\n\
    \  end\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6hbwl7tk.lua:6:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp6hbwl7tk.lua:6: in function 'candidate'\n\t/tmp/tmp6hbwl7tk.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[#sorted_numbers + 1] = tonumber(numbers[i])\n\
    \  end\n  table.sort(sorted_numbers)\n  local sorted_numbers_string = table.concat(sorted_numbers,\
    \ \" \")\n  return sorted_numbers_string\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3jh0mzi_.lua:18:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp3jh0mzi_.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = #numbers\n  local digit_index = 0\n  local digit\n  local\
    \ digit_value\n  local digit_value_index\n  local digit_value\n  local digit_index\n\
    \  local digit_value_index\n  local digit_value\n  local digit_index\n  local\
    \ digit_value_index\n  local digit_value\n  local digit_index\n  local digit_value_index\n\
    \  local digit_value\n  local digit_index\n  local digit_value_index\n  local\
    \ digit_value\n  local digit_index\n  local digit_value_index\n  local digit_value\n\
    \  local digit_index\n  local digit_value_index\n  local digit_value\n  local\
    \ digit_index\n  local digit_value_index\n  local digit_value\n  local digit_index\n\
    \  local digit_value_index\n  local digit_value\n  local digit_index\n  local\
    \ digit_value_index\n  local digit_value\n  local digit_index\n  local digit_value_index\n\
    \  local digit_value\n  local digit_index\n  local digit_value_index\n  local\
    \ digit_value\n  local digit_index\n  local digit_value_index\n  local digit_value\n\
    \  local digit_index\n  local digit_value_index\n  local digit_value\n  local\
    \ digit_index\n  local digit_value_index\n  local digit_value\n  local digit_index\n\
    \  local digit_value_index\n  local digit_value\n  local digit_index\n  local\
    \ digit_value_index\n  local digit_value\n  local digit_index\n  local digit_value_index\n\
    \  local digit_value\n  local digit_index\n  local digit_value_index\n  local\
    \ digit_value\n  local digit_index\n  local digit_value_index\n  local digit_value\n\
    \  local digit_index\n  local digit_value_index\n  local digit_value\n  local\
    \ digit_index\n  local digit_value_index\n  local digit_value\n  local digit_index\n\
    \  local digit_value_index\n  local digit_value\n  local digit_index\n  local\
    \ digit_value_index\n  local digit_value\n  local digit_index\n  local digit_value_index\n\
    \  local digit_value\n  local digit_index\n  local digit_value_index\n  local\
    \ digit_value\n  local digit_index\n  local digit_value_index\n  local digit_value\n\
    \  local digit_index\n  local digit_value_index\n  local digit_value\n  local\
    \ digit_index\n  local digit_value_index\n  local digit_value\n  local digit_index\n\
    \  local digit_value_index\n  local digit_value\n  local digit_index\n  local\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnrmfmgd4.lua:112: ''end'' expected (to close ''function''
    at line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\n  local number_string\
    \ = \"\"\n  local number_count = 0\n  local number_string = \"\"\n  local number_count\
    \ = 0\n  local number_string = \"\"\n  local number_count = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplqysmq1d.lua:109: ''end'' expected (to close ''function''
    at line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number ~= nil then\n      sorted_numbers = sorted_numbers + number\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgce5sf6.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmgce5sf6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: -1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local i = 0\n  while i < #numbers do\n    local number = tonumber(numbers[i])\n\
    \    if number ~= nil then\n      sorted_numbers = sorted_numbers + number\n \
    \     i = i + 1\n    end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750427
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local numbers_as_string = \"\"\n  local numbers_as_string_with_commas =\
    \ \"\"\n  local i = 0\n  local j = 0\n  local last_number\n  local last_number_as_string\n\
    \  local last_number_as_string_with_commas\n  local last_number_as_string_with_commas_as_string\n\
    \  local last_number_as_string_with_commas_as_string_with_commas\n  local last_number_as_string_with_commas_as_string_with_commas_as_string\n\
    \  local last_number_as_string_with_commas_as_string_with_commas_as_string_with_commas\n\
    \  local last_number_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string\n\
    \  local last_number_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_commas\n\
    \  local last_number_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string\n\
    \  local last_number_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_commas\n\
    \  local last_number_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string\n\
    \  local last_number_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_commas\n\
    \  local last_number_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_commas\n\
    \  local last_number_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string\n\
    \  local last_number_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_commas\n\
    \  local last_number_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_commas\n\
    \  local last_number_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_commas\n\
    \  local last_number_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_commas_as_string_with_comm\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy4pb1cks.lua:40: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = 0\n  for i = 1, #numbers do\n    local digit = tonumber(numbers[i])\n\
    \    if digit ~= nil then\n      num_digits = num_digits + 1\n    end\n  end\n\
    \  local digits = math.floor(math.log10(num_digits))\n  local digits_needed =\
    \ math.floor(num_digits / digits)\n  local digits_remaining = num_digits % digits\n\
    \  local digits_needed_string = \"\"\n  for i = 1, digits_needed do\n    digits_needed_string\
    \ = digits_needed_string .. \"0\"\n  end\n  local digits_remaining_string = \"\
    \"\n  for i = 1, digits_remaining do\n    digits_remaining_string = digits_remaining_string\
    \ .. \"0\"\n  end\n  local digits_needed_index = #sorted_numbers + 1\n  local\
    \ digits_remaining_index = #sorted_numbers + 2\n  for i = 1, #numbers do\n   \
    \ local digit = tonumber(numbers[i])\n    if digit ~= nil then\n      local digits_needed_index\
    \ = digits_needed_index - 1\n      local digits_remaining_index = digits_remaining_index\
    \ - 1\n      local digits_needed_string = digits_needed_string .. \"0\"\n    \
    \  local digits_remaining_string = digits_remaining_string .. \"0\"\n      if\
    \ digit < 10 then\n        sorted_numbers = sorted_numbers .. digits_needed_string\
    \ .. digit\n      else\n        sorted_numbers = sorted_numbers .. digits_needed_string\
    \ .. digits_remaining_string .. digit\n      end\n    end\n  end\n  return sorted_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxwc9_s3.lua:47:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpcxwc9_s3.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local numbers_length = #numbers\n  for i = 1, numbers_length do\n    local\
    \ number = tonumber(numbers[i])\n    if number then\n      sorted_numbers = sorted_numbers\
    \ + number\n    end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvr59yqgn.lua:20:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpvr59yqgn.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local sorted_numbers =\
    \ {}\n    for _, number in ipairs(numbers) do\n        table.insert(sorted_numbers,\
    \ tonumber(number))\n    end\n    table.sort(sorted_numbers)\n    return table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxqnx3an6.lua:6:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpxqnx3an6.lua:6: in function 'candidate'\n\t/tmp/tmpxqnx3an6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[#sorted_numbers + 1] = tonumber(numbers[i])\n\
    \  end\n  table.sort(sorted_numbers)\n  local sorted_numbers_string = \"\"\n \
    \ for i = 1, #sorted_numbers do\n    sorted_numbers_string = sorted_numbers_string\
    \ .. sorted_numbers[i]\n  end\n  return sorted_numbers_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2k7jklr.lua:21:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpp2k7jklr.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number ~= nil then\n      sorted_numbers = sorted_numbers + number\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgce5sf6.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmgce5sf6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[#sorted_numbers + 1] = numbers[i]\n\
    \  end\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_t9w_om.lua:17:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpo_t9w_om.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[numbers[i]] = i\n  end\n  table.sort(sorted_numbers)\n\
    \  local sorted_numbers_string = \"\"\n  for i = 1, #sorted_numbers do\n    sorted_numbers_string\
    \ = sorted_numbers_string .. sorted_numbers[i]\n  end\n  return sorted_numbers_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82ew9w4n.lua:7:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmp82ew9w4n.lua:7: in function\
    \ 'candidate'\n\t/tmp/tmp82ew9w4n.lua:21: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  local num_digits = math.floor(math.log(numbers, 10))\n  local digits = math.pow(10,\
    \ num_digits)\n  local digits_needed = math.floor(numbers / digits)\n  local digits_remaining\
    \ = numbers - digits_needed * digits\n  local digits_needed_string = \"\"\n  local\
    \ digits_remaining_string = \"\"\n  for i = 1, num_digits do\n    digits_needed_string\
    \ = digits_needed_string .. \"0\"\n  end\n  for i = 1, digits_remaining do\n \
    \   digits_remaining_string = digits_remaining_string .. \"0\"\n  end\n  local\
    \ digits_needed_index = num_digits + 1\n  local digits_remaining_index = 1\n \
    \ for i = 1, num_digits do\n    sorted_numbers[digits_needed_index] = numbers\
    \ / digits\n    numbers = numbers - sorted_numbers[digits_needed_index] * digits\n\
    \    digits_needed_index = digits_needed_index - 1\n  end\n  sorted_numbers[digits_needed_index]\
    \ = numbers\n  local sorted_numbers_string = \"\"\n  for i = 1, num_digits do\n\
    \    sorted_numbers_string = sorted_numbers_string .. digits_needed_string\n \
    \ end\n  for i = 1, digits_remaining do\n    sorted_numbers_string = sorted_numbers_string\
    \ .. digits_remaining_string\n  end\n  return sorted_numbers_string\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr4wivzt0.lua:6:\
    \ bad argument #1 to 'log' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpr4wivzt0.lua:6: in function 'candidate'\n\t/tmp/tmpr4wivzt0.lua:39: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\"\
    \ \")\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3tz0fd07.lua:5:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp3tz0fd07.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmp3tz0fd07.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local number_list = numbers.split(\" \")\n  for _, number in ipairs(number_list)\
    \ do\n    sorted_numbers = sorted_numbers + number .. \" \"\n  end\n  return sorted_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb1o7l9bx.lua:6:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpb1o7l9bx.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpb1o7l9bx.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[#sorted_numbers + 1] = tonumber(numbers[i])\n\
    \  end\n  table.sort(sorted_numbers)\n  local sorted_numbers_string = \"\"\n \
    \ for i = 1, #sorted_numbers do\n    sorted_numbers_string = sorted_numbers_string\
    \ .. sorted_numbers[i]\n  end\n  return sorted_numbers_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2k7jklr.lua:21:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpp2k7jklr.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local sorted_numbers =\
    \ {}\n    local num_digits = math.floor(math.log(numbers, 10))\n    local num_digits_needed\
    \ = math.floor(math.pow(2, num_digits))\n    local num_digits_remaining = num_digits\
    \ - num_digits_needed\n    local num_digits_left_to_go = num_digits_needed\n \
    \   local num_digits_left_to_go_remaining = num_digits_remaining - 1\n    local\
    \ num_digits_left_to_go_needed = num_digits_remaining + 1\n    local num_digits_left_to_go_remaining_needed\
    \ = num_digits_needed + 1\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6ympo2gi.lua:24: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local numbers_length = #numbers\n  local numbers_index = 1\n  while numbers_index\
    \ < numbers_length do\n    local current_number = numbers[numbers_index]\n   \
    \ numbers_index = numbers_index + 1\n    local next_number = numbers[numbers_index]\n\
    \    numbers_index = numbers_index + 1\n    local current_number_length = #current_number\n\
    \    local next_number_length = #next_number\n    if current_number_length > next_number_length\
    \ then\n      sorted_numbers = sorted_numbers .. current_number\n      numbers[numbers_index]\
    \ = next_number\n    else\n      sorted_numbers = sorted_numbers .. next_number\n\
    \      numbers[numbers_index] = current_number\n    end\n  end\n  return sorted_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1nxhmriy.lua:13:\
    \ attempt to get length of local 'current_number' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp1nxhmriy.lua:13: in function 'candidate'\n\t/tmp/tmp1nxhmriy.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number ~= nil then\n      sorted_numbers = sorted_numbers .. number\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv67h8ei7.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpv67h8ei7.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\"\
    \ \")\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3tz0fd07.lua:5:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp3tz0fd07.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmp3tz0fd07.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: -1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local i = 0\n  while i < #numbers do\n    local number = tonumber(numbers[i])\n\
    \    if number ~= nil then\n      sorted_numbers = sorted_numbers + number\n \
    \     i = i + 1\n    end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750427
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[#sorted_numbers + 1] = tonumber(numbers[i])\n\
    \  end\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv4oqgu2y.lua:17:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpv4oqgu2y.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local numbers_length = #numbers\n  for i = 1, numbers_length do\n    local\
    \ number = tonumber(numbers[i])\n    if number ~= nil then\n      sorted_numbers\
    \ = sorted_numbers .. number\n    end\n  end\n  return sorted_numbers\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcbqdm627.lua:20:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpcbqdm627.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for _, number in ipairs(numbers) do\n    sorted_numbers[number] = true\n  end\n\
    \  table.sort(sorted_numbers)\n  local sorted_numbers_string = \"\"\n  for _,\
    \ number in ipairs(sorted_numbers) do\n    sorted_numbers_string = sorted_numbers_string\
    \ .. number\n  end\n  return sorted_numbers_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4w8l18h9.lua:6:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp4w8l18h9.lua:6: in function 'candidate'\n\t/tmp/tmp4w8l18h9.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750422
- exit_code: -1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local number_length = #numbers\n  local i = 0\n  while i < number_length\
    \ do\n    local number = tonumber(numbers[i])\n    if number ~= nil then\n   \
    \   sorted_numbers = sorted_numbers + number\n      i = i + 1\n    end\n  end\n\
    \  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750427
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[#sorted_numbers + 1] = tonumber(numbers[i])\n\
    \  end\n  table.sort(sorted_numbers)\n  local sorted_numbers_string = \"\"\n \
    \ for i = 1, #sorted_numbers do\n    sorted_numbers_string = sorted_numbers_string\
    \ .. sorted_numbers[i]\n  end\n  return sorted_numbers_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2k7jklr.lua:21:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpp2k7jklr.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\"\
    \ \")\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3tz0fd07.lua:5:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp3tz0fd07.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmp3tz0fd07.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[#sorted_numbers + 1] = tonumber(numbers[i])\n\
    \  end\n  table.sort(sorted_numbers)\n  local sorted_numbers_string = \"\"\n \
    \ for i = 1, #sorted_numbers do\n    sorted_numbers_string = sorted_numbers_string\
    \ .. sorted_numbers[i]\n  end\n  return sorted_numbers_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2k7jklr.lua:21:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpp2k7jklr.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number ~= nil then\n      sorted_numbers = sorted_numbers + number\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgce5sf6.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmgce5sf6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = #numbers\n  local digits = numbers:gsub(\"%d+\", \"\"\
    )\n  local digits_length = #digits\n  local digits_length = digits_length or 1\n\
    \  local digits_length = digits_length or 1\n  local digits_length = digits_length\
    \ or 1\n  local digits_length = digits_length or 1\n  local digits_length = digits_length\
    \ or 1\n  local digits_length = digits_length or 1\n  local digits_length = digits_length\
    \ or 1\n  local digits_length = digits_length or 1\n  local digits_length = digits_length\
    \ or 1\n  local digits_length = digits_length or 1\n  local digits_length = digits_length\
    \ or 1\n  local digits_length = digits_length or 1\n  local digits_length = digits_length\
    \ or 1\n  local digits_length = digits_length or 1\n  local digits_length = digits_length\
    \ or 1\n  local digits_length = digits_length or 1\n  local digits_length = digits_length\
    \ or 1\n  local digits_length = digits_length or 1\n  local digits_length = digits_length\
    \ or 1\n  local digits_length = digits_length or 1\n  local digits_length = digits_length\
    \ or 1\n  local digits_length = digits_length or 1\n  local digits_length = digits_length\
    \ or 1\n  local digits_length = digits_length or 1\n  local digits_length = digits_length\
    \ or 1\n  local digits_length = digits_length or 1\n  local digits_length = digits_length\
    \ or 1\n  local digits_length = digits_length or 1\n  local digits_length = digits_length\
    \ or 1\n  local digits_length = digits_length or 1\n  local digits_length = digits_length\
    \ or 1\n  local digits_length = digits_length or 1\n  local digits_length = digits_length\
    \ or 1\n  local digits_length = digits_length or 1\n  local digits_length = digits_length\
    \ or 1\n  local digits_length = digits_length or 1\n  local digits_length = digits_length\
    \ or 1\n  local digits_length = digits_length or 1\n  local digits_length = digits_length\
    \ or 1\n  local digits_length = digits_length or 1\n  local digits_length = digits_length\
    \ or 1\n  local digits_length = digits_length or 1\n  local digits_length = digits_length\
    \ or 1\n  local digit\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpinf68bfq.lua:64: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local numbers_length = #numbers\n  for i = 1, numbers_length do\n    local\
    \ number = tonumber(numbers[i])\n    if number ~= nil then\n      sorted_numbers\
    \ = sorted_numbers + number\n    end\n  end\n  return sorted_numbers\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2miphebf.lua:20:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp2miphebf.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local sorted_numbers =\
    \ \"\"\n    local num_digits = #numbers\n    local digits = \"\"\n    local digits_index\
    \ = 1\n    local digits_length = #digits\n    local digits_string = \"\"\n   \
    \ local digits_string_length = #digits_string\n    local digits_index = 1\n  \
    \  local digits_length = #digits\n    local digits_string = \"\"\n    local digits_string_length\
    \ = #digits_string\n    local digits_index = 1\n    local digits_length = #digits\n\
    \    local digits_string = \"\"\n    local digits_string_length = #digits_string\n\
    \    local digits_index = 1\n    local digits_length = #digits\n    local digits_string\
    \ = \"\"\n    local digits_string_length = #digits_string\n    local digits_index\
    \ = 1\n    local digits_length = #digits\n    local digits_string = \"\"\n   \
    \ local digits_string_length = #digits_string\n    local digits_index = 1\n  \
    \  local digits_length = #digits\n    local digits_string = \"\"\n    local digits_string_length\
    \ = #digits_string\n    local digits_index = 1\n    local digits_length = #digits\n\
    \    local digits_string = \"\"\n    local digits_string_length = #digits_string\n\
    \    local digits_index = 1\n    local digits_length = #digits\n    local digits_string\
    \ = \"\"\n    local digits_string_length = #digits_string\n    local digits_index\
    \ = 1\n    local digits_length = #digits\n    local digits_string = \"\"\n   \
    \ local digits_string_length = #digits_string\n    local digits_index = 1\n  \
    \  local digits_length = #digits\n    local digits_string = \"\"\n    local digits_string_length\
    \ = #digits_string\n    local digits_index = 1\n    local digits_length = #digits\n\
    \    local digits_string = \"\"\n    local digits_string_length = #digits_string\n\
    \    local digits_index = 1\n    local digits_length = #digits\n    local digits_string\
    \ = \"\"\n    local digits_string_length = #digits_string\n    local digits_index\
    \ = 1\n    local digits_length = #digits\n    local digits_string = \"\"\n   \
    \ local digits_string_length = #digits_string\n    local digits_index = 1\n  \
    \  local digits_length = #digits\n    local digits_string = \"\"\n    local digits_string_length\
    \ = #digits_string\n    local digits_index = 1\n    local digits_length = #digits\n\
    \    local digits_string = \"\"\n    local digits_string_length = #\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq8peb_a5.lua:68: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[#sorted_numbers + 1] = tonumber(numbers[i])\n\
    \  end\n  table.sort(sorted_numbers)\n  local sorted_string = \"\"\n  for i =\
    \ 1, #sorted_numbers do\n    sorted_string = sorted_string .. sorted_numbers[i]\n\
    \  end\n  return sorted_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpftgzurmi.lua:21:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpftgzurmi.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local number_string = \"\"\n  local number_count = 0\n  for number_string\
    \ in string.gmatch(numbers, \"%d+\") do\n    number_count = number_count + 1\n\
    \    sorted_numbers = sorted_numbers + number_string\n    if number_count > 9\
    \ then\n      sorted_numbers = sorted_numbers + \" \"\n    end\n  end\n  return\
    \ sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9c8uubz3.lua:22:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp9c8uubz3.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for _, number in ipairs(numbers) do\n    sorted_numbers[number] = true\n  end\n\
    \  table.sort(sorted_numbers)\n  local sorted_numbers_string = \"\"\n  for _,\
    \ number in ipairs(sorted_numbers) do\n    sorted_numbers_string = sorted_numbers_string\
    \ .. number\n  end\n  return sorted_numbers_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4w8l18h9.lua:6:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp4w8l18h9.lua:6: in function 'candidate'\n\t/tmp/tmp4w8l18h9.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  local num_digits = #numbers\n  local digits = numbers:gsub('%d+', '%%d'):gsub('%d*',\
    \ '%%d'):gsub('%d*%d*', '%%d*'):gsub('%d*%d*%d*', '%%d*%d*%d*'):gsub('%d*%d*%d*%d*',\
    \ '%%d*%d*%d*%d*%d*')\n  for i = 1, num_digits do\n    local digit = tonumber(digits:sub(i,\
    \ i))\n    if digit ~= nil then\n      table.insert(sorted_numbers, digit)\n \
    \   end\n  end\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3wb787wz.lua:22:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp3wb787wz.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[#sorted_numbers + 1] = tonumber(numbers[i])\n\
    \  end\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv4oqgu2y.lua:17:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpv4oqgu2y.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local numbers_as_string = \"\"\n  for i = 1, #numbers do\n    numbers_as_string\
    \ = numbers_as_string .. numbers[i]\n  end\n  local numbers_as_numbers = tonumber(numbers_as_string)\n\
    \  if numbers_as_numbers then\n    sorted_numbers = sorted_numbers .. numbers_as_numbers\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6nbw0cnl.lua:8:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp6nbw0cnl.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmp6nbw0cnl.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number ~= nil then\n      sorted_numbers = sorted_numbers + number\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgce5sf6.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmgce5sf6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\"\
    \ \")\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3tz0fd07.lua:5:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp3tz0fd07.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmp3tz0fd07.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\"\
    \ \")\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3tz0fd07.lua:5:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp3tz0fd07.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmp3tz0fd07.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = #numbers\n  local digit_index = 1\n  local digit\n  local\
    \ digit_value\n  local digit_string\n  local digit_index\n  local digit_string\n\
    \  local digit_index\n  local digit_string\n  local digit_index\n  local digit_string\n\
    \  local digit_index\n  local digit_string\n  local digit_index\n  local digit_string\n\
    \  local digit_index\n  local digit_string\n  local digit_index\n  local digit_string\n\
    \  local digit_index\n  local digit_string\n  local digit_index\n  local digit_string\n\
    \  local digit_index\n  local digit_string\n  local digit_index\n  local digit_string\n\
    \  local digit_index\n  local digit_string\n  local digit_index\n  local digit_string\n\
    \  local digit_index\n  local digit_string\n  local digit_index\n  local digit_string\n\
    \  local digit_index\n  local digit_string\n  local digit_index\n  local digit_string\n\
    \  local digit_index\n  local digit_string\n  local digit_index\n  local digit_string\n\
    \  local digit_index\n  local digit_string\n  local digit_index\n  local digit_string\n\
    \  local digit_index\n  local digit_string\n  local digit_index\n  local digit_string\n\
    \  local digit_index\n  local digit_string\n  local digit_index\n  local digit_string\n\
    \  local digit_index\n  local digit_string\n  local digit_index\n  local digit_string\n\
    \  local digit_index\n  local digit_string\n  local digit_index\n  local digit_string\n\
    \  local digit_index\n  local digit_string\n  local digit_index\n  local digit_string\n\
    \  local digit_index\n  local digit_string\n  local digit_index\n  local digit_string\n\
    \  local digit_index\n  local digit_string\n  local digit_index\n  local digit_string\n\
    \  local digit_index\n  local digit_string\n  local digit_index\n  local digit_string\n\
    \  local digit_index\n  local digit_string\n  local digit_index\n  local digit_string\n\
    \  local digit_index\n  local digit_string\n  local digit_index\n  local digit_string\n\
    \  local digit_index\n  local digit_string\n  local digit_index\n  local digit_string\n\
    \  local digit_index\n  local digit_string\n  local digit_index\n  local digit_string\n\
    \  local digit_index\n  local digit_string\n  local digit_index\n  local digit_string\n\
    \  local digit_index\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfmkef_j0.lua:118: ''end'' expected (to close ''function''
    at line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local numbers_as_string = \"\"\n  for i = 1, #numbers do\n    numbers_as_string\
    \ = numbers_as_string .. numbers[i]\n  end\n  local numbers_as_numbers = tonumber(numbers_as_string)\n\
    \  if numbers_as_numbers == nil then\n    return \"Invalid input\"\n  end\n  local\
    \ sorted_numbers_as_numbers = numbers_as_numbers\n  local sorted_numbers_as_string\
    \ = \"\"\n  local i = 0\n  while i < #sorted_numbers_as_numbers do\n    sorted_numbers_as_number\
    \ = sorted_numbers_as_numbers[i + 1]\n    sorted_numbers_as_string = sorted_numbers_as_string\
    \ .. sorted_numbers_as_number\n    i = i + 1\n  end\n  sorted_numbers = sorted_numbers_as_string\n\
    \  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpon9he_55.lua:29:\
    \ expected: \"\"\nactual: \"Invalid input\"\nstack traceback:\n\t/tmp/tmpon9he_55.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\"\
    \ \")\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3tz0fd07.lua:5:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp3tz0fd07.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmp3tz0fd07.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number ~= nil then\n      sorted_numbers = sorted_numbers + number\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgce5sf6.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmgce5sf6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local sorted_numbers =\
    \ \"\"\n    local num_digits = 0\n    local digit\n    local num_digits\n    local\
    \ digit\n    local num_digits\n    local digit\n    local num_digits\n    local\
    \ digit\n    local num_digits\n    local digit\n    local num_digits\n    local\
    \ digit\n    local num_digits\n    local digit\n    local num_digits\n    local\
    \ digit\n    local num_digits\n    local digit\n    local num_digits\n    local\
    \ digit\n    local num_digits\n    local digit\n    local num_digits\n    local\
    \ digit\n    local num_digits\n    local digit\n    local num_digits\n    local\
    \ digit\n    local num_digits\n    local digit\n    local num_digits\n    local\
    \ digit\n    local num_digits\n    local digit\n    local num_digits\n    local\
    \ digit\n    local num_digits\n    local digit\n    local num_digits\n    local\
    \ digit\n    local num_digits\n    local digit\n    local num_digits\n    local\
    \ digit\n    local num_digits\n    local digit\n    local num_digits\n    local\
    \ digit\n    local num_digits\n    local digit\n    local num_digits\n    local\
    \ digit\n    local num_digits\n    local digit\n    local num_digits\n    local\
    \ digit\n    local num_digits\n    local digit\n    local num_digits\n    local\
    \ digit\n    local num_digits\n    local digit\n    local num_digits\n    local\
    \ digit\n    local num_digits\n    local digit\n    local num_digits\n    local\
    \ digit\n    local num_digits\n    local digit\n    local num_digits\n    local\
    \ digit\n    local num_digits\n    local digit\n    local num_digits\n    local\
    \ digit\n    local num_digits\n    local digit\n    local num_digits\n    local\
    \ digit\n    local num_digits\n    local digit\n    local num_digits\n    local\
    \ digit\n    local num_digits\n    local digit\n    local num_digits\n    local\
    \ digit\n    local num_digits\n    local digit\n    local num_digits\n    local\
    \ digit\n    local num_digits\n    local digit\n    local num_digits\n    local\
    \ digit\n    local num_digits\n    local digit\n    local num_digits\n    local\
    \ digit\n    local num_digits\n    local digit\n    local num_digits\n    local\
    \ digit\n    local num_digits\n    local digit\n    local num_digits\n    local\
    \ digit\n    local num_digits\n    local digit\n    local num_digits\n    local\
    \ digit\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpayzoca99.lua:130: ''end'' expected (to close ''function''
    at line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = #numbers\n  local digit_index = 0\n  local digit_value\n\
    \  local digit_count\n  local digit_string\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp11a2ean3.lua:22: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local sorted_numbers =\
    \ \"\"\n    for _, number in ipairs(numbers) do\n        sorted_numbers = sorted_numbers\
    \ + number .. \" \"\n    end\n    return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprts95y98.lua:6:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmprts95y98.lua:6: in function 'candidate'\n\t/tmp/tmprts95y98.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local numbers_length = #numbers\n  local numbers_index = 1\n  local numbers_value\
    \ = numbers[1]\n  local numbers_value_length = #numbers_value\n  while numbers_index\
    \ < numbers_length do\n    local numbers_value = numbers[numbers_index]\n    local\
    \ numbers_value_length = #numbers_value\n    local numbers_value_length_string\
    \ = numbers_value_length\n    local numbers_value_length_string_length = numbers_value_length_string\n\
    \    if numbers_value_length_string_length == 1 then\n      numbers_value_length_string_length\
    \ = numbers_value_length\n    end\n    local numbers_value_length_string_length_min\
    \ = numbers_value_length_string_length - 1\n    local numbers_value_length_string_length_max\
    \ = numbers_value_length_string_length + 1\n    local numbers_value_length_string_length_min_max\
    \ = numbers_value_length_string_length_max - numbers_value_length_string_length_min\n\
    \    local numbers_value_length_string_length_min_max_length = numbers_value_length_string_length_max\
    \ - numbers_value_length_string_length_min\n    local numbers_value_length_string_length_min_max_length_min\
    \ = numbers_value_length_string_length_min_max - numbers_value_length_string_length_min\n\
    \    local numbers_value_length_string_length_min_max_length_min_max = numbers_value_length_string_length_min_max_length\
    \ - numbers_value_length_string_length_min\n    local numbers_value_length_string_length_min_max_length_min_max_length\
    \ = numbers_value_length_string_length_min_max_length_min_max - numbers_value_length_string_length_min\n\
    \    local numbers_value_length_string_length_min_max_length_min_max_length_min\
    \ = numbers_value_length_string_length_min_max_length_min_max_length - numbers_value_length_string_length_min\n\
    \    local numbers_value_length_string_length_min_max_length_min_max_length_min_max\
    \ = numbers_value_length_string_length_min_max_length_min_max_length_min_max -\
    \ numbers_value_length_string_length_min\n    local numbers_value_length_string_length_min_max_length_min_max_length_min_max_length\
    \ = numbers_value_length_string_length_min_max_length_min_max_length_min_max_length_max\
    \ - numbers_value_length_string_length_min\n    local numbers_value_length_string_length_min_max_length_min_max_length_min_max_length_min\
    \ = numbers_value_length_string_length_min_max_length_min_max_length_min_max_length_max\
    \ - numbers_value_length_string_length_min\n    local numbers_value_length_string_length_min_max_length_min_max_length_min_max_length_min_max\
    \ = numbers_value_length_string_length_min_max_length_min_max_length_min_max_length_min_max_length\
    \ - numbers_value_length_string_length_min\n    local numbers_value_length_string_length_min_max_length_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkvanyy1b.lua:42: ''end'' expected (to close ''while'' at line
    10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = math.floor(math.log(numbers, 10))\n  local num_digits_needed\
    \ = math.floor(math.pow(2, num_digits))\n  local num_digits_remaining = num_digits\
    \ - num_digits_needed\n  local num_digits_left_to_go = num_digits_needed\n  local\
    \ num_digits_left_to_go_str = string.format(\"%0d\", num_digits_left_to_go)\n\
    \  local num_digits_left_to_go_str_split = string.split(num_digits_left_to_go_str,\
    \ \".\")\n  local num_digits_left_to_go_str_split_length = #num_digits_left_to_go_str_split\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9k0enzu_.lua:24: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number then\n      sorted_numbers = sorted_numbers + number\n    end\n  end\n\
    \  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp53blpw7.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpp53blpw7.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number ~= nil then\n      sorted_numbers = sorted_numbers + number\n    end\n\
    \  end\n  table.sort(sorted_numbers)\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqtwc0j1w.lua:12:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpqtwc0j1w.lua:12: in function 'candidate'\n\t/tmp/tmpqtwc0j1w.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local numbers_length = #numbers\n  local number_string = \"\"\n  local number_string_length\
    \ = #number_string\n  local i = 0\n  while i < numbers_length do\n    local number\
    \ = tonumber(numbers[i])\n    if number == nil then\n      error(\"Invalid number\
    \ '\" .. numbers[i] .. \"'\")\n    end\n    number_string = number_string .. number\n\
    \    i = i + 1\n  end\n  local number_length = #number_string\n  local number_length_string\
    \ = #number_string\n  local number_string_index = 0\n  local number_string_length_index\
    \ = 0\n  local number_string_length_string_index = 0\n  local number_string_length_string_length_index\
    \ = 0\n  local number_string_length_string_length_string_length_index = 0\n  local\
    \ number_string_length_string_length_string_length_string_length_index = 0\n \
    \ local number_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local number_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local number_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local number_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local number_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local number_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local number_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local number_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local number_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local number_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local number_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local number_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local number_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local number_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local number_string_length_string_length_string_length_index = 0\n  local\
    \ number_string_length_string_length_index = 0\n  local number_string_length_index\
    \ = 0\n  local number_string_index = 0\n  local number_length_index = 0\n  local\
    \ number_length_string_index = 0\n  local number_length_string_length_index =\
    \ 0\n  local number_length_string_length_string_index = 0\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwlu6hsom.lua:60: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, 9 do\n    sorted_numbers = sorted_numbers .. numbers[i]\n  end\n\
    \  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7p4wwaxo.lua:7:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp7p4wwaxo.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmp7p4wwaxo.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number ~= nil then\n      sorted_numbers = sorted_numbers + number\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgce5sf6.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmgce5sf6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local numbers_as_string = \"\"\n  for i = 1, #numbers do\n    local number\
    \ = tonumber(numbers[i])\n    if number ~= nil then\n      sorted_numbers = sorted_numbers\
    \ + number\n      numbers_as_string = numbers_as_string .. number\n    end\n \
    \ end\n  return sorted_numbers, numbers_as_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_8surh7.lua:21:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpw_8surh7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local i = 0\n  while i < #numbers do\n    local number = tonumber(numbers[i])\n\
    \    if number == nil then\n      error(\"Invalid number: \" .. numbers[i])\n\
    \    end\n    sorted_numbers = sorted_numbers .. number\n    i = i + 1\n  end\n\
    \  table.sort(numbers, function(a, b) return a < b end)\n  for i = 1, #numbers\
    \ do\n    sorted_numbers = sorted_numbers .. numbers[i]\n  end\n  return sorted_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgqyr9301.lua:15:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpgqyr9301.lua:15: in function 'candidate'\n\t/tmp/tmpgqyr9301.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = #numbers\n  local num_digits_used = 0\n  local digit\n\
    \  local digit_index\n  local digit_index2\n  local digit_index3\n  local digit_index4\n\
    \  local digit_index5\n  local digit_index6\n  local digit_index7\n  local digit_index8\n\
    \  local digit_index9\n  local digit_index10\n  local digit_index11\n  local digit_index12\n\
    \  local digit_index13\n  local digit_index14\n  local digit_index15\n  local\
    \ digit_index16\n  local digit_index17\n  local digit_index18\n  local digit_index19\n\
    \  local digit_index20\n  local digit_index21\n  local digit_index22\n  local\
    \ digit_index23\n  local digit_index24\n  local digit_index25\n  local digit_index26\n\
    \  local digit_index27\n  local digit_index28\n  local digit_index29\n  local\
    \ digit_index30\n  local digit_index31\n  local digit_index32\n  local digit_index33\n\
    \  local digit_index34\n  local digit_index35\n  local digit_index36\n  local\
    \ digit_index37\n  local digit_index38\n  local digit_index39\n  local digit_index40\n\
    \  local digit_index41\n  local digit_index42\n  local digit_index43\n  local\
    \ digit_index44\n  local digit_index45\n  local digit_index46\n  local digit_index47\n\
    \  local digit_index48\n  local digit_index49\n  local digit_index50\n  local\
    \ digit_index51\n  local digit_index52\n  local digit_index53\n  local digit_index54\n\
    \  local digit_index55\n  local digit_index56\n  local digit_index57\n  local\
    \ digit_index58\n  local digit_index59\n  local digit_index60\n  local digit_index61\n\
    \  local digit_index62\n  local digit_index63\n  local digit_index64\n  local\
    \ digit_index65\n  local digit_index66\n  local digit_index67\n  local digit_index68\n\
    \  local digit_index69\n  local digit_index70\n  local digit_index71\n  local\
    \ digit_index72\n  local digit_index73\n  local digit_index74\n  local digit_index75\n\
    \  local digit_index76\n  local digit_index77\n  local digit_index78\n  local\
    \ digit_index79\n  local digit_index80\n  local digit_index81\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn6_wu2gs.lua:102: ''end'' expected (to close ''function''
    at line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number ~= nil then\n      sorted_numbers = sorted_numbers .. number\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv67h8ei7.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpv67h8ei7.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for i = 1, #numbers do\n    sorted_numbers[#sorted_numbers + 1] = tonumber(numbers[i])\n\
    \  end\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv4oqgu2y.lua:17:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpv4oqgu2y.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  for _, number in ipairs(numbers) do\n    sorted_numbers[number] = true\n  end\n\
    \  table.sort(sorted_numbers)\n  local sorted_numbers_string = \"\"\n  for _,\
    \ number in ipairs(sorted_numbers) do\n    sorted_numbers_string = sorted_numbers_string\
    \ .. number\n  end\n  return sorted_numbers_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4w8l18h9.lua:6:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp4w8l18h9.lua:6: in function 'candidate'\n\t/tmp/tmp4w8l18h9.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    sorted_numbers = sorted_numbers + numbers[i]\n\
    \  end\n  table.sort(sorted_numbers)\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbi20epv_.lua:9:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpbi20epv_.lua:9: in function 'candidate'\n\t/tmp/tmpbi20epv_.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local number_string = \"\"\n  local number_count = 0\n  for number_string\
    \ in string.gmatch(numbers, \"%d+\") do\n    number_count = tonumber(number_string)\n\
    \    if number_count > 9 then\n      number_count = number_count - 9\n    end\n\
    \    sorted_numbers = sorted_numbers & number_string\n  end\n  return sorted_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyqjnnmzl.lua:13: unexpected symbol near ''&''

    '
  stdout: ''
  timestamp: 1659750422
- exit_code: -1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local i = 0\n  while i < #numbers do\n    local number = tonumber(numbers[i])\n\
    \    if number ~= nil then\n      sorted_numbers = sorted_numbers .. number\n\
    \      i = i + 1\n    end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750427
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local sorted_numbers_index = 0\n  local sorted_numbers_length = 0\n  local\
    \ sorted_numbers_string = \"\"\n  local sorted_numbers_string_length = 0\n  local\
    \ sorted_numbers_string_length_index = 0\n  local sorted_numbers_string_length_string\
    \ = \"\"\n  local sorted_numbers_string_length_string_index = 0\n  local sorted_numbers_string_length_string_length\
    \ = 0\n  local sorted_numbers_string_length_string_length_index = 0\n  local sorted_numbers_string_length_string_length_string\
    \ = \"\"\n  local sorted_numbers_string_length_string_length_string_index = 0\n\
    \  local sorted_numbers_string_length_string_length_string_length = 0\n  local\
    \ sorted_numbers_string_length_string_length_string_length_index = 0\n  local\
    \ sorted_numbers_string_length_string_length_string_length_string = \"\"\n  local\
    \ sorted_numbers_string_length_string_length_string_length_string_index = 0\n\
    \  local sorted_numbers_string_length_string_length_string_length_string_length\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_string\
    \ = \"\"\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_index\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_length_string\
    \ = \"\"\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppgu6c_en.lua:50: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\"\
    \ \")\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3tz0fd07.lua:5:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp3tz0fd07.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmp3tz0fd07.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number ~= nil then\n      sorted_numbers = sorted_numbers + number\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgce5sf6.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmgce5sf6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number ~= nil then\n      sorted_numbers = sorted_numbers + number\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgce5sf6.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmgce5sf6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\"\
    \ \")\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3tz0fd07.lua:5:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp3tz0fd07.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmp3tz0fd07.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local numbers_length = #numbers\n  for i = 1, numbers_length do\n    local\
    \ number = tonumber(numbers[i])\n    if number ~= nil then\n      sorted_numbers\
    \ = sorted_numbers + number\n    end\n  end\n  return sorted_numbers\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2miphebf.lua:20:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp2miphebf.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local sorted_numbers =\
    \ \"\"\n    for _, number in ipairs(numbers) do\n        sorted_numbers = sorted_numbers\
    \ + number .. \" \"\n    end\n    return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprts95y98.lua:6:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmprts95y98.lua:6: in function 'candidate'\n\t/tmp/tmprts95y98.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\"\
    \ \")\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3tz0fd07.lua:5:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp3tz0fd07.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmp3tz0fd07.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = #numbers\n  local digits = numbers:gsub(\"^%s*(.-)%s*$\"\
    , \"%1\")\n  local digits_length = #digits\n  local digits_map = { zero = \"0\"\
    , one = \"1\", two = \"2\", three = \"3\", four = \"4\", five = \"5\", six = \"\
    6\", seven = \"7\", eight = \"8\", nine = \"9\" }\n  local digits_reversed = {}\n\
    \  for i = 1, num_digits do\n    digits_reversed[digits_length-i] = digits_map[digits[i]]\n\
    \  end\n  for i = 1, num_digits do\n    sorted_numbers = sorted_numbers + digits_reversed[digits_length-i]\
    \ .. \" \"\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgsckigf9.lua:15:\
    \ attempt to perform arithmetic on local 'sorted_numbers' (a string value)\nstack\
    \ traceback:\n\t/tmp/tmpgsckigf9.lua:15: in function 'candidate'\n\t/tmp/tmpgsckigf9.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local numbers_as_string = \"\"\n  for i = 1, #numbers do\n    local number\
    \ = tonumber(numbers[i])\n    if number ~= nil then\n      sorted_numbers = sorted_numbers\
    \ + number\n      numbers_as_string = numbers_as_string .. number\n    end\n \
    \ end\n  sorted_numbers = tonumber(sorted_numbers)\n  if sorted_numbers == nil\
    \ then\n    return \"nil\"\n  end\n  local sorted_numbers_as_string = tonumber(sorted_numbers_as_string)\n\
    \  if sorted_numbers_as_string == nil then\n    return \"nil\"\n  end\n  if sorted_numbers_as_string\
    \ > 9 then\n    return \"nil\"\n  end\n  if sorted_numbers_as_string < 0 then\n\
    \    return \"nil\"\n  end\n  if sorted_numbers_as_string == 0 then\n    return\
    \ \"zero\"\n  end\n  if sorted_numbers_as_string == 1 then\n    return \"one\"\
    \n  end\n  if sorted_numbers_as_string == 2 then\n    return \"two\"\n  end\n\
    \  if sorted_numbers_as_string == 3 then\n    return \"three\"\n  end\n  if sorted_numbers_as_string\
    \ == 4 then\n    return \"four\"\n  end\n  if sorted_numbers_as_string == 5 then\n\
    \    return \"five\"\n  end\n  if sorted_numbers_as_string == 6 then\n    return\
    \ \"six\"\n  end\n  if sorted_numbers_as_string == 7 then\n    return \"seven\"\
    \n  end\n  if sorted_numbers_as_string == 8 then\n    return \"eight\"\n  end\n\
    \  if sorted_numbers_as_string == 9 then\n    return \"nine\"\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyaqpsi0k.lua:63:\
    \ expected: \"\"\nactual: \"nil\"\nstack traceback:\n\t/tmp/tmpyaqpsi0k.lua:63:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = math.floor(math.log(numbers, 10))\n  local num_digits_needed\
    \ = math.floor(math.pow(2, num_digits))\n  local num_digits_remaining = num_digits\
    \ - num_digits_needed\n  local num_digits_left_to_go = num_digits_needed\n  local\
    \ num_digits_left_to_go_str = string.format(\"%0*d\", num_digits_left_to_go, num_digits_remaining)\n\
    \  local num_digits_left_to_go_str_split = string.split(num_digits_left_to_go_str,\
    \ \".\")\n  local num_digits_left_to_go_str_split_length = #num_digits_left_to_go_str_split\n\
    \  local num_digits_left_to_go_str_split_index = 1\n  local num_digits_left_to_go_str_split_index_max\
    \ = num_digits_left_to_go_str_split_length - 1\n  while num_digits_left_to_go_str_split_index\
    \ <= num_digits_left_to_go_str_split_index_max do\n    local num_digits_left_to_go_str_split_index_value\
    \ = num_digits_left_to_go_str_split[num_digits_left_to_go_str_split_index]\n \
    \   local num_digits_left_to_go_str_split_index_value_str = string.format(\"%0*d\"\
    , num_digits_left_to_go_str_split_index, num_digits_left_to_go_str_split_index_value)\n\
    \    local num_digits_left_to_go_str_split_index_value_str_split = string.split(num_digits_left_to_go_str_split_index_value_str,\
    \ \"0\")\n    local num_digits_left_to_go_str_split_index_value_str_split_length\
    \ = #num_digits_left_to_go_str_split_index_value_str_split\n    local num_digits_left_to_go_str_split_index_value_str_split_index\
    \ = 1\n    local num_digits_left_to_go_str_split_index_value_str_split_index_max\
    \ = num_digits_left_to_go_str_split_index_value_str_split_length - 1\n    while\
    \ num_digits_left_to_go_str_split_index_value_str_split_index <= num_digits_left_to_go_str_split_index_value_str_split_index_max\
    \ do\n      local num_digits_left_to_go_str_split_index_value_str_split_index_value\
    \ = num_digits_left_to_go_str_split_index_value_str_split[num_digits_left_to_go_str_split_index_value_str_split_index]\n\
    \      local num_digits_left_to_go_str_split_index_value_str_split_index_value_str\
    \ = string.format(\"%0*d\", num_digits_left_to_go_str_split_index_value_str_split_index,\
    \ num_digits_left_to_go_str_split_index_value_str_split_index_value)\n      local\
    \ num_digits_left_to_go_str_split_index_value_str_split_index_value_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx_uv_af8.lua:37: ''end'' expected (to close ''while'' at line
    22) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local sorted_numbers =\
    \ \"\"\n    local num_digits = #numbers\n    local num_digits_used = 0\n    local\
    \ num_digits_used_in_last_digit = 0\n    local num_digits_used_in_last_digit_in_last_digit\
    \ = 0\n    local num_digits_used_in_last_digit_in_last_digit_in_last_digit = 0\n\
    \    local num_digits_used_in_last_digit_in_last_digit_in_last_digit_in_last_digit\
    \ = 0\n    local num_digits_used_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit\
    \ = 0\n    local num_digits_used_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit\
    \ = 0\n    local num_digits_used_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit\
    \ = 0\n    local num_digits_used_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit\
    \ = 0\n    local num_digits_used_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit\
    \ = 0\n    local num_digits_used_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit\
    \ = 0\n    local num_digits_used_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit\
    \ = 0\n    local num_digits_used_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit\
    \ = 0\n    local num_digits_used_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit\
    \ = 0\n    local num_digits_used_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit\
    \ = 0\n    local num_digits_used_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit\
    \ = 0\n    local num_digits_used_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit_in_last_digit\
    \ = 0\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv4y30m33.lua:36: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  local num_digits = #numbers\n  local digits = {}\n  for i = 1, num_digits do\n\
    \    digits[i] = tonumber(numbers[i])\n  end\n  table.sort(digits)\n  for i =\
    \ 1, num_digits do\n    sorted_numbers[i] = digits[i]\n  end\n  return table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv2f8oibw.lua:22:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpv2f8oibw.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ number ~= nil then\n      sorted_numbers = sorted_numbers + number\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgce5sf6.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmgce5sf6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750421
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  for i = 1, #numbers do\n    sorted_numbers = sorted_numbers + numbers[i]\n\
    \  end\n  table.sort(sorted_numbers)\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbi20epv_.lua:9:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpbi20epv_.lua:9: in function 'candidate'\n\t/tmp/tmpbi20epv_.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = #numbers\n  local num_digits_used = 0\n  local num_digits_used_in_digits\
    \ = 0\n  local num_digits_used_in_digits_after_zero = 0\n  local num_digits_used_in_digits_after_one\
    \ = 0\n  local num_digits_used_in_digits_after_ten = 0\n  local num_digits_used_in_digits_after_hundred\
    \ = 0\n  local num_digits_used_in_digits_after_thousand = 0\n  local num_digits_used_in_digits_after_ten_thousand\
    \ = 0\n  local num_digits_used_in_digits_after_hundred_thousand = 0\n  local num_digits_used_in_digits_after_thousand_thousand\
    \ = 0\n  local num_digits_used_in_digits_after_hundred_thousand_thousand = 0\n\
    \  local num_digits_used_in_digits_after_thousand_hundred = 0\n  local num_digits_used_in_digits_after_thousand_hundred_thousand\
    \ = 0\n  local num_digits_used_in_digits_after_thousand_hundred_thousand_thousand\
    \ = 0\n  local num_digits_used_in_digits_after_thousand_hundred_thousand_hundred\
    \ = 0\n  local num_digits_used_in_digits_after_thousand_hundred_thousand_hundred_thousand\
    \ = 0\n  local num_digits_used_in_digits_after_thousand_hundred_thousand_hundred_thousand_thousand\
    \ = 0\n  local num_digits_used_in_digits_after_thousand_hundred_thousand_hundred_thousand_hundred\
    \ = 0\n  local num_digits_used_in_digits_after_thousand_hundred_thousand_hundred_thousand_hundred_thousand\
    \ = 0\n  local num_digits_used_in_digits_after_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred\
    \ = 0\n  local num_digits_used_in_digits_after_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand\
    \ = 0\n  local num_digits_used_in_digits_after_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred\
    \ = 0\n  local num_digits_used_in_digits_after_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand\
    \ = 0\n  local num_digits_used_in_digits_after_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred\
    \ = 0\n  local num_digits_used_in_digits_after_thousand_hundred_thousand_\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmvn26cb1.lua:43: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local number_string = \"\"\n  local number_length = 0\n  for i = 1, #numbers\
    \ do\n    number_length = number_length + 1\n    number_string = number_string\
    \ .. numbers[i]\n  end\n  number_length = number_length + 1\n  number_string =\
    \ number_string .. \"nine\"\n  for i = 1, #numbers do\n    number_length = number_length\
    \ + 1\n    number_string = number_string .. numbers[i]\n  end\n  number_length\
    \ = number_length + 1\n  number_string = number_string .. \"zero\"\n  for i =\
    \ 1, #numbers do\n    number_length = number_length + 1\n    number_string = number_string\
    \ .. numbers[i]\n  end\n  number_length = number_length + 1\n  number_string =\
    \ number_string .. \"one\"\n  for i = 1, #numbers do\n    number_length = number_length\
    \ + 1\n    number_string = number_string .. numbers[i]\n  end\n  number_length\
    \ = number_length + 1\n  number_string = number_string .. \"two\"\n  for i = 1,\
    \ #numbers do\n    number_length = number_length + 1\n    number_string = number_string\
    \ .. numbers[i]\n  end\n  number_length = number_length + 1\n  number_string =\
    \ number_string .. \"three\"\n  for i = 1, #numbers do\n    number_length = number_length\
    \ + 1\n    number_string = number_string .. numbers[i]\n  end\n  number_length\
    \ = number_length + 1\n  number_string = number_string .. \"four\"\n  for i =\
    \ 1, #numbers do\n    number_length = number_length + 1\n    number_string = number_string\
    \ .. numbers[i]\n  end\n  number_length = number_length + 1\n  number_string =\
    \ number_string .. \"five\"\n  for i = 1, #numbers do\n    number_length = number_length\
    \ + 1\n    number_string = number_string .. numbers[i]\n  end\n  number_length\
    \ = number_length + 1\n  number_string = number_string .. \"six\"\n  for i = 1,\
    \ #numbers do\n    number_length = number_length + 1\n    number_string = number_string\
    \ .. numbers[i]\n  end\n  number_length = number_length + 1\n  number_string =\
    \ number_string .. \"seven\"\n  for i = 1, #numbers do\n    number_length = number_length\
    \ + 1\n    number_string = number_string .. numbers[i]\n  end\n  number_length\
    \ = number_length + 1\n  number_string = number_string .. \"eight\"\n  for i =\
    \ 1, #numbers do\n    number_length = number_length + 1\n    number_string = number_string\
    \ .. numbers[i]\n  end\n  number_length = number_length + 1\n  number_string =\
    \ number_string .. \"nine\"\n  for i = 1, #numbers do\n    number_length = number_length\
    \ + 1\n    number_string = number_string .. numbers[i]\n  end\n  \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvwsb6c_r.lua:90: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local numbers_array = numbers.split(\" \")\n  for i = 1, #numbers_array\
    \ do\n    sorted_numbers = sorted_numbers .. numbers_array[i]\n  end\n  return\
    \ sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped7bbb9l.lua:6:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmped7bbb9l.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmped7bbb9l.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750422
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = \"\
    \"\n  local num_digits = #numbers\n  local digits = {}\n  for i = 1, num_digits\
    \ do\n    local digit = tonumber(numbers[i])\n    if digit ~= nil then\n     \
    \ digits[#digits+1] = digit\n    end\n  end\n  table.sort(digits)\n  for i = 1,\
    \ num_digits do\n    sorted_numbers = sorted_numbers + numbers[i]\n  end\n  return\
    \ sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8h7tcigv.lua:16:\
    \ attempt to perform arithmetic on local 'sorted_numbers' (a string value)\nstack\
    \ traceback:\n\t/tmp/tmp8h7tcigv.lua:16: in function 'candidate'\n\t/tmp/tmp8h7tcigv.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750422
