language: lua
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 1 then\n   \
    \ return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnba4dvhy.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpnba4dvhy.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5_qdeiy.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpc5_qdeiy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  assert(n > 0)\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcig_nvq6.lua:19:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpcig_nvq6.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 0 then\n   \
    \ return nil\n  elseif n == 0 then\n    return 1\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc0adecym.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpc0adecym.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  assert(n > 0, \"The\
    \ factorial of a negative integer is not defined.\")\n  local factorial = 1\n\
    \  for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxxga9ii.lua:19:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpqxxga9ii.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 1 then\n   \
    \ return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnba4dvhy.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpnba4dvhy.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 0 then\n   \
    \ return nil\n  end\n  local factorial = 1\n  for i = 1, n do\n    factorial =\
    \ factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_uacrww.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpp_uacrww.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5_qdeiy.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpc5_qdeiy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 0 then\n   \
    \ return nil\n  end\n  local factorial = 1\n  for i = 1, n do\n    factorial =\
    \ factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_uacrww.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpp_uacrww.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 0 then\n   \
    \ return nil\n  end\n  local factorial = 1\n  for i = 1, n do\n    factorial =\
    \ factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_uacrww.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpp_uacrww.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 0 then\n   \
    \ return nil\n  end\n  if n == 0 then\n    return 1\n  end\n  local factorial\
    \ = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdn8mqxy1.lua:24:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpdn8mqxy1.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5_qdeiy.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpc5_qdeiy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5_qdeiy.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpc5_qdeiy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  assert(n > 0, \"The\
    \ factorial of a negative number is not defined\")\n  local factorial = 1\n  for\
    \ i = 1, n do\n    factorial = factorial * (i - 1)\n  end\n  return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzxif5r2.lua:19:\
    \ expected: 288, actual: 0\nstack traceback:\n\t/tmp/tmplzxif5r2.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  assert(n > 0, \"The\
    \ factorial of a negative integer is not defined.\")\n  local factorial = 1\n\
    \  for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxxga9ii.lua:19:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpqxxga9ii.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  assert(n > 0, \"The\
    \ factorial of a negative integer is not defined\")\n  local factorial = 1\n \
    \ for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_d146n7.lua:19:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmph_d146n7.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  local factorial = 1\n\
    \  for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2dqbxubh.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp2dqbxubh.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  local factorial = 1\n\
    \  for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2dqbxubh.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp2dqbxubh.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  assert(n > 0, \"The\
    \ factorial of a negative integer is not defined\")\n  local factorial = 1\n \
    \ for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_d146n7.lua:19:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmph_d146n7.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 1 then\n   \
    \ return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnba4dvhy.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpnba4dvhy.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  assert(n > 0, \"The\
    \ factorial of a negative number is not defined\")\n  local factorial = 1\n  for\
    \ i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsqwhfvst.lua:19:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsqwhfvst.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  local factorial = 1\n\
    \  for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2dqbxubh.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp2dqbxubh.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5_qdeiy.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpc5_qdeiy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  assert(n > 0, \"The\
    \ factorial of a negative integer is not defined\")\n  local factorial = 1\n \
    \ for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_d146n7.lua:19:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmph_d146n7.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 1 then return\
    \ 1 end\n  local factorial = 1\n  for i = 2, n do\n    factorial = factorial *\
    \ i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplyylcd5y.lua:19:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmplyylcd5y.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5_qdeiy.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpc5_qdeiy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  assert(n >= 0)\n  if\
    \ n == 0 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpby8yrcv4.lua:19:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpby8yrcv4.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  assert(n > 0, \"The\
    \ factorial of a negative number is not defined\")\n  local factorial = 1\n  for\
    \ i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsqwhfvst.lua:19:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsqwhfvst.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 0 then\n   \
    \ return 0\n  elseif n == 0 then\n    return 1\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjt_65erm.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpjt_65erm.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  assert(n > 0)\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcig_nvq6.lua:19:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpcig_nvq6.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  assert(n > 0, \"The\
    \ factorial of a negative integer is not defined\")\n  local factorial = 1\n \
    \ for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_d146n7.lua:19:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmph_d146n7.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5_qdeiy.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpc5_qdeiy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  local factorial = 1\n\
    \  for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2dqbxubh.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp2dqbxubh.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 1 then return\
    \ 0 end\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial *\
    \ i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn01h3tkk.lua:19:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpn01h3tkk.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 0 then\n   \
    \ return nil\n  end\n  if n == 0 then\n    return 1\n  end\n  return n * special_factorial(n\
    \ - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8t5ov2q3.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp8t5ov2q3.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 0 then\n   \
    \ return 0\n  elseif n == 0 then\n    return 1\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjt_65erm.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpjt_65erm.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 0 then\n   \
    \ return nil\n  end\n  local factorial = 1\n  for i = 1, n do\n    factorial =\
    \ factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_uacrww.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpp_uacrww.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 0 then\n   \
    \ return nil\n  end\n  local factorial = 1\n  for i = 1, n do\n    factorial =\
    \ factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_uacrww.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpp_uacrww.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  assert(n > 0, \"The\
    \ factorial of a negative number is not defined\")\n  local factorial = 1\n  for\
    \ i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsqwhfvst.lua:19:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsqwhfvst.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5_qdeiy.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpc5_qdeiy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  -- Special case: n\
    \ is 0 or 1.\n  if n == 0 or n == 1 then\n    return 1\n  else\n    -- Calculate\
    \ the factorial of n.\n    local factorial = 1\n    for i = 1, n do\n      factorial\
    \ = factorial * i\n    end\n    return factorial\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0qjp26d6.lua:24:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0qjp26d6.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 0 then\n   \
    \ return 0\n  elseif n == 0 then\n    return 1\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjt_65erm.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpjt_65erm.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  local factorial = 1\n\
    \  for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2dqbxubh.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp2dqbxubh.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 0 then\n   \
    \ return nil\n  end\n  if n == 0 then\n    return 1\n  end\n  if n == 1 then\n\
    \    return n\n  end\n  return n * special_factorial(n - 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4p28ub8i.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp4p28ub8i.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  assert(n > 0, \"The\
    \ factorial of a negative number is not defined.\")\n  local factorial = 1\n \
    \ for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6j0zmir3.lua:19:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp6j0zmir3.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  if n == 0 then\n    return 1\n  end\n  return n * special_factorial(n\
    \ - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph79e5urg.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmph79e5urg.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  assert(n > 0, \"The\
    \ factorial of a negative number is not defined.\")\n  local factorial = 1\n \
    \ for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6j0zmir3.lua:19:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp6j0zmir3.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  local factorial = 1\n\
    \  for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2dqbxubh.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp2dqbxubh.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5_qdeiy.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpc5_qdeiy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 1 then\n   \
    \ return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnba4dvhy.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpnba4dvhy.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  assert(n > 0, \"The\
    \ factorial of a negative number is undefined\")\n  local factorial = 1\n  for\
    \ i = 1, n do\n    factorial = factorial * (i - 1)\n  end\n  return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp05wbx9z2.lua:19:\
    \ expected: 288, actual: 0\nstack traceback:\n\t/tmp/tmp05wbx9z2.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 0 then\n   \
    \ return nil\n  elseif n == 0 then\n    return 1\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc0adecym.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpc0adecym.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  assert(n > 0, \"The\
    \ factorial of a negative integer is not defined\")\n  local factorial = 1\n \
    \ for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_d146n7.lua:19:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmph_d146n7.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  assert(n >= 0, \"Negative\
    \ factorial not allowed\")\n  local factorial = 1\n  for i = 1, n do\n    factorial\
    \ = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0jutsioi.lua:19:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0jutsioi.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 0 then\n   \
    \ return nil\n  end\n  local factorial = 1\n  for i = 1, n do\n    factorial =\
    \ factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_uacrww.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpp_uacrww.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  assert(n >= 0)\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwc8b4xke.lua:19:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwc8b4xke.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 1 then return\
    \ 1 end\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial *\
    \ i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4zuo6sng.lua:19:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp4zuo6sng.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 0 then\n   \
    \ return 0\n  elseif n == 0 then\n    return 1\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjt_65erm.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpjt_65erm.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 0 then\n   \
    \ return 0\n  elseif n == 0 then\n    return 1\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjt_65erm.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpjt_65erm.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 0 then\n   \
    \ return 0\n  elseif n == 0 then\n    return 1\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjt_65erm.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpjt_65erm.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n < 1 then return\
    \ 1 end\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial *\
    \ i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4zuo6sng.lua:19:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp4zuo6sng.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw2jrkx3.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsw2jrkx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978828
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- The function\
    \ will receive an integer as input and should return the special\n-- factorial\
    \ of this integer.\nlocal function special_factorial(n)\n  if n == 0 then\n  \
    \  return 1\n  elseif n == 1 then\n    return n\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvgjtyem.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwvgjtyem.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978872
