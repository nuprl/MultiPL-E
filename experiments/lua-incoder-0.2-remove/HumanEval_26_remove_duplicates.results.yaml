language: lua
name: HumanEval_26_remove_duplicates
results:
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in pairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuel28q4.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpfuel28q4.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n    if new_numbers[number]\
    \ == nil then\n      table.insert(new_numbers, number)\n    end\n  end\n  return\
    \ new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1c2ljae.lua:18:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpx1c2ljae.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if result[number]\
    \ == nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt9canki.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpqt9canki.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, v in pairs(numbers) do\n    if result[#result]\
    \ == nil then\n      result[#result] = v\n    else\n      result[#result] = v\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpznm9slzr.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {0=4}\nstack traceback:\n\t/tmp/tmpznm9slzr.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if result[number]\
    \ == nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt9canki.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpqt9canki.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in pairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuel28q4.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpfuel28q4.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in pairs(numbers) do\n    table.insert(result,\
    \ value)\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6m3qtv5e.lua:17:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 2, 3, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp6m3qtv5e.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in pairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuel28q4.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpfuel28q4.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if result[number]\
    \ == nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt9canki.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpqt9canki.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if result[number]\
    \ == nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt9canki.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpqt9canki.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if result[number]\
    \ == nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt9canki.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpqt9canki.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  local seen = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwcqmbo3o.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpwcqmbo3o.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    table.insert(result,\
    \ number)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsxgq3sh3.lua:16:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmpsxgq3sh3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local result = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnqvtmhb.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpjnqvtmhb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  local seen = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwcqmbo3o.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpwcqmbo3o.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  local seen = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwcqmbo3o.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpwcqmbo3o.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in pairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuel28q4.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpfuel28q4.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in pairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuel28q4.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpfuel28q4.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, v in ipairs(numbers) do\n    if result[#result+1]\
    \ == v then\n      result[#result+1] = v\n    else\n      result[#result+1] =\
    \ v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpai16708j.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmpai16708j.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local output = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      table.insert(output, num)\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu275m78b.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpu275m78b.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  local seen = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwcqmbo3o.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpwcqmbo3o.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n    if new_numbers[number]\
    \ == nil then\n      new_numbers[number] = true\n    end\n  end\n  return new_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpew6vyjvg.lua:17:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpew6vyjvg.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n    local count\
    \ = new_numbers[number]\n    new_numbers[number] = count or 0\n  end\n  return\
    \ new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetzt_9gt.lua:16:\
    \ expected: {1, 2, 3, 4}\nactual: {0, 0, 0, 0}\nstack traceback:\n\t/tmp/tmpetzt_9gt.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local result = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnqvtmhb.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpjnqvtmhb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  local seen = {}\n  for _, v in pairs(numbers) do\n   \
    \ if seen[v] == nil then\n      seen[v] = true\n      result[v] = true\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3zx_etww.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp3zx_etww.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in pairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuel28q4.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpfuel28q4.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if result[number]\
    \ == nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt9canki.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpqt9canki.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local output = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      table.insert(output, num)\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu275m78b.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpu275m78b.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in pairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuel28q4.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpfuel28q4.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local output = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      output[#output + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgm5m41r.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpzgm5m41r.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if result[number]\
    \ == nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt9canki.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpqt9canki.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  local seen = {}\n  for _, value in pairs(numbers) do\n\
    \    if seen[value] then\n      result[#result + 1] = value\n    else\n      seen[value]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp77ytj4b5.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmp77ytj4b5.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in pairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuel28q4.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpfuel28q4.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  local seen = {}\n  for _, num in pairs(numbers) do\n \
    \   if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcj614thc.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpcj614thc.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local result = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnqvtmhb.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpjnqvtmhb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local output = {}\n  for i = 1, #numbers do\n    if seen[numbers[i]]\
    \ then\n      output[#output + 1] = numbers[i]\n    else\n      seen[numbers[i]]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr7jj_hkd.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpr7jj_hkd.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if result[number]\
    \ == nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt9canki.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpqt9canki.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  local seen = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwcqmbo3o.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpwcqmbo3o.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if result[number]\
    \ == nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt9canki.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpqt9canki.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local result = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnqvtmhb.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpjnqvtmhb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  local seen = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwcqmbo3o.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpwcqmbo3o.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  local seen = {}\n  for _, num in pairs(numbers) do\n \
    \   if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcj614thc.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpcj614thc.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, v in ipairs(numbers) do\n    if result[#result]\
    \ == nil then\n      result[#result] = v\n    else\n      result[#result] = v\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuk0j47qx.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {0=4}\nstack traceback:\n\t/tmp/tmpuk0j47qx.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if result[number]\
    \ == nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt9canki.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpqt9canki.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, v in pairs(numbers) do\n    if result[#result]\
    \ == nil then\n      result[#result] = v\n    else\n      result[#result] = v\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpznm9slzr.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {0=4}\nstack traceback:\n\t/tmp/tmpznm9slzr.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n    if new_numbers[number]\
    \ == nil then\n      table.insert(new_numbers, number)\n    end\n  end\n  return\
    \ new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1c2ljae.lua:18:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpx1c2ljae.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if result[number]\
    \ == nil then\n      result[number] = number\n    else\n      result[number] =\
    \ number\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfy37quhb.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpfy37quhb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in pairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuel28q4.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpfuel28q4.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if result[number]\
    \ == nil then\n      result[number] = number\n    else\n      result[number] =\
    \ result[number] .. \", \" .. number\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6puq9k_9.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, \"2, 2\", \"3, 3\", 4, 5}\nstack traceback:\n\
    \t/tmp/tmp6puq9k_9.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in pairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuel28q4.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpfuel28q4.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if result[number]\
    \ == nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt9canki.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpqt9canki.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if result[number]\
    \ == nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt9canki.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpqt9canki.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if result[number]\
    \ == nil then\n      result[number] = number\n    else\n      result[number] =\
    \ number\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfy37quhb.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpfy37quhb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n    if new_numbers[number]\
    \ == nil then\n      table.insert(new_numbers, number)\n    end\n  end\n  return\
    \ new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1c2ljae.lua:18:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpx1c2ljae.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if result[number]\
    \ == nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt9canki.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpqt9canki.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n    if new_numbers[number]\
    \ == nil then\n      table.insert(new_numbers, number)\n    end\n  end\n  return\
    \ new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1c2ljae.lua:18:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpx1c2ljae.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in pairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuel28q4.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpfuel28q4.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  local seen = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwcqmbo3o.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpwcqmbo3o.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in pairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuel28q4.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpfuel28q4.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if result[number]\
    \ == nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt9canki.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpqt9canki.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local result = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnqvtmhb.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpjnqvtmhb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if result[number]\
    \ == nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt9canki.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpqt9canki.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  local seen = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwcqmbo3o.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpwcqmbo3o.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if result[number]\
    \ == nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt9canki.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpqt9canki.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = value\n    else\n      result[value] = result[value]\
    \ ~= value and result[value] or value\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpolvygnig.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpolvygnig.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  local seen = {}\n  for _, num in pairs(numbers) do\n \
    \   if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcj614thc.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpcj614thc.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  local seen = {}\n  for _, num in pairs(numbers) do\n \
    \   if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcj614thc.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpcj614thc.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n    if new_numbers[number]\
    \ == nil then\n      table.insert(new_numbers, number)\n    end\n  end\n  return\
    \ new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1c2ljae.lua:18:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpx1c2ljae.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  local seen = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwcqmbo3o.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpwcqmbo3o.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n    if new_numbers[number]\
    \ == nil then\n      table.insert(new_numbers, number)\n    end\n  end\n  return\
    \ new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1c2ljae.lua:18:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpx1c2ljae.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  local seen = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwcqmbo3o.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpwcqmbo3o.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local output = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      table.insert(output, num)\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu275m78b.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpu275m78b.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local result = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnqvtmhb.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpjnqvtmhb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n    if new_numbers[number]\
    \ == nil then\n      table.insert(new_numbers, number)\n    end\n  end\n  return\
    \ new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1c2ljae.lua:18:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpx1c2ljae.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in pairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuel28q4.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpfuel28q4.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n    local count\
    \ = new_numbers[number]\n    new_numbers[number] = count + 1\n  end\n  return\
    \ new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1r11lbyb.lua:7:\
    \ attempt to perform arithmetic on local 'count' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp1r11lbyb.lua:7: in function 'candidate'\n\t/tmp/tmp1r11lbyb.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in pairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuel28q4.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpfuel28q4.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n    if new_numbers[number]\
    \ == nil then\n      table.insert(new_numbers, number)\n    end\n  end\n  return\
    \ new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1c2ljae.lua:18:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpx1c2ljae.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  local seen = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwcqmbo3o.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpwcqmbo3o.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in pairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuel28q4.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpfuel28q4.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  local seen = {}\n  for _, value in pairs(numbers) do\n\
    \    if seen[value] then\n      result[#result + 1] = value\n    else\n      seen[value]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp77ytj4b5.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmp77ytj4b5.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if result[number]\
    \ == nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt9canki.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpqt9canki.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local result = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnqvtmhb.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpjnqvtmhb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if result[number]\
    \ == nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt9canki.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpqt9canki.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local result = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnqvtmhb.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpjnqvtmhb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  local seen = {}\n  for _, v in pairs(numbers) do\n   \
    \ if seen[v] then\n      result[#result + 1] = v\n    else\n      seen[v] = true\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzd922gma.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpzd922gma.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in pairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuel28q4.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpfuel28q4.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in pairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuel28q4.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpfuel28q4.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local result = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnqvtmhb.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpjnqvtmhb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n    if new_numbers[number]\
    \ == nil then\n      table.insert(new_numbers, number)\n    end\n  end\n  return\
    \ new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1c2ljae.lua:18:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpx1c2ljae.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n    if new_numbers[number]\
    \ == nil then\n      table.insert(new_numbers, number)\n    end\n  end\n  return\
    \ new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1c2ljae.lua:18:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpx1c2ljae.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if result[number]\
    \ == nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt9canki.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpqt9canki.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  for _, num in ipairs(numbers) do\n    if seen[num] then\n\
    \      table.remove(numbers, num)\n    else\n      seen[num] = true\n    end\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyqjunfvq.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 3, 4, 3, 5}\nstack traceback:\n\t/tmp/tmpyqjunfvq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, v in pairs(numbers) do\n    if result[#result]\
    \ == nil then\n      result[#result] = v\n    else\n      result[#result] = v\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpznm9slzr.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {0=4}\nstack traceback:\n\t/tmp/tmpznm9slzr.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in pairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuel28q4.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpfuel28q4.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if result[number]\
    \ == nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt9canki.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpqt9canki.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in pairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuel28q4.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpfuel28q4.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if result[number]\
    \ == nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt9canki.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpqt9canki.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n    if new_numbers[number]\
    \ == nil then\n      table.insert(new_numbers, number)\n    end\n  end\n  return\
    \ new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1c2ljae.lua:18:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpx1c2ljae.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, v in ipairs(numbers) do\n    if result[#result\
    \ + 1] == v then\n      result[#result + 1] = v\n    else\n      result[#result\
    \ + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8w77s_9b.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmp8w77s_9b.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if result[number]\
    \ == nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt9canki.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpqt9canki.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n    if new_numbers[number]\
    \ == nil then\n      table.insert(new_numbers, number)\n    end\n  end\n  return\
    \ new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1c2ljae.lua:18:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpx1c2ljae.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  local seen = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwcqmbo3o.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpwcqmbo3o.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = value\n    else\n      result[value] = result[value]\
    \ .. \", \" .. value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp798hupg2.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, \"2, 2\", \"3, 3\", 4, 5}\nstack traceback:\n\
    \t/tmp/tmp798hupg2.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in pairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuel28q4.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpfuel28q4.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local result = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnqvtmhb.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpjnqvtmhb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, v in pairs(numbers) do\n    if #result < v then\n\
    \      table.insert(result, v)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3j60bomd.lua:18:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp3j60bomd.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local result = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnqvtmhb.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpjnqvtmhb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  local seen = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwcqmbo3o.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpwcqmbo3o.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local result = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnqvtmhb.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpjnqvtmhb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, v in ipairs(numbers) do\n    if result[#result]\
    \ == nil then\n      result[#result] = v\n    else\n      result[#result] = v\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuk0j47qx.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {0=4}\nstack traceback:\n\t/tmp/tmpuk0j47qx.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in pairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuel28q4.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpfuel28q4.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  local seen = {}\n  for _, v in pairs(numbers) do\n   \
    \ if seen[v] == nil then\n      seen[v] = true\n      result[v] = true\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3zx_etww.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp3zx_etww.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local output = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      table.insert(output, num)\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu275m78b.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpu275m78b.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if result[number]\
    \ == nil then\n      result[number] = true\n    else\n      result[number] = false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt9canki.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmpqt9canki.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local output = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      table.insert(output, num)\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu275m78b.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpu275m78b.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local result = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnqvtmhb.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpjnqvtmhb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, num in ipairs(numbers) do\n    if result[num] ==\
    \ nil then\n      result[num] = true\n    else\n      result[num] = false\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lsdu93c.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp1lsdu93c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, value in ipairs(numbers) do\n    if result[value]\
    \ == nil then\n      result[value] = 1\n    else\n      result[value] = result[value]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj5uocu_.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpaj5uocu_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local result = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnqvtmhb.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpjnqvtmhb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local result = {}\n  for _, num in ipairs(numbers) do\n\
    \    if seen[num] then\n      result[#result + 1] = num\n    else\n      seen[num]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnqvtmhb.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpjnqvtmhb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: -1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  for _, num in ipairs(numbers) do\n    if seen[num] then\n\
    \      table.insert(numbers, seen[num])\n    else\n      seen[num] = true\n  \
    \  end\n  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750338
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, v in ipairs(numbers) do\n    if result[#result\
    \ + 1] == v then\n      result[#result + 1] = v\n    else\n      result[#result\
    \ + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8w77s_9b.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmp8w77s_9b.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n    if new_numbers[number]\
    \ == nil then\n      table.insert(new_numbers, number)\n    end\n  end\n  return\
    \ new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1c2ljae.lua:18:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpx1c2ljae.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n    if new_numbers[number]\
    \ == nil then\n      table.insert(new_numbers, number)\n    end\n  end\n  return\
    \ new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1c2ljae.lua:18:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpx1c2ljae.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    local count =\
    \ result[number]\n    if count == nil then\n      result[number] = 1\n    else\n\
    \      result[number] = count + 1\n    end\n  end\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsudbf2q8.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpsudbf2q8.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750333
