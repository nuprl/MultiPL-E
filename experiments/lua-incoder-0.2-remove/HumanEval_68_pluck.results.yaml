language: lua
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugcntxju.lua:37: ''end'' expected (to close ''function'' at
    line 18) near <eof>

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugcntxju.lua:37: ''end'' expected (to close ''function'' at
    line 18) near <eof>

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\
    \ = 0\n  local smallest_index = 0\n  for i = 1, #arr do\n    if arr[i].value %\
    \ 2 == 0 then\n      if smallest_value == 0 then\n        smallest_value = arr[i].value\n\
    \        smallest_index = i\n      elseif smallest_value < arr[i].value then\n\
    \        smallest_value = arr[i].value\n        smallest_index = i\n      end\n\
    \    end\n  end\n  if smallest_value == 0 then\n    return nil\n  end\n  return\
    \ smallest_value, smallest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp072t4ohq.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmp072t4ohq.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp072t4ohq.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_node\n    local index\n    for i = 1, #arr do\n  \
    \      if arr[i] < min_value then\n            min_value = arr[i]\n          \
    \  min_node = i\n        end\n    end\n    if min_value == math.inf then\n   \
    \     return nil\n    end\n    if min_value % 2 == 0 then\n        index = min_node\n\
    \    else\n        index = min_node - 1\n    end\n    return arr[index], index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb8cy4fys.lua:23:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpb8cy4fys.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpb8cy4fys.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = nil\n    local smallest_index = nil\n    for i = 1, #arr do\n        if arr[i].value\
    \ % 2 == 0 then\n            if smallest_value == nil or arr[i].value < smallest_value\
    \ then\n                smallest_value = arr[i].value\n                smallest_index\
    \ = i\n            end\n        end\n    end\n    if smallest_value == nil then\n\
    \        return nil\n    end\n    return smallest_value, smallest_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm2ckfgd6.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpm2ckfgd6.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpm2ckfgd6.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- base case\n\
    \  if #arr == 0 then\n    return nil\n  end\n  -- base case\n  if #arr == 1 then\n\
    \    return arr[1]\n  end\n  -- base case\n  if #arr == 2 then\n    if arr[1]\
    \ % 2 == 0 then\n      return arr[1]\n    else\n      return arr[1]\n    end\n\
    \  end\n  -- base case\n  if #arr == 3 then\n    if arr[1] % 2 == 0 and arr[2]\
    \ % 2 == 0 then\n      return arr[1]\n    else\n      return arr[1]\n    end\n\
    \  end\n  -- base case\n  if #arr == 4 then\n    if arr[1] % 2 == 0 and arr[2]\
    \ % 2 == 0 and arr[3] % 2 == 0 then\n      return arr[1]\n    else\n      return\
    \ arr[1]\n    end\n  end\n  -- base case\n  if #arr == 5 then\n    if arr[1] %\
    \ 2 == 0 and arr[2] % 2 == 0 and arr[3] % 2 == 0 and arr[4] % 2 == 0 then\n  \
    \    return arr[1]\n    else\n      return arr[1]\n    end\n  end\n  -- base case\n\
    \  if #arr == 6 then\n    if arr[1] % 2 == 0 and arr[2] % 2 == 0 and arr[3] %\
    \ 2 == 0 and arr[4] % 2 == 0 and arr[5] % 2 == 0 then\n      return arr[1]\n \
    \   else\n      return arr[1]\n    end\n  end\n  -- base case\n  if #arr == 7\
    \ then\n    if arr[1] % 2 == 0 and arr[2] % 2 == 0 and arr[3] % 2 == 0 and arr[4]\
    \ % 2 == 0 and arr[5] % 2 == 0 and arr[6] % 2 == 0 then\n      return arr[1]\n\
    \    else\n      return arr[1]\n    end\n  end\n  -- base case\n  if #arr == 8\
    \ then\n    if arr[1] % 2 == 0 and arr[2] % 2 == 0 and arr[3] % 2 == 0 and arr[4]\
    \ % 2 == 0 and arr[5] % 2 == 0 and arr[6] % 2 == 0 and arr[7] % 2 == 0 then\n\
    \      return arr[1]\n    else\n      return arr[1]\n    end\n  end\n  -- base\
    \ case\n  if #arr == 9 or #arr == 10 then\n    if arr[1] % 2 == 0 and arr[2] %\
    \ 2 == 0 and arr[3] % 2 == 0 and arr[4] % 2 == 0 and arr[5] % 2 == 0 and arr[6]\
    \ % 2 == 0 and arr[7] % 2 == 0 and arr[8] % 2 == 0 then\n      return arr[1]\n\
    \    else\n      return arr[1]\n    end\n  end\n  -- base case\n  if #arr == 11\
    \ or #arr == 12 then\n    if arr[1] % 2 == 0 and arr[2] % 2 == 0 and arr[3] %\
    \ 2 == 0 and arr[4] % 2 == 0 and arr[5] % 2 == 0 and arr[6] % 2 == 0 and arr[7]\
    \ % 2 == \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4hnox1un.lua:94: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugcntxju.lua:37: ''end'' expected (to close ''function'' at
    line 18) near <eof>

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = nil\n    local smallest_index = nil\n    local smallest_even_value = nil\n\
    \    local smallest_even_index = nil\n    for i = 1, #arr do\n        if arr[i].value\
    \ % 2 == 0 then\n            if smallest_value == nil or arr[i].value < smallest_value\
    \ then\n                smallest_value = arr[i].value\n                smallest_index\
    \ = i\n            elseif arr[i].value == smallest_value and arr[i].index <= smallest_index\
    \ then\n                smallest_index = arr[i].index\n            end\n     \
    \   end\n        if smallest_even_value == nil or arr[i].value < smallest_even_value\
    \ then\n            smallest_even_value = arr[i].value\n            smallest_even_index\
    \ = i\n        end\n    end\n    if smallest_even_value == nil then\n        return\
    \ nil\n    end\n    return smallest_even_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpug609m34.lua:24:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpug609m34.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpug609m34.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Your code here\n\
    \  local smalest_value = 0\n  local smallest_index = 0\n  for i = 1, #arr do\n\
    \    if arr[i] % 2 == 0 then\n      if smalest_value == 0 then\n        smalest_value\
    \ = arr[i]\n        smallest_index = i\n      elseif smalest_value < arr[i] then\n\
    \        smalest_value = arr[i]\n        smallest_index = i\n      end\n    end\n\
    \  end\n  if smalest_value == 0 then\n    return nil\n  end\n  return smalest_value,\
    \ smallest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdokoszfr.lua:42:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpdokoszfr.lua:42: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smallest_index = nil\n    local smallest_index_value = nil\n\
    \    for i = 1, #arr do\n        if arr[i] < smallest_index_value then\n     \
    \       smallest_index_value = arr[i]\n            smallest_index = i\n      \
    \  end\n        if arr[i] < smalest_value then\n            smalest_value = arr[i]\n\
    \        end\n    end\n    if smallest_index_value == nil then\n        return\
    \ nil\n    end\n    if smallest_index_value % 2 == 0 then\n        return smallest_index,\
    \ smallest_index_value\n    else\n        return smallest_index\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfp61f21c.lua:23:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpfp61f21c.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpfp61f21c.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugcntxju.lua:37: ''end'' expected (to close ''function'' at
    line 18) near <eof>

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugcntxju.lua:37: ''end'' expected (to close ''function'' at
    line 18) near <eof>

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Your code here\n\
    \  local smalest_value = 0\n  local smalest_index = 0\n  for i = 1, #arr do\n\
    \    if arr[i] % 2 == 0 then\n      if smalest_value == 0 then\n        smalest_value\
    \ = arr[i]\n        smalest_index = i\n      elseif smalest_value < arr[i] then\n\
    \        smalest_value = arr[i]\n        smalest_index = i\n      end\n    end\n\
    \  end\n  if smalest_value == 0 then\n    return nil\n  else\n    return smalest_value,\
    \ smalest_index\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxa5vtle.lua:43:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpcxa5vtle.lua:43: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    for i = 1, #arr do\n        if arr[i].value\
    \ % 2 == 0 then\n            if smallest_value < arr[i].value then\n         \
    \       smallest_value = arr[i].value\n                smallest_index = i\n  \
    \          end\n        end\n    end\n    if smallest_value == 0 then\n      \
    \  return nil\n    end\n    return smallest_value, smallest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpojyhp_nr.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpojyhp_nr.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpojyhp_nr.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i] < smallest_value then\n            smallest_value = arr[i]\n        \
    \    smallest_index = i\n        end\n    end\n    if smallest_value == math.inf\
    \ then\n        return nil\n    end\n    local smalest_value = smallest_value\n\
    \    local smalest_index = smallest_index\n    for i = 1, #arr do\n        if\
    \ arr[i] == smalest_value then\n            smalest_index = i\n        end\n \
    \   end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6nicak_0.lua:22:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp6nicak_0.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6nicak_0.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    for i = 1, #arr do\n        if arr[i].value\
    \ % 2 == 0 then\n            if smalest_value == nil then\n                smalest_value\
    \ = arr[i].value\n                smalest_index = i\n            elseif smalest_value\
    \ < arr[i].value then\n                smalest_value = arr[i].value\n        \
    \        smalest_index = i\n            end\n        end\n    end\n    if smalest_value\
    \ == nil then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp46cn2f14.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmp46cn2f14.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp46cn2f14.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index\n    local index\n    for index, value\
    \ in ipairs(arr) do\n        if value < smallest_value then\n            smallest_value\
    \ = value\n            smallest_index = index\n        end\n    end\n    if smallest_value\
    \ == math.inf then\n        return nil\n    end\n    local index = smallest_index\n\
    \    local value = smallest_value\n    local result\n    while true do\n     \
    \   local next_value = arr[index + 1]\n        if next_value == math.inf then\n\
    \            return result\n        end\n        if next_value % 2 == 0 then\n\
    \            local next_index = index + 1\n            if next_index > #arr then\n\
    \                next_index = #arr\n            end\n            if next_index\
    \ == #arr then\n                next_index = index\n            end\n        \
    \    if next_value < smallest_value then\n                smallest_value = next_value\n\
    \                smallest_index = next_index\n            end\n            index\
    \ = next_index\n            value = next_value\n        else\n            index\
    \ = index + 1\n            if index > #arr then\n                index = #arr\n\
    \            end\n            if value == smallest_value then\n              \
    \  result = smallest_value\n                break\n            end\n        end\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9asjgqru.lua:23:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp9asjgqru.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp9asjgqru.lua:69: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugcntxju.lua:37: ''end'' expected (to close ''function'' at
    line 18) near <eof>

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = nil\n    local smallest_index = nil\n    for i = 1, #arr do\n        if arr[i].value\
    \ % 2 == 0 then\n            if smallest_value == nil or arr[i].value < smallest_value\
    \ then\n                smallest_value = arr[i].value\n                smallest_index\
    \ = i\n            end\n        end\n    end\n    if smallest_value == nil then\n\
    \        return nil\n    end\n    return smallest_value, smallest_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm2ckfgd6.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpm2ckfgd6.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpm2ckfgd6.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node = {}\n    for i = 1,\
    \ #arr do\n        if arr[i].value % 2 == 0 then\n            if arr[i].value\
    \ < smalest_value then\n                smalest_value = arr[i].value\n       \
    \         smalest_index = i\n            end\n        end\n    end\n    if smalest_value\
    \ ~= 0 then\n        smalest_node = arr[smalest_index]\n    end\n    return smalest_node\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn8x6v1xi.lua:23:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpn8x6v1xi.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpn8x6v1xi.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugcntxju.lua:37: ''end'' expected (to close ''function'' at
    line 18) near <eof>

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min_value\
    \ = math.inf\n  local min_idx\n  for idx, value in ipairs(arr) do\n    if value\
    \ % 2 == 0 then\n      if value < min_value then\n        min_value = value\n\
    \        min_idx = idx\n      end\n    end\n  end\n  return min_value, min_idx\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpofprv6ck.lua:23:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpofprv6ck.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpofprv6ck.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    for _, node in ipairs(arr) do\n        if node.value\
    \ % 2 == 0 then\n            if smalest_value < node.value then\n            \
    \    smalest_value = node.value\n                smalest_index = node.index\n\
    \            end\n        end\n    end\n    if smalest_value == 0 then\n     \
    \   return nil\n    end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_697v_rr.lua:21:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmp_697v_rr.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp_697v_rr.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index, smalest_node\n    for i = 1, #arr do\n        if arr[i].value\
    \ % 2 == 0 then\n            if smalest_value == nil then\n                smalest_value\
    \ = arr[i].value\n                smalest_index = i\n                smalest_node\
    \ = arr[i]\n            elseif smalest_value < arr[i].value then\n           \
    \     smalest_value = arr[i].value\n                smalest_index = i\n      \
    \          smalest_node = arr[i]\n            end\n        end\n    end\n    if\
    \ smalest_value == nil then\n        return nil\n    end\n    if smalest_node.value\
    \ == smalest_value then\n        return smalest_node\n    end\n    return smalest_node,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpee6kf9b9.lua:21:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpee6kf9b9.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpee6kf9b9.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i] < smallest_value then\n            smallest_value = arr[i]\n        \
    \    smallest_index = i\n        end\n    end\n    if smallest_value == math.inf\
    \ then\n        return nil\n    end\n    local smalest_value = smallest_value\n\
    \    local smalest_index = smallest_index\n    for i = 1, #arr do\n        if\
    \ arr[i] < smalest_value then\n            smalest_value = arr[i]\n          \
    \  smalest_index = i\n        end\n    end\n    return smalest_value, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcaa4_w58.lua:22:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpcaa4_w58.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpcaa4_w58.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local index =\
    \ 1\n    local smalest_value = arr[1]\n    local smalest_index = 1\n    for i\
    \ = 2, #arr do\n        if arr[i] < smalest_value then\n            smalest_value\
    \ = arr[i]\n            smalest_index = index\n        end\n        index = index\
    \ + 1\n    end\n    if smalest_value == 0 then\n        return nil\n    end\n\
    \    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm63siz0f.lua:38:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpm63siz0f.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\n\
    \    local smallest_index\n    local smallest_even_value\n    local index\n  \
    \  local even_value\n    local value\n    local result\n    for index, value in\
    \ ipairs(arr) do\n        if value == 0 then\n            if smallest_value ==\
    \ nil then\n                smallest_value = value\n                smallest_index\
    \ = index\n                smallest_even_value = value\n            else\n   \
    \             if smallest_value == value then\n                    smallest_even_value\
    \ = smallest_even_value\n                    smallest_index = smallest_index\n\
    \                else\n                    if smallest_even_value < value then\n\
    \                        smallest_even_value = value\n                       \
    \ smallest_index = index\n                    end\n                end\n     \
    \       end\n        else\n            if smallest_value == nil then\n       \
    \         smallest_value = value\n                smallest_index = index\n   \
    \             smallest_even_value = value\n            else\n                if\
    \ smallest_value == value then\n                    smallest_even_value = smallest_even_value\n\
    \                    smallest_index = smallest_index\n                else\n \
    \                   if smallest_even_value < value then\n                    \
    \    smallest_even_value = value\n                        smallest_index = index\n\
    \                    end\n                end\n            end\n        end\n\
    \    end\n    if smallest_even_value == nil then\n        return nil\n    end\n\
    \    if smallest_value == nil then\n        return nil\n    end\n    if smallest_index\
    \ == nil then\n        return nil\n    end\n    if smallest_even_value < 0 then\n\
    \        return nil\n    end\n    if smallest_even_value == 0 then\n        return\
    \ smallest_index, smallest_even_value\n    end\n    if smallest_even_value ==\
    \ 1 then\n        return smallest_index, smallest_even_value\n    end\n    if\
    \ smallest_even_value == 2 then\n        return smallest_index, smallest_even_value\n\
    \    end\n    if smallest_even_value == 3 then\n        return smallest_index,\
    \ smallest_even_value\n    end\n    if smallest_even_value == 4 then\n       \
    \ return smallest_index, smallest_even_value\n    end\n    if smallest_even_value\
    \ == 5 then\n        return smallest_index, smallest_even_value\n    end\n   \
    \ if smallest_even_value == 6 then\n        return smallest_index, smallest_even_value\n\
    \    end\n    if smallest_even_value == 7 then\n        return smallest_index,\
    \ smallest_even_value\n    end\n    if smallest_even_value == 8 then\n       \
    \ return smallest_index, smallest_even_value\n    end\n    if smallest_even_value\
    \ == 9 then\n        return smallest_index, smallest_even_value\n    end\n   \
    \ if smallest_even_value == 10 then\n        return smallest_index, smallest_even_value\n\
    \    end\n    if smallest_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv5zcluwu.lua:107: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    for i = 1, #arr do\n        if arr[i].value\
    \ % 2 == 0 then\n            if arr[i].value < smalest_value then\n          \
    \      smalest_value = arr[i].value\n                smalest_index = i\n     \
    \       end\n        end\n    end\n    if smalest_value == 0 then\n        return\
    \ nil\n    end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps9btf6p3.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmps9btf6p3.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmps9btf6p3.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugcntxju.lua:37: ''end'' expected (to close ''function'' at
    line 18) near <eof>

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_value_index = 0\n    for _, v in ipairs(arr) do\n\
    \        if v < min_value then\n            min_value = v\n            min_value_index\
    \ = #arr\n        end\n    end\n    if min_value == math.inf then\n        return\
    \ nil\n    end\n    local smalest_value = min_value\n    local smalest_value_index\
    \ = min_value_index\n    for _, v in ipairs(arr) do\n        if v == smalest_value\
    \ then\n            smalest_value_index = #arr\n        end\n        if v < smalest_value\
    \ then\n            smalest_value = v\n            smalest_value_index = #arr\n\
    \        end\n    end\n    return smalest_value, smalest_value_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphsamyk1g.lua:22:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmphsamyk1g.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmphsamyk1g.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\n\
    \  local smallest_index\n  local smallest_even_value\n  local index\n  local even_value\n\
    \  for index, value in ipairs(arr) do\n    if value == 0 then\n      smallest_even_value\
    \ = value\n      smallest_value = index\n      smallest_index = index\n      smallest_even_value\
    \ = value\n      smallest_index = index\n      break\n    end\n    if value %\
    \ 2 == 0 then\n      if smallest_even_value == nil then\n        smallest_even_value\
    \ = value\n        smallest_value = index\n        smallest_index = index\n  \
    \    elseif smallest_even_value < value then\n        smallest_even_value = value\n\
    \        smallest_value = index\n        smallest_index = index\n      end\n \
    \   end\n  end\n  if smallest_even_value == nil then\n    return nil\n  end\n\
    \  return smallest_value, smallest_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr2804plj.lua:54:\
    \ expected: {2, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpr2804plj.lua:54: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i].value <= smallest_value then\n            smallest_value = arr[i].value\n\
    \            smallest_index = i\n        end\n    end\n    if smallest_value ==\
    \ math.inf then\n        return nil\n    end\n    local plucked_value = smallest_value\n\
    \    local plucked_index = smallest_index\n    for i = 1, #arr do\n        if\
    \ arr[i].value == plucked_value then\n            if arr[i].index <= plucked_index\
    \ then\n                plucked_value = arr[i].value\n                plucked_index\
    \ = arr[i].index\n            end\n        end\n    end\n    return { value =\
    \ plucked_value, index = plucked_index }\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpieiigp6i.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpieiigp6i.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpieiigp6i.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local index = 1\n    for _, node in ipairs(arr)\
    \ do\n        if node.value == smalest_value then\n            smalest_index =\
    \ index\n        elseif node.value == smalest_value then\n            index =\
    \ index + 1\n        end\n    end\n    if smalest_index == 0 then\n        return\
    \ nil\n    end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ju1ncbx.lua:23:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmp6ju1ncbx.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp6ju1ncbx.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = nil\n    local smallest_index = nil\n    for i = 1, #arr do\n        if arr[i]\
    \ < smallest_value then\n            smallest_value = arr[i]\n            smallest_index\
    \ = i\n        end\n    end\n    if smallest_value == nil then\n        return\
    \ nil\n    end\n    local index = smallest_index\n    local value = smallest_value\n\
    \    while true do\n        local next_index = index + 1\n        if next_index\
    \ > #arr then\n            return value\n        end\n        if arr[index] %\
    \ 2 == 0 then\n            index = next_index\n        else\n            index\
    \ = index - 1\n        end\n        value = arr[index]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdrx9tmp_.lua:22:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpdrx9tmp_.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpdrx9tmp_.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    for i = 1, #arr do\n        if arr[i].value\
    \ % 2 == 0 then\n            if smallest_value < arr[i].value then\n         \
    \       smallest_value = arr[i].value\n                smallest_index = i\n  \
    \          end\n        end\n    end\n    if smallest_value == 0 then\n      \
    \  return nil\n    end\n    return smallest_value, smallest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpojyhp_nr.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpojyhp_nr.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpojyhp_nr.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\
    \ = 0\n  local smallest_index = 0\n  for i = 1, #arr do\n    if arr[i].value %\
    \ 2 == 0 then\n      if smallest_value < arr[i].value then\n        smallest_value\
    \ = arr[i].value\n        smallest_index = i\n      end\n    end\n  end\n  if\
    \ smallest_value == 0 then\n    return nil\n  end\n  return smallest_value, smallest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprja7do43.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmprja7do43.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmprja7do43.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugcntxju.lua:37: ''end'' expected (to close ''function'' at
    line 18) near <eof>

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = math.inf\n  local smalest_index = 0\n  local smalest_node\n  for i = 1, #arr\
    \ do\n    if arr[i] < smalest_value then\n      smalest_value = arr[i]\n     \
    \ smalest_index = i\n      smalest_node = arr[i]\n    end\n  end\n  if smalest_value\
    \ == math.inf then\n    return nil\n  end\n  return smalest_node, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqkluyia5.lua:23:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpqkluyia5.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpqkluyia5.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\n\
    \    local smallest_index\n    for _, node in ipairs(arr) do\n        if smallest_value\
    \ == nil then\n            smallest_value = node.value\n            smallest_index\
    \ = node.index\n        elseif smallest_value < node.value then\n            smallest_value\
    \ = node.value\n            smallest_index = node.index\n        end\n    end\n\
    \    if smallest_value == nil then\n        return nil\n    end\n    local results\
    \ = {}\n    for _, node in ipairs(arr) do\n        if smallest_value == node.value\
    \ then\n            results[smallest_index] = node\n        end\n    end\n   \
    \ if #results == 0 then\n        return nil\n    end\n    return results\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iyuwz8a.lua:23:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmp1iyuwz8a.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp1iyuwz8a.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_idx = 0\n    for idx, value in ipairs(arr) do\n  \
    \      if value < min_value then\n            min_value = value\n            min_idx\
    \ = idx\n        end\n    end\n    if min_value == math.inf then\n        return\
    \ nil\n    end\n    return min_value, min_idx\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0jxqzo6c.lua:22:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp0jxqzo6c.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp0jxqzo6c.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = nil\n    local smallest_index = nil\n    for i = 1, #arr do\n        if arr[i].value\
    \ % 2 == 0 then\n            if smallest_value == nil or arr[i].value < smallest_value\
    \ then\n                smallest_value = arr[i].value\n                smallest_index\
    \ = i\n            end\n        end\n    end\n    if smallest_value == nil then\n\
    \        return nil\n    end\n    return smallest_value, smallest_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm2ckfgd6.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpm2ckfgd6.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpm2ckfgd6.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    for _, v in ipairs(arr) do\n        if\
    \ v % 2 == 0 then\n            if smallest_value < v then\n                smallest_value\
    \ = v\n                smallest_index = v\n            end\n        end\n    end\n\
    \    if smallest_value == 0 then\n        return nil\n    end\n    return smallest_value,\
    \ smallest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7_iwzzf.lua:38:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpg7_iwzzf.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest,\
    \ smallest_index, smallest_value = nil, nil, nil\n  for i = 1, #arr do\n    if\
    \ arr[i].value % 2 == 0 then\n      if smallest == nil or arr[i].value < smallest\
    \ then\n        smallest, smallest_index, smallest_value = arr[i].value, i, arr[i]\n\
    \      else\n        smallest_value = arr[i]\n      end\n    end\n  end\n  if\
    \ smallest == nil then\n    return nil\n  end\n  return smallest_value, smallest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprbiyk0vp.lua:21:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmprbiyk0vp.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmprbiyk0vp.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\
    \ = 0\n  local smallest_index = 0\n  for i = 1, #arr do\n    if arr[i] < smallest_value\
    \ then\n      smallest_value = arr[i]\n      smallest_index = i\n    end\n  end\n\
    \  if smallest_value == 0 then\n    return nil\n  end\n  local result = {smallest_value,\
    \ smallest_index}\n  local index = 1\n  while smallest_value % 2 == 0 do\n   \
    \ smallest_value = smallest_value / 2\n    smallest_index = index\n    index =\
    \ index + 1\n  end\n  table.insert(result, smallest_value, smallest_index)\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4zoedjp.lua:44:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpz4zoedjp.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    local index = 1\n    local value = 0\n\
    \    for i = 1, #arr do\n        value = arr[i]\n        if value < smallest_value\
    \ then\n            smallest_value = value\n            smallest_index = index\n\
    \        elseif value == smallest_value then\n            smallest_index = smallest_index\
    \ + 1\n        end\n        index = index + 1\n    end\n    if smallest_index\
    \ == 0 then\n        return nil\n    end\n    return smallest_value, smallest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsqnxbjgh.lua:42:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpsqnxbjgh.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local index =\
    \ 1\n    local smalest_value = arr[1]\n    local smalest_index = 1\n    for i\
    \ = 2, #arr do\n        if arr[i] < smalest_value then\n            smalest_value\
    \ = arr[i]\n            smalest_index = index\n        end\n        index = index\
    \ + 1\n    end\n    if smalest_value == 0 then\n        return nil\n    end\n\
    \    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm63siz0f.lua:38:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpm63siz0f.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugcntxju.lua:37: ''end'' expected (to close ''function'' at
    line 18) near <eof>

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\n\
    \  local smallest_index\n  for _, node in ipairs(arr) do\n    if smallest_value\
    \ == nil then\n      smallest_value = node.value\n      smallest_index = node.index\n\
    \    else\n      if node.value <= smallest_value then\n        smallest_value\
    \ = node.value\n        smallest_index = node.index\n      end\n    end\n  end\n\
    \  if smallest_value == nil then\n    return nil\n  end\n  local plucked_value\
    \ = smallest_value\n  local plucked_index = smallest_index\n  for _, node in ipairs(arr)\
    \ do\n    if node.value == plucked_value then\n      if node.index <= plucked_index\
    \ then\n        plucked_index = node.index\n      end\n    end\n  end\n  return\
    \ [plucked_value, plucked_index]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm9u674gp.lua:44: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = nil, nil\n    local index = 1\n    for _, node in ipairs(arr)\
    \ do\n        if node.value % 2 == 0 then\n            if smalest_value == nil\
    \ or node.value < smalest_value then\n                smalest_value, smalest_index\
    \ = node.value, index\n            else\n                index = index + 1\n \
    \           end\n        end\n    end\n    if smalest_value == nil then\n    \
    \    return nil\n    end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8s16sfxf.lua:22:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmp8s16sfxf.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp8s16sfxf.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- base case\n\
    \  if #arr == 0 then\n    return nil\n  end\n  -- base case\n  if #arr == 1 then\n\
    \    return arr[1]\n  end\n  -- base case\n  if #arr == 2 then\n    return arr[1]\n\
    \  end\n  -- base case\n  if #arr == 3 then\n    return arr[1]\n  end\n  -- base\
    \ case\n  if #arr == 4 then\n    return arr[1]\n  end\n  -- base case\n  if #arr\
    \ == 5 then\n    return arr[1]\n  end\n  -- base case\n  if #arr == 6 then\n \
    \   return arr[1]\n  end\n  -- base case\n  if #arr == 7 then\n    return arr[1]\n\
    \  end\n  -- base case\n  if #arr == 8 then\n    return arr[1]\n  end\n  -- base\
    \ case\n  if #arr == 9 or #arr == 10 then\n    return arr[1]\n  end\n  -- base\
    \ case\n  if #arr == 11 or #arr == 12 then\n    return arr[1]\n  end\n  -- base\
    \ case\n  if #arr == 13 or #arr == 14 then\n    return arr[1]\n  end\n  -- base\
    \ case\n  if #arr == 15 or #arr == 16 then\n    return arr[1]\n  end\n  -- base\
    \ case\n  if #arr == 17 or #arr == 18 then\n    return arr[1]\n  end\n  -- base\
    \ case\n  if #arr == 19 or #arr == 20 then\n    return arr[1]\n  end\n  -- base\
    \ case\n  if #arr == 21 or #arr == 22 then\n    return arr[1]\n  end\n  -- base\
    \ case\n  if #arr == 23 and #arr == 24 then\n    return arr[1]\n  end\n  -- base\
    \ case\n  if #arr == 25 and #arr == 26 then\n    return arr[1]\n  end\n  -- base\
    \ case\n  if #arr == 27 and #arr == 28 then\n    return arr[1]\n  end\n  -- base\
    \ case\n  if #arr == 29 and #arr == 30 then\n    return arr[1]\n  end\n  -- base\
    \ case\n  if #arr == 31 and #arr == 32 then\n    return arr[1]\n  end\n  -- base\
    \ case\n  if #arr == 33 and #arr == 34 then\n    return arr[1]\n  end\n  -- base\
    \ case\n  if #arr == 35 and #arr == 36 and #arr == 37 then\n    return arr[1]\n\
    \  end\n  -- base case\n  if #arr == 38 and #arr == 39 and #arr == 40 then\n \
    \   return arr[1]\n  end\n  -- base case\n  if #arr == 41 and #arr\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfhev3mxy.lua:117: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugcntxju.lua:37: ''end'' expected (to close ''function'' at
    line 18) near <eof>

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    for i = 1, #arr do\n        if arr[i].value\
    \ % 2 == 0 then\n            if smallest_value < arr[i].value then\n         \
    \       smallest_value = arr[i].value\n                smallest_index = i\n  \
    \          end\n        end\n    end\n    if smallest_value == 0 then\n      \
    \  return nil\n    end\n    return smallest_value, smallest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpojyhp_nr.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpojyhp_nr.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpojyhp_nr.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value_index\
    \ = nil\n    local smallest_value = nil\n    for _, node in ipairs(arr) do\n \
    \       if node.value % 2 == 0 then\n            if smallest_value == nil then\n\
    \                smallest_value = node.value\n                smallest_value_index\
    \ = node.index\n            elseif smallest_value < node.value then\n        \
    \        smallest_value = node.value\n                smallest_value_index = node.index\n\
    \            end\n        end\n    end\n    if smallest_value == nil then\n  \
    \      return nil\n    end\n    return smallest_value, smallest_value_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp06fw9dll.lua:22:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmp06fw9dll.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp06fw9dll.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  else\n    -- Find the smallest even value\n\
    \    local smallest_even_value = math.min(arr)\n    -- Find the smallest index\n\
    \    local smallest_index = nil\n    for index, value in ipairs(arr) do\n    \
    \  if value % 2 == 0 then\n        if smallest_index ~= nil then\n          --\
    \ Found a smaller even value\n          break\n        else\n          -- Found\
    \ a new smallest even value\n          smallest_even_value = value\n         \
    \ smallest_index = index\n        end\n      end\n    end\n    -- Return the smallest\
    \ even value and its index\n    return smallest_even_value,smallest_index\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2or1k499.lua:47:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmp2or1k499.lua:47: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\n  -- Find the smallest even value\n\
    \  local smallest_even_value = math.min(arr)\n  -- Find the index of the smallest\
    \ even value\n  local smallest_even_index = nil\n  for i, v in ipairs(arr) do\n\
    \    if v == smallest_even_value then\n      smallest_even_index = i\n    end\n\
    \  end\n  -- Return the smallest even value and its index\n  return smallest_even_value,smallest_even_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktlxvl4a.lua:39:\
    \ expected: {2, 1}\nactual: {4, 2, 3}\nstack traceback:\n\t/tmp/tmpktlxvl4a.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugcntxju.lua:37: ''end'' expected (to close ''function'' at
    line 18) near <eof>

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    local smalest_node_index\n\
    \    for _, node in ipairs(arr) do\n        if node.value % 2 == 0 then\n    \
    \        if smalest_value == 0 then\n                smalest_value = node.value\n\
    \                smalest_index = node.index\n                smalest_node = node\n\
    \                smalest_node_index = node.index\n            elseif smalest_value\
    \ < node.value then\n                smalest_value = node.value\n            \
    \    smalest_index = node.index\n                smalest_node = node\n       \
    \         smalest_node_index = node.index\n            end\n        end\n    end\n\
    \    if smalest_value == 0 then\n        return nil\n    end\n    return smalest_node,\
    \ smalest_node_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt2z2mkbl.lua:24:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmpt2z2mkbl.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpt2z2mkbl.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Your code here\n\
    \  local smalest_value = 0\n  local smalest_index = 0\n  for i = 1, #arr do\n\
    \    if arr[i] % 2 == 0 then\n      if smalest_value < arr[i] then\n        smalest_value\
    \ = arr[i]\n        smalest_index = i\n      end\n    end\n  end\n  if smalest_value\
    \ == 0 then\n    return nil\n  end\n  return smalest_value, smalest_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_c1uu9h.lua:39:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpq_c1uu9h.lua:39: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    local index = 1\n    for i = 1, #arr\
    \ do\n        if arr[i] < smallest_value then\n            smallest_value = arr[i]\n\
    \            smallest_index = index\n        end\n        index = index + 1\n\
    \    end\n    if smallest_value == 0 then\n        return nil\n    end\n    local\
    \ new_arr = {}\n    for i = 1, #arr do\n        if arr[i] < smallest_value then\n\
    \            new_arr[i] = arr[i]\n        end\n    end\n    return smallest_value,\
    \ smallest_index, new_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68dtd7tl.lua:44:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmp68dtd7tl.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index = 0\n    for _, node in ipairs(arr) do\n\
    \        if node.value % 2 == 0 then\n            if smallest_value < node.value\
    \ then\n                smallest_value = node.value\n                smallest_index\
    \ = node.index\n            end\n        end\n    end\n    if smallest_value ==\
    \ math.inf then\n        return nil\n    end\n    return smallest_value, smallest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4yy0b2bc.lua:22:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmp4yy0b2bc.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp4yy0b2bc.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Your code here\n\
    \  local smalest_value = 0\n  local smalest_index = 0\n  local smalest_node\n\
    \  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n      if smalest_value ==\
    \ 0 then\n        smalest_value = arr[i]\n        smalest_index = i\n        smalest_node\
    \ = arr[i]\n      elseif smalest_value < arr[i] then\n        smalest_value =\
    \ arr[i]\n        smalest_index = i\n        smalest_node = arr[i]\n      end\n\
    \    end\n  end\n  if smalest_value == 0 then\n    return nil\n  end\n  return\
    \ smalest_node, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2fh2u13.lua:45:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpy2fh2u13.lua:45: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    local index = 1\n    for _, node in ipairs(arr)\
    \ do\n        if node.value % 2 == 0 then\n            if smallest_value == 0\
    \ then\n                smallest_value = node.value\n                smallest_index\
    \ = index\n            elseif smallest_value < node.value then\n             \
    \   smallest_value = node.value\n                smallest_index = index\n    \
    \        end\n            index = index + 1\n        end\n    end\n    if smallest_value\
    \ == 0 then\n        return nil\n    end\n    return smallest_value, smallest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgyt5q2c0.lua:23:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmpgyt5q2c0.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpgyt5q2c0.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = nil\n    local smallest_index = nil\n    for i = 1, #arr do\n        if arr[i].value\
    \ % 2 == 0 then\n            if smallest_value == nil then\n                smallest_value\
    \ = arr[i].value\n                smallest_index = i\n            elseif smallest_value\
    \ < arr[i].value then\n                smallest_value = arr[i].value\n       \
    \         smallest_index = i\n            end\n        end\n    end\n    if smallest_value\
    \ == nil then\n        return nil\n    end\n    return smallest_value, smallest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpti4ep5r6.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpti4ep5r6.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpti4ep5r6.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\n  -- Pick the smallest even value\n\
    \  local smallest_value = math.min(arr)\n  -- Find the index of the smallest even\
    \ value\n  local smallest_index = #arr\n  for i = 1, #arr do\n    if arr[i] %\
    \ 2 == 0 then\n      smallest_value = arr[i]\n      smallest_index = i\n    end\n\
    \  end\n  -- Return the smallest even value\n  return smallest_value, smallest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzf1x7blu.lua:40:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpzf1x7blu.lua:40: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = nil\n    local smallest_index = nil\n    for i = 1, #arr do\n        if arr[i].value\
    \ then\n            if smallest_value == nil then\n                smallest_value\
    \ = arr[i].value\n                smallest_index = i\n            elseif smallest_value\
    \ < arr[i].value then\n                smallest_value = arr[i].value\n       \
    \         smallest_index = i\n            end\n        end\n    end\n    if smallest_value\
    \ == nil then\n        return nil\n    end\n    local smallest_value_with_even_value\
    \ = nil\n    local smallest_index_with_even_value = nil\n    for i = 1, #arr do\n\
    \        if arr[i].value then\n            if smallest_value_with_even_value ==\
    \ nil then\n                smallest_value_with_even_value = arr[i].value\n  \
    \              smallest_index_with_even_value = i\n            elseif smallest_value_with_even_value\
    \ < arr[i].value then\n                smallest_value_with_even_value = arr[i].value\n\
    \                smallest_index_with_even_value = i\n            end\n       \
    \ end\n    end\n    if smallest_value_with_even_value == nil then\n        return\
    \ nil\n    end\n    local index = smallest_index_with_even_value\n    local value\
    \ = smallest_value_with_even_value\n    local new_arr = {value}\n    while index\
    \ > 1 do\n        local next_value = arr[index].value\n        if next_value ==\
    \ nil then\n            return nil\n        end\n        if next_value < value\
    \ then\n            value = next_value\n            new_arr = {value}\n      \
    \  end\n        index = index - 1\n    end\n    return new_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwml98qaf.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpwml98qaf.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpwml98qaf.lua:71: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index = 0\n    for index, value in pairs(arr)\
    \ do\n        if value < smallest_value then\n            smallest_value = value\n\
    \            smallest_index = index\n        end\n    end\n    if smallest_value\
    \ == math.inf then\n        return nil\n    end\n    local plucked_value = smallest_value\n\
    \    local plucked_index = smallest_index\n    for index, value in pairs(arr)\
    \ do\n        if value == plucked_value then\n            plucked_index = index\n\
    \        end\n    end\n    if plucked_index == 0 then\n        return nil\n  \
    \  end\n    return plucked_value, plucked_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppq82mxeh.lua:22:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmppq82mxeh.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmppq82mxeh.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptsi6hw5x.lua:91: ''end'' expected (to close ''function'' at
    line 18) near <eof>

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\n\
    \  local smallest_index\n  local smalest_value\n  local smalest_index\n  for _,\
    \ node in ipairs(arr) do\n    if smallest_value == nil then\n      smallest_value\
    \ = node.value\n      smallest_index = node.index\n      smalest_value = node.value\n\
    \      smalest_index = node.index\n    elseif smallest_value < node.value then\n\
    \      smallest_value = node.value\n      smallest_index = node.index\n      smalest_value\
    \ = node.value\n      smalest_index = node.index\n    end\n  end\n  if smallest_value\
    \ == nil then\n    return nil\n  end\n  local smalest_value_even = smalest_value\
    \ % 2\n  if smalest_value_even > 0 then\n    return { smallest_value, smallest_index\
    \ }\n  else\n    return { smalest_value, smalest_index }\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnmz40ey2.lua:25:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmpnmz40ey2.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpnmz40ey2.lua:50: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugcntxju.lua:37: ''end'' expected (to close ''function'' at
    line 18) near <eof>

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = arr[1]\n  local smalest_index = 1\n  for i = 2, #arr do\n    if arr[i] < smalest_value\
    \ then\n      smalest_value = arr[i]\n      smalest_index = i\n    end\n  end\n\
    \  return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcn67z706.lua:33:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpcn67z706.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\n  -- Find the smallest even value\n\
    \  local smallest_even_value = math.min(arr)\n  -- Find the smallest index\n \
    \ local smallest_index = nil\n  for index, value in pairs(arr) do\n    if value\
    \ == smallest_even_value then\n      smallest_index = index\n    end\n  end\n\
    \  -- Return the smallest even value and its index\n  return smallest_even_value,smallest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhglde3l.lua:39:\
    \ expected: {2, 1}\nactual: {4, 2, 3}\nstack traceback:\n\t/tmp/tmpwhglde3l.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Write your code\
    \ here.\n  local smalest_value = nil\n  local smalest_index = nil\n  for i = 1,\
    \ #arr do\n    if arr[i] % 2 == 0 then\n      if smalest_value == nil or arr[i]\
    \ < smalest_value then\n        smalest_value = arr[i]\n        smalest_index\
    \ = i\n      end\n    end\n  end\n  if smalest_value == nil then\n    return nil\n\
    \  end\n  return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc2zg6t2x.lua:39:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpc2zg6t2x.lua:39: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_value_index = 0\n    for _, v in ipairs(arr) do\n\
    \        if v < min_value then\n            min_value = v\n            min_value_index\
    \ = v\n        end\n    end\n    if min_value == math.inf then\n        return\
    \ nil\n    end\n    local smalest_value = min_value\n    local smalest_value_index\
    \ = min_value_index\n    for _, v in ipairs(arr) do\n        if v == smalest_value\
    \ then\n            smalest_value_index = v\n        end\n    end\n    return\
    \ smalest_value, smalest_value_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk0d_2y0f.lua:22:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpk0d_2y0f.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpk0d_2y0f.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  else\n    -- Find the smallest even value\n\
    \    local smallest_even_value = arr[1]\n    local smallest_even_index = arr[1]\n\
    \    for i = 2, #arr do\n      if arr[i] % 2 == 0 then\n        smallest_even_value\
    \ = arr[i]\n        smallest_even_index = i\n      end\n    end\n    -- Return\
    \ the smallest even value\n    return smallest_even_value\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3y8mr_5.lua:40:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpd3y8mr_5.lua:40: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    for i = 1, #arr do\n        if arr[i].value % 2 ==\
    \ 0 then\n            if arr[i].value < smalest_value then\n                smalest_value\
    \ = arr[i].value\n                smalest_index = i\n            end\n       \
    \ end\n    end\n    if smalest_value == 0 then\n        return nil\n    end\n\
    \    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1gq6surc.lua:21:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmp1gq6surc.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp1gq6surc.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = nil\n    local smallest_index = nil\n    local index = 1\n    for _, node\
    \ in ipairs(arr) do\n        if smallest_value == nil then\n            smallest_value\
    \ = node.value\n            smallest_index = index\n        elseif smallest_value\
    \ < node.value then\n            smallest_value = node.value\n            smallest_index\
    \ = index\n        end\n        index = index + 1\n    end\n    if smallest_value\
    \ == nil then\n        return nil\n    end\n    local smallest_value_with_even_value\
    \ = smallest_value % 2\n    if smallest_value_with_even_value == 0 then\n    \
    \    return smallest_value, smallest_index\n    end\n    local smallest_value_with_even_index\
    \ = smallest_index\n    for _, node in ipairs(arr) do\n        if node.value ==\
    \ smallest_value_with_even_value then\n            smallest_value_with_even_index\
    \ = smallest_value_with_even_index + 1\n        end\n    end\n    return smallest_value_with_even_index,\
    \ smallest_value_with_even_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpegqebu7l.lua:24:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmpegqebu7l.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpegqebu7l.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index\n    for _, v in ipairs(arr) do\n     \
    \   if smallest_value < v then\n            smallest_value = v\n            smallest_index\
    \ = v\n        end\n    end\n    if smallest_value == math.inf then\n        return\
    \ nil\n    end\n    local index = #arr\n    for _, v in ipairs(arr) do\n     \
    \   if v == smallest_value then\n            index = index - 1\n        end\n\
    \    end\n    return smallest_value, smallest_index, index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyc4il63a.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpyc4il63a.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpyc4il63a.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Your code here\n\
    \  local smalest_value = 0\n  local smalest_index = 0\n  local smalest_node =\
    \ {}\n  for i = 1, #arr do\n    if arr[i].value == smalest_value then\n      smalest_index\
    \ = i\n    elseif arr[i].value == smalest_value and arr[i].index > smalest_index\
    \ then\n      smalest_value = arr[i].value\n      smalest_index = arr[i].index\n\
    \      smalest_node = arr[i]\n    end\n  end\n  return smalest_node\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpst4ys7g5.lua:24:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpst4ys7g5.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpst4ys7g5.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\
    \ = 0\n  local smallest_index = 0\n  local results = {}\n  for i = 1, #arr do\n\
    \    if arr[i] < smallest_value then\n      smallest_value = arr[i]\n      smallest_index\
    \ = i\n    end\n  end\n  if smallest_value == 0 then\n    return nil\n  end\n\
    \  results[1] = smallest_value\n  results[2] = smallest_index\n  for i = 2, #arr\
    \ do\n    if arr[i] < smallest_value then\n      results[i] = arr[i]\n    end\n\
    \  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3jl2_wkb.lua:44:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmp3jl2_wkb.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = nil\n    local smallest_index = nil\n    local index = 1\n    for _, node\
    \ in ipairs(arr) do\n        if smallest_value == nil then\n            smallest_value\
    \ = node.value\n            smallest_index = index\n        elseif smallest_value\
    \ < node.value then\n            smallest_value = node.value\n            smallest_index\
    \ = index\n        end\n        index = index + 1\n    end\n    if smallest_value\
    \ == nil then\n        return nil\n    end\n    local smallest_value_even = smallest_value\
    \ % 2\n    local smallest_value_odd = smallest_value - smallest_value_even\n \
    \   local smallest_value_even_index = smallest_index\n    local smallest_value_odd_index\
    \ = smallest_index\n    for _, node in ipairs(arr) do\n        if node.value ==\
    \ smallest_value_even then\n            smallest_value_even_index = smallest_index\n\
    \        end\n        if node.value == smallest_value_odd then\n            smallest_value_odd_index\
    \ = smallest_index\n        end\n    end\n    if smallest_value_even_index ==\
    \ nil then\n        return smallest_value_even, smallest_value_even_index\n  \
    \  elseif smallest_value_odd_index == nil then\n        return smallest_value_odd,\
    \ smallest_value_odd_index\n    else\n        return smallest_value_even, smallest_value_even_index\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp18tgo3gk.lua:24:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmp18tgo3gk.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmp18tgo3gk.lua:59: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    local plucked_node\n    for _, node in\
    \ ipairs(arr) do\n        if node.value % 2 == 0 then\n            if smallest_value\
    \ == 0 or node.value < smallest_value then\n                smallest_value = node.value\n\
    \                smallest_index = node.index\n            end\n        end\n \
    \   end\n    if smallest_value == 0 then\n        return nil\n    end\n    plucked_node\
    \ = arr[smallest_index]\n    return smallest_value, plucked_node.index, plucked_node\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpflcjxwqu.lua:23:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmpflcjxwqu.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpflcjxwqu.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index = 0\n    for _, v in ipairs(arr) do\n \
    \       if v < smallest_value then\n            smallest_value = v\n         \
    \   smallest_index = v\n        end\n    end\n    if smallest_value == math.inf\
    \ then\n        return nil\n    end\n    local smallest_even_value = smallest_value\
    \ % 2\n    if smallest_even_value == 0 then\n        return smallest_value, smallest_index\n\
    \    end\n    local smallest_even_index = smallest_index\n    for _, v in ipairs(arr)\
    \ do\n        if v == smallest_even_value then\n            smallest_even_index\
    \ = smallest_even_index + 1\n        end\n    end\n    return smallest_value,\
    \ smallest_even_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpil58vw37.lua:22:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpil58vw37.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpil58vw37.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    for i = 1, #arr do\n        if arr[i].value\
    \ % 2 == 0 then\n            if arr[i].value < smalest_value then\n          \
    \      smalest_value = arr[i].value\n                smalest_index = i\n     \
    \       end\n        end\n    end\n    if smalest_value == 0 then\n        return\
    \ nil\n    end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps9btf6p3.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmps9btf6p3.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmps9btf6p3.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\
    \ = 0\n  local smallest_index = 0\n  for i = 1, #arr do\n    if arr[i].value %\
    \ 2 == 0 then\n      if smallest_value == 0 then\n        smallest_value = arr[i].value\n\
    \        smallest_index = i\n      elseif smallest_value < arr[i].value then\n\
    \        smallest_value = arr[i].value\n        smallest_index = i\n      end\n\
    \    end\n  end\n  if smallest_value == 0 then\n    return nil\n  elseif smallest_value\
    \ < 0 then\n    return nil\n  end\n  return smallest_value, smallest_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp90jpam4_.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmp90jpam4_.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp90jpam4_.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\n\
    \    local smallest_index\n    for _, v in ipairs(arr) do\n        if smallest_value\
    \ == nil then\n            smallest_value = v\n            smallest_index = v\n\
    \        elseif smallest_value < v then\n            smallest_value = v\n    \
    \        smallest_index = v\n        end\n    end\n    if smallest_value == nil\
    \ then\n        return nil\n    end\n    local smallest_value_even = smallest_value\
    \ % 2\n    if smallest_value_even ~= 0 then\n        return smallest_value, smallest_index\n\
    \    end\n    local smallest_value_odd = smallest_value % 2 + 1\n    if smallest_value_odd\
    \ ~= 1 then\n        return smallest_value, smallest_index\n    end\n    local\
    \ smallest_value_even_index = nil\n    local smallest_value_odd_index = nil\n\
    \    for _, v in ipairs(arr) do\n        if smallest_value_even ~= 0 then\n  \
    \          if smallest_value_even_index == nil then\n                smallest_value_even_index\
    \ = v\n            elseif smallest_value_even_index < v then\n               \
    \ smallest_value_even_index = v\n            end\n        end\n        if smallest_value_odd\
    \ ~= 1 then\n            if smallest_value_odd_index == nil then\n           \
    \     smallest_value_odd_index = v\n            elseif smallest_value_odd_index\
    \ < v then\n                smallest_value_odd_index = v\n            end\n  \
    \      end\n    end\n    if smallest_value_even_index ~= nil and smallest_value_odd_index\
    \ ~= nil then\n        return smallest_value_even_index, smallest_value_odd_index\n\
    \    end\n    return smallest_value, smallest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_mv04_u.lua:68:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmp4_mv04_u.lua:68: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\n\
    \  local smallest_index\n  local index\n  for index, value in ipairs(arr) do\n\
    \    if smallest_value == nil then\n      smallest_value = value\n      smallest_index\
    \ = index\n    elseif smallest_value < value then\n      smallest_value = value\n\
    \      smallest_index = index\n    end\n  end\n  if smallest_value == nil then\n\
    \    return nil\n  end\n  local plucked_value = smallest_value\n  local plucked_index\
    \ = smallest_index\n  local index\n  for index, value in ipairs(arr) do\n    if\
    \ value == plucked_value then\n      plucked_index = index\n    end\n  end\n \
    \ return [plucked_value, plucked_index]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7fhdyf1v.lua:42: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = nil, nil\n    for i = 1, #arr do\n        if arr[i] % 2 == 0\
    \ then\n            if smalest_value == nil or arr[i] < smalest_value then\n \
    \               smalest_value, smalest_index = arr[i], i\n            end\n  \
    \      end\n    end\n    if smalest_value == nil then\n        return nil\n  \
    \  end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk6iin0k.lua:36:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpzk6iin0k.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index = 0\n    local index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] < smallest_value then\n            smallest_value\
    \ = arr[i]\n            smallest_index = index\n        end\n        index = index\
    \ + 1\n    end\n    if smallest_value == math.inf then\n        return nil\n \
    \   end\n    local smallest_value_even = smallest_value % 2\n    if smallest_value_even\
    \ > 0 then\n        return smallest_value, smallest_index\n    else\n        return\
    \ smallest_value + 1, smallest_index\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppnotmhkp.lua:23:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmppnotmhkp.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmppnotmhkp.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Your code here\n\
    \  local smalest_value = nil\n  local smalest_index = nil\n  local smalest_node_index\
    \ = nil\n  local smalest_node_val = nil\n  for i = 1, #arr do\n    if arr[i] %\
    \ 2 == 0 then\n      if smalest_value == nil then\n        smalest_value = arr[i]\n\
    \        smalest_index = i\n      elseif smalest_value < arr[i] then\n       \
    \ smalest_value = arr[i]\n        smalest_index = i\n      end\n    end\n  end\n\
    \  if smalest_value == nil then\n    return nil\n  end\n  local smalest_node_index\
    \ = nil\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n      if smalest_value\
    \ == arr[i] then\n        smalest_node_index = i\n      end\n    end\n  end\n\
    \  if smalest_node_index == nil then\n    return nil\n  end\n  local smalest_node_val\
    \ = arr[smalest_node_index]\n  return smalest_value, smalest_index, smalest_node_index,\
    \ smalest_node_val\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71fxmzn5.lua:56:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmp71fxmzn5.lua:56: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index, smallest_even_value\n    for i = 1, #arr do\n        if arr[i].value\
    \ % 2 == 0 then\n            if smallest_even_value == nil then\n            \
    \    smallest_even_value = arr[i].value\n                smalest_value = arr[i].value\n\
    \                smalest_index = i\n            elseif arr[i].value < smallest_even_value\
    \ then\n                smallest_even_value = arr[i].value\n                smalest_value\
    \ = arr[i].value\n                smalest_index = i\n            end\n       \
    \ end\n    end\n    if smallest_even_value == nil then\n        return nil\n \
    \   end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyg_bmmh1.lua:21:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpyg_bmmh1.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpyg_bmmh1.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\n  -- Find the smallest even value\n\
    \  local smallest_even_value = math.min(arr:map(function(x) return x:floor() end))\n\
    \  -- Find the index of the smallest even value\n  local smallest_even_index =\
    \ arr:map(function(x) return x:floor() end):index(smallest_even_value)\n  -- Return\
    \ the smallest even value and its index\n  return smallest_even_value,smallest_even_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxqo_bzrs.lua:24:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmpxqo_bzrs.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpxqo_bzrs.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local index =\
    \ 1\n    local smallest_value = 0\n    local smallest_index = 1\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            if smallest_value < arr[i]\
    \ then\n                smallest_value = arr[i]\n                smallest_index\
    \ = index\n            end\n            index = index + 1\n        end\n    end\n\
    \    if smallest_value == 0 then\n        return nil\n    end\n    return smallest_value,\
    \ smallest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmsomd873.lua:40:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpmsomd873.lua:40: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\n  -- Pick the smallest even value\n\
    \  local smallest_even_value = arr[1]\n  -- Pick the smallest index\n  local smallest_index\
    \ = 1\n  -- Iterate through the rest of the array\n  for i = 2, #arr do\n    --\
    \ If the current value is even, update smallest_even_value\n    if arr[i] % 2\
    \ == 0 then\n      smallest_even_value = arr[i]\n      -- If the current value\
    \ is smaller than the smallest even value, update smallest_index\n      if smallest_even_value\
    \ < smallest_even_value then\n        smallest_index = i\n      end\n    end\n\
    \  end\n  -- Return the smallest even value and its index\n  return smallest_even_value,\
    \ smallest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnbyipnf1.lua:45:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpnbyipnf1.lua:45: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i] < smallest_value then\n            smallest_value = arr[i]\n        \
    \    smallest_index = i\n        end\n    end\n    if smallest_value == math.inf\
    \ then\n        return nil\n    end\n    local smallest_even_value = math.floor(smallest_value\
    \ / 2)\n    local plucked_value = smallest_value + smallest_even_value\n    local\
    \ plucked_index = smallest_index\n    for i = 1, #arr do\n        if arr[i] ==\
    \ plucked_value then\n            plucked_index = i\n        end\n    end\n  \
    \  return plucked_value, plucked_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvqrfdcso.lua:22:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpvqrfdcso.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpvqrfdcso.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\
    \ = math.inf\n  local smallest_index = 0\n  local results = {}\n  for i = 1, #arr\
    \ do\n    if arr[i] < smallest_value then\n      smallest_value = arr[i]\n   \
    \   smallest_index = i\n    end\n  end\n  if smallest_value == math.inf then\n\
    \    return nil\n  end\n  results[1] = smallest_value\n  results[2] = smallest_index\n\
    \  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp76rcrrrb.lua:23:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp76rcrrrb.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp76rcrrrb.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest,\
    \ smallest_index, smallest_even_value\n    for i = 1, #arr do\n        if arr[i].value\
    \ % 2 == 0 then\n            if smallest == nil then\n                smallest\
    \ = arr[i]\n                smallest_index = i\n                smallest_even_value\
    \ = arr[i].value\n            elseif smallest_even_value < arr[i].value then\n\
    \                smallest = arr[i]\n                smallest_index = i\n     \
    \           smallest_even_value = arr[i].value\n            end\n        end\n\
    \    end\n    if smallest == nil then\n        return nil\n    end\n    return\
    \ smallest, smallest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg4_hwuo2.lua:21:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpg4_hwuo2.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpg4_hwuo2.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = math.inf\n    local smalest_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i].value <= smalest_value then\n            smalest_value = arr[i].value\n\
    \            smalest_index = i\n        end\n    end\n    if smalest_value ==\
    \ math.inf then\n        return nil\n    end\n    local smalest_value_and_index\
    \ = { smalest_value, smalest_index }\n    for i = 1, #arr do\n        if arr[i].value\
    \ == smalest_value then\n            arr[i].index = smalest_index\n        end\n\
    \    end\n    return smalest_value_and_index\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgz42r6a2.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpgz42r6a2.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpgz42r6a2.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index = 0\n    for _, node in ipairs(arr) do\n\
    \        if node.value % 2 == 0 then\n            if smallest_value < node.value\
    \ then\n                smallest_value = node.value\n                smallest_index\
    \ = node.index\n            end\n        end\n    end\n    if smallest_value ==\
    \ math.inf then\n        return nil\n    end\n    return smallest_value, smallest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4yy0b2bc.lua:22:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmp4yy0b2bc.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp4yy0b2bc.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i].value <= smallest_value then\n            smallest_value = arr[i].value\n\
    \            smallest_index = i\n        end\n    end\n    if smallest_value ==\
    \ math.inf then\n        return nil\n    end\n    local smalest_value = smallest_value\n\
    \    local smalest_index = smallest_index\n    for i = 1, #arr do\n        if\
    \ arr[i].value == smalest_value then\n            if arr[i].index > smalest_index\
    \ then\n                smalest_value = arr[i].value\n                smalest_index\
    \ = arr[i].index\n            end\n        end\n    end\n    return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi80_93td.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpi80_93td.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpi80_93td.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\
    \ = math.inf\n  local smallest_index = 0\n  for i = 1, #arr do\n    if arr[i].value\
    \ <= smallest_value then\n      smallest_value = arr[i].value\n      smallest_index\
    \ = i\n    end\n  end\n  if smallest_value == math.inf then\n    return nil\n\
    \  end\n  return smallest_value, smallest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpywjtxyr3.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpywjtxyr3.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpywjtxyr3.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local function\
    \ helper(arr, index)\n        if index == #arr then\n            return nil\n\
    \        end\n        if arr[index] % 2 == 0 then\n            return arr[index],\
    \ index\n        end\n        return helper(arr, index + 1)\n    end\n    return\
    \ helper(arr, 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8u600kml.lua:23:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp8u600kml.lua:23: in function </tmp/tmp8u600kml.lua:19>\n\t(...tail calls...)\n\
    \t/tmp/tmp8u600kml.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugcntxju.lua:37: ''end'' expected (to close ''function'' at
    line 18) near <eof>

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugcntxju.lua:37: ''end'' expected (to close ''function'' at
    line 18) near <eof>

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    for i = 1, #arr do\n        if arr[i]\
    \ > 0 then\n            if smallest_value < arr[i] then\n                smallest_value\
    \ = arr[i]\n                smallest_index = i\n            end\n        end\n\
    \    end\n    if smallest_value == 0 then\n        return nil\n    end\n    local\
    \ plucked_value = smallest_value\n    local plucked_index = smallest_index\n \
    \   for i = 1, #arr do\n        if arr[i] == 0 then\n            if plucked_value\
    \ == 0 then\n                plucked_value = smallest_value\n                plucked_index\
    \ = smallest_index\n            else\n                if plucked_value < smallest_value\
    \ then\n                    plucked_value = smallest_value\n                 \
    \   plucked_index = smallest_index\n                end\n            end\n   \
    \     end\n    end\n    return arr:sub(plucked_index, plucked_index + 1), plucked_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ehlm4tn.lua:47:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp4ehlm4tn.lua:47:\
    \ in local 'candidate'\n\t/tmp/tmp4ehlm4tn.lua:53: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = nil\n    local smallest_index = nil\n    for i = 1, #arr do\n        if arr[i].value\
    \ % 2 == 0 then\n            if smallest_value == nil then\n                smallest_value\
    \ = arr[i].value\n                smallest_index = i\n            elseif smallest_value\
    \ < arr[i].value then\n                smallest_value = arr[i].value\n       \
    \         smallest_index = i\n            end\n        end\n    end\n    if smallest_value\
    \ == nil then\n        return nil\n    end\n    return smallest_value, smallest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpti4ep5r6.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpti4ep5r6.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpti4ep5r6.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index, smallest_even_value = nil, nil, nil\n    for _, node in ipairs(arr)\
    \ do\n        if node.value % 2 == 0 then\n            if smallest_even_value\
    \ == nil then\n                smallest_even_value = node.value\n            \
    \    smalest_value = node.value\n                smalest_index = node.index\n\
    \            elseif smallest_even_value < node.value then\n                smallest_even_value\
    \ = node.value\n                smalest_value = node.value\n                smalest_index\
    \ = node.index\n            end\n        end\n    end\n    if smallest_even_value\
    \ == nil then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3rvs39p0.lua:21:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmp3rvs39p0.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp3rvs39p0.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugcntxju.lua:37: ''end'' expected (to close ''function'' at
    line 18) near <eof>

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\
    \ = math.inf\n  local smallest_index = 0\n  for i = 1, #arr do\n    if arr[i].value\
    \ <= smallest_value then\n      smallest_value = arr[i].value\n      smallest_index\
    \ = i\n    end\n  end\n  if smallest_value == math.inf then\n    return nil\n\
    \  end\n  return smallest_value, smallest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpywjtxyr3.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpywjtxyr3.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpywjtxyr3.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n\
    \            if smalest_value < arr[i] then\n                smalest_value, smalest_index\
    \ = arr[i], i\n            end\n        end\n    end\n    if smalest_value ==\
    \ 0 then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9njz3k97.lua:36:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmp9njz3k97.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\
    \ = 0\n  local smallest_index = 0\n  local results = {}\n  for i = 1, #arr do\n\
    \    if arr[i] % 2 == 0 then\n      if smallest_value == 0 then\n        smallest_value\
    \ = arr[i]\n        smallest_index = i\n      elseif smallest_value < arr[i] then\n\
    \        smallest_value = arr[i]\n        smallest_index = i\n      end\n    end\n\
    \  end\n  if smallest_value == 0 then\n    return nil\n  end\n  table.insert(results,\
    \ smallest_value, smallest_index)\n  return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppj5iwa0f.lua:36:\
    \ bad argument #2 to 'insert' (position out of bounds)\nstack traceback:\n\t/tmp/tmppj5iwa0f.lua:36:\
    \ in local 'candidate'\n\t/tmp/tmppj5iwa0f.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local function\
    \ helper(arr, i, result)\n        if i == #arr then\n            return result\n\
    \        end\n        if arr[i].value % 2 == 0 then\n            local smallest_value\
    \ = arr[i].value\n            local smallest_index = i\n            for j = i\
    \ + 1, #arr do\n                if arr[j].value % 2 == 0 then\n              \
    \      if smallest_value < arr[j].value then\n                        smallest_value\
    \ = arr[j].value\n                        smallest_index = j\n               \
    \     end\n                end\n            end\n            if smallest_value\
    \ == arr[i].value then\n                smallest_index = smallest_index + 1\n\
    \            end\n            result[#result + 1] = smallest_value, smallest_index\n\
    \            helper(arr, smallest_index, result)\n        end\n    end\n    return\
    \ helper(arr, 1, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp27ik1f6b.lua:23:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmp27ik1f6b.lua:23:\
    \ in function </tmp/tmp27ik1f6b.lua:19>\n\t(...tail calls...)\n\t/tmp/tmp27ik1f6b.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_value_index = 0\n    local results = {}\n    for i\
    \ = 1, #arr do\n        if arr[i] < min_value then\n            min_value = arr[i]\n\
    \            min_value_index = i\n        end\n    end\n    if min_value == math.inf\
    \ then\n        return nil\n    end\n    table.insert(results, min_value, min_value_index)\n\
    \    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ppoqb3a.lua:23:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp8ppoqb3a.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp8ppoqb3a.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest,\
    \ smallest_index, smallest_even_value = nil, nil, nil\n  for _, node in ipairs(arr)\
    \ do\n    if smallest_even_value == nil then\n      if node.value % 2 == 0 then\n\
    \        smallest_even_value = node.value\n        smallest_index = node.index\n\
    \      else\n        smallest_even_value = node.value + 1\n        smallest_index\
    \ = node.index\n      end\n    else\n      if node.value % 2 == 0 then\n     \
    \   if smallest == nil then\n          smallest_even_value = node.value\n    \
    \      smallest_index = node.index\n        elseif node.value < smallest_even_value\
    \ then\n          smallest_even_value = node.value\n          smallest_index =\
    \ node.index\n        end\n      else\n        if smallest == nil then\n     \
    \     smallest_even_value = node.value + 1\n          smallest_index = node.index\n\
    \        elseif node.value < smallest_even_value then\n          smallest_even_value\
    \ = node.value + 1\n          smallest_index = node.index\n        end\n     \
    \ end\n    end\n  end\n  if smallest == nil then\n    return nil\n  end\n  return\
    \ smallest_value, smallest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa1zzexea.lua:22:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmpa1zzexea.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpa1zzexea.lua:58: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index = 0\n    for index, value in ipairs(arr)\
    \ do\n        if smallest_value < value then\n            smallest_value = value\n\
    \            smallest_index = index\n        end\n    end\n    if smallest_value\
    \ == math.inf then\n        return nil\n    end\n    return smallest_value, smallest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxrqk2dda.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpxrqk2dda.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpxrqk2dda.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\
    \ = 0\n  local smallest_index = 0\n  for i = 1, #arr do\n    if arr[i].value %\
    \ 2 == 0 then\n      if smallest_value < arr[i].value then\n        smallest_value\
    \ = arr[i].value\n        smallest_index = i\n      end\n    end\n  end\n  if\
    \ smallest_value == 0 then\n    return nil\n  end\n  return smallest_value, smallest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprja7do43.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmprja7do43.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmprja7do43.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = math.inf\n  local smalest_index = 0\n  local smalest_node\n  for i, v in ipairs(arr)\
    \ do\n    if v < smalest_value then\n      smalest_value = v\n      smalest_index\
    \ = i\n      smalest_node = v\n    end\n  end\n  if smalest_value == math.inf\
    \ then\n    return nil\n  end\n  return smalest_node, smalest_index\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdj13l7ff.lua:23:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpdj13l7ff.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpdj13l7ff.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = nil\n    local smallest_index = nil\n    for i = 1, #arr do\n        if arr[i].value\
    \ % 2 == 0 then\n            if smallest_value == nil then\n                smallest_value\
    \ = arr[i].value\n                smallest_index = i\n            elseif smallest_value\
    \ < arr[i].value then\n                smallest_value = arr[i].value\n       \
    \         smallest_index = i\n            end\n        end\n    end\n    if smallest_value\
    \ == nil then\n        return nil\n    end\n    return smallest_value, smallest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpti4ep5r6.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpti4ep5r6.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpti4ep5r6.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = nil, nil\n    local smalest_even_value = nil\n    local smalest_even_index\
    \ = nil\n    for _, node in ipairs(arr) do\n        if node.value % 2 == 0 then\n\
    \            if smalest_value == nil then\n                smalest_value = node.value\n\
    \                smalest_index = node.index\n                smalest_even_value\
    \ = node.value % 2\n                smalest_even_index = node.index\n        \
    \    elseif node.value < smalest_value then\n                smalest_value = node.value\n\
    \                smalest_index = node.index\n                smalest_even_value\
    \ = node.value % 2\n                smalest_even_index = node.index\n        \
    \    end\n        end\n    end\n    if smalest_value == nil then\n        return\
    \ nil\n    end\n    local smalest_value = smalest_value % 2\n    if smalest_even_index\
    \ == nil then\n        return smalest_value, smalest_index\n    else\n       \
    \ return smalest_value, smalest_index, smalest_even_index, smalest_even_value\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpedaegfy_.lua:23:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmpedaegfy_.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpedaegfy_.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest,\
    \ smallest_index, smallest_even\n  local index = 1\n  for _, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 then\n      if smallest == nil then\n        smallest\
    \ = v\n        smallest_index = index\n        smallest_even = v % 2 == 0\n  \
    \    elseif v < smallest then\n        smallest = v\n        smallest_index =\
    \ index\n        smallest_even = v % 2 == 0\n      end\n      index = index +\
    \ 1\n    end\n  end\n  if smallest == nil then\n    return nil\n  end\n  return\
    \ smallest, smallest_index, smallest_even\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzr5yfr1u.lua:44:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpzr5yfr1u.lua:44: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugcntxju.lua:37: ''end'' expected (to close ''function'' at
    line 18) near <eof>

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index = 0\n    for _, node in ipairs(arr) do\n\
    \        if node.value % 2 == 0 then\n            if smallest_value < node.value\
    \ then\n                smallest_value = node.value\n                smallest_index\
    \ = node.index\n            end\n        end\n    end\n    if smallest_value ==\
    \ math.inf then\n        return nil\n    end\n    return smallest_value, smallest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4yy0b2bc.lua:22:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmp4yy0b2bc.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp4yy0b2bc.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i] < smallest_value then\n            smallest_value = arr[i]\n        \
    \    smallest_index = i\n        end\n    end\n    if smallest_value == math.inf\
    \ then\n        return nil\n    end\n    local smalest_value = smallest_value\n\
    \    local smalest_index = smallest_index\n    for i = 1, #arr do\n        if\
    \ arr[i] == smalest_value then\n            smalest_value = arr[i]\n         \
    \   smalest_index = i\n        end\n    end\n    if smalest_value == math.inf\
    \ then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxenqj3mi.lua:22:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpxenqj3mi.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpxenqj3mi.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i].value <= smallest_value then\n            smallest_value = arr[i].value\n\
    \            smallest_index = i\n        end\n    end\n    if smallest_value ==\
    \ math.inf then\n        return nil\n    end\n    return smallest_value, smallest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpri9em3_6.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpri9em3_6.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpri9em3_6.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    for i = 1, #arr do\n        if arr[i]\
    \ % 2 == 0 then\n            if smalest_value < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    return\
    \ smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx6mvvui.lua:38:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpjx6mvvui.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\
    \ = 0\n  local smallest_index = 0\n  local plucked_node\n  for _, node in ipairs(arr)\
    \ do\n    if node.value % 2 == 0 then\n      if smallest_value == 0 or node.value\
    \ < smallest_value then\n        smallest_value = node.value\n        smallest_index\
    \ = node.index\n        plucked_node = node\n      end\n    end\n  end\n  if smallest_value\
    \ == 0 then\n    return nil\n  end\n  return smallest_value, plucked_node.index,\
    \ plucked_node\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2dcygubo.lua:23:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmp2dcygubo.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp2dcygubo.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = arr[1]\n    local smalest_index = 1\n    for i = 2, #arr do\n        if arr[i]\
    \ < smalest_value then\n            smalest_value = arr[i]\n            smalest_index\
    \ = i\n        end\n    end\n    return smalest_value, smalest_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp28x3i_5c.lua:33:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmp28x3i_5c.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    local results = {}\n    for i = 1, #arr\
    \ do\n        if arr[i].value % 2 == 0 then\n            if smallest_value < arr[i].value\
    \ then\n                smallest_value = arr[i].value\n                smallest_index\
    \ = i\n            end\n        end\n    end\n    if smallest_value == 0 then\n\
    \        return nil\n    end\n    table.insert(results, smallest_value, smallest_index)\n\
    \    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuqw9lnhw.lua:23:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpuqw9lnhw.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpuqw9lnhw.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\
    \ = 0\n  local smallest_index = 0\n  for i = 1, #arr do\n    if arr[i].value %\
    \ 2 == 0 then\n      if smallest_value < arr[i].value then\n        smallest_value\
    \ = arr[i].value\n        smallest_index = i\n      end\n    end\n  end\n  if\
    \ smallest_value == 0 then\n    return nil\n  end\n  return smallest_value, smallest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprja7do43.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmprja7do43.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmprja7do43.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugcntxju.lua:37: ''end'' expected (to close ''function'' at
    line 18) near <eof>

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    local index = 1\n    for i = 1, #arr\
    \ do\n        if arr[i] % 2 == 0 then\n            if smallest_value < arr[i]\
    \ then\n                smallest_value = arr[i]\n                smallest_index\
    \ = index\n            end\n            index = index + 1\n        end\n    end\n\
    \    if smallest_value == 0 then\n        return nil\n    end\n    return smallest_value,\
    \ smallest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0asn8qj.lua:40:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpl0asn8qj.lua:40: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugcntxju.lua:37: ''end'' expected (to close ''function'' at
    line 18) near <eof>

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\n\
    \    local smallest_index\n    for _, node in ipairs(arr) do\n        if smallest_value\
    \ == nil then\n            smallest_value = node.value\n            smallest_index\
    \ = node.index\n        elseif smallest_value < node.value then\n            smallest_value\
    \ = node.value\n            smallest_index = node.index\n        end\n    end\n\
    \    if smallest_value == nil then\n        return nil\n    end\n    local plucked_value\
    \ = smallest_value\n    local plucked_index = smallest_index\n    for _, node\
    \ in ipairs(arr) do\n        if node.value == plucked_value then\n           \
    \ if node.index <= plucked_index then\n                plucked_value = node.value\n\
    \                plucked_index = node.index\n            else\n              \
    \  plucked_value = smallest_value\n                plucked_index = smallest_index\n\
    \            end\n        end\n    end\n    return [ plucked_value, plucked_index\
    \ ]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwu0c878s.lua:46: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\n\
    \    local smallest_index\n    for i = 1, #arr do\n        if arr[i] % 2 == 0\
    \ then\n            if smallest_value == nil then\n                smallest_value\
    \ = arr[i]\n                smallest_index = i\n            elseif smallest_value\
    \ < arr[i] then\n                smallest_value = arr[i]\n                smallest_index\
    \ = i\n            end\n        end\n    end\n    if smallest_value == nil then\n\
    \        return nil\n    end\n    return smallest_value, smallest_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl7aaqha4.lua:41:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpl7aaqha4.lua:41: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\
    \ = 0\n  local smallest_index = 0\n  local plucked_node\n  for _, node in ipairs(arr)\
    \ do\n    if node.value == smallest_value then\n      smallest_index = node.index\n\
    \    end\n    if node.value == smallest_value then\n      plucked_node = node\n\
    \    end\n  end\n  if plucked_node == nil then\n    return nil\n  end\n  return\
    \ smallest_value, plucked_node.index, smallest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy_jklua5.lua:23:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmpy_jklua5.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpy_jklua5.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    for i = 1, #arr do\n        if arr[i].value\
    \ % 2 == 0 then\n            if smallest_value < arr[i].value then\n         \
    \       smallest_value = arr[i].value\n                smallest_index = i\n  \
    \          end\n        end\n    end\n    if smallest_value == 0 then\n      \
    \  return nil\n    end\n    return smallest_value, smallest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpojyhp_nr.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpojyhp_nr.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpojyhp_nr.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = math.inf\n    local smalest_index = 0\n    local smalest_node\n    for i =\
    \ 1, #arr do\n        if arr[i] < smalest_value then\n            smalest_value\
    \ = arr[i]\n            smalest_index = i\n            smalest_node = arr[i]\n\
    \        end\n    end\n    if smalest_value == math.inf then\n        return nil\n\
    \    end\n    if smalest_index == #arr then\n        return smalest_node\n   \
    \ end\n    local smalest_node_index = #arr\n    for i = 1, #arr do\n        if\
    \ arr[i] < smalest_value then\n            smalest_node_index = i\n          \
    \  smalest_value = arr[i]\n            smalest_node = arr[i]\n        end\n  \
    \  end\n    return smalest_node, smalest_node_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl_wbh1fa.lua:23:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpl_wbh1fa.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpl_wbh1fa.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smallest_index = 0\n    for _, v in ipairs(arr) do\n        if\
    \ v ~= 0 then\n            if v <= smalest_value then\n                smalest_value\
    \ = v\n                smallest_index = v\n            end\n        end\n    end\n\
    \    if smalest_value == 0 then\n        return nil\n    end\n    local plucked_value\
    \ = smalest_value\n    local plucked_index = smallest_index\n    for _, v in ipairs(arr)\
    \ do\n        if v ~= 0 then\n            if v <= smalest_value then\n       \
    \         smalest_value = v\n                smallest_index = v\n            \
    \    if smalest_value == plucked_value then\n                    plucked_index\
    \ = smallest_index\n                end\n            end\n        end\n    end\n\
    \    if plucked_value == 0 then\n        return nil\n    end\n    return plucked_value,\
    \ plucked_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq536010p.lua:54:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpq536010p.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugcntxju.lua:37: ''end'' expected (to close ''function'' at
    line 18) near <eof>

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugcntxju.lua:37: ''end'' expected (to close ''function'' at
    line 18) near <eof>

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    for i = 1, #arr do\n        if arr[i]\
    \ > 0 then\n            if smallest_value < arr[i] then\n                smallest_value\
    \ = arr[i]\n                smallest_index = i\n            end\n        end\n\
    \    end\n    if smallest_value == 0 then\n        return nil\n    end\n    local\
    \ smallest_value_index = #arr\n    for i = 1, #arr do\n        if arr[i] == smallest_value\
    \ then\n            smallest_value_index = i\n        end\n    end\n    return\
    \ smallest_value, smallest_value_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksugenb2.lua:44:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpksugenb2.lua:44: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local function\
    \ helper(arr, i, smallest)\n        if arr[i] == nil then\n            return\
    \ nil\n        end\n        if smallest == nil then\n            smallest = i\n\
    \        end\n        if arr[i].value % 2 == 0 then\n            smallest = i\n\
    \        end\n        if smallest ~= nil then\n            helper(arr, i + 1,\
    \ smallest)\n        end\n    end\n    helper(arr, 1, nil)\n    return arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvqfnr4is.lua:26:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpvqfnr4is.lua:26:\
    \ in local 'helper'\n\t/tmp/tmpvqfnr4is.lua:33: in local 'candidate'\n\t/tmp/tmpvqfnr4is.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index = 0\n    for index, value in ipairs(arr)\
    \ do\n        if value == 0 then\n            if smallest_value == math.inf then\n\
    \                smallest_value = value\n                smallest_index = index\n\
    \            else\n                if value < smallest_value then\n          \
    \          smallest_value = value\n                    smallest_index = index\n\
    \                end\n            end\n        else\n            if value < smallest_value\
    \ then\n                smallest_value = value\n                smallest_index\
    \ = index\n            end\n        end\n    end\n    if smallest_value == math.inf\
    \ then\n        return nil\n    end\n    return smallest_value, smallest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpejhfr41e.lua:33:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpejhfr41e.lua:33:\
    \ in local 'candidate'\n\t/tmp/tmpejhfr41e.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\
    \ = nil\n  local smallest_index = nil\n  local smallest_even_value = nil\n  for\
    \ i = 1, #arr do\n    if arr[i].value % 2 == 0 then\n      if smallest_value ==\
    \ nil then\n        smallest_value = arr[i].value\n        smallest_index = i\n\
    \        smallest_even_value = arr[i].value % 2\n      elseif smallest_even_value\
    \ < arr[i].value % 2 then\n        smallest_value = arr[i].value\n        smallest_even_value\
    \ = arr[i].value % 2\n        smallest_index = i\n      end\n    end\n  end\n\
    \  if smallest_value == nil then\n    return nil\n  end\n  return smallest_value,\
    \ smallest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiip3t43u.lua:23:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpiip3t43u.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpiip3t43u.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugcntxju.lua:37: ''end'' expected (to close ''function'' at
    line 18) near <eof>

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    for i = 1, #arr do\n        if arr[i]\
    \ > 0 then\n            if smallest_value == 0 then\n                smallest_value\
    \ = arr[i]\n                smallest_index = i\n            elseif smallest_value\
    \ < arr[i] then\n                smallest_value = arr[i]\n                smallest_index\
    \ = i\n            end\n        end\n    end\n    if smallest_value == 0 then\n\
    \        return nil\n    end\n    local plucked_value = smallest_value\n    local\
    \ plucked_index = smallest_index\n    for i = 1, #arr do\n        if arr[i] ==\
    \ 0 then\n            if plucked_value == 0 then\n                plucked_value\
    \ = arr[i]\n                plucked_index = i\n            elseif plucked_value\
    \ < arr[i] then\n                plucked_value = arr[i]\n                plucked_index\
    \ = i\n            end\n        end\n    end\n    return [ plucked_value, plucked_index\
    \ ]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpllaw6obz.lua:48: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i] < smallest_value then\n            smallest_value = arr[i]\n        \
    \    smallest_index = i\n        end\n    end\n    if smallest_value == math.inf\
    \ then\n        return nil\n    end\n    local smalest_value = smallest_value\n\
    \    local smalest_index = smallest_index\n    for i = 1, #arr do\n        if\
    \ arr[i] < smalest_value then\n            smalest_value = arr[i]\n          \
    \  smalest_index = i\n        end\n    end\n    if smalest_value == math.inf then\n\
    \        return nil\n    end\n    return smalest_value, smalest_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0xv7x27g.lua:22:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp0xv7x27g.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp0xv7x27g.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    for i = 1, #arr do\n        if arr[i].value\
    \ % 2 == 0 then\n            if smallest_value < arr[i].value then\n         \
    \       smallest_value = arr[i].value\n                smallest_index = i\n  \
    \          end\n        end\n    end\n    if smallest_value == 0 then\n      \
    \  return nil\n    end\n    return smallest_value, smallest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpojyhp_nr.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpojyhp_nr.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpojyhp_nr.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index = 0\n    local index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] < smallest_value then\n            smallest_value\
    \ = arr[i]\n            smallest_index = index\n        end\n        index = index\
    \ + 1\n    end\n    if smallest_value == math.inf then\n        return nil\n \
    \   end\n    return smallest_value, smallest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps27hza49.lua:23:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmps27hza49.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmps27hza49.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\
    \ = 0\n  local smallest_index = 0\n  for i = 1, #arr do\n    if arr[i] > 0 then\n\
    \      if smallest_value == 0 then\n        smallest_value = arr[i]\n        smallest_index\
    \ = i\n      elseif smallest_value < arr[i] then\n        smallest_value = arr[i]\n\
    \        smallest_index = i\n      end\n    end\n  end\n  if smallest_value ==\
    \ 0 then\n    return nil\n  end\n  return smallest_value, smallest_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptmlw5b1x.lua:41:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmptmlw5b1x.lua:41: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  else\n    -- Find the smallest even value\n\
    \    local smallest_even_value = 0\n    for _, node in ipairs(arr) do\n      if\
    \ node.value % 2 == 0 then\n        smallest_even_value = node.value\n       \
    \ break\n      end\n    end\n    -- Find the smallest index\n    local smallest_index\
    \ = 0\n    for _, node in ipairs(arr) do\n      if node.value == smallest_even_value\
    \ then\n        smallest_index = node.index\n        break\n      end\n    end\n\
    \    -- Return the smallest even value and its index\n    return smallest_even_value..smallest_index\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpowd6iice.lua:26:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmpowd6iice.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmpowd6iice.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.min(arr)\n\
    \    local index = nil\n    for i, v in ipairs(arr) do\n        if v == min then\n\
    \            index = i\n        end\n    end\n    if index == nil then\n     \
    \   return nil\n    end\n    return min, index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcjabwj45.lua:35:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpcjabwj45.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    local index = 1\n    for _, node in ipairs(arr)\
    \ do\n        if node.value % 2 == 0 then\n            if smallest_value < node.value\
    \ then\n                smallest_value = node.value\n                smallest_index\
    \ = index\n            end\n            index = index + 1\n        end\n    end\n\
    \    if smallest_value == 0 then\n        return nil\n    end\n    return smallest_value,\
    \ smallest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzrn4rqw3.lua:23:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmpzrn4rqw3.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpzrn4rqw3.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\
    \ = nil\n  local smallest_index = nil\n  for i = 1, #arr do\n    if arr[i].value\
    \ % 2 == 0 then\n      if smallest_value == nil or arr[i].value < smallest_value\
    \ then\n        smallest_value = arr[i].value\n        smallest_index = i\n  \
    \    end\n    end\n  end\n  if smallest_value == nil then\n    return nil\n  end\n\
    \  return smallest_value, smallest_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi6iin5zo.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpi6iin5zo.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpi6iin5zo.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index, smalest_node\n    local max_value, max_index, max_node\n    for\
    \ _, node in ipairs(arr) do\n        if node.value % 2 == 0 then\n           \
    \ if smalest_value == nil then\n                smalest_value = node.value\n \
    \               smalest_index = max_index\n                smalest_node = max_node\n\
    \            elseif smalest_value < node.value then\n                smalest_value\
    \ = node.value\n                smalest_index = max_index\n                smalest_node\
    \ = max_node\n            end\n        else\n            if max_value == nil then\n\
    \                max_value = node.value\n                max_index = max_index\n\
    \                max_node = node\n            elseif max_value < node.value then\n\
    \                max_value = node.value\n                max_index = max_index\n\
    \                max_node = node\n            end\n        end\n    end\n    if\
    \ smalest_value == nil then\n        return nil\n    end\n    return smalest_node,\
    \ smalest_index, max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf1ty5cl1.lua:22:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmpf1ty5cl1.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpf1ty5cl1.lua:53: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\n\
    \  local smallest_index\n  for i = 1, #arr do\n    if arr[i].value % 2 == 0 then\n\
    \      if smallest_value == nil then\n        smallest_value = arr[i].value\n\
    \        smallest_index = i\n      elseif smallest_value < arr[i].value then\n\
    \        smallest_value = arr[i].value\n        smallest_index = i\n      end\n\
    \    end\n  end\n  if smallest_value == nil then\n    return nil\n  end\n  return\
    \ smallest_value, smallest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwy_s04qh.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpwy_s04qh.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpwy_s04qh.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Your code here\n\
    \  local smalest_value = nil\n  local smalest_index = nil\n  for i = 1, #arr do\n\
    \    if arr[i] % 2 == 0 then\n      if smalest_value == nil then\n        smalest_value\
    \ = arr[i]\n        smalest_index = i\n      elseif smalest_value < arr[i] then\n\
    \        smalest_value = arr[i]\n        smalest_index = i\n      end\n    end\n\
    \  end\n  if smalest_value == nil then\n    return nil\n  end\n  return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ewytiim.lua:42:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmp9ewytiim.lua:42: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\n\
    \  local smallest_index\n  for i, v in ipairs(arr) do\n    if smallest_value ==\
    \ nil then\n      smallest_value = v\n      smallest_index = i\n    else\n   \
    \   if v < smallest_value then\n        smallest_value = v\n        smallest_index\
    \ = i\n      end\n    end\n  end\n  return smallest_value, smallest_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeym0gz91.lua:38:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpeym0gz91.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = 0\n  local smalest_index = 0\n  local smalest_node\n  for i, v in ipairs(arr)\
    \ do\n    if smalest_value == 0 then\n      smalest_value = v\n      smalest_index\
    \ = i\n      smalest_node = v\n    elseif smalest_value ~= 0 then\n      if v\
    \ ~= smalest_node then\n        if v ~= smalest_value then\n          smalest_value\
    \ = v\n          smalest_index = i\n          smalest_node = v\n        end\n\
    \      end\n    end\n  end\n  if smalest_value == 0 then\n    return nil\n  end\n\
    \  return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdrk3k4ek.lua:46:\
    \ expected: {2, 1}\nactual: 3\nstack traceback:\n\t/tmp/tmpdrk3k4ek.lua:46: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    for i = 1, #arr do\n        if arr[i].value\
    \ % 2 == 0 then\n            if smalest_value == nil then\n                smalest_value\
    \ = arr[i].value\n                smalest_index = i\n            elseif smalest_value\
    \ < arr[i].value then\n                smalest_value = arr[i].value\n        \
    \        smalest_index = i\n            end\n        end\n    end\n    if smalest_value\
    \ == nil then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp46cn2f14.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmp46cn2f14.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp46cn2f14.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugcntxju.lua:37: ''end'' expected (to close ''function'' at
    line 18) near <eof>

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\n\
    \  local smallest_index\n  local index = 1\n  for _, node in ipairs(arr) do\n\
    \    if smallest_value == nil then\n      smallest_value = node.value\n      smallest_index\
    \ = index\n    else\n      if node.value <= smallest_value then\n        smallest_value\
    \ = node.value\n        smallest_index = index\n      end\n      index = index\
    \ + 1\n    end\n  end\n  if smallest_value == nil then\n    return nil\n  end\n\
    \  return smallest_value, smallest_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl8gl5juf.lua:24:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmpl8gl5juf.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpl8gl5juf.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = nil\n    local smallest_index = nil\n    local index = 1\n    for i = 1, #arr\
    \ do\n        if arr[i] < smallest_value then\n            smallest_value = arr[i]\n\
    \            smallest_index = index\n        end\n        index = index + 1\n\
    \    end\n    if smallest_value == nil then\n        return nil\n    end\n   \
    \ local smallest_value_index = nil\n    for i = 1, #arr do\n        if arr[i]\
    \ == smallest_value then\n            smallest_value_index = i\n        end\n\
    \    end\n    if smallest_value_index == nil then\n        return nil\n    end\n\
    \    return smallest_value, smallest_value_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp48_2_f6n.lua:23:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp48_2_f6n.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp48_2_f6n.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugcntxju.lua:37: ''end'' expected (to close ''function'' at
    line 18) near <eof>

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    for i = 1, #arr do\n        if arr[i]\
    \ % 2 == 0 then\n            if smalest_value < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    return\
    \ smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx6mvvui.lua:38:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpjx6mvvui.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest,\
    \ smallest_index, smallest_value = nil, nil, nil\n    for i = 1, #arr do\n   \
    \     if arr[i].value % 2 == 0 then\n            if smallest == nil or arr[i].value\
    \ < smallest then\n                smallest, smallest_index, smallest_value =\
    \ arr[i].value, i, arr[i].value\n            else\n                smallest_value\
    \ = arr[i].value\n                smallest_index = i\n            end\n      \
    \  end\n    end\n    if smallest == nil then\n        return nil\n    end\n  \
    \  return smallest_value, smallest_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1s94l7a4.lua:21:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmp1s94l7a4.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp1s94l7a4.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\
    \ = math.inf\n  local smallest_index = 0\n  local results = {}\n  for i = 1, #arr\
    \ do\n    if arr[i].value <= smallest_value then\n      smallest_value = arr[i].value\n\
    \      smallest_index = i\n    end\n  end\n  if smallest_value == math.inf then\n\
    \    return nil\n  end\n  results[1] = smallest_value\n  results[2] = smallest_index\n\
    \  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpco1it_zy.lua:23:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpco1it_zy.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpco1it_zy.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest,\
    \ smallest_index, smallest_even_value\n    for i = 1, #arr do\n        if arr[i].value\
    \ % 2 == 0 then\n            if smallest == nil then\n                smallest\
    \ = arr[i]\n                smallest_index = i\n                smallest_even_value\
    \ = arr[i].value / 2\n            elseif smallest_even_value < arr[i].value /\
    \ 2 then\n                smallest = arr[i]\n                smallest_index =\
    \ i\n                smallest_even_value = arr[i].value / 2\n            end\n\
    \        end\n    end\n    if smallest == nil then\n        return nil\n    end\n\
    \    return smallest, smallest_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqj2pe4d5.lua:21:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpqj2pe4d5.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpqj2pe4d5.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = math.inf\n  local smalest_index = 0\n  for i = 1, #arr do\n    if arr[i] <\
    \ smalest_value then\n      smalest_value = arr[i]\n      smalest_index = i\n\
    \    end\n  end\n  if smalest_value == math.inf then\n    return nil\n  end\n\
    \  local plucked_value = smalest_value\n  local plucked_index = smalest_index\n\
    \  for i = 1, #arr do\n    if arr[i] < plucked_value then\n      plucked_value\
    \ = arr[i]\n      plucked_index = i\n    end\n  end\n  return [plucked_value,\
    \ plucked_index]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm72aipew.lua:38: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugcntxju.lua:37: ''end'' expected (to close ''function'' at
    line 18) near <eof>

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\
    \ = 0\n  local smallest_index = 0\n  local plucked_node\n  for _, node in ipairs(arr)\
    \ do\n    if node.value % 2 == 0 then\n      if smallest_value == 0 or node.value\
    \ < smallest_value then\n        smallest_value = node.value\n        smallest_index\
    \ = node.index\n        plucked_node = node\n      end\n    end\n  end\n  return\
    \ plucked_node, smallest_index, smallest_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp53bt0e2t.lua:23:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmp53bt0e2t.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp53bt0e2t.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\n\
    \    local smallest_index\n    for i = 1, #arr do\n        if arr[i] % 2 == 0\
    \ then\n            if smallest_value == nil then\n                smallest_value\
    \ = arr[i]\n                smallest_index = i\n            elseif smallest_value\
    \ < arr[i] then\n                smallest_value = arr[i]\n                smallest_index\
    \ = i\n            end\n        end\n    end\n    if smallest_value == nil then\n\
    \        return nil\n    end\n    return smallest_value, smallest_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl7aaqha4.lua:41:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpl7aaqha4.lua:41: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    local results = {}\n    for i = 1, #arr\
    \ do\n        if arr[i] < smallest_value then\n            smallest_value = arr[i]\n\
    \            smallest_index = i\n        end\n    end\n    if smallest_value ==\
    \ 0 then\n        return nil\n    end\n    local smallest_value_index = smallest_index\n\
    \    for i = 1, #arr do\n        if arr[i] == smallest_value then\n          \
    \  smallest_value_index = i\n        end\n    end\n    results[smallest_value_index]\
    \ = smallest_value\n    return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu9y79aww.lua:44:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpu9y79aww.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugcntxju.lua:37: ''end'' expected (to close ''function'' at
    line 18) near <eof>

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_value_and_index = nil\n\
    \    for i = 1, #arr do\n        if arr[i] < smalest_value then\n            smalest_value\
    \ = arr[i]\n            smalest_index = i\n        end\n    end\n    if smalest_value\
    \ then\n        smalest_value_and_index = smalest_value, smalest_index\n    end\n\
    \    for i = 1, #arr do\n        if arr[i] < smalest_value then\n            smalest_value\
    \ = arr[i]\n            smalest_index = i\n        end\n    end\n    if smalest_value\
    \ then\n        smalest_value_and_index = smalest_value, smalest_index\n    end\n\
    \    if smalest_value_and_index then\n        smalest_value_and_index = smalest_value_and_index[1]\n\
    \    end\n    if smalest_value_and_index == nil then\n        return nil\n   \
    \ end\n    return smalest_value_and_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy7tv1um1.lua:23:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpy7tv1um1.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpy7tv1um1.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index = 0\n    for index, value in pairs(arr)\
    \ do\n        if smallest_value < value then\n            smallest_value = value\n\
    \            smallest_index = index\n        end\n    end\n    if smallest_value\
    \ == math.inf then\n        return nil\n    end\n    return smallest_value, smallest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1cvhcfk6.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp1cvhcfk6.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp1cvhcfk6.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i] < smallest_value then\n            smallest_value = arr[i]\n        \
    \    smallest_index = i\n        end\n    end\n    if smallest_value == math.inf\
    \ then\n        return nil\n    end\n    return smallest_value, smallest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8zw1jgbl.lua:22:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp8zw1jgbl.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp8zw1jgbl.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\
    \ = math.inf\n  local smallest_index = 0\n  for i = 1, #arr do\n    if arr[i].value\
    \ <= smallest_value then\n      smallest_value = arr[i].value\n      smallest_index\
    \ = i\n    end\n  end\n  if smallest_value == math.inf then\n    return nil\n\
    \  end\n  return smallest_value, smallest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpywjtxyr3.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpywjtxyr3.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpywjtxyr3.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i] < smallest_value then\n            smallest_value = arr[i]\n        \
    \    smallest_index = i\n        end\n    end\n    if smallest_value == math.inf\
    \ then\n        return nil\n    end\n    local smalest_value = smallest_value\n\
    \    local smalest_index = smallest_index\n    for i = 1, #arr do\n        if\
    \ arr[i] < smalest_value then\n            smalest_value = arr[i]\n          \
    \  smalest_index = i\n        end\n    end\n    return smalest_value, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcaa4_w58.lua:22:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpcaa4_w58.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpcaa4_w58.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\
    \ = 0\n  local smallest_index = 0\n  local results = {}\n  for i = 1, #arr do\n\
    \    if arr[i].value % 2 == 0 then\n      if smallest_value == 0 then\n      \
    \  smallest_value = arr[i].value\n        smallest_index = i\n      elseif smallest_value\
    \ < arr[i].value then\n        smallest_value = arr[i].value\n        smallest_index\
    \ = i\n      end\n    end\n  end\n  if smallest_value ~= 0 then\n    table.insert(results,\
    \ smallest_value, smallest_index)\n  end\n  return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt3t3kv10.lua:23:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpt3t3kv10.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpt3t3kv10.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node = {}\n    for i = 1,\
    \ #arr do\n        if arr[i].value % 2 == 0 then\n            if smalest_value\
    \ < arr[i].value then\n                smalest_value = arr[i].value\n        \
    \        smalest_index = i\n            end\n        end\n    end\n    if smalest_value\
    \ == 0 then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb6f3n3dc.lua:23:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpb6f3n3dc.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpb6f3n3dc.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = nil\n    local smallest_index = nil\n    for i = 1, #arr do\n        if arr[i].value\
    \ % 2 == 0 then\n            if smallest_value == nil or arr[i].value < smallest_value\
    \ then\n                smallest_value = arr[i].value\n                smallest_index\
    \ = i\n            end\n        end\n    end\n    if smallest_value == nil then\n\
    \        return nil\n    end\n    return smallest_value, smallest_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm2ckfgd6.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpm2ckfgd6.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpm2ckfgd6.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest,\
    \ smallest_index, smallest_even_value\n    for i = 1, #arr do\n        if arr[i].value\
    \ % 2 == 0 then\n            if smallest == nil then\n                smallest\
    \ = arr[i]\n                smallest_index = i\n                smallest_even_value\
    \ = arr[i].value / 2\n            elseif smallest_even_value < arr[i].value /\
    \ 2 then\n                smallest = arr[i]\n                smallest_index =\
    \ i\n                smallest_even_value = arr[i].value / 2\n            end\n\
    \        end\n    end\n    if smallest == nil then\n        return nil\n    end\n\
    \    return smallest, smallest_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqj2pe4d5.lua:21:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpqj2pe4d5.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpqj2pe4d5.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\n\
    \    local smallest_index\n    local result\n    for i = 1, #arr do\n        if\
    \ arr[i].value % 2 == 0 then\n            if smallest_value == nil then\n    \
    \            smallest_value = arr[i].value\n                smallest_index = i\n\
    \            elseif smallest_value < arr[i].value then\n                smallest_value\
    \ = arr[i].value\n                smallest_index = i\n            end\n      \
    \  end\n    end\n    if smallest_value == nil then\n        return nil\n    end\n\
    \    if smallest_index == nil then\n        return smallest_value\n    end\n \
    \   if smallest_value == arr[1].value then\n        return smallest_index\n  \
    \  end\n    if smallest_value == arr[2].value then\n        return smallest_index\n\
    \    end\n    if smallest_value == arr[3].value then\n        return smallest_index\n\
    \    end\n    if smallest_value == arr[4].value then\n        return smallest_index\n\
    \    end\n    if smallest_value == arr[5].value then\n        return smallest_index\n\
    \    end\n    if smallest_value == arr[6].value then\n        return smallest_index\n\
    \    end\n    if smallest_value == arr[7].value then\n        return smallest_index\n\
    \    end\n    if smallest_value == arr[8].value then\n        return smallest_index\n\
    \    end\n    if smallest_value == arr[9].value then\n        return smallest_index\n\
    \    end\n    if smallest_value == arr[10].value then\n        return smallest_index\n\
    \    end\n    if smallest_value == arr[11].value then\n        return smallest_index\n\
    \    end\n    if smallest_value == arr[12].value then\n        return smallest_index\n\
    \    end\n    if smallest_value == arr[13].value then\n        return smallest_index\n\
    \    end\n    if smallest_value == arr[14].value then\n        return smallest_index\n\
    \    end\n    if smallest_value == arr[15].value then\n        return smallest_index\n\
    \    end\n    if smallest_value == arr[16].value then\n        return smallest_index\n\
    \    end\n    if smallest_value == arr[17].value then\n        return smallest_index\n\
    \    end\n    if smallest_value == arr[18].value then\n        return smallest_index\n\
    \    end\n    if smallest_value == arr[19].value then\n        return smallest_index\n\
    \    end\n    if smallest_value == arr[20].value then\n        return smallest_index\n\
    \    end\n    if smallest_value == arr[21].value then\n        return smallest_index\n\
    \    end\n    if smallest_value == arr[22].value then\n        return smallest_index\n\
    \    end\n    if smallest_value == arr[23].value then\n        return smallest_index\n\
    \    end\n    if smallest_value == arr[24].\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbse6ebq1.lua:109: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest,\
    \ smallest_index, smallest_value\n    for i = 1, #arr do\n        if arr[i].value\
    \ % 2 == 0 then\n            if smallest == nil then\n                smallest\
    \ = arr[i]\n                smallest_index = i\n                smallest_value\
    \ = arr[i].value\n            elseif arr[i].value < smallest then\n          \
    \      smallest = arr[i]\n                smallest_index = i\n               \
    \ smallest_value = arr[i].value\n            end\n        end\n    end\n    if\
    \ smallest == nil then\n        return nil\n    end\n    return smallest_value,\
    \ smallest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0txq1_sc.lua:21:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmp0txq1_sc.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp0txq1_sc.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\
    \ = nil\n  local smallest_index = nil\n  local index = 1\n  for _, node in ipairs(arr)\
    \ do\n    if smallest_value == nil then\n      if node.value % 2 == 0 then\n \
    \       smallest_value = node.value\n        smallest_index = index\n      end\n\
    \    else\n      if node.value % 2 == 0 then\n        if smallest_value < node.value\
    \ then\n          smallest_value = node.value\n          smallest_index = index\n\
    \        end\n      end\n    end\n    index = index + 1\n  end\n  if smallest_value\
    \ == nil then\n    return nil\n  end\n  return smallest_value, smallest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwgty6p3n.lua:24:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmpwgty6p3n.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpwgty6p3n.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    for i = 1, #arr\
    \ do\n        if arr[i] % 2 == 0 then\n            if smalest_value == 0 then\n\
    \                smalest_value = arr[i]\n                smalest_index = i\n \
    \           elseif smalest_value < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    local\
    \ smalest_nodes = {}\n    local smalest_node_index\n    for i = 1, #arr do\n \
    \       if arr[i] % 2 == 0 then\n            if smalest_node_index == nil then\n\
    \                smalest_node_index = i\n                smalest_nodes[i] = arr[i]\n\
    \            elseif smalest_node_index < i then\n                smalest_node_index\
    \ = i\n                smalest_nodes[i] = arr[i]\n            end\n        end\n\
    \    end\n    if #smalest_nodes == 0 then\n        return nil\n    end\n    return\
    \ smalest_nodes[#smalest_nodes]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc25ne5pp.lua:58:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpc25ne5pp.lua:58: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index = 0\n    for index, value in pairs(arr)\
    \ do\n        if smallest_value < value then\n            smallest_value = value\n\
    \            smallest_index = index\n        end\n    end\n    if smallest_value\
    \ == math.inf then\n        return nil\n    end\n    return smallest_value, smallest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1cvhcfk6.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp1cvhcfk6.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp1cvhcfk6.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    for i = 1, #arr do\n        if arr[i]\
    \ < smallest_value then\n            smallest_value = arr[i]\n            smallest_index\
    \ = i\n        end\n    end\n    if smallest_value == 0 then\n        return nil\n\
    \    end\n    local smalest_value = smallest_value\n    local smalest_index =\
    \ smallest_index\n    for i = 1, #arr do\n        if arr[i] < smalest_value then\n\
    \            smalest_value = arr[i]\n            smalest_index = i\n        end\n\
    \    end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_riwybk.lua:44:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmp7_riwybk.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = nil\n    local smallest_index = nil\n    local index = 1\n    for i = 1, #arr\
    \ do\n        if arr[i] > 0 then\n            if smallest_value == nil then\n\
    \                smallest_value = arr[i]\n                smallest_index = index\n\
    \            elseif smallest_value < arr[i] then\n                smallest_value\
    \ = arr[i]\n                smallest_index = index\n            end\n        \
    \    index = index + 1\n        end\n    end\n    if smallest_value == nil then\n\
    \        return nil\n    end\n    return smallest_value, smallest_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz277ty0z.lua:43:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpz277ty0z.lua:43: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.min(arr)\n\
    \    local index = nil\n    for i, v in ipairs(arr) do\n        if v == min then\n\
    \            index = i\n        end\n    end\n    if index == nil then\n     \
    \   return nil\n    end\n    return min, index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcjabwj45.lua:35:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpcjabwj45.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    for i = 1, #arr do\n        if arr[i].value\
    \ % 2 == 0 then\n            if smallest_value < arr[i].value then\n         \
    \       smallest_value = arr[i].value\n                smallest_index = i\n  \
    \          end\n        end\n    end\n    if smallest_value == 0 then\n      \
    \  return nil\n    end\n    return smallest_value, smallest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpojyhp_nr.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpojyhp_nr.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpojyhp_nr.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\n\
    \  local smallest_index\n  for _, node in ipairs(arr) do\n    if smallest_value\
    \ == nil then\n      smallest_value = node.value\n      smallest_index = node.index\n\
    \    elseif smallest_value < node.value then\n      smallest_value = node.value\n\
    \      smallest_index = node.index\n    end\n  end\n  if smallest_value == nil\
    \ then\n    return nil\n  end\n  local plucked_value = smallest_value\n  local\
    \ plucked_index = smallest_index\n  for _, node in ipairs(arr) do\n    if node.value\
    \ == plucked_value then\n      if node.index <= plucked_index then\n        plucked_index\
    \ = node.index\n      else\n        plucked_value = node.value\n        plucked_index\
    \ = node.index\n      end\n    end\n  end\n  return [ plucked_value, plucked_index\
    \ ]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8jjplbqr.lua:45: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i].value <= smallest_value then\n            smallest_value = arr[i].value\n\
    \            smallest_index = i\n        end\n    end\n    if smallest_value ==\
    \ math.inf then\n        return nil\n    end\n    local plucked_value = smallest_value\n\
    \    local plucked_index = smallest_index\n    for i = 1, #arr do\n        if\
    \ arr[i].value == plucked_value then\n            if arr[i].index > plucked_index\
    \ then\n                plucked_value = arr[i].value\n                plucked_index\
    \ = arr[i].index\n            end\n        end\n    end\n    return { value =\
    \ plucked_value, index = plucked_index }\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkglfb3qp.lua:22:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpkglfb3qp.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpkglfb3qp.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = nil\n    local smallest_index = nil\n    local smallest_even_value = nil\n\
    \    for i = 1, #arr do\n        if arr[i].value % 2 == 0 then\n            if\
    \ smallest_value == nil then\n                smallest_value = arr[i].value\n\
    \                smallest_index = i\n            elseif smallest_value < arr[i].value\
    \ then\n                smallest_value = arr[i].value\n                smallest_index\
    \ = i\n            end\n        end\n    end\n    if smallest_value == nil then\n\
    \        return nil\n    end\n    if smallest_even_value==nil then\n        smallest_even_value\
    \ = smallest_value\n    end\n    if smallest_index == nil then\n        smallest_index\
    \ = smallest_index\n    end\n    return smallest_value, smallest_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc43nxb9h.lua:23:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpc43nxb9h.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpc43nxb9h.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugcntxju.lua:37: ''end'' expected (to close ''function'' at
    line 18) near <eof>

    '
  stdout: ''
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    local index = 1\n    for i = 1, #arr\
    \ do\n        if arr[i] < smallest_value then\n            smallest_value = arr[i]\n\
    \            smallest_index = index\n        end\n        index = index + 1\n\
    \    end\n    if smallest_value == 0 then\n        return nil\n    end\n    local\
    \ smallest_value_even = smallest_value % 2\n    local smallest_value_odd = smallest_value\
    \ / 2\n    if smallest_value_even < smallest_value_odd then\n        return smallest_value_even,\
    \ smallest_index\n    else\n        return smallest_value_odd, smallest_index\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o4padi1.lua:44:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmp3o4padi1.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    for i = 1, #arr do\n        if arr[i]\
    \ % 2 == 0 then\n            if smalest_value == 0 then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            elseif smalest_value\
    \ < arr[i] then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            end\n        end\n    end\n    if smalest_value == 0 then\n\
    \        return nil\n    end\n    return smalest_value, smalest_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjajxfc0.lua:41:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpmjajxfc0.lua:41: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\
    \ = 0\n  local smallest_index = 0\n  local results = {}\n  for i = 1, #arr do\n\
    \    if arr[i] % 2 == 0 then\n      if smallest_value == 0 then\n        smallest_value\
    \ = arr[i]\n        smallest_index = i\n      elseif smallest_value < arr[i] then\n\
    \        smallest_value = arr[i]\n        smallest_index = i\n      end\n    end\n\
    \  end\n  if smallest_value == 0 then\n    return nil\n  elseif smallest_index\
    \ == #arr then\n    return smallest_value, smallest_index\n  else\n    results[#results\
    \ + 1] = smallest_value, smallest_index\n    return results\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyeq4_bjc.lua:46:\
    \ expected: {2, 1}\nactual: {4}\nstack traceback:\n\t/tmp/tmpyeq4_bjc.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    local index = 1\n    for i = 1, #arr\
    \ do\n        if arr[i] < smallest_value then\n            smallest_value = arr[i]\n\
    \            smallest_index = index\n        end\n        index = index + 1\n\
    \    end\n    if smallest_value == 0 then\n        return nil\n    end\n    if\
    \ smallest_index == #arr then\n        return smallest_value, smallest_index\n\
    \    end\n    local smallest_even_value = smallest_value % 2\n    local smallest_even_index\
    \ = smallest_index\n    for i = 1, #arr do\n        if arr[i] < smallest_even_value\
    \ then\n            smallest_even_value = arr[i]\n            smallest_even_index\
    \ = i\n        end\n    end\n    return smallest_even_value,smallest_even_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1d3l5_3u.lua:49:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmp1d3l5_3u.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014679
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n-- Example 2:\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n-- Example 3:\n-- Example 4:\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = nil, nil\n    for i = 1, #arr do\n        if arr[i].value %\
    \ 2 == 0 then\n            if smalest_value == nil then\n                smalest_value\
    \ = arr[i].value\n                smalest_index = i\n            elseif smalest_value\
    \ < arr[i].value then\n                smalest_value = arr[i].value\n        \
    \        smalest_index = i\n            end\n        end\n    end\n    if smalest_value\
    \ == nil then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1pat0j0_.lua:21:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmp1pat0j0_.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp1pat0j0_.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014679
