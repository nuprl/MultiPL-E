name: HumanEval_21_rescale_to_unit
language: lua
prompt: "-- Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n-- such that the smallest number will become 0 and the largest\
  \ will become 1\nlocal function rescale_to_unit(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
  \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
  \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
  \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0,\
  \ 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0,\
  \ 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local min = table.min(numbers)\n  local max = table.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = numbers[i] - min\n    numbers[i] *= scale\n  end\nend", "  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = max - min\n  local new_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    new_numbers[#new_numbers +\
    \ 1] = number - min * scale\n  end\n  return new_numbers\nend", "  local min =\
    \ table.min(numbers)\n  local max = table.max(numbers)\n  local scale = (max -\
    \ min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = min + (numbers[i]\
    \ - min) * scale\n  end\nend", "  local min = table.min(numbers)\n  local max\
    \ = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  for _,\
    \ v in ipairs(numbers) do\n    v = v + min - min * scale\n  end\nend", "  local\
    \ min = table.min(numbers)\n  local max = table.max(numbers)\n  local scale =\
    \ (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = min\
    \ + (numbers[i] - min) * scale\n  end\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n    numbers[i] =\
    \ numbers[i] * scale\n  end\nend", "  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = numbers[i] - min + scale\n  end\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i] = min\
    \ + scale * (numbers[i] - min)\n  end\n  return new_numbers\nend", "  local min\
    \ = math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max -\
    \ min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ - min\n    numbers[i] *= scale\n  end\nend", "  local min = numbers[1]\n  local\
    \ max = numbers[1]\n  for i = 2, #numbers do\n    min = math.min(min, numbers[i])\n\
    \    max = math.max(max, numbers[i])\n  end\n  return min, max\nend", "  local\
    \ min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max\
    \ - min) / 2.0\n  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i]\
    \ = min + scale * numbers[i]\n  end\n  return new_numbers\nend", "  local min\
    \ = table.min(numbers)\n  local max = table.max(numbers)\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = min + (numbers[i]\
    \ - min) * scale\n  end\nend", "  local min = math.min(numbers)\n  local max =\
    \ math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  local new_numbers\
    \ = {}\n  for i = 1, #numbers do\n    new_numbers[i] = min + scale * i\n  end\n\
    \  return new_numbers\nend", "  local min = table.min(numbers)\n  local max =\
    \ table.max(numbers)\n  local rescaled = { min = min, max = max }\n  for _, value\
    \ in ipairs(numbers) do\n    rescaled.min = math.min(rescaled.min, value)\n  \
    \  rescaled.max = math.max(rescaled.max, value)\n  end\n  return rescaled\nend",
  "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * i\n  end\n  return result\nend", "  local min =\
    \ math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max - min)\
    \ / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n    result[i]\
    \ = min + scale * i\n  end\n  return result\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\nend", "  local min = numbers[1]\n  local max = numbers[1]\n  for i = 2,\
    \ #numbers do\n    min = math.min(min, numbers[i])\n    max = math.max(max, numbers[i])\n\
    \  end\n  return function(x)\n    return (x - min) / (max - min)\n  end\nend",
  "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local new_numbers\
    \ = {}\n  for i = 1, #numbers do\n    new_numbers[i] = math.min(math.max(numbers[i],\
    \ min), max)\n  end\n  return new_numbers\nend", "  local min = numbers[1]\n \
    \ local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = min + scale * (numbers[i] - min)\n  end\n  return numbers\nend", "  local\
    \ min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  local new_numbers = {}\n  for i = 1, #numbers do\n\
    \    new_numbers[i] = min + (numbers[i] - min) * scale\n  end\n  return new_numbers\n\
    end", "  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = min\
    \ + scale * (numbers[i] - min)\n  end\nend", "  local min = numbers[1]\n  local\
    \ max = numbers[1]\n  for i = 2, #numbers do\n    min = math.min(min, numbers[i])\n\
    \    max = math.max(max, numbers[i])\n  end\n  return function(x)\n    return\
    \ (x - min) / (max - min)\n  end\nend", "  local min = table.min(numbers)\n  local\
    \ max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  for\
    \ i = 1, #numbers do\n    numbers[i] = min + (numbers[i] - min) * scale\n  end\n\
    end", "  local min = numbers[1]\n  local max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    min = math.min(min, numbers[i])\n    max = math.max(max, numbers[i])\n\
    \  end\n  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n\
    \    numbers[i] = numbers[i] + min * scale\n  end\nend", "  local min = numbers[1]\n\
    \  local max = numbers[1]\n  for i = 2, #numbers do\n    min = math.min(min, numbers[i])\n\
    \    max = math.max(max, numbers[i])\n  end\n  local scale = (max - min) / (#numbers\
    \ - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n    numbers[i]\
    \ = numbers[i] * scale\n  end\n  return numbers\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  if min == max then\n    return numbers\n\
    \  else\n    local scale = (max - min) / (#numbers - 1)\n    return table.concat(numbers,\
    \ scale):map(function(x)\n      return (x - min) / scale\n    end)\n  end\nend",
  "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local scale\
    \ = 1.0\n  if min == max then\n    return numbers\n  elseif min == 0 then\n  \
    \  scale = 1.0 / max\n  elseif max == 1 then\n    scale = 1.0 / min\n  end\n \
    \ for _, value in ipairs(numbers) do\n    value *= scale\n  end\n  return numbers\n\
    end", "  local min = numbers[1]\n  local max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    min = math.min(min, numbers[i])\n    max = math.max(max, numbers[i])\n\
    \  end\n  local rescaled = {}\n  for i = 1, #numbers do\n    rescaled[i] = (numbers[i]\
    \ - min) / (max - min)\n  end\n  return rescaled\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = numbers[i] - min\n  end\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ * scale\n  end\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = min + scale * (numbers[i] - min)\n  end\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i] = min\
    \ + scale * (numbers[i] - min)\n  end\n  return new_numbers\nend", "  local min\
    \ = table.min(numbers)\n  local max = table.max(numbers)\n  if min == max then\n\
    \    return numbers\n  else\n    local scale = (max - min) / (#numbers - 1)\n\
    \    return table.concat(numbers, scale):gsub(\"%z\", \"\")\n  end\nend", "  local\
    \ min = table.min(numbers)\n  local max = table.max(numbers)\n  local scale =\
    \ (max - min) / (#numbers - 1)\n  local new_numbers = {}\n  for i = 1, #numbers\
    \ do\n    new_numbers[i] = min + (numbers[i] - min) * scale\n  end\n  return new_numbers\n\
    end", "  if #numbers < 2 then\n    return numbers\n  end\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\n  return numbers\nend", "  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = min + scale * (numbers[i] - min)\n  end\n  return numbers\nend", "  local\
    \ min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ - min\n    numbers[i] *= scale\n  end\nend", "  local min = numbers[1]\n  local\
    \ max = numbers[1]\n  for i = 2, #numbers do\n    min = math.min(min, numbers[i])\n\
    \    max = math.max(max, numbers[i])\n  end\n  local scale = (max - min) / (max\
    \ - min)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n    numbers[i]\
    \ *= scale\n  end\n  return numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for _, value in pairs(numbers) do\n    numbers[value] = min + scale * (value\
    \ - min)\n  end\n  return numbers\nend", "  local min = numbers[1]\n  local max\
    \ = numbers[#numbers]\n  local new_numbers = {}\n  for _, number in ipairs(numbers)\
    \ do\n    local new_number = (number - min) / (max - min)\n    new_numbers[#new_numbers\
    \ + 1] = new_number\n  end\n  return new_numbers\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = 1 / (max - min)\n  for _, value\
    \ in pairs(numbers) do\n    numbers[value] = numbers[value] * scale\n  end\nend",
  "  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = min + scale\
    \ * (numbers[i] - min)\n  end\nend", "  local min = table.min(numbers)\n  local\
    \ max = table.max(numbers)\n  if min == max then return numbers end\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = min\
    \ + (numbers[i] - min) * scale\n  end\n  return numbers\nend", "  local min =\
    \ math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max - min)\
    \ / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n\
    \    numbers[i] = numbers[i] * scale\n  end\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] * scale\n  end\nend", " \
    \ local min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + (numbers[i] - min) * scale\n  end\n  return result\nend",
  "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ - min + scale\n  end\nend", "  local min = table.min(numbers)\n  local max =\
    \ table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  for i =\
    \ 1, #numbers do\n    numbers[i] = min + (numbers[i] - min) * scale\n  end\n \
    \ return numbers\nend", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = min + scale * (numbers[i] - min)\n  end\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + (numbers[i] - min) * scale\n\
    \  end\n  return numbers\nend", "  local min = table.min(numbers)\n  local max\
    \ = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  for i\
    \ = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n  end\n\
    end", "  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = min\
    \ + scale * (numbers[i] - min)\n  end\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + (numbers[i] - min) * scale\n\
    \  end\nend", "  local min = numbers[1]\n  local max = numbers[1]\n  for i = 2,\
    \ #numbers do\n    min = math.min(min, numbers[i])\n    max = math.max(max, numbers[i])\n\
    \  end\n  return min, max\nend", "  local min = numbers[1]\n  local max = numbers[1]\n\
    \  for i = 2, #numbers do\n    min = math.min(min, numbers[i])\n    max = math.max(max,\
    \ numbers[i])\n  end\n  local new_min = min - math.min(min, max)\n  local new_max\
    \ = max - math.max(min, max)\n  local new_numbers = {}\n  for i = 1, #numbers\
    \ do\n    new_numbers[i] = new_min + (numbers[i] - min) * (new_max - new_min)\
    \ / (max - min)\n  end\n  return new_numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\nend", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = numbers[i] - min\n    numbers[i] *= scale\n  end\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + (numbers[i] - min) * scale\n\
    \  end\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = numbers[i] - min\n  end\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ * scale\n  end\nend", "  local min = numbers[1]\n  local max = numbers[1]\n\
    \  for i = 2, #numbers do\n    min = math.min(min, numbers[i])\n    max = math.max(max,\
    \ numbers[i])\n  end\n  return function(x)\n    return (x - min) / (max - min)\n\
    \  end\nend", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n\
    \  local rescaled = { min = min, max = max }\n  for i = 1, #numbers do\n    rescaled.min\
    \ = math.min(rescaled.min, numbers[i])\n    rescaled.max = math.max(rescaled.max,\
    \ numbers[i])\n  end\n  return rescaled\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i] = min\
    \ + scale * (numbers[i] - min)\n  end\n  return new_numbers\nend", "  local min\
    \ = numbers[1]\n  local max = numbers[1]\n  for i = 2, #numbers do\n    min =\
    \ math.min(min, numbers[i])\n    max = math.max(max, numbers[i])\n  end\n  return\
    \ min, max\nend", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = min + scale * (numbers[i] - min)\n  end\nend", "  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] * scale\n  end\nend", " \
    \ local min = table.min(numbers)\n  local max = table.max(numbers)\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = min\
    \ + (numbers[i] - min) * scale\n  end\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + (numbers[i] - min) * scale\n\
    \  end\nend", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = min + (numbers[i] - min) * scale\n  end\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for _, value in ipairs(numbers) do\n    local new_value = value * scale\n \
    \   if new_value < min then\n      new_value = min\n    end\n    if new_value\
    \ > max then\n      new_value = max\n    end\n    numbers[#numbers + 1] = new_value\n\
    \  end\n  return numbers\nend", "  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = min + scale * (numbers[i] - min)\n  end\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n    numbers[i] *=\
    \ scale\n  end\nend", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n\
    \  if min == max then\n    return numbers\n  else\n    local scale = (max - min)\
    \ / (#numbers - 1)\n    return table.concat(numbers, scale):gsub(\"%w+\", function(x)\n\
    \      return x:lower() .. \"0\"\n    end)\n  end\nend", "  if #numbers < 2 then\n\
    \    return numbers\n  end\n  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local new_numbers = {}\n  for\
    \ i = 1, #numbers do\n    new_numbers[i] = min + scale * i\n  end\n  return new_numbers\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = (max - min) / 2.0\n  local result = {}\n  for _, v in ipairs(numbers)\
    \ do\n    table.insert(result, v - min + scale)\n  end\n  return result\nend",
  "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ - min + scale\n  end\nend", "  local min = math.min(numbers)\n  local max =\
    \ math.max(numbers)\n  local rescaled = {}\n  for i = 1, #numbers do\n    rescaled[i]\
    \ = (numbers[i] - min) / (max - min)\n  end\n  return rescaled\nend", "  local\
    \ min = table.min(numbers)\n  local max = table.max(numbers)\n  local scale =\
    \ (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = min\
    \ + (numbers[i] - min) * scale\n  end\nend", "  if #numbers < 2 then\n    return\
    \ numbers\n  end", "  local min = numbers[1]\n  local max = numbers[1]\n  for\
    \ i = 2, #numbers do\n    min = math.min(min, numbers[i])\n    max = math.max(max,\
    \ numbers[i])\n  end\n  local scale = (max - min) / (#numbers - 1)\n  for i =\
    \ 1, #numbers do\n    numbers[i] = numbers[i] - min * scale\n  end\nend", "  local\
    \ min = table.min(numbers)\n  local max = table.max(numbers)\n  local scale =\
    \ (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = min\
    \ + (numbers[i] - min) * scale\n  end\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local rescaled_numbers = {}\n  for _, number\
    \ in ipairs(numbers) do\n    rescaled_numbers[number] = math.min(math.max(number,\
    \ min), max)\n  end\n  return rescaled_numbers\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] * scale\n  end\nend", " \
    \ local min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = min\
    \ + (numbers[i] - min) * scale\n  end\nend", "  local min = numbers[1]\n  local\
    \ max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n  for\
    \ i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n  end\n  for i = 1, #numbers\
    \ do\n    numbers[i] = numbers[i] * scale\n  end\nend", "  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\nend", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = min + (numbers[i] - min) * scale\n  end\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n    numbers[i] =\
    \ numbers[i] * scale\n  end\nend", "  local min = math.min(numbers)\n  local max\
    \ = math.max(numbers)\n  if min == max then\n    return numbers\n  else\n    local\
    \ scale = (max - min) / (#numbers - 1)\n    return table.unpack(numbers, 1, #numbers\
    \ - 1) * scale + min\n  end\nend", "  local min = table.min(numbers)\n  local\
    \ max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  for\
    \ i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n  end\n\
    \  return numbers\nend", "  if #numbers == 1 then\n    return numbers\n  end\n\
    \  local min = numbers[1]\n  local max = numbers[1]\n  for i = 2, #numbers do\n\
    \    min = math.min(min, numbers[i])\n    max = math.max(max, numbers[i])\n  end\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + (numbers[i] - min) * scale\n  end\n  return\
    \ result\nend", "  local min = numbers[1]\n  local max = numbers[1]\n  for i =\
    \ 2, #numbers do\n    min = math.min(min, numbers[i])\n    max = math.max(max,\
    \ numbers[i])\n  end\n  return function(x)\n    return (x - min) / (max - min)\n\
    \  end\nend", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = min + (numbers[i] - min) * scale\n  end\n  return numbers\nend", "  local\
    \ min = numbers[1]\n  local max = numbers[2]\n  local scale = (max - min) / (#numbers\
    \ - 1)\n  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] -\
    \ min)\n  end\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = numbers[i] - min + scale\n  end\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i] = min\
    \ + scale * i\n  end\n  return new_numbers\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local rescaled = { min = min, max = max }\n\
    \  for i = 1, #numbers do\n    rescaled.min = math.min(rescaled.min, numbers[i])\n\
    \    rescaled.max = math.max(rescaled.max, numbers[i])\n  end\n  return rescaled\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = numbers[i] - min\n    numbers[i] = numbers[i] * scale\n  end\nend", "  local\
    \ min = numbers[1]\n  local max = numbers[1]\n  for i = 2, #numbers do\n    min\
    \ = math.min(min, numbers[i])\n    max = math.max(max, numbers[i])\n  end\n  return\
    \ min, max\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = numbers[i] * scale\n  end\nend", "  local min = numbers[1]\n  local max =\
    \ numbers[#numbers]", "  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = min + scale * (numbers[i] - min)\n  end\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  if min == max then\n    return numbers\n\
    \  else\n    local scale = (max - min) / (#numbers - 1)\n    return table.concat(numbers,\
    \ scale):gsub(\"%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d",
  "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale\
    \ = (max - min) / 2.0\n  local new_numbers = {}\n  for _, value in ipairs(numbers)\
    \ do\n    new_numbers[value] = min + scale * value\n  end\n  return new_numbers\n\
    end", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = min + scale * (numbers[i] - min)\n  end\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\n  return numbers\nend", "  local min = table.min(numbers)\n  local max\
    \ = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  for i\
    \ = 1, #numbers do\n    numbers[i] = min + (numbers[i] - min) * scale\n  end\n\
    end", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = numbers[i] - min\n  end\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ * scale\n  end\nend", "  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = min + scale * (numbers[i] - min)\n  end\n  return numbers\nend", "  local\
    \ min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ - min + scale\n  end\nend", "  local min = table.min(numbers)\n  local max =\
    \ table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  for i =\
    \ 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n  end\nend",
  "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ - min\n    numbers[i] *= scale\n  end\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\nend", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = min + (numbers[i] - min) * scale\n  end\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\n  return numbers\nend", "  local min = table.min(numbers)\n  local max\
    \ = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  for i\
    \ = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n  end\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = min + (numbers[i] - min) * scale\n  end\n  return numbers\nend", "  if #numbers\
    \ < 2 then\n    return numbers\n  end", "  local min = numbers[1]\n  local max\
    \ = numbers[1]\n  for i = 2, #numbers do\n    min = math.min(min, numbers[i])\n\
    \    max = math.max(max, numbers[i])\n  end\n  return function(x)\n    return\
    \ (x - min) / (max - min)\n  end\nend", "  local min = numbers[1]\n  local max\
    \ = numbers[2]\n  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers\
    \ do\n    numbers[i] = min + scale * (numbers[i] - min)\n  end\nend", "  local\
    \ min = table.min(numbers)\n  local max = table.max(numbers)\n  local scale =\
    \ (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = min\
    \ + scale * (numbers[i] - min)\n  end\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n  end\n  for i =\
    \ 1, #numbers do\n    numbers[i] = numbers[i] * scale\n  end\nend", "  if #numbers\
    \ < 2 then\n    return numbers\n  end", "  local min = table.min(numbers)\n  local\
    \ max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  local\
    \ new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i] = min + (numbers[i]\
    \ - min) * scale\n  end\n  return new_numbers\nend", "  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\nend", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = min + scale * (numbers[i] - min)\n  end\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend", "  local min = numbers[1]\n\
    \  local max = numbers[1]\n  for i = 2, #numbers do\n    min = math.min(min, numbers[i])\n\
    \    max = math.max(max, numbers[i])\n  end\n  return min, max\nend", "  local\
    \ min = numbers[1]\n  local max = numbers[1]\n  for i = 2, #numbers do\n    min\
    \ = math.min(min, numbers[i])\n    max = math.max(max, numbers[i])\n  end\n  return\
    \ { min = min, max = max }\nend", "  local min = math.min(numbers)\n  local max\
    \ = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  for i =\
    \ 1, #numbers do\n    numbers[i] = numbers[i] * scale\n  end\nend", "  local min\
    \ = numbers[1]\n  local max = numbers[1]\n  for i = 2, #numbers do\n    min =\
    \ math.min(min, numbers[i])\n    max = math.max(max, numbers[i])\n  end\n  return\
    \ function(x)\n    return (x - min) / (max - min)\n  end\nend", "  local min =\
    \ table.min(numbers)\n  local max = table.max(numbers)\n  local scale = (max -\
    \ min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = min + (numbers[i]\
    \ - min) * scale\n  end\nend", "  local min = numbers[1]\n  local max = numbers[1]\n\
    \  for i = 2, #numbers do\n    min = math.min(min, numbers[i])\n    max = math.max(max,\
    \ numbers[i])\n  end\n  return function(x)\n    return (x - min) / (max - min)\n\
    \  end\nend", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n\
    \  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n    new_numbers[number]\
    \ = ((number - min) / (max - min))\n  end\n  return new_numbers\nend", "  local\
    \ min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max - min)\
    \ / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i]\
    \ - min)\n  end\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * i\n  end\n  return result\nend",
  "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = min\
    \ + scale * (numbers[i] - min)\n  end\n  return numbers\nend", "  local min =\
    \ table.min(numbers)\n  local max = table.max(numbers)\n  local scale = (max -\
    \ min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = min + (numbers[i]\
    \ - min) * scale\n  end\nend", "  local min = numbers[1]\n  local max = numbers[1]\n\
    \  for i = 2, #numbers do\n    min = math.min(min, numbers[i])\n    max = math.max(max,\
    \ numbers[i])\n  end\n  return function(x)\n    return (x - min) / (max - min)\n\
    \  end\nend", "  local min = numbers[1]\n  local max = numbers[2]\n  local new_min\
    \ = min * 0.\n  local new_max = max * 1.\n  for _, number in ipairs(numbers) do\n\
    \    if number < min then\n      new_min = number\n    elseif number > max then\n\
    \      new_max = number\n    end\n  end\n  return new_min, new_max\nend", "  local\
    \ min = numbers[1]\n  local max = numbers[1]\n  for i = 2, #numbers do\n    min\
    \ = math.min(min, numbers[i])\n    max = math.max(max, numbers[i])\n  end\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = numbers[i] - min\n  end\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ * scale\n  end\nend", "  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = min + scale * (numbers[i] - min)\n  end\nend", "  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = numbers[i] - min\n    numbers[i] *= scale\n  end\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local rescaled = {}\n  for i = 1, #numbers\
    \ do\n    rescaled[i] = (numbers[i] - min) / (max - min)\n  end\n  return rescaled\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = numbers[i] - min\n  end\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ * scale\n  end\nend", "  local min = numbers[1]\n  local max = numbers[2]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = min + scale * (numbers[i] - min)\n  end\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] * scale\n  end\n  return\
    \ numbers\nend", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = min + scale * (numbers[i] - min)\n  end\nend", "  local min = numbers[1]\n\
    \  local max = numbers[1]\n  for i = 2, #numbers do\n    min = math.min(min, numbers[i])\n\
    \    max = math.max(max, numbers[i])\n  end\n  local scale = (max - min) / (#numbers\
    \ - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n  end\n \
    \ local new_min = min - scale\n  local new_max = max + scale\n  for i = 1, #numbers\
    \ do\n    numbers[i] = numbers[i] * scale + new_min\n  end\nend", "  local min\
    \ = table.min(numbers)\n  local max = table.max(numbers)\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = min + (numbers[i]\
    \ - min) * scale\n  end\nend", "  local min = table.min(numbers)\n  local max\
    \ = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  for i\
    \ = 1, #numbers do\n    numbers[i] = numbers[i] - min\n  end\n  for i = 1, #numbers\
    \ do\n    numbers[i] = numbers[i] * scale\n  end\n  return numbers\nend", "  local\
    \ min = table.min(numbers)\n  local max = table.max(numbers)\n  local new_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    new_numbers[number] = math.min(math.max(number,\
    \ min), max)\n  end\n  return new_numbers\nend", "  local min = numbers[1]\n \
    \ local max = numbers[#numbers]\n  local new_min = min - min % 1\n  local new_max\
    \ = max + 1\n  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n\
    \    new_numbers[#new_numbers + 1] = number - new_min\n  end\n  return new_numbers\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = min + scale * (numbers[i] - min)\n  end\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + (numbers[i] - min) * scale\n\
    \  end\nend", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n\
    \  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n    new_numbers[math.floor((number\
    \ - min) / (max - min))] = number\n  end\n  return new_numbers\nend", "  local\
    \ min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n   \
    \ result[i] = min + scale * i\n  end\n  return result\nend", "  local min = numbers[1]\n\
    \  local max = numbers[1]\n  for i = 2, #numbers do\n    min = math.min(min, numbers[i])\n\
    \    max = math.max(max, numbers[i])\n  end\n  return function(x)\n    return\
    \ (x - min) / (max - min)\n  end\nend", "  local min = math.min(numbers)\n  local\
    \ max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  for\
    \ i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n  end\n  for i = 1, #numbers\
    \ do\n    numbers[i] = numbers[i] * scale\n  end\nend", "  local min = numbers[1]\n\
    \  local max = numbers[1]\n  for i = 2, #numbers do\n    min = math.min(min, numbers[i])\n\
    \    max = math.max(max, numbers[i])\n  end\n  return function(x)\n    if x >\
    \ max or x < min then\n      return 0\n    else\n      return (x - min) / (max\
    \ - min)\n    end\n  end\nend", "  local min = table.min(numbers)\n  local max\
    \ = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  for i\
    \ = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n  end\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = min + scale * (numbers[i] - min)\n  end\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n  end\n  for i =\
    \ 1, #numbers do\n    numbers[i] = numbers[i] * scale\n  end\nend", "  local min\
    \ = numbers[1]\n  local max = numbers[1]\n  for i = 2, #numbers do\n    min =\
    \ math.min(min, numbers[i])\n    max = math.max(max, numbers[i])\n  end\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = numbers[i] - min\n  end\n  local new_min = min - scale * #numbers\n  local\
    \ new_max = max + scale * #numbers\n  local new_numbers = {}\n  for i = 1, #numbers\
    \ do\n    new_numbers[i] = new_min + (numbers[i] - min) * scale\n  end\n  return\
    \ new_numbers\nend", "  local min = numbers[1]\n  local max = numbers[1]\n  for\
    \ i = 2, #numbers do\n    min = math.min(min, numbers[i])\n    max = math.max(max,\
    \ numbers[i])\n  end\n  local new_min = min - min%1\n  local new_max = max - max%1\n\
    \  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i] = new_min\
    \ + (numbers[i] - min)/(new_max - new_min)*(new_max - new_min)\n  end\n  return\
    \ new_numbers\nend", "  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = numbers[i] - min + scale\n  end\nend", "  local min = numbers[1]\n  local\
    \ max = numbers[#numbers]", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * i\n  end\n  return result\nend",
  "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ - min\n    numbers[i] *= scale\n  end\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n  end\n  for i =\
    \ 1, #numbers do\n    numbers[i] = numbers[i] * scale\n  end\nend", "  local min\
    \ = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max - min) /\
    \ (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n\
    \    numbers[i] = numbers[i] * scale\n  end\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + (numbers[i] - min) * scale\n\
    \  end\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local scale = (max - min) / 2.0\n  local new_numbers = {}\n  for i = 1, #numbers\
    \ do\n    new_numbers[i] = min + scale * numbers[i]\n  end\n  return new_numbers\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ rescaled = { min = min, max = max }\n  for i = 1, #numbers do\n    rescaled.min\
    \ = math.min(rescaled.min, numbers[i])\n    rescaled.max = math.max(rescaled.max,\
    \ numbers[i])\n  end\n  return rescaled\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + (numbers[i] - min) * scale\n\
    \  end\n  return numbers\nend", "  local min = table.min(numbers)\n  local max\
    \ = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  for i\
    \ = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n  end\n\
    end", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  local new_numbers = {}\n  for i = 1,\
    \ #numbers do\n    new_numbers[i] = min + scale * i\n  end\n  return new_numbers\n\
    end", "  local min = numbers[1]\n  local max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    min = math.min(min, numbers[i])\n    max = math.max(max, numbers[i])\n\
    \  end\n  return function(x)\n    return (x - min) / (max - min)\n  end\nend",
  "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ - min\n    numbers[i] = numbers[i] * scale\n  end\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local new_numbers = {}\n  for _, number in\
    \ ipairs(numbers) do\n    new_numbers[number] = math.min(math.max(number, min),\
    \ max)\n  end\n  return new_numbers\nend", "  local min = numbers[1]\n  local\
    \ max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n  for\
    \ i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n  end\n\
    end", "  local min = numbers[1]\n  local max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    min = math.min(min, numbers[i])\n    max = math.max(max, numbers[i])\n\
    \  end\n  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n\
    \    numbers[i] = numbers[i] - min\n  end\n  for i = 1, #numbers do\n    numbers[i]\
    \ = numbers[i] * scale\n  end\nend", "  local min = math.min(numbers)\n  local\
    \ max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  for\
    \ i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n    numbers[i] = numbers[i]\
    \ * scale\n  end\nend", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = min + (numbers[i] - min) * scale\n  end\nend", "  local min = numbers[1]\n\
    \  local max = numbers[2]\n  local scale = (max - min) / (#numbers - 1)\n  for\
    \ i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n  end\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers\
    \ do\n    result[i] = min + scale * i\n  end\n  return result\nend", "  local\
    \ min = numbers[1]\n  local max = numbers[1]\n  for i = 2, #numbers do\n    min\
    \ = math.min(min, numbers[i])\n    max = math.max(max, numbers[i])\n  end\n  return\
    \ min, max\nend", "  local min = numbers[1]\n  local max = numbers[1]\n  for i\
    \ = 2, #numbers do\n    min = math.min(min, numbers[i])\n    max = math.max(max,\
    \ numbers[i])\n  end\n  return function(x)\n    return (x - min) / (max - min)\n\
    \  end\nend", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = numbers[i] - min\n    numbers[i] = numbers[i] * scale\n  end\n  return numbers\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = numbers[i] - min\n    numbers[i] *= scale\n  end\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min + scale\n  end\n\
    end", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = min + scale * (numbers[i] - min)\n  end\nend", "  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\n  return numbers\nend", "  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = min + scale * (numbers[i] - min)\n  end\n  return numbers\nend", "  local\
    \ min = table.min(numbers)\n  local max = table.max(numbers)\n  local scale =\
    \ (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ - min\n    numbers[i] = numbers[i] * scale\n  end\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n  end\n  for i =\
    \ 1, #numbers do\n    numbers[i] = numbers[i] * scale\n  end\nend", "  local min\
    \ = table.min(numbers)\n  local max = table.max(numbers)\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ - min\n    numbers[i] *= scale\n  end\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + (numbers[i] - min) * scale\n\
    \  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
