language: lua
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  for i = 1, #lst do\n    local j = i - 1\n    while\
    \ j > 0 and lst[j] > lst[i] do\n      strange_lst[i + 1] = lst[j]\n      j = j\
    \ - 1\n    end\n    strange_lst[i + 1] = lst[i]\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66mjwps7.lua:21:\
    \ expected: {1, 4, 2, 3}\nactual: {2=1, 3=2, 4=3, 5=4}\nstack traceback:\n\t/tmp/tmp66mjwps7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum\
    \ = sorted_list[1]\n  for i = 2, #sorted_list do\n    if minimum > sorted_list[i]\
    \ then\n      minimum = sorted_list[i]\n    end\n    if maximum < sorted_list[i]\
    \ then\n      maximum = sorted_list[i]\n    end\n  end\n  -- Swap the minimum\
    \ and maximum\n  sorted_list[#sorted_list] = minimum\n  sorted_list[#sorted_list\
    \ + 1] = maximum\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4wkskooj.lua:26:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 1, 4}\nstack traceback:\n\t/tmp/tmp4wkskooj.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_val = lst[1]\n  local max_val = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_val then\n      min_val = lst[i]\n\
    \    elseif lst[i] > max_val then\n      max_val = lst[i]\n    end\n  end\n  for\
    \ i = 1, #lst do\n    if lst[i] < min_val then\n      table.insert(strange_lst,\
    \ min_val)\n      min_val = lst[i]\n    elseif lst[i] > max_val then\n      table.insert(strange_lst,\
    \ max_val)\n      max_val = lst[i]\n    end\n  end\n  table.insert(strange_lst,\
    \ max_val)\n  table.insert(strange_lst, min_val)\n  return strange_lst\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpirpu7i02.lua:33:\
    \ expected: {1, 4, 2, 3}\nactual: {4, 1}\nstack traceback:\n\t/tmp/tmpirpu7i02.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = strange_lst[1]\n  local max_value\
    \ = strange_lst[#strange_lst]\n  for i = 2, #strange_lst do\n    if strange_lst[i]\
    \ < min_value then\n      min_value = strange_lst[i]\n    end\n    if strange_lst[i]\
    \ > max_value then\n      max_value = strange_lst[i]\n    end\n  end\n  strange_lst[#strange_lst]\
    \ = max_value\n  strange_lst[1] = min_value\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdj8mk2l_.lua:25:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpdj8mk2l_.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum or lst[i]\n    maximum = maximum\
    \ or lst[i]\n    if minimum > maximum then\n      strange_lst = table.concat({minimum,\
    \ maximum}, \" \")\n      minimum = maximum\n      maximum = minimum\n    else\n\
    \      minimum = minimum or lst[i]\n      maximum = maximum or lst[i]\n    end\n\
    \  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9o5pf5iu.lua:27:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp9o5pf5iu.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  strange_lst[1] = min_value\n  strange_lst[#strange_lst+1] = max_value\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[1] = lst[i]\n\
    \    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5zb6omy.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4}\nstack traceback:\n\t/tmp/tmpu5zb6omy.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  for i = #lst, 1, -1 do\n    table.insert(strange_lst,\
    \ lst[i])\n  end\n  table.sort(strange_lst, function(a, b) return a < b end)\n\
    \  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ojyhyti.lua:17:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp_ojyhyti.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum > lst[i] and minimum or lst[i]\n\
    \    maximum = maximum < lst[i] and maximum or lst[i]\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpin1_nr7d.lua:21:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 1, 3, 1, 4, 1}\nstack traceback:\n\t/tmp/tmpin1_nr7d.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      table.insert(strange_lst,\
    \ min_value)\n      min_value = lst[i]\n    elseif lst[i] > max_value then\n \
    \     table.insert(strange_lst, max_value)\n      max_value = lst[i]\n    end\n\
    \  end\n  table.insert(strange_lst, max_value)\n  return strange_lst\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvt1d5uc.lua:32:\
    \ expected: {1, 4, 2, 3}\nactual: {4}\nstack traceback:\n\t/tmp/tmplvt1d5uc.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n    minimum = maximum\n\
    \    maximum = minimum\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7citwunb.lua:27:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 2, 3, 3, 4}\nstack traceback:\n\t/tmp/tmp7citwunb.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  strange_lst[1] = min_value\n  strange_lst[#strange_lst+1] = max_value\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[1] = lst[i]\n\
    \    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5zb6omy.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4}\nstack traceback:\n\t/tmp/tmpu5zb6omy.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum =\
    \ sorted_lst[#sorted_lst]\n  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n\
    \    if value < minimum then\n      minimum = value\n    elseif value > maximum\
    \ then\n      maximum = value\n    end\n  end\n  -- Swap minimum and maximum.\n\
    \  local tmp = minimum\n  minimum = maximum\n  maximum = tmp\n  -- Swap minimum\
    \ and maximum.\n  local tmp = minimum\n  minimum = maximum\n  maximum = tmp\n\
    \  -- Swap minimum and maximum.\n  local tmp = minimum\n  minimum = maximum\n\
    \  maximum = tmp\n  -- Swap minimum and maximum.\n  local tmp = minimum\n  minimum\
    \ = maximum\n  maximum = tmp\n  -- Swap minimum and maximum.\n  local tmp = minimum\n\
    \  minimum = maximum\n  maximum = tmp\n  -- Swap minimum and maximum.\n  local\
    \ tmp = minimum\n  minimum = maximum\n  maximum = tmp\n  -- Swap minimum and maximum.\n\
    \  local tmp = minimum\n  minimum = maximum\n  maximum = tmp\n  -- Swap minimum\
    \ and maximum.\n  local tmp = minimum\n  minimum = maximum\n  maximum = tmp\n\
    \  -- Swap minimum and maximum.\n  local tmp = minimum\n  minimum = maximum\n\
    \  maximum = tmp\n  -- Swap minimum and maximum.\n  local tmp = minimum\n  minimum\
    \ = maximum\n  maximum = tmp\n  -- Swap minimum and maximum.\n  local tmp = minimum\n\
    \  minimum = maximum\n  maximum = tmp\n  -- Swap minimum and maximum.\n  local\
    \ tmp = minimum\n  minimum = maximum\n  maximum = tmp\n  -- Swap minimum and maximum.\n\
    \  local tmp = minimum\n  minimum = maximum\n  maximum = tmp\n  -- Swap minimum\
    \ and maximum.\n  local tmp = minimum\n  minimum = maximum\n  maximum = tmp\n\
    \  -- Swap minimum and maximum.\n  local tmp = minimum\n  minimum = maximum\n\
    \  maximum = tmp\n  -- Swap minimum and maximum.\n  local tmp = minimum\n  minimum\
    \ = maximum\n  maximum = tmp\n  -- Swap minimum and maximum.\n  local tmp = minimum\n\
    \  minimum = maximum\n  maximum = tmp\n  -- Swap minimum and maximum.\n  local\
    \ tmp = minimum\n  minimum = maximum\n  maximum = tmp\n  -- Swap minimum and maximum.\n\
    \  local tmp = minimum\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg4396nyk.lua:107: ''end'' expected (to close ''function''
    at line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  strange_lst[1] = min_value\n  strange_lst[#strange_lst+1] = max_value\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68i6qyz1.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4}\nstack traceback:\n\t/tmp/tmp68i6qyz1.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_val = lst[1]\n  local max_val = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_val then\n      min_val = lst[i]\n\
    \    elseif lst[i] > max_val then\n      max_val = lst[i]\n    end\n  end\n  strange_lst[1]\
    \ = min_val\n  strange_lst[#strange_lst+1] = max_val\n  for i = 2, #lst do\n \
    \   if lst[i] < min_val then\n      strange_lst[#strange_lst+1] = lst[i]\n   \
    \ elseif lst[i] > max_val then\n      strange_lst[1] = lst[i]\n    end\n  end\n\
    \  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4hy9k83.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4}\nstack traceback:\n\t/tmp/tmpy4hy9k83.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    end\n    if lst[i] > max_value then\n      max_value = lst[i]\n    end\n\
    \  end\n  for i = 1, #strange_lst do\n    if strange_lst[i] > max_value then\n\
    \      strange_lst[i] = max_value\n    end\n    if strange_lst[i] < min_value\
    \ then\n      strange_lst[i] = min_value\n    end\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl2obz91b.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpl2obz91b.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  strange_lst[1] = min_value\n  strange_lst[#strange_lst+1] = max_value\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_yfoujj.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4, 4}\nstack traceback:\n\t/tmp/tmps_yfoujj.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum > lst[i] and minimum or lst[i]\n\
    \    maximum = maximum < lst[i] and maximum or lst[i]\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpin1_nr7d.lua:21:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 1, 3, 1, 4, 1}\nstack traceback:\n\t/tmp/tmpin1_nr7d.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n    minimum = maximum\n\
    \    maximum = lst[i]\n  end\n  strange_lst[#strange_lst+1] = minimum\n  strange_lst[#strange_lst+1]\
    \ = maximum\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0cospez.lua:29:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 2, 3, 3, 4, 4, 4}\nstack traceback:\n\
    \t/tmp/tmpj0cospez.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum or lst[i]\n    maximum = maximum\
    \ or lst[i]\n    if minimum > maximum then\n      minimum, maximum = maximum,\
    \ minimum\n    end\n    strange_lst[minimum] = minimum\n    strange_lst[maximum]\
    \ = maximum\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5cgng9zp.lua:24:\
    \ expected: {1, 4, 2, 3}\nactual: {1}\nstack traceback:\n\t/tmp/tmp5cgng9zp.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = { }\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    else\n      strange_lst[#strange_lst+1] = min_value\n      strange_lst[#strange_lst+1]\
    \ = max_value\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplok1u9oi.lua:32:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4, 1, 4, 1, 4, 1, 4}\nstack traceback:\n\
    \t/tmp/tmplok1u9oi.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      table.insert(strange_lst,\
    \ min_value)\n      min_value = lst[i]\n    elseif lst[i] > max_value then\n \
    \     table.insert(strange_lst, max_value)\n      max_value = lst[i]\n    end\n\
    \  end\n  table.insert(strange_lst, max_value)\n  return strange_lst\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvt1d5uc.lua:32:\
    \ expected: {1, 4, 2, 3}\nactual: {4}\nstack traceback:\n\t/tmp/tmplvt1d5uc.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n    minimum = maximum\n\
    \    maximum = lst[i]\n  end\n  strange_lst[#strange_lst+1] = minimum\n  strange_lst[#strange_lst+1]\
    \ = maximum\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0cospez.lua:29:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 2, 3, 3, 4, 4, 4}\nstack traceback:\n\
    \t/tmp/tmpj0cospez.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  strange_lst[1] = min_value\n  strange_lst[#strange_lst+1] = max_value\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[1] = lst[i]\n\
    \    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5zb6omy.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4}\nstack traceback:\n\t/tmp/tmpu5zb6omy.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  local min_value = min_value\n  local max_value = max_value\n  for i = 2, #lst\
    \ do\n    if lst[i] < min_value then\n      strange_lst[i] = min_value\n     \
    \ min_value = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[i]\
    \ = max_value\n      max_value = lst[i]\n    end\n  end\n  strange_lst[1] = min_value\n\
    \  strange_lst[#strange_lst+1] = max_value\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7wegidm3.lua:35:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4, 4}\nstack traceback:\n\t/tmp/tmp7wegidm3.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = strange_lst[1]\n  local max_value\
    \ = strange_lst[#strange_lst]\n  for i = 2, #strange_lst do\n    if strange_lst[i]\
    \ < min_value then\n      min_value = strange_lst[i]\n    end\n    if strange_lst[i]\
    \ > max_value then\n      max_value = strange_lst[i]\n    end\n  end\n  strange_lst[#strange_lst]\
    \ = max_value\n  strange_lst[1] = min_value\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdj8mk2l_.lua:25:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpdj8mk2l_.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n  end\n\
    \  for i = 1, #strange_lst do\n    if minimum > strange_lst[i] then\n      minimum\
    \ = strange_lst[i]\n    end\n    if maximum < strange_lst[i] then\n      maximum\
    \ = strange_lst[i]\n    end\n  end\n  strange_lst[1] = minimum\n  strange_lst[#strange_lst]\
    \ = maximum\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwi4q3pqn.lua:33:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpwi4q3pqn.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      strange_lst[i] =\
    \ min_value\n    elseif lst[i] > max_value then\n      strange_lst[i] = max_value\n\
    \    end\n  end\n  for i = 1, #lst do\n    if lst[i] > max_value then\n      strange_lst[i]\
    \ = max_value\n    end\n  end\n  for i = 1, #lst do\n    if lst[i] < min_value\
    \ then\n      strange_lst[i] = min_value\n    end\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpno8_6iuu.lua:39:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpno8_6iuu.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst + 1]\
    \ = lst[i]\n  end\n  table.sort(sorted_lst, function(a, b) return a < b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_6jnsu__.lua:17:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp_6jnsu__.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  strange_lst[1] = min_value\n  strange_lst[#strange_lst+1] = max_value\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[1] = lst[i]\n\
    \    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx2axuhtb.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4, 4}\nstack traceback:\n\t/tmp/tmpx2axuhtb.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum > lst[i] and minimum or lst[i]\n\
    \    maximum = maximum < lst[i] and maximum or lst[i]\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpin1_nr7d.lua:21:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 1, 3, 1, 4, 1}\nstack traceback:\n\t/tmp/tmpin1_nr7d.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_index = nil\n  local max_index = nil\n\
    \  for i = 1, #lst do\n    if min_index == nil then\n      min_index = i\n   \
    \   max_index = i\n    elseif lst[i] < lst[min_index] then\n      min_index =\
    \ i\n    elseif lst[i] > lst[max_index] then\n      max_index = i\n    end\n \
    \ end\n  for i = 1, #lst do\n    if i == min_index then\n      strange_lst[i]\
    \ = lst[i]\n    elseif i == max_index then\n      strange_lst[i] = lst[i]\n  \
    \  else\n      strange_lst[i] = lst[min_index]\n      strange_lst[i + 1] = lst[max_index]\n\
    \    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsad9ylm2.lua:35:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 1, 1, 4}\nstack traceback:\n\t/tmp/tmpsad9ylm2.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  strange_lst[1] = min_value\n  strange_lst[#strange_lst+1] = max_value\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[1] = lst[i]\n\
    \    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5zb6omy.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4}\nstack traceback:\n\t/tmp/tmpu5zb6omy.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum > lst[i] and minimum or lst[i]\n\
    \    maximum = maximum < lst[i] and maximum or lst[i]\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpin1_nr7d.lua:21:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 1, 3, 1, 4, 1}\nstack traceback:\n\t/tmp/tmpin1_nr7d.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      strange_lst[i] =\
    \ min_value\n    elseif lst[i] > max_value then\n      strange_lst[i] = max_value\n\
    \    end\n  end\n  for i = 1, #lst do\n    if lst[i] > min_value then\n      strange_lst[i]\
    \ = min_value\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pry6wzb.lua:34:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmp3pry6wzb.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_val = lst[1]\n  local max_val = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_val then\n      min_val = lst[i]\n\
    \    elseif lst[i] > max_val then\n      max_val = lst[i]\n    end\n  end\n  for\
    \ i = 1, #lst do\n    if lst[i] < min_val then\n      strange_lst[i] = min_val\n\
    \    elseif lst[i] > max_val then\n      strange_lst[i] = max_val\n    end\n \
    \ end\n  for i = 1, #lst do\n    if lst[i] > max_val then\n      strange_lst[i]\
    \ = max_val\n    end\n  end\n  for i = 1, #lst do\n    if lst[i] < min_val then\n\
    \      strange_lst[i] = min_val\n    end\n  end\n  return strange_lst\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7u5usdak.lua:39:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp7u5usdak.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local strange_lst2 = {}\n  local strange_lst3 =\
    \ {}\n  local strange_lst4 = {}\n  local strange_lst5 = {}\n  local strange_lst6\
    \ = {}\n  local strange_lst7 = {}\n  local strange_lst8 = {}\n  local strange_lst9\
    \ = {}\n  local strange_lst10 = {}\n  local strange_lst11 = {}\n  local strange_lst12\
    \ = {}\n  local strange_lst13 = {}\n  local strange_lst14 = {}\n  local strange_lst15\
    \ = {}\n  local strange_lst16 = {}\n  local strange_lst17 = {}\n  local strange_lst18\
    \ = {}\n  local strange_lst19 = {}\n  local strange_lst20 = {}\n  local strange_lst21\
    \ = {}\n  local strange_lst22 = {}\n  local strange_lst23 = {}\n  local strange_lst24\
    \ = {}\n  local strange_lst25 = {}\n  local strange_lst26 = {}\n  local strange_lst27\
    \ = {}\n  local strange_lst28 = {}\n  local strange_lst29 = {}\n  local strange_lst30\
    \ = {}\n  local strange_lst31 = {}\n  local strange_lst32 = {}\n  local strange_lst33\
    \ = {}\n  local strange_lst34 = {}\n  local strange_lst35 = {}\n  local strange_lst36\
    \ = {}\n  local strange_lst37 = {}\n  local strange_lst38 = {}\n  local strange_lst39\
    \ = {}\n  local strange_lst40 = {}\n  local strange_lst41 = {}\n  local strange_lst42\
    \ = {}\n  local strange_lst43 = {}\n  local strange_lst44 = {}\n  local strange_lst45\
    \ = {}\n  local strange_lst46 = {}\n  local strange_lst47 = {}\n  local strange_lst48\
    \ = {}\n  local strange_lst49 = {}\n  local strange_lst50 = {}\n  local strange_lst51\
    \ = {}\n  local strange_lst52 = {}\n  local strange_lst53 = {}\n  local strange_lst54\
    \ = {}\n  local strange_lst55 = {}\n  local strange_lst56 = \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplu2sixvc.lua:62: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  for i = #lst, 1, -1 do\n    table.insert(strange_lst,\
    \ lst[i])\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiy1uvxh0.lua:16:\
    \ expected: {1, 4, 2, 3}\nactual: {4, 3, 2, 1}\nstack traceback:\n\t/tmp/tmpiy1uvxh0.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local function swap(a, b)\n    local tmp = lst[a]\n    lst[a] = lst[b]\n  \
    \  lst[b] = tmp\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9bnpu7tt.lua:26: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n    minimum = maximum\n\
    \    maximum = lst[i]\n  end\n  strange_lst[#strange_lst+1] = minimum\n  strange_lst[#strange_lst+1]\
    \ = maximum\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0cospez.lua:29:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 2, 3, 3, 4, 4, 4}\nstack traceback:\n\
    \t/tmp/tmpj0cospez.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum > lst[i] and minimum or lst[i]\n\
    \    maximum = maximum < lst[i] and maximum or lst[i]\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpin1_nr7d.lua:21:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 1, 3, 1, 4, 1}\nstack traceback:\n\t/tmp/tmpin1_nr7d.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    end\n  end\n  for i = 1, #strange_lst do\n    strange_lst[i] =\
    \ strange_lst[i]\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtufdzf8.lua:32:\
    \ expected: {1, 4, 2, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmphtufdzf8.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n  end\n\
    \  for i = 1, #strange_lst do\n    if minimum > strange_lst[i] then\n      minimum\
    \ = strange_lst[i]\n    end\n    if maximum < strange_lst[i] then\n      maximum\
    \ = strange_lst[i]\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2fmpjd3k.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp2fmpjd3k.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    end\n    if lst[i] > max_value then\n      max_value = lst[i]\n    end\n\
    \  end\n  local new_lst = nil\n  local i = #lst\n  while i > 0 do\n    if lst[i]\
    \ < min_value then\n      table.insert(strange_lst,min_value)\n      table.insert(strange_lst,lst[i])\n\
    \      table.insert(strange_lst,max_value)\n      i = i - 1\n    elseif lst[i]\
    \ > max_value then\n      table.insert(strange_lst,lst[i])\n      table.insert(strange_lst,max_value)\n\
    \      table.insert(strange_lst,min_value)\n      i = i - 1\n    else\n      table.insert(strange_lst,lst[i])\n\
    \      i = i - 1\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpntt007i6.lua:41:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4, 4, 3, 2, 1}\nstack traceback:\n\
    \t/tmp/tmpntt007i6.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum or lst[i]\n    maximum = maximum\
    \ or lst[i]\n    if minimum > maximum then\n      strange_lst[#strange_lst+1]\
    \ = minimum\n      minimum = lst[i]\n      maximum = lst[i]\n    else\n      strange_lst[#strange_lst+1]\
    \ = maximum\n      maximum = lst[i]\n    end\n  end\n  strange_lst[#strange_lst+1]\
    \ = minimum\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps4cifjw5.lua:28:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 1}\nstack traceback:\n\t/tmp/tmps4cifjw5.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n    minimum = maximum\n\
    \    maximum = lst[i]\n  end\n  strange_lst[#strange_lst+1] = minimum\n  strange_lst[#strange_lst+1]\
    \ = maximum\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0cospez.lua:29:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 2, 3, 3, 4, 4, 4}\nstack traceback:\n\
    \t/tmp/tmpj0cospez.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum =\
    \ sorted_lst[#sorted_lst]\n  for i = 2, #sorted_lst do\n    local element = sorted_lst[i]\n\
    \    if element < minimum then\n      minimum = element\n    elseif element >\
    \ maximum then\n      maximum = element\n    end\n  end\n  sorted_lst[1] = minimum\n\
    \  sorted_lst[#sorted_lst] = maximum\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdo1vrsul.lua:25:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpdo1vrsul.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_val = lst[1]\n  local max_val = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_val then\n      min_val = lst[i]\n\
    \    elseif lst[i] > max_val then\n      max_val = lst[i]\n    end\n  end\n  for\
    \ i = 1, #lst do\n    if lst[i] < min_val then\n      strange_lst[i] = min_val\n\
    \    elseif lst[i] > max_val then\n      strange_lst[i] = max_val\n    end\n \
    \ end\n  for i = 1, #lst do\n    if lst[i] < min_val then\n      strange_lst[i]\
    \ = min_val\n    elseif lst[i] > max_val then\n      strange_lst[i] = max_val\n\
    \    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08mfbz7e.lua:36:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp08mfbz7e.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local function swap(list, a, b)\n    local tmp = list[a]\n    list[a] = list[b]\n\
    \    list[b] = tmp\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkku9ett8.lua:26: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local sorted_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n    table.insert(sorted_lst,\
    \ minimum)\n    table.insert(sorted_lst, maximum)\n    table.insert(sorted_lst,\
    \ minimum)\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_t3oqe0e.lua:26:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 1, 1, 3, 1, 1, 4, 1}\nstack traceback:\n\
    \t/tmp/tmp_t3oqe0e.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    end\n    if lst[i] > max_value then\n      max_value = lst[i]\n    end\n\
    \  end\n  local tmp\n  for i = 1, #lst do\n    if lst[i] < min_value then\n  \
    \    tmp = min_value\n      min_value = lst[i]\n      lst[i] = tmp\n    end\n\
    \    if lst[i] > max_value then\n      tmp = max_value\n      max_value = lst[i]\n\
    \      lst[i] = tmp\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf84eknyj.lua:36:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpf84eknyj.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum\
    \ = sorted_list[1]\n  for i = 2, #sorted_list do\n    if minimum > sorted_list[i]\
    \ then\n      minimum = sorted_list[i]\n    end\n    if maximum < sorted_list[i]\
    \ then\n      maximum = sorted_list[i]\n    end\n  end\n  sorted_list[#sorted_list]\
    \ = minimum\n  sorted_list[#sorted_list + 1] = maximum\n  return sorted_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc4siaoqf.lua:25:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 1, 4}\nstack traceback:\n\t/tmp/tmpc4siaoqf.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    else\n      strange_lst[#strange_lst+1] = min_value\n      strange_lst[#strange_lst+1]\
    \ = max_value\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpca3ex7u8.lua:32:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4, 1, 4, 1, 4, 1, 4}\nstack traceback:\n\
    \t/tmp/tmpca3ex7u8.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local function swap(list, a, b)\n    local tmp = list[a]\n    list[a] = list[b]\n\
    \    list[b] = tmp\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkku9ett8.lua:26: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum or lst[i]\n    maximum = maximum\
    \ or lst[i]\n    if minimum > maximum then\n      minimum, maximum = maximum,\
    \ minimum\n    end\n    strange_lst[#strange_lst+1] = minimum\n    strange_lst[#strange_lst+1]\
    \ = maximum\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ryjt4up.lua:24:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 1, 1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmp9ryjt4up.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < minimum then\n      minimum = lst[i]\n\
    \    elseif lst[i] > maximum then\n      maximum = lst[i]\n    end\n  end\n  for\
    \ i = 1, #strange_lst do\n    if strange_lst[i] < minimum then\n      strange_lst[i]\
    \ = minimum\n    elseif strange_lst[i] > maximum then\n      strange_lst[i] =\
    \ maximum\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1ayk9ih.lua:29:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpc1ayk9ih.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_index = 1\n  local max_index = #lst\n \
    \ for i = min_index, 1, -1 do\n    local value = lst[i]\n    local index = i\n\
    \    while index > min_index do\n      local next_value = lst[index + 1]\n   \
    \   if next_value < value then\n        strange_lst[#strange_lst+1] = next_value\n\
    \        index = index + 1\n      else\n        strange_lst[#strange_lst+1] =\
    \ value\n        index = index - 1\n      end\n    end\n    strange_lst[#strange_lst+1]\
    \ = value\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplqsofng3.lua:30:\
    \ expected: {1, 4, 2, 3}\nactual: {1}\nstack traceback:\n\t/tmp/tmplqsofng3.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n    minimum = maximum\n\
    \    maximum = lst[i]\n  end\n  strange_lst[#strange_lst+1] = minimum\n  strange_lst[#strange_lst+1]\
    \ = maximum\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0cospez.lua:29:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 2, 3, 3, 4, 4, 4}\nstack traceback:\n\
    \t/tmp/tmpj0cospez.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n    strange_lst[#strange_lst+1]\
    \ = lst[i]\n  end\n  strange_lst[#strange_lst+1] = min_value\n  strange_lst[#strange_lst+1]\
    \ = max_value\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vkwupe6.lua:25:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 3, 4, 1, 4}\nstack traceback:\n\t/tmp/tmp4vkwupe6.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n    strange_lst[i]\
    \ = minimum\n    strange_lst[i + 1] = maximum\n  end\n  return strange_lst\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpza6m9glh.lua:33:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 1, 1, 1, 4}\nstack traceback:\n\t/tmp/tmpza6m9glh.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  for i = 1, #lst do\n    local j = i - 1\n    local\
    \ k = #strange_lst\n    while j > 0 and lst[j] > lst[k] do\n      strange_lst[k]\
    \ = lst[j]\n      j = j - 1\n    end\n    strange_lst[k] = lst[i]\n  end\n  return\
    \ table.concat(strange_lst)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcdt655n7.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpcdt655n7.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpcdt655n7.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n  end\n\
    \  for i = 1, #strange_lst do\n    if strange_lst[i] < minimum then\n      strange_lst[i]\
    \ = minimum\n    end\n    if strange_lst[i] > maximum then\n      strange_lst[i]\
    \ = maximum\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqyv21aqb.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpqyv21aqb.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_val = lst[1]\n  local max_val = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_val then\n      min_val = lst[i]\n\
    \    elseif lst[i] > max_val then\n      max_val = lst[i]\n    end\n  end\n  local\
    \ min_val_str = tostring(min_val)\n  local max_val_str = tostring(max_val)\n \
    \ for i = 1, #lst do\n    if lst[i] < min_val then\n      strange_lst[i] = tostring(min_val)\n\
    \    elseif lst[i] > max_val then\n      strange_lst[i] = tostring(max_val)\n\
    \    elseif lst[i] == min_val then\n      strange_lst[i] = tostring(min_val_str)\n\
    \    elseif lst[i] == max_val then\n      strange_lst[i] = tostring(max_val_str)\n\
    \    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpua5u5_p1.lua:35:\
    \ expected: {1, 4, 2, 3}\nactual: {\"1\", 2, 3, \"4\"}\nstack traceback:\n\t/tmp/tmpua5u5_p1.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = { }\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n    strange_lst[#strange_lst+1]\
    \ = lst[i]\n  end\n  strange_lst[#strange_lst+1] = min_value\n  strange_lst[#strange_lst+1]\
    \ = max_value\n  return table.concat(strange_lst)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebz3hk68.lua:25:\
    \ expected: {1, 4, 2, 3}\nactual: \"23414\"\nstack traceback:\n\t/tmp/tmpebz3hk68.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum > lst[i] and lst[i] or minimum\n\
    \    maximum = maximum < lst[i] and lst[i] or maximum\n    strange_lst[i] = minimum\n\
    \    strange_lst[#strange_lst+1] = maximum\n  end\n  return strange_lst\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgugj1v7e.lua:21:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 1, 1, 1, 2, 3, 4}\nstack traceback:\n\t\
    /tmp/tmpgugj1v7e.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = strange_lst[1]\n  local max_value\
    \ = strange_lst[#strange_lst]\n  for i = 2, #strange_lst do\n    if strange_lst[i]\
    \ < min_value then\n      min_value = strange_lst[i]\n    end\n    if strange_lst[i]\
    \ > max_value then\n      max_value = strange_lst[i]\n    end\n  end\n  for i\
    \ = 1, #strange_lst do\n    if strange_lst[i] < min_value then\n      strange_lst[i]\
    \ = min_value\n    end\n    if strange_lst[i] > max_value then\n      strange_lst[i]\
    \ = max_value\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgj6ds4k6.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpgj6ds4k6.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      strange_lst[i] =\
    \ min_value\n    elseif lst[i] > max_value then\n      strange_lst[i] = max_value\n\
    \    end\n  end\n  for i = 1, #lst do\n    if lst[i] > max_value then\n      strange_lst[i]\
    \ = max_value\n    end\n  end\n  for i = 1, #lst do\n    if lst[i] < min_value\
    \ then\n      strange_lst[i] = min_value\n    end\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpno8_6iuu.lua:39:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpno8_6iuu.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n    minimum = maximum\n\
    \    maximum = minimum\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7citwunb.lua:27:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 2, 3, 3, 4}\nstack traceback:\n\t/tmp/tmp7citwunb.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      table.insert(strange_lst,\
    \ min_value)\n      min_value = lst[i]\n    elseif lst[i] > max_value then\n \
    \     table.insert(strange_lst, max_value)\n      max_value = lst[i]\n    end\n\
    \  end\n  table.insert(strange_lst, max_value)\n  return strange_lst\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvt1d5uc.lua:32:\
    \ expected: {1, 4, 2, 3}\nactual: {4}\nstack traceback:\n\t/tmp/tmplvt1d5uc.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    else\n      strange_lst[#strange_lst+1] = min_value\n      strange_lst[#strange_lst+1]\
    \ = max_value\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpca3ex7u8.lua:32:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4, 1, 4, 1, 4, 1, 4}\nstack traceback:\n\
    \t/tmp/tmpca3ex7u8.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n    strange_lst[#strange_lst+1]\
    \ = lst[i]\n  end\n  strange_lst[#strange_lst+1] = min_value\n  strange_lst[#strange_lst+1]\
    \ = max_value\n  return table.concat(strange_lst)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp588326hq.lua:25:\
    \ expected: {1, 4, 2, 3}\nactual: \"23414\"\nstack traceback:\n\t/tmp/tmp588326hq.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum or lst[i]\n    maximum = maximum\
    \ or lst[i]\n    if minimum > maximum then\n      strange_lst[#strange_lst+1]\
    \ = minimum\n      minimum = lst[i]\n      maximum = lst[i]\n    elseif minimum\
    \ < maximum then\n      strange_lst[#strange_lst+1] = maximum\n      maximum =\
    \ lst[i]\n    else\n      strange_lst[#strange_lst+1] = minimum\n      minimum\
    \ = lst[i]\n      maximum = lst[i]\n    end\n  end\n  strange_lst[#strange_lst+1]\
    \ = maximum\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprfdib5_a.lua:32:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmprfdib5_a.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_val = lst[1]\n  local max_val = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_val then\n      min_val = lst[i]\n\
    \    elseif lst[i] > max_val then\n      max_val = lst[i]\n    end\n  end\n  for\
    \ i = 1, #lst do\n    if lst[i] < min_val then\n      table.insert(strange_lst,\
    \ min_val)\n      min_val = lst[i]\n    elseif lst[i] > max_val then\n      table.insert(strange_lst,\
    \ max_val)\n      max_val = lst[i]\n    end\n  end\n  table.insert(strange_lst,\
    \ max_val)\n  table.insert(strange_lst, min_val)\n  return strange_lst\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpirpu7i02.lua:33:\
    \ expected: {1, 4, 2, 3}\nactual: {4, 1}\nstack traceback:\n\t/tmp/tmpirpu7i02.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      strange_lst[i] =\
    \ min_value\n    elseif lst[i] > max_value then\n      strange_lst[i] = max_value\n\
    \    end\n  end\n  for i = 1, #lst do\n    if lst[i] > max_value then\n      strange_lst[i]\
    \ = max_value\n    end\n  end\n  for i = 1, #lst do\n    if lst[i] < min_value\
    \ then\n      strange_lst[i] = min_value\n    end\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpno8_6iuu.lua:39:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpno8_6iuu.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n    strange_lst[#strange_lst+1]\
    \ = lst[i]\n  end\n  strange_lst[#strange_lst+1] = min_value\n  strange_lst[#strange_lst+1]\
    \ = max_value\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vkwupe6.lua:25:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 3, 4, 1, 4}\nstack traceback:\n\t/tmp/tmp4vkwupe6.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #strange_lst do\n    if strange_lst[i] < min_value then\n      strange_lst[i]\
    \ = min_value\n    elseif strange_lst[i] > max_value then\n      strange_lst[i]\
    \ = max_value\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a7kwx4y.lua:29:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp_a7kwx4y.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_val = lst[1]\n  local max_val = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_val then\n      min_val = lst[i]\n\
    \    elseif lst[i] > max_val then\n      max_val = lst[i]\n    end\n    strange_lst[#strange_lst+1]\
    \ = lst[i]\n  end\n  strange_lst[#strange_lst+1] = min_val\n  strange_lst[#strange_lst+1]\
    \ = max_val\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5rlewu3.lua:25:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 3, 4, 1, 4}\nstack traceback:\n\t/tmp/tmpl5rlewu3.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  for i = #lst, 1, -1 do\n    table.insert(strange_lst,\
    \ lst[i])\n  end\n  table.sort(strange_lst, function(a, b) return a < b end)\n\
    \  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ojyhyti.lua:17:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp_ojyhyti.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  for i = #lst, 1, -1 do\n    table.insert(strange_lst,\
    \ lst[i])\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiy1uvxh0.lua:16:\
    \ expected: {1, 4, 2, 3}\nactual: {4, 3, 2, 1}\nstack traceback:\n\t/tmp/tmpiy1uvxh0.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n  end\n\
    \  strange_lst[1] = minimum\n  strange_lst[#strange_lst+1] = maximum\n  local\
    \ minimum = lst[1]\n  local maximum = lst[1]\n  for i = 2, #lst do\n    if minimum\
    \ > lst[i] then\n      minimum = lst[i]\n    end\n    if maximum < lst[i] then\n\
    \      maximum = lst[i]\n    end\n  end\n  strange_lst[1] = minimum\n  strange_lst[#strange_lst+1]\
    \ = maximum\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_g8plhv.lua:37:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpd_g8plhv.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      strange_lst[i] =\
    \ min_value\n    elseif lst[i] > max_value then\n      strange_lst[i] = max_value\n\
    \    end\n  end\n  for i = 1, #lst do\n    if lst[i] > max_value then\n      strange_lst[i]\
    \ = max_value\n    end\n  end\n  for i = 1, #lst do\n    if lst[i] < min_value\
    \ then\n      strange_lst[i] = min_value\n    end\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpno8_6iuu.lua:39:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpno8_6iuu.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n    strange_lst[#strange_lst+1]\
    \ = lst[i]\n  end\n  strange_lst[#strange_lst+1] = min_value\n  strange_lst[#strange_lst+1]\
    \ = max_value\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vkwupe6.lua:25:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 3, 4, 1, 4}\nstack traceback:\n\t/tmp/tmp4vkwupe6.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local sorted_list = { }\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum > lst[i] and minimum or lst[i]\n\
    \    maximum = maximum < lst[i] and maximum or lst[i]\n    table.insert(sorted_list,\
    \ minimum)\n    table.insert(sorted_list, maximum)\n    table.insert(sorted_list,\
    \ lst[i])\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpttjmh_7w.lua:22:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 1, 2, 3, 1, 3, 4, 1, 4}\nstack traceback:\n\
    \t/tmp/tmpttjmh_7w.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n  end\n\
    \  strange_lst[1] = minimum\n  strange_lst[#strange_lst+1] = maximum\n  for i\
    \ = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n    end\n\
    \    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n    strange_lst[i]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzm1x01my.lua:35:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 1, 1, 1, 4}\nstack traceback:\n\t/tmp/tmpzm1x01my.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = tonumber(lst[1])\n  local max_value\
    \ = tonumber(lst[2])\n  local min_idx = 1\n  local max_idx = 2\n  while max_idx\
    \ < #lst do\n    if tonumber(lst[max_idx]) < min_value then\n      min_value =\
    \ tonumber(lst[min_idx])\n      min_idx = min_idx + 1\n    end\n    if tonumber(lst[max_idx])\
    \ > max_value then\n      max_value = tonumber(lst[max_idx])\n      max_idx =\
    \ max_idx + 1\n    end\n    strange_lst[max_idx] = lst[max_idx]\n    strange_lst[min_idx]\
    \ = lst[min_idx]\n    min_idx = min_idx + 1\n    max_idx = max_idx + 1\n  end\n\
    \  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6s4tygz6.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp6s4tygz6.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum\
    \ = sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i]\
    \ and sorted_list[i] or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i]\
    \ or maximum\n  end\n  sorted_list[#sorted_list] = minimum\n  sorted_list[#sorted_list\
    \ + 1] = maximum\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6rpumqiv.lua:21:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 1, 4}\nstack traceback:\n\t/tmp/tmp6rpumqiv.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_val = lst[1]\n  local max_val = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_val then\n      min_val = lst[i]\n\
    \    elseif lst[i] > max_val then\n      max_val = lst[i]\n    end\n  end\n  strange_lst[1]\
    \ = min_val\n  strange_lst[#strange_lst+1] = max_val\n  for i = 2, #lst do\n \
    \   if lst[i] < min_val then\n      strange_lst[#strange_lst+1] = lst[i]\n   \
    \ elseif lst[i] > max_val then\n      strange_lst[1] = lst[i]\n    end\n  end\n\
    \  return table.concat(strange_lst)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplh7lhn8a.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: \"14\"\nstack traceback:\n\t/tmp/tmplh7lhn8a.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  strange_lst[1] = min_value\n  strange_lst[#strange_lst+1] = max_value\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[1] = lst[i]\n\
    \    end\n  end\n  return table.concat(strange_lst)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1wh_p80a.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: \"14\"\nstack traceback:\n\t/tmp/tmp1wh_p80a.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      table.insert(strange_lst,\
    \ '<' .. min_value)\n    elseif lst[i] > max_value then\n      table.insert(strange_lst,\
    \ '>' .. max_value)\n    else\n      table.insert(strange_lst, lst[i])\n    end\n\
    \  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbsumsa07.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbsumsa07.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  for i = 1, #lst do\n    local j = i\n    while j\
    \ > 1 do\n      local k = j - 1\n      if lst[j] < lst[k] then\n        strange_lst[j]\
    \ = lst[k]\n        lst[k] = lst[j]\n        lst[j] = k\n      else\n        j\
    \ = k\n      end\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzhft0738.lua:26:\
    \ expected: {1, 4, 2, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpzhft0738.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n  end\n\
    \  local i = 2\n  while i < #lst do\n    if minimum > lst[i] then\n      minimum\
    \ = lst[i]\n    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n  \
    \  end\n    i = i + 1\n  end\n  strange_lst[1] = minimum\n  strange_lst[#strange_lst+1]\
    \ = maximum\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph4kw77sq.lua:35:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4, 4}\nstack traceback:\n\t/tmp/tmph4kw77sq.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  strange_lst[1] = min_value\n  strange_lst[#strange_lst+1] = max_value\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      strange_lst[i] = min_value\n\
    \    elseif lst[i] > max_value then\n      strange_lst[i] = max_value\n    end\n\
    \  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa9pgzccf.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4}\nstack traceback:\n\t/tmp/tmpa9pgzccf.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  for i = 1, #lst do\n    local j = i\n    while j\
    \ > 1 do\n      local k = j - 1\n      if lst[j] < lst[k] then\n        table.insert(strange_lst,\
    \ lst[j])\n        j = k\n      else\n        table.insert(strange_lst, lst[k])\n\
    \        j = k - 1\n      end\n    end\n    table.insert(strange_lst, lst[j])\n\
    \  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgta6h9ma.lua:27:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 1, 2, 1, 3, 1}\nstack traceback:\n\t/tmp/tmpgta6h9ma.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      table.insert(strange_lst,\
    \ min_value)\n      min_value = lst[i]\n    elseif lst[i] > max_value then\n \
    \     table.insert(strange_lst, max_value)\n      max_value = lst[i]\n    end\n\
    \  end\n  table.insert(strange_lst, max_value)\n  return strange_lst\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvt1d5uc.lua:32:\
    \ expected: {1, 4, 2, 3}\nactual: {4}\nstack traceback:\n\t/tmp/tmplvt1d5uc.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      table.insert(strange_lst,\
    \ min_value)\n      min_value = lst[i]\n    elseif lst[i] > max_value then\n \
    \     table.insert(strange_lst, max_value)\n      max_value = lst[i]\n    end\n\
    \  end\n  table.insert(strange_lst, max_value)\n  return strange_lst\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvt1d5uc.lua:32:\
    \ expected: {1, 4, 2, 3}\nactual: {4}\nstack traceback:\n\t/tmp/tmplvt1d5uc.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local i = #lst\n  while i ~= 0 do\n    local j =\
    \ i\n    while j > 0 do\n      local k = j - 1\n      while k >= 0 do\n      \
    \  if strange_lst[k] > strange_lst[j] then\n          strange_lst[k] = strange_lst[j]\n\
    \          strange_lst[j] = k\n        end\n        k = k - 1\n      end\n   \
    \   j = j - 1\n    end\n    i = i - 1\n  end\n  return strange_lst\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy51j7vu_.lua:13:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpy51j7vu_.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpy51j7vu_.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  for i = 1, #lst do\n    local j = i - 1\n    local\
    \ k = #strange_lst\n    while j > 0 and lst[j] > lst[j + 1] do\n      strange_lst[k]\
    \ = lst[j]\n      j = j - 1\n      k = k - 1\n    end\n    strange_lst[k] = lst[i]\n\
    \  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7vgcq9q.lua:23:\
    \ expected: {1, 4, 2, 3}\nactual: {0=4}\nstack traceback:\n\t/tmp/tmpu7vgcq9q.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_val = lst[1]\n  local max_val = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_val then\n      min_val = lst[i]\n\
    \    elseif lst[i] > max_val then\n      max_val = lst[i]\n    end\n  end\n  strange_lst[1]\
    \ = min_val\n  strange_lst[#strange_lst+1] = max_val\n  for i = 2, #lst do\n \
    \   if lst[i] < min_val then\n      strange_lst[#strange_lst+1] = lst[i]\n   \
    \ elseif lst[i] > max_val then\n      strange_lst[1] = lst[i]\n    end\n  end\n\
    \  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4hy9k83.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4}\nstack traceback:\n\t/tmp/tmpy4hy9k83.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n    minimum = maximum\n\
    \    maximum = lst[i]\n  end\n  strange_lst[#strange_lst+1] = minimum\n  strange_lst[#strange_lst+1]\
    \ = maximum\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0cospez.lua:29:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 2, 3, 3, 4, 4, 4}\nstack traceback:\n\
    \t/tmp/tmpj0cospez.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local sorted_list = { }\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum > lst[i] and minimum or lst[i]\n\
    \    maximum = maximum < lst[i] and maximum or lst[i]\n    table.insert(sorted_list,\
    \ minimum)\n    table.insert(sorted_list, maximum)\n    table.insert(sorted_list,\
    \ lst[i])\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpttjmh_7w.lua:22:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 1, 2, 3, 1, 3, 4, 1, 4}\nstack traceback:\n\
    \t/tmp/tmpttjmh_7w.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = { }\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    local value = lst[i]\n    if value < minimum then\n\
    \      minimum = value\n    elseif value > maximum then\n      maximum = value\n\
    \    end\n    strange_lst[#strange_lst+1] = value\n  end\n  table.sort(strange_lst)\n\
    \  for i = 1, #strange_lst do\n    lst[i] = strange_lst[i]\n  end\n  return lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplyvi32oo.lua:28:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 3, 4, 4}\nstack traceback:\n\t/tmp/tmplyvi32oo.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local i = #lst\n  while i do\n    i = i - 1\n  \
    \  local j = #strange_lst\n    while j do\n      j = j - 1\n      if strange_lst[i]\
    \ > strange_lst[j] then\n        table.insert(strange_lst, strange_lst[j])\n \
    \       table.insert(strange_lst, strange_lst[i])\n        table.insert(strange_lst,\
    \ strange_lst[j])\n      end\n    end\n  end\n  return strange_lst\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4zpgu3h1.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp4zpgu3h1.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp4zpgu3h1.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  table.insert(strange_lst, min_value)\n  table.insert(strange_lst, max_value)\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      table.insert(strange_lst,\
    \ lst[i])\n    elseif lst[i] > max_value then\n      table.insert(strange_lst,\
    \ lst[i])\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuk8og2kg.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4}\nstack traceback:\n\t/tmp/tmpuk8og2kg.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minval = lst[1]\n  local maxval = lst[1]\n\
    \  for i = 2, #lst do\n    if minval > lst[i] then\n      minval = lst[i]\n  \
    \  end\n    if maxval < lst[i] then\n      maxval = lst[i]\n    end\n  end\n \
    \ strange_lst[1] = minval\n  strange_lst[#strange_lst+1] = maxval\n  for i = 2,\
    \ #lst do\n    strange_lst[i] = strange_lst[i-1]\n  end\n  return table.concat(strange_lst)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplwuvpxyk.lua:28:\
    \ expected: {1, 4, 2, 3}\nactual: \"1111\"\nstack traceback:\n\t/tmp/tmplwuvpxyk.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = min_value\n      min_value = lst[i]\n    elseif lst[i] > max_value then\n\
    \      strange_lst[#strange_lst+1] = max_value\n      max_value = lst[i]\n   \
    \ else\n      strange_lst[#strange_lst+1] = lst[i]\n    end\n  end\n  strange_lst[#strange_lst+1]\
    \ = max_value\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ajt4hcm.lua:34:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4, 4}\nstack traceback:\n\t/tmp/tmp4ajt4hcm.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[#lst]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #strange_lst do\n    if strange_lst[i] < min_value then\n      strange_lst[i]\
    \ = min_value\n    elseif strange_lst[i] > max_value then\n      strange_lst[i]\
    \ = max_value\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpszojmcfp.lua:29:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpszojmcfp.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    end\n    if lst[i] > max_value then\n      max_value = lst[i]\n    end\n\
    \  end\n  for i = 1, #lst do\n    if lst[i] < min_value then\n      strange_lst[i]\
    \ = min_value\n    elseif lst[i] > max_value then\n      strange_lst[i] = max_value\n\
    \    else\n      strange_lst[i] = lst[i]\n    end\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8w32nt0i.lua:32:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp8w32nt0i.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      strange_lst[i] =\
    \ min_value\n    elseif lst[i] > max_value then\n      strange_lst[i] = max_value\n\
    \    end\n  end\n  for i = 1, #lst do\n    if lst[i] > max_value then\n      strange_lst[i]\
    \ = max_value\n    end\n  end\n  for i = 1, #lst do\n    if lst[i] < min_value\
    \ then\n      strange_lst[i] = min_value\n    end\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpno8_6iuu.lua:39:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpno8_6iuu.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_val = lst[1]\n  local max_val = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_val then\n      min_val = lst[i]\n\
    \    elseif lst[i] > max_val then\n      max_val = lst[i]\n    end\n  end\n  strange_lst[1]\
    \ = min_val\n  strange_lst[#strange_lst+1] = max_val\n  for i = 2, #lst do\n \
    \   if lst[i] < min_val then\n      strange_lst[#strange_lst+1] = lst[i]\n   \
    \ elseif lst[i] > max_val then\n      strange_lst[1] = lst[i]\n    end\n  end\n\
    \  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4hy9k83.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4}\nstack traceback:\n\t/tmp/tmpy4hy9k83.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      strange_lst[i] =\
    \ min_value\n    elseif lst[i] > max_value then\n      strange_lst[i] = max_value\n\
    \    end\n  end\n  for i = 1, #lst do\n    if lst[i] > min_value then\n      strange_lst[i]\
    \ = min_value\n    elseif lst[i] < max_value then\n      strange_lst[i] = max_value\n\
    \    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgip1o65g.lua:36:\
    \ expected: {1, 4, 2, 3}\nactual: {4, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpgip1o65g.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n  end\n\
    \  strange_lst[1] = minimum\n  strange_lst[#strange_lst+1] = maximum\n  for i\
    \ = 2, #strange_lst do\n    local tmp = strange_lst[i]\n    strange_lst[i] = strange_lst[i-1]\n\
    \    strange_lst[i-1] = tmp\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppnazyl3q.lua:30:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 3, 4, 4, 1}\nstack traceback:\n\t/tmp/tmppnazyl3q.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum or lst[i]\n    maximum = maximum\
    \ or lst[i]\n    if minimum > maximum then\n      minimum, maximum = maximum,\
    \ minimum\n    end\n    strange_lst[i] = minimum .. maximum .. lst[i]\n  end\n\
    \  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_mcjbey.lua:23:\
    \ expected: {1, 4, 2, 3}\nactual: {1, \"112\", \"113\", \"114\"}\nstack traceback:\n\
    \t/tmp/tmpw_mcjbey.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum > lst[i] and minimum or lst[i]\n\
    \    maximum = maximum < lst[i] and maximum or lst[i]\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpin1_nr7d.lua:21:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 1, 3, 1, 4, 1}\nstack traceback:\n\t/tmp/tmpin1_nr7d.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local function swap(list, a, b)\n    local tmp = list[a]\n    list[a] = list[b]\n\
    \    list[b] = tmp\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkku9ett8.lua:26: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = tonumber(lst[1])\n  local max_value\
    \ = tonumber(lst[-1])\n  for i = 2, #lst do\n    local value = tonumber(lst[i])\n\
    \    if value < min_value then\n      min_value = value\n      strange_lst[1]\
    \ = min_value\n    elseif value > max_value then\n      max_value = value\n  \
    \    strange_lst[#strange_lst+1] = max_value\n    else\n      strange_lst[#strange_lst+1]\
    \ = value\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj5yrnup2.lua:14:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpj5yrnup2.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpj5yrnup2.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum > lst[i] and minimum or lst[i]\n\
    \    maximum = maximum < lst[i] and maximum or lst[i]\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpin1_nr7d.lua:21:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 1, 3, 1, 4, 1}\nstack traceback:\n\t/tmp/tmpin1_nr7d.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      table.insert(strange_lst,\
    \ min_value)\n      min_value = lst[i]\n    elseif lst[i] > max_value then\n \
    \     table.insert(strange_lst, max_value)\n      max_value = lst[i]\n    end\n\
    \  end\n  table.insert(strange_lst, max_value)\n  return strange_lst\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvt1d5uc.lua:32:\
    \ expected: {1, 4, 2, 3}\nactual: {4}\nstack traceback:\n\t/tmp/tmplvt1d5uc.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      table.insert(strange_lst,\
    \ min_value)\n      min_value = lst[i]\n    elseif lst[i] > max_value then\n \
    \     table.insert(strange_lst, max_value)\n      max_value = lst[i]\n    end\n\
    \  end\n  table.insert(strange_lst, max_value)\n  return strange_lst\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvt1d5uc.lua:32:\
    \ expected: {1, 4, 2, 3}\nactual: {4}\nstack traceback:\n\t/tmp/tmplvt1d5uc.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      table.insert(strange_lst,\
    \ min_value)\n      min_value = lst[i]\n    elseif lst[i] > max_value then\n \
    \     table.insert(strange_lst, max_value)\n      max_value = lst[i]\n    end\n\
    \  end\n  table.insert(strange_lst, max_value)\n  return strange_lst\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvt1d5uc.lua:32:\
    \ expected: {1, 4, 2, 3}\nactual: {4}\nstack traceback:\n\t/tmp/tmplvt1d5uc.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum > lst[i] and minimum or lst[i]\n\
    \    maximum = maximum < lst[i] and maximum or lst[i]\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpin1_nr7d.lua:21:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 1, 3, 1, 4, 1}\nstack traceback:\n\t/tmp/tmpin1_nr7d.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  strange_lst[1] = min_value\n  strange_lst[#strange_lst+1] = max_value\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[1] = lst[i]\n\
    \    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5zb6omy.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4}\nstack traceback:\n\t/tmp/tmpu5zb6omy.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n  end\n\
    \  local tmp\n  for i = 1, #lst do\n    if minimum > lst[i] then\n      minimum\
    \ = lst[i]\n    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n  \
    \  end\n    tmp = lst[i]\n    lst[i] = minimum\n    minimum = minimum - tmp\n\
    \    lst[i] = maximum\n    maximum = maximum + tmp\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmo1ijzzq.lua:37:\
    \ expected: {1, 4, 2, 3}\nactual: {4, 5, 7, 10}\nstack traceback:\n\t/tmp/tmpmo1ijzzq.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      table.insert(strange_lst,\
    \ min_value)\n      min_value = lst[i]\n    elseif lst[i] > max_value then\n \
    \     table.insert(strange_lst, max_value)\n      max_value = lst[i]\n    end\n\
    \  end\n  table.insert(strange_lst, max_value)\n  return strange_lst\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvt1d5uc.lua:32:\
    \ expected: {1, 4, 2, 3}\nactual: {4}\nstack traceback:\n\t/tmp/tmplvt1d5uc.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_val = lst[1]\n  local max_val = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_val then\n      min_val = lst[i]\n\
    \    elseif lst[i] > max_val then\n      max_val = lst[i]\n    end\n    strange_lst[#strange_lst+1]\
    \ = lst[i]\n  end\n  strange_lst[#strange_lst+1] = min_val\n  strange_lst[#strange_lst+1]\
    \ = max_val\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5rlewu3.lua:25:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 3, 4, 1, 4}\nstack traceback:\n\t/tmp/tmpl5rlewu3.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_val = lst[1]\n  local max_val = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_val then\n      min_val = lst[i]\n\
    \    elseif lst[i] > max_val then\n      max_val = lst[i]\n    end\n  end\n  for\
    \ i = 1, #lst do\n    if lst[i] < min_val then\n      strange_lst[i] = min_val\n\
    \    elseif lst[i] > max_val then\n      strange_lst[i] = max_val\n    end\n \
    \ end\n  for i = 1, #lst do\n    if lst[i] > max_val then\n      strange_lst[i]\
    \ = max_val\n    end\n  end\n  for i = 1, #lst do\n    if lst[i] < min_val then\n\
    \      strange_lst[i] = min_val\n    end\n  end\n  return strange_lst\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7u5usdak.lua:39:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp7u5usdak.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      table.insert(strange_lst,\
    \ min_value)\n      min_value = lst[i]\n    elseif lst[i] > max_value then\n \
    \     table.insert(strange_lst, max_value)\n      max_value = lst[i]\n    end\n\
    \  end\n  table.insert(strange_lst, max_value)\n  return strange_lst\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvt1d5uc.lua:32:\
    \ expected: {1, 4, 2, 3}\nactual: {4}\nstack traceback:\n\t/tmp/tmplvt1d5uc.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  strange_lst[1] = min_value\n  strange_lst[#strange_lst+1] = max_value\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[1] = lst[i]\n\
    \    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5zb6omy.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4}\nstack traceback:\n\t/tmp/tmpu5zb6omy.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  strange_lst[1] = min_value\n  strange_lst[#strange_lst+1] = max_value\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68i6qyz1.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4}\nstack traceback:\n\t/tmp/tmp68i6qyz1.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum > lst[i] and minimum or lst[i]\n\
    \    maximum = maximum < lst[i] and maximum or lst[i]\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpin1_nr7d.lua:21:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 1, 3, 1, 4, 1}\nstack traceback:\n\t/tmp/tmpin1_nr7d.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n    minimum = maximum\n\
    \    maximum = lst[i]\n  end\n  strange_lst[#strange_lst+1] = minimum\n  strange_lst[#strange_lst+1]\
    \ = maximum\n  return table.concat(strange_lst)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9c52l74e.lua:29:\
    \ expected: {1, 4, 2, 3}\nactual: \"12233444\"\nstack traceback:\n\t/tmp/tmp9c52l74e.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  -- Now we have the min and max values, we can swap them\n  -- by swapping their\
    \ positions in the list\n  for i = 1, #strange_lst do\n    if strange_lst[i] >\
    \ max_value then\n      strange_lst[i], strange_lst[#strange_lst] = strange_lst[#strange_lst],\
    \ strange_lst[i]\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp02xyse8f.lua:29:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp02xyse8f.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n    minimum = maximum\n\
    \    maximum = lst[i]\n  end\n  strange_lst[#strange_lst+1] = minimum\n  strange_lst[#strange_lst+1]\
    \ = maximum\n  return table.concat(strange_lst)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9c52l74e.lua:29:\
    \ expected: {1, 4, 2, 3}\nactual: \"12233444\"\nstack traceback:\n\t/tmp/tmp9c52l74e.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_val = lst[1]\n  local max_val = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_val then\n      min_val = lst[i]\n\
    \    elseif lst[i] > max_val then\n      max_val = lst[i]\n    end\n  end\n  for\
    \ i = 1, #lst do\n    if lst[i] < min_val then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_val then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    else\n      strange_lst[#strange_lst+1] = min_val\n      strange_lst[#strange_lst+1]\
    \ = max_val\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmponyzwyoi.lua:32:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4, 1, 4, 1, 4, 1, 4}\nstack traceback:\n\
    \t/tmp/tmponyzwyoi.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum > lst[i] and minimum or lst[i]\n\
    \    maximum = maximum < lst[i] and maximum or lst[i]\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpin1_nr7d.lua:21:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 1, 3, 1, 4, 1}\nstack traceback:\n\t/tmp/tmpin1_nr7d.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n    minimum = maximum\n\
    \    maximum = lst[i]\n  end\n  strange_lst[#strange_lst+1] = minimum\n  strange_lst[#strange_lst+1]\
    \ = maximum\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0cospez.lua:29:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 2, 3, 3, 4, 4, 4}\nstack traceback:\n\
    \t/tmp/tmpj0cospez.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local function swap(list, a, b)\n    local tmp = list[a]\n    list[a] = list[b]\n\
    \    list[b] = tmp\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkku9ett8.lua:26: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_val = lst[1]\n  local max_val = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_val then\n      min_val = lst[i]\n\
    \    elseif lst[i] > max_val then\n      max_val = lst[i]\n    end\n  end\n  strange_lst[1]\
    \ = min_val\n  strange_lst[#strange_lst+1] = max_val\n  for i = 2, #lst do\n \
    \   if lst[i] < min_val then\n      strange_lst[#strange_lst+1] = lst[i]\n   \
    \ elseif lst[i] > max_val then\n      strange_lst[1] = lst[i]\n    end\n  end\n\
    \  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4hy9k83.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4}\nstack traceback:\n\t/tmp/tmpy4hy9k83.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local n = #lst\n  for i = 1, n do\n    local j =\
    \ n - 1\n    while j > 0 and lst[j] > lst[j + 1] do\n      strange_lst[j] = lst[j]\n\
    \      j = j - 1\n    end\n    strange_lst[j] = lst[i]\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9llfc3n.lua:22:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 4, 4}\nstack traceback:\n\t/tmp/tmpy9llfc3n.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  table.insert(strange_lst,min_value)\n  table.insert(strange_lst,max_value)\n\
    \  table.insert(strange_lst,min_value)\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc4sar0nc.lua:25:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4, 1}\nstack traceback:\n\t/tmp/tmpc4sar0nc.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = tonumber(lst[1])\n  local max_value\
    \ = tonumber(lst[2])\n  for i = 2, #lst do\n    local value = tonumber(lst[i])\n\
    \    if value < min_value then\n      min_value = value\n      strange_lst[1]\
    \ = min_value\n    elseif value > max_value then\n      max_value = value\n  \
    \    strange_lst[2] = max_value\n    else\n      strange_lst[1] = value\n    \
    \  strange_lst[2] = min_value\n    end\n  end\n  return strange_lst\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyv8eai28.lua:28:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 4, 3, 4}\nstack traceback:\n\t/tmp/tmpyv8eai28.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  for i = #lst, 1, -1 do\n    table.insert(strange_lst,\
    \ lst[i])\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiy1uvxh0.lua:16:\
    \ expected: {1, 4, 2, 3}\nactual: {4, 3, 2, 1}\nstack traceback:\n\t/tmp/tmpiy1uvxh0.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = { }\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  strange_lst[1] = min_value\n  strange_lst[#strange_lst+1] = max_value\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0p17vpn.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4}\nstack traceback:\n\t/tmp/tmpq0p17vpn.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum > lst[i] and lst[i] or minimum\n\
    \    maximum = maximum < lst[i] and lst[i] or maximum\n    strange_lst[i] = minimum\n\
    \    strange_lst[#strange_lst+1] = maximum\n  end\n  return strange_lst\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgugj1v7e.lua:21:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 1, 1, 1, 2, 3, 4}\nstack traceback:\n\t\
    /tmp/tmpgugj1v7e.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local function swap(list, a, b)\n    local tmp = list[a]\n    list[a] = list[b]\n\
    \    list[b] = tmp\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkku9ett8.lua:26: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  strange_lst[1] = min_value\n  strange_lst[#strange_lst+1] = max_value\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_yfoujj.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4, 4}\nstack traceback:\n\t/tmp/tmps_yfoujj.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      table.insert(strange_lst,\
    \ min_value)\n      min_value = lst[i]\n    elseif lst[i] > max_value then\n \
    \     table.insert(strange_lst, max_value)\n      max_value = lst[i]\n    end\n\
    \  end\n  table.insert(strange_lst, max_value)\n  return strange_lst\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvt1d5uc.lua:32:\
    \ expected: {1, 4, 2, 3}\nactual: {4}\nstack traceback:\n\t/tmp/tmplvt1d5uc.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    end\n    if lst[i] > max_value then\n      max_value = lst[i]\n    end\n\
    \  end\n  for i = 1, #lst do\n    if lst[i] < min_value then\n      strange_lst[i]\
    \ = min_value\n    elseif lst[i] > max_value then\n      strange_lst[i] = max_value\n\
    \    end\n  end\n  for i = 1, #lst do\n    if lst[i] < min_value then\n      strange_lst[i]\
    \ = min_value\n    elseif lst[i] > max_value then\n      strange_lst[i] = max_value\n\
    \    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyxv7_pmm.lua:37:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpyxv7_pmm.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum or lst[i]\n    maximum = maximum\
    \ or lst[i]\n    if minimum > maximum then\n      minimum, maximum = maximum,\
    \ minimum\n    end\n    strange_lst[#strange_lst+1] = minimum\n    strange_lst[#strange_lst+1]\
    \ = maximum\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ryjt4up.lua:24:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 1, 1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmp9ryjt4up.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    end\n    if lst[i] > max_value then\n      max_value = lst[i]\n    end\n\
    \  end\n  strange_lst[1] = min_value\n  strange_lst[#strange_lst+1] = max_value\n\
    \  for i = 2, #strange_lst do\n    local tmp = strange_lst[i]\n    strange_lst[i]\
    \ = strange_lst[i-1]\n    strange_lst[i-1] = tmp\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_jv80ai.lua:30:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 3, 4, 4, 1}\nstack traceback:\n\t/tmp/tmpw_jv80ai.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #strange_lst do\n    if strange_lst[i] < min_value then\n      strange_lst[i]\
    \ = min_value\n    elseif strange_lst[i] > max_value then\n      strange_lst[i]\
    \ = max_value\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a7kwx4y.lua:29:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp_a7kwx4y.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    end\n    if lst[i] > max_value then\n      max_value = lst[i]\n    end\n\
    \  end\n  local tmp\n  for i = 1, #lst do\n    if lst[i] < min_value then\n  \
    \    tmp = lst[i]\n      lst[i] = min_value\n      min_value = tmp\n    end\n\
    \    if lst[i] > max_value then\n      tmp = lst[i]\n      lst[i] = max_value\n\
    \      max_value = tmp\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz25lt4r5.lua:36:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpz25lt4r5.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local function swap(list, a, b)\n    local tmp = list[a]\n    list[a] = list[b]\n\
    \    list[b] = tmp\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkku9ett8.lua:26: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_index = 1\n  local max_index = #lst\n \
    \ for i = min_index, 1, -1 do\n    local index = max_index - i\n    local value\
    \ = lst[index]\n    local new_value = lst[max_index - i]\n    lst[index] = new_value\n\
    \    lst[max_index - i] = value\n    strange_lst[#strange_lst+1] = new_value\n\
    \  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ju3nyrj.lua:23:\
    \ expected: {1, 4, 2, 3}\nactual: {3}\nstack traceback:\n\t/tmp/tmp7ju3nyrj.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    end\n    if lst[i] > max_value then\n      max_value = lst[i]\n    end\n\
    \  end\n  for i = 1, #lst do\n    if lst[i] < min_value then\n      strange_lst[i]\
    \ = min_value\n    elseif lst[i] > max_value then\n      strange_lst[i] = max_value\n\
    \    end\n  end\n  for i = 1, #lst do\n    if lst[i] < min_value then\n      strange_lst[i]\
    \ = min_value\n    elseif lst[i] > max_value then\n      strange_lst[i] = max_value\n\
    \    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyxv7_pmm.lua:37:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpyxv7_pmm.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #strange_lst do\n    if strange_lst[i] < min_value then\n      strange_lst[i]\
    \ = min_value\n    elseif strange_lst[i] > max_value then\n      strange_lst[i]\
    \ = max_value\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a7kwx4y.lua:29:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp_a7kwx4y.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum > lst[i] and minimum or lst[i]\n\
    \    maximum = maximum < lst[i] and maximum or lst[i]\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpin1_nr7d.lua:21:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 1, 3, 1, 4, 1}\nstack traceback:\n\t/tmp/tmpin1_nr7d.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_val = lst[1]\n  local max_val = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_val then\n      min_val = lst[i]\n\
    \    elseif lst[i] > max_val then\n      max_val = lst[i]\n    end\n  end\n  table.insert(strange_lst,min_val)\n\
    \  table.insert(strange_lst,max_val)\n  table.insert(strange_lst,min_val)\n  return\
    \ strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_60hljxy.lua:25:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4, 1}\nstack traceback:\n\t/tmp/tmp_60hljxy.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum or lst[i]\n    maximum = maximum\
    \ or lst[i]\n    if minimum > maximum then\n      strange_lst[#strange_lst+1]\
    \ = minimum\n      minimum = lst[i]\n      maximum = lst[i]\n    elseif minimum\
    \ < maximum then\n      strange_lst[#strange_lst+1] = maximum\n      minimum =\
    \ lst[i]\n      maximum = lst[i]\n    else\n      strange_lst[#strange_lst+1]\
    \ = minimum\n      minimum = lst[i]\n      maximum = lst[i]\n    end\n  end\n\
    \  strange_lst[#strange_lst+1] = minimum\n  strange_lst[#strange_lst+1] = maximum\n\
    \  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxn9yhdu0.lua:34:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4, 4}\nstack traceback:\n\t/tmp/tmpxn9yhdu0.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #strange_lst do\n    if strange_lst[i] < min_value then\n      strange_lst[i]\
    \ = min_value\n    elseif strange_lst[i] > max_value then\n      strange_lst[i]\
    \ = max_value\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a7kwx4y.lua:29:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp_a7kwx4y.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local function swap(list, a, b)\n    local tmp = list[a]\n    list[a] = list[b]\n\
    \    list[b] = tmp\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkku9ett8.lua:26: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    end\n    if lst[i] > max_value then\n      max_value = lst[i]\n    end\n\
    \  end\n  local min_value = min_value\n  local max_value = max_value\n  for i\
    \ = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n   \
    \ end\n    if lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  local min_value = min_value\n  local max_value = max_value\n  for i = 2, #lst\
    \ do\n    if lst[i] < min_value then\n      min_value = lst[i]\n    end\n    if\
    \ lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n  local min_value\
    \ = min_value\n  local max_value = max_value\n  for i = 2, #lst do\n    if lst[i]\
    \ < min_value then\n      min_value = lst[i]\n    end\n    if lst[i] > max_value\
    \ then\n      max_value = lst[i]\n    end\n  end\n  local min_value = min_value\n\
    \  local max_value = max_value\n  for i = 2, #lst do\n    if lst[i] < min_value\
    \ then\n      min_value = lst[i]\n    end\n    if lst[i] > max_value then\n  \
    \    max_value = lst[i]\n    end\n  end\n  local min_value = min_value\n  local\
    \ max_value = max_value\n  for i = 2, #lst do\n    if lst[i] < min_value then\n\
    \      min_value = lst[i]\n    end\n    if lst[i] > max_value then\n      max_value\
    \ = lst[i]\n    end\n  end\n  local min_value = min_value\n  local max_value =\
    \ max_value\n  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value\
    \ = lst[i]\n    end\n    if lst[i] > max_value then\n      max_value = lst[i]\n\
    \    end\n  end\n  local min_value = min_value\n  local max_value = max_value\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    end\n    if lst[i] > max_value then\n      max_value = lst[i]\n    end\n\
    \  end\n  local min_value = min_value\n  local max_value = max_value\n  for i\
    \ = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n   \
    \ end\n    if lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpck2ie2al.lua:112: ''end'' expected (to close ''function''
    at line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n    minimum = maximum\n\
    \    maximum = lst[i]\n  end\n  strange_lst[#strange_lst+1] = minimum\n  strange_lst[#strange_lst+1]\
    \ = maximum\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0cospez.lua:29:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 2, 3, 3, 4, 4, 4}\nstack traceback:\n\
    \t/tmp/tmpj0cospez.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  strange_lst[1] = min_value\n  strange_lst[#strange_lst+1] = max_value\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      strange_lst[i] = min_value\n\
    \    elseif lst[i] > max_value then\n      strange_lst[i] = max_value\n    end\n\
    \  end\n  return table.concat(strange_lst)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp58umquwv.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: \"14\"\nstack traceback:\n\t/tmp/tmp58umquwv.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum > lst[i] and minimum or lst[i]\n\
    \    maximum = maximum < lst[i] and maximum or lst[i]\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpin1_nr7d.lua:21:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 1, 3, 1, 4, 1}\nstack traceback:\n\t/tmp/tmpin1_nr7d.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  strange_lst[1] = min_value\n  strange_lst[#strange_lst+1] = max_value\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68i6qyz1.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4}\nstack traceback:\n\t/tmp/tmp68i6qyz1.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = min_value\n      min_value = lst[i]\n    elseif lst[i] > max_value then\n\
    \      strange_lst[#strange_lst+1] = max_value\n      max_value = lst[i]\n   \
    \ end\n  end\n  strange_lst[#strange_lst+1] = max_value\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmhto2h5e.lua:32:\
    \ expected: {1, 4, 2, 3}\nactual: {4}\nstack traceback:\n\t/tmp/tmpmhto2h5e.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      table.insert(strange_lst,\
    \ min_value)\n      min_value = lst[i]\n    elseif lst[i] > max_value then\n \
    \     table.insert(strange_lst, max_value)\n      max_value = lst[i]\n    end\n\
    \  end\n  table.insert(strange_lst, max_value)\n  return strange_lst\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvt1d5uc.lua:32:\
    \ expected: {1, 4, 2, 3}\nactual: {4}\nstack traceback:\n\t/tmp/tmplvt1d5uc.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum > lst[i] and minimum or lst[i]\n\
    \    maximum = maximum < lst[i] and maximum or lst[i]\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpin1_nr7d.lua:21:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 1, 3, 1, 4, 1}\nstack traceback:\n\t/tmp/tmpin1_nr7d.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n    minimum = maximum\n\
    \    maximum = lst[i]\n  end\n  strange_lst[#strange_lst+1] = minimum\n  strange_lst[#strange_lst+1]\
    \ = maximum\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0cospez.lua:29:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 2, 3, 3, 4, 4, 4}\nstack traceback:\n\
    \t/tmp/tmpj0cospez.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n    strange_lst[i]\
    \ = minimum\n    strange_lst[i + 1] = maximum\n  end\n  return strange_lst\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpza6m9glh.lua:33:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 1, 1, 1, 4}\nstack traceback:\n\t/tmp/tmpza6m9glh.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  strange_lst[1] = min_value\n  strange_lst[#strange_lst+1] = max_value\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[1] = lst[i]\n\
    \    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5zb6omy.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4}\nstack traceback:\n\t/tmp/tmpu5zb6omy.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minval = lst[1]\n  local maxval = lst[1]\n\
    \  for i = 2, #lst do\n    if minval > lst[i] then\n      minval = lst[i]\n  \
    \  end\n    if maxval < lst[i] then\n      maxval = lst[i]\n    end\n  end\n \
    \ strange_lst[1] = minval\n  strange_lst[#strange_lst+1] = maxval\n  for i = 2,\
    \ #lst do\n    strange_lst[i] = strange_lst[i-1]\n  end\n  return table.concat(strange_lst)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplwuvpxyk.lua:28:\
    \ expected: {1, 4, 2, 3}\nactual: \"1111\"\nstack traceback:\n\t/tmp/tmplwuvpxyk.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      table.insert(strange_lst,\
    \ min_value)\n      min_value = lst[i]\n    elseif lst[i] > max_value then\n \
    \     table.insert(strange_lst, max_value)\n      max_value = lst[i]\n    end\n\
    \  end\n  table.insert(strange_lst, max_value)\n  table.insert(strange_lst, min_value)\n\
    \  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc8ml9_of.lua:33:\
    \ expected: {1, 4, 2, 3}\nactual: {4, 1}\nstack traceback:\n\t/tmp/tmpc8ml9_of.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n    strange_lst[#strange_lst+1]\
    \ = lst[i]\n  end\n  strange_lst[#strange_lst+1] = min_value\n  strange_lst[#strange_lst+1]\
    \ = max_value\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vkwupe6.lua:25:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 3, 4, 1, 4}\nstack traceback:\n\t/tmp/tmp4vkwupe6.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      strange_lst[i] =\
    \ min_value\n    elseif lst[i] > max_value then\n      strange_lst[i] = max_value\n\
    \    end\n  end\n  for i = 1, #lst do\n    if lst[i] > max_value then\n      strange_lst[i]\
    \ = max_value\n    end\n  end\n  for i = 1, #lst do\n    if lst[i] < min_value\
    \ then\n      strange_lst[i] = min_value\n    end\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpno8_6iuu.lua:39:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpno8_6iuu.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = tonumber(lst[1])\n  local max_value\
    \ = tonumber(lst[2])\n  for i = 2, #lst do\n    local value = tonumber(lst[i])\n\
    \    if value < min_value then\n      min_value = value\n      strange_lst[1]\
    \ = min_value\n    elseif value > max_value then\n      max_value = value\n  \
    \    strange_lst[2] = max_value\n    else\n      strange_lst[1] = value\n    \
    \  strange_lst[2] = value\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ze4v4i7.lua:28:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 4, 3, 4}\nstack traceback:\n\t/tmp/tmp_ze4v4i7.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n  end\n\
    \  strange_lst[1] = minimum\n  strange_lst[#strange_lst+1] = maximum\n  for i\
    \ = 2, #lst do\n    if minimum > lst[i] then\n      strange_lst[i] = minimum\n\
    \    end\n    if maximum < lst[i] then\n      strange_lst[i] = maximum\n    end\n\
    \  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg8mrh39f.lua:33:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4, 4}\nstack traceback:\n\t/tmp/tmpg8mrh39f.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum > lst[i] and minimum or lst[i]\n\
    \    maximum = maximum < lst[i] and maximum or lst[i]\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpin1_nr7d.lua:21:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 1, 3, 1, 4, 1}\nstack traceback:\n\t/tmp/tmpin1_nr7d.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n    minimum = maximum\n\
    \    maximum = lst[i]\n  end\n  strange_lst[#strange_lst+1] = minimum\n  strange_lst[#strange_lst+1]\
    \ = maximum\n  return table.concat(strange_lst)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9c52l74e.lua:29:\
    \ expected: {1, 4, 2, 3}\nactual: \"12233444\"\nstack traceback:\n\t/tmp/tmp9c52l74e.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local strange_lst2 = {}\n  local strange_lst3 =\
    \ {}\n  local strange_lst4 = {}\n  local strange_lst5 = {}\n  local strange_lst6\
    \ = {}\n  local strange_lst7 = {}\n  local strange_lst8 = {}\n  local strange_lst9\
    \ = {}\n  local strange_lst10 = {}\n  local strange_lst11 = {}\n  local strange_lst12\
    \ = {}\n  local strange_lst13 = {}\n  local strange_lst14 = {}\n  local strange_lst15\
    \ = {}\n  local strange_lst16 = {}\n  local strange_lst17 = {}\n  local strange_lst18\
    \ = {}\n  local strange_lst19 = {}\n  local strange_lst20 = {}\n  local strange_lst21\
    \ = {}\n  local strange_lst22 = {}\n  local strange_lst23 = {}\n  local strange_lst24\
    \ = {}\n  local strange_lst25 = {}\n  local strange_lst26 = {}\n  local strange_lst27\
    \ = {}\n  local strange_lst28 = {}\n  local strange_lst29 = {}\n  local strange_lst30\
    \ = {}\n  local strange_lst31 = {}\n  local strange_lst32 = {}\n  local strange_lst33\
    \ = {}\n  local strange_lst34 = {}\n  local strange_lst35 = {}\n  local strange_lst36\
    \ = {}\n  local strange_lst37 = {}\n  local strange_lst38 = {}\n  local strange_lst39\
    \ = {}\n  local strange_lst40 = {}\n  local strange_lst41 = {}\n  local strange_lst42\
    \ = {}\n  local strange_lst43 = {}\n  local strange_lst44 = {}\n  local strange_lst45\
    \ = {}\n  local strange_lst46 = {}\n  local strange_lst47 = {}\n  local strange_lst48\
    \ = {}\n  local strange_lst49 = {}\n  local strange_lst50 = {}\n  local strange_lst51\
    \ = {}\n  local strange_lst52 = {}\n  local strange_lst53 = {}\n  local strange_lst54\
    \ = {}\n  local strange_lst55 = {}\n  local strange_lst56 = \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplu2sixvc.lua:62: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    else\n      strange_lst[#strange_lst+1] = min_value\n      strange_lst[#strange_lst+1]\
    \ = max_value\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpca3ex7u8.lua:32:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4, 1, 4, 1, 4, 1, 4}\nstack traceback:\n\
    \t/tmp/tmpca3ex7u8.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local sorted_list = { }\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum > lst[i] and minimum or lst[i]\n\
    \    maximum = maximum < lst[i] and maximum or lst[i]\n    table.insert(sorted_list,\
    \ minimum)\n    table.insert(sorted_list, maximum)\n    table.insert(sorted_list,\
    \ lst[i])\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpttjmh_7w.lua:22:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 1, 2, 3, 1, 3, 4, 1, 4}\nstack traceback:\n\
    \t/tmp/tmpttjmh_7w.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum > lst[i] and lst[i] or minimum\n\
    \    maximum = maximum < lst[i] and lst[i] or maximum\n    strange_lst[i] = minimum\n\
    \    strange_lst[#strange_lst+1] = maximum\n  end\n  return strange_lst\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgugj1v7e.lua:21:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 1, 1, 1, 2, 3, 4}\nstack traceback:\n\t\
    /tmp/tmpgugj1v7e.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n    minimum = maximum\n\
    \    maximum = lst[i]\n  end\n  strange_lst[#strange_lst+1] = minimum\n  strange_lst[#strange_lst+1]\
    \ = maximum\n  return table.concat(strange_lst)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9c52l74e.lua:29:\
    \ expected: {1, 4, 2, 3}\nactual: \"12233444\"\nstack traceback:\n\t/tmp/tmp9c52l74e.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum or lst[i]\n    maximum = maximum\
    \ or lst[i]\n    if minimum > maximum then\n      minimum, maximum = maximum,\
    \ minimum\n    end\n    strange_lst[i] = minimum\n    strange_lst[i + 1] = maximum\n\
    \  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekcy60dz.lua:24:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpekcy60dz.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n    strange_lst[#strange_lst+1]\
    \ = lst[i]\n  end\n  strange_lst[#strange_lst+1] = min_value\n  strange_lst[#strange_lst+1]\
    \ = max_value\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vkwupe6.lua:25:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 3, 4, 1, 4}\nstack traceback:\n\t/tmp/tmp4vkwupe6.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  strange_lst[1] = min_value\n  strange_lst[#strange_lst+1] = max_value\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[1] = lst[i]\n\
    \    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5zb6omy.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4}\nstack traceback:\n\t/tmp/tmpu5zb6omy.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  strange_lst[1] = min_value\n  strange_lst[#strange_lst+1] = max_value\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68i6qyz1.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4}\nstack traceback:\n\t/tmp/tmp68i6qyz1.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  table.insert(strange_lst, min_value)\n  table.insert(strange_lst, max_value)\n\
    \  table.insert(strange_lst, min_value)\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzaix3cz1.lua:25:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4, 1}\nstack traceback:\n\t/tmp/tmpzaix3cz1.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #strange_lst do\n    if strange_lst[i] < min_value then\n      strange_lst[i]\
    \ = min_value\n    elseif strange_lst[i] > max_value then\n      strange_lst[i]\
    \ = max_value\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a7kwx4y.lua:29:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp_a7kwx4y.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      strange_lst[i] =\
    \ min_value\n    elseif lst[i] > max_value then\n      strange_lst[i] = max_value\n\
    \    end\n  end\n  for i = 1, #lst do\n    if lst[i] > min_value then\n      strange_lst[i]\
    \ = min_value\n    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pry6wzb.lua:34:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmp3pry6wzb.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_val = lst[1]\n  local max_val = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_val then\n      min_val = lst[i]\n\
    \    elseif lst[i] > max_val then\n      max_val = lst[i]\n    end\n  end\n  strange_lst[1]\
    \ = min_val\n  strange_lst[#strange_lst+1] = max_val\n  for i = 2, #lst do\n \
    \   if lst[i] < min_val then\n      strange_lst[#strange_lst+1] = lst[i]\n   \
    \ elseif lst[i] > max_val then\n      strange_lst[1] = lst[i]\n    end\n  end\n\
    \  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4hy9k83.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4}\nstack traceback:\n\t/tmp/tmpy4hy9k83.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_val = lst[1]\n  local max_val = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_val then\n      min_val = lst[i]\n\
    \    elseif lst[i] > max_val then\n      max_val = lst[i]\n    end\n    strange_lst[#strange_lst+1]\
    \ = lst[i]\n  end\n  strange_lst[#strange_lst+1] = min_val\n  strange_lst[#strange_lst+1]\
    \ = max_val\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5rlewu3.lua:25:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 3, 4, 1, 4}\nstack traceback:\n\t/tmp/tmpl5rlewu3.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum > lst[i] and minimum or lst[i]\n\
    \    maximum = maximum < lst[i] and maximum or lst[i]\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpin1_nr7d.lua:21:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 1, 3, 1, 4, 1}\nstack traceback:\n\t/tmp/tmpin1_nr7d.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum or lst[i]\n    maximum = maximum\
    \ or lst[i]\n    if minimum > maximum then\n      minimum, maximum = maximum,\
    \ minimum\n    end\n    strange_lst[i] = minimum .. maximum .. lst[i]\n  end\n\
    \  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_mcjbey.lua:23:\
    \ expected: {1, 4, 2, 3}\nactual: {1, \"112\", \"113\", \"114\"}\nstack traceback:\n\
    \t/tmp/tmpw_mcjbey.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_val = lst[1]\n  local max_val = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_val then\n      min_val = lst[i]\n\
    \    elseif lst[i] > max_val then\n      max_val = lst[i]\n    end\n  end\n  strange_lst[1]\
    \ = min_val\n  strange_lst[#strange_lst+1] = max_val\n  for i = 2, #lst do\n \
    \   if lst[i] < min_val then\n      strange_lst[#strange_lst+1] = lst[i]\n   \
    \ elseif lst[i] > max_val then\n      strange_lst[1] = lst[i]\n    end\n  end\n\
    \  return strange_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4hy9k83.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4}\nstack traceback:\n\t/tmp/tmpy4hy9k83.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local sorted_list = { }\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  table.insert(sorted_list, min_value)\n  table.insert(sorted_list, max_value)\n\
    \  table.insert(sorted_list, lst[2])\n  table.insert(sorted_list, lst[3])\n  return\
    \ sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuzch648.lua:27:\
    \ expected: {5, 9, 6, 8, 7}\nactual: {5, 9, 6, 7}\nstack traceback:\n\t/tmp/tmpfuzch648.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum > lst[i] and minimum or lst[i]\n\
    \    maximum = maximum < lst[i] and maximum or lst[i]\n    strange_lst[#strange_lst+1]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpin1_nr7d.lua:21:\
    \ expected: {1, 4, 2, 3}\nactual: {2, 1, 3, 1, 4, 1}\nstack traceback:\n\t/tmp/tmpin1_nr7d.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  strange_lst[1] = min_value\n  strange_lst[#strange_lst+1] = max_value\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[1] = lst[i]\n\
    \    end\n  end\n  return strange_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5zb6omy.lua:31:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 4}\nstack traceback:\n\t/tmp/tmpu5zb6omy.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = lst\n  local strange_lst2 = strange_lst\n  local strange_lst3\
    \ = strange_lst\n  local strange_lst4 = strange_lst\n  local strange_lst5 = strange_lst\n\
    \  local strange_lst6 = strange_lst\n  local strange_lst7 = strange_lst\n  local\
    \ strange_lst8 = strange_lst\n  local strange_lst9 = strange_lst\n  local strange_lst10\
    \ = strange_lst\n  local strange_lst11 = strange_lst\n  local strange_lst12 =\
    \ strange_lst\n  local strange_lst13 = strange_lst\n  local strange_lst14 = strange_lst\n\
    \  local strange_lst15 = strange_lst\n  local strange_lst16 = strange_lst\n  local\
    \ strange_lst17 = strange_lst\n  local strange_lst18 = strange_lst\n  local strange_lst19\
    \ = strange_lst\n  local strange_lst20 = strange_lst\n  local strange_lst21 =\
    \ strange_lst\n  local strange_lst22 = strange_lst\n  local strange_lst23 = strange_lst\n\
    \  local strange_lst24 = strange_lst\n  local strange_lst25 = strange_lst\n  local\
    \ strange_lst26 = strange_lst\n  local strange_lst27 = strange_lst\n  local strange_lst28\
    \ = strange_lst\n  local strange_lst29 = strange_lst\n  local strange_lst30 =\
    \ strange_lst\n  local strange_lst31 = strange_lst\n  local strange_lst32 = strange_lst\n\
    \  local strange_lst33 = strange_lst\n  local strange_lst34 = strange_lst\n  local\
    \ strange_lst35 = strange_lst\n  local strange_lst36 = strange_lst\n  local strange_lst37\
    \ = strange_lst\n  local strange_lst38 = strange_lst\n  local strange_lst39 =\
    \ strange_lst\n  local strange_lst40 = strange_lst\n  local strange_lst4\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpid8vu41s.lua:62: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1660014800
- exit_code: 1
  program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\nlocal function strange_sort_list(lst)\n\
    \  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n  end\n\
    \  strange_lst[1] = minimum\n  strange_lst[#strange_lst+1] = maximum\n  for i\
    \ = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n    end\n\
    \    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n    strange_lst[i]\
    \ = minimum\n    strange_lst[#strange_lst+1] = maximum\n  end\n  return strange_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzm1x01my.lua:35:\
    \ expected: {1, 4, 2, 3}\nactual: {1, 1, 1, 1, 4}\nstack traceback:\n\t/tmp/tmpzm1x01my.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014800
